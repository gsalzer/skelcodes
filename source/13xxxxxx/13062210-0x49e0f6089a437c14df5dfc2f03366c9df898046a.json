{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/dao/Governance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./IRewardDistributionRecipient.sol\\\";\\r\\nimport \\\"./VotingPowerFees.sol\\\";\\r\\nimport \\\"./VotingPowerFeesAndRewards.sol\\\";\\r\\nimport \\\"../interfaces/yearn/IGovernance.sol\\\";\\r\\n\\r\\ncontract Governance is VotingPowerFeesAndRewards {\\r\\n    uint256 internal proposalCount;\\r\\n    uint256 internal period = 3 days; // voting period in blocks ~ 17280 3 days for 15s/block\\r\\n    uint256 internal minimum = 1e18;\\r\\n    address internal governance;\\r\\n    mapping(address => uint256) public voteLock; // period that your sake it locked to keep it for voting\\r\\n\\r\\n    struct Proposal {\\r\\n        uint256 id;\\r\\n        address proposer;\\r\\n        string ipfsCid;\\r\\n        mapping(address => uint256) forVotes;\\r\\n        mapping(address => uint256) againstVotes;\\r\\n        uint256 totalForVotes;\\r\\n        uint256 totalAgainstVotes;\\r\\n        uint256 start; // block start;\\r\\n        uint256 end; // start + period\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => Proposal) public proposals;\\r\\n\\r\\n    event NewGovernanceAddress(address newGovernance);\\r\\n    event NewMinimumValue(uint256 newMinimum);\\r\\n    event NewPeriodValue(uint256 newPeriod);\\r\\n\\r\\n    modifier onlyGovernance() {\\r\\n        require(msg.sender == governance, \\\"!governance\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* Getters */\\r\\n\\r\\n    /// @notice Returns proposalCount value.\\r\\n    /// @return _proposalCount - uint256 value\\r\\n    function getProposalCount() external view returns (uint256 _proposalCount) {\\r\\n        return proposalCount;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns period value.\\r\\n    /// @dev Voting period in seconds\\r\\n    /// @return _period - uint256 value\\r\\n    function getPeriod() external view returns (uint256 _period) {\\r\\n        return period;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns minimum value.\\r\\n    /// @dev minimum value is the value of the voting power which user must have to create proposal.\\r\\n    /// @return _minimum - uint256 value\\r\\n    function getMinimum() external view returns (uint256 _minimum) {\\r\\n        return minimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns governance address.\\r\\n    /// @return _governance - address value\\r\\n    function getGovernance() external view returns (address _governance) {\\r\\n        return governance;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns vote lockFor the specified user\\r\\n    /// @param _user user for whom to get voteLock value.\\r\\n    /// @return _voteLock - user's uint256 vote lock timestamp\\r\\n    function getVoteLock(address _user) external view returns (uint256 _voteLock) {\\r\\n        return voteLock[_user];\\r\\n    }\\r\\n\\r\\n    /// @notice Returns proposal's data with the specified proposal id.\\r\\n    /// @param _proposalId - an index (count number) in the proposals mapping.\\r\\n    /// @return id - proposal id\\r\\n    /// @return proposer - proposal author address\\r\\n    /// @return ipfsCid - ipfs cid of the proposal text\\r\\n    /// @return totalForVotes - total amount of the voting power used for voting **for** proposal\\r\\n    /// @return totalAgainstVotes - total amount of the voting power used for voting **against** proposal\\r\\n    /// @return start - timestamp when proposal was created\\r\\n    /// @return end - timestamp when proposal will be ended and disabled for voting (end = start + period)\\r\\n    function getProposal(uint256 _proposalId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 id,\\r\\n            address proposer,\\r\\n            string memory ipfsCid,\\r\\n            uint256 totalForVotes,\\r\\n            uint256 totalAgainstVotes,\\r\\n            uint256 start,\\r\\n            uint256 end\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            proposals[_proposalId].id,\\r\\n            proposals[_proposalId].proposer,\\r\\n            proposals[_proposalId].ipfsCid,\\r\\n            proposals[_proposalId].totalForVotes,\\r\\n            proposals[_proposalId].totalAgainstVotes,\\r\\n            proposals[_proposalId].start,\\r\\n            proposals[_proposalId].end\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Returns proposals' data in the range of ids.\\r\\n    /// @dev Revert will be thrown if _fromId >= _toId\\r\\n    /// @param _fromId - proposal id/index at which to start extraction.\\r\\n    /// @param _toId - proposal id/index *before* which to end extraction.\\r\\n    /// @return id - proposals ids\\r\\n    /// @return proposer - proposals authors addresses\\r\\n    /// @return ipfsCid - ipfs cids of the proposals' texts\\r\\n    /// @return totalForVotes - total amount of the voting power used for voting **for** proposals\\r\\n    /// @return totalAgainstVotes - total amount of the voting power used for voting **against** proposals\\r\\n    /// @return start - timestamps when proposals was created\\r\\n    /// @return end - timestamps when proposals will be ended and disabled for voting (end = start + period)\\r\\n    function getProposals(uint256 _fromId, uint256 _toId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256[] memory id,\\r\\n            address[] memory proposer,\\r\\n            string[] memory ipfsCid,\\r\\n            uint256[] memory totalForVotes,\\r\\n            uint256[] memory totalAgainstVotes,\\r\\n            uint256[] memory start,\\r\\n            uint256[] memory end\\r\\n        )\\r\\n    {\\r\\n        require(_fromId < _toId, \\\"invalid range\\\");\\r\\n        uint256 numberOfProposals = _toId.sub(_fromId);\\r\\n        id = new uint256[](numberOfProposals);\\r\\n        proposer = new address[](numberOfProposals);\\r\\n        ipfsCid = new string[](numberOfProposals);\\r\\n        totalForVotes = new uint256[](numberOfProposals);\\r\\n        totalAgainstVotes = new uint256[](numberOfProposals);\\r\\n        start = new uint256[](numberOfProposals);\\r\\n        end = new uint256[](numberOfProposals);\\r\\n        for (uint256 i = 0; i < numberOfProposals; i = i.add(1)) {\\r\\n            uint256 proposalId = _fromId.add(i);\\r\\n            id[i] = proposals[proposalId].id;\\r\\n            proposer[i] = proposals[proposalId].proposer;\\r\\n            ipfsCid[i] = proposals[proposalId].ipfsCid;\\r\\n            totalForVotes[i] = proposals[proposalId].totalForVotes;\\r\\n            totalAgainstVotes[i] = proposals[proposalId].totalAgainstVotes;\\r\\n            start[i] = proposals[proposalId].start;\\r\\n            end[i] = proposals[proposalId].end;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Returns user's votes for the specified proposal id.\\r\\n    /// @param _proposalId - an index (count number) in the proposals mapping.\\r\\n    /// @param _user - user for which votes are requested\\r\\n    /// @return forVotes - uint256 value\\r\\n    function getProposalForVotes(uint256 _proposalId, address _user) external view returns (uint256 forVotes) {\\r\\n        return (proposals[_proposalId].forVotes[_user]);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns user's votes against the specified proposal id.\\r\\n    /// @param _proposalId - an index (count number) in the proposals mapping.\\r\\n    /// @param _user - user for which votes are requested\\r\\n    /// @return againstVotes - uint256 value\\r\\n    function getProposalAgainstVotes(uint256 _proposalId, address _user) external view returns (uint256 againstVotes) {\\r\\n        return (proposals[_proposalId].againstVotes[_user]);\\r\\n    }\\r\\n\\r\\n    /// @notice Contract's constructor\\r\\n    /// @param _stakingToken Sets staking token\\r\\n    /// @param _feesToken Sets fees token\\r\\n    /// @param _rewardsToken Sets rewards token\\r\\n    /// @param _governance Sets governance address\\r\\n    constructor(\\r\\n        IERC20 _stakingToken,\\r\\n        IERC20 _feesToken,\\r\\n        IERC20 _rewardsToken,\\r\\n        address _governance\\r\\n    ) public VotingPowerFeesAndRewards(_stakingToken, _feesToken, _rewardsToken) {\\r\\n        governance = _governance;\\r\\n    }\\r\\n\\r\\n    /* Administration functionality */\\r\\n\\r\\n    /// @notice Fee collection for any other token\\r\\n    /// @dev Transfers token to the governance address\\r\\n    /// @param _token Token address\\r\\n    /// @param _amount Amount for transferring to the governance\\r\\n    function seize(IERC20 _token, uint256 _amount) external onlyGovernance {\\r\\n        require(_token != feesToken, \\\"feesToken\\\");\\r\\n        require(_token != rewardsToken, \\\"rewardsToken\\\");\\r\\n        require(_token != stakingToken, \\\"stakingToken\\\");\\r\\n        _token.safeTransfer(governance, _amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Sets staking token.\\r\\n    /// @param _stakingToken new staking token address.\\r\\n    function setStakingToken(IERC20 _stakingToken) external onlyGovernance {\\r\\n        stakingToken = _stakingToken;\\r\\n    }\\r\\n\\r\\n    /// @notice Sets governance.\\r\\n    /// @param _governance new governance value.\\r\\n    function setGovernance(address _governance) external onlyGovernance {\\r\\n        governance = _governance;\\r\\n        emit NewGovernanceAddress(governance);\\r\\n    }\\r\\n\\r\\n    /// @notice Sets minimum.\\r\\n    /// @param _minimum new minimum value.\\r\\n    function setMinimum(uint256 _minimum) external onlyGovernance {\\r\\n        minimum = _minimum;\\r\\n        emit NewMinimumValue(minimum);\\r\\n    }\\r\\n\\r\\n    /// @notice Sets period.\\r\\n    /// @param _period new period value.\\r\\n    function setPeriod(uint256 _period) external onlyGovernance {\\r\\n        period = _period;\\r\\n        emit NewPeriodValue(period);\\r\\n    }\\r\\n\\r\\n    /* Proposals and voting functionality */\\r\\n    /// @notice Creates new proposal without text, proposal settings are default on the contract.\\r\\n    /// @param _ipfsCid ipfs cid of the proposal's text\\r\\n    /// @dev User must have voting power >= minimum in order to create proposal.\\r\\n    /// New proposal will be added to the proposals mapping.\\r\\n    function propose(string calldata _ipfsCid) external {\\r\\n        require(balanceOf(msg.sender) >= minimum, \\\"<minimum\\\");\\r\\n        proposals[proposalCount++] = Proposal({\\r\\n            id: proposalCount,\\r\\n            proposer: msg.sender,\\r\\n            ipfsCid: _ipfsCid,\\r\\n            totalForVotes: 0,\\r\\n            totalAgainstVotes: 0,\\r\\n            start: block.timestamp,\\r\\n            end: period.add(block.timestamp)\\r\\n        });\\r\\n\\r\\n        voteLock[msg.sender] = period.add(block.timestamp);\\r\\n    }\\r\\n\\r\\n    function revokeProposal(uint256 _id) external {\\r\\n        require(proposals[_id].proposer == msg.sender, \\\"!proposer\\\");\\r\\n        proposals[_id].end = 0;\\r\\n    }\\r\\n\\r\\n    /// @notice Votes for the proposal using voting power.\\r\\n    /// @dev After voting function withdraws fee for the user(if breaker == false).\\r\\n    /// @param id proposal's id\\r\\n    function voteFor(uint256 id) external {\\r\\n        require(proposals[id].start < block.timestamp, \\\"<start\\\");\\r\\n        require(proposals[id].end > block.timestamp, \\\">end\\\");\\r\\n        uint256 votes = balanceOf(msg.sender).sub(proposals[id].forVotes[msg.sender]);\\r\\n        proposals[id].totalForVotes = proposals[id].totalForVotes.add(votes);\\r\\n        proposals[id].forVotes[msg.sender] = balanceOf(msg.sender);\\r\\n        // check that we will not reduce user's lock time (if he voted for another, newer proposal)\\r\\n        if (voteLock[msg.sender] < proposals[id].end) {\\r\\n            voteLock[msg.sender] = proposals[id].end;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Votes against the proposal using voting power.\\r\\n    /// @dev After voting function withdraws fee for the user.\\r\\n    /// @param id proposal's id\\r\\n    function voteAgainst(uint256 id) external {\\r\\n        require(proposals[id].start < block.timestamp, \\\"<start\\\");\\r\\n        require(proposals[id].end > block.timestamp, \\\">end\\\");\\r\\n        uint256 votes = balanceOf(msg.sender).sub(proposals[id].againstVotes[msg.sender]);\\r\\n        proposals[id].totalAgainstVotes = proposals[id].totalAgainstVotes.add(votes);\\r\\n        proposals[id].againstVotes[msg.sender] = balanceOf(msg.sender);\\r\\n\\r\\n        if (voteLock[msg.sender] < proposals[id].end) {\\r\\n            voteLock[msg.sender] = proposals[id].end;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* Staking, voting power functionality */\\r\\n    /// @notice Stakes token and adds voting power (with a 1:1 ratio)\\r\\n    /// @dev Token amount must be approved to this contract before staking.\\r\\n    /// Before staking contract withdraws fee for the user.\\r\\n    /// @param amount Amount to stake\\r\\n    function stake(uint256 amount) public override updateReward(msg.sender) {\\r\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\r\\n        super.stake(amount);\\r\\n        emit Staked(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraws token and subtracts voting power (with a 1:1 ratio)\\r\\n    /// @dev Tokens must be unlocked to withdraw (voteLock[msg.sender] < block.timestamp).\\r\\n    /// Before withdraw contract withdraws fee for the user.\\r\\n    /// @param amount Amount to withdraw\\r\\n    function withdraw(uint256 amount) nonReentrant public override updateReward(msg.sender) {\\r\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\r\\n        require(voteLock[msg.sender] < block.timestamp, \\\"!locked\\\");\\r\\n        super.withdraw(amount);\\r\\n        emit Withdrawn(msg.sender, amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dao/IRewardDistributionRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\nabstract contract IRewardDistributionRecipient is Ownable {\\r\\n    address rewardDistribution;\\r\\n\\r\\n    function notifyRewardAmount(uint256 reward) external virtual;\\r\\n\\r\\n    modifier onlyRewardDistribution() {\\r\\n        require(_msgSender() == rewardDistribution, \\\"Caller is not reward distribution\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setRewardDistribution(address _rewardDistribution) external onlyOwner {\\r\\n        rewardDistribution = _rewardDistribution;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/dao/VotingPowerFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./IRewardDistributionRecipient.sol\\\";\\r\\nimport \\\"./TokenToVotePowerStaking.sol\\\";\\r\\n\\r\\n/// @title Fees functionality for the voting power.\\r\\n/// @notice Fees are paid to this contracts in the erc20 token.\\r\\n/// This contract distributes fees between voting power holders.\\r\\n/// @dev Fees value is claimable.\\r\\ncontract VotingPowerFees is TokenToVotePowerStaking, ReentrancyGuard {\\r\\n    /// @dev Token in which fees are paid.\\r\\n    IERC20 internal feesToken;\\r\\n\\r\\n    /// @dev Accumulated ratio of the voting power to the fees. This is used to calculate\\r\\n    uint256 internal accumulatedRatio = 0;\\r\\n\\r\\n    /// @dev Fees savings amount fixed by the contract after the last claim.\\r\\n    uint256 internal lastBal = 0;\\r\\n\\r\\n    /// @notice User => accumulated ratio fixed after the last user's claim\\r\\n    mapping(address => uint256) public userAccumulatedRatio;\\r\\n\\r\\n    /// @notice Token in which fees are paid.\\r\\n    function getFeesToken() external view returns (IERC20 _feesToken) {\\r\\n        return feesToken;\\r\\n    }\\r\\n\\r\\n    /// @notice Accumulated ratio of the voting power to the fees. This is used to calculate\\r\\n    function getAccumulatedRatio() external view returns (uint256 _accumulatedRatio) {\\r\\n        return accumulatedRatio;\\r\\n    }\\r\\n\\r\\n    /// @notice Fees savings amount fixed by the contract after the last claim.\\r\\n    function getLastBal() external view returns (uint256 _lastBal) {\\r\\n        return lastBal;\\r\\n    }\\r\\n\\r\\n    /// @notice User => accumulated ratio fixed after the last user's claim\\r\\n    function getUserAccumulatedRatio(address _user) external view returns (uint256 _userAccumulatedRatio) {\\r\\n        return userAccumulatedRatio[_user];\\r\\n    }\\r\\n\\r\\n    /// @notice Contract's constructor\\r\\n    /// @param _stakingToken Sets staking token\\r\\n    /// @param _feesToken Sets fees token\\r\\n    constructor(IERC20 _stakingToken, IERC20 _feesToken) public TokenToVotePowerStaking(_stakingToken) {\\r\\n        feesToken = _feesToken;\\r\\n    }\\r\\n\\r\\n    /// @notice Makes contract update its fee (token) balance\\r\\n    /// @dev Updates accumulatedRatio and lastBal\\r\\n    function updateFees() public {\\r\\n        if (totalSupply() > 0) {\\r\\n            uint256 _lastBal = IERC20(feesToken).balanceOf(address(this));\\r\\n            if (_lastBal > 0) {\\r\\n                uint256 _diff = _lastBal.sub(lastBal);\\r\\n                if (_diff > 0) {\\r\\n                    uint256 _ratio = _diff.mul(1e18).div(totalSupply());\\r\\n                    if (_ratio > 0) {\\r\\n                        accumulatedRatio = accumulatedRatio.add(_ratio);\\r\\n                        lastBal = _lastBal;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers fees part (token amount) to the user accordingly to the user's voting power share\\r\\n    function withdrawFees() external {\\r\\n        _withdrawFeesFor(msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @dev bug WIP: Looks like it won't work properly if all of the users\\r\\n    /// will claim their rewards (balance will be 0) and then new user will receive\\r\\n    /// voting power and try to claim (revert). Or new user will claim reward after\\r\\n    /// @param recipient User who will receive its fee part.\\r\\n    function _withdrawFeesFor(address recipient) nonReentrant internal {\\r\\n        updateFees();\\r\\n        uint256 _supplied = balanceOf(recipient);\\r\\n        if (_supplied > 0) {\\r\\n            uint256 _supplyIndex = userAccumulatedRatio[recipient];\\r\\n            userAccumulatedRatio[recipient] = accumulatedRatio;\\r\\n            uint256 _delta = accumulatedRatio.sub(_supplyIndex);\\r\\n            if (_delta > 0) {\\r\\n                uint256 _share = _supplied.mul(_delta).div(1e18);\\r\\n\\r\\n                IERC20(feesToken).safeTransfer(recipient, _share);\\r\\n                lastBal = IERC20(feesToken).balanceOf(address(this));\\r\\n            }\\r\\n        } else {\\r\\n            userAccumulatedRatio[recipient] = accumulatedRatio;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/dao/VotingPowerFeesAndRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\r\\nimport \\\"./IRewardDistributionRecipient.sol\\\";\\r\\nimport \\\"./VotingPowerFees.sol\\\";\\r\\n\\r\\n/// @title Rewards functionality for the voting power.\\r\\n/// @notice Rewards are paid by some centralized treasury.\\r\\n/// Then this contract distributes rewards to the voting power holders.\\r\\ncontract VotingPowerFeesAndRewards is IRewardDistributionRecipient, VotingPowerFees{\\r\\n    uint256 internal constant DURATION = 7 days;\\r\\n\\r\\n    uint256 internal periodFinish = 0;\\r\\n\\r\\n    uint256 internal rewardRate = 0;\\r\\n\\r\\n    IERC20 internal rewardsToken;\\r\\n\\r\\n    uint256 internal lastUpdateTime;\\r\\n\\r\\n    uint256 internal rewardPerTokenStored;\\r\\n\\r\\n    mapping(address => uint256) internal userRewardPerTokenPaid;\\r\\n\\r\\n    mapping(address => uint256) internal rewards;\\r\\n\\r\\n    /// @notice Returns DURATION value\\r\\n    /// @return _DURATION - uint256 value\\r\\n    function getDuration() external pure returns (uint256 _DURATION) {\\r\\n        return DURATION;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns periodFinish value\\r\\n    /// @return _periodFinish - uint256 value\\r\\n    function getPeriodFinish() external view returns (uint256 _periodFinish) {\\r\\n        return periodFinish;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns rewardRate value\\r\\n    /// @return _rewardRate - uint256 value\\r\\n    function getRewardRate() external view returns (uint256 _rewardRate) {\\r\\n        return rewardRate;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns rewardsToken value\\r\\n    /// @return _rewardsToken - IERC20 value\\r\\n    function getRewardsToken() external view returns (IERC20 _rewardsToken) {\\r\\n        return rewardsToken;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns lastUpdateTime value\\r\\n    /// @return _lastUpdateTime - uint256 value\\r\\n    function getLastUpdateTime() external view returns (uint256 _lastUpdateTime) {\\r\\n        return lastUpdateTime;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns rewardPerTokenStored value\\r\\n    /// @return _rewardPerTokenStored - uint256 value\\r\\n    function getRewardPerTokenStored() external view returns (uint256 _rewardPerTokenStored) {\\r\\n        return rewardPerTokenStored;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns user's reward per token paid\\r\\n    /// @param _user address of the user for whom data are requested\\r\\n    /// @return _userRewardPerTokenPaid - uint256 value\\r\\n    function getUserRewardPerTokenPaid(address _user) external view returns (uint256 _userRewardPerTokenPaid) {\\r\\n        return userRewardPerTokenPaid[_user];\\r\\n    }\\r\\n\\r\\n    /// @notice Returns user's available rewards\\r\\n    /// @param _user address of the user for whom data are requested\\r\\n    /// @return _rewards - uint256 value\\r\\n    function getRewards(address _user) external view returns (uint256 _rewards) {\\r\\n        return rewards[_user];\\r\\n    }\\r\\n\\r\\n    event RewardAdded(uint256 reward);\\r\\n    event Staked(address indexed user, uint256 amount);\\r\\n    event Withdrawn(address indexed user, uint256 amount);\\r\\n    event RewardPaid(address indexed user, uint256 reward);\\r\\n\\r\\n    /// @notice Contract's constructor\\r\\n    /// @param _stakingToken Sets staking token\\r\\n    /// @param _feesToken Sets fees token\\r\\n    /// @param _rewardsToken Sets rewards token\\r\\n    constructor(\\r\\n        IERC20 _stakingToken,\\r\\n        IERC20 _feesToken,\\r\\n        IERC20 _rewardsToken\\r\\n    ) public VotingPowerFees(_stakingToken, _feesToken) {\\r\\n        rewardsToken = _rewardsToken;\\r\\n    }\\r\\n\\r\\n    /// @notice Claims reward for user\\r\\n    /// @param account user for which to claim\\r\\n    modifier updateReward(address account) {\\r\\n        rewardPerTokenStored = rewardPerToken();\\r\\n        lastUpdateTime = lastTimeRewardApplicable();\\r\\n        if (account != address(0)) {\\r\\n            rewards[account] = earned(account);\\r\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Return timestamp last time reward applicable\\r\\n    /// @return lastTimeRewardApplicable - uint256\\r\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\r\\n        return Math.min(block.timestamp, periodFinish);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns reward per full (10^18) token.\\r\\n    /// @return rewardPerToken - uint256\\r\\n    function rewardPerToken() public view returns (uint256) {\\r\\n        if (totalSupply() == 0) {\\r\\n            return rewardPerTokenStored;\\r\\n        }\\r\\n        return\\r\\n            rewardPerTokenStored.add(\\r\\n                lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(totalSupply())\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @notice Returns earned reward fot account\\r\\n    /// @param account user for which reward amount is requested\\r\\n    /// @return earned - uint256\\r\\n    function earned(address account) public view returns (uint256) {\\r\\n        return\\r\\n            balanceOf(account).mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(\\r\\n                rewards[account]\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @notice Pays earned reward to the user\\r\\n    function getReward() nonReentrant external updateReward(msg.sender) {\\r\\n        uint256 reward = earned(msg.sender);\\r\\n        if (reward > 0) {\\r\\n            rewards[msg.sender] = 0;\\r\\n            rewardsToken.safeTransfer(msg.sender, reward);\\r\\n            emit RewardPaid(msg.sender, reward);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Notifies contract about the reward amount\\r\\n    /// @param reward reward amount\\r\\n    function notifyRewardAmount(uint256 reward) external override onlyRewardDistribution updateReward(address(0)) {\\r\\n        if (block.timestamp >= periodFinish) {\\r\\n            rewardRate = reward.div(DURATION);\\r\\n        } else {\\r\\n            uint256 remaining = periodFinish.sub(block.timestamp);\\r\\n            uint256 leftover = remaining.mul(rewardRate);\\r\\n            rewardRate = reward.add(leftover).div(DURATION);\\r\\n        }\\r\\n        lastUpdateTime = block.timestamp;\\r\\n        periodFinish = block.timestamp.add(DURATION);\\r\\n        emit RewardAdded(reward);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/yearn/IGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IGovernance {\\r\\n    function withdraw(uint256) external;\\r\\n\\r\\n    function getReward() external;\\r\\n\\r\\n    function stake(uint256) external;\\r\\n\\r\\n    function balanceOf(address) external view returns (uint256);\\r\\n\\r\\n    function exit() external;\\r\\n\\r\\n    function voteFor(uint256) external;\\r\\n\\r\\n    function voteAgainst(uint256) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dao/TokenToVotePowerStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\n/// @title ERC20 token staking to receive voting power\\r\\n/// @notice This contracts allow to get voting power for DAO voting\\r\\n/// @dev Voting power non-transferable, user can't send or receive it from another user, only get it from staking.\\r\\ncontract TokenToVotePowerStaking {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /// @dev Token which can be staked in exchange for voting power\\r\\n    IERC20 internal stakingToken;\\r\\n    /// @dev Total amount of the voting power in the system\\r\\n    uint256 private _totalSupply;\\r\\n    /// @dev Voting power balances\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    /// @notice Returns staking token address\\r\\n    /// @return _stakingToken - staking token address\\r\\n    function getStakingToken() external view returns(IERC20 _stakingToken){\\r\\n        return stakingToken;\\r\\n    }\\r\\n\\r\\n    /// @notice Contract constructor\\r\\n    /// @param _stakingToken Sets staking token\\r\\n    constructor(IERC20 _stakingToken) public {\\r\\n        stakingToken = _stakingToken;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns amount of the voting power in the system\\r\\n    /// @dev Returns _totalSupply variable\\r\\n    /// @return Voting power amount\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns account's voting power balance\\r\\n    /// @param account The address of the user\\r\\n    /// @return Voting power balance of the user\\r\\n    function balanceOf(address account) public view returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /// @notice Stakes token and adds voting power (with a 1:1 ratio)\\r\\n    /// @dev Token amount must be approved to this contract before staking.\\r\\n    /// @param amount Amount to stake\\r\\n    function stake(uint256 amount) public virtual {\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\r\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraws token and subtracts voting power (with a 1:1 ratio)\\r\\n    /// @param amount Amount to withdraw\\r\\n    function withdraw(uint256 amount) public virtual {\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\r\\n        stakingToken.safeTransfer(msg.sender, amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_feesToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"NewGovernanceAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimum\",\"type\":\"uint256\"}],\"name\":\"NewMinimumValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"NewPeriodValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccumulatedRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_accumulatedRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_DURATION\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeesToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_feesToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lastBal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lastUpdateTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPeriodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_periodFinish\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ipfsCid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalForVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAgainstVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getProposalAgainstVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getProposalForVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toId\",\"type\":\"uint256\"}],\"name\":\"getProposals\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"id\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"proposer\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"ipfsCid\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalForVotes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalAgainstVotes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"start\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"end\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerTokenStored\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserAccumulatedRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_userAccumulatedRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_userRewardPerTokenPaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getVoteLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteLock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ipfsCid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalForVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAgainstVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ipfsCid\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"revokeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimum\",\"type\":\"uint256\"}],\"name\":\"setMinimum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardDistribution\",\"type\":\"address\"}],\"name\":\"setRewardDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"name\":\"setStakingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAccumulatedRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"voteAgainst\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"voteFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voteLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Governance","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d40adff097e3cde2b96d81a4727f3e47093f3405000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000f827a8a1472d901a2e6fa7e129141d39b8171cfd0000000000000000000000000fded627a53ce682e2ee8451b7bc24042dea8f5f","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://40c097e475fffc11793c57eac95b90bdcb5b115ab35ec9475f2bc48a811597af"}]}