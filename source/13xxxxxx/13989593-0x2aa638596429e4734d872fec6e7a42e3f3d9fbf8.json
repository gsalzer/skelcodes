{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Warden.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./open-zeppelin/interfaces/IERC20.sol\\\";\\nimport \\\"./open-zeppelin/libraries/SafeERC20.sol\\\";\\nimport \\\"./open-zeppelin/utils/Ownable.sol\\\";\\nimport \\\"./open-zeppelin/utils/Pausable.sol\\\";\\nimport \\\"./open-zeppelin/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IVotingEscrow.sol\\\";\\nimport \\\"./interfaces/IVotingEscrowDelegation.sol\\\";\\n\\n/** @title Warden contract  */\\n/// @author Paladin\\n/*\\n    Delegation market based on Curve VotingEscrowDelegation contract\\n*/\\ncontract Warden is Ownable, Pausable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // Constants :\\n    uint256 public constant UNIT = 1e18;\\n    uint256 public constant MAX_PCT = 10000;\\n    uint256 public constant WEEK = 7 * 86400;\\n\\n    // Storage :\\n\\n    /** @notice Offer made by an user to buy a given amount of his votes \\n    user : Address of the user making the offer\\n    pricePerVote : Price per vote per second, set by the user\\n    minPerc : Minimum percent of users voting token balance to buy for a Boost (in BPS)\\n    maxPerc : Maximum percent of users total voting token balance available to delegate (in BPS)\\n    */\\n    struct BoostOffer {\\n        // Address of the user making the offer\\n        address user;\\n        // Price per vote per second, set by the user\\n        uint256 pricePerVote;\\n        // Minimum percent of users voting token balance to buy for a Boost\\n        uint16 minPerc; //bps\\n        // Maximum percent of users total voting token balance available to delegate\\n        uint16 maxPerc; //bps\\n    }\\n\\n    /** @notice ERC20 used to pay for DelegationBoost */\\n    IERC20 public feeToken;\\n    /** @notice Address of the votingToken to delegate */\\n    IVotingEscrow public votingEscrow;\\n    /** @notice Address of the Delegation Boost contract */\\n    IVotingEscrowDelegation public delegationBoost;\\n\\n    /** @notice ratio of fees to be set as Reserve (in BPS) */\\n    uint256 public feeReserveRatio; //bps\\n    /** @notice Total Amount in the Reserve */\\n    uint256 public reserveAmount;\\n    /** @notice Address allowed to withdraw from the Reserve */\\n    address public reserveManager;\\n\\n    /** @notice Min Percent of delegator votes to buy required to purchase a Delegation Boost (in BPS) */\\n    uint256 public minPercRequired; //bps\\n\\n    /** @notice Minimum delegation time, taken from veBoost contract */\\n    uint256 public minDelegationTime = 1 weeks;\\n\\n    /** @notice List of all current registered users and their delegation offer */\\n    BoostOffer[] public offers;\\n\\n    /** @notice Index of the user in the offers array */\\n    mapping(address => uint256) public userIndex;\\n\\n    /** @notice Amount of fees earned by users through Boost selling */\\n    mapping(address => uint256) public earnedFees;\\n\\n    bool private _claimBlocked;\\n\\n    // Events :\\n\\n    event Registred(address indexed user, uint256 price);\\n\\n    event UpdateOffer(address indexed user, uint256 newPrice);\\n\\n    event Quit(address indexed user);\\n\\n    event BoostPurchase(\\n        address indexed delegator,\\n        address indexed receiver,\\n        uint256 tokenId,\\n        uint256 percent, //bps\\n        uint256 price,\\n        uint256 paidFeeAmount,\\n        uint256 expiryTime\\n    );\\n\\n    event Claim(address indexed user, uint256 amount);\\n\\n    modifier onlyAllowed(){\\n        require(msg.sender == reserveManager || msg.sender == owner(), \\\"Warden: Not allowed\\\");\\n        _;\\n    }\\n\\n    // Constructor :\\n    /**\\n     * @dev Creates the contract, set the given base parameters\\n     * @param _feeToken address of the token used to pay fees\\n     * @param _votingEscrow address of the voting token to delegate\\n     * @param _delegationBoost address of the contract handling delegation\\n     * @param _feeReserveRatio Percent of fees to be set as Reserve (bps)\\n     * @param _minPercRequired Minimum percent of user\\n     */\\n    constructor(\\n        address _feeToken,\\n        address _votingEscrow,\\n        address _delegationBoost,\\n        uint256 _feeReserveRatio, //bps\\n        uint256 _minPercRequired //bps\\n    ) {\\n        feeToken = IERC20(_feeToken);\\n        votingEscrow = IVotingEscrow(_votingEscrow);\\n        delegationBoost = IVotingEscrowDelegation(_delegationBoost);\\n\\n        require(_feeReserveRatio <= 5000);\\n        require(_minPercRequired > 0 && _minPercRequired <= 10000);\\n        feeReserveRatio = _feeReserveRatio;\\n        minPercRequired = _minPercRequired;\\n\\n        // fill index 0 in the offers array\\n        // since we want to use index 0 for unregistered users\\n        offers.push(BoostOffer(address(0), 0, 0, 0));\\n    }\\n\\n    // Functions :\\n\\n    function offersIndex() external view returns(uint256){\\n        return offers.length;\\n    }\\n\\n    /**\\n     * @notice Registers a new user wanting to sell its delegation\\n     * @dev Regsiters a new user, creates a BoostOffer with the given parameters\\n     * @param pricePerVote Price of 1 vote per second (in wei)\\n     * @param minPerc Minimum percent of users voting token balance to buy for a Boost (in BPS)\\n     * @param maxPerc Maximum percent of users total voting token balance available to delegate (in BPS)\\n     */\\n    function register(\\n        uint256 pricePerVote,\\n        uint16 minPerc,\\n        uint16 maxPerc\\n    ) external whenNotPaused returns(bool) {\\n        address user = msg.sender;\\n        require(userIndex[user] == 0, \\\"Warden: Already registered\\\");\\n        require(\\n            delegationBoost.isApprovedForAll(user, address(this)),\\n            \\\"Warden: Not operator for caller\\\"\\n        );\\n\\n        require(pricePerVote > 0, \\\"Warden: Price cannot be 0\\\");\\n        require(maxPerc <= 10000, \\\"Warden: maxPerc too high\\\");\\n        require(minPerc <= maxPerc, \\\"Warden: minPerc is over maxPerc\\\");\\n        require(minPerc >= minPercRequired, \\\"Warden: minPerc too low\\\");\\n\\n        // Create the BoostOffer for the new user, and add it to the storage\\n        userIndex[user] = offers.length;\\n        offers.push(BoostOffer(user, pricePerVote, minPerc, maxPerc));\\n\\n        emit Registred(user, pricePerVote);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Updates an user BoostOffer parameters\\n     * @dev Updates parameters for the user's BoostOffer\\n     * @param pricePerVote Price of 1 vote per second (in wei)\\n     * @param minPerc Minimum percent of users voting token balance to buy for a Boost (in BPS)\\n     * @param maxPerc Maximum percent of users total voting token balance available to delegate (in BPS)\\n     */\\n    function updateOffer(\\n        uint256 pricePerVote,\\n        uint16 minPerc,\\n        uint16 maxPerc\\n    ) external whenNotPaused returns(bool) {\\n        // Fet the user index, and check for registration\\n        address user = msg.sender;\\n        uint256 index = userIndex[user];\\n        require(index != 0, \\\"Warden: Not registered\\\");\\n\\n        // Fetch the BoostOffer to update\\n        BoostOffer storage offer = offers[index];\\n\\n        require(offer.user == msg.sender, \\\"Warden: Not offer owner\\\");\\n\\n        require(pricePerVote > 0, \\\"Warden: Price cannot be 0\\\");\\n        require(maxPerc <= 10000, \\\"Warden: maxPerc too high\\\");\\n        require(minPerc <= maxPerc, \\\"Warden: minPerc is over maxPerc\\\");\\n        require(minPerc >= minPercRequired, \\\"Warden: minPerc too low\\\");\\n\\n        // Update the parameters\\n        offer.pricePerVote = pricePerVote;\\n        offer.minPerc = minPerc;\\n        offer.maxPerc = maxPerc;\\n\\n        emit UpdateOffer(user, pricePerVote);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Remove the BoostOffer of the user, and claim any remaining fees earned\\n     * @dev User's BoostOffer is removed from the listing, and any unclaimed fees is sent\\n     */\\n    function quit() external whenNotPaused nonReentrant returns(bool) {\\n        address user = msg.sender;\\n        require(userIndex[user] != 0, \\\"Warden: Not registered\\\");\\n\\n        // Check for unclaimed fees, claim it if needed\\n        if (earnedFees[user] > 0) {\\n            _claim(user, earnedFees[user]);\\n        }\\n\\n        // Find the BoostOffer to remove\\n        uint256 currentIndex = userIndex[user];\\n        // If BoostOffer is not the last of the list\\n        // Replace last of the list with the one to remove\\n        if (currentIndex < offers.length) {\\n            uint256 lastIndex = offers.length - 1;\\n            address lastUser = offers[lastIndex].user;\\n            offers[currentIndex] = offers[lastIndex];\\n            userIndex[lastUser] = currentIndex;\\n        }\\n        //Remove the last item of the list\\n        offers.pop();\\n        userIndex[user] = 0;\\n\\n        emit Quit(user);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Gives an estimate of fees to pay for a given Boost Delegation\\n     * @dev Calculates the amount of fees for a Boost Delegation with the given amount (through the percent) and the duration\\n     * @param delegator Address of the delegator for the Boost\\n     * @param percent Percent of the delegator balance to delegate (in BPS)\\n     * @param duration Duration (in weeks) of the Boost to purchase\\n     */\\n    function estimateFees(\\n        address delegator,\\n        uint256 percent,\\n        uint256 duration //in weeks\\n    ) external view returns (uint256) {\\n        require(delegator != address(0), \\\"Warden: Zero address\\\");\\n        require(userIndex[delegator] != 0, \\\"Warden: Not registered\\\");\\n        require(\\n            percent >= minPercRequired,\\n            \\\"Warden: Percent under min required\\\"\\n        );\\n        require(percent <= MAX_PCT, \\\"Warden: Percent over 100\\\");\\n\\n        // Get the duration in seconds, and check it's more than the minimum required\\n        uint256 durationSeconds = duration * 1 weeks;\\n        require(\\n            durationSeconds >= minDelegationTime,\\n            \\\"Warden: Duration too short\\\"\\n        );\\n\\n        // Fetch the BoostOffer for the delegator\\n        BoostOffer storage offer = offers[userIndex[delegator]];\\n\\n        require(\\n            percent >= offer.minPerc && percent <= offer.maxPerc,\\n            \\\"Warden: Percent out of Offer bounds\\\"\\n        );\\n        uint256 expiryTime = ((block.timestamp + durationSeconds) / WEEK) * WEEK;\\n        expiryTime = (expiryTime < block.timestamp + durationSeconds) ?\\n            ((block.timestamp + durationSeconds + WEEK) / WEEK) * WEEK :\\n            expiryTime;\\n        require(\\n            expiryTime <= votingEscrow.locked__end(delegator),\\n            \\\"Warden: Lock expires before Boost\\\"\\n        );\\n\\n        // Find how much of the delegator's tokens the given percent represents\\n        uint256 delegatorBalance = votingEscrow.balanceOf(delegator);\\n        uint256 toDelegateAmount = (delegatorBalance * percent) / MAX_PCT;\\n\\n        // Get the price for the whole Amount (price fer second)\\n        uint256 priceForAmount = (toDelegateAmount * offer.pricePerVote) / UNIT;\\n\\n        // Then multiply it by the duration (in seconds) to get the cost of the Boost\\n        return priceForAmount * durationSeconds;\\n    }\\n\\n    /** \\n        All local variables used in the buyDelegationBoost function\\n     */\\n    struct BuyVars {\\n        uint256 boostDuration;\\n        uint256 delegatorBalance;\\n        uint256 toDelegateAmount;\\n        uint256 realFeeAmount;\\n        uint256 expiryTime;\\n        uint256 cancelTime;\\n        uint256 boostPercent;\\n        uint256 newId;\\n        uint256 newTokenId;\\n    }\\n\\n    /**\\n     * @notice Buy a Delegation Boost for a Delegator Offer\\n     * @dev If all parameters match the offer from the delegator, creates a Boost for the caller\\n     * @param delegator Address of the delegator for the Boost\\n     * @param receiver Address of the receiver of the Boost\\n     * @param percent Percent of the delegator balance to delegate (in BPS)\\n     * @param duration Duration (in weeks) of the Boost to purchase\\n     * @param maxFeeAmount Maximum amount of feeToken available to pay to cover the Boost Duration (in wei)\\n     * returns the id of the new veBoost\\n     */\\n    function buyDelegationBoost(\\n        address delegator,\\n        address receiver,\\n        uint256 percent,\\n        uint256 duration, //in weeks\\n        uint256 maxFeeAmount\\n    ) external nonReentrant whenNotPaused returns(uint256) {\\n        require(\\n            delegator != address(0) && receiver != address(0),\\n            \\\"Warden: Zero address\\\"\\n        );\\n        require(userIndex[delegator] != 0, \\\"Warden: Not registered\\\");\\n        require(maxFeeAmount > 0, \\\"Warden: No fees\\\");\\n        require(\\n            percent >= minPercRequired,\\n            \\\"Warden: Percent under min required\\\"\\n        );\\n        require(percent <= MAX_PCT, \\\"Warden: Percent over 100\\\");\\n\\n        BuyVars memory vars;\\n\\n        // Get the duration of the wanted Boost in seconds\\n        vars.boostDuration = duration * 1 weeks;\\n        require(\\n            vars.boostDuration >= minDelegationTime,\\n            \\\"Warden: Duration too short\\\"\\n        );\\n\\n        // Fetch the BoostOffer for the delegator\\n        BoostOffer storage offer = offers[userIndex[delegator]];\\n\\n        require(\\n            percent >= offer.minPerc && percent <= offer.maxPerc,\\n            \\\"Warden: Percent out of Offer bounds\\\"\\n        );\\n\\n        // Find how much of the delegator's tokens the given percent represents\\n        vars.delegatorBalance = votingEscrow.balanceOf(delegator);\\n        vars.toDelegateAmount = (vars.delegatorBalance * percent) / MAX_PCT;\\n\\n        // Check if delegator can delegate the amount, without exceeding the maximum percent allowed by the delegator\\n        // _canDelegate will also try to cancel expired Boosts of the deelgator to free more tokens for delegation\\n        require(\\n            _canDelegate(delegator, vars.toDelegateAmount, offer.maxPerc),\\n            \\\"Warden: Cannot delegate\\\"\\n        );\\n\\n        // Calculate the price for the given duration, get the real amount of fees to pay,\\n        // and check the maxFeeAmount provided (and approved beforehand) is enough.\\n        // Calculated using the pricePerVote set by the delegator\\n        vars.realFeeAmount = (vars.toDelegateAmount * offer.pricePerVote * vars.boostDuration) / UNIT;\\n        require(\\n            vars.realFeeAmount <= maxFeeAmount,\\n            \\\"Warden: Fees do not cover Boost duration\\\"\\n        );\\n\\n        // Pull the tokens from the buyer, setting it as earned fees for the delegator (and part of it for the Reserve)\\n        _pullFees(msg.sender, vars.realFeeAmount, delegator);\\n\\n        // Calcualte the expiry time for the Boost = now + duration\\n        vars.expiryTime = ((block.timestamp + vars.boostDuration) / WEEK) * WEEK;\\n\\n        // Hack needed because veBoost contract rounds down expire_time\\n        // We don't want buyers to receive less than they pay for\\n        // So an \\\"extra\\\" week is added if needed to get an expire_time covering the required duration\\n        // But cancel_time will be set for the exact paid duration, so any \\\"bonus days\\\" received can be canceled\\n        // if a new buyer wants to take the offer\\n        vars.expiryTime = (vars.expiryTime < block.timestamp + vars.boostDuration) ?\\n            ((block.timestamp + vars.boostDuration + WEEK) / WEEK) * WEEK :\\n            vars.expiryTime;\\n        require(\\n            vars.expiryTime <= votingEscrow.locked__end(delegator),\\n            \\\"Warden: Lock expires before Boost\\\"\\n        );\\n\\n        // VotingEscrowDelegation needs the percent of available tokens for delegation when creating the boost, instead of\\n        // the percent of the users balance. We calculate this percent representing the amount of tokens wanted by the buyer\\n        vars.boostPercent = (vars.toDelegateAmount * MAX_PCT) / \\n            (vars.delegatorBalance - delegationBoost.delegated_boost(delegator));\\n\\n        // Get the id (depending on the delegator) for the new Boost\\n        vars.newId = delegationBoost.total_minted(delegator);\\n        unchecked {\\n            // cancelTime stays current timestamp + paid duration\\n            // Should not overflow : Since expiryTime is the same + some extra time, expiryTime >= cancelTime\\n            vars.cancelTime = block.timestamp + vars.boostDuration;\\n        }\\n\\n        // Creates the DelegationBoost\\n        delegationBoost.create_boost(\\n            delegator,\\n            receiver,\\n            int256(vars.boostPercent),\\n            vars.cancelTime,\\n            vars.expiryTime,\\n            vars.newId\\n        );\\n\\n        // Fetch the tokenId for the new DelegationBoost that was created, and check it was set for the correct delegator\\n        vars.newTokenId = delegationBoost.get_token_id(delegator, vars.newId);\\n        require(\\n            vars.newTokenId ==\\n                delegationBoost.token_of_delegator_by_index(delegator, vars.newId),\\n            \\\"Warden: DelegationBoost failed\\\"\\n        );\\n\\n        emit BoostPurchase(\\n            delegator,\\n            receiver,\\n            vars.newTokenId,\\n            percent,\\n            offer.pricePerVote,\\n            vars.realFeeAmount,\\n            vars.expiryTime\\n        );\\n\\n        return vars.newTokenId;\\n    }\\n\\n    /**\\n     * @notice Cancels a DelegationBoost\\n     * @dev Cancels a DelegationBoost :\\n     * In case the caller is the owner of the Boost, at any time\\n     * In case the caller is the delegator for the Boost, after cancel_time\\n     * Else, after expiry_time\\n     * @param tokenId Id of the DelegationBoost token to cancel\\n     */\\n    function cancelDelegationBoost(uint256 tokenId) external whenNotPaused returns(bool) {\\n        address tokenOwner = delegationBoost.ownerOf(tokenId);\\n        // If the caller own the token, and this contract is operator for the owner\\n        // we try to burn the token directly\\n        if (\\n            msg.sender == tokenOwner &&\\n            delegationBoost.isApprovedForAll(tokenOwner, address(this))\\n        ) {\\n            delegationBoost.burn(tokenId);\\n            return true;\\n        }\\n\\n        uint256 currentTime = block.timestamp;\\n\\n        // Delegator can cancel the Boost if Cancel Time passed\\n        address delegator = _getTokenDelegator(tokenId);\\n        if (\\n            delegationBoost.token_cancel_time(tokenId) < currentTime &&\\n            (msg.sender == delegator &&\\n                delegationBoost.isApprovedForAll(delegator, address(this)))\\n        ) {\\n            delegationBoost.cancel_boost(tokenId);\\n            return true;\\n        }\\n\\n        // Else, we wait Exipiry Time, so anyone can cancel the delegation\\n        if (delegationBoost.token_expiry(tokenId) < currentTime) {\\n            delegationBoost.cancel_boost(tokenId);\\n            return true;\\n        }\\n\\n        revert(\\\"Cannot cancel the boost\\\");\\n    }\\n\\n    /**\\n     * @notice Returns the amount of fees earned by the user that can be claimed\\n     * @dev Returns the value in earnedFees for the given user\\n     * @param user Address of the user\\n     */\\n    function claimable(address user) external view returns (uint256) {\\n        return earnedFees[user];\\n    }\\n\\n    /**\\n     * @notice Claims all earned fees\\n     * @dev Send all the user's earned fees\\n     */\\n    function claim() external nonReentrant returns(bool) {\\n        require(\\n            earnedFees[msg.sender] != 0,\\n            \\\"Warden: Claim null amount\\\"\\n        );\\n        return _claim(msg.sender, earnedFees[msg.sender]);\\n    }\\n\\n    /**\\n     * @notice Claims all earned fees, and cancel all expired Delegation Boost for the user\\n     * @dev Send all the user's earned fees, and fetch all expired Boosts to cancel them\\n     */\\n    function claimAndCancel() external nonReentrant returns(bool) {\\n        _cancelAllExpired(msg.sender);\\n        return _claim(msg.sender, earnedFees[msg.sender]);\\n    }\\n\\n    /**\\n     * @notice Claims an amount of earned fees through Boost Delegation selling\\n     * @dev Send the given amount of earned fees (if amount is correct)\\n     * @param amount Amount of earned fees to claim\\n     */\\n    function claim(uint256 amount) external nonReentrant returns(bool) {\\n        require(amount <= earnedFees[msg.sender], \\\"Warden: Amount too high\\\");\\n        require(\\n            amount != 0,\\n            \\\"Warden: Claim null amount\\\"\\n        );\\n        return _claim(msg.sender, amount);\\n    }\\n\\n    function _pullFees(\\n        address buyer,\\n        uint256 amount,\\n        address seller\\n    ) internal {\\n        // Pull the given token amount ot this contract (must be approved beforehand)\\n        feeToken.safeTransferFrom(buyer, address(this), amount);\\n\\n        // Split fees between Boost offerer & Reserve\\n        earnedFees[seller] += (amount * (MAX_PCT - feeReserveRatio)) / MAX_PCT;\\n        reserveAmount += (amount * feeReserveRatio) / MAX_PCT;\\n    }\\n\\n    function _canDelegate(\\n        address delegator,\\n        uint256 amount,\\n        uint256 delegatorMaxPerc\\n    ) internal returns (bool) {\\n        if (!delegationBoost.isApprovedForAll(delegator, address(this)))\\n            return false;\\n\\n        // Delegator current balance\\n        uint256 balance = votingEscrow.balanceOf(delegator);\\n\\n        // Percent of delegator balance not allowed to delegate (as set by maxPerc in the BoostOffer)\\n        uint256 blockedBalance = (balance * (MAX_PCT - delegatorMaxPerc)) / MAX_PCT;\\n\\n        // Available Balance to delegate = VotingEscrow Balance - Delegated Balance - Blocked Balance\\n        uint256 availableBalance = balance - delegationBoost.delegated_boost(delegator) - blockedBalance;\\n        if (amount <= availableBalance) return true;\\n\\n        // Check if cancel expired Boosts could bring enough to delegate\\n        uint256 potentialBalance = availableBalance;\\n\\n        uint256 nbTokens = delegationBoost.total_minted(delegator);\\n        uint256[256] memory toCancel; //Need this type of array because of batch_cancel_boosts() from veBoost\\n        uint256 nbToCancel = 0;\\n\\n        // Loop over the delegator current boosts to find expired ones\\n        for (uint256 i = 0; i < nbTokens; i++) {\\n            uint256 tokenId = delegationBoost.token_of_delegator_by_index(\\n                delegator,\\n                i\\n            );\\n\\n            if (delegationBoost.token_cancel_time(tokenId) <= block.timestamp && delegationBoost.token_cancel_time(tokenId) != 0) {\\n                int256 boost = delegationBoost.token_boost(tokenId);\\n                uint256 absolute_boost = boost >= 0 ? uint256(boost) : uint256(-boost);\\n                potentialBalance += absolute_boost;\\n                toCancel[nbToCancel] = tokenId;\\n                nbToCancel++;\\n            }\\n        }\\n\\n        // If canceling the tokens can free enough to delegate,\\n        // cancel the batch and return true\\n        if (amount <= potentialBalance && nbToCancel > 0) {\\n            delegationBoost.batch_cancel_boosts(toCancel);\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function _cancelAllExpired(address delegator) internal {\\n        uint256 nbTokens = delegationBoost.total_minted(delegator);\\n        // Delegator does not have active Boosts currently\\n        if (nbTokens == 0) return;\\n\\n        uint256[256] memory toCancel;\\n        uint256 nbToCancel = 0;\\n        uint256 currentTime = block.timestamp;\\n\\n        // Loop over the delegator current boosts to find expired ones\\n        for (uint256 i = 0; i < nbTokens; i++) {\\n            uint256 tokenId = delegationBoost.token_of_delegator_by_index(\\n                delegator,\\n                i\\n            );\\n            uint256 cancelTime = delegationBoost.token_cancel_time(tokenId);\\n\\n            if (cancelTime <= currentTime && cancelTime != 0) {\\n                toCancel[nbToCancel] = tokenId;\\n                nbToCancel++;\\n            }\\n        }\\n\\n        // If Boost were found, cancel the batch\\n        if (nbToCancel > 0) {\\n            delegationBoost.batch_cancel_boosts(toCancel);\\n        }\\n    }\\n\\n    function _claim(address user, uint256 amount) internal returns(bool) {\\n        require(\\n            !_claimBlocked,\\n            \\\"Warden: Claim blocked\\\"\\n        );\\n        require(\\n            amount <= feeToken.balanceOf(address(this)),\\n            \\\"Warden: Insufficient cash\\\"\\n        );\\n\\n        if(amount == 0) return true; // nothing to claim, but used in claimAndCancel()\\n\\n        // If fees to be claimed, update the mapping, and send the amount\\n        unchecked{\\n            // Should not underflow, since the amount was either checked in the claim() method, or set as earnedFees[user]\\n            earnedFees[user] -= amount;\\n        }\\n\\n        feeToken.safeTransfer(user, amount);\\n\\n        emit Claim(user, amount);\\n\\n        return true;\\n    }\\n\\n    function _getTokenDelegator(uint256 tokenId)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        //Extract the address from the token id : See VotingEscrowDelegation.vy for the logic\\n        return address(uint160(tokenId >> 96));\\n    }\\n\\n    // Admin Functions :\\n\\n    /**\\n     * @notice Updates the minimum percent required to buy a Boost\\n     * @param newMinPercRequired New minimum percent required to buy a Boost (in BPS)\\n     */\\n    function setMinPercRequired(uint256 newMinPercRequired) external onlyOwner {\\n        require(newMinPercRequired > 0 && newMinPercRequired <= 10000);\\n        minPercRequired = newMinPercRequired;\\n    }\\n\\n        /**\\n     * @notice Updates the minimum delegation time\\n     * @param newMinDelegationTime New minimum deelgation time (in seconds)\\n     */\\n    function setMinDelegationTime(uint256 newMinDelegationTime) external onlyOwner {\\n        require(newMinDelegationTime > 0);\\n        minDelegationTime = newMinDelegationTime;\\n    }\\n\\n    /**\\n     * @notice Updates the ratio of Fees set for the Reserve\\n     * @param newFeeReserveRatio New ratio (in BPS)\\n     */\\n    function setFeeReserveRatio(uint256 newFeeReserveRatio) external onlyOwner {\\n        require(newFeeReserveRatio <= 5000);\\n        feeReserveRatio = newFeeReserveRatio;\\n    }\\n\\n    /**\\n     * @notice Updates the Delegation Boost (veBoost)\\n     * @param newDelegationBoost New veBoost contract address\\n     */\\n    function setDelegationBoost(address newDelegationBoost) external onlyOwner {\\n        delegationBoost = IVotingEscrowDelegation(newDelegationBoost);\\n    }\\n\\n    /**\\n     * @notice Updates the Reserve Manager\\n     * @param newReserveManager New Reserve Manager address\\n     */\\n    function setReserveManager(address newReserveManager) external onlyOwner {\\n        reserveManager = newReserveManager;\\n    }\\n\\n    /**\\n     * @notice Pauses the contract\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses the contract\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Block user fee claims\\n     */\\n    function blockClaim() external onlyOwner {\\n        require(\\n            !_claimBlocked,\\n            \\\"Warden: Claim blocked\\\"\\n        );\\n        _claimBlocked = true;\\n    }\\n\\n    /**\\n     * @notice Unblock user fee claims\\n     */\\n    function unblockClaim() external onlyOwner {\\n        require(\\n            _claimBlocked,\\n            \\\"Warden: Claim not blocked\\\"\\n        );\\n        _claimBlocked = false;\\n    }\\n\\n    /**\\n     * @dev Withdraw either a lost ERC20 token sent to the contract (expect the feeToken)\\n     * @param token ERC20 token to withdraw\\n     * @param amount Amount to transfer (in wei)\\n     */\\n    function withdrawERC20(address token, uint256 amount) external onlyOwner returns(bool) {\\n        require(_claimBlocked || token != address(feeToken), \\\"Warden: cannot withdraw fee Token\\\"); //We want to be able to recover the fees if there is an issue\\n        IERC20(token).safeTransfer(owner(), amount);\\n\\n        return true;\\n    }\\n\\n    function depositToReserve(address from, uint256 amount) external onlyAllowed returns(bool) {\\n        reserveAmount = reserveAmount + amount;\\n        feeToken.safeTransferFrom(from, address(this), amount);\\n\\n        return true;\\n    }\\n\\n    function withdrawFromReserve(uint256 amount) external onlyAllowed returns(bool) {\\n        require(amount <= reserveAmount, \\\"Warden: Reserve too low\\\");\\n        reserveAmount = reserveAmount - amount;\\n        feeToken.safeTransfer(reserveManager, amount);\\n\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/open-zeppelin/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"contracts/open-zeppelin/libraries/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/open-zeppelin/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"\r\n    },\r\n    \"contracts/open-zeppelin/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\"\r\n    },\r\n    \"contracts/open-zeppelin/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IVotingEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\n/** @title Custom Interface for Curve VotingEscrow contract  */\\ninterface IVotingEscrow {\\n    \\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    function create_lock(uint256 _value, uint256 _unlock_time) external returns (uint256);\\n\\n    function locked__end(address _addr) external view returns (uint256);\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IVotingEscrowDelegation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\n/** @title Custom Interface for Curve VotingEscrowDelegation contract  */\\ninterface IVotingEscrowDelegation {\\n\\n    function isApprovedForAll(address owner, address operator) external view returns(bool);\\n\\n    function ownerOf(uint256 tokenId) external view returns(address);\\n\\n    function balanceOf(uint256 tokenId) external view returns(uint256);\\n\\n    function token_of_delegator_by_index(address delegator, uint256 index) external view returns(uint256);\\n\\n    function total_minted(address delegator) external view returns(uint256);\\n\\n    function grey_list(address receiver, address delegator) external view returns(bool);\\n\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    function create_boost(\\n        address _delegator,\\n        address _receiver,\\n        int256 _percentage,\\n        uint256 _cancel_time,\\n        uint256 _expire_time,\\n        uint256 _id\\n    ) external;\\n\\n    function extend_boost(\\n        uint256 _token_id,\\n        int256 _percentage,\\n        uint256 _cancel_time,\\n        uint256 _expire_time\\n    ) external;\\n\\n    function burn(uint256 _token_id) external;\\n\\n    function cancel_boost(uint256 _token_id) external;\\n\\n    function batch_cancel_boosts(uint256[256] memory _token_ids) external;\\n\\n    function adjusted_balance_of(address _account) external view returns(uint256);\\n\\n    function delegated_boost(address _account) external view returns(uint256);\\n\\n    function token_boost(uint256 _token_id) external view returns(int256);\\n\\n    function token_cancel_time(uint256 _token_id) external view returns(uint256);\\n\\n    function token_expiry(uint256 _token_id) external view returns(uint256);\\n\\n    function get_token_id(address _delegator, uint256 _id) external view returns(uint256);\\n\\n}\"\r\n    },\r\n    \"contracts/open-zeppelin/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/open-zeppelin/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_votingEscrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegationBoost\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeReserveRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPercRequired\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"}],\"name\":\"BoostPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Quit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Registred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UpdateOffer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_PCT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeeAmount\",\"type\":\"uint256\"}],\"name\":\"buyDelegationBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelDelegationBoost\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAndCancel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegationBoost\",\"outputs\":[{\"internalType\":\"contract IVotingEscrowDelegation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToReserve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"earnedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"estimateFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReserveRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDelegationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPercRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerVote\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"minPerc\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxPerc\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pricePerVote\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"minPerc\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxPerc\",\"type\":\"uint16\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDelegationBoost\",\"type\":\"address\"}],\"name\":\"setDelegationBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeeReserveRatio\",\"type\":\"uint256\"}],\"name\":\"setFeeReserveRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinDelegationTime\",\"type\":\"uint256\"}],\"name\":\"setMinDelegationTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinPercRequired\",\"type\":\"uint256\"}],\"name\":\"setMinPercRequired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReserveManager\",\"type\":\"address\"}],\"name\":\"setReserveManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unblockClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pricePerVote\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"minPerc\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxPerc\",\"type\":\"uint16\"}],\"name\":\"updateOffer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingEscrow\",\"outputs\":[{\"internalType\":\"contract IVotingEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromReserve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Warden","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d533a949740bb3306d119cc777fa900ba034cd520000000000000000000000005f3b5dfeb7b28cdbd7faba78963ee202a494e2a2000000000000000000000000d30dd0b919cb4012b3add78f6dcb6eb7ef225ac800000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000003e8","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}