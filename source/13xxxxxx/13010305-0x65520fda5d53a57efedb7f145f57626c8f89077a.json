{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Reserve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.6;\\n\\ncontract Reserve {\\n\\n    struct Rectangle {\\n        uint xTopLeft;\\n        uint yTopLeft;\\n        uint xBottomRight;\\n        uint yBottomRight;\\n        uint timestamp;\\n        address owner;\\n    }\\n\\n    Rectangle[] private reservePixels;\\n\\n    uint[] public needClean;\\n\\n    function reserve(uint xTopLeft, uint yTopLeft, uint xBottomRight, uint yBottomRight) public {\\n\\n        Rectangle memory rectangle = Rectangle(xTopLeft, yTopLeft, xBottomRight, yBottomRight,\\n            block.timestamp, msg.sender);\\n\\n\\n        for (uint i = 0; i < reservePixels.length; i++) {\\n            if (block.timestamp <= reservePixels[i].timestamp + 30 * 1 minutes) {\\n                require(!dotInRectangle(reservePixels[i], xTopLeft, yTopLeft), '1: Already reserved another user');\\n                require(!dotInRectangle(reservePixels[i], xTopLeft, yBottomRight), '2: Already reserved another user');\\n                require(!dotInRectangle(reservePixels[i], xBottomRight, yBottomRight), '3: Already reserved another user');\\n                require(!dotInRectangle(reservePixels[i], xBottomRight, yTopLeft), '4: Already reserved another user');\\n                require(!dotInRectangle(rectangle, reservePixels[i].xBottomRight, reservePixels[i].yTopLeft), '5: Already reserved another user');\\n                require(!dotInRectangle(rectangle, reservePixels[i].xBottomRight, reservePixels[i].yBottomRight), '6: Already reserved another user');\\n                require(!dotInRectangle(rectangle, reservePixels[i].xTopLeft, reservePixels[i].yBottomRight), '7: Already reserved another user');\\n                require(!dotInRectangle(rectangle, reservePixels[i].xTopLeft, reservePixels[i].yTopLeft), '8: Already reserved another user');\\n            }\\n            else {\\n                needClean.push(i);\\n            }\\n        }\\n\\n\\n        if (needClean.length > 0) {\\n\\n            for (int256 i = int256(needClean.length) - 1; i >= 0; i--) {\\n                if (reservePixels.length > 0) {\\n                    reservePixels[needClean[uint(i)]] = reservePixels[reservePixels.length - 1];\\n                    reservePixels.pop();\\n                }\\n            }\\n            delete needClean;\\n        }\\n\\n        reservePixels.push(rectangle);\\n    }\\n\\n    function dotInRectangle(Rectangle memory rectangle, uint x, uint y) internal pure returns (bool){\\n        return x >= rectangle.xTopLeft && x <= rectangle.xBottomRight\\n        && y >= rectangle.yTopLeft && y <= rectangle.yBottomRight;\\n    }\\n\\n    function getAllReservedRectangles() public view returns (Rectangle[] memory){\\n        return reservePixels;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"getAllReservedRectangles\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"xTopLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yTopLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xBottomRight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yBottomRight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct Reserve.Rectangle[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"needClean\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"xTopLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yTopLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xBottomRight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yBottomRight\",\"type\":\"uint256\"}],\"name\":\"reserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Reserve","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}