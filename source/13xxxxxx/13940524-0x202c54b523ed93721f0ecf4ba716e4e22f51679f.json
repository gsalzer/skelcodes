{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.11;\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner() {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner() {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract CujoStaking is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public stakeDuration;\r\n    uint256 public stakeStart;\r\n    uint256 public totalStaked;\r\n    IERC20 public stakingToken;\r\n    IERC20 public rewardToken;\r\n\r\n    bool public stakingEnabled = false;\r\n\r\n    uint256 private _totalSupply = 1e18 * 1e9;\r\n    uint256 private _totalRewards = 2e17 * 1e9;\r\n\r\n    struct Staker {\r\n        address staker;\r\n        uint256 start;\r\n        uint256 staked;\r\n        uint256 earned;\r\n        uint256 period;\r\n    }\r\n\r\n    mapping(address => Staker) private _stakers;\r\n\r\n    constructor (uint256 _stakeDuration, IERC20 _stakingToken, IERC20 _rewardToken) {\r\n        stakeDuration = _stakeDuration.mul(1 days);\r\n        stakingToken = _stakingToken;\r\n        rewardToken = _rewardToken;\r\n        stakeStart = block.timestamp;\r\n    }\r\n\r\n    function isStaking(address stakerAddr) public view returns (bool) {\r\n        return _stakers[stakerAddr].staker == stakerAddr;\r\n    }\r\n\r\n    function userStaked(address staker) public view returns (uint256) {\r\n        return _stakers[staker].staked;\r\n    }\r\n\r\n    function userEarnedTotal(address staker) public view returns (uint256) {\r\n        uint256 currentlyEarned = _userEarned(staker);\r\n        uint256 previouslyEarned = _stakers[msg.sender].earned;\r\n\r\n        if (previouslyEarned > 0) return currentlyEarned.add(previouslyEarned);\r\n        return currentlyEarned;\r\n    }\r\n\r\n    function stakeDay() public view returns (uint256) {\r\n        return block.timestamp / 1 days - stakeStart / 1 days;\r\n    }\r\n\r\n    function _isLocked(address staker) private view returns (bool) {\r\n        bool isLocked = false;\r\n\r\n        uint256 _stakeDay = _stakers[staker].start / 1 days;\r\n        if (_stakeDay - stakeStart / 1 days < 14) {\r\n           if (block.timestamp / 1 days - _stakeDay < 14) {\r\n               isLocked = true;\r\n           }\r\n        }\r\n\r\n        return isLocked;\r\n    }\r\n\r\n    function _userEarned(address staker) private view returns (uint256) {\r\n        require(isStaking(staker), \"User is not staking.\");\r\n\r\n        uint256 rewardPerDay = _rewardsPerDay(staker);\r\n        uint256 secsPerDay = 1 days / 1 seconds;\r\n        uint256 rewardsPerSec = rewardPerDay.div(secsPerDay);\r\n\r\n        uint256 stakerSharePercentage = _sharePercentage(staker);\r\n\r\n        uint256 stakersStartInSeconds = _stakers[staker].start.div(1 seconds);\r\n        uint256 blockTimestampInSeconds = block.timestamp.div(1 seconds);\r\n        uint256 secondsStaked = blockTimestampInSeconds.sub(stakersStartInSeconds);\r\n\r\n        uint256 earned = rewardsPerSec.mul(stakerSharePercentage).mul(secondsStaked).div(10**9);\r\n\r\n        return earned.div(10**9);\r\n    }\r\n\r\n    function _sharePercentage(address staker) private view returns (uint256) {\r\n        uint256 stakerStaked = _stakers[staker].staked;\r\n        uint256 stakerSharePercentage = stakerStaked.mul(10**9).div(totalStaked);\r\n\r\n        return stakerSharePercentage;\r\n    }\r\n\r\n    function _periodInDays(address staker) private view returns (uint256) {\r\n        uint256 periodInDays = _stakers[staker].period.div(1 days);\r\n\r\n        return periodInDays;\r\n    }\r\n    \r\n    function _rewardsPerDay(address staker) private view returns (uint256) {\r\n        uint256 periodInDays = _periodInDays(staker);\r\n        uint256 rewardsPerDay = _totalRewards.div(periodInDays);\r\n\r\n        return rewardsPerDay.mul(10**9);\r\n    }\r\n \r\n    function stake(uint256 stakeAmount) external {\r\n        require(stakingEnabled, \"Staking is not enabled\");\r\n\r\n        // Check user is registered as staker\r\n        if (isStaking(msg.sender)) {\r\n            _stakers[msg.sender].staked += stakeAmount;\r\n            _stakers[msg.sender].earned += _userEarned(msg.sender);\r\n            _stakers[msg.sender].start = block.timestamp;\r\n        } else {\r\n            _stakers[msg.sender] = Staker(msg.sender, block.timestamp, stakeAmount, 0, stakeDuration);\r\n        }\r\n\r\n        totalStaked += stakeAmount;\r\n        stakingToken.transferFrom(msg.sender, address(this), stakeAmount);\r\n    }\r\n    \r\n    function claim() external {\r\n        require(stakingEnabled, \"Staking is not enabled\");\r\n        require(isStaking(msg.sender), \"You are not staking!?\");\r\n        require(!_isLocked(msg.sender), \"Your tokens are currently locked\");\r\n        uint256 reward = userEarnedTotal(msg.sender);\r\n        stakingToken.transfer(msg.sender, reward);\r\n\r\n        _stakers[msg.sender].start = block.timestamp;\r\n        _stakers[msg.sender].earned = 0;\r\n    }\r\n\r\n    function unstake() external {\r\n        require(stakingEnabled, \"Staking is not enabled\");\r\n        require(isStaking(msg.sender), \"You are not staking!?\");\r\n        require(!_isLocked(msg.sender), \"Your tokens are currently locked\");\r\n\r\n        uint256 reward = userEarnedTotal(msg.sender);\r\n        stakingToken.transfer(msg.sender, _stakers[msg.sender].staked.add(reward));\r\n\r\n        totalStaked -= _stakers[msg.sender].staked;\r\n\r\n        delete _stakers[msg.sender];\r\n    }\r\n\r\n    function extrendStakeDuration(uint256 duration) external onlyOwner() {\r\n        require(duration > stakeDuration, \"New duration must be bigger than current duration.\");\r\n        stakeDuration = duration;\r\n    }\r\n\r\n    function emergencyWithdrawToken(IERC20 token) external onlyOwner() {\r\n        token.transfer(msg.sender, token.balanceOf(address(this)));\r\n    }\r\n\r\n    function setState(bool onoff) external onlyOwner() {\r\n        stakingEnabled = onoff;\r\n    }\r\n\r\n    receive() external payable {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeDuration\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"extrendStakeDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddr\",\"type\":\"address\"}],\"name\":\"isStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"setState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"userEarnedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"userStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CujoStaking","CompilerVersion":"v0.8.11+commit.d7f03943","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000002da000000000000000000000000612c393dace91284dafc23e623aab084fa0ffa64000000000000000000000000612c393dace91284dafc23e623aab084fa0ffa64","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5f2ee93884729d5815f0e03aeea59ab83913971d73c1dbdb9d765a0595790569"}]}