{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/configuration/OptionPoolRegistry.sol\": {\r\n      \"content\": \"pragma solidity 0.8.4;\\n\\nimport \\\"../interfaces/IConfigurationManager.sol\\\";\\nimport \\\"../interfaces/IOptionPoolRegistry.sol\\\";\\n\\n/**\\n * @title OptionPoolRegistry\\n * @author Pods Finance\\n * @notice Tracks the OptionAMMPool instances associated with Options\\n */\\ncontract OptionPoolRegistry is IOptionPoolRegistry {\\n    IConfigurationManager public immutable configurationManager;\\n\\n    mapping(address => address) private _registry;\\n\\n    constructor(IConfigurationManager _configurationManager) public {\\n        configurationManager = _configurationManager;\\n    }\\n\\n    modifier onlyAMMFactory {\\n        require(\\n            msg.sender == configurationManager.getAMMFactory(),\\n            \\\"OptionPoolRegistry: caller is not current AMMFactory\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns the address of a previously created pool\\n     *\\n     * @dev If the pool is not registered it will return address(0)\\n     *\\n     * @param option The address of option token\\n     * @return The address of the pool\\n     */\\n    function getPool(address option) external override view returns (address) {\\n        return _registry[option];\\n    }\\n\\n    /**\\n     * @notice Register a pool for a given option\\n     *\\n     * @param option The address of option token\\n     * @param pool The address of OptionAMMPool\\n     */\\n    function setPool(address option, address pool) external override onlyAMMFactory {\\n        _registry[option] = pool;\\n        emit PoolSet(msg.sender, option, pool);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IConfigurationManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity >=0.6.12;\\n\\ninterface IConfigurationManager {\\n    function setParameter(bytes32 name, uint256 value) external;\\n\\n    function setEmergencyStop(address emergencyStop) external;\\n\\n    function setPricingMethod(address pricingMethod) external;\\n\\n    function setIVGuesser(address ivGuesser) external;\\n\\n    function setIVProvider(address ivProvider) external;\\n\\n    function setPriceProvider(address priceProvider) external;\\n\\n    function setCapProvider(address capProvider) external;\\n\\n    function setAMMFactory(address ammFactory) external;\\n\\n    function setOptionFactory(address optionFactory) external;\\n\\n    function setOptionHelper(address optionHelper) external;\\n\\n    function setOptionPoolRegistry(address optionPoolRegistry) external;\\n\\n    function getParameter(bytes32 name) external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function getEmergencyStop() external view returns (address);\\n\\n    function getPricingMethod() external view returns (address);\\n\\n    function getIVGuesser() external view returns (address);\\n\\n    function getIVProvider() external view returns (address);\\n\\n    function getPriceProvider() external view returns (address);\\n\\n    function getCapProvider() external view returns (address);\\n\\n    function getAMMFactory() external view returns (address);\\n\\n    function getOptionFactory() external view returns (address);\\n\\n    function getOptionHelper() external view returns (address);\\n\\n    function getOptionPoolRegistry() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOptionPoolRegistry.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.12;\\n\\ninterface IOptionPoolRegistry {\\n    event PoolSet(address indexed factory, address indexed option, address pool);\\n\\n    function getPool(address option) external view returns (address);\\n\\n    function setPool(address option, address pool) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IConfigurationManager\",\"name\":\"_configurationManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"option\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"configurationManager\",\"outputs\":[{\"internalType\":\"contract IConfigurationManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"option\",\"type\":\"address\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"option\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OptionPoolRegistry","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e4da64757b2b29db43429a52caf7ad884c76f8b0","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}