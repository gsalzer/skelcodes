{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/AirDropper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^ 0.8.0;\\r\\n\\r\\n/*  by cryptovale.eth\\r\\n *  This contract supports minting and sending large amount of tokens\\r\\n *  It can be flexibly used to send an amount of tokens in a run, but it should be tested where limits are based on gas restrictions\\r\\n *  The using contract has to implement airdropper_mint, allowedToken and allowedCaller\\r\\n *  airdropper_mint: is called by this contract to mint a single token to an address\\r\\n *  airdropper_allowedToken is used to give back, if the id is allowed to be airdropped (if you foresee a section)\\r\\n *  airdropper_allowedCaller checks if a caller is allowed to call your contract for an airdrop\\r\\n *  \\r\\n *  You register your contract by calling registerContract (your contract needs to have you as an allowed caller)\\r\\n *  You can unregister the contract by calling unregisterContract\\r\\n *  \\r\\n *  You should save the address of this contract in your token contract and protect the calls\\r\\n *  require(airdroppers[msg.sender], \\\"Not an airdropper contract\\\");\\r\\n */\\r\\n\\r\\nabstract contract externalInterface{\\r\\n    function airdropper_mint(address to, uint256 tokenId) public virtual;\\r\\n    function airdropper_allowedToken(uint256 tokenId) public virtual returns(bool);\\r\\n    function airdropper_allowedCaller(address caller) public virtual returns(bool);\\r\\n}\\r\\n\\r\\ncontract AirDropper{\\r\\n    mapping(address => externalInterface) contracts;\\r\\n    mapping(address => bool) activeContracts;\\r\\n\\r\\n    function registerContract(address contractAddress) public{\\r\\n        externalInterface _temp = externalInterface(contractAddress);\\r\\n        require(_temp.airdropper_allowedCaller(msg.sender), \\\"Caller not allowed\\\");\\r\\n        activeContracts[contractAddress] = true;\\r\\n        contracts[contractAddress] = externalInterface(contractAddress);\\r\\n    }\\r\\n\\r\\n    function unregisterContract(address contractAddress) public{\\r\\n        require(contracts[contractAddress].airdropper_allowedCaller(msg.sender), \\\"Caller not allowed\\\");\\r\\n        activeContracts[contractAddress] = false;\\r\\n    }\\r\\n\\r\\n    function airdropByIndex(address contractAddress, address[] memory receivers, uint256 startIndex) public{\\r\\n        require(contracts[contractAddress].airdropper_allowedCaller(msg.sender), \\\"Caller not allowed\\\");\\r\\n        require(activeContracts[contractAddress], \\\"Contract not registered\\\");\\r\\n        for (uint256 i = 0; i < receivers.length; i++) {\\r\\n            require(contracts[contractAddress].airdropper_allowedToken(startIndex + i), \\\"Token not allowed\\\");\\r\\n            contracts[contractAddress].airdropper_mint(receivers[i], startIndex + i);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function airdrop(address contractAddress, address[] memory receivers, uint256[] memory indexes) public{\\r\\n        require(contracts[contractAddress].airdropper_allowedCaller(msg.sender), \\\"Caller not allowed\\\");\\r\\n        require(activeContracts[contractAddress], \\\"Contract not registered\\\");\\r\\n        require(receivers.length == indexes.length, \\\"Wrong amount\\\");\\r\\n        for (uint256 i = 0; i < receivers.length; i++) {\\r\\n            require(contracts[contractAddress].airdropper_allowedToken(indexes[i]), \\\"Token not allowed\\\");\\r\\n            contracts[contractAddress].airdropper_mint(receivers[i], indexes[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"}],\"name\":\"airdropByIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"registerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"unregisterContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AirDropper","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}