{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/permittedLists/PermittedNFTs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"../interfaces/IPermittedNFTs.sol\\\";\\nimport \\\"../interfaces/INftTypeRegistry.sol\\\";\\nimport \\\"../interfaces/INftfiHub.sol\\\";\\n\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"../utils/ContractKeys.sol\\\";\\n\\n/**\\n * @title  PermittedNFTs\\n * @author NFTfi\\n * @dev Registry for NFT contracts supported by NFTfi.\\n * Each NFT is associated with an NFT Type.\\n */\\ncontract PermittedNFTs is Ownable, IPermittedNFTs {\\n    /* ******* */\\n    /* STORAGE */\\n    /* ******* */\\n\\n    INftfiHub public hub;\\n\\n    /**\\n     * @notice A mapping from an NFT contract's address to the Token type of that contract. A zero Token Type indicates\\n     * non-permitted.\\n     */\\n    mapping(address => bytes32) private nftPermits;\\n\\n    /* ****** */\\n    /* EVENTS */\\n    /* ****** */\\n\\n    /**\\n     * @notice This event is fired whenever the admin sets a NFT's permit.\\n     *\\n     * @param nftContract - Address of the NFT contract.\\n     * @param nftType - NTF type e.g. bytes32(\\\"CRYPTO_KITTIES\\\")\\n     */\\n    event NFTPermit(address indexed nftContract, bytes32 indexed nftType);\\n\\n    /* ********* */\\n    /* MODIFIERS */\\n    /* ********* */\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwnerOrAirdropFactory(string memory _nftType) {\\n        if (\\n            ContractKeys.getIdFromStringKey(_nftType) ==\\n            ContractKeys.getIdFromStringKey(ContractKeys.AIRDROP_WRAPPER_STRING)\\n        ) {\\n            require(hub.getContract(ContractKeys.AIRDROP_FACTORY) == _msgSender(), \\\"caller is not AirdropFactory\\\");\\n        } else {\\n            require(owner() == _msgSender(), \\\"caller is not owner\\\");\\n        }\\n        _;\\n    }\\n\\n    /* *********** */\\n    /* CONSTRUCTOR */\\n    /* *********** */\\n\\n    /**\\n     * @dev Sets `nftTypeRegistry`\\n     * Initialize `nftPermits` with a batch of permitted NFTs\\n     *\\n     * @param _admin - Initial admin of this contract.\\n     * @param _nftfiHub - Address of the NftfiHub contract\\n     * @param _nftContracts - The addresses of the NFT contracts.\\n     * @param _nftTypes - The NFT Types. e.g. \\\"CRYPTO_KITTIES\\\"\\n     * - \\\"\\\" means \\\"disable this permit\\\"\\n     * - != \\\"\\\" means \\\"enable permit with the given NFT Type\\\"\\n     */\\n    constructor(\\n        address _admin,\\n        address _nftfiHub,\\n        address[] memory _nftContracts,\\n        string[] memory _nftTypes\\n    ) Ownable(_admin) {\\n        hub = INftfiHub(_nftfiHub);\\n        _setNFTPermits(_nftContracts, _nftTypes);\\n    }\\n\\n    /* ********* */\\n    /* FUNCTIONS */\\n    /* ********* */\\n\\n    /**\\n     * @notice This function can be called by admins to change the permitted list status of an NFT contract. This\\n     * includes both adding an NFT contract to the permitted list and removing it.\\n     * `_nftContract` can not be zero address.\\n     *\\n     * @param _nftContract - The address of the NFT contract.\\n     * @param _nftType - The NFT Type. e.g. \\\"CRYPTO_KITTIES\\\"\\n     * - \\\"\\\" means \\\"disable this permit\\\"\\n     * - != \\\"\\\" means \\\"enable permit with the given NFT Type\\\"\\n     */\\n    function setNFTPermit(address _nftContract, string memory _nftType)\\n        external\\n        override\\n        onlyOwnerOrAirdropFactory(_nftType)\\n    {\\n        _setNFTPermit(_nftContract, _nftType);\\n    }\\n\\n    /**\\n     * @notice This function can be called by admins to change the permitted list status of a batch NFT contracts. This\\n     * includes both adding an NFT contract to the permitted list and removing it.\\n     * `_nftContract` can not be zero address.\\n     *\\n     * @param _nftContracts - The addresses of the NFT contracts.\\n     * @param _nftTypes - The NFT Types. e.g. \\\"CRYPTO_KITTIES\\\"\\n     * - \\\"\\\" means \\\"disable this permit\\\"\\n     * - != \\\"\\\" means \\\"enable permit with the given NFT Type\\\"\\n     */\\n    function setNFTPermits(address[] memory _nftContracts, string[] memory _nftTypes) external onlyOwner {\\n        _setNFTPermits(_nftContracts, _nftTypes);\\n    }\\n\\n    /**\\n     * @notice This function can be called by anyone to lookup the Nft Type associated with the contract.\\n     * @param  _nftContract - The address of the NFT contract.\\n     * @notice Returns the NFT Type:\\n     * - bytes32(\\\"\\\") means \\\"not permitted\\\"\\n     * - != bytes32(\\\"\\\") means \\\"permitted with the given NFT Type\\\"\\n     */\\n    function getNFTPermit(address _nftContract) external view override returns (bytes32) {\\n        return nftPermits[_nftContract];\\n    }\\n\\n    /**\\n     * @notice This function can be called by anyone to lookup the address of the NftWrapper associated to the\\n     * `_nftContract` type.\\n     * @param _nftContract - The address of the NFT contract.\\n     */\\n    function getNFTWrapper(address _nftContract) external view override returns (address) {\\n        bytes32 nftType = nftPermits[_nftContract];\\n        return _getWrapper(nftType);\\n    }\\n\\n    /**\\n     * @notice This function changes the permitted list status of an NFT contract. This includes both adding an NFT\\n     * contract to the permitted list and removing it.\\n     * @param _nftContract - The address of the NFT contract.\\n     * @param _nftType - The NFT Type. e.g. bytes32(\\\"CRYPTO_KITTIES\\\")\\n     * - bytes32(\\\"\\\") means \\\"disable this permit\\\"\\n     * - != bytes32(\\\"\\\") means \\\"enable permit with the given NFT Type\\\"\\n     */\\n    function _setNFTPermit(address _nftContract, string memory _nftType) internal {\\n        require(_nftContract != address(0), \\\"nftContract is zero address\\\");\\n        bytes32 nftTypeKey = ContractKeys.getIdFromStringKey(_nftType);\\n\\n        if (nftTypeKey != 0) {\\n            require(_getWrapper(nftTypeKey) != address(0), \\\"NFT type not registered\\\");\\n        }\\n\\n        require(\\n            nftPermits[_nftContract] != ContractKeys.getIdFromStringKey(ContractKeys.AIRDROP_WRAPPER_STRING),\\n            \\\"AirdropWrapper can't be modified\\\"\\n        );\\n        nftPermits[_nftContract] = nftTypeKey;\\n        emit NFTPermit(_nftContract, nftTypeKey);\\n    }\\n\\n    /**\\n     * @notice This function changes the permitted list status of a batch NFT contracts. This includes both adding an\\n     * NFT contract to the permitted list and removing it.\\n     * @param _nftContracts - The addresses of the NFT contracts.\\n     * @param _nftTypes - The NFT Types. e.g. \\\"CRYPTO_KITTIES\\\"\\n     * - \\\"\\\" means \\\"disable this permit\\\"\\n     * - != \\\"\\\" means \\\"enable permit with the given NFT Type\\\"\\n     */\\n    function _setNFTPermits(address[] memory _nftContracts, string[] memory _nftTypes) internal {\\n        require(_nftContracts.length == _nftTypes.length, \\\"setNFTPermits function information arity mismatch\\\");\\n\\n        for (uint256 i = 0; i < _nftContracts.length; i++) {\\n            _setNFTPermit(_nftContracts[i], _nftTypes[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the wrapper for the nft type\\n     * @param _nftTypeKey - The key of the nft type\\n     * @return the address of the wrapper\\n     */\\n    function _getWrapper(bytes32 _nftTypeKey) internal view returns (address) {\\n        INftTypeRegistry nftTypeRegistry = INftTypeRegistry(hub.getContract(ContractKeys.NFT_TYPE_REGISTRY));\\n        return nftTypeRegistry.getNftTypeWrapper(_nftTypeKey);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPermittedNFTs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface IPermittedNFTs {\\n    function setNFTPermit(address _nftContract, string memory _nftType) external;\\n\\n    function getNFTPermit(address _nftContract) external view returns (bytes32);\\n\\n    function getNFTWrapper(address _nftContract) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INftTypeRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title INftTypeRegistry\\n * @author NFTfi\\n * @dev Interface for NFT Types Registry supported by NFTfi.\\n */\\ninterface INftTypeRegistry {\\n    function setNftType(bytes32 _nftType, address _nftWrapper) external;\\n\\n    function getNftTypeWrapper(bytes32 _nftType) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INftfiHub.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title INftfiHub\\n * @author NFTfi\\n * @dev NftfiHub interface\\n */\\ninterface INftfiHub {\\n    function setContract(string calldata _contractKey, address _contractAddress) external;\\n\\n    function getContract(bytes32 _contractKey) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * Modified version from openzeppelin/contracts/access/Ownable.sol that allows to\\n * initialize the owner using a parameter in the constructor\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor(address _initialOwner) {\\n        _setOwner(_initialOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address _newOwner) public virtual onlyOwner {\\n        require(_newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(_newOwner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Sets the owner.\\n     */\\n    function _setOwner(address _newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = _newOwner;\\n        emit OwnershipTransferred(oldOwner, _newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ContractKeys.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title ContractKeys\\n * @author NFTfi\\n * @dev Common library for contract keys\\n */\\nlibrary ContractKeys {\\n    bytes32 public constant PERMITTED_ERC20S = bytes32(\\\"PERMITTED_ERC20S\\\");\\n    bytes32 public constant PERMITTED_NFTS = bytes32(\\\"PERMITTED_NFTS\\\");\\n    bytes32 public constant PERMITTED_PARTNERS = bytes32(\\\"PERMITTED_PARTNERS\\\");\\n    bytes32 public constant NFT_TYPE_REGISTRY = bytes32(\\\"NFT_TYPE_REGISTRY\\\");\\n    bytes32 public constant LOAN_REGISTRY = bytes32(\\\"LOAN_REGISTRY\\\");\\n    bytes32 public constant PERMITTED_SNFT_RECEIVER = bytes32(\\\"PERMITTED_SNFT_RECEIVER\\\");\\n    bytes32 public constant PERMITTED_BUNDLE_ERC20S = bytes32(\\\"PERMITTED_BUNDLE_ERC20S\\\");\\n    bytes32 public constant PERMITTED_AIRDROPS = bytes32(\\\"PERMITTED_AIRDROPS\\\");\\n    bytes32 public constant AIRDROP_RECEIVER = bytes32(\\\"AIRDROP_RECEIVER\\\");\\n    bytes32 public constant AIRDROP_FACTORY = bytes32(\\\"AIRDROP_FACTORY\\\");\\n    bytes32 public constant AIRDROP_FLASH_LOAN = bytes32(\\\"AIRDROP_FLASH_LOAN\\\");\\n    bytes32 public constant NFTFI_BUNDLER = bytes32(\\\"NFTFI_BUNDLER\\\");\\n\\n    string public constant AIRDROP_WRAPPER_STRING = \\\"AirdropWrapper\\\";\\n\\n    /**\\n     * @notice Returns the bytes32 representation of a string\\n     * @param _key the string key\\n     * @return id bytes32 representation\\n     */\\n    function getIdFromStringKey(string memory _key) external pure returns (bytes32 id) {\\n        require(bytes(_key).length <= 32, \\\"invalid key\\\");\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := mload(add(_key, 32))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/utils/ContractKeys.sol\": {\r\n        \"ContractKeys\": \"0x9cd0bbd444a7496b81d329a4af66024071271828\"\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftfiHub\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_nftContracts\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_nftTypes\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nftType\",\"type\":\"bytes32\"}],\"name\":\"NFTPermit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"}],\"name\":\"getNFTPermit\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"}],\"name\":\"getNFTWrapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hub\",\"outputs\":[{\"internalType\":\"contract INftfiHub\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_nftType\",\"type\":\"string\"}],\"name\":\"setNFTPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nftContracts\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_nftTypes\",\"type\":\"string[]\"}],\"name\":\"setNFTPermits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PermittedNFTs","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"0000000000000000000000003d5437e05cbb27537e1bd80d5f409c6f1c894745000000000000000000000000f575cfe69e41e96e921bb7a91d867cfd88cd1596000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000f87e31492faf9a91b02ee0deaad50d51d56d5d4d00000000000000000000000079986af15539de2db9a5086382daeda917a9cf0c000000000000000000000000913ae503153d9a335398d0785ba60a2d63ddb4e200000000000000000000000050f5474724e0ee42d9a4e711ccfb275809fd6d4a0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000cersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}