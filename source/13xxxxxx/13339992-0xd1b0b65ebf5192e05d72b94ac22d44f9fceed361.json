{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/protocol/stake/StakeConfigurator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport '../../tools/upgradeability/VersionedInitializable.sol';\\nimport '../../access/interfaces/IMarketAccessController.sol';\\nimport '../../interfaces/IDerivedToken.sol';\\nimport '../../interfaces/IDepositToken.sol';\\nimport '../../access/MarketAccessBitmask.sol';\\nimport '../../access/AccessFlags.sol';\\nimport '../../tools/upgradeability/IProxy.sol';\\nimport '../../tools/upgradeability/ProxyAdmin.sol';\\nimport './interfaces/IStakeConfigurator.sol';\\nimport './interfaces/IInitializableStakeToken.sol';\\nimport './interfaces/StakeTokenConfig.sol';\\nimport './interfaces/IManagedStakeToken.sol';\\n\\ncontract StakeConfigurator is MarketAccessBitmask, VersionedInitializable, IStakeConfigurator {\\n  uint256 private constant CONFIGURATOR_REVISION = 1;\\n\\n  mapping(uint256 => address) private _entries;\\n  uint256 private _entryCount;\\n  mapping(address => uint256) private _underlyings;\\n\\n  ProxyAdmin internal immutable _proxies;\\n\\n  constructor() MarketAccessBitmask(IMarketAccessController(address(0))) {\\n    _proxies = new ProxyAdmin();\\n  }\\n\\n  function getRevision() internal pure virtual override returns (uint256) {\\n    return CONFIGURATOR_REVISION;\\n  }\\n\\n  // This initializer is invoked by AccessController.setAddressAsImpl\\n  function initialize(address addressesProvider) external initializer(CONFIGURATOR_REVISION) {\\n    _remoteAcl = IMarketAccessController(addressesProvider);\\n  }\\n\\n  function getProxyAdmin() external view returns (address) {\\n    return address(_proxies);\\n  }\\n\\n  function list() public view override returns (address[] memory tokens) {\\n    if (_entryCount == 0) {\\n      return tokens;\\n    }\\n    tokens = new address[](_entryCount);\\n    for (uint256 i = 1; i <= _entryCount; i++) {\\n      tokens[i - 1] = _entries[i];\\n    }\\n    return tokens;\\n  }\\n\\n  function stakeTokenOf(address underlying) public view override returns (address) {\\n    uint256 i = _underlyings[underlying];\\n    if (i == 0) {\\n      return address(0);\\n    }\\n    return _entries[i];\\n  }\\n\\n  function dataOf(address stakeToken) public view override returns (StakeTokenData memory data) {\\n    (data.config, data.stkTokenName, data.stkTokenSymbol) = IInitializableStakeToken(stakeToken)\\n      .initializedStakeTokenWith();\\n    data.token = stakeToken;\\n\\n    return data;\\n  }\\n\\n  function getStakeTokensData() public view override returns (StakeTokenData[] memory dataList, uint256 count) {\\n    if (_entryCount == 0) {\\n      return (dataList, 0);\\n    }\\n    dataList = new StakeTokenData[](_entryCount);\\n    for (uint256 i = 1; i <= _entryCount; i++) {\\n      address token = _entries[i];\\n      if (token == address(0)) {\\n        continue;\\n      }\\n      dataList[count] = dataOf(token);\\n      count++;\\n    }\\n    return (dataList, count);\\n  }\\n\\n  function addStakeToken(address token) public aclHas(AccessFlags.STAKE_ADMIN) {\\n    require(token != address(0), 'unknown token');\\n    _addStakeToken(token, IDerivedToken(token).UNDERLYING_ASSET_ADDRESS());\\n  }\\n\\n  function removeStakeTokenByUnderlying(address underlying) public aclHas(AccessFlags.STAKE_ADMIN) returns (bool) {\\n    require(underlying != address(0), 'unknown underlying');\\n    uint256 i = _underlyings[underlying];\\n    if (i == 0) {\\n      return false;\\n    }\\n\\n    emit StakeTokenRemoved(_entries[i], underlying);\\n\\n    delete (_entries[i]);\\n    delete (_underlyings[underlying]);\\n    return true;\\n  }\\n\\n  function _addStakeToken(address token, address underlying) private {\\n    require(token != address(0), 'unknown token');\\n    require(underlying != address(0), 'unknown underlying');\\n    require(stakeTokenOf(underlying) == address(0), 'ambiguous underlying');\\n\\n    _entryCount++;\\n    _entries[_entryCount] = token;\\n    _underlyings[underlying] = _entryCount;\\n\\n    emit StakeTokenAdded(token, underlying);\\n  }\\n\\n  function batchInitStakeTokens(InitStakeTokenData[] memory input) public aclHas(AccessFlags.STAKE_ADMIN) {\\n    for (uint256 i = 0; i < input.length; i++) {\\n      initStakeToken(input[i]);\\n    }\\n  }\\n\\n  function initStakeToken(InitStakeTokenData memory input) private returns (address token) {\\n    StakeTokenConfig memory config = StakeTokenConfig(\\n      _remoteAcl,\\n      IERC20(input.stakedToken),\\n      IUnderlyingStrategy(input.strategy),\\n      input.cooldownPeriod,\\n      input.unstakePeriod,\\n      input.maxSlashable,\\n      input.stkTokenDecimals\\n    );\\n\\n    bytes memory params = abi.encodeWithSelector(\\n      IInitializableStakeToken.initializeStakeToken.selector,\\n      config,\\n      input.stkTokenName,\\n      input.stkTokenSymbol\\n    );\\n\\n    token = address(_remoteAcl.createProxy(address(_proxies), input.stakeTokenImpl, params));\\n    if (input.depositStake) {\\n      IDepositToken(input.stakedToken).addStakeOperator(token);\\n    }\\n\\n    emit StakeTokenInitialized(token, input);\\n\\n    _addStakeToken(token, input.stakedToken);\\n\\n    return token;\\n  }\\n\\n  function implementationOf(address token) external view returns (address) {\\n    return _proxies.getProxyImplementation(IProxy(token));\\n  }\\n\\n  function updateStakeToken(UpdateStakeTokenData calldata input) external aclHas(AccessFlags.STAKE_ADMIN) {\\n    StakeTokenData memory data = dataOf(input.token);\\n\\n    bytes memory params = abi.encodeWithSelector(\\n      IInitializableStakeToken.initializeStakeToken.selector,\\n      data.config,\\n      input.stkTokenName,\\n      input.stkTokenSymbol\\n    );\\n\\n    _proxies.upgradeAndCall(IProxy(input.token), input.stakeTokenImpl, params);\\n\\n    emit StakeTokenUpgraded(input.token, input);\\n  }\\n\\n  function setCooldownForAll(uint32 cooldownPeriod, uint32 unstakePeriod)\\n    external\\n    override\\n    aclHas(AccessFlags.STAKE_ADMIN)\\n  {\\n    for (uint256 i = 1; i <= _entryCount; i++) {\\n      IManagedStakeToken(_entries[i]).setCooldown(cooldownPeriod, unstakePeriod);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP excluding events to avoid linearization issues.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/tools/upgradeability/VersionedInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to implement versioned initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` or `initializerRunAlways` modifier.\\n * The revision number should be defined as a private constant, returned by getRevision() and used by initializer() modifier.\\n *\\n * ATTN: There is a built-in protection from implementation self-destruct exploits. This protection\\n * prevents initializers from being called on an implementation inself, but only on proxied contracts.\\n * To override this protection, call _unsafeResetVersionedInitializers() from a constructor.\\n *\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an initializable contract, as well\\n * as extending an initializable contract via inheritance.\\n *\\n * ATTN: When used with inheritance, parent initializers with `initializer` modifier are prevented by calling twice,\\n * but can only be called in child-to-parent sequence.\\n *\\n * WARNING: When used with inheritance, parent initializers with `initializerRunAlways` modifier\\n * are NOT protected from multiple calls by another initializer.\\n */\\nabstract contract VersionedInitializable {\\n  uint256 private constant BLOCK_REVISION = type(uint256).max;\\n  // This revision number is applied to implementations\\n  uint256 private constant IMPL_REVISION = BLOCK_REVISION - 1;\\n\\n  /// @dev Indicates that the contract has been initialized. The default value blocks initializers from being called on an implementation.\\n  uint256 private lastInitializedRevision = IMPL_REVISION;\\n\\n  /// @dev Indicates that the contract is in the process of being initialized.\\n  uint256 private lastInitializingRevision = 0;\\n\\n  /**\\n   * @dev There is a built-in protection from self-destruct of implementation exploits. This protection\\n   * prevents initializers from being called on an implementation inself, but only on proxied contracts.\\n   * Function _unsafeResetVersionedInitializers() can be called from a constructor to disable this protection.\\n   * It must be called before any initializers, otherwise it will fail.\\n   */\\n  function _unsafeResetVersionedInitializers() internal {\\n    require(isConstructor(), 'only for constructor');\\n\\n    if (lastInitializedRevision == IMPL_REVISION) {\\n      lastInitializedRevision = 0;\\n    } else {\\n      require(lastInitializedRevision == 0, 'can only be called before initializer(s)');\\n    }\\n  }\\n\\n  /// @dev Modifier to use in the initializer function of a contract.\\n  modifier initializer(uint256 localRevision) {\\n    (uint256 topRevision, bool initializing, bool skip) = _preInitializer(localRevision);\\n\\n    if (!skip) {\\n      lastInitializingRevision = localRevision;\\n      _;\\n      lastInitializedRevision = localRevision;\\n    }\\n\\n    if (!initializing) {\\n      lastInitializedRevision = topRevision;\\n      lastInitializingRevision = 0;\\n    }\\n  }\\n\\n  modifier initializerRunAlways(uint256 localRevision) {\\n    (uint256 topRevision, bool initializing, bool skip) = _preInitializer(localRevision);\\n\\n    if (!skip) {\\n      lastInitializingRevision = localRevision;\\n    }\\n    _;\\n    if (!skip) {\\n      lastInitializedRevision = localRevision;\\n    }\\n\\n    if (!initializing) {\\n      lastInitializedRevision = topRevision;\\n      lastInitializingRevision = 0;\\n    }\\n  }\\n\\n  function _preInitializer(uint256 localRevision)\\n    private\\n    returns (\\n      uint256 topRevision,\\n      bool initializing,\\n      bool skip\\n    )\\n  {\\n    topRevision = getRevision();\\n    require(topRevision < IMPL_REVISION, 'invalid contract revision');\\n\\n    require(localRevision > 0, 'incorrect initializer revision');\\n    require(localRevision <= topRevision, 'inconsistent contract revision');\\n\\n    if (lastInitializedRevision < IMPL_REVISION) {\\n      // normal initialization\\n      initializing = lastInitializingRevision > 0 && lastInitializedRevision < topRevision;\\n      require(initializing || isConstructor() || topRevision > lastInitializedRevision, 'already initialized');\\n    } else {\\n      // by default, initialization of implementation is only allowed inside a constructor\\n      require(lastInitializedRevision == IMPL_REVISION && isConstructor(), 'initializer blocked');\\n\\n      // enable normal use of initializers inside a constructor\\n      lastInitializedRevision = 0;\\n      // but make sure to block initializers afterwards\\n      topRevision = BLOCK_REVISION;\\n\\n      initializing = lastInitializingRevision > 0;\\n    }\\n\\n    if (initializing) {\\n      require(lastInitializingRevision > localRevision, 'incorrect order of initializers');\\n    }\\n\\n    if (localRevision <= lastInitializedRevision) {\\n      // prevent calling of parent's initializer when it was called before\\n      if (initializing) {\\n        // Can't set zero yet, as it is not a top-level call, otherwise `initializing` will become false.\\n        // Further calls will fail with the `incorrect order` assertion above.\\n        lastInitializingRevision = 1;\\n      }\\n      return (topRevision, initializing, true);\\n    }\\n    return (topRevision, initializing, false);\\n  }\\n\\n  function isRevisionInitialized(uint256 localRevision) internal view returns (bool) {\\n    return lastInitializedRevision >= localRevision;\\n  }\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function REVISION() public pure returns (uint256) {\\n    return getRevision();\\n  }\\n\\n  /**\\n   * @dev returns the revision number (< type(uint256).max - 1) of the contract.\\n   * The number should be defined as a private constant.\\n   **/\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    uint256 cs;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      cs := extcodesize(address())\\n    }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[4] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/access/interfaces/IMarketAccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IAccessController.sol';\\n\\n/// @dev Main registry of addresses part of or connected to the protocol, including permissioned roles. Also acts a proxy factory.\\ninterface IMarketAccessController is IAccessController {\\n  function getMarketId() external view returns (string memory);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function getLendingRateOracle() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDerivedToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IDerivedToken {\\n  /**\\n   * @dev Returns the address of the underlying asset of this token (E.g. WETH for agWETH)\\n   **/\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDepositToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport './IScaledBalanceToken.sol';\\nimport './IPoolToken.sol';\\n\\ninterface IDepositToken is IERC20, IPoolToken, IScaledBalanceToken {\\n  /**\\n   * @dev Emitted on mint\\n   * @param account The receiver of minted tokens\\n   * @param value The amount minted\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Mint(address indexed account, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Mints `amount` depositTokens to `user`\\n   * @param user The address receiving the minted tokens\\n   * @param amount The amount of tokens getting minted\\n   * @param index The new liquidity index of the reserve\\n   * @param repayOverdraft Enables to use this amount cover an overdraft\\n   * @return `true` if the the previous balance of the user was 0\\n   */\\n  function mint(\\n    address user,\\n    uint256 amount,\\n    uint256 index,\\n    bool repayOverdraft\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted on burn\\n   * @param account The owner of tokens burned\\n   * @param target The receiver of the underlying\\n   * @param value The amount burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Burn(address indexed account, address indexed target, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Emitted on transfer\\n   * @param from The sender\\n   * @param to The recipient\\n   * @param value The amount transferred\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Burns depositTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n   * @param user The owner of the depositTokens, getting them burned\\n   * @param receiverOfUnderlying The address that will receive the underlying\\n   * @param amount The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  function burn(\\n    address user,\\n    address receiverOfUnderlying,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n\\n  /**\\n   * @dev Mints depositTokens to the reserve treasury\\n   * @param amount The amount of tokens getting minted\\n   * @param index The new liquidity index of the reserve\\n   */\\n  function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n  /**\\n   * @dev Transfers depositTokens in the event of a borrow being liquidated, in case the liquidators reclaims the depositToken\\n   * @param from The address getting liquidated, current owner of the depositTokens\\n   * @param to The recipient\\n   * @param value The amount of tokens getting transferred\\n   * @param index The liquidity index of the reserve\\n   * @param transferUnderlying is true when the underlying should be, otherwise the depositToken\\n   * @return true when transferUnderlying is false and the recipient had zero balance\\n   **/\\n  function transferOnLiquidation(\\n    address from,\\n    address to,\\n    uint256 value,\\n    uint256 index,\\n    bool transferUnderlying\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\\n   * assets in borrow(), withdraw() and flashLoan()\\n   * @param user The recipient of the underlying\\n   * @param amount The amount getting transferred\\n   * @return The amount transferred\\n   **/\\n  function transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\\n\\n  function collateralBalanceOf(address) external view returns (uint256);\\n\\n  /**\\n   * @dev Emitted on use of overdraft (by liquidation)\\n   * @param account The receiver of overdraft (user with shortage)\\n   * @param value The amount received\\n   * @param index The liquidity index of the reserve\\n   **/\\n  event OverdraftApplied(address indexed account, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Emitted on return of overdraft allowance when it was fully or partially used\\n   * @param provider The provider of overdraft\\n   * @param recipient The receiver of overdraft\\n   * @param overdraft The amount overdraft that was covered by the provider\\n   * @param index The liquidity index of the reserve\\n   **/\\n  event OverdraftCovered(address indexed provider, address indexed recipient, uint256 overdraft, uint256 index);\\n\\n  event SubBalanceProvided(address indexed provider, address indexed recipient, uint256 amount, uint256 index);\\n  event SubBalanceReturned(address indexed provider, address indexed recipient, uint256 amount, uint256 index);\\n  event SubBalanceLocked(address indexed provider, uint256 amount, uint256 index);\\n  event SubBalanceUnlocked(address indexed provider, uint256 amount, uint256 index);\\n\\n  function updateTreasury() external;\\n\\n  function addSubBalanceOperator(address addr) external;\\n\\n  function addStakeOperator(address addr) external;\\n\\n  function removeSubBalanceOperator(address addr) external;\\n\\n  function provideSubBalance(\\n    address provider,\\n    address recipient,\\n    uint256 scaledAmount\\n  ) external;\\n\\n  function returnSubBalance(\\n    address provider,\\n    address recipient,\\n    uint256 scaledAmount,\\n    bool preferOverdraft\\n  ) external returns (uint256 coveredOverdraft);\\n\\n  function lockSubBalance(address provider, uint256 scaledAmount) external;\\n\\n  function unlockSubBalance(\\n    address provider,\\n    uint256 scaledAmount,\\n    address transferTo\\n  ) external;\\n\\n  function replaceSubBalance(\\n    address prevProvider,\\n    address recipient,\\n    uint256 prevScaledAmount,\\n    address newProvider,\\n    uint256 newScaledAmount\\n  ) external returns (uint256 coveredOverdraftByPrevProvider);\\n\\n  function transferLockedBalance(\\n    address from,\\n    address to,\\n    uint256 scaledAmount\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/access/MarketAccessBitmask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../tools/Errors.sol';\\nimport './interfaces/IMarketAccessController.sol';\\nimport './AccessHelper.sol';\\nimport './AccessFlags.sol';\\n\\n// solhint-disable func-name-mixedcase\\nabstract contract MarketAccessBitmaskMin {\\n  using AccessHelper for IMarketAccessController;\\n  IMarketAccessController internal _remoteAcl;\\n\\n  constructor(IMarketAccessController remoteAcl) {\\n    _remoteAcl = remoteAcl;\\n  }\\n\\n  function _getRemoteAcl(address addr) internal view returns (uint256) {\\n    return _remoteAcl.getAcl(addr);\\n  }\\n\\n  function hasRemoteAcl() internal view returns (bool) {\\n    return _remoteAcl != IMarketAccessController(address(0));\\n  }\\n\\n  function acl_hasAnyOf(address subject, uint256 flags) internal view returns (bool) {\\n    return _remoteAcl.hasAnyOf(subject, flags);\\n  }\\n\\n  modifier aclHas(uint256 flags) virtual {\\n    _remoteAcl.requireAnyOf(msg.sender, flags, Errors.TXT_ACCESS_RESTRICTED);\\n    _;\\n  }\\n\\n  modifier aclAnyOf(uint256 flags) {\\n    _remoteAcl.requireAnyOf(msg.sender, flags, Errors.TXT_ACCESS_RESTRICTED);\\n    _;\\n  }\\n\\n  modifier onlyPoolAdmin() {\\n    _remoteAcl.requireAnyOf(msg.sender, AccessFlags.POOL_ADMIN, Errors.CALLER_NOT_POOL_ADMIN);\\n    _;\\n  }\\n\\n  modifier onlyRewardAdmin() {\\n    _remoteAcl.requireAnyOf(msg.sender, AccessFlags.REWARD_CONFIG_ADMIN, Errors.CALLER_NOT_REWARD_CONFIG_ADMIN);\\n    _;\\n  }\\n\\n  modifier onlyRewardConfiguratorOrAdmin() {\\n    _remoteAcl.requireAnyOf(\\n      msg.sender,\\n      AccessFlags.REWARD_CONFIG_ADMIN | AccessFlags.REWARD_CONFIGURATOR,\\n      Errors.CALLER_NOT_REWARD_CONFIG_ADMIN\\n    );\\n    _;\\n  }\\n}\\n\\nabstract contract MarketAccessBitmask is MarketAccessBitmaskMin {\\n  using AccessHelper for IMarketAccessController;\\n\\n  constructor(IMarketAccessController remoteAcl) MarketAccessBitmaskMin(remoteAcl) {}\\n\\n  modifier onlyEmergencyAdmin() {\\n    _remoteAcl.requireAnyOf(msg.sender, AccessFlags.EMERGENCY_ADMIN, Errors.CALLER_NOT_EMERGENCY_ADMIN);\\n    _;\\n  }\\n\\n  function _onlySweepAdmin() internal view virtual {\\n    _remoteAcl.requireAnyOf(msg.sender, AccessFlags.SWEEP_ADMIN, Errors.CALLER_NOT_SWEEP_ADMIN);\\n  }\\n\\n  modifier onlySweepAdmin() {\\n    _onlySweepAdmin();\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/access/AccessFlags.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nlibrary AccessFlags {\\n  // roles that can be assigned to multiple addresses - use range [0..15]\\n  uint256 public constant EMERGENCY_ADMIN = 1 << 0;\\n  uint256 public constant POOL_ADMIN = 1 << 1;\\n  uint256 public constant TREASURY_ADMIN = 1 << 2;\\n  uint256 public constant REWARD_CONFIG_ADMIN = 1 << 3;\\n  uint256 public constant REWARD_RATE_ADMIN = 1 << 4;\\n  uint256 public constant STAKE_ADMIN = 1 << 5;\\n  uint256 public constant REFERRAL_ADMIN = 1 << 6;\\n  uint256 public constant LENDING_RATE_ADMIN = 1 << 7;\\n  uint256 public constant SWEEP_ADMIN = 1 << 8;\\n  uint256 public constant ORACLE_ADMIN = 1 << 9;\\n\\n  uint256 public constant ROLES = (uint256(1) << 16) - 1;\\n\\n  // singletons - use range [16..64] - can ONLY be assigned to a single address\\n  uint256 public constant SINGLETONS = ((uint256(1) << 64) - 1) & ~ROLES;\\n\\n  // proxied singletons\\n  uint256 public constant LENDING_POOL = 1 << 16;\\n  uint256 public constant LENDING_POOL_CONFIGURATOR = 1 << 17;\\n  uint256 public constant LIQUIDITY_CONTROLLER = 1 << 18;\\n  uint256 public constant TREASURY = 1 << 19;\\n  uint256 public constant REWARD_TOKEN = 1 << 20;\\n  uint256 public constant REWARD_STAKE_TOKEN = 1 << 21;\\n  uint256 public constant REWARD_CONTROLLER = 1 << 22;\\n  uint256 public constant REWARD_CONFIGURATOR = 1 << 23;\\n  uint256 public constant STAKE_CONFIGURATOR = 1 << 24;\\n  uint256 public constant REFERRAL_REGISTRY = 1 << 25;\\n\\n  uint256 public constant PROXIES = ((uint256(1) << 26) - 1) & ~ROLES;\\n\\n  // non-proxied singletons, numbered down from 31 (as JS has problems with bitmasks over 31 bits)\\n  uint256 public constant WETH_GATEWAY = 1 << 27;\\n  uint256 public constant DATA_HELPER = 1 << 28;\\n  uint256 public constant PRICE_ORACLE = 1 << 29;\\n  uint256 public constant LENDING_RATE_ORACLE = 1 << 30;\\n\\n  // any other roles - use range [64..]\\n  // these roles can be assigned to multiple addresses\\n\\n  uint256 public constant TRUSTED_FLASHLOAN = 1 << 66;\\n}\\n\"\r\n    },\r\n    \"contracts/tools/upgradeability/IProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IProxy {\\n  function upgradeToAndCall(address newImplementation, bytes calldata data) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/tools/upgradeability/ProxyAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IProxy.sol';\\nimport './ProxyAdminBase.sol';\\nimport '../Errors.sol';\\n\\n/// @dev This contract meant to be assigned as the admin of a {IProxy}. Adopted from the OpenZeppelin\\ncontract ProxyAdmin is ProxyAdminBase {\\n  address private immutable _owner;\\n\\n  constructor() {\\n    _owner = msg.sender;\\n  }\\n\\n  /// @dev Returns the address of the current owner.\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /// @dev Throws if called by any account other than the owner.\\n  modifier onlyOwner() {\\n    require(_owner == msg.sender, Errors.TXT_CALLER_NOT_PROXY_OWNER);\\n    _;\\n  }\\n\\n  /// @dev Returns the current implementation of `proxy`.\\n  function getProxyImplementation(IProxy proxy) public view virtual returns (address) {\\n    return _getProxyImplementation(proxy);\\n  }\\n\\n  /// @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation.\\n  function upgradeAndCall(\\n    IProxy proxy,\\n    address implementation,\\n    bytes memory data\\n  ) public payable virtual onlyOwner {\\n    proxy.upgradeToAndCall{value: msg.value}(implementation, data);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/stake/interfaces/IStakeConfigurator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './StakeTokenConfig.sol';\\n\\ninterface IStakeConfigurator {\\n  struct InitStakeTokenData {\\n    address stakeTokenImpl;\\n    address stakedToken;\\n    address strategy;\\n    string stkTokenName;\\n    string stkTokenSymbol;\\n    uint32 cooldownPeriod;\\n    uint32 unstakePeriod;\\n    uint16 maxSlashable;\\n    uint8 stkTokenDecimals;\\n    bool depositStake;\\n  }\\n\\n  struct UpdateStakeTokenData {\\n    address token;\\n    address stakeTokenImpl;\\n    string stkTokenName;\\n    string stkTokenSymbol;\\n  }\\n\\n  struct StakeTokenData {\\n    address token;\\n    string stkTokenName;\\n    string stkTokenSymbol;\\n    StakeTokenConfig config;\\n  }\\n\\n  event StakeTokenInitialized(address indexed token, InitStakeTokenData data);\\n\\n  event StakeTokenUpgraded(address indexed token, UpdateStakeTokenData data);\\n\\n  event StakeTokenAdded(address indexed token, address indexed underlying);\\n\\n  event StakeTokenRemoved(address indexed token, address indexed underlying);\\n\\n  function list() external view returns (address[] memory tokens);\\n\\n  function dataOf(address stakeToken) external view returns (StakeTokenData memory data);\\n\\n  function stakeTokenOf(address underlying) external view returns (address);\\n\\n  function getStakeTokensData() external view returns (StakeTokenData[] memory dataList, uint256 count);\\n\\n  function setCooldownForAll(uint32 cooldownPeriod, uint32 unstakePeriod) external;\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/stake/interfaces/IInitializableStakeToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './StakeTokenConfig.sol';\\n\\n/// @dev Interface for the initialize function on StakeToken\\ninterface IInitializableStakeToken {\\n  event Initialized(StakeTokenConfig params, string tokenName, string tokenSymbol);\\n\\n  function initializeStakeToken(\\n    StakeTokenConfig calldata params,\\n    string calldata name,\\n    string calldata symbol\\n  ) external;\\n\\n  function initializedStakeTokenWith()\\n    external\\n    view\\n    returns (\\n      StakeTokenConfig memory params,\\n      string memory name,\\n      string memory symbol\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/stake/interfaces/StakeTokenConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport '../../../access/interfaces/IMarketAccessController.sol';\\nimport '../../../interfaces/IUnderlyingStrategy.sol';\\n\\nstruct StakeTokenConfig {\\n  IMarketAccessController stakeController;\\n  IERC20 stakedToken;\\n  IUnderlyingStrategy strategy;\\n  uint32 cooldownPeriod;\\n  uint32 unstakePeriod;\\n  uint16 maxSlashable;\\n  uint8 stakedTokenDecimals;\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/stake/interfaces/IManagedStakeToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../../interfaces/IEmergencyAccess.sol';\\n\\ninterface IManagedStakeToken is IEmergencyAccess {\\n  event Slashed(address to, uint256 amount, uint256 totalBeforeSlash);\\n\\n  event MaxSlashUpdated(uint16 maxSlash);\\n  event CooldownUpdated(uint32 cooldownPeriod, uint32 unstakePeriod);\\n\\n  event RedeemableUpdated(bool redeemable);\\n\\n  function setRedeemable(bool redeemable) external;\\n\\n  function setMaxSlashablePercentage(uint16 percentage) external;\\n\\n  function setCooldown(uint32 cooldownPeriod, uint32 unstakePeriod) external;\\n\\n  function slashUnderlying(\\n    address destination,\\n    uint256 minAmount,\\n    uint256 maxAmount\\n  ) external returns (uint256 amount, bool erc20Transfer);\\n}\\n\"\r\n    },\r\n    \"contracts/access/interfaces/IAccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IRemoteAccessBitmask.sol';\\nimport '../../tools/upgradeability/IProxy.sol';\\n\\n/// @dev Main registry of permissions and addresses\\ninterface IAccessController is IRemoteAccessBitmask {\\n  function getAddress(uint256 id) external view returns (address);\\n\\n  function createProxy(\\n    address admin,\\n    address impl,\\n    bytes calldata params\\n  ) external returns (IProxy);\\n}\\n\"\r\n    },\r\n    \"contracts/access/interfaces/IRemoteAccessBitmask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IRemoteAccessBitmask {\\n  /**\\n   * @dev Returns access flags granted to the given address and limited by the filterMask. filterMask == 0 has a special meaning.\\n   * @param addr an to get access perfmissions for\\n   * @param filterMask limits a subset of flags to be checked.\\n   * NB! When filterMask == 0 then zero is returned no flags granted, or an unspecified non-zero value otherwise.\\n   * @return Access flags currently granted\\n   */\\n  function queryAccessControlMask(address addr, uint256 filterMask) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IScaledBalanceToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IScaledBalanceToken {\\n  /**\\n   * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n   * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n   * @param user The user whose balance is calculated\\n   * @return The scaled balance of the user\\n   **/\\n  function scaledBalanceOf(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the scaled balance of the user and the scaled total supply.\\n   * @param user The address of the user\\n   * @return The scaled balance of the user\\n   * @return The scaled balance and the scaled total supply\\n   **/\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n  /**\\n   * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n   * @return The scaled total supply\\n   **/\\n  function scaledTotalSupply() external view returns (uint256);\\n\\n  function getScaleIndex() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IDerivedToken.sol';\\n\\n// solhint-disable func-name-mixedcase\\ninterface IPoolToken is IDerivedToken {\\n  function POOL() external view returns (address);\\n\\n  function updatePool() external;\\n}\\n\"\r\n    },\r\n    \"contracts/tools/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Errors library\\n * @notice Defines the error messages emitted by the different contracts\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (DepositToken, VariableDebtToken and StableDebtToken)\\n *  - AT = DepositToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - LP = LendingPool\\n *  - LPAPR = AddressesProviderRegistry\\n *  - LPC = LendingPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - LPCM = LendingPoolExtension\\n *  - ST = Stake\\n */\\nlibrary Errors {\\n  //contract specific errors\\n  string public constant VL_INVALID_AMOUNT = '1'; // Amount must be greater than 0\\n  string public constant VL_NO_ACTIVE_RESERVE = '2'; // Action requires an active reserve\\n  string public constant VL_RESERVE_FROZEN = '3'; // Action cannot be performed because the reserve is frozen\\n  string public constant VL_UNKNOWN_RESERVE = '4'; // Action requires an active reserve\\n  string public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = '5'; // User cannot withdraw more than the available balance (above min limit)\\n  string public constant VL_TRANSFER_NOT_ALLOWED = '6'; // Transfer cannot be allowed.\\n  string public constant VL_BORROWING_NOT_ENABLED = '7'; // Borrowing is not enabled\\n  string public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = '8'; // Invalid interest rate mode selected\\n  string public constant VL_COLLATERAL_BALANCE_IS_0 = '9'; // The collateral balance is 0\\n  string public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '10'; // Health factor is lesser than the liquidation threshold\\n  string public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = '11'; // There is not enough collateral to cover a new borrow\\n  string public constant VL_STABLE_BORROWING_NOT_ENABLED = '12'; // stable borrowing not enabled\\n  string public constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = '13'; // collateral is (mostly) the same currency that is being borrowed\\n  string public constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '14'; // The requested amount is exceeds max size of a stable loan\\n  string public constant VL_NO_DEBT_OF_SELECTED_TYPE = '15'; // to repay a debt, user needs to specify a correct debt type (variable or stable)\\n  string public constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '16'; // To repay on behalf of an user an explicit amount to repay is needed\\n  string public constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = '17'; // User does not have a stable rate loan in progress on this reserve\\n  string public constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = '18'; // User does not have a variable rate loan in progress on this reserve\\n  string public constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = '19'; // The collateral balance needs to be greater than 0\\n  string public constant VL_DEPOSIT_ALREADY_IN_USE = '20'; // User deposit is already being used as collateral\\n  string public constant VL_RESERVE_MUST_BE_COLLATERAL = '21'; // This reserve must be enabled as collateral\\n  string public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '22'; // Interest rate rebalance conditions were not met\\n  string public constant AT_OVERDRAFT_DISABLED = '23'; // User doesn't accept allocation of overdraft\\n  string public constant VL_INVALID_SUB_BALANCE_ARGS = '24';\\n  string public constant AT_INVALID_SLASH_DESTINATION = '25';\\n\\n  string public constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = '27'; // The caller of the function is not the lending pool configurator\\n\\n  string public constant LENDING_POOL_REQUIRED = '28'; // The caller of this function must be a lending pool\\n  string public constant CALLER_NOT_LENDING_POOL = '29'; // The caller of this function must be a lending pool\\n  string public constant AT_SUB_BALANCE_RESTIRCTED_FUNCTION = '30'; // The caller of this function must be a lending pool or a sub-balance operator\\n\\n  string public constant RL_RESERVE_ALREADY_INITIALIZED = '32'; // Reserve has already been initialized\\n  string public constant CALLER_NOT_POOL_ADMIN = '33'; // The caller must be the pool admin\\n  string public constant LPC_RESERVE_LIQUIDITY_NOT_0 = '34'; // The liquidity of the reserve needs to be 0\\n\\n  string public constant LPAPR_PROVIDER_NOT_REGISTERED = '41'; // Provider is not registered\\n  string public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '42'; // Health factor is not below the threshold\\n  string public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = '43'; // The collateral chosen cannot be liquidated\\n  string public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '44'; // User did not borrow the specified currency\\n  string public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = '45'; // There isn't enough liquidity available to liquidate\\n\\n  string public constant MATH_MULTIPLICATION_OVERFLOW = '48';\\n  string public constant MATH_ADDITION_OVERFLOW = '49';\\n  string public constant MATH_DIVISION_BY_ZERO = '50';\\n  string public constant RL_LIQUIDITY_INDEX_OVERFLOW = '51'; //  Liquidity index overflows uint128\\n  string public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = '52'; //  Variable borrow index overflows uint128\\n  string public constant RL_LIQUIDITY_RATE_OVERFLOW = '53'; //  Liquidity rate overflows uint128\\n  string public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = '54'; //  Variable borrow rate overflows uint128\\n  string public constant RL_STABLE_BORROW_RATE_OVERFLOW = '55'; //  Stable borrow rate overflows uint128\\n  string public constant CT_INVALID_MINT_AMOUNT = '56'; //invalid amount to mint\\n  string public constant CALLER_NOT_STAKE_ADMIN = '57';\\n  string public constant CT_INVALID_BURN_AMOUNT = '58'; //invalid amount to burn\\n  string public constant BORROW_ALLOWANCE_NOT_ENOUGH = '59'; // User borrows on behalf, but allowance are too small\\n  string public constant CALLER_NOT_LIQUIDITY_CONTROLLER = '60';\\n  string public constant CALLER_NOT_REF_ADMIN = '61';\\n  string public constant VL_INSUFFICIENT_REWARD_AVAILABLE = '62';\\n  string public constant LP_CALLER_MUST_BE_DEPOSIT_TOKEN = '63';\\n  string public constant LP_IS_PAUSED = '64'; // Pool is paused\\n  string public constant LP_NO_MORE_RESERVES_ALLOWED = '65';\\n  string public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = '66';\\n  string public constant RC_INVALID_LTV = '67';\\n  string public constant RC_INVALID_LIQ_THRESHOLD = '68';\\n  string public constant RC_INVALID_LIQ_BONUS = '69';\\n  string public constant RC_INVALID_DECIMALS = '70';\\n  string public constant RC_INVALID_RESERVE_FACTOR = '71';\\n  string public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = '72';\\n  string public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = '73';\\n  string public constant VL_TREASURY_REQUIRED = '74';\\n  string public constant LPC_INVALID_CONFIGURATION = '75'; // Invalid risk parameters for the reserve\\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = '76'; // The caller must be the emergency admin\\n  string public constant UL_INVALID_INDEX = '77';\\n  string public constant VL_CONTRACT_REQUIRED = '78';\\n  string public constant SDT_STABLE_DEBT_OVERFLOW = '79';\\n  string public constant SDT_BURN_EXCEEDS_BALANCE = '80';\\n  string public constant CALLER_NOT_REWARD_CONFIG_ADMIN = '81'; // The caller of this function must be a reward admin\\n  string public constant LP_INVALID_PERCENTAGE = '82'; // Percentage can't be more than 100%\\n  string public constant LP_IS_NOT_TRUSTED_FLASHLOAN = '83';\\n  string public constant CALLER_NOT_SWEEP_ADMIN = '84';\\n  string public constant LP_TOO_MANY_NESTED_CALLS = '85';\\n  string public constant LP_RESTRICTED_FEATURE = '86';\\n  string public constant LP_TOO_MANY_FLASHLOAN_CALLS = '87';\\n  string public constant RW_BASELINE_EXCEEDED = '88';\\n  string public constant CALLER_NOT_REWARD_RATE_ADMIN = '89';\\n  string public constant CALLER_NOT_REWARD_CONTROLLER = '90';\\n  string public constant RW_REWARD_PAUSED = '91';\\n  string public constant CALLER_NOT_TEAM_MANAGER = '92';\\n  string public constant STK_REDEEM_PAUSED = '93';\\n  string public constant STK_INSUFFICIENT_COOLDOWN = '94';\\n  string public constant STK_UNSTAKE_WINDOW_FINISHED = '95';\\n  string public constant STK_INVALID_BALANCE_ON_COOLDOWN = '96';\\n  string public constant STK_EXCESSIVE_SLASH_PCT = '97';\\n  string public constant STK_WRONG_COOLDOWN_OR_UNSTAKE = '98';\\n  string public constant STK_PAUSED = '99';\\n\\n  string public constant TXT_OWNABLE_CALLER_NOT_OWNER = 'Ownable: caller is not the owner';\\n  string public constant TXT_CALLER_NOT_PROXY_OWNER = 'ProxyOwner: caller is not the owner';\\n  string public constant TXT_ACCESS_RESTRICTED = 'RESTRICTED';\\n}\\n\"\r\n    },\r\n    \"contracts/access/AccessHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './interfaces/IRemoteAccessBitmask.sol';\\n\\n/// @dev Helper/wrapper around IRemoteAccessBitmask\\nlibrary AccessHelper {\\n  function getAcl(IRemoteAccessBitmask remote, address subject) internal view returns (uint256) {\\n    return remote.queryAccessControlMask(subject, ~uint256(0));\\n  }\\n\\n  function queryAcl(\\n    IRemoteAccessBitmask remote,\\n    address subject,\\n    uint256 filterMask\\n  ) internal view returns (uint256) {\\n    return remote.queryAccessControlMask(subject, filterMask);\\n  }\\n\\n  function hasAnyOf(\\n    IRemoteAccessBitmask remote,\\n    address subject,\\n    uint256 flags\\n  ) internal view returns (bool) {\\n    uint256 found = queryAcl(remote, subject, flags);\\n    return found & flags != 0;\\n  }\\n\\n  function hasAny(IRemoteAccessBitmask remote, address subject) internal view returns (bool) {\\n    return remote.queryAccessControlMask(subject, 0) != 0;\\n  }\\n\\n  function hasNone(IRemoteAccessBitmask remote, address subject) internal view returns (bool) {\\n    return remote.queryAccessControlMask(subject, 0) == 0;\\n  }\\n\\n  function requireAnyOf(\\n    IRemoteAccessBitmask remote,\\n    address subject,\\n    uint256 flags,\\n    string memory text\\n  ) internal view {\\n    require(hasAnyOf(remote, subject, flags), text);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/tools/upgradeability/ProxyAdminBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IProxy.sol';\\n\\nabstract contract ProxyAdminBase {\\n  /// @dev Returns the current implementation of an owned `proxy`.\\n  function _getProxyImplementation(IProxy proxy) internal view returns (address) {\\n    // We need to manually run the static call since the getter cannot be flagged as view\\n    // bytes4(keccak256('implementation()')) == 0x5c60da1b\\n    (bool success, bytes memory returndata) = address(proxy).staticcall(hex'5c60da1b');\\n    require(success);\\n    return abi.decode(returndata, (address));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUnderlyingStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IUnderlyingStrategy {\\n  function getUnderlying(address asset) external view returns (address);\\n\\n  function delegatedWithdrawUnderlying(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEmergencyAccess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IEmergencyAccess {\\n  function setPaused(bool paused) external;\\n\\n  function isPaused() external view returns (bool);\\n\\n  event EmergencyPaused(address indexed by, bool paused);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"StakeTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"stakeTokenImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"stkTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stkTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"cooldownPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"unstakePeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"maxSlashable\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"stkTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"depositStake\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IStakeConfigurator.InitStakeTokenData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"StakeTokenInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"StakeTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeTokenImpl\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"stkTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stkTokenSymbol\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct IStakeConfigurator.UpdateStakeTokenData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"StakeTokenUpgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addStakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stakeTokenImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"stkTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stkTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"cooldownPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"unstakePeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"maxSlashable\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"stkTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"depositStake\",\"type\":\"bool\"}],\"internalType\":\"struct IStakeConfigurator.InitStakeTokenData[]\",\"name\":\"input\",\"type\":\"tuple[]\"}],\"name\":\"batchInitStakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"dataOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"stkTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stkTokenSymbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"contract IMarketAccessController\",\"name\":\"stakeController\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract IUnderlyingStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"cooldownPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"unstakePeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"maxSlashable\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"stakedTokenDecimals\",\"type\":\"uint8\"}],\"internalType\":\"struct StakeTokenConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"internalType\":\"struct IStakeConfigurator.StakeTokenData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeTokensData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"stkTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stkTokenSymbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"contract IMarketAccessController\",\"name\":\"stakeController\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract IUnderlyingStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"cooldownPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"unstakePeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"maxSlashable\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"stakedTokenDecimals\",\"type\":\"uint8\"}],\"internalType\":\"struct StakeTokenConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"internalType\":\"struct IStakeConfigurator.StakeTokenData[]\",\"name\":\"dataList\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"implementationOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressesProvider\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"list\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"removeStakeTokenByUnderlying\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"cooldownPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"unstakePeriod\",\"type\":\"uint32\"}],\"name\":\"setCooldownForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"stakeTokenOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeTokenImpl\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"stkTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stkTokenSymbol\",\"type\":\"string\"}],\"internalType\":\"struct IStakeConfigurator.UpdateStakeTokenData\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"updateStakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakeConfigurator","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}