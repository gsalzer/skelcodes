{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/UZV1Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\npragma abicoder v2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport {IUZV1Router} from \\\"./interfaces/IUZV1Router.sol\\\";\\nimport {IUZV1Factory} from \\\"./interfaces/IUZV1Factory.sol\\\";\\nimport {IUZV1Staking} from \\\"./interfaces/IUZV1Staking.sol\\\";\\nimport {IUZV1RewardPool} from \\\"./interfaces/pools/IUZV1RewardPool.sol\\\";\\nimport {IUZV1PayableRewardPool} from \\\"./interfaces/pools/IUZV1PayableRewardPool.sol\\\";\\nimport {SharedDataTypes} from \\\"./libraries/SharedDataTypes.sol\\\";\\nimport {UZV1ProAccess} from \\\"./membership/UZV1ProAccess.sol\\\";\\n\\n/**\\n * @title UnizenStakingRouter\\n * @author Unizen\\n * @notice Router that is used as central interaction point for reward pools\\n **/\\ncontract UZV1Router is IUZV1Router, UZV1ProAccess {\\n    /* === STATE VARIABLES === */\\n    IUZV1Factory public factory;\\n    IUZV1Staking public staking;\\n\\n    /* === initialize function === */\\n    function initialize(\\n        address _factory,\\n        address _staking,\\n        address _accessToken\\n    ) public initializer {\\n        UZV1ProAccess.initialize(_accessToken);\\n        factory = IUZV1Factory(_factory);\\n        staking = IUZV1Staking(_staking);\\n    }\\n\\n    /* === VIEW FUNCTIONS === */\\n    function getPoolStakerUser(address _user)\\n        external\\n        view\\n        returns (SharedDataTypes.PoolStakerUser[] memory)\\n    {\\n        address[] memory _pools = getAllPools();\\n        SharedDataTypes.PoolStakerUser[]\\n            memory poolStakerUser = new SharedDataTypes.PoolStakerUser[](\\n                _pools.length\\n            );\\n        for (uint256 i = 0; i < _pools.length; i++) {\\n            poolStakerUser[i] = IUZV1RewardPool(_pools[i]).getUserPoolStake(\\n                _user\\n            );\\n        }\\n        return poolStakerUser;\\n    }\\n\\n    /**\\n     * @dev Fetches a list of pending rewards from all active reward pools\\n     *\\n     * @param _user user address to check for pending rewards\\n     *\\n     * @return address[] address list of all active pools\\n     * @return uint256[] amount of pending rewards for each active pool\\n     **/\\n    function getAllUserRewards(address _user)\\n        external\\n        view\\n        override\\n        returns (address[] memory, uint256[] memory)\\n    {\\n        // fetch all pools and pool count\\n        address[] memory _pools = factory.getActivePools();\\n        uint256 i = _pools.length;\\n        uint256[] memory _rewards = new uint256[](i);\\n        if (i == 0) return (_pools, _rewards);\\n        // setup memory array for rewards at the size of active pools\\n        // loop through all pools\\n        while (i-- > 0) {\\n            // get pending rewards from pool\\n            _rewards[i] = IUZV1RewardPool(_pools[i]).getPendingRewards(_user);\\n        }\\n\\n        // return pool addresses and rewards\\n        return (_pools, _rewards);\\n    }\\n\\n    /**\\n     * @dev Fetches all active pools from the factory contract\\n     *\\n     * @return address[] list of all pool addresses\\n     **/\\n    function getAllPools() public view override returns (address[] memory) {\\n        return factory.getActivePools();\\n    }\\n\\n    /**\\n     * @dev  Returns relevant data for active tokens from the staking contract.\\n     *\\n     * @return tokenList addresses of all active tokens\\n     * @return tokenTVLs tvl of each active token\\n     * @return weights Weight of all active tokens\\n     * @return combinedWeight Sum of all weights from active tokens\\n     **/\\n    function getAllTokens()\\n        external\\n        view\\n        override\\n        returns (\\n            address[] memory tokenList,\\n            uint256[] memory tokenTVLs,\\n            uint256[] memory weights,\\n            uint256 combinedWeight\\n        )\\n    {\\n        tokenList = staking.getActiveTokens();\\n        tokenTVLs = staking.getTVLs();\\n        (weights, combinedWeight) = staking.getTokenWeights();\\n    }\\n\\n    /**\\n     * @dev  Returns relevant data for active tokens from the staking contract.\\n     *\\n     * @return tokenList addresses of all active tokens\\n     * @return tokenTVLs tvl of each active token on a block.number\\n     * @return weights Weight of all active tokens\\n     * @return combinedWeight Sum of all weights from active tokens\\n     **/\\n    function getAllTokens(uint256 _blocknumber)\\n        external\\n        view\\n        override\\n        returns (\\n            address[] memory tokenList,\\n            uint256[] memory tokenTVLs,\\n            uint256[] memory weights,\\n            uint256 combinedWeight\\n        )\\n    {\\n        tokenList = staking.getActiveTokens();\\n        tokenTVLs = staking.getTVLs(_blocknumber);\\n        (weights, combinedWeight) = staking.getTokenWeights();\\n    }\\n\\n    /**\\n     * @dev  Returns current tvl for each active token\\n     *\\n     * @return _tokenTVLs tvl of each active token\\n     **/\\n    function getTVLs()\\n        external\\n        view\\n        override\\n        returns (uint256[] memory _tokenTVLs)\\n    {\\n        _tokenTVLs = staking.getTVLs();\\n    }\\n\\n    /**\\n     * @dev  Returns tvl on a block.number for each active token\\n     *\\n     * @return _tokenTVLs tvl of each active token\\n     **/\\n    function getTVLs(uint256 _blocknumber)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory _tokenTVLs)\\n    {\\n        _tokenTVLs = staking.getTVLs(_blocknumber);\\n    }\\n\\n    /**\\n     * @dev used to calculate the users stake of the pool\\n     * @param _user optional user addres, if empty the sender will be used\\n     * @param _precision optional denominator, default to 3\\n     *\\n     * @return array with the percentage stakes of the user based on TVL of each allowed token\\n     *  [\\n     *   weightedAverage,\\n     *   shareOfUtilityToken,\\n     *   ShareOfLPToken...\\n     *  ]\\n     *\\n     **/\\n    function getUserTVLShare(address _user, uint256 _precision)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        return staking.getUserTVLShare(_user, _precision);\\n    }\\n\\n    /**\\n     * @dev Helper function to fetch all existing data to an address\\n     *\\n     * @return array of token addresses\\n     * @return array of users staked amount for each token\\n     * @return ZCXHT staked amount\\n     **/\\n    function getStakingUserData(address _user)\\n        external\\n        view\\n        override\\n        returns (\\n            address[] memory,\\n            uint256[] memory,\\n            uint256\\n        )\\n    {\\n        return staking.getUserData(_user);\\n    }\\n\\n    /**\\n     * @dev  Returns the weight of all active tokens, including the sum of all tokens\\n     * combined from the staking contract.\\n     *\\n     * @return weights Weight of all active tokens\\n     * @return combinedWeight Sum of all weights from active tokens\\n     **/\\n    function getTokenWeights()\\n        external\\n        view\\n        override\\n        returns (uint256[] memory weights, uint256 combinedWeight)\\n    {\\n        (weights, combinedWeight) = staking.getTokenWeights();\\n    }\\n\\n    /**\\n     * @dev  Returns current tvl of the token, as well as a list\\n     * of tvl for each active token by the user\\n     *\\n     * @param _user Address of the user\\n     *\\n     * @return userStakes user tvl list for each active token\\n     **/\\n    function getUserStakes(address _user)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        return staking.getUserStakes(_user);\\n    }\\n\\n    /**\\n     * @dev  Returns tvl of the token on a block.number, as well as a list\\n     * of tvl for each active token by the user\\n     *\\n     * @param _user Address of the user\\n     *\\n     * @return userStakes user tvl list for each active token\\n     **/\\n    function getUserStakes(address _user, uint256 _blocknumber)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        return staking.getUserStakes(_user, _blocknumber);\\n    }\\n\\n    /**\\n     * @dev  Returns all block number snapshots for an specific user and token\\n     *\\n     * @param _user Address of the user\\n     * @param _token Address of the token\\n     * @param _startBlock Start block to search for snapshots\\n     * @param _endBlock End block to search for snapshots\\n     *\\n     * @return snapshots snapshoted data grouped by stakes\\n     **/\\n    function getUserStakesSnapshots(\\n        address _user,\\n        address _token,\\n        uint256 _startBlock,\\n        uint256 _endBlock\\n    )\\n        external\\n        view\\n        override\\n        returns (SharedDataTypes.StakeSnapshot[] memory snapshots)\\n    {\\n        return\\n            staking.getUserStakesSnapshots(\\n                _user,\\n                _token,\\n                _startBlock,\\n                _endBlock\\n            );\\n    }\\n\\n    /**\\n     * @dev  Returns whether the pool pays out any rewards. Usually true for onchain and\\n     * false of off-chain reward pools.\\n     *\\n     * @param _pool Address of the reward pool\\n     *\\n     * @return bool True if the user can receive rewards\\n     **/\\n    function canReceiveRewards(address _pool)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return IUZV1RewardPool(_pool).canReceiveRewards();\\n    }\\n\\n    /**\\n     * @dev  Returns whether the pool is a base or native pool\\n     *\\n     * @param _pool Address of the reward pool\\n     *\\n     * @return bool True, if pool distributes native rewards\\n     **/\\n    function isPoolNative(address _pool) external view override returns (bool) {\\n        return IUZV1RewardPool(_pool).isNative();\\n    }\\n\\n    /**\\n     * @dev  Returns the current state of the pool. Not all states\\n     * are available on every pool type. f.e. payment\\n     *\\n     * @param _pool Address of the reward pool\\n     *\\n     * @return PoolState State of the current phase\\n     *  * pendingStaking\\n     *  * staking\\n     *  * pendingPayment\\n     *  * payment\\n     *  * pendingDistribution\\n     *  * distribution\\n     *  * retired\\n     **/\\n    function getPoolState(address _pool)\\n        external\\n        view\\n        override\\n        returns (SharedDataTypes.PoolState)\\n    {\\n        return IUZV1RewardPool(_pool).getPoolState();\\n    }\\n\\n    /**\\n     * @dev  Returns the current type of the pool\\n     *\\n     * @param _pool Address of the reward pool\\n     *\\n     * @return uint8 id of used pool type\\n     **/\\n    function getPoolType(address _pool) external view override returns (uint8) {\\n        return IUZV1RewardPool(_pool).getPoolType();\\n    }\\n\\n    /**\\n     * @dev  Returns all relevant information of an pool, excluding the stakes\\n     * of users.\\n     *\\n     * @param _pool Address of the reward pool\\n     *\\n     * @return PoolData object\\n     **/\\n    function getPoolInfo(address _pool)\\n        external\\n        view\\n        override\\n        returns (SharedDataTypes.PoolData memory)\\n    {\\n        return IUZV1RewardPool(_pool).getPoolInfo();\\n    }\\n\\n    /**\\n     * @dev Returns start and end blocks for\\n     * all existing stages of the pool\\n     *\\n     * @param _pool Address of the reward pool\\n     * @return uint256[] Array with all block numbers. Each phase always has startBlock, endBlock\\n     */\\n    function getTimeWindows(address _pool)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        return IUZV1RewardPool(_pool).getTimeWindows();\\n    }\\n\\n    /**\\n     * @dev Returns the users current address as string, or the user provided\\n     * native address, if the pool is a native reward pool\\n     *\\n     * @param _pool Address of the reward pool\\n     * @param _user address of the user\\n     * @return receiverAddress string of the users receiving address\\n     */\\n    function getPoolUserReceiverAddress(address _pool, address _user)\\n        external\\n        view\\n        override\\n        returns (string memory receiverAddress)\\n    {\\n        return IUZV1RewardPool(_pool).getUserReceiverAddress(_user);\\n    }\\n\\n    /**\\n     * @dev Returns all relevant staking data for a user.\\n     *\\n     * @param _pool Address of the reward pool\\n     * @param _user address of user to check\\n     *\\n     * @return FlatPoolStakerUser data object, containing all information about the staking data\\n     *  * total tokens staked\\n     *  * total saved rewards (saved/withdrawn)\\n     *  * array with stakes for each active token\\n     **/\\n    function getPoolUserInfo(address _pool, address _user)\\n        external\\n        view\\n        override\\n        returns (SharedDataTypes.FlatPoolStakerUser memory)\\n    {\\n        return IUZV1RewardPool(_pool).getUserInfo(_user);\\n    }\\n\\n    function getTotalPriceForPurchaseableTokens(address _pool, address _user)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            IUZV1PayableRewardPool(_pool).getTotalPriceForPurchaseableTokens(\\n                _user\\n            );\\n    }\\n\\n    /* === MUTATING FUNCTIONS === */\\n    /// user functions\\n\\n    /**\\n     * @dev  Allows claiming all pending rewards of active pools.\\n     **/\\n    function claimAllRewards()\\n        external\\n        override\\n        whenNotPaused\\n        onlyPro(_msgSender())\\n    {\\n        address[] memory _allPools = factory.getActivePools();\\n        uint256 i = _allPools.length;\\n        require(i > 0, \\\"NO_ACTIVE_POOL\\\");\\n        while (i-- > 0) {\\n            if (\\n                IUZV1RewardPool(_allPools[i]).getPendingRewards(_msgSender()) >\\n                0\\n            ) {\\n                IUZV1RewardPool(_allPools[i]).claimRewards(_msgSender());\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev  Allows claiming rewards of a specific pool\\n     * @param _pool address of the pool, where the user wants to claim rewards from\\n     * @return bool success of the reward claim\\n     **/\\n    function claimReward(address _pool)\\n        external\\n        override\\n        whenNotPaused\\n        onlyPro(_msgSender())\\n        returns (bool)\\n    {\\n        IUZV1RewardPool _rewardPool = IUZV1RewardPool(_pool);\\n        uint256 _rewards = _rewardPool.getPendingRewards(_msgSender());\\n        if (_rewards == 0) return false;\\n\\n        _rewardPool.claimRewards(_msgSender());\\n        return true;\\n    }\\n\\n    /**\\n     * @dev  Allows claiming pending rewards for a list of pools.\\n     * @param pools list of reward pool addresses\\n     **/\\n    function claimRewardsFor(IUZV1RewardPool[] calldata pools)\\n        external\\n        override\\n        whenNotPaused\\n        onlyPro(_msgSender())\\n    {\\n        require(pools.length <= 20, \\\"MAX_POOLS\\\");\\n        uint256 poolCount = pools.length;\\n        if (poolCount == 0) return;\\n        while (poolCount-- > 0) {\\n            // verify that pool is a valid reward pool of this system\\n            // and no third party contract\\n            require(\\n                factory.isValidPool(address(pools[poolCount])) == true,\\n                \\\"INVALID_POOL\\\"\\n            );\\n            // if user has pending rewards, claim them\\n            if (pools[poolCount].getPendingRewards(_msgSender()) > 0)\\n                pools[poolCount].claimRewards(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev  Allows paying for an existing allocation and\\n     * set a custom native address as receiver of rewards\\n     *\\n     * @param _pool address of the pool, where the user wants to pay for an allocation\\n     * @param _amount uin256 amount to pay\\n     * @param _receiver string users native address, where rewards will be sent to\\n     **/\\n    function payRewardAndSetNativeAddressForPool(\\n        address _pool,\\n        uint256 _amount,\\n        string calldata _receiver\\n    ) external override whenNotPaused onlyPro(_msgSender()) {\\n        payRewardPool(_pool, _amount);\\n        setNativeAddressForPool(_pool, _receiver);\\n    }\\n\\n    /// user functions\\n    /**\\n     * @dev  Allows paying for an existing allocation. With this function, users can\\n     * pay pools, without the need to re-approve every reward pool themselves. Just by\\n     * approving the router contract, they can pay for every upcoming allocation.\\n     *\\n     * @param _pool address of the pool, where the user wants to pay for an allocation\\n     * @param _amount uin256 amount to pay\\n     **/\\n    function payRewardPool(address _pool, uint256 _amount)\\n        public\\n        override\\n        whenNotPaused\\n        onlyPro(_msgSender())\\n    {\\n        // get pool instance\\n        IUZV1PayableRewardPool _rewardPool = IUZV1PayableRewardPool(_pool);\\n        require(_rewardPool.isPayable() == true, \\\"NOT_PAYABLE\\\");\\n        // fetch payment token for the desired pool\\n        address _token = _rewardPool.getPoolInfo().paymentToken;\\n        // payment token instance\\n        IERC20 _paymentToken = IERC20(_token);\\n\\n        // transfer funds to router\\n        SafeERC20.safeTransferFrom(\\n            _paymentToken,\\n            _msgSender(),\\n            address(this),\\n            _amount\\n        );\\n\\n        // approve pool\\n        SafeERC20.safeApprove(_paymentToken, _pool, _amount);\\n\\n        // pay\\n        uint256 _refund = _rewardPool.pay(_msgSender(), _amount);\\n\\n        // check if we need to refund\\n        if (_refund > 0) {\\n            SafeERC20.safeTransfer(_paymentToken, _msgSender(), _refund);\\n        }\\n    }\\n\\n    /**\\n     * @dev  Call factory to create a new reward pool by cloning\\n     * existing deployed reward pool contracts and initiating them\\n     * with the desired input data\\n     *\\n     * @param totalRewards - amount of tokens / allocation for distribution\\n     * @param startBlock - block number when distribution phase begins\\n     * @param endBlock - block number when distribution phase ends\\n     * @param token - address of rewardable token (not needed for mainnet pools)\\n     * @param poolType of reward pool\\n     *  * PoolInfo object containing ui information for pool\\n     * @param name - optional name of token on blockchain\\n     * @param blockchain - name of used blockchain\\n     * @param cAddress - address of token used on blockchain\\n     * @return address Address of created reward pool\\n     **/\\n    function createNewPool(\\n        uint256 totalRewards,\\n        uint256 startBlock,\\n        uint256 endBlock,\\n        address token,\\n        uint8 poolType,\\n        string memory name,\\n        string memory blockchain,\\n        string memory cAddress\\n    ) external override onlyOwner returns (address) {\\n        return\\n            factory.createNewPool(\\n                totalRewards,\\n                startBlock,\\n                endBlock,\\n                token,\\n                poolType,\\n                name,\\n                blockchain,\\n                cAddress\\n            );\\n    }\\n\\n    /**\\n     * @dev  Allows the user to set a custom native address as receiver of rewards\\n     * as these rewards will be distributed off-chain.\\n     *\\n     * @param _pool address of the pool, where the user wants set the native address\\n     * @param _receiver string users native address, where rewards will be sent to\\n     **/\\n    function setNativeAddressForPool(address _pool, string calldata _receiver)\\n        public\\n        override\\n        whenNotPaused\\n        onlyPro(_msgSender())\\n    {\\n        require(_pool != address(0), \\\"ZERO_ADDRESS\\\");\\n        IUZV1RewardPool(_pool).setNativeAddress(_msgSender(), _receiver);\\n    }\\n\\n    /// control functions\\n\\n    /**\\n     * @dev  Allows updating the internally used factory contract address,\\n     * in case of an upgrade.\\n     * @param _factory new address of the factory contract address\\n     **/\\n    function setFactory(address _factory) external override onlyOwner {\\n        require(_factory != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(_factory != address(factory), \\\"SAME_ADDRESS\\\");\\n        factory = IUZV1Factory(_factory);\\n    }\\n\\n    /**\\n     * @dev  Allows updating the internally used staking contract address,\\n     * in case of an upgrade.\\n     * @param _staking new address of the staking contract address\\n     **/\\n    function setStaking(address _staking) external override onlyOwner {\\n        require(_staking != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(_staking != address(staking), \\\"SAME_ADDRESS\\\");\\n        staking = IUZV1Staking(_staking);\\n    }\\n\\n    /**\\n     * @dev  Allows withdrawing of erc20 tokens that were sent to the contract\\n     * by accident. Similar things happen regularly on other contracts, so this is\\n     * an additional safeguard to withdraw funds of a specified token\\n     * @param _token Address of token to withdraw\\n     * @param _amount amount to withdraw. will withdraw everything if it exceeds the balance\\n     **/\\n    function emergencyWithdrawTokenFromRouter(address _token, uint256 _amount)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        IERC20 _tokenToSend = IERC20(_token);\\n        uint256 _tokenBalance = _tokenToSend.balanceOf(address(this));\\n        require(_tokenBalance > 0, \\\"NO_TOKEN_BALANCE\\\");\\n\\n        // send everything if amount exceeds balance\\n        uint256 _amountToWithdraw = (_amount > _tokenBalance)\\n            ? _tokenBalance\\n            : _amount;\\n        // transfer funds to owner\\n        SafeERC20.safeTransfer(_tokenToSend, owner(), _amountToWithdraw);\\n    }\\n\\n    /* === MODIFIER === */\\n    modifier onlyStaking() {\\n        require(_msgSender() == address(staking), \\\"FORBIDDEN: STAKING\\\");\\n        _;\\n    }\\n\\n    /* === EVENTS === */\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUZV1Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\npragma abicoder v2;\\n\\nimport {IUZV1RewardPool} from \\\"./pools/IUZV1RewardPool.sol\\\";\\nimport {SharedDataTypes} from \\\"../libraries/SharedDataTypes.sol\\\";\\n\\ninterface IUZV1Router {\\n    /* view functions */\\n    function getAllUserRewards(address _user)\\n        external\\n        view\\n        returns (address[] memory _pools, uint256[] memory _rewards);\\n\\n    function getAllPools() external view returns (address[] memory);\\n\\n    function getAllTokens()\\n        external\\n        view\\n        returns (\\n            address[] memory tokenList,\\n            uint256[] memory tokenTVLs,\\n            uint256[] memory weights,\\n            uint256 combinedWeight\\n        );\\n\\n    function getAllTokens(uint256 _blocknumber)\\n        external\\n        view\\n        returns (\\n            address[] memory tokenList,\\n            uint256[] memory tokenTVLs,\\n            uint256[] memory weights,\\n            uint256 combinedWeight\\n        );\\n\\n    function getTVLs() external view returns (uint256[] memory _tokenTVLs);\\n\\n    function getTVLs(uint256 _blocknumber)\\n        external\\n        view\\n        returns (uint256[] memory _tokenTVLs);\\n\\n    function getUserTVLShare(address _user, uint256 _precision)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getStakingUserData(address _user)\\n        external\\n        view\\n        returns (\\n            address[] memory,\\n            uint256[] memory,\\n            uint256\\n        );\\n\\n    function getTokenWeights()\\n        external\\n        view\\n        returns (uint256[] memory weights, uint256 combinedWeight);\\n\\n    function getUserStakes(address _user)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getUserStakes(address _user, uint256 _blocknumber)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getUserStakesSnapshots(\\n        address _user,\\n        address _token,\\n        uint256 _startBlock,\\n        uint256 _endBlock\\n    )\\n        external\\n        view\\n        returns (SharedDataTypes.StakeSnapshot[] memory startBlocks);\\n\\n    /* pool view functions */\\n\\n    function canReceiveRewards(address _pool) external view returns (bool);\\n\\n    function isPoolNative(address _pool) external view returns (bool);\\n\\n    function getPoolState(address _pool)\\n        external\\n        view\\n        returns (SharedDataTypes.PoolState);\\n\\n    function getPoolType(address _pool) external view returns (uint8);\\n\\n    function getPoolInfo(address _pool)\\n        external\\n        view\\n        returns (SharedDataTypes.PoolData memory);\\n\\n    function getTimeWindows(address _pool)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getPoolUserReceiverAddress(address _pool, address _user)\\n        external\\n        view\\n        returns (string memory receiverAddress);\\n\\n    function getPoolUserInfo(address _pool, address _user)\\n        external\\n        view\\n        returns (SharedDataTypes.FlatPoolStakerUser memory);\\n\\n    function getTotalPriceForPurchaseableTokens(address _pool, address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /* mutating functions */\\n    function claimAllRewards() external;\\n\\n    function claimReward(address _pool) external returns (bool);\\n\\n    function claimRewardsFor(IUZV1RewardPool[] calldata pools) external;\\n\\n    function payRewardAndSetNativeAddressForPool(\\n        address _pool,\\n        uint256 _amount,\\n        string calldata _receiver\\n    ) external;\\n\\n    function payRewardPool(address _pool, uint256 _amount) external;\\n\\n    function createNewPool(\\n        uint256 totalRewards,\\n        uint256 startBlock,\\n        uint256 endBlock,\\n        address token,\\n        uint8 poolType,\\n        string memory name,\\n        string memory blockchain,\\n        string memory cAddress\\n    ) external returns (address);\\n\\n    function setNativeAddressForPool(address _pool, string calldata _receiver)\\n        external;\\n\\n    /* control functions */\\n    function setFactory(address _factory) external;\\n\\n    function setStaking(address _staking) external;\\n\\n    function emergencyWithdrawTokenFromRouter(address _token, uint256 _amount)\\n        external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUZV1Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\npragma abicoder v2;\\n\\nimport {SharedDataTypes} from \\\"../libraries/SharedDataTypes.sol\\\";\\n\\ninterface IUZV1Factory {\\n    /* view functions */\\n    function getActivePools() external view returns (address[] memory);\\n\\n    function isValidPool(address pool) external view returns (bool);\\n\\n    /* control functions */\\n    function createNewPool(\\n        uint256 totalRewards,\\n        uint256 startBlock,\\n        uint256 endBlock,\\n        address token,\\n        uint8 poolType,\\n        string memory name,\\n        string memory blockchain,\\n        string memory cAddress\\n    ) external returns (address);\\n\\n    function removePool(address _pool) external;\\n\\n    function setNative(address _pool, bool _isNative) external;\\n\\n    function setStakingWindow(\\n        address _pool,\\n        uint256 _startBlock,\\n        uint256 _endBlock\\n    ) external;\\n\\n    function setPaymentAddress(address _pool, address _receiver) external;\\n\\n    function setPaymentWindow(\\n        address _pool,\\n        uint256 _startBlock,\\n        uint256 _endBlock\\n    ) external;\\n\\n    function setDistributionWindow(\\n        address _pool,\\n        uint256 _startBlock,\\n        uint256 _endBlock\\n    ) external;\\n\\n    function withdrawTokens(\\n        address _pool,\\n        address _tokenAddress,\\n        uint256 _amount\\n    ) external;\\n\\n    function setPaymentToken(\\n        address _pool,\\n        address _token,\\n        uint256 _pricePerReward\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUZV1Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\npragma abicoder v2;\\n\\nimport {SharedDataTypes} from \\\"../libraries/SharedDataTypes.sol\\\";\\n\\ninterface IUZV1Staking {\\n    /* view functions */\\n    function getTVLs() external view returns (uint256[] memory);\\n\\n    function getTVLs(uint256 _blocknumber)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getUserTVLShare(address _user, uint256 _precision)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getUsersStakedAmountOfToken(address _user, address _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getUserData(address _user)\\n        external\\n        view\\n        returns (\\n            address[] memory,\\n            uint256[] memory,\\n            uint256\\n        );\\n\\n    function getActiveTokens() external view returns (address[] memory);\\n\\n    function getTokenWeights()\\n        external\\n        view\\n        returns (uint256[] memory weights, uint256 combinedWeight);\\n\\n    function getUserStakesSnapshots(\\n        address _user,\\n        address _token,\\n        uint256 _startBlock,\\n        uint256 _endBlock\\n    )\\n        external\\n        view\\n        returns (SharedDataTypes.StakeSnapshot[] memory startBlocks);\\n\\n    function getUserStakes(address _user)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getUserStakes(address _user, uint256 _blocknumber)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /* mutating functions */\\n    function stake(uint256 _amount) external returns (uint256);\\n\\n    function stake(address _lpToken, uint256 _amount)\\n        external\\n        returns (uint256);\\n\\n    function withdraw(uint256 _amount) external returns (uint256);\\n\\n    function withdraw(address _lpToken, uint256 _amount)\\n        external\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/pools/IUZV1RewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\npragma abicoder v2;\\n\\nimport {SharedDataTypes} from \\\"../../libraries/SharedDataTypes.sol\\\";\\n\\ninterface IUZV1RewardPool {\\n    /* mutating functions */\\n    function claimRewards(address _user) external;\\n\\n    function factory() external returns (address);\\n\\n    function setFactory(address) external;\\n\\n    function transferOwnership(address _newOwner) external;\\n\\n    function pay(address _user, uint256 _amount)\\n        external\\n        returns (uint256 refund);\\n\\n    /* view functions */\\n    // pool specific\\n    function canReceiveRewards() external view returns (bool);\\n\\n    function isPoolActive() external view returns (bool);\\n\\n    function isPayable() external view returns (bool);\\n\\n    function isNative() external view returns (bool);\\n\\n    function getPoolState() external view returns (SharedDataTypes.PoolState);\\n\\n    function getUserPoolStake(address _user)\\n        external\\n        view\\n        returns (SharedDataTypes.PoolStakerUser memory);\\n\\n    function getUserPoolState()\\n        external\\n        view\\n        returns (SharedDataTypes.UserPoolState);\\n\\n    function getPoolType() external view returns (uint8);\\n\\n    function getPoolInfo()\\n        external\\n        view\\n        returns (SharedDataTypes.PoolData memory);\\n\\n    function getAmountOfOpenRewards() external view returns (uint256);\\n\\n    function getStartBlock() external view returns (uint256);\\n\\n    function getEndBlock() external view returns (uint256);\\n\\n    function getTimeWindows() external view returns (uint256[] memory);\\n\\n    function getUserReceiverAddress(address user)\\n        external\\n        view\\n        returns (string memory receiverAddress);\\n\\n    // user specific\\n    function getPendingRewards(address _user)\\n        external\\n        view\\n        returns (uint256 reward);\\n\\n    function getUserInfo(address _user)\\n        external\\n        view\\n        returns (SharedDataTypes.FlatPoolStakerUser memory);\\n\\n    function setNativeAddress(address _user, string calldata _receiver)\\n        external;\\n\\n    function initialize(address _router, address _accessToken) external;\\n\\n    function setPoolData(SharedDataTypes.PoolInputData calldata _inputData)\\n        external;\\n\\n    function withdrawTokens(address _tokenAddress, uint256 _amount) external;\\n\\n    function setStakingWindow(uint256 _startBlock, uint256 _endBlock) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/pools/IUZV1PayableRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\npragma abicoder v2;\\n\\nimport {IUZV1RewardPool} from \\\"./IUZV1RewardPool.sol\\\";\\n\\ninterface IUZV1PayableRewardPool is IUZV1RewardPool {\\n    /* view functions */\\n    function getPurchaseableTokens(address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTotalPriceForPurchaseableTokens(address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPurchasedAllocationOfUser(address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPaymentAddress() external view returns (address);\\n\\n    /* control functions */\\n    function setNative(bool _isNative) external;\\n\\n    function setPaymentAddress(address _receiver) external;\\n\\n    function setPaymentToken(address _token, uint256 _pricePerReward) external;\\n\\n    function setPaymentWindow(uint256 _startBlock, uint256 _endBlock) external;\\n\\n    function setDistributionWindow(uint256 _startBlock, uint256 _endBlock)\\n        external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SharedDataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nlibrary SharedDataTypes {\\n    // struct for returning snapshot values\\n    struct StakeSnapshot {\\n        // initial block number snapshoted\\n        uint256 startBlock;\\n        // end block number snapshoted\\n        uint256 endBlock;\\n        // staked amount at initial block\\n        uint256 stakedAmount;\\n        // total value locked at end block\\n        uint256 tokenTVL;\\n    }\\n\\n    // general staker user information\\n    struct StakerUser {\\n        // snapshotted stakes of the user per token (token => block.number => stakedAmount)\\n        mapping(address => mapping(uint256 => uint256)) stakedAmountSnapshots;\\n        // snapshotted stakes of the user per token keys (token => block.number[])\\n        mapping(address => uint256[]) stakedAmountKeys;\\n        // current stakes of the user per token\\n        mapping(address => uint256) stakedAmount;\\n        // total amount of holder tokens\\n        uint256 zcxhtStakedAmount;\\n    }\\n\\n    // information for stakeable tokens\\n    struct StakeableToken {\\n        // snapshotted total value locked (TVL) (block.number => totalValueLocked)\\n        mapping(uint256 => uint256) totalValueLockedSnapshots;\\n        // snapshotted total value locked (TVL) keys (block.number[])\\n        uint256[] totalValueLockedKeys;\\n        // current total value locked (TVL)\\n        uint256 totalValueLocked;\\n        uint256 weight;\\n        bool active;\\n    }\\n\\n    // POOL DATA\\n\\n    // data object for a user stake on a pool\\n    struct PoolStakerUser {\\n        // saved / withdrawn rewards of user\\n        uint256 totalSavedRewards;\\n        // total purchased allocation\\n        uint256 totalPurchasedAllocation;\\n        // native address, if necessary\\n        string nativeAddress;\\n        // date/time when user has claimed the reward\\n        uint256 claimedTime;\\n    }\\n\\n    // flat data type of stake for UI\\n    struct FlatPoolStakerUser {\\n        address[] tokens;\\n        uint256[] amounts;\\n        uint256 pendingRewards;\\n        uint256 totalPurchasedAllocation;\\n        uint256 totalSavedRewards;\\n        uint256 claimedTime;\\n        PoolState state;\\n        UserPoolState userState;\\n    }\\n\\n    // UI information for pool\\n    // data will be fetched via github token repository\\n    // blockchain / cAddress being the most relevant values\\n    // for fetching the correct token data\\n    struct PoolInfo {\\n        // token name\\n        string name;\\n        // name of blockchain, as written on github\\n        string blockchain;\\n        // tokens contract address on chain\\n        string cAddress;\\n    }\\n\\n    // possible states of the reward pool\\n    enum PoolState {\\n        pendingStaking,\\n        staking,\\n        pendingPayment,\\n        payment,\\n        pendingDistribution,\\n        distribution,\\n        retired\\n    }\\n\\n    // possible states of the reward pool's user\\n    enum UserPoolState {\\n        notclaimed,\\n        claimed,\\n        rejected,\\n        missed\\n    }\\n\\n    // input data for new reward pools\\n    struct PoolInputData {\\n        // total rewards to distribute\\n        uint256 totalRewards;\\n        // start block for distribution\\n        uint256 startBlock;\\n        // end block for distribution\\n        uint256 endBlock;\\n        // erc token address\\n        address token;\\n        // pool type\\n        uint8 poolType;\\n        // information about the reward token\\n        PoolInfo tokenInfo;\\n    }\\n\\n    struct PoolData {\\n        PoolState state;\\n        // pool information for the ui\\n        PoolInfo info;\\n        // start block of staking rewards\\n        uint256 startBlock;\\n        // end block of staking rewards\\n        uint256 endBlock;\\n        // start block of payment period\\n        uint256 paymentStartBlock;\\n        // end block of payment period\\n        uint256 paymentEndBlock;\\n        // start block of distribution period\\n        uint256 distributionStartBlock;\\n        // end block of distribution period\\n        uint256 distributionEndBlock;\\n        // total rewards for allocation\\n        uint256 totalRewards;\\n        // rewards per block\\n        uint256 rewardsPerBlock;\\n        // price of a single payment token\\n        uint256 rewardTokenPrice;\\n        // type of the pool\\n        uint8 poolType;\\n        // address of payment token\\n        address paymentToken;\\n        // address of reward token\\n        address token;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/membership/UZV1ProAccess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\npragma abicoder v2;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\n\\n/**\\n * @title UZProAccess\\n * @author Unizen\\n * @notice Simple abstract class to add easy checks\\n * for pro membership access token\\n **/\\nabstract contract UZV1ProAccess is\\n    Initializable,\\n    OwnableUpgradeable,\\n    PausableUpgradeable\\n{\\n    // internal storage of the erc721 token\\n    IERC721 internal _membershipToken;\\n\\n    function initialize(address _token) public virtual initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n        _setMembershipToken(_token);\\n    }\\n\\n    function membershipToken() public view returns (address) {\\n        return address(_membershipToken);\\n    }\\n\\n    /* === CONTROL FUNCTIONS === */\\n    /**\\n     * @dev pause smart contract\\n     */\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev unpause smart contract\\n     */\\n    function unPause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev  Allows the owner of the contract, to update\\n     * the used membership token\\n     * @param _newToken address of the new erc721 token\\n     **/\\n    function setMembershipToken(address _newToken) public onlyOwner {\\n        _setMembershipToken(_newToken);\\n    }\\n\\n    function _setMembershipToken(address _newToken) internal {\\n        if (_newToken == address(0) && address(_membershipToken) == address(0))\\n            return;\\n\\n        require(_newToken != address(_membershipToken), \\\"SAME_ADDRESS\\\");\\n        _membershipToken = IERC721(_newToken);\\n    }\\n\\n    /**\\n     * @dev  Internal function that checks if the users has any\\n     * membership tokens. Reverts, if none is found.\\n     * @param _user address of user to check\\n     **/\\n    function _checkPro(address _user) internal view {\\n        if (address(_membershipToken) != address(0)) {\\n            require(\\n                _membershipToken.balanceOf(_user) > 0,\\n                \\\"FORBIDDEN: PRO_MEMBER\\\"\\n            );\\n        }\\n    }\\n\\n    /* === MODIFIERS === */\\n    modifier onlyPro(address _user) {\\n        _checkPro(_user);\\n        _;\\n    }\\n\\n    /* === EVENTS === */\\n    event MembershipTokenUpdated(address _newTokenAddress);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTokenAddress\",\"type\":\"address\"}],\"name\":\"MembershipTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"canReceiveRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUZV1RewardPool[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"claimRewardsFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"poolType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"blockchain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cAddress\",\"type\":\"string\"}],\"name\":\"createNewPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawTokenFromRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUZV1Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenTVLs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"combinedWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocknumber\",\"type\":\"uint256\"}],\"name\":\"getAllTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenTVLs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"combinedWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAllUserRewards\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"enum SharedDataTypes.PoolState\",\"name\":\"state\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"blockchain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cAddress\",\"type\":\"string\"}],\"internalType\":\"struct SharedDataTypes.PoolInfo\",\"name\":\"info\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributionStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributionEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"poolType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct SharedDataTypes.PoolData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPoolStakerUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalSavedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPurchasedAllocation\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nativeAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"claimedTime\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedDataTypes.PoolStakerUser[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"getPoolState\",\"outputs\":[{\"internalType\":\"enum SharedDataTypes.PoolState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"getPoolType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPoolUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPurchasedAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSavedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTime\",\"type\":\"uint256\"},{\"internalType\":\"enum SharedDataTypes.PoolState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"enum SharedDataTypes.UserPoolState\",\"name\":\"userState\",\"type\":\"uint8\"}],\"internalType\":\"struct SharedDataTypes.FlatPoolStakerUser\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPoolUserReceiverAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"receiverAddress\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getStakingUserData\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocknumber\",\"type\":\"uint256\"}],\"name\":\"getTVLs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenTVLs\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTVLs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenTVLs\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"getTimeWindows\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenWeights\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"combinedWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalPriceForPurchaseableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blocknumber\",\"type\":\"uint256\"}],\"name\":\"getUserStakes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStakes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"getUserStakesSnapshots\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTVL\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedDataTypes.StakeSnapshot[]\",\"name\":\"snapshots\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_precision\",\"type\":\"uint256\"}],\"name\":\"getUserTVLShare\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_accessToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"isPoolNative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"membershipToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_receiver\",\"type\":\"string\"}],\"name\":\"payRewardAndSetNativeAddressForPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"payRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newToken\",\"type\":\"address\"}],\"name\":\"setMembershipToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_receiver\",\"type\":\"string\"}],\"name\":\"setNativeAddressForPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"setStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IUZV1Staking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UZV1Router","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}