{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/interfaces/ITrait.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITrait {\\n\\tfunction name() external view returns (string memory);\\n\\n\\tfunction itemCount() external view returns (uint256);\\n\\n\\tfunction totalItems() external view returns (uint256);\\n\\n\\tfunction getTraitName(uint16 traitId) external view returns (string memory);\\n\\n\\tfunction getTraitContent(uint16 traitId) external view returns (string memory);\\n\\n\\tfunction getTraitByAge(uint16 age) external view returns (uint16);\\n\\n\\tfunction isOverEye(uint16 traitId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/libs/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Base64 {\\n\\tstring private constant base64stdchars = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n\\tfunction encode(bytes memory data) internal pure returns (string memory) {\\n\\t\\tif (data.length == 0) return \\\"\\\";\\n\\n\\t\\t// load the table into memory\\n\\t\\tstring memory table = base64stdchars;\\n\\n\\t\\t// multiply by 4/3 rounded up\\n\\t\\tuint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n\\t\\t// add some extra buffer at the end required for the writing\\n\\t\\tstring memory result = new string(encodedLen + 32);\\n\\n\\t\\tassembly {\\n\\t\\t\\t// set the actual output length\\n\\t\\t\\tmstore(result, encodedLen)\\n\\n\\t\\t\\t// prepare the lookup table\\n\\t\\t\\tlet tablePtr := add(table, 1)\\n\\n\\t\\t\\t// input ptr\\n\\t\\t\\tlet dataPtr := data\\n\\t\\t\\tlet endPtr := add(dataPtr, mload(data))\\n\\n\\t\\t\\t// result ptr, jump over length\\n\\t\\t\\tlet resultPtr := add(result, 32)\\n\\n\\t\\t\\t// run over the input, 3 bytes at a time\\n\\t\\t\\tfor {\\n\\n\\t\\t\\t} lt(dataPtr, endPtr) {\\n\\n\\t\\t\\t} {\\n\\t\\t\\t\\tdataPtr := add(dataPtr, 3)\\n\\n\\t\\t\\t\\t// read 3 bytes\\n\\t\\t\\t\\tlet input := mload(dataPtr)\\n\\n\\t\\t\\t\\t// write 4 characters\\n\\t\\t\\t\\tmstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n\\t\\t\\t\\tresultPtr := add(resultPtr, 1)\\n\\t\\t\\t\\tmstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n\\t\\t\\t\\tresultPtr := add(resultPtr, 1)\\n\\t\\t\\t\\tmstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\\n\\t\\t\\t\\tresultPtr := add(resultPtr, 1)\\n\\t\\t\\t\\tmstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\\n\\t\\t\\t\\tresultPtr := add(resultPtr, 1)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// padding with '='\\n\\t\\t\\tswitch mod(mload(data), 3)\\n\\t\\t\\tcase 1 {\\n\\t\\t\\t\\tmstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n\\t\\t\\t}\\n\\t\\t\\tcase 2 {\\n\\t\\t\\t\\tmstore(sub(resultPtr, 1), shl(248, 0x3d))\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn result;\\n\\t}\\n\\n\\tfunction toString(uint256 value) internal pure returns (string memory) {\\n\\t\\tif (value == 0) {\\n\\t\\t\\treturn \\\"0\\\";\\n\\t\\t}\\n\\t\\tuint256 temp = value;\\n\\t\\tuint256 digits;\\n\\t\\twhile (temp != 0) {\\n\\t\\t\\tdigits++;\\n\\t\\t\\ttemp /= 10;\\n\\t\\t}\\n\\t\\tbytes memory buffer = new bytes(digits);\\n\\t\\twhile (value != 0) {\\n\\t\\t\\tdigits -= 1;\\n\\t\\t\\tbuffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n\\t\\t\\tvalue /= 10;\\n\\t\\t}\\n\\t\\treturn string(buffer);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Drawer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libs/Base64.sol\\\";\\nimport \\\"../interfaces/ITrait.sol\\\";\\n\\ncontract AtopiaDrawer {\\n\\taddress implementation_;\\n\\taddress public admin;\\n\\n\\tbool public initialized;\\n\\tusing Base64 for *;\\n\\n\\tITrait[] public traits;\\n\\n\\tfunction initialize(address[] memory _traits) public {\\n\\t\\trequire(!initialized);\\n\\t\\tinitialized = true;\\n\\t\\tfor (uint16 i = 0; i < _traits.length; i++) {\\n\\t\\t\\ttraits.push(ITrait(_traits[i]));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction traitCount() external view returns (uint16) {\\n\\t\\treturn uint16(traits.length - 1);\\n\\t}\\n\\n\\tfunction itemCount(uint256 traitId) external view returns (uint256) {\\n\\t\\treturn traits[traitId].itemCount();\\n\\t}\\n\\n\\tfunction totalItems(uint256 traitId) external view returns (uint256) {\\n\\t\\treturn traits[traitId].totalItems();\\n\\t}\\n\\n\\tfunction tokenURI(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory name,\\n\\t\\tuint256 tokenTrait,\\n\\t\\tuint16 age\\n\\t) external view returns (string memory) {\\n\\t\\tstring[] memory pieces = new string[](11);\\n\\n\\t\\tuint256 traitHash = tokenTrait;\\n\\t\\tuint16 traitAge = traits[11].getTraitByAge(age);\\n\\t\\tpieces[10] = traits[11].getTraitContent(traitAge);\\n\\t\\tstring memory attributes = string(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t'[{\\\"display_type\\\":\\\"number\\\",\\\"trait_type\\\":\\\"Age\\\",\\\"value\\\":\\\"',\\n\\t\\t\\t\\tage.toString(),\\n\\t\\t\\t\\t'\\\"},{\\\"trait_type\\\":\\\"Maturity\\\",\\\"value\\\":\\\"',\\n\\t\\t\\t\\ttraits[11].getTraitName(traitAge),\\n\\t\\t\\t\\t'\\\"},{\\\"',\\n\\t\\t\\t\\t'trait_type\\\":\\\"Special\\\",\\\"value\\\":\\\"',\\n\\t\\t\\t\\ttraits[10].getTraitName(uint16(traitHash & 0xFFFF))\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\tbool hairFirst;\\n\\t\\tbool eyeFirst;\\n\\t\\tfor (uint256 i = 0; i < 10; i++) {\\n\\t\\t\\ttraitHash = traitHash >> 16;\\n\\t\\t\\tuint256 traitType = 10 - i - 1;\\n\\t\\t\\tuint16 traitId = uint16(traitHash & 0xFFFF);\\n\\t\\t\\tattributes = string(\\n\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\tattributes,\\n\\t\\t\\t\\t\\t'\\\"},{\\\"',\\n\\t\\t\\t\\t\\t'trait_type\\\":\\\"',\\n\\t\\t\\t\\t\\ttraits[traitType].name(),\\n\\t\\t\\t\\t\\t'\\\",\\\"value\\\":\\\"',\\n\\t\\t\\t\\t\\ttraits[traitType].getTraitName(traitId)\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t\\t\\tif (traitType == 4) {\\n\\t\\t\\t\\thairFirst = traitId < traits[4].itemCount();\\n\\t\\t\\t}\\n\\t\\t\\tif (traitType == 9) {\\n\\t\\t\\t\\teyeFirst = traits[9].isOverEye(traitId);\\n\\t\\t\\t}\\n\\t\\t\\tpieces[traitType] = traits[traitType].getTraitContent(traitId);\\n\\t\\t}\\n\\t\\tattributes = string(abi.encodePacked(attributes, '\\\"}]'));\\n\\n\\t\\tstring memory merged = string(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\tpieces[3],\\n\\t\\t\\t\\t'<path d=\\\"M328.12,597.47C341.57,626.7,378.15,702.47,480,716c128,17,228.28-64.02,232-195c4-141-60-279-139-319c-80.13-40.57-208-26-265,68C270.51,331.83,252,432,328.12,597.47z\\\" class=\\\"s f\\\"/>',\\n\\t\\t\\t\\tpieces[hairFirst ? 4 : 10],\\n\\t\\t\\t\\tpieces[hairFirst ? 10 : 4],\\n\\t\\t\\t\\tpieces[eyeFirst ? 5 : 9],\\n\\t\\t\\t\\tpieces[eyeFirst ? 6 : 5],\\n\\t\\t\\t\\tpieces[eyeFirst ? 9 : 6],\\n\\t\\t\\t\\tpieces[7],\\n\\t\\t\\t\\tpieces[8]\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\treturn\\n\\t\\t\\tstring(\\n\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\\"data:application/json;base64,\\\",\\n\\t\\t\\t\\t\\tBase64.encode(\\n\\t\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\t\\t'{\\\"name\\\":\\\"Atopia - ',\\n\\t\\t\\t\\t\\t\\t\\tbytes(name).length > 0 ? name : tokenId.toString(),\\n\\t\\t\\t\\t\\t\\t\\t'\\\",\\\"description\\\":\\\"Atopia - 100% on-chain game. Grow2Earn game play.\\\",\\\"image\\\":\\\"data:image/svg+xml;base64,',\\n\\t\\t\\t\\t\\t\\t\\tBase64.encode(\\n\\t\\t\\t\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t'<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><svg version=\\\"1.1\\\" id=\\\"_x31_\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\" viewBox=\\\"0 0 1000 1000\\\" style=\\\"enable-background:new 0 0 1000 1000;\\\" xml:space=\\\"preserve\\\"><style type=\\\"text/css\\\">.g{width:100%;height:100%}.h{overflow:visible;}.s{stroke:#000000;stroke-width:10;stroke-miterlimit:10;}.d{stroke-linecap:round;stroke-linejoin:round}.f{fill:',\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tpieces[1],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\";}.c{fill:\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tpieces[2],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\";}.e{fill:none;}.l{fill:white;}.b{fill:black;}</style>\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tpieces[0],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t'<path d=\\\"M831,1013c0,35.87,0,66-1,98c-133-1-496,1-628,0c-2-32-1-56.8-1-86c0-233.62,154.7-422,311-422S831,779.38,831,1013z\\\" class=\\\"s f\\\"/><path d=\\\"M403,1054c7-200,65.57-254.15,134.1-255.66C598,797,663,858,671,1061\\\" class=\\\"s c\\\"/><path d=\\\"M363,841c0,0-55.12,80.63-51.19,244.87\\\" class=\\\"s e d\\\"/><path d=\\\"M666,831c0,0,69,84,61,254\\\" class=\\\"s e d\\\"/>',\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tmerged,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"</svg>\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t\\t\\t\\t'\\\",\\\"attributes\\\":',\\n\\t\\t\\t\\t\\t\\t\\tattributes,\\n\\t\\t\\t\\t\\t\\t\\t\\\"}\\\"\\n\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t}\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_traits\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"traitId\",\"type\":\"uint256\"}],\"name\":\"itemCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenTrait\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"age\",\"type\":\"uint16\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"traitId\",\"type\":\"uint256\"}],\"name\":\"totalItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traitCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"traits\",\"outputs\":[{\"internalType\":\"contract ITrait\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AtopiaDrawer","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}