{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/amm/NormalDistribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../interfaces/INormalDistribution.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title NormalDistribution\\n * @author Pods Finance\\n * @notice Calculates the Cumulative Distribution Function of\\n * the standard normal distribution\\n */\\ncontract NormalDistribution is INormalDistribution, Ownable {\\n    using SafeMath for uint256;\\n    mapping(uint256 => uint256) private _cachedDataPoints;\\n\\n    event DataPointSet(uint256 key, uint256 value);\\n\\n    constructor() public {\\n        _cachedDataPoints[0] = 50000;\\n        _cachedDataPoints[100] = 50399;\\n        _cachedDataPoints[200] = 50798;\\n        _cachedDataPoints[300] = 51197;\\n        _cachedDataPoints[400] = 51595;\\n        _cachedDataPoints[500] = 51994;\\n        _cachedDataPoints[600] = 52392;\\n        _cachedDataPoints[700] = 52790;\\n        _cachedDataPoints[800] = 53188;\\n        _cachedDataPoints[900] = 53586;\\n        _cachedDataPoints[1000] = 53983;\\n        _cachedDataPoints[1100] = 54380;\\n        _cachedDataPoints[1200] = 54776;\\n        _cachedDataPoints[1300] = 55172;\\n        _cachedDataPoints[1400] = 55567;\\n        _cachedDataPoints[1500] = 55962;\\n        _cachedDataPoints[1600] = 56356;\\n        _cachedDataPoints[1700] = 56749;\\n        _cachedDataPoints[1800] = 57142;\\n        _cachedDataPoints[1900] = 57535;\\n        _cachedDataPoints[2000] = 57926;\\n        _cachedDataPoints[2100] = 58317;\\n        _cachedDataPoints[2200] = 58706;\\n        _cachedDataPoints[2300] = 59095;\\n        _cachedDataPoints[2400] = 59483;\\n        _cachedDataPoints[2500] = 59871;\\n        _cachedDataPoints[2600] = 60257;\\n        _cachedDataPoints[2700] = 60642;\\n        _cachedDataPoints[2800] = 61026;\\n        _cachedDataPoints[2900] = 61409;\\n        _cachedDataPoints[3000] = 61791;\\n        _cachedDataPoints[3100] = 62172;\\n        _cachedDataPoints[3200] = 62552;\\n        _cachedDataPoints[3300] = 62930;\\n        _cachedDataPoints[3400] = 63307;\\n        _cachedDataPoints[3500] = 63683;\\n        _cachedDataPoints[3600] = 64058;\\n        _cachedDataPoints[3700] = 64431;\\n        _cachedDataPoints[3800] = 64803;\\n        _cachedDataPoints[3900] = 65173;\\n        _cachedDataPoints[4000] = 65542;\\n        _cachedDataPoints[4100] = 65910;\\n        _cachedDataPoints[4200] = 66276;\\n        _cachedDataPoints[4300] = 66640;\\n        _cachedDataPoints[4400] = 67003;\\n        _cachedDataPoints[4500] = 67364;\\n        _cachedDataPoints[4600] = 67724;\\n        _cachedDataPoints[4700] = 68082;\\n        _cachedDataPoints[4800] = 68439;\\n        _cachedDataPoints[4900] = 68793;\\n        _cachedDataPoints[5000] = 69146;\\n        _cachedDataPoints[5100] = 69497;\\n        _cachedDataPoints[5200] = 69847;\\n        _cachedDataPoints[5300] = 70194;\\n        _cachedDataPoints[5400] = 70540;\\n        _cachedDataPoints[5500] = 70884;\\n        _cachedDataPoints[5600] = 71226;\\n        _cachedDataPoints[5700] = 71566;\\n        _cachedDataPoints[5800] = 71904;\\n        _cachedDataPoints[5900] = 72240;\\n        _cachedDataPoints[6000] = 72575;\\n        _cachedDataPoints[6100] = 72907;\\n        _cachedDataPoints[6200] = 73237;\\n        _cachedDataPoints[6300] = 73565;\\n        _cachedDataPoints[6400] = 73891;\\n        _cachedDataPoints[6500] = 74215;\\n        _cachedDataPoints[6600] = 74537;\\n        _cachedDataPoints[6700] = 74857;\\n        _cachedDataPoints[6800] = 75175;\\n        _cachedDataPoints[6900] = 75490;\\n        _cachedDataPoints[7000] = 75804;\\n        _cachedDataPoints[7100] = 76115;\\n        _cachedDataPoints[7200] = 76424;\\n        _cachedDataPoints[7300] = 76730;\\n        _cachedDataPoints[7400] = 77035;\\n        _cachedDataPoints[7500] = 77337;\\n        _cachedDataPoints[7600] = 77637;\\n        _cachedDataPoints[7700] = 77935;\\n        _cachedDataPoints[7800] = 78230;\\n        _cachedDataPoints[7900] = 78524;\\n        _cachedDataPoints[8000] = 78814;\\n        _cachedDataPoints[8100] = 79103;\\n        _cachedDataPoints[8200] = 79389;\\n        _cachedDataPoints[8300] = 79673;\\n        _cachedDataPoints[8400] = 79955;\\n        _cachedDataPoints[8500] = 80234;\\n        _cachedDataPoints[8600] = 80511;\\n        _cachedDataPoints[8700] = 80785;\\n        _cachedDataPoints[8800] = 81057;\\n        _cachedDataPoints[8900] = 81327;\\n        _cachedDataPoints[9000] = 81594;\\n        _cachedDataPoints[9100] = 81859;\\n        _cachedDataPoints[9200] = 82121;\\n        _cachedDataPoints[9300] = 82381;\\n        _cachedDataPoints[9400] = 82639;\\n        _cachedDataPoints[9500] = 82894;\\n        _cachedDataPoints[9600] = 83147;\\n        _cachedDataPoints[9700] = 83398;\\n        _cachedDataPoints[9800] = 83646;\\n        _cachedDataPoints[9900] = 83891;\\n        _cachedDataPoints[10000] = 84134;\\n        _cachedDataPoints[10100] = 84375;\\n        _cachedDataPoints[10200] = 84614;\\n        _cachedDataPoints[10300] = 84849;\\n        _cachedDataPoints[10400] = 85083;\\n        _cachedDataPoints[10500] = 85314;\\n        _cachedDataPoints[10600] = 85543;\\n        _cachedDataPoints[10700] = 85769;\\n        _cachedDataPoints[10800] = 85993;\\n        _cachedDataPoints[10900] = 86214;\\n        _cachedDataPoints[11000] = 86433;\\n        _cachedDataPoints[11100] = 86650;\\n        _cachedDataPoints[11200] = 86864;\\n        _cachedDataPoints[11300] = 87076;\\n        _cachedDataPoints[11400] = 87286;\\n        _cachedDataPoints[11500] = 87493;\\n        _cachedDataPoints[11600] = 87698;\\n        _cachedDataPoints[11700] = 87900;\\n        _cachedDataPoints[11800] = 88100;\\n        _cachedDataPoints[11900] = 88298;\\n        _cachedDataPoints[12000] = 88493;\\n        _cachedDataPoints[12100] = 88686;\\n        _cachedDataPoints[12200] = 88877;\\n        _cachedDataPoints[12300] = 89065;\\n        _cachedDataPoints[12400] = 89251;\\n        _cachedDataPoints[12500] = 89435;\\n        _cachedDataPoints[12600] = 89617;\\n        _cachedDataPoints[12700] = 89796;\\n        _cachedDataPoints[12800] = 89973;\\n        _cachedDataPoints[12900] = 90147;\\n        _cachedDataPoints[13000] = 90320;\\n        _cachedDataPoints[13100] = 90490;\\n        _cachedDataPoints[13200] = 90658;\\n        _cachedDataPoints[13300] = 90824;\\n        _cachedDataPoints[13400] = 90988;\\n        _cachedDataPoints[13500] = 91149;\\n        _cachedDataPoints[13600] = 91309;\\n        _cachedDataPoints[13700] = 91466;\\n        _cachedDataPoints[13800] = 91621;\\n        _cachedDataPoints[13900] = 91774;\\n        _cachedDataPoints[14000] = 91924;\\n        _cachedDataPoints[14100] = 92073;\\n        _cachedDataPoints[14200] = 92220;\\n        _cachedDataPoints[14300] = 92364;\\n        _cachedDataPoints[14400] = 92507;\\n        _cachedDataPoints[14500] = 92647;\\n        _cachedDataPoints[14600] = 92785;\\n        _cachedDataPoints[14700] = 92922;\\n        _cachedDataPoints[14800] = 93056;\\n        _cachedDataPoints[14900] = 93189;\\n        _cachedDataPoints[15000] = 93319;\\n        _cachedDataPoints[15100] = 93448;\\n        _cachedDataPoints[15200] = 93574;\\n        _cachedDataPoints[15300] = 93699;\\n        _cachedDataPoints[15400] = 93822;\\n        _cachedDataPoints[15500] = 93943;\\n        _cachedDataPoints[15600] = 94062;\\n        _cachedDataPoints[15700] = 94179;\\n        _cachedDataPoints[15800] = 94295;\\n        _cachedDataPoints[15900] = 94408;\\n        _cachedDataPoints[16000] = 94520;\\n        _cachedDataPoints[16100] = 94630;\\n        _cachedDataPoints[16200] = 94738;\\n        _cachedDataPoints[16300] = 94845;\\n        _cachedDataPoints[16400] = 94950;\\n        _cachedDataPoints[16500] = 95053;\\n        _cachedDataPoints[16600] = 95154;\\n        _cachedDataPoints[16700] = 95254;\\n        _cachedDataPoints[16800] = 95352;\\n        _cachedDataPoints[16900] = 95449;\\n        _cachedDataPoints[17000] = 95543;\\n        _cachedDataPoints[17100] = 95637;\\n        _cachedDataPoints[17200] = 95728;\\n        _cachedDataPoints[17300] = 95818;\\n        _cachedDataPoints[17400] = 95907;\\n        _cachedDataPoints[17500] = 95994;\\n        _cachedDataPoints[17600] = 96080;\\n        _cachedDataPoints[17700] = 96164;\\n        _cachedDataPoints[17800] = 96246;\\n        _cachedDataPoints[17900] = 96327;\\n        _cachedDataPoints[18000] = 96407;\\n        _cachedDataPoints[18100] = 96485;\\n        _cachedDataPoints[18200] = 96562;\\n        _cachedDataPoints[18300] = 96638;\\n        _cachedDataPoints[18400] = 96712;\\n        _cachedDataPoints[18500] = 96784;\\n        _cachedDataPoints[18600] = 96856;\\n        _cachedDataPoints[18700] = 96926;\\n        _cachedDataPoints[18800] = 96995;\\n        _cachedDataPoints[18900] = 97062;\\n        _cachedDataPoints[19000] = 97128;\\n        _cachedDataPoints[19100] = 97193;\\n        _cachedDataPoints[19200] = 97257;\\n        _cachedDataPoints[19300] = 97320;\\n        _cachedDataPoints[19400] = 97381;\\n        _cachedDataPoints[19500] = 97441;\\n        _cachedDataPoints[19600] = 97500;\\n        _cachedDataPoints[19700] = 97558;\\n        _cachedDataPoints[19800] = 97615;\\n        _cachedDataPoints[19900] = 97670;\\n        _cachedDataPoints[20000] = 97725;\\n        _cachedDataPoints[20100] = 97778;\\n        _cachedDataPoints[20200] = 97831;\\n        _cachedDataPoints[20300] = 97882;\\n        _cachedDataPoints[20400] = 97932;\\n        _cachedDataPoints[20500] = 97982;\\n        _cachedDataPoints[20600] = 98030;\\n        _cachedDataPoints[20700] = 98077;\\n        _cachedDataPoints[20800] = 98124;\\n        _cachedDataPoints[20900] = 98169;\\n        _cachedDataPoints[21000] = 98214;\\n        _cachedDataPoints[21100] = 98257;\\n        _cachedDataPoints[21200] = 98300;\\n        _cachedDataPoints[21300] = 98341;\\n        _cachedDataPoints[21400] = 98382;\\n        _cachedDataPoints[21500] = 98422;\\n        _cachedDataPoints[21600] = 98461;\\n        _cachedDataPoints[21700] = 98500;\\n        _cachedDataPoints[21800] = 98537;\\n        _cachedDataPoints[21900] = 98574;\\n        _cachedDataPoints[22000] = 98610;\\n        _cachedDataPoints[22100] = 98645;\\n        _cachedDataPoints[22200] = 98679;\\n        _cachedDataPoints[22300] = 98713;\\n        _cachedDataPoints[22400] = 98745;\\n        _cachedDataPoints[22500] = 98778;\\n        _cachedDataPoints[22600] = 98809;\\n        _cachedDataPoints[22700] = 98840;\\n        _cachedDataPoints[22800] = 98870;\\n        _cachedDataPoints[22900] = 98899;\\n        _cachedDataPoints[23000] = 98928;\\n        _cachedDataPoints[23100] = 98956;\\n        _cachedDataPoints[23200] = 98983;\\n        _cachedDataPoints[23300] = 99010;\\n        _cachedDataPoints[23400] = 99036;\\n        _cachedDataPoints[23500] = 99061;\\n        _cachedDataPoints[23600] = 99086;\\n        _cachedDataPoints[23700] = 99111;\\n        _cachedDataPoints[23800] = 99134;\\n        _cachedDataPoints[23900] = 99158;\\n        _cachedDataPoints[24000] = 99180;\\n        _cachedDataPoints[24100] = 99202;\\n        _cachedDataPoints[24200] = 99224;\\n        _cachedDataPoints[24300] = 99245;\\n        _cachedDataPoints[24400] = 99266;\\n        _cachedDataPoints[24500] = 99286;\\n        _cachedDataPoints[24600] = 99305;\\n        _cachedDataPoints[24700] = 99324;\\n        _cachedDataPoints[24800] = 99343;\\n        _cachedDataPoints[24900] = 99361;\\n        _cachedDataPoints[25000] = 99379;\\n        _cachedDataPoints[25100] = 99396;\\n        _cachedDataPoints[25200] = 99413;\\n        _cachedDataPoints[25300] = 99430;\\n        _cachedDataPoints[25400] = 99446;\\n        _cachedDataPoints[25500] = 99461;\\n        _cachedDataPoints[25600] = 99477;\\n        _cachedDataPoints[25700] = 99492;\\n        _cachedDataPoints[25800] = 99506;\\n        _cachedDataPoints[25900] = 99520;\\n        _cachedDataPoints[26000] = 99534;\\n        _cachedDataPoints[26100] = 99547;\\n        _cachedDataPoints[26200] = 99560;\\n        _cachedDataPoints[26300] = 99573;\\n        _cachedDataPoints[26400] = 99585;\\n        _cachedDataPoints[26500] = 99598;\\n        _cachedDataPoints[26600] = 99609;\\n        _cachedDataPoints[26700] = 99621;\\n        _cachedDataPoints[26800] = 99632;\\n        _cachedDataPoints[26900] = 99643;\\n        _cachedDataPoints[27000] = 99653;\\n        _cachedDataPoints[27100] = 99664;\\n        _cachedDataPoints[27200] = 99674;\\n        _cachedDataPoints[27300] = 99683;\\n        _cachedDataPoints[27400] = 99693;\\n        _cachedDataPoints[27500] = 99702;\\n        _cachedDataPoints[27600] = 99711;\\n        _cachedDataPoints[27700] = 99720;\\n        _cachedDataPoints[27800] = 99728;\\n        _cachedDataPoints[27900] = 99736;\\n        _cachedDataPoints[28000] = 99744;\\n        _cachedDataPoints[28100] = 99752;\\n        _cachedDataPoints[28200] = 99760;\\n        _cachedDataPoints[28300] = 99767;\\n        _cachedDataPoints[28400] = 99774;\\n        _cachedDataPoints[28500] = 99781;\\n        _cachedDataPoints[28600] = 99788;\\n        _cachedDataPoints[28700] = 99795;\\n        _cachedDataPoints[28800] = 99801;\\n        _cachedDataPoints[28900] = 99807;\\n        _cachedDataPoints[29000] = 99813;\\n        _cachedDataPoints[29100] = 99819;\\n        _cachedDataPoints[29200] = 99825;\\n        _cachedDataPoints[29300] = 99831;\\n        _cachedDataPoints[29400] = 99836;\\n        _cachedDataPoints[29500] = 99841;\\n        _cachedDataPoints[29600] = 99846;\\n        _cachedDataPoints[29700] = 99851;\\n        _cachedDataPoints[29800] = 99856;\\n        _cachedDataPoints[29900] = 99861;\\n        _cachedDataPoints[30000] = 99865;\\n        _cachedDataPoints[30100] = 99869;\\n        _cachedDataPoints[30200] = 99874;\\n        _cachedDataPoints[30300] = 99878;\\n        _cachedDataPoints[30400] = 99882;\\n        _cachedDataPoints[30500] = 99886;\\n        _cachedDataPoints[30600] = 99889;\\n        _cachedDataPoints[30700] = 99893;\\n        _cachedDataPoints[30800] = 99896;\\n        _cachedDataPoints[30900] = 99900;\\n        _cachedDataPoints[31000] = 99903;\\n        _cachedDataPoints[31100] = 99906;\\n        _cachedDataPoints[31200] = 99910;\\n        _cachedDataPoints[31300] = 99913;\\n        _cachedDataPoints[31400] = 99916;\\n        _cachedDataPoints[31500] = 99918;\\n        _cachedDataPoints[31600] = 99921;\\n        _cachedDataPoints[31700] = 99924;\\n        _cachedDataPoints[31800] = 99926;\\n        _cachedDataPoints[31900] = 99929;\\n        _cachedDataPoints[32000] = 99931;\\n        _cachedDataPoints[32100] = 99934;\\n        _cachedDataPoints[32200] = 99936;\\n        _cachedDataPoints[32300] = 99938;\\n        _cachedDataPoints[32400] = 99940;\\n        _cachedDataPoints[32500] = 99942;\\n        _cachedDataPoints[32600] = 99944;\\n        _cachedDataPoints[32700] = 99946;\\n        _cachedDataPoints[32800] = 99948;\\n        _cachedDataPoints[32900] = 99950;\\n        _cachedDataPoints[33000] = 99952;\\n        _cachedDataPoints[33100] = 99953;\\n        _cachedDataPoints[33200] = 99955;\\n        _cachedDataPoints[33300] = 99957;\\n        _cachedDataPoints[33400] = 99958;\\n        _cachedDataPoints[33500] = 99960;\\n        _cachedDataPoints[33600] = 99961;\\n        _cachedDataPoints[33700] = 99962;\\n        _cachedDataPoints[33800] = 99964;\\n        _cachedDataPoints[33900] = 99965;\\n        _cachedDataPoints[34000] = 99966;\\n        _cachedDataPoints[34100] = 99968;\\n        _cachedDataPoints[34200] = 99969;\\n        _cachedDataPoints[34300] = 99970;\\n        _cachedDataPoints[34400] = 99971;\\n        _cachedDataPoints[34500] = 99972;\\n        _cachedDataPoints[34600] = 99973;\\n        _cachedDataPoints[34700] = 99974;\\n        _cachedDataPoints[34800] = 99975;\\n        _cachedDataPoints[34900] = 99976;\\n        _cachedDataPoints[35000] = 99977;\\n        _cachedDataPoints[35100] = 99978;\\n        _cachedDataPoints[35200] = 99978;\\n        _cachedDataPoints[35300] = 99979;\\n        _cachedDataPoints[35400] = 99980;\\n        _cachedDataPoints[35500] = 99981;\\n        _cachedDataPoints[35600] = 99981;\\n        _cachedDataPoints[35700] = 99982;\\n        _cachedDataPoints[35800] = 99983;\\n        _cachedDataPoints[35900] = 99983;\\n        _cachedDataPoints[36000] = 99984;\\n        _cachedDataPoints[36100] = 99985;\\n        _cachedDataPoints[36200] = 99985;\\n        _cachedDataPoints[36300] = 99986;\\n        _cachedDataPoints[36400] = 99986;\\n        _cachedDataPoints[36500] = 99987;\\n        _cachedDataPoints[36600] = 99987;\\n        _cachedDataPoints[36700] = 99988;\\n        _cachedDataPoints[36800] = 99988;\\n        _cachedDataPoints[36900] = 99989;\\n        _cachedDataPoints[37000] = 99989;\\n        _cachedDataPoints[37100] = 99990;\\n        _cachedDataPoints[37200] = 99990;\\n        _cachedDataPoints[37300] = 99990;\\n        _cachedDataPoints[37400] = 99991;\\n        _cachedDataPoints[37500] = 99991;\\n        _cachedDataPoints[37600] = 99992;\\n        _cachedDataPoints[37700] = 99992;\\n        _cachedDataPoints[37800] = 99992;\\n        _cachedDataPoints[37900] = 99992;\\n        _cachedDataPoints[38000] = 99993;\\n        _cachedDataPoints[38100] = 99993;\\n        _cachedDataPoints[38200] = 99993;\\n        _cachedDataPoints[38300] = 99994;\\n        _cachedDataPoints[38400] = 99994;\\n        _cachedDataPoints[38500] = 99994;\\n        _cachedDataPoints[38600] = 99994;\\n        _cachedDataPoints[38700] = 99995;\\n        _cachedDataPoints[38800] = 99995;\\n        _cachedDataPoints[38900] = 99995;\\n        _cachedDataPoints[39000] = 99995;\\n        _cachedDataPoints[39100] = 99995;\\n        _cachedDataPoints[39200] = 99996;\\n        _cachedDataPoints[39300] = 99996;\\n        _cachedDataPoints[39400] = 99996;\\n        _cachedDataPoints[39500] = 99996;\\n        _cachedDataPoints[39600] = 99996;\\n        _cachedDataPoints[39700] = 99996;\\n    }\\n\\n    /**\\n     * @notice Returns probability approximations of Z in a normal distribution curve\\n     * @dev For performance, numbers are truncated to 2 decimals. Ex: 1134500000000000000(1.13) gets truncated to 113\\n     * @dev For Z > ±0.307 the curve response gets more concentrated, hence some predefined answers can be\\n     * given for a few sets of z. Otherwise it will calculate a median answer between the saved data points\\n     * @param z A point in the normal distribution\\n     * @param decimals Amount of decimals of z\\n     * @return The probability of a z variable in a normal distribution\\n     */\\n    function getProbability(int256 z, uint256 decimals) external override view returns (uint256) {\\n        require(decimals >= 5 && decimals < 77, \\\"NormalDistribution: invalid decimals\\\");\\n        uint256 absZ = _abs(z);\\n        uint256 truncatedZ = absZ.div(10**(decimals.sub(2))).mul(100);\\n        uint256 fourthDigit = absZ.div(10**(decimals.sub(3))) - absZ.div(10**(decimals.sub(2))).mul(10);\\n        uint256 responseDecimals = 10**(decimals.sub(5));\\n        uint256 responseValue;\\n\\n        if (truncatedZ >= 41900) {\\n            // Over 4.18 the answer is rounded to 0.99999\\n            responseValue = 99999;\\n        } else if (truncatedZ >= 40600) {\\n            // Between 4.06 and 4.17 the answer is rounded to 0.99998\\n            responseValue = 99998;\\n        } else if (truncatedZ >= 39800) {\\n            // Between 3.98 and 4.05 the answer is rounded to 0.99997\\n            responseValue = 99997;\\n        } else if (fourthDigit >= 7) {\\n            // If the fourthDigit is 7, 8 or 9, rounds up to the next data point\\n            responseValue = _cachedDataPoints[truncatedZ + 100];\\n        } else if (fourthDigit >= 4) {\\n            // If the fourthDigit is 4, 5 or 6, get the average between the current and the next\\n            responseValue = _cachedDataPoints[truncatedZ].add(_cachedDataPoints[truncatedZ + 100]).div(2);\\n        } else {\\n            // If the fourthDigit is 0, 1, 2 or 3, rounds down to the current data point\\n            responseValue = _cachedDataPoints[truncatedZ];\\n        }\\n\\n        // Handle negative z\\n        if (z < 0) {\\n            responseValue = uint256(100000).sub(responseValue);\\n        }\\n\\n        return responseValue.mul(responseDecimals);\\n    }\\n\\n    /**\\n     * @dev Defines a new probability point\\n     * @param key A point in the normal distribution\\n     * @param value The value\\n     */\\n    function setDataPoint(uint256 key, uint256 value) external override onlyOwner {\\n        _cachedDataPoints[key] = value;\\n        emit DataPointSet(key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the absolute value of a number.\\n     */\\n    function _abs(int256 a) internal pure returns (uint256) {\\n        return a < 0 ? uint256(-a) : uint256(a);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INormalDistribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity >=0.6.12;\\n\\ninterface INormalDistribution {\\n    function getProbability(int256 z, uint256 decimals) external view returns (uint256);\\n\\n    function setDataPoint(uint256 key, uint256 value) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DataPointSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"z\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"getProbability\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setDataPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NormalDistribution","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}