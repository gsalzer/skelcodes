{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/SmartRoute/intf/IDODOV2.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n    SPDX-License-Identifier: Apache-2.0\r\n\r\n*/\r\n\r\npragma solidity 0.6.9;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IDODOV2 {\r\n\r\n    //========== Common ==================\r\n\r\n    function sellBase(address to) external returns (uint256 receiveQuoteAmount);\r\n\r\n    function sellQuote(address to) external returns (uint256 receiveBaseAmount);\r\n\r\n    function getVaultReserve() external view returns (uint256 baseReserve, uint256 quoteReserve);\r\n\r\n    function _BASE_TOKEN_() external view returns (address);\r\n\r\n    function _QUOTE_TOKEN_() external view returns (address);\r\n\r\n    function getPMMStateForCall() external view returns (\r\n            uint256 i,\r\n            uint256 K,\r\n            uint256 B,\r\n            uint256 Q,\r\n            uint256 B0,\r\n            uint256 Q0,\r\n            uint256 R\r\n    );\r\n\r\n    function getUserFeeRate(address user) external view returns (uint256 lpFeeRate, uint256 mtFeeRate);\r\n\r\n    \r\n    function getDODOPoolBidirection(address token0, address token1) external view returns (address[] memory, address[] memory);\r\n\r\n    //========== DODOVendingMachine ========\r\n    \r\n    function createDODOVendingMachine(\r\n        address baseToken,\r\n        address quoteToken,\r\n        uint256 lpFeeRate,\r\n        uint256 i,\r\n        uint256 k,\r\n        bool isOpenTWAP\r\n    ) external returns (address newVendingMachine);\r\n    \r\n    function buyShares(address to) external returns (uint256,uint256,uint256);\r\n\r\n\r\n    //========== DODOPrivatePool ===========\r\n\r\n    function createDODOPrivatePool() external returns (address newPrivatePool);\r\n\r\n    function initDODOPrivatePool(\r\n        address dppAddress,\r\n        address creator,\r\n        address baseToken,\r\n        address quoteToken,\r\n        uint256 lpFeeRate,\r\n        uint256 k,\r\n        uint256 i,\r\n        bool isOpenTwap\r\n    ) external;\r\n\r\n    function reset(\r\n        address operator,\r\n        uint256 newLpFeeRate,\r\n        uint256 newI,\r\n        uint256 newK,\r\n        uint256 baseOutAmount,\r\n        uint256 quoteOutAmount,\r\n        uint256 minBaseReserve,\r\n        uint256 minQuoteReserve\r\n    ) external returns (bool); \r\n\r\n\r\n    function _OWNER_() external returns (address);\r\n    \r\n    //========== CrowdPooling ===========\r\n\r\n    function createCrowdPooling() external returns (address payable newCrowdPooling);\r\n\r\n    function initCrowdPooling(\r\n        address cpAddress,\r\n        address creator,\r\n        address baseToken,\r\n        address quoteToken,\r\n        uint256[] memory timeLine,\r\n        uint256[] memory valueList,\r\n        bool isOpenTWAP\r\n    ) external;\r\n\r\n    function bid(address to) external;\r\n}\r\n\r\n// File: contracts/SmartRoute/helper/DODOV2RouteHelper.sol\r\n\r\n\r\ncontract DODOV2RouteHelper {\r\n    address public immutable _DVM_FACTORY_;\r\n    address public immutable _DPP_FACTORY_;\r\n    address public immutable _DSP_FACTORY_;\r\n\r\n    struct PairDetail {\r\n        uint256 i;\r\n        uint256 K;\r\n        uint256 B;\r\n        uint256 Q;\r\n        uint256 B0;\r\n        uint256 Q0;\r\n        uint256 R;\r\n        uint256 lpFeeRate;\r\n        uint256 mtFeeRate;\r\n        address baseToken;\r\n        address quoteToken;\r\n        address curPair;\r\n        uint256 pairVersion;\r\n    }\r\n\r\n    constructor(address dvmFactory,address dppFactory,address dspFactory) public {\r\n        _DVM_FACTORY_ = dvmFactory;\r\n        _DPP_FACTORY_ = dppFactory;\r\n        _DSP_FACTORY_ = dspFactory;\r\n    }\r\n\r\n    function getPairDetail(address token0,address token1,address userAddr) external view returns (PairDetail[] memory res) {\r\n        (address[] memory baseToken0DVM, address[] memory baseToken1DVM) = IDODOV2(_DVM_FACTORY_).getDODOPoolBidirection(token0,token1);\r\n        (address[] memory baseToken0DPP, address[] memory baseToken1DPP) = IDODOV2(_DPP_FACTORY_).getDODOPoolBidirection(token0,token1);\r\n        (address[] memory baseToken0DSP, address[] memory baseToken1DSP) = IDODOV2(_DSP_FACTORY_).getDODOPoolBidirection(token0,token1);\r\n\r\n        uint256 len = baseToken0DVM.length + baseToken1DVM.length + baseToken0DPP.length + baseToken1DPP.length + baseToken0DSP.length + baseToken1DSP.length;\r\n        res = new PairDetail[](len);\r\n        for(uint8 i = 0; i < len; i++) {\r\n            PairDetail memory curRes = PairDetail(0,0,0,0,0,0,0,0,0,address(0),address(0),address(0),2);\r\n            address cur;\r\n            if(i < baseToken0DVM.length) {\r\n                cur = baseToken0DVM[i];\r\n                curRes.baseToken = token0;\r\n                curRes.quoteToken = token1;\r\n            } else if(i < baseToken0DVM.length + baseToken1DVM.length) {\r\n                cur = baseToken1DVM[i - baseToken0DVM.length];\r\n                curRes.baseToken = token1;\r\n                curRes.quoteToken = token0;\r\n            } else if(i < baseToken0DVM.length + baseToken1DVM.length + baseToken0DPP.length) {\r\n                cur = baseToken0DPP[i - baseToken0DVM.length - baseToken1DVM.length];\r\n                curRes.baseToken = token0;\r\n                curRes.quoteToken = token1;\r\n            } else if(i < baseToken0DVM.length + baseToken1DVM.length + baseToken0DPP.length + baseToken1DPP.length)  {\r\n                cur = baseToken1DPP[i - baseToken0DVM.length - baseToken1DVM.length - baseToken0DPP.length];\r\n                curRes.baseToken = token1;\r\n                curRes.quoteToken = token0;\r\n            } else if(i < baseToken0DVM.length + baseToken1DVM.length + baseToken0DPP.length + baseToken1DPP.length + baseToken0DSP.length)  {\r\n                cur = baseToken0DSP[i - baseToken0DVM.length - baseToken1DVM.length - baseToken0DPP.length - baseToken1DPP.length];\r\n                curRes.baseToken = token0;\r\n                curRes.quoteToken = token1;\r\n            } else {\r\n                cur = baseToken1DSP[i - baseToken0DVM.length - baseToken1DVM.length - baseToken0DPP.length - baseToken1DPP.length - baseToken0DSP.length];\r\n                curRes.baseToken = token1;\r\n                curRes.quoteToken = token0;\r\n            }\r\n\r\n            (            \r\n                curRes.i,\r\n                curRes.K,\r\n                curRes.B,\r\n                curRes.Q,\r\n                curRes.B0,\r\n                curRes.Q0,\r\n                curRes.R\r\n            ) = IDODOV2(cur).getPMMStateForCall();\r\n\r\n\r\n            try IDODOV2(cur).getUserFeeRate(userAddr) returns (uint256 _lpFeeRate, uint256 _mtFeeRate) {\r\n                curRes.lpFeeRate = _lpFeeRate;\r\n                curRes.mtFeeRate = _mtFeeRate;\r\n            } catch {\r\n                curRes.lpFeeRate = 0;\r\n                curRes.mtFeeRate = 10**18;\r\n            }\r\n\r\n            curRes.curPair = cur;\r\n            res[i] = curRes;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dvmFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dppFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dspFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_DPP_FACTORY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DSP_FACTORY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DVM_FACTORY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getPairDetail\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"K\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"B\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Q\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"B0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Q0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"R\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mtFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curPair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairVersion\",\"type\":\"uint256\"}],\"internalType\":\"struct DODOV2RouteHelper.PairDetail[]\",\"name\":\"res\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DODOV2RouteHelper","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000072d220ce168c4f361dd4dee5d826a01ad8598f6c0000000000000000000000005336ede8f971339f6c0e304c66ba16f1296a2fbe0000000000000000000000006fddb76c93299d985f4d3fc7ac468f9a168577a4","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f390b8142c120bd5426e948dbfb7a89e7ca786ce58c6d62b3f8664ffccba8fb7"}]}