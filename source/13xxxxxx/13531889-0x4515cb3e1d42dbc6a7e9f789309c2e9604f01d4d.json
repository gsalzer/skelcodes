{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.5.6;\r\n\r\n// import \"@openzeppelin/contracts/ownership/Ownable.sol\";\r\n// import '@openzeppelin/contracts/token/ERC721/ERC721Holder.sol';\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract IERC721Receiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) public returns (bytes4);\r\n}\r\n\r\ncontract ERC721Holder is IERC721Receiver {\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes memory\r\n    ) public returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}\r\n\r\n\r\ninterface IMintable {\r\n    // Required read methods\r\n    function getApproved(uint256 tokenId) external returns (address operator);\r\n\r\n    function tokenURI(uint256 tokenId) external returns (string memory);\r\n\r\n    // Required write methods\r\n    function approve(address _to, uint256 _tokenId) external;\r\n\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n\r\n    function burn(uint256 tokenId) external;\r\n\r\n    function mint(string calldata _tokenURI, uint256 _royality) external;\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n}\r\n\r\ninterface IBrokerV2 {\r\n    function bid(\r\n        uint256 tokenID,\r\n        address _mintableToken,\r\n        uint256 amount\r\n    ) external payable;\r\n\r\n    function collect(uint256 tokenID, address _mintableToken) external;\r\n\r\n    function buy(uint256 tokenID, address _mintableToken) external payable;\r\n\r\n    function putOnSale(\r\n        uint256 _tokenID,\r\n        uint256 _startingPrice,\r\n        uint256 _auctionType,\r\n        uint256 _buyPrice,\r\n        uint256 _duration,\r\n        address _mintableToken,\r\n        address _erc20Token\r\n    ) external;\r\n\r\n    function updatePrice(\r\n        uint256 tokenID,\r\n        address _mintableToken,\r\n        uint256 _newPrice,\r\n        address _erc20Token\r\n    ) external;\r\n\r\n    function putSaleOff(uint256 tokenID, address _mintableToken) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function approve(address spender, uint256 value) external;\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue)\r\n        external;\r\n\r\n    function increaseApproval(address spender, uint256 addedValue) external;\r\n\r\n    function transfer(address to, uint256 value) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external;\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external;\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external;\r\n        \r\n    function balanceOf(address who) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title AdminManager\r\n * @author Yogesh Singh\r\n * @notice You can use this contract to execute function on behalf of superUser\r\n * @dev Mediator contract to allow muliple user to perform ERC721 action using contracts address only\r\n */\r\ncontract AdminManager is Ownable, ERC721Holder {\r\n    address[] public admins;\r\n\r\n    struct FunctionNames {\r\n        string approve;\r\n        string transfer;\r\n        string burn;\r\n        string mint;\r\n        string safeTransferFrom;\r\n        string transferFrom;\r\n        string putOnSale;\r\n        string buy;\r\n        string bid;\r\n        string collect;\r\n        string updatePrice;\r\n        string putSaleOff;\r\n        string erc20Approve;\r\n        string erc20DecreaseApproval;\r\n        string erc20IncreaseApproval;\r\n        string erc20Transfer;\r\n        string erc20TransferFrom;\r\n        string erc20IncreaseAllowance;\r\n        string erc20DecreaseAllowance;\r\n    }\r\n\r\n    FunctionNames functionNames =\r\n        FunctionNames(\r\n            \"ERC721:approve\",\r\n            \"ERC721:transfer\",\r\n            \"ERC721:burn\",\r\n            \"ERC721:mint\",\r\n            \"ERC721:safeTransferFrom\",\r\n            \"ERC721:transferFrom\",\r\n            \"Broker:putOnSale\",\r\n            \"Broker:buy\",\r\n            \"Broker:bid\",\r\n            \"Broker:collect\",\r\n            \"Broker:updatePrice\",\r\n            \"Broker:putSaleOff\",\r\n            \"ERC20:approve\",\r\n            \"ERC20:decreaseApproval\",\r\n            \"ERC20:increaseApproval\",\r\n            \"ERC20:transfer\",\r\n            \"ERC20:transferFrom\",\r\n            \"ERC20:increaseAllowance\",\r\n            \"ERC20:decreaseAllowance\"\r\n        );\r\n\r\n    IBrokerV2 broker;\r\n\r\n    event NFTBurned(\r\n        address indexed collection,\r\n        uint256 indexed tokenId,\r\n        address indexed admin,\r\n        uint256 time,\r\n        string tokenURI\r\n    );\r\n    event AdminRemoved(address admin, uint256 time);\r\n    event AdminAdded(address admin, uint256 time);\r\n\r\n    event AdminActionPerformed(\r\n        address indexed admin,\r\n        address indexed contractAddress,\r\n        string indexed functionName,\r\n        address collectionAddress,\r\n        uint256 tokenId\r\n    );\r\n\r\n    constructor(address _broker) public {\r\n        transferOwnership(msg.sender);\r\n        broker = IBrokerV2(_broker);\r\n    }\r\n\r\n    /**\r\n     * @notice This function is used to check address of admin exist or not in list of admin\r\n     * @dev Fuction take address type argument\r\n     * @param _sender The account address of _sender or admin\r\n     */\r\n    function adminExist(address _sender) public view returns (bool) {\r\n        for (uint256 i = 0; i < admins.length; i++) {\r\n            if (_sender == admins[i]) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    modifier adminOnly() {\r\n        require(adminExist(msg.sender), \"AdminManager: admin only.\");\r\n        _;\r\n    }\r\n\r\n    modifier adminAndOwnerOnly() {\r\n        require(\r\n            adminExist(msg.sender) || isOwner(),\r\n            \"AdminManager: admin and owner only.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice This function is used to add address of admins\r\n     * @dev Fuction take address type argument\r\n     * @param admin The account address of admin\r\n     */\r\n    function addAdmin(address admin) public onlyOwner {\r\n        if (!adminExist(admin)) {\r\n            admins.push(admin);\r\n        } else {\r\n            revert(\"admin already in list\");\r\n        }\r\n\r\n        emit AdminAdded(admin, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice This function is used to get list of all address of admins\r\n     * @dev This Fuction is not take any argument\r\n     * @return This Fuction return list of address[]\r\n     */\r\n    function getAdmins() public view returns (address[] memory) {\r\n        return admins;\r\n    }\r\n\r\n    /**\r\n     * @notice This function is used to get list of all address of admins\r\n     * @dev This Fuction is not take any argument\r\n     * @param admin The account address of admin\r\n     */\r\n    function removeAdmin(address admin) public onlyOwner {\r\n        for (uint256 i = 0; i < admins.length; i++) {\r\n            if (admins[i] == admin) {\r\n                admins[admins.length - 1] = admins[i];\r\n                admins.pop();\r\n                break;\r\n            }\r\n        }\r\n        emit AdminRemoved(admin, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice This function is used to burn the apporved NFTToken to certain admin address which was allowed by super admin the owner of Admin Manager\r\n     * @dev This Fuction is take two arguments address of contract and tokenId of NFT\r\n     * @param collection tokenId The contract address of NFT contract and tokenId of NFT\r\n     */\r\n    function burnNFT(address collection, uint256 tokenId)\r\n        public\r\n        adminAndOwnerOnly\r\n    {\r\n        IMintable NFTToken = IMintable(collection);\r\n\r\n        string memory tokenURI = NFTToken.tokenURI(tokenId);\r\n        require(\r\n            NFTToken.getApproved(tokenId) == address(this),\r\n            \"Token not apporove for burn\"\r\n        );\r\n        NFTToken.burn(tokenId);\r\n        emit NFTBurned(\r\n            collection,\r\n            tokenId,\r\n            msg.sender,\r\n            block.timestamp,\r\n            tokenURI\r\n        );\r\n    }\r\n\r\n    // NFT methods for admin to manage by this contract URL\r\n    function erc721Approve(\r\n        address _ERC721Address,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) public adminAndOwnerOnly {\r\n        IMintable erc721 = IMintable(_ERC721Address);\r\n        emit AdminActionPerformed(\r\n            msg.sender,\r\n            _ERC721Address,\r\n            functionNames.approve,\r\n            _ERC721Address,\r\n            _tokenId\r\n        );\r\n        return erc721.approve(_to, _tokenId);\r\n    }\r\n\r\n    function erc721Transfer(\r\n        address _ERC721Address,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) public adminAndOwnerOnly {\r\n        IMintable erc721 = IMintable(_ERC721Address);\r\n        emit AdminActionPerformed(\r\n            msg.sender,\r\n            _ERC721Address,\r\n            functionNames.transfer,\r\n            _ERC721Address,\r\n            _tokenId\r\n        );\r\n        return erc721.transfer(_to, _tokenId);\r\n    }\r\n\r\n    function erc721Burn(address _ERC721Address, uint256 tokenId)\r\n        public\r\n        adminAndOwnerOnly\r\n    {\r\n        IMintable erc721 = IMintable(_ERC721Address);\r\n        emit AdminActionPerformed(\r\n            msg.sender,\r\n            _ERC721Address,\r\n            functionNames.burn,\r\n            _ERC721Address,\r\n            tokenId\r\n        );\r\n        return erc721.burn(tokenId);\r\n    }\r\n\r\n    function erc721Mint(\r\n        address _ERC721Address,\r\n        string memory tokenURI,\r\n        uint256 _royality\r\n    ) public adminAndOwnerOnly {\r\n        IMintable erc721 = IMintable(_ERC721Address);\r\n        emit AdminActionPerformed(\r\n            msg.sender,\r\n            _ERC721Address,\r\n            functionNames.mint,\r\n            _ERC721Address,\r\n            0\r\n        );\r\n        return erc721.mint(tokenURI, _royality);\r\n    }\r\n\r\n    function erc721SafeTransferFrom(\r\n        address _ERC721Address,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public adminAndOwnerOnly {\r\n        IMintable erc721 = IMintable(_ERC721Address);\r\n        emit AdminActionPerformed(\r\n            msg.sender,\r\n            _ERC721Address,\r\n            functionNames.safeTransferFrom,\r\n            _ERC721Address,\r\n            tokenId\r\n        );\r\n        return erc721.safeTransferFrom(from, to, tokenId);\r\n    }\r\n\r\n    function erc721SafeTransferFrom(\r\n        address _ERC721Address,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public adminAndOwnerOnly {\r\n        IMintable erc721 = IMintable(_ERC721Address);\r\n        emit AdminActionPerformed(\r\n            msg.sender,\r\n            _ERC721Address,\r\n            functionNames.safeTransferFrom,\r\n            _ERC721Address,\r\n            tokenId\r\n        );\r\n        return erc721.safeTransferFrom(from, to, tokenId, _data);\r\n    }\r\n\r\n    function erc721TransferFrom(\r\n        address _ERC721Address,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public adminAndOwnerOnly {\r\n        IMintable erc721 = IMintable(_ERC721Address);\r\n        emit AdminActionPerformed(\r\n            msg.sender,\r\n            _ERC721Address,\r\n            functionNames.transferFrom,\r\n            _ERC721Address,\r\n            tokenId\r\n        );\r\n        return erc721.transferFrom(from, to, tokenId);\r\n    }\r\n\r\n    // Broker functions\r\n\r\n    function bid(\r\n        uint256 tokenID,\r\n        address _mintableToken,\r\n        uint256 amount\r\n    ) public payable {\r\n        broker.bid.value(msg.value)(tokenID, _mintableToken, amount);\r\n        emit AdminActionPerformed(\r\n            msg.sender,\r\n            address(broker),\r\n            functionNames.bid,\r\n            _mintableToken,\r\n            tokenID\r\n        );\r\n    }\r\n\r\n    function collect(uint256 tokenID, address _mintableToken) public {\r\n        broker.collect(tokenID, _mintableToken);\r\n        emit AdminActionPerformed(\r\n            msg.sender,\r\n            address(broker),\r\n            functionNames.collect,\r\n            _mintableToken,\r\n            tokenID\r\n        );\r\n    }\r\n\r\n    function buy(uint256 tokenID, address _mintableToken) public payable {\r\n        broker.buy.value(msg.value)(tokenID, _mintableToken);\r\n        emit AdminActionPerformed(\r\n            msg.sender,\r\n            address(broker),\r\n            functionNames.buy,\r\n            _mintableToken,\r\n            tokenID\r\n        );\r\n    }\r\n\r\n    function putOnSale(\r\n        uint256 _tokenID,\r\n        uint256 _startingPrice,\r\n        uint256 _auctionType,\r\n        uint256 _buyPrice,\r\n        uint256 _duration,\r\n        address _mintableToken,\r\n        address _erc20Token\r\n    ) public {\r\n        broker.putOnSale(\r\n            _tokenID,\r\n            _startingPrice,\r\n            _auctionType,\r\n            _buyPrice,\r\n            _duration,\r\n            _mintableToken,\r\n            _erc20Token\r\n        );\r\n        emit AdminActionPerformed(\r\n            msg.sender,\r\n            address(broker),\r\n            functionNames.putOnSale,\r\n            _mintableToken,\r\n            _tokenID\r\n        );\r\n    }\r\n\r\n    function updatePrice(\r\n        uint256 tokenID,\r\n        address _mintableToken,\r\n        uint256 _newPrice,\r\n        address _erc20Token\r\n    ) public {\r\n        broker.updatePrice(tokenID, _mintableToken, _newPrice, _erc20Token);\r\n        emit AdminActionPerformed(\r\n            msg.sender,\r\n            address(broker),\r\n            functionNames.updatePrice,\r\n            _mintableToken,\r\n            tokenID\r\n        );\r\n    }\r\n\r\n    function putSaleOff(uint256 tokenID, address _mintableToken)\r\n        public\r\n    {\r\n        broker.putSaleOff(tokenID, _mintableToken);\r\n        emit AdminActionPerformed(\r\n            msg.sender,\r\n            address(broker),\r\n            functionNames.putSaleOff,\r\n            _mintableToken,\r\n            tokenID\r\n        );\r\n    }\r\n\r\n    \r\n    // ERC20 methods\r\n    function erc20Approve(address _erc20, address spender, uint256 value) public {\r\n        IERC20 erc20 = IERC20(_erc20);\r\n        erc20.approve(spender, value);\r\n        emit AdminActionPerformed(\r\n            msg.sender,\r\n            _erc20,\r\n            functionNames.erc20Approve,\r\n            spender,\r\n            value\r\n        );\r\n    }\r\n\r\n    function erc20DecreaseApproval(address _erc20, address _spender, uint256 _subtractedValue) public {\r\n        IERC20 erc20 = IERC20(_erc20);\r\n        erc20.decreaseApproval(_spender, _subtractedValue);\r\n        emit AdminActionPerformed(\r\n            msg.sender,\r\n            _erc20,\r\n            functionNames.erc20DecreaseAllowance,\r\n            _spender,\r\n            _subtractedValue\r\n        );\r\n    }\r\n    function erc20IncreaseApproval(address _erc20, address spender, uint256 addedValue) public {\r\n        IERC20 erc20 = IERC20(_erc20);\r\n        erc20.increaseApproval(spender, addedValue);\r\n        emit AdminActionPerformed(\r\n            msg.sender,\r\n            _erc20,\r\n            functionNames.erc20IncreaseApproval,\r\n            spender,\r\n            addedValue\r\n        );\r\n    }\r\n    function erc20Transfer(address _erc20, address to, uint256 value) public {\r\n        IERC20 erc20 = IERC20(_erc20);\r\n        erc20.transfer(to, value);\r\n        emit AdminActionPerformed(\r\n            msg.sender,\r\n            _erc20,\r\n            functionNames.erc20Transfer,\r\n            to,\r\n            value\r\n        );\r\n    }\r\n    function erc20TransferFrom(address _erc20, \r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) public {\r\n        IERC20 erc20 = IERC20(_erc20);\r\n        erc20.transferFrom(from, to, value);\r\n        emit AdminActionPerformed(\r\n            msg.sender,\r\n            _erc20,\r\n            functionNames.erc20TransferFrom,\r\n            to,\r\n            value\r\n        );\r\n    }\r\n    function erc20IncreaseAllowance(address _erc20, address spender, uint256 addedValue) public {\r\n        IERC20 erc20 = IERC20(_erc20);\r\n        erc20.increaseAllowance(spender, addedValue);\r\n        emit AdminActionPerformed(\r\n            msg.sender,\r\n            _erc20,\r\n            functionNames.erc20IncreaseAllowance,\r\n            spender,\r\n            addedValue\r\n        );\r\n    }\r\n    function erc20DecreaseAllowance(address _erc20, address spender, uint256 subtractedValue) public {\r\n        IERC20 erc20 = IERC20(_erc20);\r\n        erc20.decreaseAllowance(spender, subtractedValue);\r\n        emit AdminActionPerformed(\r\n            msg.sender,\r\n            _erc20,\r\n            functionNames.erc20DecreaseAllowance,\r\n            spender,\r\n            subtractedValue\r\n        );\r\n    }\r\n    \r\n    // Fallback function\r\n    function() external payable { }\r\n    \r\n    \r\n    function withdraw() public onlyOwner {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    function withdrawERC20(address _erc20Token) public onlyOwner {\r\n        IERC20 erc20Token = IERC20(_erc20Token);\r\n        erc20Token.transfer(msg.sender, erc20Token.balanceOf(address(this)));\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_broker\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"functionName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AdminActionPerformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"NFTBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"adminExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_mintableToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burnNFT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_mintableToken\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_mintableToken\",\"type\":\"address\"}],\"name\":\"collect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"erc20Approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"erc20DecreaseAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"erc20DecreaseApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"erc20IncreaseAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"erc20IncreaseApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"erc20Transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"erc20TransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ERC721Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"erc721Approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ERC721Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"erc721Burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ERC721Address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_royality\",\"type\":\"uint256\"}],\"name\":\"erc721Mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ERC721Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"erc721SafeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ERC721Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"erc721SafeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ERC721Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"erc721Transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ERC721Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"erc721TransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdmins\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_mintableToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"}],\"name\":\"putOnSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_mintableToken\",\"type\":\"address\"}],\"name\":\"putSaleOff\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_mintableToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"}],\"name\":\"updatePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AdminManager","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003c4425827c531ae37970eb4349091f9a8145f251","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://275dba2e4c442712bfc8a7a7cf8e595965053ba55d36b4ca1678153104b09964"}]}