{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FrontLayerDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/ILayerDescriptor.sol\\\";\\nimport \\\"./interfaces/IOGCards.sol\\\";\\n\\ncontract FrontLayerDescriptor is ILayerDescriptor {\\n    constructor() {}\\n\\n    function svgLayer(address ogCards, uint256 tokenId, string memory font, string memory borderColor, IOGCards.Card memory card)\\n        external\\n        override\\n        view\\n        returns (string memory)\\n    {\\n        (, string[] memory names) = IOGCards(ogCards).ogHolders(tokenId);\\n        address owner = IOGCards(ogCards).ownerOf(tokenId);\\n        string memory ownerName = IOGCards(ogCards).holderName(owner);\\n        string memory backgroundColor = _colorWithTransparencyLevelString(\\\"#212429\\\", card.transparencyLevel);\\n        return string(abi.encodePacked(\\n            '<g mask=\\\"url(#mask)\\\">',\\n                '<g>',\\n                    '<rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"',backgroundColor,'\\\"></rect>',\\n                    '<g class=\\\"mask-path\\\">',\\n                        svgMask(card.maskType, borderColor, false, false),\\n                    '</g>',\\n                    '<text text-rendering=\\\"optimizeSpeed\\\">',\\n                        _svgTextPath(names, ownerName, font, borderColor),\\n                    '</text>',\\n                    '<use href=\\\"#token-id\\\" stroke=\\\"',borderColor,'\\\" stroke-width=\\\"2\\\" />',\\n                '</g>',\\n            '</g>'\\n        ));\\n    }\\n\\n    function svgMask(uint8 maskType, string memory borderColor, bool isDef, bool isMask)\\n        public\\n        override\\n        pure\\n        returns (string memory)\\n    {\\n        return (maskType == 0 ? _ethMask(borderColor, isDef, isMask) :\\n                (maskType == 1 ? _punkMask(borderColor, isDef, isMask) : \\n                    (maskType == 2 ? _acbMask(borderColor, isDef, isMask) :\\n                        (maskType == 3 ? _purrMask(borderColor, isDef, isMask) : ''))));\\n    }\\n\\n    function _colorWithTransparencyLevelString(string memory color, uint8 transparencyLevel)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string memory transparencyString = (\\n            (transparencyLevel < 96 ? 'F2' :\\n                (transparencyLevel < 97 ? 'F5' :\\n                    (transparencyLevel < 98 ? 'F7' :\\n                        (transparencyLevel < 99 ? 'FA' : 'FC')))));\\n                    \\n        return string(abi.encodePacked(\\n            color,\\n            transparencyString\\n        ));\\n    }\\n\\n    function _svgTextPath(string[] memory names, string memory ownerName, string memory font, string memory borderColor)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string memory ogNamesText = _ogNamesText(names, borderColor);\\n        return string(abi.encodePacked(\\n            '<textPath startOffset=\\\"-100%\\\" fill=\\\"white\\\" font-family=\\\"',font,'\\\" font-size=\\\"12px\\\" href=\\\"#text-path-border\\\">',\\n                ogNamesText,\\n                ' Owner [ <tspan fill=\\\"',borderColor,'\\\">',ownerName,'</tspan> ] ',\\n            '<animate additive=\\\"sum\\\" attributeName=\\\"startOffset\\\" from=\\\"0%\\\" to=\\\"100%\\\" begin=\\\"0s\\\" dur=\\\"15s\\\" repeatCount=\\\"indefinite\\\"></animate></textPath>',\\n            '<textPath startOffset=\\\"0%\\\" fill=\\\"white\\\" font-family=\\\"',font,'\\\" font-size=\\\"12px\\\" href=\\\"#text-path-border\\\">',\\n                ogNamesText,\\n                ' Owner [ <tspan fill=\\\"',borderColor,'\\\">',ownerName,'</tspan> ] ',\\n            '<animate additive=\\\"sum\\\" attributeName=\\\"startOffset\\\" from=\\\"0%\\\" to=\\\"100%\\\" begin=\\\"0s\\\" dur=\\\"15s\\\" repeatCount=\\\"indefinite\\\"></animate></textPath>'\\n        ));\\n    }\\n\\n    function _ogNamesText(string[] memory names, string memory ogColor)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string memory ogsList;\\n        uint256 totalLength;\\n\\n        for (uint256 i = 0; i < names.length; i++) {\\n            uint256 index = names.length-1-i;\\n            string memory name = names[index];\\n            totalLength += _utfStringLength(name) + 2;\\n            if (totalLength < 100) {\\n                ogsList = string(abi.encodePacked(\\n                    ' <tspan fill=\\\"',ogColor,'\\\">', name, '</tspan>',\\n                    i > 0 ? ',' : '',\\n                    ogsList\\n                ));\\n            } else {\\n                break;\\n            }\\n        }\\n        return string(abi.encodePacked(\\n            ' OGs [ ',\\n            ogsList,\\n            ' ]'\\n        ));\\n    }\\n\\n    function _utfStringLength(string memory str) internal pure\\n    returns (uint length)\\n    {\\n        uint i=0;\\n        bytes memory string_rep = bytes(str);\\n\\n        while (i<string_rep.length)\\n        {\\n            if (uint8(string_rep[i]>>7)==0)\\n                i+=1;\\n            else if (uint8(string_rep[i]>>5)==0x6)\\n                i+=2;\\n            else if (uint8(string_rep[i]>>4)==0xE)\\n                i+=3;\\n            else if (uint8(string_rep[i]>>3)==0x1E)\\n                i+=4;\\n            else\\n                //For safety\\n                i+=1;\\n\\n            length++;\\n        }\\n    }\\n\\n    function _ethMask(string memory borderColor, bool isDef, bool isMask)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        if (isDef) {\\n            if (isMask) {\\n                return string(abi.encodePacked(\\n                    '<use href=\\\"#eth-mask-top\\\" />',\\n                    '<use href=\\\"#eth-mask-bottom\\\" />'\\n                ));\\n            }\\n            return string(abi.encodePacked(\\n                '<path id=\\\"eth-mask-top\\\" d=\\\"M150 50 l49.875 92.85714285714286 l-49.875 28.571428571428573 l-49.875 -28.571428571428573 z\\\" fill=\\\"#000000\\\"></path>',\\n                '<path id=\\\"eth-mask-bottom\\\" d=\\\"M150 250 l49.875 -92.85714285714286 l-49.875 28.571428571428573 l-49.875 -28.571428571428573 z\\\" fill=\\\"#000000\\\"></path>'\\n            ));\\n        }\\n        return string(abi.encodePacked(\\n            '<use href=\\\"#eth-mask-top\\\" stroke=\\\"',borderColor,'\\\" stroke-width=\\\"3\\\" />',\\n            '<use href=\\\"#eth-mask-bottom\\\" stroke=\\\"',borderColor,'\\\" stroke-width=\\\"3\\\" />'\\n        ));\\n    }\\n\\n    function _punkMask(string memory borderColor, bool isDef, bool isMask)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        if (isDef) {\\n            if (isMask) {\\n                return '<use href=\\\"#punk-mask\\\" />';\\n            }\\n            return '<path id=\\\"punk-mask\\\" d=\\\"M116.66 50 h77.77 v11.11 h11.11 v144.44 h-11.11 v11.11 h-55.55 v33.33 h-33.33 v-111.11 h-11.11 v-22.22 h11.11 v-55.55 h11.11 z\\\" fill=\\\"#000000\\\"></path>';\\n        }\\n        return string(abi.encodePacked(\\n            '<use href=\\\"#punk-mask\\\" stroke=\\\"',borderColor,'\\\" stroke-width=\\\"3\\\" />'\\n        ));\\n    }\\n\\n    function _acbMask(string memory borderColor, bool isDef, bool isMask)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        if (isDef) {\\n            if (isMask) {\\n                return '<use href=\\\"#acb-mask\\\" />';\\n            }\\n            return '<path id=\\\"acb-mask\\\" d=\\\"M90 75h15 v15 h15 v15 h60 v-15 h15 v-15 h15 v75 h15 v15 h-15 v15 h15 v15 h-15 v15 h-15 v15 h-90 v-15 h-15 v-15 h-15 v-15 h15 v-15 h-15 v-15 h15 z\\\" fill=\\\"#000000\\\"></path>';\\n        }\\n        return string(abi.encodePacked(\\n            '<use href=\\\"#acb-mask\\\" stroke=\\\"',borderColor,'\\\" stroke-width=\\\"3\\\" />'\\n        ));\\n    }\\n\\n    function _purrMask(string memory borderColor, bool isDef, bool isMask)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        if (isDef) {\\n            if (isMask) {\\n                return '<use href=\\\"#purr-mask\\\" />';\\n            }\\n            return '<path id=\\\"purr-mask\\\" d=\\\"M105 60 a200 110 0 0 1 30 45 h30 a200 110 0 0 1 30 -45 a150 110 0 0 1 30 45 v60 a100 100 0 0 1 -45 60 h-60 a100 100 0 0 1 -45 -60 v-60 a150 110 0 0 1 30 -45 z\\\" fill=\\\"#000000\\\"></path>';\\n        }\\n        return string(abi.encodePacked(\\n            '<use href=\\\"#purr-mask\\\" stroke=\\\"',borderColor,'\\\" stroke-width=\\\"3\\\" />'\\n        ));\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/ILayerDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"./IOGCards.sol\\\";\\n\\ninterface ILayerDescriptor {\\n    struct Layer {\\n        bool isGiveaway;\\n        uint8 maskType;\\n        uint8 transparencyLevel;\\n        uint256 tokenId;\\n        uint256 dna;\\n        uint256 mintTokenId;\\n        string font;\\n        string borderColor;\\n        address ogCards;\\n    }\\n    function svgLayer(address ogCards, uint256 tokenId, string memory font, string memory borderColor, IOGCards.Card memory card)\\n        external\\n        view\\n        returns (string memory);\\n\\n    function svgMask(uint8 maskType, string memory borderColor, bool isDef, bool isMask)\\n        external\\n        pure\\n        returns (string memory);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IOGCards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IOGCards {\\n    struct Card {\\n        bool isGiveaway;\\n        uint8 borderType;\\n        uint8 transparencyLevel;\\n        uint8 maskType;\\n        uint256 dna;\\n        uint256 mintTokenId;\\n        address[] holders;\\n    }\\n\\n    function cardDetails(uint256 tokenId) external view returns (Card memory);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    function isOG(address _og) external view returns (bool);\\n\\n    function holderName(address _holder) external view returns (string memory);\\n\\n    function ogHolders(uint256 tokenId)\\n        external\\n        view\\n        returns (address[] memory, string[] memory);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": false\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ogCards\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"font\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"borderColor\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isGiveaway\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"borderType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"transparencyLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maskType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dna\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"}],\"internalType\":\"struct IOGCards.Card\",\"name\":\"card\",\"type\":\"tuple\"}],\"name\":\"svgLayer\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"maskType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"borderColor\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isDef\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMask\",\"type\":\"bool\"}],\"name\":\"svgMask\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"FrontLayerDescriptor","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}