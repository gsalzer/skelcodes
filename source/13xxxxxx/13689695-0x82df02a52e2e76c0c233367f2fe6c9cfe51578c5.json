{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/BasicBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n// solhint-disable-next-line\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport {IGatewayRegistry} from \\\"./GatewayRegistry/interfaces/IGatewayRegistry.sol\\\";\\nimport {IMintGateway} from \\\"./Gateways/interfaces/IMintGateway.sol\\\";\\nimport {ILockGateway} from \\\"./Gateways/interfaces/ILockGateway.sol\\\";\\n\\ncontract BasicBridge is Context {\\n    using SafeERC20 for IERC20;\\n\\n    string public constant NAME = \\\"BasicBridge\\\";\\n\\n    IGatewayRegistry public registry;\\n\\n    constructor(IGatewayRegistry _registry) {\\n        registry = _registry;\\n    }\\n\\n    function mint(\\n        // Payload\\n        string calldata symbol,\\n        address recipient,\\n        // Required\\n        uint256 amount,\\n        bytes32 nHash,\\n        bytes calldata sig\\n    ) external {\\n        IERC20 renAsset = registry.getRenAssetBySymbol(symbol);\\n        IMintGateway mintGateway = registry.getMintGatewayBySymbol(symbol);\\n\\n        if (address(renAsset) == address(0x0)) {\\n            revert(string(abi.encodePacked(\\\"BasicBridge: unknown asset \\\", symbol)));\\n        }\\n        if (address(mintGateway) != address(0x0)) {\\n            string(abi.encodePacked(\\\"BasicBridge: unknown asset \\\", symbol));\\n        }\\n\\n        bytes32 payloadHash = keccak256(abi.encode(symbol, recipient));\\n        uint256 amountMinted = mintGateway.mint(payloadHash, amount, nHash, sig);\\n        renAsset.safeTransfer(recipient, amountMinted);\\n    }\\n\\n    function burn(\\n        string calldata symbol,\\n        string calldata recipient,\\n        uint256 amount\\n    ) external {\\n        IERC20 renAsset = registry.getRenAssetBySymbol(symbol);\\n        IMintGateway mintGateway = registry.getMintGatewayBySymbol(symbol);\\n\\n        if (address(renAsset) == address(0x0)) {\\n            revert(string(abi.encodePacked(\\\"BasicBridge: unknown asset \\\", symbol)));\\n        }\\n        if (address(mintGateway) != address(0x0)) {\\n            string(abi.encodePacked(\\\"BasicBridge: unknown asset \\\", symbol));\\n        }\\n\\n        renAsset.safeTransferFrom(_msgSender(), address(this), amount);\\n        registry.getMintGatewayBySymbol(symbol).burn(recipient, amount);\\n    }\\n\\n    function lock(\\n        string calldata symbol,\\n        string calldata recipientAddress,\\n        string calldata recipientChain,\\n        bytes calldata recipientPayload,\\n        uint256 amount\\n    ) external {\\n        IERC20 lockAsset = registry.getLockAssetBySymbol(symbol);\\n        ILockGateway lockGateway = registry.getLockGatewayBySymbol(symbol);\\n\\n        if (address(lockAsset) == address(0x0)) {\\n            revert(string(abi.encodePacked(\\\"BasicBridge: unknown asset \\\", symbol)));\\n        }\\n        if (address(lockGateway) != address(0x0)) {\\n            string(abi.encodePacked(\\\"BasicBridge: unknown asset \\\", symbol));\\n        }\\n\\n        lockAsset.safeTransferFrom(_msgSender(), address(this), amount);\\n        lockAsset.safeIncreaseAllowance(address(lockGateway), amount);\\n        lockGateway.lock(recipientAddress, recipientChain, recipientPayload, amount);\\n    }\\n\\n    function release(\\n        // Payload\\n        string calldata symbol,\\n        address recipient,\\n        // Required\\n        uint256 amount,\\n        bytes32 nHash,\\n        bytes calldata sig\\n    ) external {\\n        IERC20 lockAsset = registry.getLockAssetBySymbol(symbol);\\n        ILockGateway lockGateway = registry.getLockGatewayBySymbol(symbol);\\n\\n        if (address(lockAsset) == address(0x0)) {\\n            revert(string(abi.encodePacked(\\\"BasicBridge: unknown asset \\\", symbol)));\\n        }\\n        if (address(lockGateway) != address(0x0)) {\\n            string(abi.encodePacked(\\\"BasicBridge: unknown asset \\\", symbol));\\n        }\\n\\n        bytes32 payloadHash = keccak256(abi.encode(symbol, recipient));\\n        uint256 amountReleased = lockGateway.release(payloadHash, amount, nHash, sig);\\n        lockAsset.safeTransfer(recipient, amountReleased);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/GatewayRegistry/interfaces/IGatewayRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n// solhint-disable-next-line\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IMintGateway} from \\\"../../Gateways/interfaces/IMintGateway.sol\\\";\\nimport {ILockGateway} from \\\"../../Gateways/interfaces/ILockGateway.sol\\\";\\n\\nabstract contract IGatewayRegistry {\\n    function signatureVerifier() external view virtual returns (address);\\n\\n    function chainId() external view virtual returns (uint256);\\n\\n    function chainName() external view virtual returns (string memory);\\n\\n    function getMintGatewaySymbols(uint256 from, uint256 count) external view virtual returns (string[] memory);\\n\\n    function getLockGatewaySymbols(uint256 from, uint256 count) external view virtual returns (string[] memory);\\n\\n    function getMintGatewayByToken(address token) external view virtual returns (IMintGateway);\\n\\n    function getMintGatewayBySymbol(string calldata tokenSymbol) external view virtual returns (IMintGateway);\\n\\n    function getRenAssetBySymbol(string calldata tokenSymbol) external view virtual returns (IERC20);\\n\\n    function getLockGatewayByToken(address token) external view virtual returns (ILockGateway);\\n\\n    function getLockGatewayBySymbol(string calldata tokenSymbol) external view virtual returns (ILockGateway);\\n\\n    function getLockAssetBySymbol(string calldata tokenSymbol) external view virtual returns (IERC20);\\n}\\n\"\r\n    },\r\n    \"src/Gateways/interfaces/ILockGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n// solhint-disable-next-line\\npragma solidity ^0.8.0;\\n\\nabstract contract ILockGateway {\\n    event LogRelease(address indexed recipient, uint256 amount, bytes32 indexed sigHash, bytes32 indexed nHash);\\n    event LogLockToChain(\\n        string recipientAddress,\\n        string recipientChain,\\n        bytes recipientPayload,\\n        uint256 amount,\\n        uint256 indexed lockNonce,\\n        // Indexed versions of previous parameters.\\n        string indexed recipientAddressIndexed,\\n        string indexed recipientChainIndexed\\n    );\\n\\n    function lock(\\n        string calldata recipientAddress,\\n        string calldata recipientChain,\\n        bytes calldata recipientPayload,\\n        uint256 amount\\n    ) external virtual returns (uint256);\\n\\n    function release(\\n        bytes32 pHash,\\n        uint256 amount,\\n        bytes32 nHash,\\n        bytes calldata sig\\n    ) external virtual returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/Gateways/interfaces/IMintGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n// solhint-disable-next-line\\npragma solidity ^0.8.0;\\n\\nabstract contract IMintGateway {\\n    /// @dev For backwards compatiblity reasons, the sigHash is cast to a\\n    /// uint256.\\n    event LogMint(address indexed to, uint256 amount, uint256 indexed sigHash, bytes32 indexed nHash);\\n\\n    /// @dev Once `LogBurnToChain` is enabled on mainnet, LogBurn may be\\n    /// replaced by LogBurnToChain with empty payload and chain fields.\\n    /// @dev For backwards compatibility, `to` is bytes instead of a string.\\n    event LogBurn(\\n        bytes to,\\n        uint256 amount,\\n        uint256 indexed burnNonce,\\n        // Indexed versions of previous parameters.\\n        bytes indexed indexedTo\\n    );\\n    event LogBurnToChain(\\n        string recipientAddress,\\n        string recipientChain,\\n        bytes recipientPayload,\\n        uint256 amount,\\n        uint256 indexed burnNonce,\\n        // Indexed versions of previous parameters.\\n        string indexed recipientAddressIndexed,\\n        string indexed recipientChainIndexed\\n    );\\n\\n    function mint(\\n        bytes32 pHash,\\n        uint256 amount,\\n        bytes32 nHash,\\n        bytes calldata sig\\n    ) external virtual returns (uint256);\\n\\n    function burnWithPayload(\\n        string calldata recipientAddress,\\n        string calldata recipientChain,\\n        bytes calldata recipientPayload,\\n        uint256 amount\\n    ) external virtual returns (uint256);\\n\\n    function burn(string calldata recipient, uint256 amount) external virtual returns (uint256);\\n\\n    function burn(bytes calldata recipient, uint256 amount) external virtual returns (uint256);\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IGatewayRegistry\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recipient\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recipientAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recipientChain\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"recipientPayload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IGatewayRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BasicBridge","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f36666c230fa12333579b9bd6196cb634d6bc506","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}