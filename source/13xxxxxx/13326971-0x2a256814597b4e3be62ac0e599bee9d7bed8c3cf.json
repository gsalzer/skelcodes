{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CryptoPunksAssets.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts@v4.3/access/Ownable.sol\\\";\\n\\ncontract CryptoPunksAssets is Ownable {\\n\\n    enum Type { Kind, Face, Ear, Neck, Beard, Hair, Eyes, Mouth, Smoke, Nose }\\n    \\n    bytes private palette;\\n    mapping(uint64 => uint32) private composites;\\n\\n    mapping(uint8 => bytes) private assets;\\n    mapping(uint8 => string) private assetNames;\\n    mapping(uint8 => Type) private assetTypes;\\n    mapping(string => uint8) private maleAssets;\\n    mapping(string => uint8) private femaleAssets;\\n    \\n    function destroy() external onlyOwner {\\n        selfdestruct(payable(owner()));\\n    }\\n    \\n    function composite(bytes1 index, bytes1 yr, bytes1 yg, bytes1 yb, bytes1 ya) external view returns (bytes4 rgba) {\\n        uint x = uint(uint8(index)) * 4;\\n        uint8 xAlpha = uint8(palette[x + 3]);\\n        if (xAlpha == 0xFF) {\\n            rgba = bytes4(\\n                    (uint32(uint8(palette[x])) << 24) |\\n                    (uint32(uint8(palette[x+1])) << 16) |\\n                    (uint32(uint8(palette[x+2])) << 8) |\\n                    uint32(xAlpha)\\n                );\\n        } else {\\n            uint64 key =\\n                (uint64(uint8(palette[x])) << 56) |\\n                (uint64(uint8(palette[x + 1])) << 48) |\\n                (uint64(uint8(palette[x + 2])) << 40) |\\n                (uint64(xAlpha) << 32) |\\n                (uint64(uint8(yr)) << 24) |\\n                (uint64(uint8(yg)) << 16) |\\n                (uint64(uint8(yb)) << 8) |\\n                (uint64(uint8(ya)));\\n            rgba = bytes4(composites[key]);\\n        }\\n    }\\n    \\n    function getAsset(uint8 index) external view returns (bytes memory encoding) {\\n        encoding = assets[index];\\n    }\\n    \\n    function getAssetName(uint8 index) external view returns (string memory text) {\\n        text = assetNames[index];        \\n    }\\n\\n    function getAssetType(uint8 index) external view returns (uint8) {\\n        return uint8(assetTypes[index]);\\n    }\\n\\n    function getAssetIndex(string calldata text, bool isMale) external view returns (uint8) {\\n        return isMale ? maleAssets[text] : femaleAssets[text];        \\n    }\\n\\n    function getMappedAsset(uint8 index, bool toMale) external view returns (uint8) {\\n        return toMale ? maleAssets[assetNames[index]] : femaleAssets[assetNames[index]];\\n    }\\n    \\n    function setPalette(bytes memory encoding) external onlyOwner {\\n        palette = encoding;\\n    }\\n\\n    function addComposites(uint64 key1, uint32 value1, uint64 key2, uint32 value2, uint64 key3, uint32 value3, uint64 key4, uint32 value4) external onlyOwner {\\n        composites[key1] = value1;\\n        composites[key2] = value2;\\n        composites[key3] = value3;\\n        composites[key4] = value4;\\n    }\\n    \\n    function addAsset(uint8 index, Type assetType, bool isMale, string memory name, bytes memory encoding) external onlyOwner {\\n        assets[index] = encoding;\\n        assetNames[index] = name;\\n        assetTypes[index] = assetType;\\n        if (isMale) {\\n            maleAssets[name] = index;\\n        } else {\\n            femaleAssets[name] = index;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@v4.3/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@v4.3/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"enum CryptoPunksAssets.Type\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isMale\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"encoding\",\"type\":\"bytes\"}],\"name\":\"addAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"key1\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"value1\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"key2\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"value2\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"key3\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"value3\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"key4\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"value4\",\"type\":\"uint32\"}],\"name\":\"addComposites\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes1\",\"name\":\"index\",\"type\":\"bytes1\"},{\"internalType\":\"bytes1\",\"name\":\"yr\",\"type\":\"bytes1\"},{\"internalType\":\"bytes1\",\"name\":\"yg\",\"type\":\"bytes1\"},{\"internalType\":\"bytes1\",\"name\":\"yb\",\"type\":\"bytes1\"},{\"internalType\":\"bytes1\",\"name\":\"ya\",\"type\":\"bytes1\"}],\"name\":\"composite\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"rgba\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getAsset\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"encoding\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isMale\",\"type\":\"bool\"}],\"name\":\"getAssetIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getAssetName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getAssetType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"toMale\",\"type\":\"bool\"}],\"name\":\"getMappedAsset\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encoding\",\"type\":\"bytes\"}],\"name\":\"setPalette\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CryptoPunksAssets","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}