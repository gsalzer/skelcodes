{"status":"1","message":"OK","result":[{"SourceCode":"interface AggregatorInterface {\r\n  function latestAnswer() external view returns (int256);\r\n  function latestTimestamp() external view returns (uint256);\r\n  function latestRound() external view returns (uint256);\r\n  function getAnswer(uint256 roundId) external view returns (int256);\r\n  function getTimestamp(uint256 roundId) external view returns (uint256);\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\r\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\r\n}\r\n\r\ninterface ETHFeed {\r\n    function priceForEtherInUsdWei() external view returns (uint256);\r\n}\r\n\r\ncontract ChainlinkETHFeed is ETHFeed {\r\n    address public aggregator;\r\n\r\n    constructor(address _aggregator) public {\r\n        aggregator = _aggregator;\r\n    }\r\n\r\n    function priceForEtherInUsdWei() external view returns (uint256) {\r\n        AggregatorInterface agg = AggregatorInterface(aggregator);\r\n        uint256 currentPrice = uint256(agg.latestAnswer());\r\n        uint256 decimals = agg.decimals();\r\n\r\n        if (decimals == 18) {\r\n            return currentPrice;\r\n        } else if (decimals < 18) {\r\n            //Convert price to wei\r\n            uint256 factor = 10 ** (18 - decimals);\r\n            uint256 convertedPrice = currentPrice * factor;\r\n\r\n            return convertedPrice;\r\n        } else {\r\n            revert(\"Feed is using unsupported decimals\");\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"aggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceForEtherInUsdWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ChainlinkETHFeed","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005f4eC3Df9cbd43714FE2740f5E3616155c5b8419","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"bzzr://cd7541c478b011722bb052a2f003bde5c7e82df24711e120b969c6b0aed8015d"}]}