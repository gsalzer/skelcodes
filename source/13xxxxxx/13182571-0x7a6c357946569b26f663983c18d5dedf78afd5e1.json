{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.5;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract PasvTimelock {\r\n    address admin;\r\n    uint256 public totalAllocated = 0;\r\n\r\n    struct Founder {\r\n        uint256 amountWithdrawn;\r\n        uint256 totalAmountLocked;\r\n    }\r\n\r\n    mapping(address => Founder) public founders;\r\n\r\n    uint256 public immutable start;\r\n    uint256 public immutable totalAmountTimelocked = 50000000000000;\r\n    uint256 public totalAmountWithdrawn = 0;\r\n\r\n    mapping(uint256 => uint256) private percentageAvailableByDays;\r\n\r\n    constructor() {\r\n        start = block.timestamp;\r\n        admin = msg.sender;\r\n        _setWithdrawalSchedule();\r\n    }\r\n\r\n    function _setWithdrawalSchedule() internal {\r\n        uint256 currentPercentage = 0;\r\n        uint256 startDay = 7;\r\n\r\n        while (currentPercentage <= 100) {\r\n            percentageAvailableByDays[startDay] = currentPercentage += 10;\r\n            startDay += 7;\r\n        }\r\n    }\r\n\r\n    function addFounder(\r\n        address _founderAddress,\r\n        uint256 _amountLocked\r\n    ) external {\r\n        require(msg.sender == admin, \"Caller must be admin\");\r\n\r\n        require(\r\n            founders[_founderAddress].totalAmountLocked == 0,\r\n            \"Address has already been added\"\r\n        );\r\n\r\n        require(_founderAddress != address(0), \"Cannot add address(0)\");\r\n\r\n        require(\r\n            (totalAllocated + _amountLocked) <= totalAmountTimelocked,\r\n            \"Suggested allocation exceeds amount in timelock\"\r\n        );\r\n\r\n        founders[_founderAddress].totalAmountLocked = _amountLocked;\r\n        founders[_founderAddress].amountWithdrawn = 0;\r\n\r\n        totalAllocated += _amountLocked;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function withdraw(address token) external {\r\n        require(\r\n            founders[msg.sender].totalAmountLocked > 0,\r\n            \"only founder accessible\"\r\n        );\r\n\r\n        require(token != address(0));\r\n\r\n        require((block.timestamp >= start + 7 days),\r\n            \"should not be able to withdraw yet\"\r\n        );\r\n\r\n        address owner = msg.sender;\r\n        uint256 currentElapsedTime = block.timestamp - start;\r\n        uint256 currentElapsedDays = (currentElapsedTime / 86400);\r\n\r\n        uint256 standardWithdrawalDay =\r\n                (currentElapsedDays - (7)) -\r\n                ((currentElapsedDays - (7)) % 7) +\r\n                (7);\r\n\r\n        uint256 percentageAvailableToOwner = percentageAvailableByDays[standardWithdrawalDay];\r\n\r\n        uint256 amountAvailableToOwner = ((percentageAvailableToOwner) *\r\n            founders[msg.sender].totalAmountLocked) / 100;\r\n\r\n        uint256 amountAvailableForWithdrawal = amountAvailableToOwner -\r\n            founders[msg.sender].amountWithdrawn;\r\n\r\n        require(\r\n            amountAvailableForWithdrawal > 0,\r\n            \"Nothing available for withdrawal\"\r\n        );\r\n\r\n        require(\r\n            (amountAvailableForWithdrawal + totalAmountWithdrawn) <\r\n                totalAmountTimelocked,\r\n            \"Claim more than amount designated for withdrawal\"\r\n        );\r\n\r\n        IERC20(token).transfer(owner, amountAvailableForWithdrawal);\r\n        totalAmountWithdrawn += amountAvailableForWithdrawal;\r\n        founders[owner].amountWithdrawn += amountAvailableForWithdrawal;\r\n\r\n    }\r\n\r\n    // Functions for testing\r\n    function checkFounderAllocation(address _founder)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return founders[_founder].totalAmountLocked;\r\n    }\r\n\r\n    function checkAvailability(uint256 _daysElapsed)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n            uint256 standardWithdrawalDay = (_daysElapsed - (7)) -\r\n                ((_daysElapsed - (7)) % 7) +\r\n                (7);\r\n            return percentageAvailableByDays[standardWithdrawalDay];\r\n    }\r\n\r\n    function checkAmountAvailable(uint256 _percentAvailable)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            (_percentAvailable * founders[msg.sender].totalAmountLocked) / 100;\r\n    }\r\n\r\n    function checkAmountWithdrawn() external view returns (uint256) {\r\n        return founders[msg.sender].amountWithdrawn;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_founderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountLocked\",\"type\":\"uint256\"}],\"name\":\"addFounder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentAvailable\",\"type\":\"uint256\"}],\"name\":\"checkAmountAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkAmountWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_daysElapsed\",\"type\":\"uint256\"}],\"name\":\"checkAvailability\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_founder\",\"type\":\"address\"}],\"name\":\"checkFounderAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"founders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountLocked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmountTimelocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmountWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PasvTimelock","CompilerVersion":"v0.8.5+commit.a4f2e591","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://73e0ec08c769e79d9e517cb21e5fa6ff80da770fed22b2b448ee0c6f56fbb4be"}]}