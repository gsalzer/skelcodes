{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/vault-managers/parameters/VaultManagerBorrowFeeParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2021 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity 0.7.6;\\n\\nimport \\\"../../VaultParameters.sol\\\";\\nimport \\\"../../interfaces/vault-managers/parameters/IVaultManagerBorrowFeeParameters.sol\\\";\\nimport \\\"../../helpers/SafeMath.sol\\\";\\n\\n\\n/**\\n * @title VaultManagerBorrowFeeParameters\\n **/\\ncontract VaultManagerBorrowFeeParameters is Auth, IVaultManagerBorrowFeeParameters {\\n    using SafeMath for uint;\\n\\n    uint public constant override BASIS_POINTS_IN_1 = 1e4;\\n\\n    struct AssetBorrowFeeParams {\\n        bool enabled; // is custom fee for asset enabled\\n        uint16 feeBasisPoints; // fee basis points, 1 basis point = 0.0001\\n    }\\n\\n    // map token to borrow fee\\n    mapping(address => AssetBorrowFeeParams) public assetBorrowFee;\\n    uint16 public baseBorrowFeeBasisPoints;\\n\\n    address public override feeReceiver;\\n\\n    event AssetBorrowFeeParamsEnabled(address asset, uint16 feeBasisPoints);\\n    event AssetBorrowFeeParamsDisabled(address asset);\\n\\n    modifier nonZeroAddress(address addr) {\\n        require(addr != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\n        _;\\n    }\\n\\n    modifier correctFee(uint16 fee) {\\n        require(fee < BASIS_POINTS_IN_1, \\\"Unit Protocol: INCORRECT_FEE_VALUE\\\");\\n        _;\\n    }\\n\\n    constructor(address _vaultParameters, uint16 _baseBorrowFeeBasisPoints, address _feeReceiver)\\n        Auth(_vaultParameters)\\n        nonZeroAddress(_feeReceiver)\\n        correctFee(_baseBorrowFeeBasisPoints)\\n    {\\n        baseBorrowFeeBasisPoints = _baseBorrowFeeBasisPoints;\\n        feeReceiver = _feeReceiver;\\n    }\\n\\n    /// @inheritdoc IVaultManagerBorrowFeeParameters\\n    function setFeeReceiver(address newFeeReceiver) external override onlyManager nonZeroAddress(newFeeReceiver) {\\n        feeReceiver = newFeeReceiver;\\n    }\\n\\n    /// @inheritdoc IVaultManagerBorrowFeeParameters\\n    function setBaseBorrowFee(uint16 newBaseBorrowFeeBasisPoints) external override onlyManager correctFee(newBaseBorrowFeeBasisPoints) {\\n        baseBorrowFeeBasisPoints = newBaseBorrowFeeBasisPoints;\\n    }\\n\\n    /// @inheritdoc IVaultManagerBorrowFeeParameters\\n    function setAssetBorrowFee(address asset, bool newEnabled, uint16 newFeeBasisPoints) external override onlyManager correctFee(newFeeBasisPoints) {\\n        assetBorrowFee[asset].enabled = newEnabled;\\n        assetBorrowFee[asset].feeBasisPoints = newFeeBasisPoints;\\n\\n        if (newEnabled) {\\n            emit AssetBorrowFeeParamsEnabled(asset, newFeeBasisPoints);\\n        } else {\\n            emit AssetBorrowFeeParamsDisabled(asset);\\n        }\\n    }\\n\\n    /// @inheritdoc IVaultManagerBorrowFeeParameters\\n    function getBorrowFee(address asset) public override view returns (uint16 feeBasisPoints) {\\n        if (assetBorrowFee[asset].enabled) {\\n            return assetBorrowFee[asset].feeBasisPoints;\\n        }\\n\\n        return baseBorrowFeeBasisPoints;\\n    }\\n\\n    /// @inheritdoc IVaultManagerBorrowFeeParameters\\n    function calcBorrowFeeAmount(address asset, uint usdpAmount) external override view returns (uint) {\\n        uint16 borrowFeeBasisPoints = getBorrowFee(asset);\\n        if (borrowFeeBasisPoints == 0) {\\n            return 0;\\n        }\\n\\n        return usdpAmount.mul(uint(borrowFeeBasisPoints)).div(BASIS_POINTS_IN_1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/VaultParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity 0.7.6;\\n\\n\\n\\n/**\\n * @title Auth\\n * @dev Manages USDP's system access\\n **/\\ncontract Auth {\\n\\n    // address of the the contract with vault parameters\\n    VaultParameters public vaultParameters;\\n\\n    constructor(address _parameters) {\\n        vaultParameters = VaultParameters(_parameters);\\n    }\\n\\n    // ensures tx's sender is a manager\\n    modifier onlyManager() {\\n        require(vaultParameters.isManager(msg.sender), \\\"Unit Protocol: AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    // ensures tx's sender is able to modify the Vault\\n    modifier hasVaultAccess() {\\n        require(vaultParameters.canModifyVault(msg.sender), \\\"Unit Protocol: AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    // ensures tx's sender is the Vault\\n    modifier onlyVault() {\\n        require(msg.sender == vaultParameters.vault(), \\\"Unit Protocol: AUTH_FAILED\\\");\\n        _;\\n    }\\n}\\n\\n\\n\\n/**\\n * @title VaultParameters\\n **/\\ncontract VaultParameters is Auth {\\n\\n    // map token to stability fee percentage; 3 decimals\\n    mapping(address => uint) public stabilityFee;\\n\\n    // map token to liquidation fee percentage, 0 decimals\\n    mapping(address => uint) public liquidationFee;\\n\\n    // map token to USDP mint limit\\n    mapping(address => uint) public tokenDebtLimit;\\n\\n    // permissions to modify the Vault\\n    mapping(address => bool) public canModifyVault;\\n\\n    // managers\\n    mapping(address => bool) public isManager;\\n\\n    // enabled oracle types\\n    mapping(uint => mapping (address => bool)) public isOracleTypeEnabled;\\n\\n    // address of the Vault\\n    address payable public vault;\\n\\n    // The foundation address\\n    address public foundation;\\n\\n    /**\\n     * The address for an Ethereum contract is deterministically computed from the address of its creator (sender)\\n     * and how many transactions the creator has sent (nonce). The sender and nonce are RLP encoded and then\\n     * hashed with Keccak-256.\\n     * Therefore, the Vault address can be pre-computed and passed as an argument before deployment.\\n    **/\\n    constructor(address payable _vault, address _foundation) Auth(address(this)) {\\n        require(_vault != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\n        require(_foundation != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\n\\n        isManager[msg.sender] = true;\\n        vault = _vault;\\n        foundation = _foundation;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Grants and revokes manager's status of any address\\n     * @param who The target address\\n     * @param permit The permission flag\\n     **/\\n    function setManager(address who, bool permit) external onlyManager {\\n        isManager[who] = permit;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets the foundation address\\n     * @param newFoundation The new foundation address\\n     **/\\n    function setFoundation(address newFoundation) external onlyManager {\\n        require(newFoundation != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\n        foundation = newFoundation;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets ability to use token as the main collateral\\n     * @param asset The address of the main collateral token\\n     * @param stabilityFeeValue The percentage of the year stability fee (3 decimals)\\n     * @param liquidationFeeValue The liquidation fee percentage (0 decimals)\\n     * @param usdpLimit The USDP token issue limit\\n     * @param oracles The enables oracle types\\n     **/\\n    function setCollateral(\\n        address asset,\\n        uint stabilityFeeValue,\\n        uint liquidationFeeValue,\\n        uint usdpLimit,\\n        uint[] calldata oracles\\n    ) external onlyManager {\\n        setStabilityFee(asset, stabilityFeeValue);\\n        setLiquidationFee(asset, liquidationFeeValue);\\n        setTokenDebtLimit(asset, usdpLimit);\\n        for (uint i=0; i < oracles.length; i++) {\\n            setOracleType(oracles[i], asset, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets a permission for an address to modify the Vault\\n     * @param who The target address\\n     * @param permit The permission flag\\n     **/\\n    function setVaultAccess(address who, bool permit) external onlyManager {\\n        canModifyVault[who] = permit;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets the percentage of the year stability fee for a particular collateral\\n     * @param asset The address of the main collateral token\\n     * @param newValue The stability fee percentage (3 decimals)\\n     **/\\n    function setStabilityFee(address asset, uint newValue) public onlyManager {\\n        stabilityFee[asset] = newValue;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets the percentage of the liquidation fee for a particular collateral\\n     * @param asset The address of the main collateral token\\n     * @param newValue The liquidation fee percentage (0 decimals)\\n     **/\\n    function setLiquidationFee(address asset, uint newValue) public onlyManager {\\n        require(newValue <= 100, \\\"Unit Protocol: VALUE_OUT_OF_RANGE\\\");\\n        liquidationFee[asset] = newValue;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Enables/disables oracle types\\n     * @param _type The type of the oracle\\n     * @param asset The address of the main collateral token\\n     * @param enabled The control flag\\n     **/\\n    function setOracleType(uint _type, address asset, bool enabled) public onlyManager {\\n        isOracleTypeEnabled[_type][asset] = enabled;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets USDP limit for a specific collateral\\n     * @param asset The address of the main collateral token\\n     * @param limit The limit number\\n     **/\\n    function setTokenDebtLimit(address asset, uint limit) public onlyManager {\\n        tokenDebtLimit[asset] = limit;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/vault-managers/parameters/IVaultManagerBorrowFeeParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2021 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.7.6;\\n\\ninterface IVaultManagerBorrowFeeParameters {\\n\\n    /**\\n     * @notice 1 = 100% = 10000 basis points\\n     **/\\n    function BASIS_POINTS_IN_1() external view returns (uint);\\n\\n    /**\\n     * @notice Borrow fee receiver\\n     **/\\n    function feeReceiver() external view returns (address);\\n\\n    /**\\n     * @notice Sets the borrow fee receiver. Only manager is able to call this function\\n     * @param newFeeReceiver The address of fee receiver\\n     **/\\n    function setFeeReceiver(address newFeeReceiver) external;\\n\\n    /**\\n     * @notice Sets the base borrow fee in basis points (1bp = 0.01% = 0.0001). Only manager is able to call this function\\n     * @param newBaseBorrowFeeBasisPoints The borrow fee in basis points\\n     **/\\n    function setBaseBorrowFee(uint16 newBaseBorrowFeeBasisPoints) external;\\n\\n    /**\\n     * @notice Sets the borrow fee for a particular collateral in basis points (1bp = 0.01% = 0.0001). Only manager is able to call this function\\n     * @param asset The address of the main collateral token\\n     * @param newEnabled Is custom fee enabled for asset\\n     * @param newFeeBasisPoints The borrow fee in basis points\\n     **/\\n    function setAssetBorrowFee(address asset, bool newEnabled, uint16 newFeeBasisPoints) external;\\n\\n    /**\\n     * @notice Returns borrow fee for particular collateral in basis points (1bp = 0.01% = 0.0001)\\n     * @param asset The address of the main collateral token\\n     * @return feeBasisPoints The borrow fee in basis points\\n     **/\\n    function getBorrowFee(address asset) external view returns (uint16 feeBasisPoints);\\n\\n    /**\\n     * @notice Returns borrow fee for usdp amount for particular collateral\\n     * @param asset The address of the main collateral token\\n     * @return The borrow fee\\n     **/\\n    function calcBorrowFeeAmount(address asset, uint usdpAmount) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity 0.7.6;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n    /**\\n    * @dev Multiplies two numbers, throws on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, truncating the quotient.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, throws on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultParameters\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_baseBorrowFeeBasisPoints\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AssetBorrowFeeParamsDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"feeBasisPoints\",\"type\":\"uint16\"}],\"name\":\"AssetBorrowFeeParamsEnabled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_IN_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetBorrowFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"feeBasisPoints\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseBorrowFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdpAmount\",\"type\":\"uint256\"}],\"name\":\"calcBorrowFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getBorrowFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"feeBasisPoints\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"newFeeBasisPoints\",\"type\":\"uint16\"}],\"name\":\"setAssetBorrowFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newBaseBorrowFeeBasisPoints\",\"type\":\"uint16\"}],\"name\":\"setBaseBorrowFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultParameters\",\"outputs\":[{\"internalType\":\"contract VaultParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"VaultManagerBorrowFeeParameters","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b46f8cf42e504efe8bef895f848741daa55e9f1d000000000000000000000000000000000000000000000000000000000000005a000000000000000000000000b3e75687652d33d6f5cad5b113619641e4f6535b","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}