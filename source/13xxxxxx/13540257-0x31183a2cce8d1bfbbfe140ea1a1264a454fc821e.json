{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.8.0;\r\n\r\n// Sources flattened with hardhat v2.6.7 https://hardhat.org\r\n\r\n// File contracts/Curve/IStableSwap3Pool.sol\r\n\r\n\r\ninterface IStableSwap3Pool {\r\n\t// Deployment\r\n\tfunction __init__(address _owner, address[3] memory _coins, address _pool_token, uint256 _A, uint256 _fee, uint256 _admin_fee) external;\r\n\r\n\t// ERC20 Standard\r\n\tfunction decimals() external view returns (uint);\r\n\tfunction transfer(address _to, uint _value) external returns (uint256);\r\n\tfunction transferFrom(address _from, address _to, uint _value) external returns (bool);\r\n\tfunction approve(address _spender, uint _value) external returns (bool);\r\n\tfunction totalSupply() external view returns (uint);\r\n\tfunction mint(address _to, uint256 _value) external returns (bool);\r\n\tfunction burnFrom(address _to, uint256 _value) external returns (bool);\r\n\tfunction balanceOf(address _owner) external view returns (uint256);\r\n\r\n\t// 3Pool\r\n\tfunction A() external view returns (uint);\r\n\tfunction get_virtual_price() external view returns (uint);\r\n\tfunction calc_token_amount(uint[3] memory amounts, bool deposit) external view returns (uint);\r\n\tfunction add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount) external;\r\n\tfunction get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256);\r\n\tfunction get_dy_underlying(int128 i, int128 j, uint256 dx) external view returns (uint256);\r\n\tfunction exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\r\n\tfunction remove_liquidity(uint256 _amount, uint256[3] memory min_amounts) external;\r\n\tfunction remove_liquidity_imbalance(uint256[3] memory amounts, uint256 max_burn_amount) external;\r\n\tfunction calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\r\n\tfunction remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 min_amount) external;\r\n\t\r\n\t// Admin functions\r\n\tfunction ramp_A(uint256 _future_A, uint256 _future_time) external;\r\n\tfunction stop_ramp_A() external;\r\n\tfunction commit_new_fee(uint256 new_fee, uint256 new_admin_fee) external;\r\n\tfunction apply_new_fee() external;\r\n\tfunction commit_transfer_ownership(address _owner) external;\r\n\tfunction apply_transfer_ownership() external;\r\n\tfunction revert_transfer_ownership() external;\r\n\tfunction admin_balances(uint256 i) external returns (uint256);\r\n\tfunction withdraw_admin_fees() external;\r\n\tfunction donate_admin_fees() external;\r\n\tfunction kill_me() external;\r\n\tfunction unkill_me() external;\r\n}\r\n\r\n\r\n// File contracts/Curve/IMetaImplementationUSD.sol\r\n\r\n\r\ninterface IMetaImplementationUSD {\r\n\r\n\t// Deployment\r\n\tfunction __init__() external;\r\n\tfunction initialize(string memory _name, string memory _symbol, address _coin, uint _decimals, uint _A, uint _fee, address _admin) external;\r\n\r\n\t// ERC20 Standard\r\n\tfunction decimals() external view returns (uint);\r\n\tfunction transfer(address _to, uint _value) external returns (uint256);\r\n\tfunction transferFrom(address _from, address _to, uint _value) external returns (bool);\r\n\tfunction approve(address _spender, uint _value) external returns (bool);\r\n\tfunction balanceOf(address _owner) external view returns (uint256);\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\r\n\t// StableSwap Functionality\r\n\tfunction get_previous_balances() external view returns (uint[2] memory);\r\n\tfunction get_twap_balances(uint[2] memory _first_balances, uint[2] memory _last_balances, uint _time_elapsed) external view returns (uint[2] memory);\r\n\tfunction get_price_cumulative_last() external view returns (uint[2] memory);\r\n\tfunction admin_fee() external view returns (uint);\r\n\tfunction A() external view returns (uint);\r\n\tfunction A_precise() external view returns (uint);\r\n\tfunction get_virtual_price() external view returns (uint);\r\n\tfunction calc_token_amount(uint[2] memory _amounts, bool _is_deposit) external view returns (uint);\r\n\tfunction calc_token_amount(uint[2] memory _amounts, bool _is_deposit, bool _previous) external view returns (uint);\r\n\tfunction add_liquidity(uint[2] memory _amounts, uint _min_mint_amount) external returns (uint);\r\n\tfunction add_liquidity(uint[2] memory _amounts, uint _min_mint_amount, address _receiver) external returns (uint);\r\n\tfunction get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256);\r\n\tfunction get_dy(int128 i, int128 j, uint256 dx, uint256[2] memory _balances) external view returns (uint256);\r\n\tfunction get_dy_underlying(int128 i, int128 j, uint256 dx) external view returns (uint256);\r\n\tfunction get_dy_underlying(int128 i, int128 j, uint256 dx, uint256[2] memory _balances) external view returns (uint256);\r\n\tfunction exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns (uint256);\r\n\tfunction exchange(int128 i, int128 j, uint256 dx, uint256 min_dy, address _receiver) external returns (uint256);\r\n\tfunction exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns (uint256);\r\n\tfunction exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy, address _receiver) external returns (uint256);\r\n\tfunction remove_liquidity(uint256 _burn_amount, uint256[2] memory _min_amounts) external returns (uint256[2] memory);\r\n\tfunction remove_liquidity(uint256 _burn_amount, uint256[2] memory _min_amounts, address _receiver) external returns (uint256[2] memory);\r\n\tfunction remove_liquidity_imbalance(uint256[2] memory _amounts, uint256 _max_burn_amount) external returns (uint256);\r\n\tfunction remove_liquidity_imbalance(uint256[2] memory _amounts, uint256 _max_burn_amount, address _receiver) external returns (uint256);\r\n\tfunction calc_withdraw_one_coin(uint256 _burn_amount, int128 i) external view returns (uint256);\r\n\tfunction calc_withdraw_one_coin(uint256 _burn_amount, int128 i, bool _previous) external view returns (uint256);\r\n\tfunction remove_liquidity_one_coin(uint256 _burn_amount, int128 i, uint256 _min_received) external returns (uint256);\r\n\tfunction remove_liquidity_one_coin(uint256 _burn_amount, int128 i, uint256 _min_received, address _receiver) external returns (uint256);\r\n\tfunction ramp_A(uint256 _future_A, uint256 _future_time) external;\r\n\tfunction stop_ramp_A() external;\r\n\tfunction admin_balances(uint256 i) external view returns (uint256);\r\n\tfunction withdraw_admin_fees() external;\r\n}\r\n\r\n\r\n// File contracts/Misc_AMOs/convex/IConvexBooster.sol\r\n\r\n\r\ninterface IConvexBooster {\r\n  function FEE_DENOMINATOR() external view returns (uint256);\r\n  function MaxFees() external view returns (uint256);\r\n  function addPool(address _lptoken, address _gauge, uint256 _stashVersion) external returns (bool);\r\n  function claimRewards(uint256 _pid, address _gauge) external returns (bool);\r\n  function crv() external view returns (address);\r\n  function deposit(uint256 _pid, uint256 _amount, bool _stake) external returns (bool);\r\n  function depositAll(uint256 _pid, bool _stake) external returns (bool);\r\n  function distributionAddressId() external view returns (uint256);\r\n  function earmarkFees() external returns (bool);\r\n  function earmarkIncentive() external view returns (uint256);\r\n  function earmarkRewards(uint256 _pid) external returns (bool);\r\n  function feeDistro() external view returns (address);\r\n  function feeManager() external view returns (address);\r\n  function feeToken() external view returns (address);\r\n  function gaugeMap(address) external view returns (bool);\r\n  function isShutdown() external view returns (bool);\r\n  function lockFees() external view returns (address);\r\n  function lockIncentive() external view returns (uint256);\r\n  function lockRewards() external view returns (address);\r\n  function minter() external view returns (address);\r\n  function owner() external view returns (address);\r\n  function platformFee() external view returns (uint256);\r\n  function poolInfo(uint256) external view returns (address lptoken, address token, address gauge, address crvRewards, address stash, bool shutdown);\r\n  function poolLength() external view returns (uint256);\r\n  function poolManager() external view returns (address);\r\n  function registry() external view returns (address);\r\n  function rewardArbitrator() external view returns (address);\r\n  function rewardClaimed(uint256 _pid, address _address, uint256 _amount) external returns (bool);\r\n  function rewardFactory() external view returns (address);\r\n  function setArbitrator(address _arb) external;\r\n  function setFactories(address _rfactory, address _sfactory, address _tfactory) external;\r\n  function setFeeInfo() external;\r\n  function setFeeManager(address _feeM) external;\r\n  function setFees(uint256 _lockFees, uint256 _stakerFees, uint256 _callerFees, uint256 _platform) external;\r\n  function setGaugeRedirect(uint256 _pid) external returns (bool);\r\n  function setOwner(address _owner) external;\r\n  function setPoolManager(address _poolM) external;\r\n  function setRewardContracts(address _rewards, address _stakerRewards) external;\r\n  function setTreasury(address _treasury) external;\r\n  function setVoteDelegate(address _voteDelegate) external;\r\n  function shutdownPool(uint256 _pid) external returns (bool);\r\n  function shutdownSystem() external;\r\n  function staker() external view returns (address);\r\n  function stakerIncentive() external view returns (uint256);\r\n  function stakerRewards() external view returns (address);\r\n  function stashFactory() external view returns (address);\r\n  function tokenFactory() external view returns (address);\r\n  function treasury() external view returns (address);\r\n  function vote(uint256 _voteId, address _votingAddress, bool _support) external returns (bool);\r\n  function voteDelegate() external view returns (address);\r\n  function voteGaugeWeight(address[] memory _gauge, uint256[] memory _weight) external returns (bool);\r\n  function voteOwnership() external view returns (address);\r\n  function voteParameter() external view returns (address);\r\n  function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\r\n  function withdrawAll(uint256 _pid) external returns (bool);\r\n  function withdrawTo(uint256 _pid, uint256 _amount, address _to) external returns (bool);\r\n}\r\n\r\n\r\n// /**\r\n//  * @dev Standard math utilities missing in the Solidity language.\r\n//  */\r\n// library MathUtil {\r\n//     /**\r\n//      * @dev Returns the smallest of two numbers.\r\n//      */\r\n//     function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         return a < b ? a : b;\r\n//     }\r\n// }\r\n\r\n// contract ReentrancyGuard {\r\n//     uint256 private _guardCounter;\r\n\r\n//     constructor () internal {\r\n//         _guardCounter = 1;\r\n//     }\r\n\r\n//     modifier nonReentrant() {\r\n//         _guardCounter += 1;\r\n//         uint256 localCounter = _guardCounter;\r\n//         _;\r\n//         require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n//     }\r\n// }\r\n\r\n// interface ICurveGauge {\r\n//     function deposit(uint256) external;\r\n//     function balanceOf(address) external view returns (uint256);\r\n//     function withdraw(uint256) external;\r\n//     function claim_rewards() external;\r\n//     function reward_tokens(uint256) external view returns(address);//v2\r\n//     function rewarded_token() external view returns(address);//v1\r\n// }\r\n\r\n// interface ICurveVoteEscrow {\r\n//     function create_lock(uint256, uint256) external;\r\n//     function increase_amount(uint256) external;\r\n//     function increase_unlock_time(uint256) external;\r\n//     function withdraw() external;\r\n//     function smart_wallet_checker() external view returns (address);\r\n// }\r\n\r\n// interface IWalletChecker {\r\n//     function check(address) external view returns (bool);\r\n// }\r\n\r\n// interface IVoting{\r\n//     function vote(uint256, bool, bool) external; //voteId, support, executeIfDecided\r\n//     function getVote(uint256) external view returns(bool,bool,uint64,uint64,uint64,uint64,uint256,uint256,uint256,bytes memory); \r\n//     function vote_for_gauge_weights(address,uint256) external;\r\n// }\r\n\r\n// interface IMinter{\r\n//     function mint(address) external;\r\n// }\r\n\r\n// interface IRegistry{\r\n//     function get_registry() external view returns(address);\r\n//     function get_address(uint256 _id) external view returns(address);\r\n//     function gauge_controller() external view returns(address);\r\n//     function get_lp_token(address) external view returns(address);\r\n//     function get_gauges(address) external view returns(address[10] memory,uint128[10] memory);\r\n// }\r\n\r\n// interface IStaker{\r\n//     function deposit(address, address) external;\r\n//     function withdraw(address) external;\r\n//     function withdraw(address, address, uint256) external;\r\n//     function withdrawAll(address, address) external;\r\n//     function createLock(uint256, uint256) external;\r\n//     function increaseAmount(uint256) external;\r\n//     function increaseTime(uint256) external;\r\n//     function release() external;\r\n//     function claimCrv(address) external returns (uint256);\r\n//     function claimRewards(address) external;\r\n//     function claimFees(address,address) external;\r\n//     function setStashAccess(address, bool) external;\r\n//     function vote(uint256,address,bool) external;\r\n//     function voteGaugeWeight(address,uint256) external;\r\n//     function balanceOfPool(address) external view returns (uint256);\r\n//     function operator() external view returns (address);\r\n//     function execute(address _to, uint256 _value, bytes calldata _data) external returns (bool, bytes memory);\r\n// }\r\n\r\n// interface IRewards{\r\n//     function stake(address, uint256) external;\r\n//     function stakeFor(address, uint256) external;\r\n//     function withdraw(address, uint256) external;\r\n//     function exit(address) external;\r\n//     function getReward(address) external;\r\n//     function queueNewRewards(uint256) external;\r\n//     function notifyRewardAmount(uint256) external;\r\n//     function addExtraReward(address) external;\r\n//     function stakingToken() external returns (address);\r\n// }\r\n\r\n// interface IStash{\r\n//     function stashRewards() external returns (bool);\r\n//     function processStash() external returns (bool);\r\n//     function claimRewards() external returns (bool);\r\n// }\r\n\r\n// interface IFeeDistro{\r\n//     function claim() external;\r\n//     function token() external view returns(address);\r\n// }\r\n\r\n// interface ITokenMinter{\r\n//     function mint(address,uint256) external;\r\n//     function burn(address,uint256) external;\r\n// }\r\n\r\n// interface IDeposit{\r\n//     function isShutdown() external view returns(bool);\r\n//     function balanceOf(address _account) external view returns(uint256);\r\n//     function totalSupply() external view returns(uint256);\r\n//     function poolInfo(uint256) external view returns(address,address,address,address,address, bool);\r\n//     function rewardClaimed(uint256,address,uint256) external;\r\n//     function withdrawTo(uint256,uint256,address) external;\r\n//     function claimRewards(uint256,address) external returns(bool);\r\n//     function rewardArbitrator() external returns(address);\r\n// }\r\n\r\n// interface ICrvDeposit{\r\n//     function deposit(uint256, bool) external;\r\n//     function lockIncentive() external view returns(uint256);\r\n// }\r\n\r\n// interface IRewardFactory{\r\n//     function setAccess(address,bool) external;\r\n//     function CreateCrvRewards(uint256,address) external returns(address);\r\n//     function CreateTokenRewards(address,address,address) external returns(address);\r\n//     function activeRewardCount(address) external view returns(uint256);\r\n//     function addActiveReward(address,uint256) external returns(bool);\r\n//     function removeActiveReward(address,uint256) external returns(bool);\r\n// }\r\n\r\n// interface IStashFactory{\r\n//     function CreateStash(uint256,address,address,uint256) external returns(address);\r\n// }\r\n\r\n// interface ITokenFactory{\r\n//     function CreateDepositToken(address) external returns(address);\r\n// }\r\n\r\n// interface IPools{\r\n//     function addPool(address _lptoken, address _gauge, uint256 _stashVersion) external returns(bool);\r\n//     function shutdownPool(uint256 _pid) external returns(bool);\r\n//     function poolInfo(uint256) external view returns(address,address,address,address,address,bool);\r\n//     function poolLength() external view returns (uint256);\r\n//     function gaugeMap(address) external view returns(bool);\r\n//     function setPoolManager(address _poolM) external;\r\n// }\r\n\r\n// interface IVestedEscrow{\r\n//     function fund(address[] calldata _recipient, uint256[] calldata _amount) external returns(bool);\r\n// }\r\n\r\n// // File: @openzeppelin\\contracts\\math\\SafeMath.sol\r\n\r\n\r\n// /**\r\n//  * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n//  * checks.\r\n//  *\r\n//  * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n//  * in bugs, because programmers usually assume that an overflow raises an\r\n//  * error, which is the standard behavior in high level programming languages.\r\n//  * `SafeMath` restores this intuition by reverting the transaction when an\r\n//  * operation overflows.\r\n//  *\r\n//  * Using this library instead of the unchecked operations eliminates an entire\r\n//  * class of bugs, so it's recommended to use it always.\r\n//  */\r\n// library SafeMath {\r\n//     /**\r\n//      * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n//      *\r\n//      * _Available since v3.4._\r\n//      */\r\n//     function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n//         uint256 c = a + b;\r\n//         if (c < a) return (false, 0);\r\n//         return (true, c);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n//      *\r\n//      * _Available since v3.4._\r\n//      */\r\n//     function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n//         if (b > a) return (false, 0);\r\n//         return (true, a - b);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n//      *\r\n//      * _Available since v3.4._\r\n//      */\r\n//     function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n//         // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n//         // benefit is lost if 'b' is also tested.\r\n//         // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n//         if (a == 0) return (true, 0);\r\n//         uint256 c = a * b;\r\n//         if (c / a != b) return (false, 0);\r\n//         return (true, c);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n//      *\r\n//      * _Available since v3.4._\r\n//      */\r\n//     function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n//         if (b == 0) return (false, 0);\r\n//         return (true, a / b);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n//      *\r\n//      * _Available since v3.4._\r\n//      */\r\n//     function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n//         if (b == 0) return (false, 0);\r\n//         return (true, a % b);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the addition of two unsigned integers, reverting on\r\n//      * overflow.\r\n//      *\r\n//      * Counterpart to Solidity's `+` operator.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - Addition cannot overflow.\r\n//      */\r\n//     function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         uint256 c = a + b;\r\n//         require(c >= a, \"SafeMath: addition overflow\");\r\n//         return c;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the subtraction of two unsigned integers, reverting on\r\n//      * overflow (when the result is negative).\r\n//      *\r\n//      * Counterpart to Solidity's `-` operator.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - Subtraction cannot overflow.\r\n//      */\r\n//     function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         require(b <= a, \"SafeMath: subtraction overflow\");\r\n//         return a - b;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the multiplication of two unsigned integers, reverting on\r\n//      * overflow.\r\n//      *\r\n//      * Counterpart to Solidity's `*` operator.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - Multiplication cannot overflow.\r\n//      */\r\n//     function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         if (a == 0) return 0;\r\n//         uint256 c = a * b;\r\n//         require(c / a == b, \"SafeMath: multiplication overflow\");\r\n//         return c;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the integer division of two unsigned integers, reverting on\r\n//      * division by zero. The result is rounded towards zero.\r\n//      *\r\n//      * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n//      * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n//      * uses an invalid opcode to revert (consuming all remaining gas).\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - The divisor cannot be zero.\r\n//      */\r\n//     function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         require(b > 0, \"SafeMath: division by zero\");\r\n//         return a / b;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n//      * reverting when dividing by zero.\r\n//      *\r\n//      * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n//      * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n//      * invalid opcode to revert (consuming all remaining gas).\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - The divisor cannot be zero.\r\n//      */\r\n//     function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         require(b > 0, \"SafeMath: modulo by zero\");\r\n//         return a % b;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n//      * overflow (when the result is negative).\r\n//      *\r\n//      * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n//      * message unnecessarily. For custom revert reasons use {trySub}.\r\n//      *\r\n//      * Counterpart to Solidity's `-` operator.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - Subtraction cannot overflow.\r\n//      */\r\n//     function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n//         require(b <= a, errorMessage);\r\n//         return a - b;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n//      * division by zero. The result is rounded towards zero.\r\n//      *\r\n//      * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n//      * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n//      *\r\n//      * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n//      * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n//      * uses an invalid opcode to revert (consuming all remaining gas).\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - The divisor cannot be zero.\r\n//      */\r\n//     function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n//         require(b > 0, errorMessage);\r\n//         return a / b;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n//      * reverting with custom message when dividing by zero.\r\n//      *\r\n//      * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n//      * message unnecessarily. For custom revert reasons use {tryMod}.\r\n//      *\r\n//      * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n//      * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n//      * invalid opcode to revert (consuming all remaining gas).\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - The divisor cannot be zero.\r\n//      */\r\n//     function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n//         require(b > 0, errorMessage);\r\n//         return a % b;\r\n//     }\r\n// }\r\n\r\n// // File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\n\r\n// /**\r\n//  * @dev Interface of the ERC20 standard as defined in the EIP.\r\n//  */\r\n// interface IERC20 {\r\n//     /**\r\n//      * @dev Returns the amount of tokens in existence.\r\n//      */\r\n//     function totalSupply() external view returns (uint256);\r\n\r\n//     /**\r\n//      * @dev Returns the amount of tokens owned by `account`.\r\n//      */\r\n//     function balanceOf(address account) external view returns (uint256);\r\n\r\n//     /**\r\n//      * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n//      *\r\n//      * Returns a boolean value indicating whether the operation succeeded.\r\n//      *\r\n//      * Emits a {Transfer} event.\r\n//      */\r\n//     function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n//     /**\r\n//      * @dev Returns the remaining number of tokens that `spender` will be\r\n//      * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n//      * zero by default.\r\n//      *\r\n//      * This value changes when {approve} or {transferFrom} are called.\r\n//      */\r\n//     function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n//     /**\r\n//      * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n//      *\r\n//      * Returns a boolean value indicating whether the operation succeeded.\r\n//      *\r\n//      * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n//      * that someone may use both the old and the new allowance by unfortunate\r\n//      * transaction ordering. One possible solution to mitigate this race\r\n//      * condition is to first reduce the spender's allowance to 0 and set the\r\n//      * desired value afterwards:\r\n//      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n//      *\r\n//      * Emits an {Approval} event.\r\n//      */\r\n//     function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n//     /**\r\n//      * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n//      * allowance mechanism. `amount` is then deducted from the caller's\r\n//      * allowance.\r\n//      *\r\n//      * Returns a boolean value indicating whether the operation succeeded.\r\n//      *\r\n//      * Emits a {Transfer} event.\r\n//      */\r\n//     function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n//     /**\r\n//      * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n//      * another (`to`).\r\n//      *\r\n//      * Note that `value` may be zero.\r\n//      */\r\n//     event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n//     /**\r\n//      * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n//      * a call to {approve}. `value` is the new allowance.\r\n//      */\r\n//     event Approval(address indexed owner, address indexed spender, uint256 value);\r\n// }\r\n\r\n// // File: @openzeppelin\\contracts\\utils\\Address.sol\r\n\r\n// /**\r\n//  * @dev Collection of functions related to the address type\r\n//  */\r\n// library Address {\r\n//     /**\r\n//      * @dev Returns true if `account` is a contract.\r\n//      *\r\n//      * [IMPORTANT]\r\n//      * ====\r\n//      * It is unsafe to assume that an address for which this function returns\r\n//      * false is an externally-owned account (EOA) and not a contract.\r\n//      *\r\n//      * Among others, `isContract` will return false for the following\r\n//      * types of addresses:\r\n//      *\r\n//      *  - an externally-owned account\r\n//      *  - a contract in construction\r\n//      *  - an address where a contract will be created\r\n//      *  - an address where a contract lived, but was destroyed\r\n//      * ====\r\n//      */\r\n//     function isContract(address account) internal view returns (bool) {\r\n//         // This method relies on extcodesize, which returns 0 for contracts in\r\n//         // construction, since the code is only stored at the end of the\r\n//         // constructor execution.\r\n\r\n//         uint256 size;\r\n//         // solhint-disable-next-line no-inline-assembly\r\n//         assembly { size := extcodesize(account) }\r\n//         return size > 0;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n//      * `recipient`, forwarding all available gas and reverting on errors.\r\n//      *\r\n//      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n//      * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n//      * imposed by `transfer`, making them unable to receive funds via\r\n//      * `transfer`. {sendValue} removes this limitation.\r\n//      *\r\n//      * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n//      *\r\n//      * IMPORTANT: because control is transferred to `recipient`, care must be\r\n//      * taken to not create reentrancy vulnerabilities. Consider using\r\n//      * {ReentrancyGuard} or the\r\n//      * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n//      */\r\n//     function sendValue(address payable recipient, uint256 amount) internal {\r\n//         require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n//         // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n//         (bool success, ) = recipient.call{ value: amount }(\"\");\r\n//         require(success, \"Address: unable to send value, recipient may have reverted\");\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Performs a Solidity function call using a low level `call`. A\r\n//      * plain`call` is an unsafe replacement for a function call: use this\r\n//      * function instead.\r\n//      *\r\n//      * If `target` reverts with a revert reason, it is bubbled up by this\r\n//      * function (like regular Solidity function calls).\r\n//      *\r\n//      * Returns the raw returned data. To convert to the expected return value,\r\n//      * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - `target` must be a contract.\r\n//      * - calling `target` with `data` must not revert.\r\n//      *\r\n//      * _Available since v3.1._\r\n//      */\r\n//     function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n//       return functionCall(target, data, \"Address: low-level call failed\");\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n//      * `errorMessage` as a fallback revert reason when `target` reverts.\r\n//      *\r\n//      * _Available since v3.1._\r\n//      */\r\n//     function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n//         return functionCallWithValue(target, data, 0, errorMessage);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n//      * but also transferring `value` wei to `target`.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - the calling contract must have an ETH balance of at least `value`.\r\n//      * - the called Solidity function must be `payable`.\r\n//      *\r\n//      * _Available since v3.1._\r\n//      */\r\n//     function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n//         return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n//      * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n//      *\r\n//      * _Available since v3.1._\r\n//      */\r\n//     function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n//         require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n//         require(isContract(target), \"Address: call to non-contract\");\r\n\r\n//         // solhint-disable-next-line avoid-low-level-calls\r\n//         (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n//         return _verifyCallResult(success, returndata, errorMessage);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n//      * but performing a static call.\r\n//      *\r\n//      * _Available since v3.3._\r\n//      */\r\n//     function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n//         return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n//      * but performing a static call.\r\n//      *\r\n//      * _Available since v3.3._\r\n//      */\r\n//     function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n//         require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n//         // solhint-disable-next-line avoid-low-level-calls\r\n//         (bool success, bytes memory returndata) = target.staticcall(data);\r\n//         return _verifyCallResult(success, returndata, errorMessage);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n//      * but performing a delegate call.\r\n//      *\r\n//      * _Available since v3.4._\r\n//      */\r\n//     function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n//         return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n//      * but performing a delegate call.\r\n//      *\r\n//      * _Available since v3.4._\r\n//      */\r\n//     function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n//         require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n//         // solhint-disable-next-line avoid-low-level-calls\r\n//         (bool success, bytes memory returndata) = target.delegatecall(data);\r\n//         return _verifyCallResult(success, returndata, errorMessage);\r\n//     }\r\n\r\n//     function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n//         if (success) {\r\n//             return returndata;\r\n//         } else {\r\n//             // Look for revert reason and bubble it up if present\r\n//             if (returndata.length > 0) {\r\n//                 // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n//                 // solhint-disable-next-line no-inline-assembly\r\n//                 assembly {\r\n//                     let returndata_size := mload(returndata)\r\n//                     revert(add(32, returndata), returndata_size)\r\n//                 }\r\n//             } else {\r\n//                 revert(errorMessage);\r\n//             }\r\n//         }\r\n//     }\r\n// }\r\n\r\n// // File: @openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol\r\n\r\n\r\n\r\n\r\n// /**\r\n//  * @title SafeERC20\r\n//  * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n//  * contract returns false). Tokens that return no value (and instead revert or\r\n//  * throw on failure) are also supported, non-reverting calls are assumed to be\r\n//  * successful.\r\n//  * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n//  * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n//  */\r\n// library SafeERC20 {\r\n//     using SafeMath for uint256;\r\n//     using Address for address;\r\n\r\n//     function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n//         _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n//     }\r\n\r\n//     function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n//         _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Deprecated. This function has issues similar to the ones found in\r\n//      * {IERC20-approve}, and its usage is discouraged.\r\n//      *\r\n//      * Whenever possible, use {safeIncreaseAllowance} and\r\n//      * {safeDecreaseAllowance} instead.\r\n//      */\r\n//     function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n//         // safeApprove should only be called when setting an initial allowance,\r\n//         // or when resetting it to zero. To increase and decrease it, use\r\n//         // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n//         // solhint-disable-next-line max-line-length\r\n//         require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n//             \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n//         );\r\n//         _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n//     }\r\n\r\n//     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n//         uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n//         _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n//     }\r\n\r\n//     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n//         uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n//         _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n//      * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n//      * @param token The token targeted by the call.\r\n//      * @param data The call data (encoded using abi.encode or one of its variants).\r\n//      */\r\n//     function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n//         // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n//         // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n//         // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n//         bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n//         if (returndata.length > 0) { // Return data is optional\r\n//             // solhint-disable-next-line max-line-length\r\n//             require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n//         }\r\n//     }\r\n// }\r\n\r\n// // File: contracts\\Booster.sol\r\n\r\n\r\n\r\n\r\n// contract Booster{\r\n//     using SafeERC20 for IERC20;\r\n//     using Address for address;\r\n//     using SafeMath for uint256;\r\n\r\n//     address public constant crv = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\r\n//     address public constant registry = address(0x0000000022D53366457F9d5E68Ec105046FC4383);\r\n//     uint256 public constant distributionAddressId = 4;\r\n//     address public constant voteOwnership = address(0xE478de485ad2fe566d49342Cbd03E49ed7DB3356);\r\n//     address public constant voteParameter = address(0xBCfF8B0b9419b9A88c44546519b1e909cF330399);\r\n\r\n//     uint256 public lockIncentive = 1000; //incentive to crv stakers\r\n//     uint256 public stakerIncentive = 450; //incentive to native token stakers\r\n//     uint256 public earmarkIncentive = 50; //incentive to users who spend gas to make calls\r\n//     uint256 public platformFee = 0; //possible fee to build treasury\r\n//     uint256 public constant MaxFees = 2000;\r\n//     uint256 public constant FEE_DENOMINATOR = 10000;\r\n\r\n//     address public owner;\r\n//     address public feeManager;\r\n//     address public poolManager;\r\n//     address public immutable staker;\r\n//     address public immutable minter;\r\n//     address public rewardFactory;\r\n//     address public stashFactory;\r\n//     address public tokenFactory;\r\n//     address public rewardArbitrator;\r\n//     address public voteDelegate;\r\n//     address public treasury;\r\n//     address public stakerRewards; //cvx rewards\r\n//     address public lockRewards; //cvxCrv rewards(crv)\r\n//     address public lockFees; //cvxCrv vecrv fees\r\n//     address public feeDistro;\r\n//     address public feeToken;\r\n\r\n//     bool public isShutdown;\r\n\r\n//     struct PoolInfo {\r\n//         address lptoken;\r\n//         address token;\r\n//         address gauge;\r\n//         address crvRewards;\r\n//         address stash;\r\n//         bool shutdown;\r\n//     }\r\n\r\n//     //index(pid) -> pool\r\n//     PoolInfo[] public poolInfo;\r\n//     mapping(address => bool) public gaugeMap;\r\n\r\n//     event Deposited(address indexed user, uint256 indexed poolid, uint256 amount);\r\n//     event Withdrawn(address indexed user, uint256 indexed poolid, uint256 amount);\r\n\r\n//     constructor (address _staker, address _minter) public {\r\n//         isShutdown = false;\r\n//         staker = _staker;\r\n//         owner = msg.sender;\r\n//         voteDelegate = msg.sender;\r\n//         feeManager = msg.sender;\r\n//         poolManager = msg.sender;\r\n//         feeDistro = address(0); //address(0xA464e6DCda8AC41e03616F95f4BC98a13b8922Dc);\r\n//         feeToken = address(0); //address(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\r\n//         treasury = address(0);\r\n//         minter = _minter;\r\n//     }\r\n\r\n\r\n//     /// SETTER SECTION ///\r\n\r\n//     function setOwner(address _owner) external {\r\n//         require(msg.sender == owner, \"!auth\");\r\n//         owner = _owner;\r\n//     }\r\n\r\n//     function setFeeManager(address _feeM) external {\r\n//         require(msg.sender == feeManager, \"!auth\");\r\n//         feeManager = _feeM;\r\n//     }\r\n\r\n//     function setPoolManager(address _poolM) external {\r\n//         require(msg.sender == poolManager, \"!auth\");\r\n//         poolManager = _poolM;\r\n//     }\r\n\r\n//     function setFactories(address _rfactory, address _sfactory, address _tfactory) external {\r\n//         require(msg.sender == owner, \"!auth\");\r\n        \r\n//         //reward factory only allow this to be called once even if owner\r\n//         //removes ability to inject malicious staking contracts\r\n//         //token factory can also be immutable\r\n//         if(rewardFactory == address(0)){\r\n//             rewardFactory = _rfactory;\r\n//             tokenFactory = _tfactory;\r\n//         }\r\n\r\n//         //stash factory should be considered more safe to change\r\n//         //updating may be required to handle new types of gauges\r\n//         stashFactory = _sfactory;\r\n//     }\r\n\r\n//     function setArbitrator(address _arb) external {\r\n//         require(msg.sender==owner, \"!auth\");\r\n//         rewardArbitrator = _arb;\r\n//     }\r\n\r\n//     function setVoteDelegate(address _voteDelegate) external {\r\n//         require(msg.sender==voteDelegate, \"!auth\");\r\n//         voteDelegate = _voteDelegate;\r\n//     }\r\n\r\n//     function setRewardContracts(address _rewards, address _stakerRewards) external {\r\n//         require(msg.sender == owner, \"!auth\");\r\n        \r\n//         //reward contracts are immutable or else the owner\r\n//         //has a means to redeploy and mint cvx via rewardClaimed()\r\n//         if(lockRewards == address(0)){\r\n//             lockRewards = _rewards;\r\n//             stakerRewards = _stakerRewards;\r\n//         }\r\n//     }\r\n\r\n//     // Set reward token and claim contract, get from Curve's registry\r\n//     function setFeeInfo() external {\r\n//         require(msg.sender==feeManager, \"!auth\");\r\n        \r\n//         feeDistro = IRegistry(registry).get_address(distributionAddressId);\r\n//         address _feeToken = IFeeDistro(feeDistro).token();\r\n//         if(feeToken != _feeToken){\r\n//             //create a new reward contract for the new token\r\n//             lockFees = IRewardFactory(rewardFactory).CreateTokenRewards(_feeToken,lockRewards,address(this));\r\n//             feeToken = _feeToken;\r\n//         }\r\n//     }\r\n\r\n//     function setFees(uint256 _lockFees, uint256 _stakerFees, uint256 _callerFees, uint256 _platform) external{\r\n//         require(msg.sender==feeManager, \"!auth\");\r\n\r\n//         uint256 total = _lockFees.add(_stakerFees).add(_callerFees).add(_platform);\r\n//         require(total <= MaxFees, \">MaxFees\");\r\n\r\n//         //values must be within certain ranges     \r\n//         if(_lockFees >= 1000 && _lockFees <= 1500\r\n//             && _stakerFees >= 300 && _stakerFees <= 600\r\n//             && _callerFees >= 10 && _callerFees <= 100\r\n//             && _platform <= 200){\r\n//             lockIncentive = _lockFees;\r\n//             stakerIncentive = _stakerFees;\r\n//             earmarkIncentive = _callerFees;\r\n//             platformFee = _platform;\r\n//         }\r\n//     }\r\n\r\n//     function setTreasury(address _treasury) external {\r\n//         require(msg.sender==feeManager, \"!auth\");\r\n//         treasury = _treasury;\r\n//     }\r\n\r\n//     /// END SETTER SECTION ///\r\n\r\n\r\n//     function poolLength() external view returns (uint256) {\r\n//         return poolInfo.length;\r\n//     }\r\n\r\n//     //create a new pool\r\n//     function addPool(address _lptoken, address _gauge, uint256 _stashVersion) external returns(bool){\r\n//         require(msg.sender==poolManager && !isShutdown, \"!add\");\r\n//         require(_gauge != address(0) && _lptoken != address(0),\"!param\");\r\n\r\n//         //the next pool's pid\r\n//         uint256 pid = poolInfo.length;\r\n\r\n//         //create a tokenized deposit\r\n//         address token = ITokenFactory(tokenFactory).CreateDepositToken(_lptoken);\r\n//         //create a reward contract for crv rewards\r\n//         address newRewardPool = IRewardFactory(rewardFactory).CreateCrvRewards(pid,token);\r\n//         //create a stash to handle extra incentives\r\n//         address stash = IStashFactory(stashFactory).CreateStash(pid,_gauge,staker,_stashVersion);\r\n\r\n//         //add the new pool\r\n//         poolInfo.push(\r\n//             PoolInfo({\r\n//                 lptoken: _lptoken,\r\n//                 token: token,\r\n//                 gauge: _gauge,\r\n//                 crvRewards: newRewardPool,\r\n//                 stash: stash,\r\n//                 shutdown: false\r\n//             })\r\n//         );\r\n//         gaugeMap[_gauge] = true;\r\n//         //give stashes access to rewardfactory and voteproxy\r\n//         //   voteproxy so it can grab the incentive tokens off the contract after claiming rewards\r\n//         //   reward factory so that stashes can make new extra reward contracts if a new incentive is added to the gauge\r\n//         if(stash != address(0)){\r\n//             poolInfo[pid].stash = stash;\r\n//             IStaker(staker).setStashAccess(stash,true);\r\n//             IRewardFactory(rewardFactory).setAccess(stash,true);\r\n//         }\r\n//         return true;\r\n//     }\r\n\r\n//     //shutdown pool\r\n//     function shutdownPool(uint256 _pid) external returns(bool){\r\n//         require(msg.sender==poolManager, \"!auth\");\r\n//         PoolInfo storage pool = poolInfo[_pid];\r\n\r\n//         //withdraw from gauge\r\n//         try IStaker(staker).withdrawAll(pool.lptoken,pool.gauge){\r\n//         }catch{}\r\n\r\n//         pool.shutdown = true;\r\n//         gaugeMap[pool.gauge] = false;\r\n//         return true;\r\n//     }\r\n\r\n//     //shutdown this contract.\r\n//     //  unstake and pull all lp tokens to this address\r\n//     //  only allow withdrawals\r\n//     function shutdownSystem() external{\r\n//         require(msg.sender == owner, \"!auth\");\r\n//         isShutdown = true;\r\n\r\n//         for(uint i=0; i < poolInfo.length; i++){\r\n//             PoolInfo storage pool = poolInfo[i];\r\n//             if (pool.shutdown) continue;\r\n\r\n//             address token = pool.lptoken;\r\n//             address gauge = pool.gauge;\r\n\r\n//             //withdraw from gauge\r\n//             try IStaker(staker).withdrawAll(token,gauge){\r\n//                 pool.shutdown = true;\r\n//             }catch{}\r\n//         }\r\n//     }\r\n\r\n\r\n//     //deposit lp tokens and stake\r\n//     function deposit(uint256 _pid, uint256 _amount, bool _stake) public returns(bool){\r\n//         require(!isShutdown,\"shutdown\");\r\n//         PoolInfo storage pool = poolInfo[_pid];\r\n//         require(pool.shutdown == false, \"pool is closed\");\r\n\r\n//         //send to proxy to stake\r\n//         address lptoken = pool.lptoken;\r\n//         IERC20(lptoken).safeTransferFrom(msg.sender, staker, _amount);\r\n\r\n//         //stake\r\n//         address gauge = pool.gauge;\r\n//         require(gauge != address(0),\"!gauge setting\");\r\n//         IStaker(staker).deposit(lptoken,gauge);\r\n\r\n//         //some gauges claim rewards when depositing, stash them in a seperate contract until next claim\r\n//         address stash = pool.stash;\r\n//         if(stash != address(0)){\r\n//             IStash(stash).stashRewards();\r\n//         }\r\n\r\n//         address token = pool.token;\r\n//         if(_stake){\r\n//             //mint here and send to rewards on user behalf\r\n//             ITokenMinter(token).mint(address(this),_amount);\r\n//             address rewardContract = pool.crvRewards;\r\n//             IERC20(token).safeApprove(rewardContract,0);\r\n//             IERC20(token).safeApprove(rewardContract,_amount);\r\n//             IRewards(rewardContract).stakeFor(msg.sender,_amount);\r\n//         }else{\r\n//             //add user balance directly\r\n//             ITokenMinter(token).mint(msg.sender,_amount);\r\n//         }\r\n\r\n        \r\n//         emit Deposited(msg.sender, _pid, _amount);\r\n//         return true;\r\n//     }\r\n\r\n//     //deposit all lp tokens and stake\r\n//     function depositAll(uint256 _pid, bool _stake) external returns(bool){\r\n//         address lptoken = poolInfo[_pid].lptoken;\r\n//         uint256 balance = IERC20(lptoken).balanceOf(msg.sender);\r\n//         deposit(_pid,balance,_stake);\r\n//         return true;\r\n//     }\r\n\r\n//     //withdraw lp tokens\r\n//     function _withdraw(uint256 _pid, uint256 _amount, address _from, address _to) internal {\r\n//         PoolInfo storage pool = poolInfo[_pid];\r\n//         address lptoken = pool.lptoken;\r\n//         address gauge = pool.gauge;\r\n\r\n//         //remove lp balance\r\n//         address token = pool.token;\r\n//         ITokenMinter(token).burn(_from,_amount);\r\n\r\n//         //pull from gauge if not shutdown\r\n//         // if shutdown tokens will be in this contract\r\n//         if (!pool.shutdown) {\r\n//             IStaker(staker).withdraw(lptoken,gauge, _amount);\r\n//         }\r\n\r\n//         //some gauges claim rewards when withdrawing, stash them in a seperate contract until next claim\r\n//         //do not call if shutdown since stashes wont have access\r\n//         address stash = pool.stash;\r\n//         if(stash != address(0) && !isShutdown && !pool.shutdown){\r\n//             IStash(stash).stashRewards();\r\n//         }\r\n        \r\n//         //return lp tokens\r\n//         IERC20(lptoken).safeTransfer(_to, _amount);\r\n\r\n//         emit Withdrawn(_to, _pid, _amount);\r\n//     }\r\n\r\n//     //withdraw lp tokens\r\n//     function withdraw(uint256 _pid, uint256 _amount) public returns(bool){\r\n//         _withdraw(_pid,_amount,msg.sender,msg.sender);\r\n//         return true;\r\n//     }\r\n\r\n//     //withdraw all lp tokens\r\n//     function withdrawAll(uint256 _pid) public returns(bool){\r\n//         address token = poolInfo[_pid].token;\r\n//         uint256 userBal = IERC20(token).balanceOf(msg.sender);\r\n//         withdraw(_pid, userBal);\r\n//         return true;\r\n//     }\r\n\r\n//     //allow reward contracts to send here and withdraw to user\r\n//     function withdrawTo(uint256 _pid, uint256 _amount, address _to) external returns(bool){\r\n//         address rewardContract = poolInfo[_pid].crvRewards;\r\n//         require(msg.sender == rewardContract,\"!auth\");\r\n\r\n//         _withdraw(_pid,_amount,msg.sender,_to);\r\n//         return true;\r\n//     }\r\n\r\n\r\n//     //delegate address votes on dao\r\n//     function vote(uint256 _voteId, address _votingAddress, bool _support) external returns(bool){\r\n//         require(msg.sender == voteDelegate, \"!auth\");\r\n//         require(_votingAddress == voteOwnership || _votingAddress == voteParameter, \"!voteAddr\");\r\n        \r\n//         IStaker(staker).vote(_voteId,_votingAddress,_support);\r\n//         return true;\r\n//     }\r\n\r\n//     function voteGaugeWeight(address[] calldata _gauge, uint256[] calldata _weight ) external returns(bool){\r\n//         require(msg.sender == voteDelegate, \"!auth\");\r\n\r\n//         for(uint256 i = 0; i < _gauge.length; i++){\r\n//             IStaker(staker).voteGaugeWeight(_gauge[i],_weight[i]);\r\n//         }\r\n//         return true;\r\n//     }\r\n\r\n//     function claimRewards(uint256 _pid, address _gauge) external returns(bool){\r\n//         address stash = poolInfo[_pid].stash;\r\n//         require(msg.sender == stash,\"!auth\");\r\n\r\n//         IStaker(staker).claimRewards(_gauge);\r\n//         return true;\r\n//     }\r\n\r\n//     function setGaugeRedirect(uint256 _pid) external returns(bool){\r\n//         address stash = poolInfo[_pid].stash;\r\n//         require(msg.sender == stash,\"!auth\");\r\n//         address gauge = poolInfo[_pid].gauge;\r\n//         bytes memory data = abi.encodeWithSelector(bytes4(keccak256(\"set_rewards_receiver(address)\")), stash);\r\n//         IStaker(staker).execute(gauge,uint256(0),data);\r\n//         return true;\r\n//     }\r\n\r\n//     //claim crv and extra rewards and disperse to reward contracts\r\n//     function _earmarkRewards(uint256 _pid) internal {\r\n//         PoolInfo storage pool = poolInfo[_pid];\r\n//         require(pool.shutdown == false, \"pool is closed\");\r\n\r\n//         address gauge = pool.gauge;\r\n\r\n//         //claim crv\r\n//         IStaker(staker).claimCrv(gauge);\r\n\r\n//         //check if there are extra rewards\r\n//         address stash = pool.stash;\r\n//         if(stash != address(0)){\r\n//             //claim extra rewards\r\n//             IStash(stash).claimRewards();\r\n//             //process extra rewards\r\n//             IStash(stash).processStash();\r\n//         }\r\n\r\n//         //crv balance\r\n//         uint256 crvBal = IERC20(crv).balanceOf(address(this));\r\n\r\n//         if (crvBal > 0) {\r\n//             uint256 _lockIncentive = crvBal.mul(lockIncentive).div(FEE_DENOMINATOR);\r\n//             uint256 _stakerIncentive = crvBal.mul(stakerIncentive).div(FEE_DENOMINATOR);\r\n//             uint256 _callIncentive = crvBal.mul(earmarkIncentive).div(FEE_DENOMINATOR);\r\n            \r\n//             //send treasury\r\n//             if(treasury != address(0) && treasury != address(this) && platformFee > 0){\r\n//                 //only subtract after address condition check\r\n//                 uint256 _platform = crvBal.mul(platformFee).div(FEE_DENOMINATOR);\r\n//                 crvBal = crvBal.sub(_platform);\r\n//                 IERC20(crv).safeTransfer(treasury, _platform);\r\n//             }\r\n\r\n//             //remove incentives from balance\r\n//             crvBal = crvBal.sub(_lockIncentive).sub(_callIncentive).sub(_stakerIncentive);\r\n\r\n//             //send incentives for calling\r\n//             IERC20(crv).safeTransfer(msg.sender, _callIncentive);          \r\n\r\n//             //send crv to lp provider reward contract\r\n//             address rewardContract = pool.crvRewards;\r\n//             IERC20(crv).safeTransfer(rewardContract, crvBal);\r\n//             IRewards(rewardContract).queueNewRewards(crvBal);\r\n\r\n//             //send lockers' share of crv to reward contract\r\n//             IERC20(crv).safeTransfer(lockRewards, _lockIncentive);\r\n//             IRewards(lockRewards).queueNewRewards(_lockIncentive);\r\n\r\n//             //send stakers's share of crv to reward contract\r\n//             IERC20(crv).safeTransfer(stakerRewards, _stakerIncentive);\r\n//             IRewards(stakerRewards).queueNewRewards(_stakerIncentive);\r\n//         }\r\n//     }\r\n\r\n//     function earmarkRewards(uint256 _pid) external returns(bool){\r\n//         require(!isShutdown,\"shutdown\");\r\n//         _earmarkRewards(_pid);\r\n//         return true;\r\n//     }\r\n\r\n//     //claim fees from curve distro contract, put in lockers' reward contract\r\n//     function earmarkFees() external returns(bool){\r\n//         //claim fee rewards\r\n//         IStaker(staker).claimFees(feeDistro, feeToken);\r\n//         //send fee rewards to reward contract\r\n//         uint256 _balance = IERC20(feeToken).balanceOf(address(this));\r\n//         IERC20(feeToken).safeTransfer(lockFees, _balance);\r\n//         IRewards(lockFees).queueNewRewards(_balance);\r\n//         return true;\r\n//     }\r\n\r\n//     //callback from reward contract when crv is received.\r\n//     function rewardClaimed(uint256 _pid, address _address, uint256 _amount) external returns(bool){\r\n//         address rewardContract = poolInfo[_pid].crvRewards;\r\n//         require(msg.sender == rewardContract || msg.sender == lockRewards, \"!auth\");\r\n\r\n//         //mint reward tokens\r\n//         ITokenMinter(minter).mint(_address,_amount);\r\n        \r\n//         return true;\r\n//     }\r\n\r\n// }\r\n\r\n\r\n// File contracts/Misc_AMOs/convex/IConvexBaseRewardPool.sol\r\n\r\n\r\ninterface IConvexBaseRewardPool {\r\n  function addExtraReward(address _reward) external returns (bool);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function clearExtraRewards() external;\r\n  function currentRewards() external view returns (uint256);\r\n  function donate(uint256 _amount) external returns (bool);\r\n  function duration() external view returns (uint256);\r\n  function earned(address account) external view returns (uint256);\r\n  function extraRewards(uint256) external view returns (address);\r\n  function extraRewardsLength() external view returns (uint256);\r\n  function getReward() external returns (bool);\r\n  function getReward(address _account, bool _claimExtras) external returns (bool);\r\n  function historicalRewards() external view returns (uint256);\r\n  function lastTimeRewardApplicable() external view returns (uint256);\r\n  function lastUpdateTime() external view returns (uint256);\r\n  function newRewardRatio() external view returns (uint256);\r\n  function operator() external view returns (address);\r\n  function periodFinish() external view returns (uint256);\r\n  function pid() external view returns (uint256);\r\n  function queueNewRewards(uint256 _rewards) external returns (bool);\r\n  function queuedRewards() external view returns (uint256);\r\n  function rewardManager() external view returns (address);\r\n  function rewardPerToken() external view returns (uint256);\r\n  function rewardPerTokenStored() external view returns (uint256);\r\n  function rewardRate() external view returns (uint256);\r\n  function rewardToken() external view returns (address);\r\n  function rewards(address) external view returns (uint256);\r\n  function stake(uint256 _amount) external returns (bool);\r\n  function stakeAll() external returns (bool);\r\n  function stakeFor(address _for, uint256 _amount) external returns (bool);\r\n  function stakingToken() external view returns (address);\r\n  function totalSupply() external view returns (uint256);\r\n  function userRewardPerTokenPaid(address) external view returns (uint256);\r\n  function withdraw(uint256 amount, bool claim) external returns (bool);\r\n  function withdrawAll(bool claim) external;\r\n  function withdrawAllAndUnwrap(bool claim) external;\r\n  function withdrawAndUnwrap(uint256 amount, bool claim) external returns (bool);\r\n}\r\n\r\n\r\n// File contracts/Misc_AMOs/convex/IVirtualBalanceRewardPool.sol\r\n\r\n\r\ninterface IVirtualBalanceRewardPool {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function currentRewards() external view returns (uint256);\r\n    function deposits() external view returns (address);\r\n    function donate(uint256 _amount) external returns (bool);\r\n    function duration() external view returns (uint256);\r\n    function earned(address account) external view returns (uint256);\r\n    function getReward() external;\r\n    function getReward(address _account) external;\r\n    function historicalRewards() external view returns (uint256);\r\n    function lastTimeRewardApplicable() external view returns (uint256);\r\n    function lastUpdateTime() external view returns (uint256);\r\n    function newRewardRatio() external view returns (uint256);\r\n    function operator() external view returns (address);\r\n    function periodFinish() external view returns (uint256);\r\n    function queueNewRewards(uint256 _rewards) external;\r\n    function queuedRewards() external view returns (uint256);\r\n    function rewardPerToken() external view returns (uint256);\r\n    function rewardPerTokenStored() external view returns (uint256);\r\n    function rewardRate() external view returns (uint256);\r\n    function rewardToken() external view returns (address);\r\n    function rewards(address) external view returns (uint256);\r\n    function stake(address _account, uint256 amount) external;\r\n    function totalSupply() external view returns (uint256);\r\n    function userRewardPerTokenPaid(address) external view returns (uint256);\r\n    function withdraw(address _account, uint256 amount) external;\r\n}\r\n\r\n\r\n// File contracts/Misc_AMOs/convex/IConvexClaimZap.sol\r\n\r\n\r\ninterface IConvexClaimZap {\r\n  function chefRewards() external view returns (address);\r\n  function claimRewards(address[] calldata rewardContracts, uint256[] calldata chefIds, bool claimCvx, bool claimCvxStake, bool claimcvxCrv, uint256 depositCrvMaxAmount, uint256 depositCvxMaxAmount) external;\r\n  function crv() external view returns (address);\r\n  function crvDeposit() external view returns (address);\r\n  function cvx() external view returns (address);\r\n  function cvxCrv() external view returns (address);\r\n  function cvxCrvRewards() external view returns (address);\r\n  function cvxRewards() external view returns (address);\r\n  function owner() external view returns (address);\r\n  function setApprovals() external;\r\n  function setChefRewards(address _rewards) external;\r\n}\r\n\r\n\r\n\r\n// /**\r\n//  * @dev Collection of functions related to the address type\r\n//  */\r\n// library Address {\r\n//     /**\r\n//      * @dev Returns true if `account` is a contract.\r\n//      *\r\n//      * [IMPORTANT]\r\n//      * ====\r\n//      * It is unsafe to assume that an address for which this function returns\r\n//      * false is an externally-owned account (EOA) and not a contract.\r\n//      *\r\n//      * Among others, `isContract` will return false for the following\r\n//      * types of addresses:\r\n//      *\r\n//      *  - an externally-owned account\r\n//      *  - a contract in construction\r\n//      *  - an address where a contract will be created\r\n//      *  - an address where a contract lived, but was destroyed\r\n//      * ====\r\n//      */\r\n//     function isContract(address account) internal view returns (bool) {\r\n//         // This method relies on extcodesize, which returns 0 for contracts in\r\n//         // construction, since the code is only stored at the end of the\r\n//         // constructor execution.\r\n\r\n//         uint256 size;\r\n//         // solhint-disable-next-line no-inline-assembly\r\n//         assembly { size := extcodesize(account) }\r\n//         return size > 0;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n//      * `recipient`, forwarding all available gas and reverting on errors.\r\n//      *\r\n//      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n//      * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n//      * imposed by `transfer`, making them unable to receive funds via\r\n//      * `transfer`. {sendValue} removes this limitation.\r\n//      *\r\n//      * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n//      *\r\n//      * IMPORTANT: because control is transferred to `recipient`, care must be\r\n//      * taken to not create reentrancy vulnerabilities. Consider using\r\n//      * {ReentrancyGuard} or the\r\n//      * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n//      */\r\n//     function sendValue(address payable recipient, uint256 amount) internal {\r\n//         require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n//         // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n//         (bool success, ) = recipient.call{ value: amount }(\"\");\r\n//         require(success, \"Address: unable to send value, recipient may have reverted\");\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Performs a Solidity function call using a low level `call`. A\r\n//      * plain`call` is an unsafe replacement for a function call: use this\r\n//      * function instead.\r\n//      *\r\n//      * If `target` reverts with a revert reason, it is bubbled up by this\r\n//      * function (like regular Solidity function calls).\r\n//      *\r\n//      * Returns the raw returned data. To convert to the expected return value,\r\n//      * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - `target` must be a contract.\r\n//      * - calling `target` with `data` must not revert.\r\n//      *\r\n//      * _Available since v3.1._\r\n//      */\r\n//     function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n//       return functionCall(target, data, \"Address: low-level call failed\");\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n//      * `errorMessage` as a fallback revert reason when `target` reverts.\r\n//      *\r\n//      * _Available since v3.1._\r\n//      */\r\n//     function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n//         return functionCallWithValue(target, data, 0, errorMessage);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n//      * but also transferring `value` wei to `target`.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - the calling contract must have an ETH balance of at least `value`.\r\n//      * - the called Solidity function must be `payable`.\r\n//      *\r\n//      * _Available since v3.1._\r\n//      */\r\n//     function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n//         return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n//      * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n//      *\r\n//      * _Available since v3.1._\r\n//      */\r\n//     function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n//         require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n//         require(isContract(target), \"Address: call to non-contract\");\r\n\r\n//         // solhint-disable-next-line avoid-low-level-calls\r\n//         (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n//         return _verifyCallResult(success, returndata, errorMessage);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n//      * but performing a static call.\r\n//      *\r\n//      * _Available since v3.3._\r\n//      */\r\n//     function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n//         return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n//      * but performing a static call.\r\n//      *\r\n//      * _Available since v3.3._\r\n//      */\r\n//     function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n//         require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n//         // solhint-disable-next-line avoid-low-level-calls\r\n//         (bool success, bytes memory returndata) = target.staticcall(data);\r\n//         return _verifyCallResult(success, returndata, errorMessage);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n//      * but performing a delegate call.\r\n//      *\r\n//      * _Available since v3.4._\r\n//      */\r\n//     function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n//         return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n//      * but performing a delegate call.\r\n//      *\r\n//      * _Available since v3.4._\r\n//      */\r\n//     function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n//         require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n//         // solhint-disable-next-line avoid-low-level-calls\r\n//         (bool success, bytes memory returndata) = target.delegatecall(data);\r\n//         return _verifyCallResult(success, returndata, errorMessage);\r\n//     }\r\n\r\n//     function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n//         if (success) {\r\n//             return returndata;\r\n//         } else {\r\n//             // Look for revert reason and bubble it up if present\r\n//             if (returndata.length > 0) {\r\n//                 // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n//                 // solhint-disable-next-line no-inline-assembly\r\n//                 assembly {\r\n//                     let returndata_size := mload(returndata)\r\n//                     revert(add(32, returndata), returndata_size)\r\n//                 }\r\n//             } else {\r\n//                 revert(errorMessage);\r\n//             }\r\n//         }\r\n//     }\r\n// }\r\n\r\n// // File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\n// /**\r\n//  * @dev Interface of the ERC20 standard as defined in the EIP.\r\n//  */\r\n// interface IERC20 {\r\n//     /**\r\n//      * @dev Returns the amount of tokens in existence.\r\n//      */\r\n//     function totalSupply() external view returns (uint256);\r\n\r\n//     /**\r\n//      * @dev Returns the amount of tokens owned by `account`.\r\n//      */\r\n//     function balanceOf(address account) external view returns (uint256);\r\n\r\n//     /**\r\n//      * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n//      *\r\n//      * Returns a boolean value indicating whether the operation succeeded.\r\n//      *\r\n//      * Emits a {Transfer} event.\r\n//      */\r\n//     function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n//     /**\r\n//      * @dev Returns the remaining number of tokens that `spender` will be\r\n//      * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n//      * zero by default.\r\n//      *\r\n//      * This value changes when {approve} or {transferFrom} are called.\r\n//      */\r\n//     function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n//     /**\r\n//      * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n//      *\r\n//      * Returns a boolean value indicating whether the operation succeeded.\r\n//      *\r\n//      * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n//      * that someone may use both the old and the new allowance by unfortunate\r\n//      * transaction ordering. One possible solution to mitigate this race\r\n//      * condition is to first reduce the spender's allowance to 0 and set the\r\n//      * desired value afterwards:\r\n//      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n//      *\r\n//      * Emits an {Approval} event.\r\n//      */\r\n//     function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n//     /**\r\n//      * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n//      * allowance mechanism. `amount` is then deducted from the caller's\r\n//      * allowance.\r\n//      *\r\n//      * Returns a boolean value indicating whether the operation succeeded.\r\n//      *\r\n//      * Emits a {Transfer} event.\r\n//      */\r\n//     function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n//     /**\r\n//      * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n//      * another (`to`).\r\n//      *\r\n//      * Note that `value` may be zero.\r\n//      */\r\n//     event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n//     /**\r\n//      * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n//      * a call to {approve}. `value` is the new allowance.\r\n//      */\r\n//     event Approval(address indexed owner, address indexed spender, uint256 value);\r\n// }\r\n\r\n\r\n// // File: node_modules\\@openzeppelin\\contracts\\math\\SafeMath.sol\r\n\r\n// /**\r\n//  * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n//  * checks.\r\n//  *\r\n//  * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n//  * in bugs, because programmers usually assume that an overflow raises an\r\n//  * error, which is the standard behavior in high level programming languages.\r\n//  * `SafeMath` restores this intuition by reverting the transaction when an\r\n//  * operation overflows.\r\n//  *\r\n//  * Using this library instead of the unchecked operations eliminates an entire\r\n//  * class of bugs, so it's recommended to use it always.\r\n//  */\r\n// library SafeMath {\r\n//     /**\r\n//      * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n//      *\r\n//      * _Available since v3.4._\r\n//      */\r\n//     function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n//         uint256 c = a + b;\r\n//         if (c < a) return (false, 0);\r\n//         return (true, c);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n//      *\r\n//      * _Available since v3.4._\r\n//      */\r\n//     function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n//         if (b > a) return (false, 0);\r\n//         return (true, a - b);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n//      *\r\n//      * _Available since v3.4._\r\n//      */\r\n//     function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n//         // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n//         // benefit is lost if 'b' is also tested.\r\n//         // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n//         if (a == 0) return (true, 0);\r\n//         uint256 c = a * b;\r\n//         if (c / a != b) return (false, 0);\r\n//         return (true, c);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n//      *\r\n//      * _Available since v3.4._\r\n//      */\r\n//     function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n//         if (b == 0) return (false, 0);\r\n//         return (true, a / b);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n//      *\r\n//      * _Available since v3.4._\r\n//      */\r\n//     function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n//         if (b == 0) return (false, 0);\r\n//         return (true, a % b);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the addition of two unsigned integers, reverting on\r\n//      * overflow.\r\n//      *\r\n//      * Counterpart to Solidity's `+` operator.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - Addition cannot overflow.\r\n//      */\r\n//     function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         uint256 c = a + b;\r\n//         require(c >= a, \"SafeMath: addition overflow\");\r\n//         return c;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the subtraction of two unsigned integers, reverting on\r\n//      * overflow (when the result is negative).\r\n//      *\r\n//      * Counterpart to Solidity's `-` operator.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - Subtraction cannot overflow.\r\n//      */\r\n//     function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         require(b <= a, \"SafeMath: subtraction overflow\");\r\n//         return a - b;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the multiplication of two unsigned integers, reverting on\r\n//      * overflow.\r\n//      *\r\n//      * Counterpart to Solidity's `*` operator.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - Multiplication cannot overflow.\r\n//      */\r\n//     function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         if (a == 0) return 0;\r\n//         uint256 c = a * b;\r\n//         require(c / a == b, \"SafeMath: multiplication overflow\");\r\n//         return c;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the integer division of two unsigned integers, reverting on\r\n//      * division by zero. The result is rounded towards zero.\r\n//      *\r\n//      * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n//      * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n//      * uses an invalid opcode to revert (consuming all remaining gas).\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - The divisor cannot be zero.\r\n//      */\r\n//     function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         require(b > 0, \"SafeMath: division by zero\");\r\n//         return a / b;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n//      * reverting when dividing by zero.\r\n//      *\r\n//      * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n//      * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n//      * invalid opcode to revert (consuming all remaining gas).\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - The divisor cannot be zero.\r\n//      */\r\n//     function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         require(b > 0, \"SafeMath: modulo by zero\");\r\n//         return a % b;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n//      * overflow (when the result is negative).\r\n//      *\r\n//      * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n//      * message unnecessarily. For custom revert reasons use {trySub}.\r\n//      *\r\n//      * Counterpart to Solidity's `-` operator.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - Subtraction cannot overflow.\r\n//      */\r\n//     function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n//         require(b <= a, errorMessage);\r\n//         return a - b;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n//      * division by zero. The result is rounded towards zero.\r\n//      *\r\n//      * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n//      * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n//      *\r\n//      * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n//      * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n//      * uses an invalid opcode to revert (consuming all remaining gas).\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - The divisor cannot be zero.\r\n//      */\r\n//     function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n//         require(b > 0, errorMessage);\r\n//         return a / b;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n//      * reverting with custom message when dividing by zero.\r\n//      *\r\n//      * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n//      * message unnecessarily. For custom revert reasons use {tryMod}.\r\n//      *\r\n//      * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n//      * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n//      * invalid opcode to revert (consuming all remaining gas).\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - The divisor cannot be zero.\r\n//      */\r\n//     function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n//         require(b > 0, errorMessage);\r\n//         return a % b;\r\n//     }\r\n// }\r\n\r\n\r\n// // File: @openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol\r\n\r\n\r\n\r\n\r\n// /**\r\n//  * @title SafeERC20\r\n//  * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n//  * contract returns false). Tokens that return no value (and instead revert or\r\n//  * throw on failure) are also supported, non-reverting calls are assumed to be\r\n//  * successful.\r\n//  * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n//  * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n//  */\r\n// library SafeERC20 {\r\n//     using SafeMath for uint256;\r\n//     using Address for address;\r\n\r\n//     function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n//         _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n//     }\r\n\r\n//     function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n//         _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Deprecated. This function has issues similar to the ones found in\r\n//      * {IERC20-approve}, and its usage is discouraged.\r\n//      *\r\n//      * Whenever possible, use {safeIncreaseAllowance} and\r\n//      * {safeDecreaseAllowance} instead.\r\n//      */\r\n//     function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n//         // safeApprove should only be called when setting an initial allowance,\r\n//         // or when resetting it to zero. To increase and decrease it, use\r\n//         // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n//         // solhint-disable-next-line max-line-length\r\n//         require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n//             \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n//         );\r\n//         _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n//     }\r\n\r\n//     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n//         uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n//         _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n//     }\r\n\r\n//     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n//         uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n//         _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n//      * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n//      * @param token The token targeted by the call.\r\n//      * @param data The call data (encoded using abi.encode or one of its variants).\r\n//      */\r\n//     function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n//         // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n//         // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n//         // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n//         bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n//         if (returndata.length > 0) { // Return data is optional\r\n//             // solhint-disable-next-line max-line-length\r\n//             require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n//         }\r\n//     }\r\n// }\r\n\r\n// // File: contracts\\ClaimZap.sol\r\n\r\n\r\n// library Math {\r\n//     /**\r\n//      * @dev Returns the smallest of two numbers.\r\n//      */\r\n//     function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         return a < b ? a : b;\r\n//     }\r\n// }\r\n\r\n// interface IBasicRewards{\r\n//     function getReward(address _account, bool _claimExtras) external;\r\n//     function stakeFor(address, uint256) external;\r\n// }\r\n\r\n// interface ICvxRewards{\r\n//     function getReward(address _account, bool _claimExtras, bool _stake) external;\r\n// }\r\n\r\n// interface IChefRewards{\r\n//     function claim(uint256 _pid, address _account) external;\r\n// }\r\n\r\n// interface ICvxCrvDeposit{\r\n//     function deposit(uint256, bool) external;\r\n// }\r\n\r\n// contract ClaimZap{\r\n//     using SafeERC20 for IERC20;\r\n//     using Address for address;\r\n//     using SafeMath for uint256;\r\n\r\n//     address public constant crv = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\r\n//     address public constant cvx = address(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\r\n//     address public constant cvxCrv = address(0x62B9c7356A2Dc64a1969e19C23e4f579F9810Aa7);\r\n//     address public constant crvDeposit = address(0x8014595F2AB54cD7c604B00E9fb932176fDc86Ae);\r\n//     address public constant cvxCrvRewards = address(0x3Fe65692bfCD0e6CF84cB1E7d24108E434A7587e);\r\n//     address public constant cvxRewards = address(0xCF50b810E57Ac33B91dCF525C6ddd9881B139332);\r\n\r\n//     address public immutable owner;\r\n//     address public chefRewards;\r\n\r\n//     constructor () public {\r\n//         owner = msg.sender;\r\n//         chefRewards = address(0x5F465e9fcfFc217c5849906216581a657cd60605);\r\n//     }\r\n\r\n//     function setChefRewards(address _rewards) external {\r\n//         require(msg.sender == owner, \"!auth\");\r\n//         chefRewards = _rewards;\r\n//     }\r\n\r\n//     function setApprovals() external {\r\n//         require(msg.sender == owner, \"!auth\");\r\n//         IERC20(crv).safeApprove(crvDeposit, 0);\r\n//         IERC20(crv).safeApprove(crvDeposit, uint256(-1));\r\n//         IERC20(cvx).safeApprove(cvxRewards, 0);\r\n//         IERC20(cvx).safeApprove(cvxRewards, uint256(-1));\r\n//         IERC20(cvxCrv).safeApprove(cvxCrvRewards, 0);\r\n//         IERC20(cvxCrv).safeApprove(cvxCrvRewards, uint256(-1));\r\n//     }\r\n\r\n//     function claimRewards(\r\n//         address[] calldata rewardContracts,\r\n//         uint256[] calldata chefIds,\r\n//         bool claimCvx,\r\n//         bool claimCvxStake,\r\n//         bool claimcvxCrv,\r\n//         uint256 depositCrvMaxAmount,\r\n//         uint256 depositCvxMaxAmount\r\n//         ) external{\r\n\r\n//         //claim from main curve LP pools\r\n//         for(uint256 i = 0; i < rewardContracts.length; i++){\r\n//             if(rewardContracts[i] == address(0)) break;\r\n//             IBasicRewards(rewardContracts[i]).getReward(msg.sender,true);\r\n//         }\r\n\r\n//         //claim from master chef\r\n//         for(uint256 i = 0; i < chefIds.length; i++){\r\n//             IChefRewards(chefRewards).claim(chefIds[i],msg.sender);\r\n//         }\r\n\r\n//         //claim (and stake) from cvx rewards\r\n//         if(claimCvxStake){\r\n//             ICvxRewards(cvxRewards).getReward(msg.sender,true,true);\r\n//         }else if(claimCvx){\r\n//             ICvxRewards(cvxRewards).getReward(msg.sender,true,false);\r\n//         }\r\n\r\n//         //claim from cvxCrv rewards\r\n//         if(claimcvxCrv){\r\n//             IBasicRewards(cvxCrvRewards).getReward(msg.sender,true);\r\n//         }\r\n\r\n//         //lock upto given amount of crv and stake\r\n//         if(depositCrvMaxAmount > 0){\r\n//             uint256 crvBalance = IERC20(crv).balanceOf(msg.sender);\r\n//             crvBalance = Math.min(crvBalance, depositCrvMaxAmount);\r\n//             if(crvBalance > 0){\r\n//                 //pull crv\r\n//                 IERC20(crv).safeTransferFrom(msg.sender, address(this), crvBalance);\r\n//                 //deposit\r\n//                 ICvxCrvDeposit(crvDeposit).deposit(crvBalance,true);\r\n//                 //get cvxamount\r\n//                 uint256 cvxCrvBalance = IERC20(cvxCrv).balanceOf(address(this));\r\n//                 //stake for msg.sender\r\n//                 IBasicRewards(cvxCrvRewards).stakeFor(msg.sender, cvxCrvBalance);\r\n//             }\r\n//         }\r\n\r\n//         //stake upto given amount of cvx\r\n//         if(depositCvxMaxAmount > 0){\r\n//             uint256 cvxBalance = IERC20(cvx).balanceOf(msg.sender);\r\n//             cvxBalance = Math.min(cvxBalance, depositCvxMaxAmount);\r\n//             if(cvxBalance > 0){\r\n//                 //pull cvx\r\n//                 IERC20(cvx).safeTransferFrom(msg.sender, address(this), cvxBalance);\r\n//                 //stake for msg.sender\r\n//                 IBasicRewards(cvxRewards).stakeFor(msg.sender, cvxBalance);\r\n//             }\r\n//         }\r\n//     }\r\n// }\r\n\r\n\r\n// File contracts/Misc_AMOs/convex/IcvxRewardPool.sol\r\n\r\n\r\ninterface IcvxRewardPool {\r\n  function FEE_DENOMINATOR() external view returns (uint256);\r\n  function addExtraReward(address _reward) external;\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function clearExtraRewards() external;\r\n  function crvDeposits() external view returns (address);\r\n  function currentRewards() external view returns (uint256);\r\n  function cvxCrvRewards() external view returns (address);\r\n  function cvxCrvToken() external view returns (address);\r\n  function donate(uint256 _amount) external returns (bool);\r\n  function duration() external view returns (uint256);\r\n  function earned(address account) external view returns (uint256);\r\n  function extraRewards(uint256) external view returns (address);\r\n  function extraRewardsLength() external view returns (uint256);\r\n  function getReward(bool _stake) external;\r\n  function getReward(address _account, bool _claimExtras, bool _stake) external;\r\n  function historicalRewards() external view returns (uint256);\r\n  function lastTimeRewardApplicable() external view returns (uint256);\r\n  function lastUpdateTime() external view returns (uint256);\r\n  function newRewardRatio() external view returns (uint256);\r\n  function operator() external view returns (address);\r\n  function periodFinish() external view returns (uint256);\r\n  function queueNewRewards(uint256 _rewards) external;\r\n  function queuedRewards() external view returns (uint256);\r\n  function rewardManager() external view returns (address);\r\n  function rewardPerToken() external view returns (uint256);\r\n  function rewardPerTokenStored() external view returns (uint256);\r\n  function rewardRate() external view returns (uint256);\r\n  function rewardToken() external view returns (address);\r\n  function rewards(address) external view returns (uint256);\r\n  function stake(uint256 _amount) external;\r\n  function stakeAll() external;\r\n  function stakeFor(address _for, uint256 _amount) external;\r\n  function stakingToken() external view returns (address);\r\n  function totalSupply() external view returns (uint256);\r\n  function userRewardPerTokenPaid(address) external view returns (uint256);\r\n  function withdraw(uint256 _amount, bool claim) external;\r\n  function withdrawAll(bool claim) external;\r\n}\r\n\r\n\r\n// /**\r\n//  * @dev Standard math utilities missing in the Solidity language.\r\n//  */\r\n// library MathUtil {\r\n//     /**\r\n//      * @dev Returns the smallest of two numbers.\r\n//      */\r\n//     function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         return a < b ? a : b;\r\n//     }\r\n// }\r\n\r\n// contract ReentrancyGuard {\r\n//     uint256 private _guardCounter;\r\n\r\n//     constructor () internal {\r\n//         _guardCounter = 1;\r\n//     }\r\n\r\n//     modifier nonReentrant() {\r\n//         _guardCounter += 1;\r\n//         uint256 localCounter = _guardCounter;\r\n//         _;\r\n//         require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n//     }\r\n// }\r\n\r\n// interface ICurveGauge {\r\n//     function deposit(uint256) external;\r\n//     function balanceOf(address) external view returns (uint256);\r\n//     function withdraw(uint256) external;\r\n//     function claim_rewards() external;\r\n//     function reward_tokens(uint256) external view returns(address);//v2\r\n//     function rewarded_token() external view returns(address);//v1\r\n// }\r\n\r\n// interface ICurveVoteEscrow {\r\n//     function create_lock(uint256, uint256) external;\r\n//     function increase_amount(uint256) external;\r\n//     function increase_unlock_time(uint256) external;\r\n//     function withdraw() external;\r\n//     function smart_wallet_checker() external view returns (address);\r\n// }\r\n\r\n// interface IWalletChecker {\r\n//     function check(address) external view returns (bool);\r\n// }\r\n\r\n// interface IVoting{\r\n//     function vote(uint256, bool, bool) external; //voteId, support, executeIfDecided\r\n//     function getVote(uint256) external view returns(bool,bool,uint64,uint64,uint64,uint64,uint256,uint256,uint256,bytes memory); \r\n//     function vote_for_gauge_weights(address,uint256) external;\r\n// }\r\n\r\n// interface IMinter{\r\n//     function mint(address) external;\r\n// }\r\n\r\n// interface IRegistry{\r\n//     function get_registry() external view returns(address);\r\n//     function get_address(uint256 _id) external view returns(address);\r\n//     function gauge_controller() external view returns(address);\r\n//     function get_lp_token(address) external view returns(address);\r\n//     function get_gauges(address) external view returns(address[10] memory,uint128[10] memory);\r\n// }\r\n\r\n// interface IStaker{\r\n//     function deposit(address, address) external;\r\n//     function withdraw(address) external;\r\n//     function withdraw(address, address, uint256) external;\r\n//     function withdrawAll(address, address) external;\r\n//     function createLock(uint256, uint256) external;\r\n//     function increaseAmount(uint256) external;\r\n//     function increaseTime(uint256) external;\r\n//     function release() external;\r\n//     function claimCrv(address) external returns (uint256);\r\n//     function claimRewards(address) external;\r\n//     function claimFees(address,address) external;\r\n//     function setStashAccess(address, bool) external;\r\n//     function vote(uint256,address,bool) external;\r\n//     function voteGaugeWeight(address,uint256) external;\r\n//     function balanceOfPool(address) external view returns (uint256);\r\n//     function operator() external view returns (address);\r\n//     function execute(address _to, uint256 _value, bytes calldata _data) external returns (bool, bytes memory);\r\n// }\r\n\r\n// interface IRewards{\r\n//     function stake(address, uint256) external;\r\n//     function stakeFor(address, uint256) external;\r\n//     function withdraw(address, uint256) external;\r\n//     function exit(address) external;\r\n//     function getReward(address) external;\r\n//     function queueNewRewards(uint256) external;\r\n//     function notifyRewardAmount(uint256) external;\r\n//     function addExtraReward(address) external;\r\n//     function stakingToken() external returns (address);\r\n// }\r\n\r\n// interface IStash{\r\n//     function stashRewards() external returns (bool);\r\n//     function processStash() external returns (bool);\r\n//     function claimRewards() external returns (bool);\r\n// }\r\n\r\n// interface IFeeDistro{\r\n//     function claim() external;\r\n//     function token() external view returns(address);\r\n// }\r\n\r\n// interface ITokenMinter{\r\n//     function mint(address,uint256) external;\r\n//     function burn(address,uint256) external;\r\n// }\r\n\r\n// interface IDeposit{\r\n//     function isShutdown() external view returns(bool);\r\n//     function balanceOf(address _account) external view returns(uint256);\r\n//     function totalSupply() external view returns(uint256);\r\n//     function poolInfo(uint256) external view returns(address,address,address,address,address, bool);\r\n//     function rewardClaimed(uint256,address,uint256) external;\r\n//     function withdrawTo(uint256,uint256,address) external;\r\n//     function claimRewards(uint256,address) external returns(bool);\r\n//     function rewardArbitrator() external returns(address);\r\n// }\r\n\r\n// interface ICrvDeposit{\r\n//     function deposit(uint256, bool) external;\r\n//     function lockIncentive() external view returns(uint256);\r\n// }\r\n\r\n// interface IRewardFactory{\r\n//     function setAccess(address,bool) external;\r\n//     function CreateCrvRewards(uint256,address) external returns(address);\r\n//     function CreateTokenRewards(address,address,address) external returns(address);\r\n//     function activeRewardCount(address) external view returns(uint256);\r\n//     function addActiveReward(address,uint256) external returns(bool);\r\n//     function removeActiveReward(address,uint256) external returns(bool);\r\n// }\r\n\r\n// interface IStashFactory{\r\n//     function CreateStash(uint256,address,address,uint256) external returns(address);\r\n// }\r\n\r\n// interface ITokenFactory{\r\n//     function CreateDepositToken(address) external returns(address);\r\n// }\r\n\r\n// interface IPools{\r\n//     function addPool(address _lptoken, address _gauge, uint256 _stashVersion) external returns(bool);\r\n//     function shutdownPool(uint256 _pid) external returns(bool);\r\n//     function poolInfo(uint256) external view returns(address,address,address,address,address,bool);\r\n//     function poolLength() external view returns (uint256);\r\n//     function gaugeMap(address) external view returns(bool);\r\n//     function setPoolManager(address _poolM) external;\r\n// }\r\n\r\n\r\n\r\n// /**\r\n//  * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n//  * checks.\r\n//  *\r\n//  * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n//  * in bugs, because programmers usually assume that an overflow raises an\r\n//  * error, which is the standard behavior in high level programming languages.\r\n//  * `SafeMath` restores this intuition by reverting the transaction when an\r\n//  * operation overflows.\r\n//  *\r\n//  * Using this library instead of the unchecked operations eliminates an entire\r\n//  * class of bugs, so it's recommended to use it always.\r\n//  */\r\n// library SafeMath {\r\n//     /**\r\n//      * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n//      *\r\n//      * _Available since v3.4._\r\n//      */\r\n//     function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n//         uint256 c = a + b;\r\n//         if (c < a) return (false, 0);\r\n//         return (true, c);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n//      *\r\n//      * _Available since v3.4._\r\n//      */\r\n//     function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n//         if (b > a) return (false, 0);\r\n//         return (true, a - b);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n//      *\r\n//      * _Available since v3.4._\r\n//      */\r\n//     function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n//         // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n//         // benefit is lost if 'b' is also tested.\r\n//         // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n//         if (a == 0) return (true, 0);\r\n//         uint256 c = a * b;\r\n//         if (c / a != b) return (false, 0);\r\n//         return (true, c);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n//      *\r\n//      * _Available since v3.4._\r\n//      */\r\n//     function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n//         if (b == 0) return (false, 0);\r\n//         return (true, a / b);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n//      *\r\n//      * _Available since v3.4._\r\n//      */\r\n//     function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n//         if (b == 0) return (false, 0);\r\n//         return (true, a % b);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the addition of two unsigned integers, reverting on\r\n//      * overflow.\r\n//      *\r\n//      * Counterpart to Solidity's `+` operator.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - Addition cannot overflow.\r\n//      */\r\n//     function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         uint256 c = a + b;\r\n//         require(c >= a, \"SafeMath: addition overflow\");\r\n//         return c;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the subtraction of two unsigned integers, reverting on\r\n//      * overflow (when the result is negative).\r\n//      *\r\n//      * Counterpart to Solidity's `-` operator.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - Subtraction cannot overflow.\r\n//      */\r\n//     function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         require(b <= a, \"SafeMath: subtraction overflow\");\r\n//         return a - b;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the multiplication of two unsigned integers, reverting on\r\n//      * overflow.\r\n//      *\r\n//      * Counterpart to Solidity's `*` operator.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - Multiplication cannot overflow.\r\n//      */\r\n//     function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         if (a == 0) return 0;\r\n//         uint256 c = a * b;\r\n//         require(c / a == b, \"SafeMath: multiplication overflow\");\r\n//         return c;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the integer division of two unsigned integers, reverting on\r\n//      * division by zero. The result is rounded towards zero.\r\n//      *\r\n//      * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n//      * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n//      * uses an invalid opcode to revert (consuming all remaining gas).\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - The divisor cannot be zero.\r\n//      */\r\n//     function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         require(b > 0, \"SafeMath: division by zero\");\r\n//         return a / b;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n//      * reverting when dividing by zero.\r\n//      *\r\n//      * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n//      * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n//      * invalid opcode to revert (consuming all remaining gas).\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - The divisor cannot be zero.\r\n//      */\r\n//     function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         require(b > 0, \"SafeMath: modulo by zero\");\r\n//         return a % b;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n//      * overflow (when the result is negative).\r\n//      *\r\n//      * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n//      * message unnecessarily. For custom revert reasons use {trySub}.\r\n//      *\r\n//      * Counterpart to Solidity's `-` operator.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - Subtraction cannot overflow.\r\n//      */\r\n//     function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n//         require(b <= a, errorMessage);\r\n//         return a - b;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n//      * division by zero. The result is rounded towards zero.\r\n//      *\r\n//      * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n//      * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n//      *\r\n//      * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n//      * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n//      * uses an invalid opcode to revert (consuming all remaining gas).\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - The divisor cannot be zero.\r\n//      */\r\n//     function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n//         require(b > 0, errorMessage);\r\n//         return a / b;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n//      * reverting with custom message when dividing by zero.\r\n//      *\r\n//      * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n//      * message unnecessarily. For custom revert reasons use {tryMod}.\r\n//      *\r\n//      * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n//      * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n//      * invalid opcode to revert (consuming all remaining gas).\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - The divisor cannot be zero.\r\n//      */\r\n//     function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n//         require(b > 0, errorMessage);\r\n//         return a % b;\r\n//     }\r\n// }\r\n\r\n// // File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\n// /**\r\n//  * @dev Interface of the ERC20 standard as defined in the EIP.\r\n//  */\r\n// interface IERC20 {\r\n//     /**\r\n//      * @dev Returns the amount of tokens in existence.\r\n//      */\r\n//     function totalSupply() external view returns (uint256);\r\n\r\n//     /**\r\n//      * @dev Returns the amount of tokens owned by `account`.\r\n//      */\r\n//     function balanceOf(address account) external view returns (uint256);\r\n\r\n//     /**\r\n//      * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n//      *\r\n//      * Returns a boolean value indicating whether the operation succeeded.\r\n//      *\r\n//      * Emits a {Transfer} event.\r\n//      */\r\n//     function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n//     /**\r\n//      * @dev Returns the remaining number of tokens that `spender` will be\r\n//      * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n//      * zero by default.\r\n//      *\r\n//      * This value changes when {approve} or {transferFrom} are called.\r\n//      */\r\n//     function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n//     /**\r\n//      * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n//      *\r\n//      * Returns a boolean value indicating whether the operation succeeded.\r\n//      *\r\n//      * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n//      * that someone may use both the old and the new allowance by unfortunate\r\n//      * transaction ordering. One possible solution to mitigate this race\r\n//      * condition is to first reduce the spender's allowance to 0 and set the\r\n//      * desired value afterwards:\r\n//      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n//      *\r\n//      * Emits an {Approval} event.\r\n//      */\r\n//     function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n//     /**\r\n//      * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n//      * allowance mechanism. `amount` is then deducted from the caller's\r\n//      * allowance.\r\n//      *\r\n//      * Returns a boolean value indicating whether the operation succeeded.\r\n//      *\r\n//      * Emits a {Transfer} event.\r\n//      */\r\n//     function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n//     /**\r\n//      * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n//      * another (`to`).\r\n//      *\r\n//      * Note that `value` may be zero.\r\n//      */\r\n//     event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n//     /**\r\n//      * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n//      * a call to {approve}. `value` is the new allowance.\r\n//      */\r\n//     event Approval(address indexed owner, address indexed spender, uint256 value);\r\n// }\r\n\r\n// // File: @openzeppelin\\contracts\\utils\\Address.sol\r\n\r\n\r\n// /**\r\n//  * @dev Collection of functions related to the address type\r\n//  */\r\n// library Address {\r\n//     /**\r\n//      * @dev Returns true if `account` is a contract.\r\n//      *\r\n//      * [IMPORTANT]\r\n//      * ====\r\n//      * It is unsafe to assume that an address for which this function returns\r\n//      * false is an externally-owned account (EOA) and not a contract.\r\n//      *\r\n//      * Among others, `isContract` will return false for the following\r\n//      * types of addresses:\r\n//      *\r\n//      *  - an externally-owned account\r\n//      *  - a contract in construction\r\n//      *  - an address where a contract will be created\r\n//      *  - an address where a contract lived, but was destroyed\r\n//      * ====\r\n//      */\r\n//     function isContract(address account) internal view returns (bool) {\r\n//         // This method relies on extcodesize, which returns 0 for contracts in\r\n//         // construction, since the code is only stored at the end of the\r\n//         // constructor execution.\r\n\r\n//         uint256 size;\r\n//         // solhint-disable-next-line no-inline-assembly\r\n//         assembly { size := extcodesize(account) }\r\n//         return size > 0;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n//      * `recipient`, forwarding all available gas and reverting on errors.\r\n//      *\r\n//      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n//      * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n//      * imposed by `transfer`, making them unable to receive funds via\r\n//      * `transfer`. {sendValue} removes this limitation.\r\n//      *\r\n//      * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n//      *\r\n//      * IMPORTANT: because control is transferred to `recipient`, care must be\r\n//      * taken to not create reentrancy vulnerabilities. Consider using\r\n//      * {ReentrancyGuard} or the\r\n//      * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n//      */\r\n//     function sendValue(address payable recipient, uint256 amount) internal {\r\n//         require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n//         // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n//         (bool success, ) = recipient.call{ value: amount }(\"\");\r\n//         require(success, \"Address: unable to send value, recipient may have reverted\");\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Performs a Solidity function call using a low level `call`. A\r\n//      * plain`call` is an unsafe replacement for a function call: use this\r\n//      * function instead.\r\n//      *\r\n//      * If `target` reverts with a revert reason, it is bubbled up by this\r\n//      * function (like regular Solidity function calls).\r\n//      *\r\n//      * Returns the raw returned data. To convert to the expected return value,\r\n//      * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - `target` must be a contract.\r\n//      * - calling `target` with `data` must not revert.\r\n//      *\r\n//      * _Available since v3.1._\r\n//      */\r\n//     function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n//       return functionCall(target, data, \"Address: low-level call failed\");\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n//      * `errorMessage` as a fallback revert reason when `target` reverts.\r\n//      *\r\n//      * _Available since v3.1._\r\n//      */\r\n//     function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n//         return functionCallWithValue(target, data, 0, errorMessage);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n//      * but also transferring `value` wei to `target`.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - the calling contract must have an ETH balance of at least `value`.\r\n//      * - the called Solidity function must be `payable`.\r\n//      *\r\n//      * _Available since v3.1._\r\n//      */\r\n//     function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n//         return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n//      * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n//      *\r\n//      * _Available since v3.1._\r\n//      */\r\n//     function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n//         require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n//         require(isContract(target), \"Address: call to non-contract\");\r\n\r\n//         // solhint-disable-next-line avoid-low-level-calls\r\n//         (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n//         return _verifyCallResult(success, returndata, errorMessage);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n//      * but performing a static call.\r\n//      *\r\n//      * _Available since v3.3._\r\n//      */\r\n//     function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n//         return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n//      * but performing a static call.\r\n//      *\r\n//      * _Available since v3.3._\r\n//      */\r\n//     function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n//         require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n//         // solhint-disable-next-line avoid-low-level-calls\r\n//         (bool success, bytes memory returndata) = target.staticcall(data);\r\n//         return _verifyCallResult(success, returndata, errorMessage);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n//      * but performing a delegate call.\r\n//      *\r\n//      * _Available since v3.4._\r\n//      */\r\n//     function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n//         return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n//      * but performing a delegate call.\r\n//      *\r\n//      * _Available since v3.4._\r\n//      */\r\n//     function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n//         require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n//         // solhint-disable-next-line avoid-low-level-calls\r\n//         (bool success, bytes memory returndata) = target.delegatecall(data);\r\n//         return _verifyCallResult(success, returndata, errorMessage);\r\n//     }\r\n\r\n//     function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n//         if (success) {\r\n//             return returndata;\r\n//         } else {\r\n//             // Look for revert reason and bubble it up if present\r\n//             if (returndata.length > 0) {\r\n//                 // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n//                 // solhint-disable-next-line no-inline-assembly\r\n//                 assembly {\r\n//                     let returndata_size := mload(returndata)\r\n//                     revert(add(32, returndata), returndata_size)\r\n//                 }\r\n//             } else {\r\n//                 revert(errorMessage);\r\n//             }\r\n//         }\r\n//     }\r\n// }\r\n\r\n\r\n// // File: @openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol\r\n\r\n\r\n\r\n// /**\r\n//  * @title SafeERC20\r\n//  * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n//  * contract returns false). Tokens that return no value (and instead revert or\r\n//  * throw on failure) are also supported, non-reverting calls are assumed to be\r\n//  * successful.\r\n//  * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n//  * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n//  */\r\n// library SafeERC20 {\r\n//     using SafeMath for uint256;\r\n//     using Address for address;\r\n\r\n//     function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n//         _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n//     }\r\n\r\n//     function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n//         _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Deprecated. This function has issues similar to the ones found in\r\n//      * {IERC20-approve}, and its usage is discouraged.\r\n//      *\r\n//      * Whenever possible, use {safeIncreaseAllowance} and\r\n//      * {safeDecreaseAllowance} instead.\r\n//      */\r\n//     function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n//         // safeApprove should only be called when setting an initial allowance,\r\n//         // or when resetting it to zero. To increase and decrease it, use\r\n//         // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n//         // solhint-disable-next-line max-line-length\r\n//         require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n//             \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n//         );\r\n//         _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n//     }\r\n\r\n//     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n//         uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n//         _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n//     }\r\n\r\n//     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n//         uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n//         _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n//      * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n//      * @param token The token targeted by the call.\r\n//      * @param data The call data (encoded using abi.encode or one of its variants).\r\n//      */\r\n//     function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n//         // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n//         // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n//         // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n//         bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n//         if (returndata.length > 0) { // Return data is optional\r\n//             // solhint-disable-next-line max-line-length\r\n//             require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n//         }\r\n//     }\r\n// }\r\n\r\n// // File: contracts\\cvxRewardPool.sol\r\n\r\n// /**\r\n//  *Submitted for verification at Etherscan.io on 2020-07-17\r\n//  */\r\n\r\n// /*\r\n//    ____            __   __        __   _\r\n//   / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\r\n//  _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\r\n// /___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\r\n//      /___/\r\n\r\n// * Synthetix: cvxRewardPool.sol\r\n// *\r\n// * Docs: https://docs.synthetix.io/\r\n// *\r\n// *\r\n// * MIT License\r\n// * ===========\r\n// *\r\n// * Copyright (c) 2020 Synthetix\r\n// *\r\n// * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// * of this software and associated documentation files (the \"Software\"), to deal\r\n// * in the Software without restriction, including without limitation the rights\r\n// * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// * copies of the Software, and to permit persons to whom the Software is\r\n// * furnished to do so, subject to the following conditions:\r\n// *\r\n// * The above copyright notice and this permission notice shall be included in all\r\n// * copies or substantial portions of the Software.\r\n// *\r\n// * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n// */\r\n\r\n\r\n\r\n// contract cvxRewardPool{\r\n//     using SafeERC20 for IERC20;\r\n//     using SafeMath for uint256;\r\n\r\n//     IERC20 public immutable rewardToken;\r\n//     IERC20 public immutable stakingToken;\r\n//     uint256 public constant duration = 7 days;\r\n//     uint256 public constant FEE_DENOMINATOR = 10000;\r\n\r\n//     address public immutable operator;\r\n//     address public immutable crvDeposits;\r\n//     address public immutable cvxCrvRewards;\r\n//     IERC20 public immutable cvxCrvToken;\r\n//     address public immutable rewardManager;\r\n\r\n//     uint256 public periodFinish = 0;\r\n//     uint256 public rewardRate = 0;\r\n//     uint256 public lastUpdateTime;\r\n//     uint256 public rewardPerTokenStored;\r\n//     uint256 public queuedRewards = 0;\r\n//     uint256 public currentRewards = 0;\r\n//     uint256 public historicalRewards = 0;\r\n//     uint256 public constant newRewardRatio = 830;\r\n//     uint256 private _totalSupply;\r\n//     mapping(address => uint256) private _balances;\r\n//     mapping(address => uint256) public userRewardPerTokenPaid;\r\n//     mapping(address => uint256) public rewards;\r\n\r\n//     address[] public extraRewards;\r\n\r\n//     event RewardAdded(uint256 reward);\r\n//     event Staked(address indexed user, uint256 amount);\r\n//     event Withdrawn(address indexed user, uint256 amount);\r\n//     event RewardPaid(address indexed user, uint256 reward);\r\n\r\n//     constructor (\r\n//         address stakingToken_,\r\n//         address rewardToken_,\r\n//         address crvDeposits_,\r\n//         address cvxCrvRewards_,\r\n//         address cvxCrvToken_,\r\n//         address operator_,\r\n//         address rewardManager_\r\n//     ) public {\r\n//         stakingToken = IERC20(stakingToken_);\r\n//         rewardToken = IERC20(rewardToken_);\r\n//         operator = operator_;\r\n//         rewardManager = rewardManager_;\r\n//         crvDeposits = crvDeposits_;\r\n//         cvxCrvRewards = cvxCrvRewards_;\r\n//         cvxCrvToken = IERC20(cvxCrvToken_);\r\n//     }\r\n\r\n//     function totalSupply() public view returns (uint256) {\r\n//         return _totalSupply;\r\n//     }\r\n\r\n//     function balanceOf(address account) public view returns (uint256) {\r\n//         return _balances[account];\r\n//     }\r\n\r\n//     function extraRewardsLength() external view returns (uint256) {\r\n//         return extraRewards.length;\r\n//     }\r\n\r\n//     function addExtraReward(address _reward) external {\r\n//         require(msg.sender == rewardManager, \"!authorized\");\r\n//         require(_reward != address(0),\"!reward setting\");\r\n\r\n//         extraRewards.push(_reward);\r\n//     }\r\n//     function clearExtraRewards() external{\r\n//         require(msg.sender == rewardManager, \"!authorized\");\r\n//         delete extraRewards;\r\n//     }\r\n\r\n//     modifier updateReward(address account) {\r\n//         rewardPerTokenStored = rewardPerToken();\r\n//         lastUpdateTime = lastTimeRewardApplicable();\r\n//         if (account != address(0)) {\r\n//             rewards[account] = earnedReward(account);\r\n//             userRewardPerTokenPaid[account] = rewardPerTokenStored;\r\n//         }\r\n//         _;\r\n//     }\r\n\r\n//     function lastTimeRewardApplicable() internal view returns (uint256) {\r\n//         return MathUtil.min(block.timestamp, periodFinish);\r\n//     }\r\n\r\n//     function rewardPerToken() internal view returns (uint256) {\r\n//         uint256 supply = totalSupply();\r\n//         if (supply == 0) {\r\n//             return rewardPerTokenStored;\r\n//         }\r\n//         return\r\n//             rewardPerTokenStored.add(\r\n//                 lastTimeRewardApplicable()\r\n//                     .sub(lastUpdateTime)\r\n//                     .mul(rewardRate)\r\n//                     .mul(1e18)\r\n//                     .div(supply)\r\n//             );\r\n//     }\r\n\r\n//     function earnedReward(address account) internal view returns (uint256) {\r\n//         return\r\n//             balanceOf(account)\r\n//                 .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\r\n//                 .div(1e18)\r\n//                 .add(rewards[account]);\r\n//     }\r\n\r\n//     function earned(address account) external view returns (uint256) {\r\n//         uint256 depositFeeRate = ICrvDeposit(crvDeposits).lockIncentive();\r\n\r\n//         uint256 r = earnedReward(account);\r\n//         uint256 fees = r.mul(depositFeeRate).div(FEE_DENOMINATOR);\r\n        \r\n//         //fees dont apply until whitelist+vecrv lock begins so will report\r\n//         //slightly less value than what is actually received.\r\n//         return r.sub(fees);\r\n//     }\r\n\r\n//     function stake(uint256 _amount)\r\n//         public\r\n//         updateReward(msg.sender)\r\n//     {\r\n//         require(_amount > 0, 'RewardPool : Cannot stake 0');\r\n\r\n//         //also stake to linked rewards\r\n//         uint256 length = extraRewards.length;\r\n//         for(uint i=0; i < length; i++){\r\n//             IRewards(extraRewards[i]).stake(msg.sender, _amount);\r\n//         }\r\n\r\n//         //add supply\r\n//         _totalSupply = _totalSupply.add(_amount);\r\n//         //add to sender balance sheet\r\n//         _balances[msg.sender] = _balances[msg.sender].add(_amount);\r\n//         //take tokens from sender\r\n//         stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n//         emit Staked(msg.sender, _amount);\r\n//     }\r\n\r\n//     function stakeAll() external{\r\n//         uint256 balance = stakingToken.balanceOf(msg.sender);\r\n//         stake(balance);\r\n//     }\r\n\r\n//     function stakeFor(address _for, uint256 _amount)\r\n//         public\r\n//         updateReward(_for)\r\n//     {\r\n//         require(_amount > 0, 'RewardPool : Cannot stake 0');\r\n\r\n//         //also stake to linked rewards\r\n//         uint256 length = extraRewards.length;\r\n//         for(uint i=0; i < length; i++){\r\n//             IRewards(extraRewards[i]).stake(_for, _amount);\r\n//         }\r\n\r\n//          //add supply\r\n//         _totalSupply = _totalSupply.add(_amount);\r\n//         //add to _for's balance sheet\r\n//         _balances[_for] = _balances[_for].add(_amount);\r\n//         //take tokens from sender\r\n//         stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n//         emit Staked(msg.sender, _amount);\r\n//     }\r\n\r\n//     function withdraw(uint256 _amount, bool claim)\r\n//         public\r\n//         updateReward(msg.sender)\r\n//     {\r\n//         require(_amount > 0, 'RewardPool : Cannot withdraw 0');\r\n\r\n//         //also withdraw from linked rewards\r\n//         uint256 length = extraRewards.length;\r\n//         for(uint i=0; i < length; i++){\r\n//             IRewards(extraRewards[i]).withdraw(msg.sender, _amount);\r\n//         }\r\n\r\n//         _totalSupply = _totalSupply.sub(_amount);\r\n//         _balances[msg.sender] = _balances[msg.sender].sub(_amount);\r\n//         stakingToken.safeTransfer(msg.sender, _amount);\r\n//         emit Withdrawn(msg.sender, _amount);\r\n\r\n//         if(claim){\r\n//             getReward(msg.sender,true,false);\r\n//         }\r\n//     }\r\n\r\n//     function withdrawAll(bool claim) external{\r\n//         withdraw(_balances[msg.sender],claim);\r\n//     }\r\n\r\n//     function getReward(address _account, bool _claimExtras, bool _stake) public updateReward(_account){\r\n//         uint256 reward = earnedReward(_account);\r\n//         if (reward > 0) {\r\n//             rewards[_account] = 0;\r\n//             rewardToken.safeApprove(crvDeposits,0);\r\n//             rewardToken.safeApprove(crvDeposits,reward);\r\n//             ICrvDeposit(crvDeposits).deposit(reward,false);\r\n\r\n//             uint256 cvxCrvBalance = cvxCrvToken.balanceOf(address(this));\r\n//             if(_stake){\r\n//                 IERC20(cvxCrvToken).safeApprove(cvxCrvRewards,0);\r\n//                 IERC20(cvxCrvToken).safeApprove(cvxCrvRewards,cvxCrvBalance);\r\n//                 IRewards(cvxCrvRewards).stakeFor(_account,cvxCrvBalance);\r\n//             }else{\r\n//                 cvxCrvToken.safeTransfer(_account, cvxCrvBalance);\r\n//             }\r\n//             emit RewardPaid(_account, cvxCrvBalance);\r\n//         }\r\n\r\n//         //also get rewards from linked rewards\r\n//         if(_claimExtras){\r\n//             uint256 length = extraRewards.length;\r\n//             for(uint i=0; i < length; i++){\r\n//                 IRewards(extraRewards[i]).getReward(_account);\r\n//             }\r\n//         }\r\n//     }\r\n\r\n//     function getReward(bool _stake) external{\r\n//         getReward(msg.sender,true, _stake);\r\n//     }\r\n\r\n//     function donate(uint256 _amount) external returns(bool){\r\n//         IERC20(rewardToken).safeTransferFrom(msg.sender, address(this), _amount);\r\n//         queuedRewards = queuedRewards.add(_amount);\r\n//     }\r\n\r\n//     function queueNewRewards(uint256 _rewards) external{\r\n//         require(msg.sender == operator, \"!authorized\");\r\n\r\n//         _rewards = _rewards.add(queuedRewards);\r\n\r\n//         if (block.timestamp >= periodFinish) {\r\n//             notifyRewardAmount(_rewards);\r\n//             queuedRewards = 0;\r\n//             return;\r\n//         }\r\n\r\n//         //et = now - (finish-duration)\r\n//         uint256 elapsedTime = block.timestamp.sub(periodFinish.sub(duration));\r\n//         //current at now: rewardRate * elapsedTime\r\n//         uint256 currentAtNow = rewardRate * elapsedTime;\r\n//         uint256 queuedRatio = currentAtNow.mul(1000).div(_rewards);\r\n//         if(queuedRatio < newRewardRatio){\r\n//             notifyRewardAmount(_rewards);\r\n//             queuedRewards = 0;\r\n//         }else{\r\n//             queuedRewards = _rewards;\r\n//         }\r\n//     }\r\n\r\n//     function notifyRewardAmount(uint256 reward)\r\n//         internal\r\n//         updateReward(address(0))\r\n//     {\r\n//         historicalRewards = historicalRewards.add(reward);\r\n//         if (block.timestamp >= periodFinish) {\r\n//             rewardRate = reward.div(duration);\r\n//         } else {\r\n//             uint256 remaining = periodFinish.sub(block.timestamp);\r\n//             uint256 leftover = remaining.mul(rewardRate);\r\n//             reward = reward.add(leftover);\r\n//             rewardRate = reward.div(duration);\r\n//         }\r\n//         currentRewards = reward;\r\n//         lastUpdateTime = block.timestamp;\r\n//         periodFinish = block.timestamp.add(duration);\r\n//         emit RewardAdded(reward);\r\n//     }\r\n// }\r\n\r\n\r\n// File contracts/Frax/IFrax.sol\r\n\r\n\r\ninterface IFrax {\r\n  function COLLATERAL_RATIO_PAUSER() external view returns (bytes32);\r\n  function DEFAULT_ADMIN_ADDRESS() external view returns (address);\r\n  function DEFAULT_ADMIN_ROLE() external view returns (bytes32);\r\n  function addPool(address pool_address ) external;\r\n  function allowance(address owner, address spender ) external view returns (uint256);\r\n  function approve(address spender, uint256 amount ) external returns (bool);\r\n  function balanceOf(address account ) external view returns (uint256);\r\n  function burn(uint256 amount ) external;\r\n  function burnFrom(address account, uint256 amount ) external;\r\n  function collateral_ratio_paused() external view returns (bool);\r\n  function controller_address() external view returns (address);\r\n  function creator_address() external view returns (address);\r\n  function decimals() external view returns (uint8);\r\n  function decreaseAllowance(address spender, uint256 subtractedValue ) external returns (bool);\r\n  function eth_usd_consumer_address() external view returns (address);\r\n  function eth_usd_price() external view returns (uint256);\r\n  function frax_eth_oracle_address() external view returns (address);\r\n  function frax_info() external view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256);\r\n  function frax_pools(address ) external view returns (bool);\r\n  function frax_pools_array(uint256 ) external view returns (address);\r\n  function frax_price() external view returns (uint256);\r\n  function frax_step() external view returns (uint256);\r\n  function fxs_address() external view returns (address);\r\n  function fxs_eth_oracle_address() external view returns (address);\r\n  function fxs_price() external view returns (uint256);\r\n  function genesis_supply() external view returns (uint256);\r\n  function getRoleAdmin(bytes32 role ) external view returns (bytes32);\r\n  function getRoleMember(bytes32 role, uint256 index ) external view returns (address);\r\n  function getRoleMemberCount(bytes32 role ) external view returns (uint256);\r\n  function globalCollateralValue() external view returns (uint256);\r\n  function global_collateral_ratio() external view returns (uint256);\r\n  function grantRole(bytes32 role, address account ) external;\r\n  function hasRole(bytes32 role, address account ) external view returns (bool);\r\n  function increaseAllowance(address spender, uint256 addedValue ) external returns (bool);\r\n  function last_call_time() external view returns (uint256);\r\n  function minting_fee() external view returns (uint256);\r\n  function name() external view returns (string memory);\r\n  function owner_address() external view returns (address);\r\n  function pool_burn_from(address b_address, uint256 b_amount ) external;\r\n  function pool_mint(address m_address, uint256 m_amount ) external;\r\n  function price_band() external view returns (uint256);\r\n  function price_target() external view returns (uint256);\r\n  function redemption_fee() external view returns (uint256);\r\n  function refreshCollateralRatio() external;\r\n  function refresh_cooldown() external view returns (uint256);\r\n  function removePool(address pool_address ) external;\r\n  function renounceRole(bytes32 role, address account ) external;\r\n  function revokeRole(bytes32 role, address account ) external;\r\n  function setController(address _controller_address ) external;\r\n  function setETHUSDOracle(address _eth_usd_consumer_address ) external;\r\n  function setFRAXEthOracle(address _frax_oracle_addr, address _weth_address ) external;\r\n  function setFXSAddress(address _fxs_address ) external;\r\n  function setFXSEthOracle(address _fxs_oracle_addr, address _weth_address ) external;\r\n  function setFraxStep(uint256 _new_step ) external;\r\n  function setMintingFee(uint256 min_fee ) external;\r\n  function setOwner(address _owner_address ) external;\r\n  function setPriceBand(uint256 _price_band ) external;\r\n  function setPriceTarget(uint256 _new_price_target ) external;\r\n  function setRedemptionFee(uint256 red_fee ) external;\r\n  function setRefreshCooldown(uint256 _new_cooldown ) external;\r\n  function setTimelock(address new_timelock ) external;\r\n  function symbol() external view returns (string memory);\r\n  function timelock_address() external view returns (address);\r\n  function toggleCollateralRatio() external;\r\n  function totalSupply() external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount ) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount ) external returns (bool);\r\n  function weth_address() external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/Frax/IFraxAMOMinter.sol\r\n\r\n\r\n// MAY need to be updated\r\ninterface IFraxAMOMinter {\r\n  function FRAX() external view returns(address);\r\n  function FXS() external view returns(address);\r\n  function acceptOwnership() external;\r\n  function addAMO(address amo_address, bool sync_too) external;\r\n  function allAMOAddresses() external view returns(address[] memory);\r\n  function allAMOsLength() external view returns(uint256);\r\n  function amos(address) external view returns(bool);\r\n  function amos_array(uint256) external view returns(address);\r\n  function burnFraxFromAMO(uint256 frax_amount) external;\r\n  function burnFxsFromAMO(uint256 fxs_amount) external;\r\n  function col_idx() external view returns(uint256);\r\n  function collatDollarBalance() external view returns(uint256);\r\n  function collatDollarBalanceStored() external view returns(uint256);\r\n  function collat_borrow_cap() external view returns(int256);\r\n  function collat_borrowed_balances(address) external view returns(int256);\r\n  function collat_borrowed_sum() external view returns(int256);\r\n  function collateral_address() external view returns(address);\r\n  function collateral_token() external view returns(address);\r\n  function correction_offsets_amos(address, uint256) external view returns(int256);\r\n  function custodian_address() external view returns(address);\r\n  function dollarBalances() external view returns(uint256 frax_val_e18, uint256 collat_val_e18);\r\n  // function execute(address _to, uint256 _value, bytes _data) external returns(bool, bytes);\r\n  function fraxDollarBalanceStored() external view returns(uint256);\r\n  function fraxTrackedAMO(address amo_address) external view returns(int256);\r\n  function fraxTrackedGlobal() external view returns(int256);\r\n  function frax_mint_balances(address) external view returns(int256);\r\n  function frax_mint_cap() external view returns(int256);\r\n  function frax_mint_sum() external view returns(int256);\r\n  function fxs_mint_balances(address) external view returns(int256);\r\n  function fxs_mint_cap() external view returns(int256);\r\n  function fxs_mint_sum() external view returns(int256);\r\n  function giveCollatToAMO(address destination_amo, uint256 collat_amount) external;\r\n  function min_cr() external view returns(uint256);\r\n  function mintFraxForAMO(address destination_amo, uint256 frax_amount) external;\r\n  function mintFxsForAMO(address destination_amo, uint256 fxs_amount) external;\r\n  function missing_decimals() external view returns(uint256);\r\n  function nominateNewOwner(address _owner) external;\r\n  function nominatedOwner() external view returns(address);\r\n  function oldPoolCollectAndGive(address destination_amo) external;\r\n  function oldPoolRedeem(uint256 frax_amount) external;\r\n  function old_pool() external view returns(address);\r\n  function owner() external view returns(address);\r\n  function pool() external view returns(address);\r\n  function receiveCollatFromAMO(uint256 usdc_amount) external;\r\n  function recoverERC20(address tokenAddress, uint256 tokenAmount) external;\r\n  function removeAMO(address amo_address, bool sync_too) external;\r\n  function setAMOCorrectionOffsets(address amo_address, int256 frax_e18_correction, int256 collat_e18_correction) external;\r\n  function setCollatBorrowCap(uint256 _collat_borrow_cap) external;\r\n  function setCustodian(address _custodian_address) external;\r\n  function setFraxMintCap(uint256 _frax_mint_cap) external;\r\n  function setFraxPool(address _pool_address) external;\r\n  function setFxsMintCap(uint256 _fxs_mint_cap) external;\r\n  function setMinimumCollateralRatio(uint256 _min_cr) external;\r\n  function setTimelock(address new_timelock) external;\r\n  function syncDollarBalances() external;\r\n  function timelock_address() external view returns(address);\r\n}\r\n\r\n\r\n// File contracts/Uniswap/TransferHelper.sol\r\n\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Common/Context.sol\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Math/SafeMath.sol\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/ERC20/IERC20.sol\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/Utils/Address.sol\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/ERC20/ERC20.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\n \r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    \r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory __name, string memory __symbol) public {\r\n        _name = __name;\r\n        _symbol = __symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.approve(address spender, uint256 amount)\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for `accounts`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\r\n\r\n        _approve(account, _msgSender(), decreasedAllowance);\r\n        _burn(account, amount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal virtual {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of `from`'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of `from`'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:using-hooks.adoc[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n// File contracts/Proxy/Initializable.sol\r\n\r\n\r\n// solhint-disable-next-line compiler-version\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Staking/Owned.sol\r\n\r\n\r\n// https://docs.synthetix.io/contracts/Owned\r\ncontract Owned {\r\n    address public owner;\r\n    address public nominatedOwner;\r\n\r\n    constructor (address _owner) public {\r\n        require(_owner != address(0), \"Owner address cannot be 0\");\r\n        owner = _owner;\r\n        emit OwnerChanged(address(0), _owner);\r\n    }\r\n\r\n    function nominateNewOwner(address _owner) external onlyOwner {\r\n        nominatedOwner = _owner;\r\n        emit OwnerNominated(_owner);\r\n    }\r\n\r\n    function acceptOwnership() external {\r\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\r\n        emit OwnerChanged(owner, nominatedOwner);\r\n        owner = nominatedOwner;\r\n        nominatedOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\r\n        _;\r\n    }\r\n\r\n    event OwnerNominated(address newOwner);\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n}\r\n\r\n\r\n// File contracts/Misc_AMOs/MIM_Convex_AMO.sol\r\n\r\n\r\n// ====================================================================\r\n// |     ______                   _______                             |\r\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\r\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\/ __ `/ __ \\/ ___/ _ \\  |\r\n// |  / __/ / /  / /_/ _>  <   / __/ / / / / / /_/ / / / / /__/  __/  |\r\n// | /_/   /_/   \\__,_/_/|_|  /_/   /_/_/ /_/\\__,_/_/ /_/\\___/\\___/   |\r\n// |                                                                  |\r\n// ====================================================================\r\n// ========================== MIM_Convex_AMO ==========================\r\n// ====================================================================\r\n// Frax Finance: https://github.com/FraxFinance\r\n\r\n// Primary Author(s)\r\n// Jason Huan: https://github.com/jasonhuan\r\n\r\n// Reviewer(s) / Contributor(s)\r\n// Travis Moore: https://github.com/FortisFortuna\r\n// Sam Kazemian: https://github.com/samkazemian\r\n// Dennis: github.com/denett\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MIM_Convex_AMO is Owned {\r\n    using SafeMath for uint256;\r\n    // SafeMath automatically included in Solidity >= 8.0.0\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    // Core\r\n    IFrax private FRAX = IFrax(0x853d955aCEf822Db058eb8505911ED77F175b99e);\r\n    ERC20 private collateral_token = ERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    IFraxAMOMinter private amo_minter;\r\n\r\n    // Curve-related\r\n    IMetaImplementationUSD private mim3crv_metapool;\r\n    IStableSwap3Pool private three_pool;\r\n    ERC20 private three_pool_erc20;\r\n\r\n    // MIM-related\r\n    ERC20 private MIM = ERC20(0x99D8a9C45b2ecA8864373A26D1459e3Dff1e17F3);\r\n    IConvexBooster private convex_booster;\r\n    IConvexBaseRewardPool private convex_base_reward_pool;\r\n    IConvexClaimZap private convex_claim_zap;\r\n    IVirtualBalanceRewardPool private convex_spell_rewards_pool;\r\n    IcvxRewardPool private cvx_reward_pool;\r\n    ERC20 private cvx;\r\n    address private cvx_crv_address;\r\n    uint256 private lp_deposit_pid;\r\n\r\n    address private crv_address;\r\n    address private constant spell_address = 0x090185f2135308BaD17527004364eBcC2D37e5F6;\r\n    address private mim3crv_metapool_address;\r\n\r\n    address public timelock_address;\r\n    address public custodian_address;\r\n\r\n    // Number of decimals under 18, for collateral token\r\n    uint256 private missing_decimals;\r\n\r\n    // Precision related\r\n    uint256 private PRICE_PRECISION;\r\n\r\n    // Min ratio of collat <-> 3crv conversions via add_liquidity / remove_liquidity; 1e6\r\n    uint256 public liq_slippage_3crv;\r\n\r\n    // Min ratio of (MIM + 3CRV) <-> MIMCRV-f-2 metapool conversions via add_liquidity / remove_liquidity; 1e6\r\n    uint256 public slippage_metapool;\r\n\r\n    // Discount\r\n    bool public set_discount;\r\n    uint256 public discount_rate;\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor (\r\n        address _owner_address,\r\n        address _amo_minter_address\r\n    ) Owned(_owner_address) {\r\n        owner = _owner_address;\r\n        missing_decimals = 12;\r\n\r\n        mim3crv_metapool_address = 0x5a6A4D54456819380173272A5E8E9B9904BdF41B;\r\n        mim3crv_metapool = IMetaImplementationUSD(mim3crv_metapool_address);\r\n        three_pool = IStableSwap3Pool(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\r\n        three_pool_erc20 = ERC20(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\r\n        amo_minter = IFraxAMOMinter(_amo_minter_address);\r\n\r\n        // Convex MIM-related \r\n        convex_booster = IConvexBooster(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\r\n        convex_base_reward_pool = IConvexBaseRewardPool(0xFd5AbF66b003881b88567EB9Ed9c651F14Dc4771);\r\n        convex_claim_zap = IConvexClaimZap(0x4890970BB23FCdF624A0557845A29366033e6Fa2);\r\n        cvx_reward_pool = IcvxRewardPool(0xCF50b810E57Ac33B91dCF525C6ddd9881B139332);\r\n        cvx = ERC20(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\r\n        cvx_crv_address = 0x62B9c7356A2Dc64a1969e19C23e4f579F9810Aa7;\r\n        crv_address = 0xD533a949740bb3306d119CC777fa900bA034cd52;\r\n        convex_spell_rewards_pool = IVirtualBalanceRewardPool(0x69a92f1656cd2e193797546cFe2EaF32EACcf6f7);\r\n        lp_deposit_pid = 40;\r\n\r\n        // Other variable initializations\r\n        PRICE_PRECISION = 1e6;\r\n        liq_slippage_3crv = 800000;\r\n        slippage_metapool = 950000;\r\n\r\n        // Get the custodian and timelock addresses from the minter\r\n        custodian_address = amo_minter.custodian_address();\r\n        timelock_address = amo_minter.timelock_address();\r\n    }\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyByOwnGov() {\r\n        require(msg.sender == timelock_address || msg.sender == owner, \"Not owner or timelock\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyByOwnGovCust() {\r\n        require(msg.sender == timelock_address || msg.sender == owner || msg.sender == custodian_address, \"Not owner, tlck, or custd\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyByMinter() {\r\n        require(msg.sender == address(amo_minter), \"Not minter\");\r\n        _;\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    function showAllocations() public view returns (uint256[10] memory return_arr) {\r\n        // ------------LP Balance------------\r\n\r\n        // Free LP\r\n        uint256 lp_owned = (mim3crv_metapool.balanceOf(address(this)));\r\n\r\n        // Staked in the vault\r\n        uint256 lp_value_in_vault = MIM3CRVInVault();\r\n        lp_owned = lp_owned.add(lp_value_in_vault);\r\n\r\n        // ------------3pool Withdrawable------------\r\n        uint256 mim3crv_supply = mim3crv_metapool.totalSupply();\r\n\r\n        uint256 mim_withdrawable = 0;\r\n        uint256 _3pool_withdrawable = 0;\r\n        if (lp_owned > 0) _3pool_withdrawable = mim3crv_metapool.calc_withdraw_one_coin(lp_owned, 1); // 1: 3pool index\r\n         \r\n        // ------------MIM Balance------------\r\n        // MIM sums\r\n        uint256 mim_in_contract = MIM.balanceOf(address(this));\r\n\r\n        // ------------Collateral Balance------------\r\n        // Free Collateral\r\n        uint256 usdc_in_contract = collateral_token.balanceOf(address(this));\r\n\r\n        // Returns the dollar value withdrawable of USDC if the contract redeemed its 3CRV from the metapool; assume 1 USDC = $1\r\n        uint256 usdc_withdrawable = _3pool_withdrawable.mul(three_pool.get_virtual_price()).div(1e18).div(10 ** missing_decimals);\r\n\r\n        // USDC subtotal\r\n        uint256 usdc_subtotal = usdc_in_contract.add(usdc_withdrawable);\r\n\r\n        return [\r\n            mim_in_contract, // [0] Free MIM in the contract\r\n            mim_withdrawable, // [1] MIM withdrawable from the MIM3CRV tokens\r\n            mim_withdrawable.add(mim_in_contract), // [2] MIM withdrawable + free MIM in the the contract\r\n            usdc_in_contract, // [3] Free USDC\r\n            usdc_withdrawable, // [4] USDC withdrawable from the MIM3CRV tokens\r\n            usdc_subtotal, // [5] USDC Total\r\n            lp_owned, // [6] MIM3CRV free or in the vault\r\n            mim3crv_supply, // [7] Total supply of MIM3CRV tokens\r\n            _3pool_withdrawable, // [8] 3pool withdrawable from the MIM3CRV tokens\r\n            lp_value_in_vault // [9] MIM3CRV in the vault\r\n        ];\r\n    }\r\n\r\n    function dollarBalances() public view returns (uint256 frax_val_e18, uint256 collat_val_e18) {\r\n        // Get the allocations\r\n        uint256[10] memory allocations = showAllocations();\r\n\r\n        frax_val_e18 = 1e18; // don't have FRAX in this contract\r\n        collat_val_e18 = allocations[2].add((allocations[5]).mul(10 ** missing_decimals)); // all MIM (valued at $1) plus USDC in this contract\r\n    }\r\n\r\n    function showRewards() public view returns (uint256[4] memory return_arr) {\r\n        return_arr[0] = convex_base_reward_pool.earned(address(this)); // CRV claimable\r\n        return_arr[1] = 0; // CVX claimable. PITA to calculate. See https://docs.convexfinance.com/convexfinanceintegration/cvx-minting\r\n        return_arr[2] = cvx_reward_pool.earned(address(this)); // cvxCRV claimable\r\n        return_arr[3] = convex_spell_rewards_pool.earned(address(this)); // SPELL claimable\r\n    }\r\n\r\n    function MIM3CRVInVault() public view returns (uint256) {\r\n        return convex_base_reward_pool.balanceOf(address(this));\r\n    }\r\n\r\n    // Backwards compatibility\r\n    function mintedBalance() public view returns (int256) {\r\n        return amo_minter.frax_mint_balances(address(this));\r\n    }\r\n\r\n    function usdValueInVault() public view returns (uint256) {\r\n        uint256 vault_balance = MIM3CRVInVault();\r\n        return vault_balance.mul(mim3crv_metapool.get_virtual_price()).div(1e18);\r\n    }\r\n    \r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n    function metapoolDeposit(uint256 _MIM_Convex_AMOunt, uint256 _collateral_amount) external onlyByOwnGov returns (uint256 metapool_LP_received) {\r\n        uint256 threeCRV_received = 0;\r\n        if (_collateral_amount > 0) {\r\n            // Approve the collateral to be added to 3pool\r\n            collateral_token.approve(address(three_pool), _collateral_amount);\r\n\r\n            // Convert collateral into 3pool\r\n            uint256[3] memory three_pool_collaterals;\r\n            three_pool_collaterals[1] = _collateral_amount;\r\n            {\r\n                uint256 min_3pool_out = (_collateral_amount * (10 ** missing_decimals)).mul(liq_slippage_3crv).div(PRICE_PRECISION);\r\n                three_pool.add_liquidity(three_pool_collaterals, min_3pool_out);\r\n            }\r\n\r\n            // Approve the 3pool for the metapool\r\n            threeCRV_received = three_pool_erc20.balanceOf(address(this));\r\n\r\n            // WEIRD ISSUE: NEED TO DO three_pool_erc20.approve(address(three_pool), 0); first before every time\r\n            // May be related to https://github.com/vyperlang/vyper/blob/3e1ff1eb327e9017c5758e24db4bdf66bbfae371/examples/tokens/ERC20.vy#L85\r\n            three_pool_erc20.approve(mim3crv_metapool_address, 0);\r\n            three_pool_erc20.approve(mim3crv_metapool_address, threeCRV_received);\r\n        }\r\n        \r\n        // Approve the MIM for the metapool\r\n        MIM.approve(mim3crv_metapool_address, _MIM_Convex_AMOunt);\r\n\r\n        {\r\n            // Add the FRAX and the collateral to the metapool\r\n            uint256 min_lp_out = (_MIM_Convex_AMOunt.add(threeCRV_received)).mul(slippage_metapool).div(PRICE_PRECISION);\r\n            metapool_LP_received = mim3crv_metapool.add_liquidity([_MIM_Convex_AMOunt, threeCRV_received], min_lp_out);\r\n        }\r\n\r\n        return metapool_LP_received;\r\n    }\r\n\r\n    function metapoolWithdrawMIM(uint256 _metapool_lp_in) external onlyByOwnGov returns (uint256 mim_received) {\r\n        // Withdraw MIM from the metapool\r\n        uint256 min_mim_out = _metapool_lp_in.mul(slippage_metapool).div(PRICE_PRECISION);\r\n        mim_received = mim3crv_metapool.remove_liquidity_one_coin(_metapool_lp_in, 0, min_mim_out);\r\n    }\r\n\r\n    function metapoolWithdraw3pool(uint256 _metapool_lp_in) internal onlyByOwnGov {\r\n        // Withdraw 3pool from the metapool\r\n        uint256 min_3pool_out = _metapool_lp_in.mul(slippage_metapool).div(PRICE_PRECISION);\r\n        mim3crv_metapool.remove_liquidity_one_coin(_metapool_lp_in, 1, min_3pool_out);\r\n    }\r\n\r\n    function three_pool_to_collateral(uint256 _3pool_in) internal onlyByOwnGov {\r\n        // Convert the 3pool into the collateral\r\n        // WEIRD ISSUE: NEED TO DO three_pool_erc20.approve(address(three_pool), 0); first before every time\r\n        // May be related to https://github.com/vyperlang/vyper/blob/3e1ff1eb327e9017c5758e24db4bdf66bbfae371/examples/tokens/ERC20.vy#L85\r\n        three_pool_erc20.approve(address(three_pool), 0);\r\n        three_pool_erc20.approve(address(three_pool), _3pool_in);\r\n        uint256 min_collat_out = _3pool_in.mul(liq_slippage_3crv).div(PRICE_PRECISION * (10 ** missing_decimals));\r\n        three_pool.remove_liquidity_one_coin(_3pool_in, 1, min_collat_out);\r\n    }\r\n\r\n    function metapoolWithdrawAndConvert3pool(uint256 _metapool_lp_in) external onlyByOwnGov {\r\n        metapoolWithdraw3pool(_metapool_lp_in);\r\n        three_pool_to_collateral(three_pool_erc20.balanceOf(address(this)));\r\n    }\r\n\r\n    /* ========== Burns and givebacks ========== */\r\n\r\n    // Give USDC profits back. Goes through the minter\r\n    function giveCollatBack(uint256 collat_amount) external onlyByOwnGovCust {\r\n        collateral_token.approve(address(amo_minter), collat_amount);\r\n        amo_minter.receiveCollatFromAMO(collat_amount);\r\n    }\r\n\r\n    /* ========== Convex: Deposit / Claim / Withdraw MIM3CRV Metapool LP ========== */\r\n\r\n    // Deposit Metapool LP tokens, convert them to Convex LP, and deposit into their vault\r\n    function depositMIM3CRV(uint256 _metapool_lp_in) external onlyByOwnGovCust{\r\n        // Approve the metapool LP tokens for the vault contract\r\n        mim3crv_metapool.approve(address(convex_booster), _metapool_lp_in);\r\n        \r\n        // Deposit the metapool LP into the vault contract\r\n        convex_booster.deposit(lp_deposit_pid, _metapool_lp_in, true);\r\n    }\r\n\r\n    // Withdraw Convex LP, convert it back to Metapool LP tokens, and give them back to the sender\r\n    function withdrawAndUnwrapMIM3CRV(uint256 amount, bool claim) external onlyByOwnGovCust{\r\n        convex_base_reward_pool.withdrawAndUnwrap(amount, claim);\r\n    }\r\n\r\n    // Claim CVX, CRV, and SPELL rewards\r\n    function claimRewardsMIM3CRV() external onlyByOwnGovCust {\r\n        address[] memory rewardContracts = new address[](1);\r\n        rewardContracts[0] = address(convex_base_reward_pool);\r\n\r\n        uint256[] memory chefIds = new uint256[](0);\r\n\r\n        convex_claim_zap.claimRewards(\r\n            rewardContracts, \r\n            chefIds, \r\n            false, \r\n            false, \r\n            false, \r\n            0, \r\n            0\r\n        );\r\n    }\r\n\r\n    /* ========== Convex: Stake / Claim / Withdraw CVX ========== */\r\n\r\n    // Stake CVX tokens\r\n    // E18\r\n    function stakeCVX(uint256 _cvx_in) external onlyByOwnGovCust {\r\n        // Approve the CVX tokens for the staking contract\r\n        cvx.approve(address(cvx_reward_pool), _cvx_in);\r\n        \r\n        // Stake the CVX tokens into the staking contract\r\n        cvx_reward_pool.stakeFor(address(this), _cvx_in);\r\n    }\r\n\r\n    // Claim cvxCRV rewards\r\n    function claimRewards_cvxCRV(bool stake) external onlyByOwnGovCust {\r\n        cvx_reward_pool.getReward(address(this), true, stake);\r\n    }\r\n\r\n    // Unstake CVX tokens\r\n    // E18\r\n    function withdrawCVX(uint256 cvx_amt, bool claim) external onlyByOwnGovCust {\r\n        cvx_reward_pool.withdraw(cvx_amt, claim);\r\n    }\r\n\r\n    function withdrawRewards(\r\n        uint256 crv_amt,\r\n        uint256 cvx_amt,\r\n        uint256 cvxCRV_amt,\r\n        uint256 spell_amt\r\n    ) external onlyByOwnGovCust {\r\n        if (crv_amt > 0) TransferHelper.safeTransfer(crv_address, msg.sender, crv_amt);\r\n        if (cvx_amt > 0) TransferHelper.safeTransfer(address(cvx), msg.sender, cvx_amt);\r\n        if (cvxCRV_amt > 0) TransferHelper.safeTransfer(cvx_crv_address, msg.sender, cvxCRV_amt);\r\n        if (spell_amt > 0) TransferHelper.safeTransfer(spell_address, msg.sender, spell_amt);\r\n    }\r\n\r\n    /* ========== RESTRICTED GOVERNANCE FUNCTIONS ========== */\r\n\r\n    function setAMOMinter(address _amo_minter_address) external onlyByOwnGov {\r\n        amo_minter = IFraxAMOMinter(_amo_minter_address);\r\n\r\n        // Get the custodian and timelock addresses from the minter\r\n        custodian_address = amo_minter.custodian_address();\r\n        timelock_address = amo_minter.timelock_address();\r\n\r\n        // Make sure the new addresses are not address(0)\r\n        require(custodian_address != address(0) && timelock_address != address(0), \"Invalid custodian or timelock\");\r\n    }\r\n\r\n    // in terms of 1e6 (overriding global_collateral_ratio)\r\n    function setDiscountRate(bool _state, uint256 _discount_rate) external onlyByOwnGov {\r\n        set_discount = _state;\r\n        discount_rate = _discount_rate;\r\n    }\r\n\r\n    function setSlippages(uint256 _liq_slippage_3crv, uint256 _slippage_metapool) external onlyByOwnGov {\r\n        liq_slippage_3crv = _liq_slippage_3crv;\r\n        slippage_metapool = _slippage_metapool;\r\n    }\r\n\r\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyByOwnGov {\r\n        // Can only be triggered by owner or governance, not custodian\r\n        // Tokens are sent to the custodian, as a sort of safeguard\r\n        TransferHelper.safeTransfer(address(tokenAddress), msg.sender, tokenAmount);\r\n    }\r\n\r\n    // Generic proxy\r\n    function execute(\r\n        address _to,\r\n        uint256 _value,\r\n        bytes calldata _data\r\n    ) external onlyByOwnGov returns (bool, bytes memory) {\r\n        (bool success, bytes memory result) = _to.call{value:_value}(_data);\r\n        return (success, result);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_amo_minter_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIM3CRVInVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewardsMIM3CRV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"stake\",\"type\":\"bool\"}],\"name\":\"claimRewards_cvxCRV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"custodian_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_metapool_lp_in\",\"type\":\"uint256\"}],\"name\":\"depositMIM3CRV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discount_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dollarBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"frax_val_e18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collat_val_e18\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collat_amount\",\"type\":\"uint256\"}],\"name\":\"giveCollatBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liq_slippage_3crv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MIM_Convex_AMOunt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateral_amount\",\"type\":\"uint256\"}],\"name\":\"metapoolDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"metapool_LP_received\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_metapool_lp_in\",\"type\":\"uint256\"}],\"name\":\"metapoolWithdrawAndConvert3pool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_metapool_lp_in\",\"type\":\"uint256\"}],\"name\":\"metapoolWithdrawMIM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mim_received\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedBalance\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_amo_minter_address\",\"type\":\"address\"}],\"name\":\"setAMOMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_discount_rate\",\"type\":\"uint256\"}],\"name\":\"setDiscountRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liq_slippage_3crv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage_metapool\",\"type\":\"uint256\"}],\"name\":\"setSlippages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"set_discount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showAllocations\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"return_arr\",\"type\":\"uint256[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showRewards\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"return_arr\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage_metapool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cvx_in\",\"type\":\"uint256\"}],\"name\":\"stakeCVX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdValueInVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claim\",\"type\":\"bool\"}],\"name\":\"withdrawAndUnwrapMIM3CRV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cvx_amt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claim\",\"type\":\"bool\"}],\"name\":\"withdrawCVX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"crv_amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cvx_amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cvxCRV_amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spell_amt\",\"type\":\"uint256\"}],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MIM_Convex_AMO","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"100000","ConstructorArguments":"000000000000000000000000234d953a9404bf9dbc3b526271d440cd2870bcd2000000000000000000000000cf37b62109b537fa0cb9a90af4ca72f6fb85e241","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3381a4230a1704d7a944df93c330e2da51ea35ced62f5f97d63183c44bb21f82"}]}