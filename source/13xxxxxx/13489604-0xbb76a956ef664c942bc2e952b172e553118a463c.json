{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TuxERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./ITuxERC20.sol\\\";\\nimport \\\"./library/RankedSet.sol\\\";\\nimport \\\"./library/AddressSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\n\\n/**\\n * @dev {ERC20} token, including:\\n *\\n *  - Preminted initial supply\\n *  - Ability for holders to burn (destroy) their tokens\\n *  - No access control mechanism (for minting/pausing) and hence no governance\\n *\\n * This contract uses {ERC20Burnable} to include burn capabilities - head to\\n * its documentation for details.\\n *\\n * _Available since v3.4._\\n */\\ncontract TuxERC20 is\\n    ITuxERC20,\\n    ERC20Burnable\\n{\\n    using RankedSet for RankedSet.Set;\\n    using AddressSet for AddressSet.Set;\\n\\n    // Admin address for managing payout addresses\\n    address public owner;\\n\\n    // Tux auctions address\\n    address public minter;\\n\\n    // Currently featured auction\\n    uint256 public featured;\\n\\n    // Timestamp of next featured auction\\n    uint256 public nextFeaturedTime;\\n\\n    // Amount of time for featured auctions\\n    uint256 constant public featuredDuration = 3600; // 1 hour -> 3600 seconds\\n\\n    // Amount of time between payouts\\n    uint256 constant public payoutsFrequency = 604800; // 7 days -> 604800 seconds\\n\\n    // Timestamp of next payouts\\n    uint256 public nextPayoutsTime = block.timestamp + payoutsFrequency;\\n\\n    // Payout amount to pinning and API services\\n    uint256 public payoutAmount = 100 * 10**18;\\n\\n    // AddressSet of payout addresses to pinning and API services\\n    AddressSet.Set private _payoutAddresses;\\n\\n    // RankedSet for queue of next featured auction\\n    RankedSet.Set private _featuredQueue;\\n\\n    /**\\n     * @dev Mints 100,000 tokens and adds payout addresses.\\n     *\\n     * See {ERC20-constructor}.\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol\\n    ) ERC20(name, symbol) {\\n        owner = msg.sender;\\n\\n        _mint(owner, 100000 * 10**18);\\n\\n        _payoutAddresses.add(0x71C7656EC7ab88b098defB751B7401B5f6d8976F); // Etherscan\\n        // _payoutAddresses.add(0xInfura); // Infura\\n        // _payoutAddresses.add(0xPinata); // Pinata\\n        // _payoutAddresses.add(0xAlchemy); // Alchemy\\n        // _payoutAddresses.add(0xNFT.Storage); // nft.storage\\n    }\\n\\n    /**\\n     * @dev Sets the minting address.\\n     */\\n    function setMinter(address minter_)\\n        external\\n    {\\n        require(\\n            msg.sender == owner,\\n            \\\"Not owner address\\\");\\n\\n        minter = minter_;\\n    }\\n\\n    /**\\n     * @dev Add a payout address, up to 10.\\n     */\\n    function addPayoutAddress(address payoutAddress)\\n        external\\n    {\\n        require(\\n            msg.sender == owner,\\n            \\\"Not owner address\\\");\\n        require(\\n            _payoutAddresses.length() < 10,\\n            \\\"Maximum reached\\\");\\n\\n        _payoutAddresses.add(payoutAddress);\\n    }\\n\\n    /**\\n     * @dev Remove a payout address.\\n     */\\n    function removePayoutAddress(address payoutAddress)\\n        external\\n    {\\n        require(\\n            msg.sender == owner,\\n            \\\"Not owner address\\\");\\n\\n        _payoutAddresses.remove(payoutAddress);\\n    }\\n\\n    /**\\n     * @dev Update payout amount up to 1000.\\n     */\\n    function updatePayoutAmount(uint256 amount)\\n        external\\n    {\\n        require(\\n            msg.sender == owner,\\n            \\\"Not owner address\\\");\\n        require(\\n            amount < 1000 * 10**18,\\n            \\\"Amount too high\\\");\\n\\n        payoutAmount = amount;\\n    }\\n\\n    /**\\n     * @dev Renounce ownership once payout addresses are added and the payout\\n     * amount gets settled.\\n     */\\n    function renounceOwnership()\\n        external\\n    {\\n        require(\\n            msg.sender == owner,\\n            \\\"Not owner address\\\");\\n\\n        owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the Tux auctions contract.\\n     */\\n    function mint(address to, uint256 amount)\\n        external\\n        virtual\\n        override\\n    {\\n        require(\\n            msg.sender == minter,\\n            \\\"Not minter address\\\");\\n\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount)\\n        public\\n        override(ERC20Burnable)\\n    {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    /**\\n     * Add Tux auction to featured queue\\n     */\\n    function feature(uint256 auctionId, uint256 amount, address from)\\n        external\\n        virtual\\n        override\\n    {\\n        require(\\n            msg.sender == minter,\\n            \\\"Not minter address\\\");\\n        require(\\n            balanceOf(from) >= amount,\\n            \\\"Not enough TUX\\\");\\n        require(\\n            _featuredQueue.contains(auctionId) == false,\\n            \\\"Already queued\\\");\\n        require(\\n            amount >= 1 * 10**18,\\n            \\\"Price too low\\\");\\n\\n        updateFeatured();\\n\\n        _burn(from, amount);\\n\\n        _featuredQueue.add(auctionId);\\n        _featuredQueue.rankScore(auctionId, amount);\\n\\n        payouts();\\n    }\\n\\n    function cancel(uint256 auctionId, address from)\\n        external\\n        virtual\\n        override\\n    {\\n        require(\\n            msg.sender == minter,\\n            \\\"Not minter address\\\");\\n        require(\\n            _featuredQueue.contains(auctionId) == true,\\n            \\\"Not queued\\\");\\n\\n        _mint(from, _featuredQueue.scoreOf(auctionId));\\n\\n        _featuredQueue.remove(auctionId);\\n\\n        updateFeatured();\\n        payouts();\\n    }\\n\\n    /**\\n     * Get featured items\\n     */\\n    function getFeatured(uint256 from, uint256 n)\\n        view\\n        public\\n        returns(uint256[] memory)\\n    {\\n        return _featuredQueue.valuesFromN(from, n);\\n    }\\n\\n    /**\\n     * Get featured queue length\\n     */\\n    function getFeaturedLength()\\n        view\\n        public\\n        returns(uint256 length)\\n    {\\n        return _featuredQueue.length();\\n    }\\n\\n    /**\\n     * Get if featured queue contains an auction ID\\n     */\\n    function getFeaturedContains(uint auctionId)\\n        view\\n        public\\n        returns(bool)\\n    {\\n        return _featuredQueue.contains(auctionId);\\n    }\\n\\n    /**\\n     * Get next featured timestamp\\n     */\\n    function getNextFeaturedTime()\\n        view\\n        public\\n        returns(uint256 timestamp)\\n    {\\n        return nextFeaturedTime;\\n    }\\n\\n    /**\\n     * Get featured price of queue item\\n     */\\n    function getFeaturedPrice(uint256 auctionId)\\n        view\\n        public\\n        returns(uint256 price)\\n    {\\n        return _featuredQueue.scoreOf(auctionId);\\n    }\\n\\n    /**\\n     * Update featured queue\\n     */\\n    function updateFeatured()\\n        public\\n        override\\n    {\\n        if (block.timestamp < nextFeaturedTime || _featuredQueue.length() == 0) {\\n            return;\\n        }\\n\\n        nextFeaturedTime = block.timestamp + featuredDuration;\\n        uint256 auctionId = _featuredQueue.head();\\n        _featuredQueue.remove(auctionId);\\n        featured = auctionId;\\n\\n        _mint(msg.sender, 1 * 10**18);\\n    }\\n\\n    /**\\n     * Mint weekly payouts to pinning and API services\\n     */\\n    function payouts()\\n        public\\n        override\\n    {\\n        if (block.timestamp < nextPayoutsTime) {\\n            return;\\n        }\\n\\n        nextPayoutsTime = block.timestamp + payoutsFrequency;\\n\\n        for (uint i = 0; i < _payoutAddresses.length(); i++) {\\n            _mint(_payoutAddresses.at(i), payoutAmount);\\n        }\\n\\n        _mint(msg.sender, 1 * 10**18);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ITuxERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITuxERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function feature(\\n        uint256 auctionId,\\n        uint256 amount,\\n        address from\\n    ) external;\\n\\n    function cancel(\\n        uint256 auctionId,\\n        address from\\n    ) external;\\n\\n    function updateFeatured() external;\\n    function payouts() external;\\n}\\n\"\r\n    },\r\n    \"contracts/library/RankedSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OrderedSet.sol\\\";\\n\\n/**\\n * @title RankedSet\\n * @dev Ranked data structure using two ordered sets, a mapping of scores to\\n * boundary values and counter, a mapping of last ranked scores, and a highest\\n * score.\\n */\\nlibrary RankedSet {\\n    using OrderedSet for OrderedSet.Set;\\n\\n    struct RankGroup {\\n        uint256 count;\\n        uint256 start;\\n        uint256 end;\\n    }\\n\\n    struct Set {\\n        uint256 highScore;\\n        mapping(uint256 => RankGroup) rankgroups;\\n        mapping(uint256 => uint256) scores;\\n        OrderedSet.Set rankedScores;\\n        OrderedSet.Set rankedItems;\\n    }\\n\\n    /**\\n     * @dev Add an item at the end of the set\\n     */\\n    function add(Set storage set, uint256 item) internal {\\n        set.rankedItems.append(item);\\n        set.rankgroups[0].end = item;\\n        set.rankgroups[0].count += 1;\\n        if (set.rankgroups[0].start == 0) {\\n            set.rankgroups[0].start = item;\\n        }\\n    }\\n\\n    /**\\n     * @dev Remove an item\\n     */\\n    function remove(Set storage set, uint256 item) internal {\\n        uint256 score = set.scores[item];\\n        delete set.scores[item];\\n\\n        RankGroup storage rankgroup = set.rankgroups[score];\\n        if (rankgroup.count > 0) {\\n            rankgroup.count -= 1;\\n        }\\n\\n        if (rankgroup.count == 0) {\\n            rankgroup.start = 0;\\n            rankgroup.end = 0;\\n            if (score == set.highScore) {\\n                set.highScore = set.rankedScores.next(score);\\n            }\\n            if (score > 0) {\\n                set.rankedScores.remove(score);\\n            }\\n        } else {\\n            if (rankgroup.start == item) {\\n                rankgroup.start = set.rankedItems.next(item);\\n            }\\n            if (rankgroup.end == item) {\\n                rankgroup.end = set.rankedItems.prev(item);\\n            }\\n        }\\n\\n        set.rankedItems.remove(item);\\n    }\\n\\n    /**\\n     * @dev Returns the head\\n     */\\n    function head(Set storage set) internal view returns (uint256) {\\n        return set.rankedItems._next[0];\\n    }\\n\\n    /**\\n     * @dev Returns the tail\\n     */\\n    function tail(Set storage set) internal view returns (uint256) {\\n        return set.rankedItems._prev[0];\\n    }\\n\\n    /**\\n     * @dev Returns the length\\n     */\\n    function length(Set storage set) internal view returns (uint256) {\\n        return set.rankedItems.count;\\n    }\\n\\n    /**\\n     * @dev Returns the next value\\n     */\\n    function next(Set storage set, uint256 _value) internal view returns (uint256) {\\n        return set.rankedItems._next[_value];\\n    }\\n\\n    /**\\n     * @dev Returns the previous value\\n     */\\n    function prev(Set storage set, uint256 _value) internal view returns (uint256) {\\n        return set.rankedItems._prev[_value];\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set\\n     */\\n    function contains(Set storage set, uint256 value) internal view returns (bool) {\\n        return set.rankedItems._next[0] == value ||\\n               set.rankedItems._next[value] != 0 ||\\n               set.rankedItems._prev[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns a value's score\\n     */\\n    function scoreOf(Set storage set, uint256 value) internal view returns (uint256) {\\n        return set.scores[value];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Set storage set) internal view returns (uint256[] memory) {\\n        uint256[] memory _values = new uint256[](set.rankedItems.count);\\n        uint256 value = set.rankedItems._next[0];\\n        uint256 i = 0;\\n        while (value != 0) {\\n            _values[i] = value;\\n            value = set.rankedItems._next[value];\\n            i += 1;\\n        }\\n        return _values;\\n    }\\n\\n    /**\\n     * @dev Return an array with n values in the set, starting after \\\"from\\\"\\n     */\\n    function valuesFromN(Set storage set, uint256 from, uint256 n) internal view returns (uint256[] memory) {\\n        uint256[] memory _values = new uint256[](n);\\n        uint256 value = set.rankedItems._next[from];\\n        uint256 i = 0;\\n        while (i < n) {\\n            _values[i] = value;\\n            value = set.rankedItems._next[value];\\n            i += 1;\\n        }\\n        return _values;\\n    }\\n\\n    /**\\n     * @dev Rank new score\\n     */\\n    function rankScore(Set storage set, uint256 item, uint256 newScore) internal {\\n        RankGroup storage rankgroup = set.rankgroups[newScore];\\n\\n        if (newScore > set.highScore) {\\n            remove(set, item);\\n            rankgroup.start = item;\\n            set.highScore = newScore;\\n            set.rankedItems.add(item);\\n            set.rankedScores.add(newScore);\\n        } else {\\n            uint256 score = set.scores[item];\\n            uint256 prevScore = set.rankedScores.prev(score);\\n\\n            if (set.rankgroups[score].count == 1) {\\n                score = set.rankedScores.next(score);\\n            }\\n\\n            remove(set, item);\\n\\n            while (prevScore > 0 && newScore > prevScore) {\\n                prevScore = set.rankedScores.prev(prevScore);\\n            }\\n\\n            set.rankedItems.insert(\\n                set.rankgroups[prevScore].end,\\n                item,\\n                set.rankgroups[set.rankedScores.next(prevScore)].start\\n            );\\n\\n            if (rankgroup.count == 0) {\\n                set.rankedScores.insert(prevScore, newScore, score);\\n                rankgroup.start = item;\\n            }\\n        }\\n\\n        rankgroup.end = item;\\n        rankgroup.count += 1;\\n\\n        set.scores[item] = newScore;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/library/AddressSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `address` (`addressSet`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary AddressSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // address values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in address.\\n\\n    struct Set {\\n        // Storage of set values\\n        address[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(address => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Set storage set, address value) internal returns (bool) {\\n        if (!contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Set storage set, address value) internal returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                address lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Set storage set, address value) internal view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(Set storage set) internal view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Set storage set, uint256 index) internal view returns (address) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Set storage set) internal view returns (address[] memory) {\\n        return set._values;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/library/OrderedSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OrderedSet\\n * @dev Ordered data structure. It has the properties of a mapping of uint256, but members are ordered\\n * and can be enumerated. Values can be inserted and removed from anywhere. Add, append, remove and\\n * contains are O(1). Enumerate is O(N).\\n */\\nlibrary OrderedSet {\\n\\n    struct Set {\\n        uint256 count;\\n        mapping (uint256 => uint256) _next;\\n        mapping (uint256 => uint256) _prev;\\n    }\\n\\n    /**\\n     * @dev Insert a value between two values\\n     */\\n    function insert(Set storage set, uint256 prev_, uint256 value, uint256 next_) internal {\\n        set._next[prev_] = value;\\n        set._next[value] = next_;\\n        set._prev[next_] = value;\\n        set._prev[value] = prev_;\\n        set.count += 1;\\n    }\\n\\n    /**\\n     * @dev Insert a value as the new head\\n     */\\n    function add(Set storage set, uint256 value) internal {\\n        insert(set, 0, value, set._next[0]);\\n    }\\n\\n    /**\\n     * @dev Insert a value as the new tail\\n     */\\n    function append(Set storage set, uint256 value) internal {\\n        insert(set, set._prev[0], value, 0);\\n    }\\n\\n    /**\\n     * @dev Remove a value\\n     */\\n    function remove(Set storage set, uint256 value) internal {\\n        set._next[set._prev[value]] = set._next[value];\\n        set._prev[set._next[value]] = set._prev[value];\\n        delete set._next[value];\\n        delete set._prev[value];\\n        if (set.count > 0) {\\n            set.count -= 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the head\\n     */\\n    function head(Set storage set) internal view returns (uint256) {\\n        return set._next[0];\\n    }\\n\\n    /**\\n     * @dev Returns the tail\\n     */\\n    function tail(Set storage set) internal view returns (uint256) {\\n        return set._prev[0];\\n    }\\n\\n    /**\\n     * @dev Returns the length\\n     */\\n    function length(Set storage set) internal view returns (uint256) {\\n        return set.count;\\n    }\\n\\n    /**\\n     * @dev Returns the next value\\n     */\\n    function next(Set storage set, uint256 _value) internal view returns (uint256) {\\n        return set._next[_value];\\n    }\\n\\n    /**\\n     * @dev Returns the previous value\\n     */\\n    function prev(Set storage set, uint256 _value) internal view returns (uint256) {\\n        return set._prev[_value];\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set\\n     */\\n    function contains(Set storage set, uint256 value) internal view returns (bool) {\\n        return set._next[0] == value ||\\n               set._next[value] != 0 ||\\n               set._prev[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Set storage set) internal view returns (uint256[] memory) {\\n        uint256[] memory _values = new uint256[](set.count);\\n        uint256 value = set._next[0];\\n        uint256 i = 0;\\n        while (value != 0) {\\n            _values[i] = value;\\n            value = set._next[value];\\n            i += 1;\\n        }\\n        return _values;\\n    }\\n\\n    /**\\n     * @dev Return an array with n values in the set, starting after \\\"from\\\"\\n     */\\n    function valuesFromN(Set storage set, uint256 from, uint256 n) internal view returns (uint256[] memory) {\\n        uint256[] memory _values = new uint256[](n);\\n        uint256 value = set._next[from];\\n        uint256 i = 0;\\n        while (i < n) {\\n            _values[i] = value;\\n            value = set._next[value];\\n            i += 1;\\n        }\\n        return _values;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payoutAddress\",\"type\":\"address\"}],\"name\":\"addPayoutAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"feature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"featured\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"featuredDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"getFeatured\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getFeaturedContains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeaturedLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getFeaturedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextFeaturedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextFeaturedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPayoutsTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payouts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutsFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payoutAddress\",\"type\":\"address\"}],\"name\":\"removePayoutAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFeatured\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updatePayoutAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TuxERC20","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003547578000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035455580000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}