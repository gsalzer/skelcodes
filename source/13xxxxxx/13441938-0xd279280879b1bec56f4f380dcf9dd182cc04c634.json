{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-10-17\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2021-10-15\r\n*/\r\n\r\npragma solidity ^0.6.2;\r\n// SPDX-License-Identifier: apache 2.0\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeApprove: approve failed'\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeTransfer: transfer failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::transferFrom: transferFrom failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\r\n    }\r\n}\r\n\r\ncontract wallet{\r\n    \r\n    bool public contract_is_active = true;\r\n    address[4] private boardMember;\r\n    address public dev_address;\r\n    mapping( address => mapping(address => mapping(uint256 => uint256))) private allowed_amount;\r\n \r\n    constructor( address member_1, address member_2, address member_3, address member_4) public {\r\n        boardMember[0] = member_1;\r\n        boardMember[1] = member_2;\r\n        boardMember[2] = member_3;\r\n        boardMember[3] = member_4;\r\n        dev_address = msg.sender;\r\n\r\n    }\r\n    \r\n    function pause ( bool _isActive) public{\r\n           require(dev_address == msg.sender);\r\n           contract_is_active = _isActive;\r\n    }\r\n        \r\n    function vote (address token_contract_address, address _to, uint256 _amount) public{\r\n     \r\n        if(boardMember[0]== msg.sender){\r\n            allowed_amount[token_contract_address][_to][0]=_amount;\r\n            return();\r\n        }\r\n        if(boardMember[1]== msg.sender){\r\n            allowed_amount[token_contract_address][_to][1]=_amount;\r\n            return();\r\n        }\r\n        if(boardMember[2]== msg.sender){\r\n            allowed_amount[token_contract_address][_to][2]=_amount;\r\n            return();\r\n        }\r\n        if(boardMember[3]== msg.sender){\r\n            allowed_amount[token_contract_address][_to][3]=_amount;\r\n            return();\r\n        }\r\n\r\n    }\r\n    \r\n    function check_allowence (address token_contract_address, address _to, uint256 _amount) public view returns(bool){\r\n        \r\n        uint256 approved_vote = 0;\r\n        if(allowed_amount[token_contract_address][_to][0]>= _amount){\r\n            approved_vote+=1;\r\n           \r\n        }\r\n        if(allowed_amount[token_contract_address][_to][1]>= _amount){\r\n            approved_vote+=1;\r\n           \r\n        }\r\n        if(allowed_amount[token_contract_address][_to][2]>= _amount){\r\n            approved_vote+=1;\r\n           \r\n        }\r\n        if(allowed_amount[token_contract_address][_to][3]>= _amount){\r\n            approved_vote+=1;\r\n           \r\n        }\r\n        \r\n       if (approved_vote>=3){\r\n           return(true);\r\n       }\r\n    \r\n        return(false);\r\n            \r\n        \r\n    }\r\n    \r\n    function transferToken (address token_contract_address, address _to, uint256 _amount) public{\r\n        require(contract_is_active == true);\r\n        require(msg.sender == dev_address);\r\n        require(check_allowence(token_contract_address, _to, _amount) == true);\r\n        allowed_amount[token_contract_address][_to][0]=0;\r\n        allowed_amount[token_contract_address][_to][1]=0;\r\n        allowed_amount[token_contract_address][_to][2]=0;\r\n        allowed_amount[token_contract_address][_to][3]=0;\r\n                             \r\n        TransferHelper.safeTransfer(token_contract_address, _to, _amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member_1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member_2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member_3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member_4\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_contract_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"check_allowence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contract_is_active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_contract_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_contract_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"wallet","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003f8afa22beb4ad64328f5dc24a9845de9ef48c8600000000000000000000000085360e684742365caea1467c49d9c920cef32913000000000000000000000000f3ed13fde9367fd8838238424714e5e636f4d92400000000000000000000000020ee4dc324315756f5b64cb95e251232e63b14bd","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://18654c6146df369e7dff176e94c4c0fff6035f5a2ae2d212f24d6abcc557a736"}]}