{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at BscScan.com on 2021-12-06\r\n*/\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\ninterface IRewardDistributor {\r\n    function addRewardHolderShare(address rewardRecipient, uint256 amount) external;\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @dev Interface of the BEP20 standard as defined in the EIP.\r\n */\r\ninterface IBEP20 {\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract RewardDistributor is IRewardDistributor, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    // Referral Rewards\r\n    struct ReferralShare {\r\n        uint256 amount;\r\n        uint256 numberOfTimesClaimed;\r\n    }\r\n\r\n    mapping (address => ReferralShare) public referralShares;\r\n\r\n    uint256 public totalReferralShares;\r\n    \r\n    // Token Address\r\n    address public rewardToken;\r\n\r\n    // Pancakeswap Router\r\n    address public router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    \r\n    // Owner of contract\r\n    address public tokenOwner;\r\n    \r\n    modifier onlyToken() {\r\n        require(msg.sender == rewardToken, 'Invalid Token!'); _;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == tokenOwner, 'Invalid Token Owner'); _;\r\n    }\r\n\r\n    // EVENTS\r\n    event SetRewardTokenAddress(address indexed rewardToken);\r\n    event TransferedTokenOwnership(address indexed newOwner);\r\n    event UpgradeDistributor(address indexed newDistributor);\r\n    event AddRewardHolderShare(address indexed rewardRecipient, uint256 indexed amount);\r\n    event RemoveRewardholder(address indexed rewardRecipient);\r\n    event GiftReward(address indexed rewardRecipient, address indexed giftRecipient, uint256 indexed amount);\r\n    event ClaimReward(address indexed rewardRecipient);\r\n    event ClaimRewardInDesiredToken(address indexed rewardRecipient, address indexed desiredToken);\r\n    event ClaimRewardToDesiredWallet(address indexed rewardRecipient, address indexed desiredWallet);\r\n    event ClaimRewardInDesiredTokenToDesiredWallet(address indexed rewardRecipient, address indexed desiredWallet, address indexed desiredToken);\r\n    event UpdateRouterAddress(address indexed router);\r\n\r\n    constructor () {\r\n        tokenOwner = msg.sender;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setRewardTokenAddress(address _rewardToken) external onlyOwner {\r\n        require(rewardToken != _rewardToken && _rewardToken != address(0), 'Invalid Reward Token!');\r\n\r\n        if (rewardToken != address(0)) {\r\n            uint256 balance = IBEP20(rewardToken).balanceOf(address(this));\r\n            if (balance > 0) {\r\n                require(IBEP20(rewardToken).transfer(tokenOwner, balance), 'Transfer Failed!');\r\n            }\r\n        }\r\n        \r\n        rewardToken = _rewardToken;\r\n        emit SetRewardTokenAddress(_rewardToken);\r\n    }\r\n    \r\n    function transferTokenOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), 'Invalid New Owner');\r\n        tokenOwner = newOwner;\r\n        emit TransferedTokenOwnership(newOwner);\r\n    }\r\n    \r\n    function upgradeDistributor(address newDistributor) external onlyOwner {\r\n        require(newDistributor != address(this) && newDistributor != address(0), 'Invalid Distributor!');\r\n        uint256 balance = IBEP20(rewardToken).balanceOf(address(this));\r\n        if (balance > 0) require(IBEP20(rewardToken).transfer(newDistributor, balance), 'Transfer Failed!');\r\n        emit UpgradeDistributor(newDistributor);\r\n        selfdestruct(payable(tokenOwner));\r\n    }\r\n\r\n    function addRewardHolderShare(address rewardRecipient, uint256 amount) external override onlyToken {\r\n        referralShares[rewardRecipient].amount = referralShares[rewardRecipient].amount.add(amount);\r\n        totalReferralShares = totalReferralShares.add(amount);\r\n        emit AddRewardHolderShare(rewardRecipient, amount);\r\n    }\r\n\r\n    function updateRouterAddress(address _router) external onlyOwner {\r\n        require(_router != address(0), 'Router Address Invalid!');\r\n        require(router != _router, 'Router Address already exists!');\r\n        router = _router;\r\n        emit UpdateRouterAddress(_router);\r\n    }\r\n\r\n    // Back-Up withdraw, in case BNB gets sent in here\r\n    // NOTE: This function is to be called if and only if BNB gets sent into this contract. \r\n    // On no other occurence should this function be called. \r\n    function emergencyWithdrawEthInWei(address payable recipient, uint256 amount) external onlyOwner {\r\n        require(recipient != address(0), 'Invalid Recipient!');\r\n        require(amount > 0, 'Invalid Amount!');\r\n        recipient.transfer(amount);\r\n    }\r\n\r\n    // Withdraw BEP20 tokens sent to this contract\r\n    // NOTE: This function is to be called if and only if BEP20 tokens gets sent into this contract. \r\n    // On no other occurence should this function be called. \r\n    function emergencyWithdrawTokens(address token) external onlyOwner {\r\n        require(token != address(0), 'Invalid Token!');\r\n\r\n        uint256 balance = IBEP20(token).balanceOf(address(this));\r\n        if (balance > 0) {\r\n            require(IBEP20(token).transfer(tokenOwner, balance), 'Transfer Failed!');\r\n        }\r\n    }\r\n\r\n    function giftReward(address giftRecipient, uint256 amount) external nonReentrant {\r\n        _giftReward(msg.sender, giftRecipient, amount);\r\n        emit GiftReward(msg.sender, giftRecipient, amount);\r\n    }\r\n\r\n    function claimReward() external nonReentrant {\r\n        _claimRewardInBNB(msg.sender);\r\n        emit ClaimReward(msg.sender);\r\n    }\r\n\r\n    function claimRewardInDesiredToken(address desiredToken) external nonReentrant {\r\n        _claimRewardInDesiredToken(msg.sender, desiredToken);\r\n        emit ClaimRewardInDesiredToken(msg.sender, desiredToken);\r\n    }\r\n\r\n    function claimRewardToDesiredWallet(address desiredWallet) external nonReentrant {\r\n        _claimRewardInBNBToDesiredWallet(msg.sender, desiredWallet);\r\n        emit ClaimRewardToDesiredWallet(msg.sender, desiredWallet);\r\n    }\r\n\r\n    function claimRewardInDesiredTokenToDesiredWallet(address desiredToken, address desiredWallet) external nonReentrant {\r\n        require(desiredWallet != address(0), \"Invalid Destination Wallet!\");\r\n        _claimRewardInDesiredTokenToDesiredWallet(msg.sender, desiredWallet, desiredToken);\r\n        emit ClaimRewardInDesiredTokenToDesiredWallet(msg.sender, desiredWallet, desiredToken);\r\n    }\r\n\r\n    function _giftReward(address rewardRecipient, address giftRecipient, uint256 amount) private {\r\n        require(rewardRecipient != address(0), 'Invalid Reward Recipient!');\r\n        require(giftRecipient != address(0), 'Invalid Gift Recipient!');\r\n        require(referralShares[rewardRecipient].amount > 0, 'Insufficient Balance!');\r\n        require(amount > 0, 'Invalid Amount!');\r\n        require(amount <= referralShares[rewardRecipient].amount, 'Insufficient Balance!');\r\n\r\n        if (referralShares[rewardRecipient].amount <= IBEP20(rewardToken).balanceOf(address(this))) {\r\n            require(IBEP20(rewardToken).transfer(giftRecipient, amount), 'Transfer Failed!');\r\n            \r\n            referralShares[rewardRecipient].amount = referralShares[rewardRecipient].amount.sub(amount);\r\n        }\r\n    }\r\n    \r\n    function _claimRewardInBNB(address rewardRecipient) private {\r\n        require(rewardRecipient != address(0), 'Invalid Reward Recipient!');\r\n        require(referralShares[rewardRecipient].amount > 0, 'Insufficient Balance!');\r\n\r\n        if (referralShares[rewardRecipient].amount <= IBEP20(rewardToken).balanceOf(address(this))) {\r\n            // Swap token and send to the reward recipient\r\n            _swapAndSendBNB(rewardRecipient, referralShares[rewardRecipient].amount);\r\n\r\n            // Set amount to 0, set number of times claimed\r\n            referralShares[rewardRecipient].amount = 0;\r\n            referralShares[rewardRecipient].numberOfTimesClaimed = referralShares[rewardRecipient].numberOfTimesClaimed.add(1);\r\n        }\r\n    }\r\n\r\n    function _claimRewardInDesiredToken(address rewardRecipient, address desiredToken) private {\r\n        require(rewardRecipient != address(0), 'Invalid Reward Recipient!');\r\n        require(desiredToken != address(0), 'Invalid Desired Token!');\r\n        require(referralShares[rewardRecipient].amount > 0, 'Insufficient Balance!');\r\n\r\n        if (referralShares[rewardRecipient].amount <= IBEP20(rewardToken).balanceOf(address(this))) {\r\n            // Swap token and send to the reward recipient\r\n            _swapAndSendToken(rewardRecipient, referralShares[rewardRecipient].amount, desiredToken);\r\n\r\n            // Set amount to 0, set number of times claimed\r\n            referralShares[rewardRecipient].amount = 0;\r\n            referralShares[rewardRecipient].numberOfTimesClaimed = referralShares[rewardRecipient].numberOfTimesClaimed.add(1);\r\n        }\r\n    }\r\n\r\n    function _claimRewardInBNBToDesiredWallet(address rewardRecipient, address desiredWallet) private {\r\n        require(rewardRecipient != address(0), 'Invalid Reward Recipient!');\r\n        require(desiredWallet != address(0), 'Zero Address!');\r\n        require(referralShares[rewardRecipient].amount > 0, 'Insufficient Balance!');\r\n\r\n        if (referralShares[rewardRecipient].amount <= IBEP20(rewardToken).balanceOf(address(this))) {\r\n            // Swap token and send to the reward recipient\r\n            _swapAndSendBNB(desiredWallet, referralShares[rewardRecipient].amount);\r\n\r\n            // Set amount to 0, set number of times claimed\r\n            referralShares[rewardRecipient].amount = 0;\r\n            referralShares[rewardRecipient].numberOfTimesClaimed = referralShares[rewardRecipient].numberOfTimesClaimed.add(1);\r\n        }\r\n    }\r\n\r\n    function _claimRewardInDesiredTokenToDesiredWallet(address rewardRecipient, address desiredWallet, address desiredToken) private {\r\n        require(rewardRecipient != address(0), 'Invalid Reward Recipient!');\r\n        require(desiredWallet != address(0), 'Zero Address!');\r\n        require(desiredToken != address(0), 'Invalid Desired Token!');\r\n        require(referralShares[rewardRecipient].amount > 0, 'Insufficient Balance!');\r\n\r\n        if (referralShares[rewardRecipient].amount <= IBEP20(rewardToken).balanceOf(address(this))) {\r\n            // Swap token and send to the reward recipient\r\n            _swapAndSendToken(desiredWallet, referralShares[rewardRecipient].amount, desiredToken);\r\n\r\n            // Set amount to 0, set number of times claimed\r\n            referralShares[rewardRecipient].amount = 0;\r\n            referralShares[rewardRecipient].numberOfTimesClaimed = referralShares[rewardRecipient].numberOfTimesClaimed.add(1);\r\n        }\r\n    }\r\n\r\n    function _swapAndSendBNB(address recipient, uint256 amount) private {\r\n        IUniswapV2Router02 pcsV2Router = IUniswapV2Router02(router);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = rewardToken;\r\n        path[1] = pcsV2Router.WETH();\r\n\r\n        IBEP20(rewardToken).approve(address(pcsV2Router), amount);\r\n\r\n        pcsV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            recipient,\r\n            block.timestamp.add(30)\r\n        );\r\n    }\r\n\r\n    function _swapAndSendToken(address recipient, uint256 amount, address token) private {\r\n        IUniswapV2Router02 pcsV2Router = IUniswapV2Router02(router);\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = rewardToken;\r\n        path[1] = pcsV2Router.WETH();\r\n        path[2] = token;\r\n\r\n        IBEP20(rewardToken).approve(address(pcsV2Router), amount);\r\n\r\n        pcsV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            recipient,\r\n            block.timestamp.add(30)\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardRecipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddRewardHolderShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardRecipient\",\"type\":\"address\"}],\"name\":\"ClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardRecipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"desiredToken\",\"type\":\"address\"}],\"name\":\"ClaimRewardInDesiredToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardRecipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"desiredWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"desiredToken\",\"type\":\"address\"}],\"name\":\"ClaimRewardInDesiredTokenToDesiredWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardRecipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"desiredWallet\",\"type\":\"address\"}],\"name\":\"ClaimRewardToDesiredWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardRecipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"giftRecipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GiftReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardRecipient\",\"type\":\"address\"}],\"name\":\"RemoveRewardholder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"SetRewardTokenAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TransferedTokenOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"UpdateRouterAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDistributor\",\"type\":\"address\"}],\"name\":\"UpgradeDistributor\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addRewardHolderShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"desiredToken\",\"type\":\"address\"}],\"name\":\"claimRewardInDesiredToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"desiredToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"desiredWallet\",\"type\":\"address\"}],\"name\":\"claimRewardInDesiredTokenToDesiredWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"desiredWallet\",\"type\":\"address\"}],\"name\":\"claimRewardToDesiredWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawEthInWei\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"giftRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"giftReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfTimesClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"setRewardTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReferralShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"updateRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDistributor\",\"type\":\"address\"}],\"name\":\"upgradeDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"RewardDistributor","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://73cefa96be8a7b6a4fe4f7cffbecbc3642a8a91cc3d61b8d1fc4978c7b75ab96"}]}