{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.6;\r\n\r\n// TattooMoney.io Public Sale Contract - via StableCoins, ETH and wBTC\r\n//\r\n// USE ONLY OWN WALLET (Metamask, TrustWallet, Trezor, Ledger...)\r\n// DO NOT SEND FROM EXCHANGES OR ANY SERVICES\r\n//\r\n// Use ONLY ETH network, ERC20 tokens (Not Binance/Tron/whatever!)\r\n//\r\n// Set approval to contract address or use USDC authorization first\r\n//\r\n// DO NOT SEND STABLE TOKENS DIRECTLY - IT WILL NOT COUNT THAT!\r\n//\r\n// send ONLY round number of USDT/USDC/DAI!\r\n// ie 20, 500, 2000 NOT 20.1, 500.5, 2000.3\r\n// contract will IGNORE decimals!\r\n//\r\n// Need 150k gas limit.\r\n// Use proper pay* function\r\n\r\ncontract TattooMoneyPublicSaleII {\r\n\r\n    uint256 private constant DECIMALS_TAT2 = 6;\r\n    uint256 private constant DECIMALS_DAI = 18;\r\n    uint256 private constant DECIMALS_USD = 6;\r\n    uint256 private constant DECIMALS_WBTC = 8;\r\n\r\n    /// max tokens per user is 1363636 as $15000 is AML limit\r\n    uint256 public constant maxTokens = 1363636363636;\r\n\r\n    /// contract starts accepting transfers\r\n    uint256 public  dateStart;\r\n\r\n    /// hard time limit\r\n    uint256 public  dateEnd;\r\n\r\n    /// total collected USD\r\n    uint256 public usdCollected;\r\n\r\n    /// sale is limited by tokens count\r\n    uint256 public tokensLimit;\r\n\r\n    /// tokens sold in this sale\r\n    uint256 public tokensSold;\r\n\r\n    uint256 public tokensforadolar;\r\n\r\n    // addresses of tokens\r\n    address public tat2 = 0x960773318c1AeaB5dA6605C49266165af56435fa;\r\n    address public usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address public dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    address public wbtc = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\r\n    address public usdt = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    address public wbtcoracle = 0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c;\r\n    address public ethoracle = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\r\n\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    bool public saleEnded;\r\n\r\n    // deposited USD tokens per token address\r\n    mapping(address => uint256) private _deposited;\r\n\r\n    /// Tokens bought by user\r\n    mapping(address => uint256) public tokensBoughtOf;\r\n\r\n    event AcceptedUSD(address indexed user, uint256 amount);\r\n    event AcceptedWBTC(address indexed user, uint256 amount);\r\n    event AcceptedETH(address indexed user, uint256 amount);\r\n\r\n    string constant ERR_TRANSFER = \"Token transfer failed\";\r\n    string constant ERR_SALE_LIMIT = \"Token sale limit reached\";\r\n    string constant ERR_AML = \"AML sale limit reached\";\r\n    string constant ERR_SOON = \"TOO SOON\";\r\n\r\n    /**\r\n    Contract constructor\r\n    @param _owner adddress of contract owner\r\n    @param _tokensLimit maximum tokens that can be sold (round, ie 320123)\r\n    @param _startDate sale start timestamp\r\n    @param _endDate sale end timestamp\r\n     */\r\n\r\n    constructor(\r\n        address _owner,\r\n        uint256 _tokensLimit, // 8666664\r\n        uint256 _startDate, // 12-06-2020 22:22:22 GMT (1628799742)\r\n        uint256 _endDate, // 26-08-2020  22:22:22 GMT (1630009342)\r\n        uint256 _tokensforadolar // Set the numer of tokens for $1 with decimals (  90909090 )\r\n    ) {\r\n        owner = _owner;\r\n        tokensLimit = _tokensLimit * (10**DECIMALS_TAT2);\r\n        dateStart = _startDate;\r\n        dateEnd = _endDate;\r\n        tokensforadolar = _tokensforadolar;\r\n    }\r\n\r\n    /**\r\n    Pay in using USDC, use approve/transferFrom\r\n    @param amount number of USDC (with decimals)\r\n    */\r\n    function payUSDC(uint256 amount) external {\r\n        require(\r\n            INterfaces(usdc).transferFrom(msg.sender, address(this), amount),\r\n            ERR_TRANSFER\r\n        );\r\n        _pay(msg.sender, amount );\r\n        _deposited[usdc] += amount;\r\n    }\r\n\r\n    /**\r\n    Pay in using USDT, need set approval first\r\n    @param amount USDT amount (with decimals)\r\n    */\r\n    function payUSDT(uint256 amount) external {\r\n        INterfacesNoR(usdt).transferFrom(msg.sender, address(this), amount);\r\n        _pay(msg.sender, amount );\r\n        _deposited[usdt] += amount;\r\n    }\r\n\r\n    /**\r\n    Pay in using DAI, need set approval first\r\n    @param amount number of DAI (with 6 decimals)\r\n    */\r\n    function payDAI(uint256 amount) external {\r\n        require(\r\n            INterfaces(dai).transferFrom(msg.sender, address(this), amount),\r\n            ERR_TRANSFER\r\n        );\r\n        _pay(msg.sender, amount / (10**12));\r\n        _deposited[dai] += amount;\r\n    }\r\n\r\n    /**\r\n    Pay in using wBTC, need set approval first\r\n    @param amount number of wBTC (with decimals)\r\n    */\r\n    function paywBTC(uint256 amount) external {\r\n        require(\r\n            INterfaces(wbtc).transferFrom(msg.sender, address(this), amount),\r\n            ERR_TRANSFER\r\n        );\r\n        _paywBTC(msg.sender, amount );\r\n        _deposited[wbtc] += amount;\r\n    }\r\n\r\n    //\r\n    // accept ETH\r\n    //\r\n\r\n    // takes about 50k gas\r\n    receive() external payable {\r\n        _payEth(msg.sender, msg.value);\r\n    }\r\n\r\n    function payETH() external payable {\r\n        _payEth(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n    Get ETH price from Chainlink.\r\n    @return price for 1 ETH with 6 decimals\r\n    */\r\n    function tokensPerEth() public view returns (uint256) {\r\n        int256 answer;\r\n        (, answer, , , ) = INterfaces(ethoracle).latestRoundData();\r\n        // geting price with 6 decimals\r\n        return uint256((uint256(answer) * tokensforadolar)/10**8);\r\n    }\r\n\r\n    /**\r\n    Get BTC price from Chainlink.\r\n    @return price for 1 BTC with 6 decimals\r\n    */\r\n    function tokensPerwBTC() public view returns (uint256) {\r\n        int256 answer;\r\n        (, answer, , , ) = INterfaces(wbtcoracle).latestRoundData();\r\n        // geting price with 6 decimals\r\n        return uint256((uint256(answer) * tokensforadolar)/10**8);\r\n    }\r\n\r\n    /**\r\n    How much tokens left to sale\r\n    */\r\n    function tokensLeft() external view returns (uint256) {\r\n        return tokensLimit - tokensSold;\r\n    }\r\n\r\n    function _payEth(address user, uint256 amount) internal notEnded {\r\n        uint256 sold = (amount * tokensPerEth()) / (10**18);\r\n        tokensSold += sold;\r\n        require(tokensSold <= tokensLimit, ERR_SALE_LIMIT);\r\n        tokensBoughtOf[user] += sold;\r\n        require(tokensBoughtOf[user] <= maxTokens, ERR_AML);\r\n        _sendTokens(user, sold);\r\n        emit AcceptedETH(user, amount);\r\n    }\r\n\r\n    function _paywBTC(address user, uint256 amount) internal notEnded {\r\n        uint256 sold = (amount * tokensPerwBTC()) / (10**8);\r\n        tokensSold += sold;\r\n        require(tokensSold <= tokensLimit, ERR_SALE_LIMIT);\r\n        tokensBoughtOf[user] += sold;\r\n        require(tokensBoughtOf[user] <= maxTokens, ERR_AML);\r\n        _sendTokens(user, sold);\r\n        emit AcceptedWBTC(user, amount);\r\n    }\r\n\r\n    function _pay(address user, uint256 usd) internal notEnded {\r\n        uint256 sold = (usd * tokensforadolar) / (10**6);\r\n        tokensSold += sold;\r\n        require(tokensSold <= tokensLimit, ERR_SALE_LIMIT);\r\n        tokensBoughtOf[user] += sold;\r\n        require(tokensBoughtOf[user] <= maxTokens, ERR_AML);\r\n        _sendTokens(user, sold);\r\n        emit AcceptedUSD(user, usd);\r\n    }\r\n\r\n    function _sendTokens(address user, uint256 amount) internal notEnded {\r\n      require(\r\n          INterfaces(tat2).transfer(user, amount),\r\n          ERR_TRANSFER\r\n      );\r\n    }\r\n\r\n    //\r\n    // modifiers\r\n    //\r\n\r\n    modifier notEnded() {\r\n        require(!saleEnded, \"Sale ended\");\r\n        require(\r\n            block.timestamp > dateStart && block.timestamp < dateEnd,\r\n            \"Too soon or too late\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only for contract Owner\");\r\n        _;\r\n    }\r\n\r\n    /// Take out stables, wBTC  and ETH\r\n    function takeAll() external onlyOwner {\r\n        uint256 amt = INterfaces(usdt).balanceOf(address(this));\r\n        if (amt > 0) {\r\n            INterfacesNoR(usdt).transfer(owner, amt);\r\n        }\r\n        amt = INterfaces(usdc).balanceOf(address(this));\r\n        if (amt > 0) {\r\n            require(INterfaces(usdc).transfer(owner, amt), ERR_TRANSFER);\r\n        }\r\n        amt = INterfaces(dai).balanceOf(address(this));\r\n        if (amt > 0) {\r\n            require(INterfaces(dai).transfer(owner, amt), ERR_TRANSFER);\r\n        }\r\n        amt = INterfaces(wbtc).balanceOf(address(this));\r\n        if (amt > 0) {\r\n            require(INterfaces(wbtc).transfer(owner, amt), ERR_TRANSFER);\r\n        }\r\n        amt = INterfaces(tat2).balanceOf(address(this));\r\n        if (amt > 0) {\r\n            require(INterfaces(tat2).transfer(owner, amt), ERR_TRANSFER);\r\n        }\r\n        amt = address(this).balance;\r\n        if (amt > 0) {\r\n            payable(owner).transfer(amt);\r\n        }\r\n    }\r\n\r\n    /// we can recover any ERC20!\r\n    function recoverErc20(address token) external onlyOwner {\r\n        uint256 amt = INterfaces(token).balanceOf(address(this));\r\n        if (amt > 0) {\r\n            INterfacesNoR(token).transfer(owner, amt); // use broken ERC20 to ignore return value\r\n        }\r\n    }\r\n\r\n    /// just in case\r\n    function recoverEth() external onlyOwner {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n\r\n    function EndSale() external onlyOwner {\r\n        saleEnded = true;\r\n    }\r\n\r\n    function changeOwner(address _newOwner) external onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() external {\r\n        require(\r\n            msg.sender != address(0) && msg.sender == newOwner,\r\n            \"Only NewOwner\"\r\n        );\r\n        newOwner = address(0);\r\n        owner = msg.sender;\r\n    }\r\n}\r\n\r\n// Interfaces for contract interaction\r\ninterface INterfaces {\r\n    function balanceOf(address) external returns (uint256);\r\n\r\n    function transfer(address, uint256) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) external returns (bool);\r\n\r\n    // chainlink ETH/USD, ethoracle\r\n    // answer|int256 :  304706968812 - 8 decimals\r\n\r\n    // chainlink BTC/USD wbtcoracle\r\n    // answer|int256 : 4419282000000 - 8 decimals\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\n// For tokens that do not return true on transfers eg. USDT\r\ninterface INterfacesNoR {\r\n    function transfer(address, uint256) external;\r\n\r\n    function transferFrom(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) external;\r\n}\r\n\r\n// by Patrick","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokensLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensforadolar\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AcceptedETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AcceptedUSD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AcceptedWBTC\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EndSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dateEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dateStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethoracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payDAI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"paywBTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tat2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensBoughtOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensPerEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensPerwBTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensforadolar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbtc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbtcoracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"TattooMoneyPublicSaleII","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009f8e0bdada7ba929509ce92cbbbed0fb129c88320000000000000000000000000000000000000000000000000000000000843e2800000000000000000000000000000000000000000000000000000000611582fe000000000000000000000000000000000000000000000000000000006127f7fe00000000000000000000000000000000000000000000000000000000056b29a2","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://dd057bad462ff87d7f4e81133360832e215d161c721fbdd71ac4773cb6afee3f"}]}