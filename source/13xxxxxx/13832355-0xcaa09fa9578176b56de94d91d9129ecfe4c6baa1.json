{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Data.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nlibrary Data {\\n\\n    struct TradeInfo {\\n        uint256 hash;\\n        bool inProfit;\\n        string leverage;\\n        string side;\\n        string market;\\n        Exchange exchange;\\n        string pnlText;\\n        string accountSize;\\n        string lottoGroup;\\n    }\\n\\n    struct Exchange {\\n        string name;\\n        string color;\\n    }\\n\\n    function generateTradeInfo(uint256 _hash) public pure returns (TradeInfo memory tradeInfo) {\\n        tradeInfo.hash = _hash;\\n        bool inProfit = _hash % 10 <= 1;\\n        tradeInfo.inProfit = inProfit;\\n        (string memory pnlText, string memory accountSize) = generatePnlText(_hash, inProfit);\\n        tradeInfo.pnlText = pnlText;\\n        tradeInfo.accountSize = accountSize;\\n        tradeInfo.leverage = getLeverage(_hash);\\n        tradeInfo.side = _hash % 100 <= 79 ? 'LONG' : 'SHORT';\\n        tradeInfo.market = getMarket(_hash);\\n        tradeInfo.exchange = getExchange(_hash);\\n        tradeInfo.lottoGroup = toString(uint256(getLottoGroup(_hash)));\\n        return tradeInfo;\\n    }\\n\\n    function getLeverage(uint256 _hash) private pure returns (string memory leverage) {\\n        string[18] memory leverageOptions = [\\n            '1',\\n            '2',\\n            '3',\\n            '4',\\n            '5',\\n            '6',\\n            '7',\\n            '8',\\n            '9',\\n            '10',\\n            '11',\\n            '12',\\n            '13',\\n            '14',\\n            '15',\\n            '20',\\n            '100',\\n            '125'\\n    ];\\n        uint256 leverageIndex = _hash % 18;\\n        return leverageOptions[leverageIndex];\\n    }\\n\\n    function getMarket(uint256 _hash) private pure returns (string memory market) {\\n        string[41] memory markets = [\\n            \\\"ZEC\\\",\\n            \\\"BTC\\\",\\n            \\\"ETH\\\",\\n            \\\"ADA\\\",\\n            \\\"BNB\\\",\\n            \\\"ETC\\\",\\n            \\\"XRP\\\",\\n            \\\"LTC\\\",\\n            \\\"DOGE\\\",\\n            \\\"SHIBA\\\",\\n            \\\"EOS\\\",\\n            \\\"TRX\\\",\\n            \\\"LINK\\\",\\n            \\\"XMR\\\",\\n            \\\"ATOM\\\",\\n            \\\"DOT\\\",\\n            \\\"SNX\\\",\\n            \\\"SUSHI\\\",\\n            \\\"UNI\\\",\\n            \\\"SOL\\\",\\n            \\\"CRV\\\",\\n            \\\"YFI\\\",\\n            \\\"AXS\\\",\\n            \\\"GRT\\\",\\n            \\\"SAND\\\",\\n            \\\"GALA\\\",\\n            \\\"MANA\\\",\\n            \\\"AVAX\\\",\\n            \\\"FTM\\\",\\n            \\\"MATIC\\\",\\n            \\\"LUNA\\\",\\n            \\\"FIL\\\",\\n            \\\"1INCH\\\",\\n            \\\"XLM\\\",\\n            \\\"AAVE\\\",\\n            \\\"FTT\\\",\\n            \\\"ICP\\\",\\n            \\\"XTZ\\\",\\n            \\\"ONE\\\",\\n            \\\"OKB\\\",\\n            \\\"COMP\\\"\\n        ];\\n        uint256 marketIndex = _hash % 41;\\n        return markets[marketIndex];\\n    }\\n\\n     function getExchange(uint256 _hash) private pure returns (Exchange memory exchange) {\\n        string[8] memory exchangeNames = [\\n            'Binance',\\n            'FTX',\\n            'Bitfinex',\\n            'Kraken',\\n            'Huobi',\\n            'Okex',\\n            'Bitmex',\\n            'Bybit'\\n        ];\\n\\n        string[8] memory exchangeColors = [\\n            'rgb(252,213,54)',\\n            'rgb(0,180,201)',\\n            'rgb(6,194,147)',\\n            'rgb(84,71,209)',\\n            'rgb(5,155,220)',\\n            'rgb(133,183,239)',\\n            'rgb(247,3,3)',\\n            'rgb(236,177,9)'\\n        ];\\n        uint256 exchangeIndex = _hash % 8;\\n        return Exchange(exchangeNames[exchangeIndex], exchangeColors[exchangeIndex]);\\n    }\\n\\n    function generatePnlText(uint256 _hash, bool inProfit) private pure returns (string memory pnlText, string memory accountSize) {\\n        string[5] memory accountSizes = [\\n            'Fish',\\n            'Shark',\\n            'Dolphin',\\n            'Whale',\\n            'Humpback'\\n        ];\\n        uint256 sizeIndex = _hash % 21;\\n        uint256 min;\\n        uint256 max;\\n        uint8 accountSizeIndex;\\n         if (sizeIndex <=10) {\\n            min =1000;\\n            max = 9999;\\n            accountSizeIndex = 0;\\n        } else if (sizeIndex <=13) {\\n            min =10000;\\n            max = 99999;\\n            accountSizeIndex = 1;\\n        } else if (sizeIndex <=16) {\\n            min =100000;\\n            max = 999999;\\n            accountSizeIndex = 2;\\n        } else if (sizeIndex <=19) {\\n            min =1000000;\\n            max = 9999999;\\n            accountSizeIndex = 3;\\n        } else {\\n            min =10000000;\\n            max = 99999999;\\n            accountSizeIndex = 4;\\n        }\\n        uint256 number = (_hash % (max - min)) + min;\\n        string memory cents = toString(_hash % 100);\\n        string memory pnlNumber = string(abi.encodePacked(toString(number), '.', cents));\\n        return (string(abi.encodePacked(inProfit ? '+' : '-', '$', pnlNumber)), accountSizes[accountSizeIndex]);\\n    }\\n\\n    function getLottoGroup(uint256 _hash) public pure returns (uint8 lottoGroup) {\\n        lottoGroup = 1;\\n\\n        //Green PNL\\n        if (_hash % 10 <= 1) {\\n            lottoGroup++;\\n        }\\n        //Leverage = 125X\\n        if (_hash % 18 == 17) {\\n            lottoGroup = lottoGroup + 2;\\n        }\\n        // Market = ZEC\\n        if (_hash % 41 == 0) {\\n            lottoGroup = lottoGroup + 5;\\n        }\\n        // Market = Bitmex\\n        if (_hash % 8 == 6) {\\n            lottoGroup++;\\n        }\\n        // Size = Humpback\\n        if (_hash % 21 == 20) {\\n            lottoGroup = lottoGroup + 3;\\n        }\\n        //Side = Short\\n        if (_hash % 100 > 79) {\\n            lottoGroup = lottoGroup + 1;\\n        }\\n        return lottoGroup;\\n    }\\n\\n    // from: https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/utils/Strings.sol\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hash\",\"type\":\"uint256\"}],\"name\":\"generateTradeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inProfit\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"leverage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"side\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"market\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"}],\"internalType\":\"struct Data.Exchange\",\"name\":\"exchange\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"pnlText\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"accountSize\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lottoGroup\",\"type\":\"string\"}],\"internalType\":\"struct Data.TradeInfo\",\"name\":\"tradeInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hash\",\"type\":\"uint256\"}],\"name\":\"getLottoGroup\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"lottoGroup\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"Data","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}