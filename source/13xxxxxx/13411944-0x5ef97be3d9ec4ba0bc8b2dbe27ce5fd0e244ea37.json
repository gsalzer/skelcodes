{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"\r\n    },\r\n    \"./Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"./MoonShop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n\\ncontract MoonPassContract {\\n    function ownerOf(uint) external view returns(address){}\\n    function balanceOf(address) external view returns(uint){}\\n    function safeTransferFrom(address, address, uint256) public {}\\n    function totalSupply() external view returns (uint){}\\n    function isApprovedForAll(address owner, address operator) external view returns (bool) {}\\n}\\ncontract MoonBoyzContract {\\n    function ownerOf(uint) external view returns(address){}\\n    function balanceOf(address) external view returns(uint){}\\n    function safeTransferFrom(address, address, uint256) public {}\\n    function totalSupply() external view returns (uint){}\\n    function isApprovedForAll(address owner, address operator) external view returns (bool) {}\\n}\\n\\ncontract MoonShop is Ownable {\\n\\n    struct SpecialTraitsInfos {\\n    uint256 id;\\n    string name;\\n    string category;\\n    uint256 moonpassNeeded;\\n    }\\n\\n\\n    mapping(uint256 => SpecialTraitsInfos) public specialTraitsById;\\n\\n    mapping(uint256 => uint256) public itemsBought; // TokenId => ItemId\\n\\n    event itemBought(uint indexed _tokenID, uint indexed _itemBought);\\n\\n\\n    MoonPassContract private moonPassContract;\\n    MoonBoyzContract private moonBoyzContract;\\n    address deadZone = address(0x000000000000000000000000000000000000dEaD);\\n\\n\\n    constructor(address _moonPassContract, address _moonBoyzContract ) {\\n        //MOON PASS CONTRACT - 0x9ba658650884fb36f3423d1ce2ee6d2a51361a99\\n        moonBoyzContract = MoonBoyzContract(_moonBoyzContract);\\n        moonPassContract = MoonPassContract(_moonPassContract);\\n\\n\\n        specialTraitsById[1] = SpecialTraitsInfos(1, \\\"Crystals\\\", \\\"Ear\\\", 1);\\n        specialTraitsById[2] = SpecialTraitsInfos(2, \\\"Elf\\\", \\\"Ear\\\", 1);\\n        specialTraitsById[3] = SpecialTraitsInfos(3, \\\"Gundoom\\\", \\\"Ear\\\", 1);\\n        specialTraitsById[4] = SpecialTraitsInfos(4, \\\"Mustard\\\", \\\"Ear\\\", 1);\\n        specialTraitsById[5] = SpecialTraitsInfos(5, \\\"Punk\\\", \\\"Ear\\\", 1);\\n        specialTraitsById[6] = SpecialTraitsInfos(6, \\\"Upgrade 3000\\\", \\\"Ear\\\", 1);\\n        specialTraitsById[7] = SpecialTraitsInfos(7, \\\"Dimension Pockets\\\", \\\"Pocket\\\", 5);\\n        specialTraitsById[8] = SpecialTraitsInfos(8, \\\"Optical Pockets\\\", \\\"Pocket\\\", 5);\\n        specialTraitsById[9] = SpecialTraitsInfos(9, \\\"Useful Pockets\\\", \\\"Pocket\\\", 5);\\n        specialTraitsById[10] = SpecialTraitsInfos(10, \\\"Dimension Pack\\\", \\\"Backpack\\\", 10);\\n        specialTraitsById[11] = SpecialTraitsInfos(11, \\\"Blackhole\\\", \\\"Background\\\", 2);\\n        specialTraitsById[12] = SpecialTraitsInfos(12, \\\"Doppler\\\", \\\"Background\\\", 2);\\n        specialTraitsById[13] = SpecialTraitsInfos(13, \\\"Hexapod\\\", \\\"Background\\\", 2);\\n        specialTraitsById[14] = SpecialTraitsInfos(14, \\\"Light Speed\\\", \\\"Background\\\", 2);\\n        specialTraitsById[15] = SpecialTraitsInfos(15, \\\"Mind\\\", \\\"Background\\\", 2);\\n        specialTraitsById[16] = SpecialTraitsInfos(16, \\\"Prophecy\\\", \\\"Background\\\", 2);\\n        specialTraitsById[17] = SpecialTraitsInfos(17, \\\"Repere\\\", \\\"Background\\\", 2);\\n        specialTraitsById[18] = SpecialTraitsInfos(18, \\\"Stars\\\", \\\"Background\\\", 2);\\n        specialTraitsById[19] = SpecialTraitsInfos(19, \\\"Tabasko\\\", \\\"Background\\\", 2);\\n        specialTraitsById[20] = SpecialTraitsInfos(20, \\\"The Way\\\", \\\"Background\\\", 2);\\n\\n\\n    }\\n\\n\\n\\n\\n  function TraitIdAtIndex(uint index) public view returns(uint256){\\n    return specialTraitsById[index].id ;\\n  }\\n\\n  function MoonpassNeeededAtIndex(uint index) public view returns(uint256){\\n    return specialTraitsById[index].moonpassNeeded ;\\n  }\\n\\n  function TraitNameAtIndex(uint index) public view returns(string memory){\\n    return specialTraitsById[index].name ;\\n  }\\n\\n  function TraitCategoryAtIndex(uint index) public view returns(string memory){\\n    return specialTraitsById[index].category ;\\n  }\\n\\n\\n\\n\\n  function BuyItemWithMoonPass(uint _itemId, uint[] memory _moonPassIds, uint _moonBoyzTokenId) public {\\n\\n      require(_moonPassIds.length == MoonpassNeeededAtIndex(_itemId), \\\"not enough moonpass\\\");\\n      require(moonPassContract.balanceOf(msg.sender) >= MoonpassNeeededAtIndex(_itemId), \\\"not enough moonpass\\\");\\n      require(verifyOwnershipOfAll(_moonPassIds, msg.sender), \\\"Not owner of All _moonPassIds\\\");\\n      require(moonPassContract.isApprovedForAll(msg.sender, address(this)), \\\"Moonpass is not approved For All\\\");\\n      require(moonBoyzContract.ownerOf(_moonBoyzTokenId) == msg.sender, \\\"Sender does not own this moonboyz\\\");\\n      require(TraitIdAtIndex(_itemId) != 0, \\\"This item does not exist\\\");\\n      require(itemsBought[_moonBoyzTokenId] == 0, \\\"An Item is already purchased For This MoonBoyz\\\");\\n\\n        for(uint i = 0; i < _moonPassIds.length; i++){\\n            moonPassContract.safeTransferFrom(msg.sender, deadZone, _moonPassIds[i]);\\n        }\\n        itemsBought[_moonBoyzTokenId] = _itemId;\\n        emit itemBought(_moonBoyzTokenId, _itemId);\\n\\n  }\\n\\n\\n    function verifyOwnershipOfAll(uint[] memory _moonPassIds, address _owner) public view returns(bool){\\n            \\n        for(uint i = 0; i < _moonPassIds.length; i++){\\n         \\n            if(moonPassContract.ownerOf(_moonPassIds[i]) != _owner){\\n                return false;\\n            }\\n\\n        }\\n        return true;\\n\\n    }\\n\\n\\n    function modifyItem(uint _itemId, string memory _name, string memory _category, uint _moonpassNeeded) public onlyOwner{\\n    specialTraitsById[_itemId] = SpecialTraitsInfos(1, _name, _category, _moonpassNeeded);\\n    }\\n\\n \\n \\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_moonPassContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_moonBoyzContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_itemBought\",\"type\":\"uint256\"}],\"name\":\"itemBought\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_moonPassIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_moonBoyzTokenId\",\"type\":\"uint256\"}],\"name\":\"BuyItemWithMoonPass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"MoonpassNeeededAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"TraitCategoryAtIndex\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"TraitIdAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"TraitNameAtIndex\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"itemsBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_category\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_moonpassNeeded\",\"type\":\"uint256\"}],\"name\":\"modifyItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"specialTraitsById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"moonpassNeeded\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_moonPassIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"verifyOwnershipOfAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MoonShop","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009ba658650884fb36f3423d1ce2ee6d2a51361a99000000000000000000000000d8682bfa6918b0174f287b888e765b9a1b4dc9c3","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0fa77975d89e73187cd045bf18567bc7aa44b642370158fd347b460c63c30d02"}]}