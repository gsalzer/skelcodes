{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.0;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    \r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    \r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    \r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface EthereansInterface {\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n}\r\n\r\ninterface InvaderTokenInterface {\r\n    function claimReward(address owner, uint amount) external;\r\n\r\n    function burnFrom(address from, uint amount) external;\r\n}\r\n\r\ninterface EmpireDropsInterface {\r\n    function mint(address from, uint tokenId) external;\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    \r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    \r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            \r\n            \r\n            \r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    \r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    \r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    \r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    \r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    \r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    \r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC165 {\r\n    \r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    \r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    \r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    \r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    \r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    \r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    \r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    \r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    \r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    \r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    \r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    \r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ncontract EthereanEmpire is Ownable {\r\n\r\nusing SafeMath for uint256;\r\n\r\nevent EmpireCreated(address owner, string name, string motto);\r\nevent EmpireCustomized(address owner, string newName, string newMotto);\r\nevent RewardClaimed(address claimer, uint amount);\r\nevent DropCreated(uint tokenId, string title, string description, string artist, uint cost, uint supply, uint end);\r\nevent DropMinted(address minter, uint dropId);\r\n\r\n\r\nstruct Empire {\r\n    string name;\r\n    string motto;\r\n    bool exists;\r\n}\r\n\r\nstruct Drop {\r\n    uint tokenId;\r\n    string title;\r\n    string description;\r\n    string artist;\r\n    uint cost; \r\n    uint supply;\r\n    uint end;\r\n    bool exists;\r\n    uint minted;\r\n}\r\n\r\nuint public ETHEREAN_MIN = 3;\r\nuint public EMPIRE_EDIT_FEE = 200 ether;\r\nuint public numDrops = 0;\r\naddress public ETHEREANS_CONTRACT_ADDRESS;\r\naddress public INVADER_CONTRACT_ADDRESS;\r\naddress public EMPIRE_DROPS_CONTRACT_ADDRESS;\r\nuint constant public END_REWARDS = 1735693200; \r\nEthereansInterface private ethereanContract;\r\nInvaderTokenInterface private invaderContract;\r\nEmpireDropsInterface private empireDropsContract;\r\n\r\nmapping(address => Empire) public empires;\r\naddress[] private empireAddresses;\r\nmapping(uint => uint) public tokenToLastUpdated;\r\nmapping(uint => Drop) public drops;\r\nmapping(address => mapping(uint => bool)) public addressOwnsDrop;\r\n\r\n\r\nconstructor(address _ethereansAddress, address _invaderAddress) {\r\n    ETHEREANS_CONTRACT_ADDRESS = _ethereansAddress;\r\n    ethereanContract = EthereansInterface(_ethereansAddress);\r\n\r\n    INVADER_CONTRACT_ADDRESS = _invaderAddress;\r\n    invaderContract = InvaderTokenInterface(_invaderAddress);\r\n}\r\n\r\nfunction setEthereansContractAddress(address _contractAddress) external onlyOwner() {\r\n    ETHEREANS_CONTRACT_ADDRESS = _contractAddress;\r\n    ethereanContract = EthereansInterface(_contractAddress);\r\n}\r\n\r\nfunction setEmpireDropsContractAddress(address _contractAddress) external onlyOwner() {\r\n    EMPIRE_DROPS_CONTRACT_ADDRESS = _contractAddress;\r\n    empireDropsContract = EmpireDropsInterface(_contractAddress);\r\n}\r\n\r\n\r\nfunction newEmpire(string memory _name, string memory _motto) public {\r\n    require(empires[msg.sender].exists == false, \"Only one empire per wallet.\");\r\n    require(ethereanContract.balanceOf(msg.sender) >= ETHEREAN_MIN, \"Did not meet minimum ethereans requirement.\");\r\n    empires[msg.sender] = Empire(_name, _motto, true);\r\n    empireAddresses.push(msg.sender);\r\n    emit EmpireCreated(msg.sender, _name, _motto);\r\n}\r\n\r\nfunction newDrop(uint _tokenId, string memory _title, string memory _description, string memory _artist, uint _cost, uint _supply, uint _end) external onlyOwner() {\r\n    require(_tokenId >= 0, \"Must supply a tokenId\");\r\n    require(_supply > 0, \"Supply must be greater than 1.\");\r\n    require(block.timestamp < _end, \"End date must be set in the future\");\r\n    numDrops = numDrops.add(1);\r\n    drops[numDrops] = Drop(_tokenId, _title, _description, _artist, _cost, _supply, _end, true, 0);\r\n    emit DropCreated(_tokenId, _title, _description, _artist, _cost, _supply, _end);\r\n} \r\n\r\nfunction getEmpireAddresses() public view returns (address[] memory) {\r\n    return empireAddresses;\r\n}\r\n\r\nfunction setEmpireEditFee(uint _newFee) external onlyOwner(){\r\n    EMPIRE_EDIT_FEE = _newFee;\r\n}\r\n\r\nmodifier hasEmpire {\r\n    require(empires[msg.sender].exists == true, \"Does not own empire.\");\r\n    _;\r\n}\r\n\r\nfunction customizeEmpire(string memory _newName, string memory _newMotto) external hasEmpire(){\r\n    invaderContract.burnFrom(msg.sender, EMPIRE_EDIT_FEE);\r\n    empires[msg.sender].name = _newName;\r\n    empires[msg.sender].motto = _newMotto;\r\n    emit EmpireCustomized(msg.sender, _newName, _newMotto);\r\n}\r\n\r\n\r\nfunction claimReward(uint[] memory _tokenIds) external hasEmpire() {\r\n    uint ethereanBalance = ethereanContract.balanceOf(msg.sender);\r\n    require(ethereanBalance >= ETHEREAN_MIN, \"Did not meet minimum ethereans requirement to claim rewards.\");\r\n    uint currentTime = min(block.timestamp, END_REWARDS);\r\n    uint totalElapsedTime;\r\n    for (uint i=0; i<_tokenIds.length; i++) {\r\n        uint tokenId = _tokenIds[i];\r\n        uint lastUpdated = tokenToLastUpdated[tokenId];\r\n        require(ethereanContract.ownerOf(tokenId) == msg.sender, \"Etherean does not belong to you.\");\r\n        if (lastUpdated == 0) {\r\n            tokenToLastUpdated[tokenId] = currentTime;\r\n        } else if (lastUpdated > 0) {\r\n            totalElapsedTime += currentTime.sub(lastUpdated);\r\n            tokenToLastUpdated[tokenId] = currentTime;\r\n        }\r\n    }\r\n    if (totalElapsedTime > 0) {\r\n        uint multiplier = getMultiplier(ethereanBalance);\r\n        uint rewardAmount = totalElapsedTime.mul(multiplier).mul(10**18).div(86400);\r\n        invaderContract.claimReward(msg.sender, rewardAmount);\r\n        emit RewardClaimed(msg.sender, rewardAmount);\r\n    }\r\n}\r\n\r\nfunction mintDrop(uint _dropId) external hasEmpire(){\r\n    Drop storage drop = drops[_dropId];\r\n    require(drop.exists == true, \"Drop does not exist.\");\r\n    require(block.timestamp < drop.end, \"Drop has expired.\");\r\n    require(drop.minted < drop.supply, \"Drop is sold out.\");\r\n    require(addressOwnsDrop[msg.sender][_dropId] == false, \"Only one drop allowed per empire.\");\r\n    uint ethereanBalance = ethereanContract.balanceOf(msg.sender);\r\n    require(ethereanBalance >= ETHEREAN_MIN, \"Did not meet minimum ethereans requirement to mint drop.\");\r\n    if (drop.cost > 0) {\r\n        invaderContract.burnFrom(msg.sender, drop.cost);\r\n    }\r\n    empireDropsContract.mint(msg.sender, drop.tokenId);\r\n    drop.minted += 1;\r\n    addressOwnsDrop[msg.sender][_dropId] = true;\r\n    emit DropMinted(msg.sender, _dropId);\r\n}\r\n\r\nfunction min(uint a, uint b) internal pure returns (uint) {\r\n\t\treturn a < b ? a : b;\r\n\t}\r\n\r\n\r\nfunction getMultiplier(uint ethereanBalance) internal pure returns (uint) {\r\n    if (ethereanBalance < 6) \r\n        return 10;\r\n    if (ethereanBalance < 18)\r\n        return 11;\r\n    if (ethereanBalance < 72)\r\n        return 12;\r\n    return 13;\r\n}\r\n\r\nfunction withdraw() public onlyOwner() {\r\n    uint balance = address(this).balance;\r\n    payable(owner()).transfer(balance);\r\n}\r\n\r\nfunction recoverERC20(address _tokenAddress, uint _tokenAmount) public onlyOwner() {\r\n    IERC20(_tokenAddress).transfer(owner(), _tokenAmount);\r\n}\r\n\r\nfunction recoverERC721(address _tokenAddress, uint _tokenId) public onlyOwner() {\r\n    IERC721(_tokenAddress).safeTransferFrom(address(this), owner(), _tokenId);\r\n}\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethereansAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_invaderAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"artist\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"DropCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"}],\"name\":\"DropMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"motto\",\"type\":\"string\"}],\"name\":\"EmpireCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newMotto\",\"type\":\"string\"}],\"name\":\"EmpireCustomized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EMPIRE_DROPS_CONTRACT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMPIRE_EDIT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"END_REWARDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETHEREANS_CONTRACT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETHEREAN_MIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVADER_CONTRACT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressOwnsDrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_newMotto\",\"type\":\"string\"}],\"name\":\"customizeEmpire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"drops\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artist\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"empires\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"motto\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmpireAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dropId\",\"type\":\"uint256\"}],\"name\":\"mintDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_artist\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"newDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_motto\",\"type\":\"string\"}],\"name\":\"newEmpire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numDrops\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"recoverERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setEmpireDropsContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setEmpireEditFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setEthereansContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenToLastUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EthereanEmpire","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000fd3fd9b793bac60e7f0a9b9fb759db3e250383cb000000000000000000000000c3b7defdb971999d56588f108ae2590c56e88475","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://532315a8b041e55e39bc9a12ccd469e7719d2792a15ee88502294117b938d33c"}]}