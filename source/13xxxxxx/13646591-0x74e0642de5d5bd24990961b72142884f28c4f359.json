{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/MegaPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\nstruct Rewards {\\n    uint128 userRewardPerTokenPaid; // reward per token already paid\\n    uint128 rewardToPay; // stored amount of reward torken to pay\\n}\\n\\nstruct RewardToken {\\n    uint16 index; // index in rewardsTokensArray\\n    uint32 periodFinish; // time in seconds rewards will end\\n    uint32 lastUpdateTime; // last time reward info was updated\\n    uint128 rewardPerTokenStored; // reward per token\\n    uint128 rewardRate; // how many reward tokens to give out per second\\n    mapping(address => Rewards) rewards;\\n}\\n\\nstruct AppStorage {\\n    address rewardsDistribution;\\n    IERC20 stakingToken;\\n    address[] rewardTokensArray;\\n    uint256 totalSupply;\\n    mapping(address => uint256) balances;\\n    mapping(address => RewardToken) rewardTokens;\\n}\\n\\n// https://raw.githubusercontent.com/QuickSwap/megapool/main/contracts/MegaPool.sol\\ncontract MegaPool {\\n    AppStorage internal s;\\n\\n    constructor(address _rewardsDistribution, address _stakingToken) {\\n        s.stakingToken = IERC20(_stakingToken);\\n        s.rewardsDistribution = _rewardsDistribution;\\n    }\\n\\n    function rewardsDistribution() external view returns (address) {\\n        return s.rewardsDistribution;\\n    }\\n\\n    function transferRewardsDistribution(address _newRewardsDistribution)\\n        external\\n    {\\n        require(\\n            s.rewardsDistribution == msg.sender,\\n            \\\"Transfer rewards distribution not authorized\\\"\\n        );\\n        emit RewardsDistributionTransferred(\\n            s.rewardsDistribution,\\n            _newRewardsDistribution\\n        );\\n        s.rewardsDistribution = _newRewardsDistribution;\\n    }\\n\\n    function totalSupply() external view returns (uint256 totalSupply_) {\\n        totalSupply_ = s.totalSupply;\\n    }\\n\\n    function stakingToken() external view returns (address) {\\n        return address(s.stakingToken);\\n    }\\n\\n    function rewardTokensArray()\\n        external\\n        view\\n        returns (address[] memory rewardTokens_)\\n    {\\n        return s.rewardTokensArray;\\n    }\\n\\n    function balanceOf(address _account) external view returns (uint256) {\\n        return s.balances[_account];\\n    }\\n\\n    struct RewardTokenInfo {\\n        uint256 index; // index in rewardsTokensArray\\n        uint256 periodFinish; // rewards end at this time in seconds\\n        uint256 rewardRate; // how many reward tokens per second\\n        uint256 rewardPerTokenStored; // how many reward tokens per staked token stored\\n        uint256 lastUpdateTime; // last time tht rewar\\n    }\\n\\n    function rewardTokenInfo(address _rewardToken)\\n        external\\n        view\\n        returns (RewardTokenInfo memory)\\n    {\\n        return\\n            RewardTokenInfo({\\n                index: s.rewardTokens[_rewardToken].index,\\n                periodFinish: s.rewardTokens[_rewardToken].periodFinish,\\n                rewardRate: s.rewardTokens[_rewardToken].rewardRate,\\n                rewardPerTokenStored: s\\n                    .rewardTokens[_rewardToken]\\n                    .rewardPerTokenStored,\\n                lastUpdateTime: s.rewardTokens[_rewardToken].lastUpdateTime\\n            });\\n    }\\n\\n    function lastTimeRewardApplicable(address _rewardToken)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 periodFinish = s.rewardTokens[_rewardToken].periodFinish;\\n        // return smaller time\\n        return block.timestamp > periodFinish ? periodFinish : block.timestamp;\\n    }\\n\\n    // gets the amount of rew\\n    function rewardPerToken(address _rewardToken)\\n        internal\\n        view\\n        returns (uint256 rewardPerToken_, uint256 lastTimeRewardApplicable_)\\n    {\\n        RewardToken storage rewardToken = s.rewardTokens[_rewardToken];\\n        uint256 l_totalSupply = s.totalSupply;\\n        uint256 lastUpdateTime = rewardToken.lastUpdateTime;\\n        lastTimeRewardApplicable_ = lastTimeRewardApplicable(_rewardToken);\\n        if (lastUpdateTime == 0 || l_totalSupply == 0) {\\n            rewardPerToken_ = rewardToken.rewardPerTokenStored;\\n        } else {\\n            rewardPerToken_ =\\n                rewardToken.rewardPerTokenStored +\\n                ((lastTimeRewardApplicable_ - lastUpdateTime) *\\n                    rewardToken.rewardRate *\\n                    1e18) /\\n                l_totalSupply;\\n        }\\n    }\\n\\n    // earned an not yet paid\\n    function earned(address _rewardToken, address _account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        (uint256 l_rewardPerToken, ) = rewardPerToken(_rewardToken);\\n        return internalEarned(l_rewardPerToken, _rewardToken, _account);\\n    }\\n\\n    function internalEarned(\\n        uint256 _rewardPerToken,\\n        address _rewardToken,\\n        address _account\\n    ) internal view returns (uint256) {\\n        RewardToken storage rewardToken = s.rewardTokens[_rewardToken];\\n        return\\n            (s.balances[_account] *\\n                (_rewardPerToken -\\n                    rewardToken.rewards[_account].userRewardPerTokenPaid)) /\\n            1e18 +\\n            rewardToken.rewards[_account].rewardToPay;\\n    }\\n\\n    struct Earned {\\n        address rewardToken;\\n        uint256 earned;\\n    }\\n\\n    function earned(address _account)\\n        external\\n        view\\n        returns (Earned[] memory earned_)\\n    {\\n        earned_ = new Earned[](s.rewardTokensArray.length);\\n        for (uint256 i; i < earned_.length; i++) {\\n            address rewardTokenAddress = s.rewardTokensArray[i];\\n            earned_[i].rewardToken = rewardTokenAddress;\\n            (uint256 l_rewardPerToken, ) = rewardPerToken(rewardTokenAddress);\\n            earned_[i].earned = internalEarned(\\n                l_rewardPerToken,\\n                rewardTokenAddress,\\n                _account\\n            );\\n        }\\n    }\\n\\n    function stakeWithPermit(\\n        uint256 _amount,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external {\\n        require(_amount > 0, \\\"Cannot stake 0\\\");\\n        updateRewardAll(msg.sender);\\n        IERC20 l_stakingToken = s.stakingToken;\\n        s.totalSupply += _amount;\\n        s.balances[msg.sender] += _amount;\\n        emit Staked(msg.sender, _amount);\\n        // permit\\n        IERC20Permit(address(l_stakingToken)).permit(\\n            msg.sender,\\n            address(this),\\n            _amount,\\n            _deadline,\\n            _v,\\n            _r,\\n            _s\\n        );\\n\\n        SafeERC20.safeTransferFrom(\\n            l_stakingToken,\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n    }\\n\\n    function stake(uint256 _amount) external {\\n        require(_amount > 0, \\\"Cannot stake 0\\\");\\n        updateRewardAll(msg.sender);\\n        s.totalSupply += _amount;\\n        s.balances[msg.sender] += _amount;\\n        emit Staked(msg.sender, _amount);\\n        SafeERC20.safeTransferFrom(\\n            s.stakingToken,\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n    }\\n\\n    function getRewards() public {\\n        uint256 length = s.rewardTokensArray.length;\\n        for (uint256 i; i < length; ) {\\n            address rewardTokenAddress = s.rewardTokensArray[i];\\n            uint256 rewardToPay = updateReward(rewardTokenAddress, msg.sender);\\n            RewardToken storage rewardToken = s.rewardTokens[\\n                rewardTokenAddress\\n            ];\\n            if (rewardToPay > 0) {\\n                rewardToken.rewards[msg.sender].rewardToPay = 0;\\n                emit RewardPaid(rewardTokenAddress, msg.sender, rewardToPay);\\n                SafeERC20.safeTransfer(\\n                    IERC20(rewardTokenAddress),\\n                    msg.sender,\\n                    rewardToPay\\n                );\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function getSpecificRewards(address[] calldata _rewardTokensArray)\\n        external\\n    {\\n        for (uint256 i; i < _rewardTokensArray.length; ) {\\n            address rewardTokenAddress = _rewardTokensArray[i];\\n            RewardToken storage rewardToken = s.rewardTokens[\\n                rewardTokenAddress\\n            ];\\n            uint256 index = rewardToken.index;\\n            require(\\n                s.rewardTokensArray[index] == rewardTokenAddress,\\n                \\\"Reward token address does not exist\\\"\\n            );\\n            uint256 rewardToPay = updateReward(rewardTokenAddress, msg.sender);\\n            if (rewardToPay > 0) {\\n                rewardToken.rewards[msg.sender].rewardToPay = 0;\\n                emit RewardPaid(rewardTokenAddress, msg.sender, rewardToPay);\\n                SafeERC20.safeTransfer(\\n                    IERC20(rewardTokenAddress),\\n                    msg.sender,\\n                    rewardToPay\\n                );\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function withdraw(uint256 _amount) public {\\n        require(_amount > 0, \\\"Cannot withdraw 0\\\");\\n        uint256 balance = s.balances[msg.sender];\\n        require(_amount <= balance, \\\"Can't withdraw more than staked\\\");\\n        updateRewardAll(msg.sender);\\n        s.totalSupply -= _amount;\\n        s.balances[msg.sender] = balance - _amount;\\n        emit Withdrawn(msg.sender, _amount);\\n        SafeERC20.safeTransfer(s.stakingToken, msg.sender, _amount);\\n    }\\n\\n    function withdrawAll() external {\\n        withdraw(s.balances[msg.sender]);\\n    }\\n\\n    function exit() external {\\n        getRewards();\\n        uint256 amount = s.balances[msg.sender];\\n        s.totalSupply -= amount;\\n        s.balances[msg.sender] = 0;\\n        emit Withdrawn(msg.sender, amount);\\n        SafeERC20.safeTransfer(s.stakingToken, msg.sender, amount);\\n    }\\n\\n    function updateRewardAll(address _account) internal {\\n        uint256 length = s.rewardTokensArray.length;\\n        for (uint256 i; i < length; ) {\\n            address rewardTokenAddress = s.rewardTokensArray[i];\\n            updateReward(rewardTokenAddress, _account);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function updateReward(address _rewardToken, address _account)\\n        internal\\n        returns (uint256 rewardToPay_)\\n    {\\n        RewardToken storage rewardToken = s.rewardTokens[_rewardToken];\\n        (uint256 l_rewardPerToken, uint256 lastUpdateTime) = rewardPerToken(\\n            _rewardToken\\n        );\\n        rewardToken.rewardPerTokenStored = uint128(l_rewardPerToken);\\n        rewardToken.lastUpdateTime = uint32(lastUpdateTime);\\n        rewardToPay_ = internalEarned(l_rewardPerToken, _rewardToken, _account);\\n        rewardToken.rewards[_account].rewardToPay = uint128(rewardToPay_);\\n        rewardToken.rewards[_account].userRewardPerTokenPaid = uint128(\\n            l_rewardPerToken\\n        );\\n    }\\n\\n    struct RewardTokenArgs {\\n        address rewardToken; // ERC20 address\\n        uint256 reward; // total reward amount\\n        uint256 rewardDuration; // how many seconds rewards are distributed\\n    }\\n\\n    function notifyRewardAmount(RewardTokenArgs[] calldata _args) external {\\n        require(\\n            msg.sender == s.rewardsDistribution,\\n            \\\"Caller is not RewardsDistribution\\\"\\n        );\\n        require(\\n            s.rewardTokensArray.length + _args.length <= 200,\\n            \\\"Too many reward tokens\\\"\\n        );\\n        for (uint256 i; i < _args.length; ) {\\n            RewardTokenArgs calldata args = _args[i];\\n            RewardToken storage rewardToken = s.rewardTokens[args.rewardToken];\\n            uint256 oldPeriodFinish = rewardToken.periodFinish;\\n            require(\\n                block.timestamp + args.rewardDuration >= oldPeriodFinish,\\n                \\\"Cannot reduce existing period\\\"\\n            );\\n            uint256 rewardRate;\\n            if (block.timestamp >= oldPeriodFinish) {\\n                require(\\n                    args.reward <= type(uint128).max,\\n                    \\\"Reward is too large\\\"\\n                );\\n                rewardRate = args.reward / args.rewardDuration;\\n            } else {\\n                uint256 remaining = oldPeriodFinish - block.timestamp;\\n                uint256 leftover = remaining * rewardToken.rewardRate;\\n                uint256 reward = args.reward + leftover;\\n                require(reward <= type(uint128).max, \\\"Reward is too large\\\");\\n                rewardRate = reward / args.rewardDuration;\\n            }\\n            (uint256 l_rewardPerToken, ) = rewardPerToken(args.rewardToken);\\n            rewardToken.rewardPerTokenStored = uint128(l_rewardPerToken);\\n            uint256 periodFinish = block.timestamp + args.rewardDuration;\\n            if (oldPeriodFinish == 0) {\\n                rewardToken.index = uint16(s.rewardTokensArray.length);\\n                s.rewardTokensArray.push(args.rewardToken);\\n            }\\n            rewardToken.periodFinish = uint32(periodFinish);\\n            rewardToken.lastUpdateTime = uint32(block.timestamp);\\n            rewardToken.rewardRate = uint128(rewardRate);\\n            emit RewardAdded(args.rewardToken, args.reward, periodFinish);\\n\\n            // Ensure the provided reward amount is not more than the balance in the contract.\\n            // This keeps the reward rate in the right range, preventing overflows due to\\n            // very high values of rewardRate in the earned and rewardsPerToken functions;\\n            // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n            uint256 balance = IERC20(args.rewardToken).balanceOf(address(this));\\n            require(\\n                rewardRate <= balance / args.rewardDuration,\\n                \\\"Provided reward not in contract\\\"\\n            );\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    event RewardAdded(\\n        address indexed rewardToken,\\n        uint256 reward,\\n        uint256 periodFinish\\n    );\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(\\n        address indexed rewardToken,\\n        address indexed user,\\n        uint256 reward\\n    );\\n    event RewardsDistributionTransferred(\\n        address indexed oldRewardsDistribution,\\n        address indexed newRewardsDistribution\\n    );\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsDistribution\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRewardsDistribution\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRewardsDistribution\",\"type\":\"address\"}],\"name\":\"RewardsDistributionTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"}],\"internalType\":\"struct MegaPool.Earned[]\",\"name\":\"earned_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokensArray\",\"type\":\"address[]\"}],\"name\":\"getSpecificRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct MegaPool.RewardTokenArgs[]\",\"name\":\"_args\",\"type\":\"tuple[]\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"rewardTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"}],\"internalType\":\"struct MegaPool.RewardTokenInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokensArray\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"rewardTokens_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDistribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"stakeWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRewardsDistribution\",\"type\":\"address\"}],\"name\":\"transferRewardsDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MegaPool","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004ac8ae57cbd94c89bdd5c23b064c6fa0c8ac9f530000000000000000000000001a4b5bf50e1efd384179c4a1277a3114e5ddcbd6","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}