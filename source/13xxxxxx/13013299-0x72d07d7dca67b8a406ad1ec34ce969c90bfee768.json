{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CTokenRateProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./interfaces/IRateProvider.sol\\\";\\nimport \\\"./interfaces/ICToken.sol\\\";\\n\\n/**\\n * @title cToken Rate Provider\\n * @notice Returns the value of a cToken in terms of its underlying\\n */\\ncontract CTokenRateProvider is IRateProvider {\\n    ICToken public immutable cToken;\\n\\n    constructor(ICToken _cToken) {\\n        require(_cToken.isCToken(), \\\"Provided address is not cToken\\\");\\n        cToken = _cToken;\\n    }\\n\\n    /**\\n     * @return the value of RateProvider's cToken in terms of its underlying\\n     */\\n    function getRate() external view override returns (uint256) {\\n        return cToken.exchangeRateStored();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRateProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n// TODO: pull this from the monorepo\\ninterface IRateProvider {\\n    function getRate() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\ninterface ICToken {\\n    /**\\n     * @notice Indicator that this is a CToken contract (for inspection)\\n     */\\n    function isCToken() external view returns (bool);\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     */\\n    function exchangeRateStored() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/WstETHRateProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./interfaces/IRateProvider.sol\\\";\\nimport \\\"./interfaces/IwstETH.sol\\\";\\n\\n/**\\n * @title Wrapped stETH Rate Provider\\n * @notice Returns the value of wstETH in terms of stETH\\n */\\ncontract WstETHRateProvider is IRateProvider {\\n    IwstETH public immutable wstETH;\\n\\n    constructor(IwstETH _wstETH) {\\n        wstETH = _wstETH;\\n    }\\n\\n    /**\\n     * @return the value of wstETH in terms of stETH\\n     */\\n    function getRate() external view override returns (uint256) {\\n        return wstETH.stEthPerToken();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IwstETH.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2021 Lido <info@lido.fi>\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.7.1;\\n\\n/**\\n * @title StETH token wrapper with static balances.\\n * @dev It's an ERC20 token that represents the account's share of the total\\n * supply of stETH tokens. WstETH token's balance only changes on transfers,\\n * unlike StETH that is also changed when oracles report staking rewards and\\n * penalties. It's a \\\"power user\\\" token for DeFi protocols which don't\\n * support rebasable tokens.\\n *\\n * The contract is also a trustless wrapper that accepts stETH tokens and mints\\n * wstETH in return. Then the user unwraps, the contract burns user's wstETH\\n * and sends user locked stETH in return.\\n *\\n * The contract provides the staking shortcut: user can send ETH with regular\\n * transfer and get wstETH in return. The contract will send ETH to Lido submit\\n * method, staking it and wrapping the received stETH.\\n *\\n */\\ninterface IwstETH {\\n    /**\\n     * @notice Get amount of wstETH for a one stETH\\n     * @return Amount of stETH for 1 wstETH\\n     */\\n    function stEthPerToken() external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IwstETH\",\"name\":\"_wstETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wstETH\",\"outputs\":[{\"internalType\":\"contract IwstETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"WstETHRateProvider","CompilerVersion":"v0.7.1+commit.f4a555be","OptimizationUsed":"1","Runs":"9999","ConstructorArguments":"0000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca0","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}