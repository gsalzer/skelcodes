{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.3;\r\n\r\ninterface IPriceFeedProvider {\r\n    /**\r\n     * Returns the latest price for a price feed.\r\n     * It reverts if the feed id is invalid: there was no price feed address provided for the given id yet\r\n     */\r\n    function getLatestPrice(uint8 _priceFeedId)\r\n        external\r\n        view\r\n        returns (int256);\r\n}\r\n\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals()\r\n    external\r\n    view\r\n    returns (\r\n      uint8\r\n    );\r\n\r\n  function description()\r\n    external\r\n    view\r\n    returns (\r\n      string memory\r\n    );\r\n\r\n  function version()\r\n    external\r\n    view\r\n    returns (\r\n      uint256\r\n    );\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(\r\n    uint80 _roundId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n// File: contracts/PriceFeedProvider.sol\r\n\r\n\r\npragma solidity ^0.8.3;\r\n\r\n\r\n\r\ncontract PriceFeedProvider is IPriceFeedProvider {\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    address admin;\r\n\r\n    mapping(uint8 => address) private priceFeeds;\r\n\r\n    constructor() {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Returns the latest price for a price feed.\r\n     * It reverts if the feed id is invalid: there was no price feed address provided for the given id yet\r\n     */\r\n    function getLatestPrice(uint8 _priceFeedId)\r\n        external\r\n        view\r\n        override\r\n        returns (int256)\r\n    {\r\n        require(\r\n            priceFeeds[_priceFeedId] != address(0),\r\n            \"invalid price feed id\"\r\n        );\r\n        AggregatorV3Interface priceFeed;\r\n        priceFeed = AggregatorV3Interface(priceFeeds[_priceFeedId]);\r\n        (, int256 price, , , ) = priceFeed.latestRoundData();\r\n        return price;\r\n    }\r\n\r\n    /**\r\n     * Inserts or updates the price feed address for the given price feed id\r\n     */\r\n    function upsertFeed(uint8 _id, address _dataFeedAddress) external {\r\n        require(msg.sender == admin, \"admin only\");\r\n        priceFeeds[_id] = _dataFeedAddress;\r\n    }\r\n\r\n    function transferOwnership(address newAdmin) external {\r\n        require(msg.sender == admin, \"admin only\");\r\n        emit OwnershipTransferred(admin, newAdmin);\r\n        admin = newAdmin;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_priceFeedId\",\"type\":\"uint8\"}],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_dataFeedAddress\",\"type\":\"address\"}],\"name\":\"upsertFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PriceFeedProvider","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e4dd08a2489a0cf0d706174bc5e50821ae245bf388d06a7a0cd6b25dd4f0a095"}]}