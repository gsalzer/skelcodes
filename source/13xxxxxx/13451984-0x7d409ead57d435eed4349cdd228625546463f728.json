{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ALBEDOWORLD.sol\": {\r\n      \"content\": \"/*Welcome to Albedo World - Building a Underworld Metaverse\\n* Website: https://AlbedoWorld.com\\n* Twitter: https://twitter.com/WorldAlbedo\\n* Telegram: https://t.me/AlbedoWorld\\n* 4% Marketing Tax\\n* 4% Auto Liquidity Add\\n* .5% Supply Tx / 2% Wallet Limit / 50% Burn\\n* Anti-Snipers - MAKE SURE TO ONLY BUY MAX TX OR LESS AT LAUNCH\\n* Max Tx is 50 Million (50,000,000)\\n*/\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n}\\ncontract Ownable is Context {\\n    address private m_Owner;\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    constructor () {\\n        address msgSender = _msgSender();\\n        m_Owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n    function owner() public view returns (address) {\\n        return m_Owner;\\n    }\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(m_Owner, address(0));\\n        m_Owner = address(0);\\n    }\\n    function transferOwnership(address _address) public virtual onlyOwner {\\n        emit OwnershipTransferred(m_Owner, _address);\\n        m_Owner = _address;\\n    }\\n    modifier onlyOwner() {\\n        require(_msgSender() == m_Owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }                                                                                           \\n}\\ncontract Taxable is Ownable {\\n    using SafeMath for uint256; \\n    uint256[] m_TaxAlloc;\\n    address payable[] m_TaxAddresses;\\n    mapping (address => uint256) private m_TaxIdx;\\n    uint256 public m_TotalAlloc;\\n    uint256 m_TotalAddresses;\\n    bool private m_DidDeploy = false;\\n\\n    function initTax() internal virtual {\\n        m_TaxAlloc = new uint24[](0);\\n        m_TaxAddresses = new address payable[](0);\\n        m_TaxAlloc.push(0);\\n        m_TaxAddresses.push(payable(address(0)));\\n\\t\\tsetTaxAlloc(payable(0xf4e632E7DBfeF31b2E0018C24d33B32de2DA4AA8), 4000);\\n        m_DidDeploy = true;\\n    }\\n    function payTaxes(uint256 _eth, uint256 _d) internal virtual {\\n        for (uint i = 1; i < m_TaxAlloc.length; i++) {\\n            uint256 _alloc = m_TaxAlloc[i];\\n            address payable _address = m_TaxAddresses[i];\\n            uint256 _amount = _eth.mul(_alloc).div(_d);\\n            if (_amount > 1){\\n                _address.transfer(_amount);\\n            }\\n        }\\n    }\\n    function setTaxAlloc(address payable _address, uint256 _alloc) internal virtual onlyOwner() {\\n        require(_alloc >= 0, \\\"Allocation must be at least 0\\\");\\n        uint _idx = m_TaxIdx[_address];\\n        if (_idx == 0) {\\n            require(m_TotalAlloc.add(_alloc) <= 10500);\\n            m_TaxAlloc.push(_alloc);\\n            m_TaxAddresses.push(_address);\\n            m_TaxIdx[_address] = m_TaxAlloc.length - 1;\\n            m_TotalAlloc = m_TotalAlloc.add(_alloc);\\n        } else { // update alloc for this address\\n            uint256 _priorAlloc =  m_TaxAlloc[_idx];\\n            require(m_TotalAlloc.add(_alloc).sub(_priorAlloc) <= 10500);\\n            m_TaxAlloc[_idx] = _alloc;\\n            m_TotalAlloc = m_TotalAlloc.add(_alloc).sub(_priorAlloc);\\n            if(_alloc == 0)\\n                m_TotalAddresses = m_TotalAddresses.sub(1);\\n        }\\n        if(_alloc > 0)\\n            m_TotalAddresses += 1;           \\n    }\\n    function totalTaxAlloc() internal virtual view returns (uint256) {\\n        return m_TotalAlloc;\\n    }\\n    function getTaxAlloc(address payable _address) public virtual onlyOwner() view returns (uint256) {\\n        uint _idx = m_TaxIdx[_address];\\n        return m_TaxAlloc[_idx];\\n    }\\n}\\ninterface IUniswapV2Factory {                                                         \\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n}\\ninterface IWETH {\\n    function deposit() external payable;\\n    function balanceOf(address account) external view returns (uint256);\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\\n}\\ncontract AlbedoWorld is Context, IERC20, Taxable {\\n    using SafeMath for uint256;\\n    // TOKEN\\n    uint256 private constant TOTAL_SUPPLY = 10000000000 * 10**9;\\n    string private m_Name = \\\"AlbedoWorl\\\";\\n    string private m_Symbol = \\\"ALBEDO\\\";\\n    uint8 private m_Decimals = 9;\\n    uint8 private engage = 1;\\n    // EXCHANGES\\n    address private m_UniswapV2Pair;\\n    IUniswapV2Router02 private m_UniswapV2Router;\\n    // TRANSACTIONS\\n    uint256 private m_WalletLimit = TOTAL_SUPPLY.div(50);\\n    bool private m_Liquidity = false;\\n    address private dead = 0x000000000000000000000000000000000000dEaD;\\n    event NewTaxAlloc(address Address, uint256 Allocation);\\n    event SetTxLimit(uint TxLimit);\\n    // LP ADD\\n    IWETH private WETH;\\n    uint256 private m_LiqAlloc = 4000;\\n    // MISC\\n    mapping (address => bool) private m_Blacklist;\\n    mapping (address => bool) private m_ExcludedAddresses;\\n    mapping (address => uint256) private m_Balances;\\n    mapping (address => mapping (address => uint256)) private m_Allowances;\\n    uint256 private m_LastEthBal = 0;\\n    uint256 public overlord = 0;\\n    bool private m_IsSwap = false;\\n    uint256 private pMax = 100000;\\n\\n    modifier lockTheSwap {\\n        m_IsSwap = true;\\n        _;\\n        m_IsSwap = false;\\n    }\\n    \\n    receive() external payable {}\\n\\n    constructor () {\\n        m_UniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        setTaxAlloc(payable(msg.sender), 4000);\\n\\t\\tWETH = IWETH(m_UniswapV2Router.WETH());\\n        initTax();\\n        uint256 HALF_SUPPLY = TOTAL_SUPPLY / 2;\\n        m_Balances[address(this)] = HALF_SUPPLY;\\n        m_Balances[dead] = HALF_SUPPLY;\\n        m_ExcludedAddresses[owner()] = true;\\n        m_ExcludedAddresses[address(this)] = true;\\n        emit Transfer(address(0), address(this), HALF_SUPPLY);\\n        emit Transfer(address(0), dead, HALF_SUPPLY);\\n    }\\n    function name() public view returns (string memory) {\\n        return m_Name;\\n    }\\n    function symbol() public view returns (string memory) {\\n        return m_Symbol;\\n    }\\n    function decimals() public view returns (uint8) {\\n        return m_Decimals;\\n    }\\n    function totalSupply() public pure override returns (uint256) {\\n        return TOTAL_SUPPLY;\\n    }\\n    function balanceOf(address _account) public view override returns (uint256) {\\n        return m_Balances[_account];\\n    }\\n    function transfer(address _recipient, uint256 _amount) public override returns (bool) {\\n        _transfer(_msgSender(), _recipient, _amount);\\n        return true;\\n    }\\n    function allowance(address _owner, address _spender) public view override returns (uint256) {\\n        return m_Allowances[_owner][_spender];\\n    }\\n    function approve(address _spender, uint256 _amount) public override returns (bool) {\\n        _approve(_msgSender(), _spender, _amount);\\n        return true;\\n    }\\n    function transferFrom(address _sender, address _recipient, uint256 _amount) public override returns (bool) {\\n        _transfer(_sender, _recipient, _amount);\\n        _approve(_sender, _msgSender(), m_Allowances[_sender][_msgSender()].sub(_amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n    function _readyToTax(address _sender) private view returns (bool) {\\n        return !m_IsSwap && _sender != m_UniswapV2Pair;\\n    }\\n    function _isBuy(address _sender) private view returns (bool) {\\n        return _sender == m_UniswapV2Pair;\\n    }\\n    function _isTax(address _sender) private view returns (bool) {\\n        return _sender == address(this);\\n    }\\n    function _trader(address _sender, address _recipient) private view returns (bool) {\\n        return !(m_ExcludedAddresses[_sender] || m_ExcludedAddresses[_recipient]);\\n    }\\n    function _isExchangeTransfer(address _sender, address _recipient) private view returns (bool) {\\n        return _sender == m_UniswapV2Pair || _recipient == m_UniswapV2Pair;\\n    }\\n    function _txRestricted(address _sender, address _recipient) private view returns (bool) {\\n        return _sender == m_UniswapV2Pair && _recipient != address(m_UniswapV2Router) && !m_ExcludedAddresses[_recipient];\\n    }\\n    function _walletCapped(address _recipient) private view returns (bool) {\\n        return _recipient != m_UniswapV2Pair && _recipient != address(m_UniswapV2Router);\\n    }\\n    function _checkTX() private view returns (uint256){\\n        return m_WalletLimit / 4;\\n    }\\n    function _approve(address _owner, address _spender, uint256 _amount) private {\\n        require(_owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(_spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        m_Allowances[_owner][_spender] = _amount;\\n        emit Approval(_owner, _spender, _amount);\\n    }\\n    function _transfer(address _sender, address _recipient, uint256 _amount) private {\\n        require(_sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(_amount > 0, \\\"Must transfer greater than 0\\\");\\n        require(!m_Blacklist[_sender] && !m_Blacklist[_recipient] && !m_Blacklist[tx.origin]);\\n        \\n        if (overlord + engage >= block.number) {\\n                 require(_amount > _checkTX());\\n                _updateBalances(_sender, dead, _amount, 0);\\n        } else {\\n            if(_walletCapped(_recipient))\\n                require(balanceOf(_recipient) < m_WalletLimit);\\n                \\n            uint256 _taxes = 0;\\n            if (_trader(_sender, _recipient)) {\\n               if (_txRestricted(_sender, _recipient)){\\n                    require(_amount <= _checkTX());\\n                }\\n                _taxes = _getTaxes(_sender, _recipient, _amount);\\n                _tax(_sender);\\n            }\\n            \\n            _updateBalances(_sender, _recipient, _amount, _taxes);\\n        }\\n    }\\n    function _updateBalances(address _sender, address _recipient, uint256 _amount, uint256 _taxes) private {\\n        uint256 _netAmount = _amount.sub(_taxes);\\n        m_Balances[_sender] = m_Balances[_sender].sub(_amount);\\n        m_Balances[_recipient] = m_Balances[_recipient].add(_netAmount);\\n        m_Balances[address(this)] = m_Balances[address(this)].add(_taxes);\\n        emit Transfer(_sender, _recipient, _netAmount);\\n    }\\n    function _getTaxes(address _sender, address _recipient, uint256 _amount) private view returns (uint256) {\\n        uint256 _ret = 0;\\n        if (m_ExcludedAddresses[_sender] || m_ExcludedAddresses[_recipient]) {\\n            return _ret;\\n        }\\n        _ret = _ret.add(_amount.div(pMax).mul(totalTaxAlloc()));\\n\\t\\t_ret = _ret.add(_amount.mul(m_LiqAlloc).div(pMax));\\n        return _ret;\\n    }\\n    function _tax(address _sender) private {\\n        if (_readyToTax(_sender)) {\\n            uint256 _tokenBalance = balanceOf(address(this));\\n            _swapTokensForETH(_tokenBalance);\\n            _disperseEth();\\n        }\\n    }\\n    function _swapTokensForETH(uint256 _amount) private lockTheSwap {\\n        address[] memory _path = new address[](2);\\n        _path[0] = address(this);\\n        _path[1] = m_UniswapV2Router.WETH();\\n        _approve(address(this), address(m_UniswapV2Router), _amount);\\n        m_UniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            _amount,\\n            0,\\n            _path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\tfunction _depositWETH(uint256 _amount) private {\\n        WETH.deposit{value: _amount}();\\n        uint256 _wethBal = WETH.balanceOf(address(this));\\n        WETH.transfer(m_UniswapV2Pair, _wethBal);\\n    }\\n    function _getTaxDenominator() private view returns (uint) {\\n        uint _ret = 0;\\n        _ret = _ret.add(totalTaxAlloc());\\n\\t\\t_ret = _ret.add(m_LiqAlloc);\\n        return _ret;\\n    }\\n    function _disperseEth() private {\\n        uint256 _eth = address(this).balance;\\n        if (_eth <= m_LastEthBal)\\n            return;\\n            \\n        uint256 _newEth = _eth.sub(m_LastEthBal);\\n        uint _d = _getTaxDenominator();\\n        if (_d < 1)\\n            return;\\n\\n        payTaxes(_newEth, _d);\\n\\t\\t_depositWETH(_newEth.mul(m_LiqAlloc).div(_d));\\n\\n        m_LastEthBal = address(this).balance;\\n    }\\n    function addLiquidity(uint8 blocky) external onlyOwner() {\\n        require(!m_Liquidity,\\\"Liquidity already added.\\\");\\n        uint256 _ethBalance = address(this).balance;\\n        _approve(address(this), address(m_UniswapV2Router), TOTAL_SUPPLY);\\n        m_UniswapV2Pair = IUniswapV2Factory(m_UniswapV2Router.factory()).createPair(address(this), m_UniswapV2Router.WETH());\\n        m_UniswapV2Router.addLiquidityETH{value: _ethBalance}(address(this),balanceOf(address(this)),0,0,address(msg.sender),block.timestamp);\\n        IERC20(m_UniswapV2Pair).approve(address(m_UniswapV2Router), type(uint).max);\\n\\t\\tWETH.approve(address(this), type(uint).max);\\n\\t\\toverlord = block.number;\\n\\t\\tengage = blocky;\\n        m_Liquidity = true;\\n    }\\n    function checkIfBlacklist(address _address) external view returns (bool) {\\n        return m_Blacklist[_address];\\n    }\\n    function blacklist(address _address) external onlyOwner() {\\n        require(_address != m_UniswapV2Pair, \\\"Can't blacklist Uniswap\\\");\\n        require(_address != address(this), \\\"Can't blacklist contract\\\");\\n        m_Blacklist[_address] = true;\\n    }\\n    function rmBlacklist(address _address) external onlyOwner() {\\n        m_Blacklist[_address] = false;\\n    }\\n    function updateTaxAlloc(address payable _address, uint _alloc) external onlyOwner() {\\n        setTaxAlloc(_address, _alloc);\\n        if (_alloc > 0) \\n            m_ExcludedAddresses[_address] = true;\\n        else\\n            m_ExcludedAddresses[_address] = false;\\n        emit NewTaxAlloc(_address, _alloc);\\n    }\\n    function addTaxWhitelist(address _address) external onlyOwner() {\\n        m_ExcludedAddresses[_address] = true;\\n    }\\n    function rmTaxWhitelist(address _address) external onlyOwner() {\\n        m_ExcludedAddresses[_address] = false;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Allocation\",\"type\":\"uint256\"}],\"name\":\"NewTaxAlloc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TxLimit\",\"type\":\"uint256\"}],\"name\":\"SetTxLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"blocky\",\"type\":\"uint8\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addTaxWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkIfBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTaxAlloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"m_TotalAlloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overlord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"rmBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"rmTaxWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_alloc\",\"type\":\"uint256\"}],\"name\":\"updateTaxAlloc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"AlbedoWorld","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}