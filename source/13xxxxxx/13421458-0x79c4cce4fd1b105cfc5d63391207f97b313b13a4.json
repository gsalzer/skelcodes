{"status":"1","message":"OK","result":[{"SourceCode":"{\"LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface LinkTokenInterface {\\r\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\r\\n\\r\\n  function approve(address spender, uint256 value) external returns (bool success);\\r\\n\\r\\n  function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n  function decimals() external view returns (uint8 decimalPlaces);\\r\\n\\r\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\r\\n\\r\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\r\\n\\r\\n  function name() external view returns (string memory tokenName);\\r\\n\\r\\n  function symbol() external view returns (string memory tokenSymbol);\\r\\n\\r\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\r\\n\\r\\n  function transfer(address to, uint256 value) external returns (bool success);\\r\\n\\r\\n  function transferAndCall(\\r\\n    address to,\\r\\n    uint256 value,\\r\\n    bytes calldata data\\r\\n  ) external returns (bool success);\\r\\n\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) external returns (bool success);\\r\\n}\\r\\n\"},\"LuxFi_LuckyDraw.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"./VRFConsumerBase.sol\\\";\\r\\n\\r\\ncontract LuxFiLuckyDraw is VRFConsumerBase {\\r\\n    bytes32 internal keyHash;\\r\\n    address internal owner;\\r\\n    uint256 internal fee;\\r\\n    uint256[] public randomResultArray;\\r\\n    uint256 public randomResult;\\r\\n    \\r\\n    constructor() \\r\\n        VRFConsumerBase(\\r\\n            0xf0d54349aDdcf704F77AE15b96510dEA15cb7952, // VRF Coordinator Mainnet\\r\\n            0x514910771AF9Ca656af840dff83E8264EcF986CA  // LINK Token Ethereum Mainnet\\r\\n        )\\r\\n    {\\r\\n        keyHash = 0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445; //mainnet\\r\\n        fee = 2 * 10 ** 18; // 2 LINK Mainnet(Varies by network)\\r\\n        owner = 0x4C89D4ceB47cfc577AFA7398Add6d0f9984EC784;\\r\\n    }\\r\\n    \\r\\n    function getRandomNumber() public returns (bytes32 requestId) {\\r\\n        require (owner == msg.sender);\\r\\n        return requestRandomness(keyHash, fee);\\r\\n    }\\r\\n    \\r\\n    function expand(uint256 randomValue, uint256 n) public pure returns (uint256[] memory expandedValues) {\\r\\n        expandedValues = new uint256[](n);\\r\\n        for (uint256 i = 0; i \\u003c n; i++) {\\r\\n\\t\\t\\t//ideally make the lottery ticket format in LXF00001, LXF + 5 digits \\r\\n            expandedValues[i] = (uint256(keccak256(abi.encode(randomValue, i))) % 74675) + 1;\\r\\n        }\\r\\n        return expandedValues;\\r\\n    }\\r\\n\\t\\r\\n    /* Callback function used by VRF Coordinator*/\\r\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\r\\n        randomResult = randomness;\\r\\n    }\\r\\n\\t\\r\\n    function drawResults() public {\\r\\n        require (owner == msg.sender);\\r\\n        randomResultArray = expand(randomResult, 66);\\r\\n    }\\r\\n\\t\\r\\n    function getResults() external view returns (uint256[] memory) {\\r\\n        return randomResultArray;\\r\\n    }\\r\\n}\\r\\n\\r\\n\"},\"VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./LinkTokenInterface.sol\\\";\\r\\n\\r\\nimport \\\"./VRFRequestIDBase.sol\\\";\\r\\n\\r\\n/** ****************************************************************************\\r\\n * @notice Interface for contracts using VRF randomness\\r\\n * *****************************************************************************\\r\\n * @dev PURPOSE\\r\\n *\\r\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\r\\n * @dev to Vera the verifier in such a way that Vera can be sure he\\u0027s not\\r\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\r\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\r\\n * @dev Reggie, he gives back a value which is computed completely\\r\\n * @dev deterministically from the seed and the secret key.\\r\\n *\\r\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\r\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\r\\n * @dev the output is indistinguishable to her from a uniform random sample\\r\\n * @dev from the output space.\\r\\n *\\r\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\r\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\r\\n * @dev simple access to a verifiable source of randomness.\\r\\n * *****************************************************************************\\r\\n * @dev USAGE\\r\\n *\\r\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\r\\n * @dev initialize VRFConsumerBase\\u0027s attributes in their constructor as\\r\\n * @dev shown:\\r\\n *\\r\\n * @dev   contract VRFConsumer {\\r\\n * @dev     constuctor(\\u003cother arguments\\u003e, address _vrfCoordinator, address _link)\\r\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\r\\n * @dev         \\u003cinitialization with other arguments goes here\\u003e\\r\\n * @dev       }\\r\\n * @dev   }\\r\\n *\\r\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\r\\n * @dev committed to (let\\u0027s call it keyHash), and have told you the minimum LINK\\r\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\r\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\r\\n * @dev want to generate randomness from.\\r\\n *\\r\\n * @dev Once the VRFCoordinator has received and validated the oracle\\u0027s response\\r\\n * @dev to your request, it will call your contract\\u0027s fulfillRandomness method.\\r\\n *\\r\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\r\\n * @dev generated from your seed.\\r\\n *\\r\\n * @dev The requestId argument is generated from the keyHash and the seed by\\r\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\r\\n * @dev requests open, you can use the requestId to track which seed is\\r\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\r\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\r\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\r\\n *\\r\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\r\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\r\\n * @dev next section.)\\r\\n *\\r\\n * *****************************************************************************\\r\\n * @dev SECURITY CONSIDERATIONS\\r\\n *\\r\\n * @dev A method with the ability to call your fulfillRandomness method directly\\r\\n * @dev could spoof a VRF response with any random value, so it\\u0027s critical that\\r\\n * @dev it cannot be directly called by anything other than this base contract\\r\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\r\\n *\\r\\n * @dev For your users to trust that your contract\\u0027s random behavior is free\\r\\n * @dev from malicious interference, it\\u0027s best if you can write it so that all\\r\\n * @dev behaviors implied by a VRF response are executed *during* your\\r\\n * @dev fulfillRandomness method. If your contract must store the response (or\\r\\n * @dev anything derived from it) and use it later, you must ensure that any\\r\\n * @dev user-significant behavior which depends on that stored value cannot be\\r\\n * @dev manipulated by a subsequent VRF request.\\r\\n *\\r\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\r\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\r\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\r\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\r\\n * @dev be used to manipulate your contract\\u0027s user-significant behavior.\\r\\n *\\r\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\r\\n * @dev block in which the request is made, user-provided seeds have no impact\\r\\n * @dev on its economic security properties. They are only included for API\\r\\n * @dev compatability with previous versions of this contract.\\r\\n *\\r\\n * @dev Since the block hash of the block which contains the requestRandomness\\r\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\r\\n * @dev miner could, in principle, fork the blockchain to evict the block\\r\\n * @dev containing the request, forcing the request to be included in a\\r\\n * @dev different block with a different hash, and therefore a different input\\r\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\r\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\r\\n * @dev until it calls responds to a request.\\r\\n */\\r\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\r\\n  /**\\r\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\r\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\r\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\r\\n   * @notice method.\\r\\n   *\\r\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\r\\n   * @dev signature, and will call it once it has verified the proof\\r\\n   * @dev associated with the randomness. (It is triggered via a call to\\r\\n   * @dev rawFulfillRandomness, below.)\\r\\n   *\\r\\n   * @param requestId The Id initially returned by requestRandomness\\r\\n   * @param randomness the VRF output\\r\\n   */\\r\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\r\\n\\r\\n  /**\\r\\n   * @dev In order to keep backwards compatibility we have kept the user\\r\\n   * seed field around. We remove the use of it because given that the blockhash\\r\\n   * enters later, it overrides whatever randomness the used seed provides.\\r\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\r\\n   * we have removed it from usage and can now provide a simpler API.\\r\\n   */\\r\\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\\r\\n\\r\\n  /**\\r\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\r\\n   *\\r\\n   * @dev The fulfillRandomness method receives the output, once it\\u0027s provided\\r\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\r\\n   *\\r\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\r\\n   * @dev the _fee must exceed the fee specified during registration of the\\r\\n   * @dev _keyHash.\\r\\n   *\\r\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\r\\n   * @dev compatibility with older versions. It can\\u0027t *hurt* to mix in some of\\r\\n   * @dev your own randomness, here, but it\\u0027s not necessary because the VRF\\r\\n   * @dev oracle will mix the hash of the block containing your request into the\\r\\n   * @dev VRF seed it ultimately uses.\\r\\n   *\\r\\n   * @param _keyHash ID of public key against which randomness is generated\\r\\n   * @param _fee The amount of LINK to send with the request\\r\\n   *\\r\\n   * @return requestId unique ID for this request\\r\\n   *\\r\\n   * @dev The returned requestId can be used to distinguish responses to\\r\\n   * @dev concurrent requests. It is passed as the first argument to\\r\\n   * @dev fulfillRandomness.\\r\\n   */\\r\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\\r\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\r\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\r\\n    // the hash of the block containing this request to obtain the seed/input\\r\\n    // which is finally passed to the VRF cryptographic machinery.\\r\\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\r\\n    // nonces[_keyHash] must stay in sync with\\r\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\r\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\r\\n    // This provides protection against the user repeating their input seed,\\r\\n    // which would result in a predictable/duplicate output, if multiple such\\r\\n    // requests appeared in the same block.\\r\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\r\\n    return makeRequestId(_keyHash, vRFSeed);\\r\\n  }\\r\\n\\r\\n  LinkTokenInterface internal immutable LINK;\\r\\n  address private immutable vrfCoordinator;\\r\\n\\r\\n  // Nonces for each VRF key from which randomness has been requested.\\r\\n  //\\r\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\r\\n  mapping(bytes32 =\\u003e uint256) /* keyHash */ /* nonce */\\r\\n    private nonces;\\r\\n\\r\\n  /**\\r\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\r\\n   * @param _link address of LINK token contract\\r\\n   *\\r\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\r\\n   */\\r\\n  constructor(address _vrfCoordinator, address _link) {\\r\\n    vrfCoordinator = _vrfCoordinator;\\r\\n    LINK = LinkTokenInterface(_link);\\r\\n  }\\r\\n\\r\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\r\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\r\\n  // the origin of the call\\r\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\r\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\r\\n    fulfillRandomness(requestId, randomness);\\r\\n  }\\r\\n}\\r\\n\"},\"VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract VRFRequestIDBase {\\r\\n  /**\\r\\n   * @notice returns the seed which is actually input to the VRF coordinator\\r\\n   *\\r\\n   * @dev To prevent repetition of VRF output due to repetition of the\\r\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\r\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\r\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\r\\n   * @dev the final seed, but the nonce does protect against repetition in\\r\\n   * @dev requests which are included in a single block.\\r\\n   *\\r\\n   * @param _userSeed VRF seed input provided by user\\r\\n   * @param _requester Address of the requesting contract\\r\\n   * @param _nonce User-specific nonce at the time of the request\\r\\n   */\\r\\n  function makeVRFInputSeed(\\r\\n    bytes32 _keyHash,\\r\\n    uint256 _userSeed,\\r\\n    address _requester,\\r\\n    uint256 _nonce\\r\\n  ) internal pure returns (uint256) {\\r\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the id for this request\\r\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\r\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\r\\n   * @return The id for this request\\r\\n   *\\r\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\r\\n   * @dev contract, but the one generated by makeVRFInputSeed\\r\\n   */\\r\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\r\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\r\\n  }\\r\\n}\\r\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"drawResults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"randomValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"expand\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"expandedValues\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRandomNumber\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getResults\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomResultArray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LuxFiLuckyDraw","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://04b414dddcf90dbedcfb3a7cd5c6f6b9cf8591b59bcbf3c79b21151783ab5fa5"}]}