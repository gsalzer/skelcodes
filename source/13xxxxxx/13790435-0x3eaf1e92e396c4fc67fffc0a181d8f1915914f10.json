{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/seed-phrases/SeedPhrase.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\nimport \\\"./SeedPhrasePricing.sol\\\";\\nimport \\\"../interfaces/IN.sol\\\";\\nimport \\\"../interfaces/IRarible.sol\\\";\\nimport \\\"../interfaces/IKarmaScore.sol\\\";\\nimport \\\"../interfaces/INOwnerResolver.sol\\\";\\nimport \\\"../libraries/NilProtocolUtils.sol\\\";\\nimport \\\"../libraries/SeedPhraseUtils.sol\\\";\\n\\n////////////////////////////////////////////////////////////////////////////////////////\\n//                                                                                    //\\n//                                                                                    //\\n// ░██████╗███████╗███████╗██████╗░  ██████╗░██╗░░██╗██████╗░░█████╗░░██████╗███████╗ //\\n// ██╔════╝██╔════╝██╔════╝██╔══██╗  ██╔══██╗██║░░██║██╔══██╗██╔══██╗██╔════╝██╔════╝ //\\n// ╚█████╗░█████╗░░█████╗░░██║░░██║  ██████╔╝███████║██████╔╝███████║╚█████╗░█████╗░░ //\\n// ░╚═══██╗██╔══╝░░██╔══╝░░██║░░██║  ██╔═══╝░██╔══██║██╔══██╗██╔══██║░╚═══██╗██╔══╝░░ //\\n// ██████╔╝███████╗███████╗██████╔╝  ██║░░░░░██║░░██║██║░░██║██║░░██║██████╔╝███████╗ //\\n// ╚═════╝░╚══════╝╚══════╝╚═════╝░  ╚═╝░░░░░╚═╝░░╚═╝╚═╝░░╚═╝╚═╝░░╚═╝╚═════╝░╚══════╝ //\\n//                                                                                    //\\n//                                                                                    //\\n//  Title: Seed Phrase                                                                //\\n//  Devs: Harry Faulkner & maximonee (twitter.com/maximonee_)                         //\\n//  Description: This contract provides minting for the                               //\\n//               Seed Phrase NFT by Sean Elliott                                      //\\n//               (twitter.com/seanelliottoc)                                          //\\n//                                                                                    //\\n////////////////////////////////////////////////////////////////////////////////////////\\n\\ncontract SeedPhrase is SeedPhrasePricing, VRFConsumerBase {\\n    using Strings for uint256;\\n    using Strings for uint16;\\n    using Strings for uint8;\\n    using Counters for Counters.Counter;\\n    using SeedPhraseUtils for SeedPhraseUtils.Random;\\n\\n    Counters.Counter private _doublePanelTokens;\\n    Counters.Counter private _tokenIds;\\n\\n    address private _owner;\\n\\n    // Tracks whether an n has been used already to mint\\n    mapping(uint256 => bool) public override nUsed;\\n\\n    mapping(PreSaleType => uint16) public presaleLimits;\\n\\n    address[] private genesisSketchAddresses;\\n    uint16[] private bipWordIds = new uint16[](2048);\\n\\n    IRarible public immutable rarible;\\n    INOwnerResolver public immutable nOwnerResolver;\\n    IKarmaScore public immutable karma;\\n\\n    struct Maps {\\n        // Map double panel tokens to burned singles\\n        mapping(uint256 => uint256[2]) burnedTokensPairings;\\n        // Mapping of valid double panel pairings (BIP39 IDs)\\n        mapping(uint16 => uint16) doubleWordPairings;\\n        // Stores the guarenteed token rarity for a double panel\\n        mapping(uint256 => uint8) doubleTokenRarity;\\n        mapping(address => bool) ogAddresses;\\n        // Map token to their unique seed\\n        mapping(uint256 => bytes32) tokenSeed;\\n    }\\n\\n    struct Config {\\n        bool preSaleActive;\\n        bool publicSaleActive;\\n        bool isSaleHalted;\\n        bool bipWordsShuffled;\\n        bool vrfNumberGenerated;\\n        bool isBurnActive;\\n        bool isOwnerSupplyMinted;\\n        bool isGsAirdropComplete;\\n        uint8 ownerSupply;\\n        uint16 maxPublicMint;\\n        uint16 karmaRequirement;\\n        uint32 preSaleLaunchTime;\\n        uint32 publicSaleLaunchTime;\\n        uint256 doubleBurnTokens;\\n        uint256 linkFee;\\n        uint256 raribleTokenId;\\n        uint256 vrfRandomValue;\\n        address vrfCoordinator;\\n        address linkToken;\\n        bytes32 vrfKeyHash;\\n    }\\n\\n    struct ContractAddresses {\\n        address n;\\n        address masterMint;\\n        address dao;\\n        address nOwnersRegistry;\\n        address vrfCoordinator;\\n        address linkToken;\\n        address karmaAddress;\\n        address rarible;\\n    }\\n\\n    Config private config;\\n    Maps private maps;\\n\\n    event Burnt(address to, uint256 firstBurntToken, uint256 secondBurntToken, uint256 doublePaneledToken);\\n\\n    DerivativeParameters params = DerivativeParameters(false, false, 0, 2048, 4);\\n\\n    constructor(\\n        ContractAddresses memory contractAddresses,\\n        bytes32 _vrfKeyHash,\\n        uint256 _linkFee\\n    )\\n        SeedPhrasePricing(\\n            \\\"Seed Phrase\\\",\\n            \\\"SEED\\\",\\n            IN(contractAddresses.n),\\n            params,\\n            30000000000000000,\\n            60000000000000000,\\n            contractAddresses.masterMint,\\n            contractAddresses.dao\\n        )\\n        VRFConsumerBase(contractAddresses.vrfCoordinator, contractAddresses.linkToken)\\n    {\\n        // Start token IDs at 1\\n        _tokenIds.increment();\\n\\n        presaleLimits[PreSaleType.N] = 400;\\n        presaleLimits[PreSaleType.Karma] = 800;\\n        presaleLimits[PreSaleType.GenesisSketch] = 40;\\n        presaleLimits[PreSaleType.OG] = 300;\\n        presaleLimits[PreSaleType.GM] = 300;\\n\\n        nOwnerResolver = INOwnerResolver(contractAddresses.nOwnersRegistry);\\n        rarible = IRarible(contractAddresses.rarible);\\n        karma = IKarmaScore(contractAddresses.karmaAddress);\\n\\n        // Initialize Config struct\\n        config.maxPublicMint = 8;\\n        config.ownerSupply = 20;\\n        config.preSaleLaunchTime = 1639591200;\\n        config.publicSaleLaunchTime = 1639598400;\\n        config.raribleTokenId = 706480;\\n        config.karmaRequirement = 1020;\\n\\n        config.vrfCoordinator = contractAddresses.vrfCoordinator;\\n        config.linkToken = contractAddresses.linkToken;\\n        config.linkFee = _linkFee;\\n        config.vrfKeyHash = _vrfKeyHash;\\n\\n        _owner = 0x7F05F27CC5D83C3e879C53882de13Cc1cbCe8a8c;\\n    }\\n\\n    function owner() external view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    function setOwner(address owner_) external onlyAdmin {\\n        _owner = owner_;\\n    }\\n\\n    function contractURI() public pure returns (string memory) {\\n        return \\\"https://www.seedphrase.codes/metadata/seedphrase-metadata.json\\\";\\n    }\\n\\n    function getVrfSeed() external onlyAdmin returns (bytes32) {\\n        require(!config.vrfNumberGenerated, \\\"SP:VRF_ALREADY_CALLED\\\");\\n        require(LINK.balanceOf(address(this)) >= config.linkFee, \\\"SP:NOT_ENOUGH_LINK\\\");\\n        return requestRandomness(config.vrfKeyHash, config.linkFee);\\n    }\\n\\n    function fulfillRandomness(bytes32, uint256 randomNumber) internal override {\\n        config.vrfRandomValue = randomNumber;\\n        config.vrfNumberGenerated = true;\\n    }\\n\\n    function _getTokenSeed(uint256 tokenId) internal view returns (bytes32) {\\n        return maps.tokenSeed[tokenId];\\n    }\\n\\n    function _getBipWordIdFromTokenId(uint256 tokenId) internal view returns (uint16) {\\n        return bipWordIds[tokenId - 1];\\n    }\\n\\n    function tokenSVG(uint256 tokenId) public view virtual returns (string memory svg, bytes memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        SeedPhraseUtils.Random memory random = SeedPhraseUtils.Random({\\n            seed: uint256(_getTokenSeed(tokenId)),\\n            offsetBit: 0\\n        });\\n\\n        uint16 bipWordId;\\n        uint16 secondBipWordId = 0;\\n        uint8 rarityValue = 0;\\n        if (tokenId >= 3000) {\\n            uint256[2] memory tokens = maps.burnedTokensPairings[tokenId];\\n            bipWordId = _getBipWordIdFromTokenId(tokens[0]);\\n            secondBipWordId = _getBipWordIdFromTokenId(tokens[1]);\\n            rarityValue = maps.doubleTokenRarity[tokenId];\\n        } else {\\n            bipWordId = _getBipWordIdFromTokenId(tokenId);\\n        }\\n\\n        (bytes memory traits, SeedPhraseUtils.Attrs memory attributes) = SeedPhraseUtils.getTraitsAndAttributes(\\n            bipWordId,\\n            secondBipWordId,\\n            rarityValue,\\n            random\\n        );\\n\\n        return (SeedPhraseUtils.render(random, attributes), traits);\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        (string memory output, bytes memory traits) = tokenSVG(tokenId);\\n\\n        return SeedPhraseUtils.getTokenURI(output, traits, tokenId);\\n    }\\n\\n    /**\\n    Updates the presale state for n holders\\n     */\\n    function setPreSaleState(bool _preSaleActiveState) external onlyAdmin {\\n        config.preSaleActive = _preSaleActiveState;\\n    }\\n\\n    /**\\n    Updates the public sale state for non-n holders\\n     */\\n    function setPublicSaleState(bool _publicSaleActiveState) external onlyAdmin {\\n        config.publicSaleActive = _publicSaleActiveState;\\n    }\\n\\n    function setPreSaleTime(uint32 _time) external onlyAdmin {\\n        config.preSaleLaunchTime = _time;\\n    }\\n\\n    function setPublicSaleTime(uint32 _time) external onlyAdmin {\\n        config.publicSaleLaunchTime = _time;\\n    }\\n\\n    /**\\n    Give the ability to halt the sale if necessary due to automatic sale enablement based on time\\n     */\\n    function setSaleHaltedState(bool _saleHaltedState) external onlyAdmin {\\n        config.isSaleHalted = _saleHaltedState;\\n    }\\n\\n    function setBurnActiveState(bool _burnActiveState) external onlyAdmin {\\n        config.isBurnActive = _burnActiveState;\\n    }\\n\\n    function setGenesisSketchAllowList(address[] calldata addresses) external onlyAdmin {\\n        genesisSketchAddresses = addresses;\\n    }\\n\\n    function setOgAllowList(address[] calldata addresses) external onlyAdmin {\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            maps.ogAddresses[addresses[i]] = true;\\n        }\\n    }\\n\\n    function _isPreSaleActive() internal view returns (bool) {\\n        return ((block.timestamp >= config.preSaleLaunchTime || config.preSaleActive) && !config.isSaleHalted);\\n    }\\n\\n    function _isPublicSaleActive() internal view override returns (bool) {\\n        return ((block.timestamp >= config.publicSaleLaunchTime || config.publicSaleActive) && !config.isSaleHalted);\\n    }\\n\\n    function _canMintPresale(\\n        address addr,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal view override returns (bool, PreSaleType) {\\n        if (maps.ogAddresses[addr] && presaleLimits[PreSaleType.OG] - amount >= 0) {\\n            return (true, PreSaleType.OG);\\n        }\\n\\n        bool isGsHolder;\\n        for (uint256 i = 0; i < genesisSketchAddresses.length; i++) {\\n            if (genesisSketchAddresses[i] == addr) {\\n                isGsHolder = true;\\n            }\\n        }\\n\\n        if (isGsHolder && presaleLimits[PreSaleType.GenesisSketch] - amount >= 0) {\\n            return (true, PreSaleType.GenesisSketch);\\n        }\\n\\n        if (rarible.balanceOf(addr, config.raribleTokenId) > 0 && presaleLimits[PreSaleType.GM] - amount > 0) {\\n            return (true, PreSaleType.GM);\\n        }\\n\\n        uint256 karmaScore = SeedPhraseUtils.getKarma(karma, data, addr);\\n        if (nOwnerResolver.balanceOf(addr) > 0) {\\n            if (karmaScore >= config.karmaRequirement && presaleLimits[PreSaleType.Karma] - amount >= 0) {\\n                return (true, PreSaleType.Karma);\\n            }\\n\\n            if (presaleLimits[PreSaleType.N] - amount >= 0) {\\n                return (true, PreSaleType.N);\\n            }\\n        }\\n\\n        return (false, PreSaleType.None);\\n    }\\n\\n    function canMint(address account, bytes calldata data) public view virtual override returns (bool) {\\n        if (config.isBurnActive) {\\n            return false;\\n        }\\n\\n        uint256 balance = balanceOf(account);\\n\\n        if (_isPublicSaleActive() && (totalMintsAvailable() > 0) && balance < config.maxPublicMint) {\\n            return true;\\n        }\\n\\n        if (_isPreSaleActive()) {\\n            (bool preSaleEligible, ) = _canMintPresale(account, 1, data);\\n            return preSaleEligible;\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Allow a n token holder to bulk mint tokens with id of their n tokens' id\\n     * @param recipient Recipient of the mint\\n     * @param tokenIds Ids to be minted\\n     * @param paid Amount paid for the mint\\n     */\\n    function mintWithN(\\n        address recipient,\\n        uint256[] calldata tokenIds,\\n        uint256 paid,\\n        bytes calldata data\\n    ) public virtual override nonReentrant {\\n        uint256 maxTokensToMint = tokenIds.length;\\n        (bool preSaleEligible, PreSaleType presaleType) = _canMintPresale(recipient, maxTokensToMint, data);\\n\\n        require(config.bipWordsShuffled && config.vrfNumberGenerated, \\\"SP:ENV_NOT_INIT\\\");\\n        require(_isPublicSaleActive() || (_isPreSaleActive() && preSaleEligible), \\\"SP:SALE_NOT_ACTIVE\\\");\\n        require(\\n            balanceOf(recipient) + maxTokensToMint <= _getMaxMintPerWallet(),\\n            \\\"NilPass:MINT_ABOVE_MAX_MINT_ALLOWANCE\\\"\\n        );\\n        require(!config.isBurnActive, \\\"SP:SALE_OVER\\\");\\n\\n        require(totalSupply() + maxTokensToMint <= params.maxTotalSupply, \\\"NilPass:MAX_ALLOCATION_REACHED\\\");\\n\\n        uint256 price = getNextPriceForNHoldersInWei(maxTokensToMint, recipient, data);\\n        require(paid == price, \\\"NilPass:INVALID_PRICE\\\");\\n\\n        for (uint256 i = 0; i < maxTokensToMint; i++) {\\n            require(!nUsed[tokenIds[i]], \\\"SP:N_ALREADY_USED\\\");\\n\\n            uint256 tokenId = _tokenIds.current();\\n            require(tokenId <= params.maxTotalSupply, \\\"SP:TOKEN_TOO_HIGH\\\");\\n\\n            maps.tokenSeed[tokenId] = SeedPhraseUtils.generateSeed(tokenId, config.vrfRandomValue);\\n\\n            _safeMint(recipient, tokenId);\\n            _tokenIds.increment();\\n\\n            nUsed[tokenIds[i]] = true;\\n        }\\n\\n        if (preSaleEligible) {\\n            presaleLimits[presaleType] -= uint16(maxTokensToMint);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allow anyone to mint a token with the supply id if this pass is unrestricted.\\n     *         n token holders can use this function without using the n token holders allowance,\\n     *         this is useful when the allowance is fully utilized.\\n     * @param recipient Recipient of the mint\\n     * @param amount Amount of tokens to mint\\n     * @param paid Amount paid for the mint\\n     */\\n    function mint(\\n        address recipient,\\n        uint8 amount,\\n        uint256 paid,\\n        bytes calldata data\\n    ) public virtual override nonReentrant {\\n        (bool preSaleEligible, PreSaleType presaleType) = _canMintPresale(recipient, amount, data);\\n\\n        require(config.bipWordsShuffled && config.vrfNumberGenerated, \\\"SP:ENV_NOT_INIT\\\");\\n        require(\\n            _isPublicSaleActive() ||\\n                (_isPreSaleActive() &&\\n                    preSaleEligible &&\\n                    (presaleType != PreSaleType.N && presaleType != PreSaleType.Karma)),\\n            \\\"SP:SALE_NOT_ACTIVE\\\"\\n        );\\n        require(!config.isBurnActive, \\\"SP:SALE_OVER\\\");\\n\\n        require(balanceOf(recipient) + amount <= _getMaxMintPerWallet(), \\\"NilPass:MINT_ABOVE_MAX_MINT_ALLOWANCE\\\");\\n        require(totalSupply() + amount <= params.maxTotalSupply, \\\"NilPass:MAX_ALLOCATION_REACHED\\\");\\n\\n        uint256 price = getNextPriceForOpenMintInWei(amount, recipient, data);\\n        require(paid == price, \\\"NilPass:INVALID_PRICE\\\");\\n\\n        for (uint256 i = 0; i < amount; i++) {\\n            uint256 tokenId = _tokenIds.current();\\n            require(tokenId <= params.maxTotalSupply, \\\"SP:TOKEN_TOO_HIGH\\\");\\n            maps.tokenSeed[tokenId] = SeedPhraseUtils.generateSeed(tokenId, config.vrfRandomValue);\\n\\n            _safeMint(recipient, tokenId);\\n            _tokenIds.increment();\\n        }\\n\\n        if (preSaleEligible) {\\n            presaleLimits[presaleType] -= amount;\\n        }\\n    }\\n\\n    function mintOwnerSupply(address account) public nonReentrant onlyAdmin {\\n        require(!config.isOwnerSupplyMinted, \\\"SP:ALREADY_MINTED\\\");\\n        require(config.bipWordsShuffled && config.vrfNumberGenerated, \\\"SP:ENV_NOT_INIT\\\");\\n        require(\\n            totalSupply() + config.ownerSupply <= params.maxTotalSupply,\\n            \\\"NilPass:MAX_ALLOCATION_REACHED\\\"\\n        );\\n\\n        for (uint256 i = 0; i < config.ownerSupply; i++) {\\n            uint256 tokenId = _tokenIds.current();\\n            maps.tokenSeed[tokenId] = SeedPhraseUtils.generateSeed(tokenId, config.vrfRandomValue);\\n\\n            _mint(account, tokenId);\\n            _tokenIds.increment();\\n        }\\n\\n        config.isOwnerSupplyMinted = true;\\n    }\\n\\n    /**\\n     * @notice Allow anyone to burn two single panels they own in order to mint\\n     *         a double paneled token.\\n     * @param firstTokenId Token ID of the first token\\n     * @param secondTokenId Token ID of the second token\\n     */\\n    function burnForDoublePanel(uint256 firstTokenId, uint256 secondTokenId) public nonReentrant {\\n        require(config.isBurnActive, \\\"SP:BURN_INACTIVE\\\");\\n        require(ownerOf(firstTokenId) == msg.sender && ownerOf(secondTokenId) == msg.sender, \\\"SP:INCORRECT_OWNER\\\");\\n        require(firstTokenId != secondTokenId, \\\"SP:EQUAL_TOKENS\\\");\\n        // Ensure two owned tokens are in Burnable token pairings\\n        require(\\n            isValidPairing(_getBipWordIdFromTokenId(firstTokenId), _getBipWordIdFromTokenId(secondTokenId)),\\n            \\\"SP:INVALID_TOKEN_PAIRING\\\"\\n        );\\n\\n        _burn(firstTokenId);\\n        _burn(secondTokenId);\\n\\n        // Any Token ID of 3000 or greater indicates it is a double panel e.g. 3000, 3001, 3002...\\n        uint256 doublePanelTokenId = 3000 + _doublePanelTokens.current();\\n        maps.tokenSeed[doublePanelTokenId] = SeedPhraseUtils.generateSeed(doublePanelTokenId, config.vrfRandomValue);\\n\\n        // Get the rarity rating from the burned tokens, store this against the new token\\n        // Burners are guaranteed their previous strongest trait (at least, could be rarer)\\n        uint8 rarity1 = SeedPhraseUtils.getRarityRating(_getTokenSeed(firstTokenId));\\n        uint8 rarity2 = SeedPhraseUtils.getRarityRating(_getTokenSeed(secondTokenId));\\n        maps.doubleTokenRarity[doublePanelTokenId] = (rarity1 > rarity2 ? rarity1 : rarity2);\\n\\n        _mint(msg.sender, doublePanelTokenId);\\n\\n        // Add burned tokens to maps.burnedTokensPairings mapping so we can use them to render the double panels later\\n        maps.burnedTokensPairings[doublePanelTokenId] = [firstTokenId, secondTokenId];\\n        _doublePanelTokens.increment();\\n\\n        emit Burnt(msg.sender, firstTokenId, secondTokenId, doublePanelTokenId);\\n    }\\n\\n    function airdropGenesisSketch() public nonReentrant onlyAdmin {\\n        require(!config.isGsAirdropComplete, \\\"SP:ALREADY_AIRDROPPED\\\");\\n        require(config.bipWordsShuffled && config.vrfNumberGenerated, \\\"SP:ENV_NOT_INIT\\\");\\n\\n        uint256 airdropAmount = genesisSketchAddresses.length;\\n        require(totalSupply() + airdropAmount <= params.maxTotalSupply, \\\"NilPass:MAX_ALLOCATION_REACHED\\\");\\n\\n        for (uint256 i = 0; i < airdropAmount; i++) {\\n            uint256 tokenId = _tokenIds.current();\\n            maps.tokenSeed[tokenId] = SeedPhraseUtils.generateSeed(tokenId, config.vrfRandomValue);\\n\\n            _mint(genesisSketchAddresses[i], tokenId);\\n            _tokenIds.increment();\\n        }\\n\\n        config.isGsAirdropComplete = true;\\n    }\\n\\n    function mintOrphanedPieces(uint256 amount, address addr) public nonReentrant onlyAdmin {\\n        require(totalMintsAvailable() == 0, \\\"SP:MINT_NOT_OVER\\\");\\n        \\n        // _tokenIds - 1 to get the current number of minted tokens (token IDs start at 1)\\n        uint256 currentSupply = _tokenIds.current() - 1;\\n\\n        config.doubleBurnTokens = derivativeParams.maxTotalSupply - currentSupply;\\n\\n        require(config.doubleBurnTokens >= amount, \\\"SP:NOT_ENOUGH_ORPHANS\\\");\\n        require(currentSupply + amount <= params.maxTotalSupply, \\\"NilPass:MAX_ALLOCATION_REACHED\\\");\\n\\n        for (uint256 i = 0; i < amount; i++) {\\n            uint256 tokenId = _tokenIds.current();\\n            require(tokenId <= params.maxTotalSupply, \\\"SP:TOKEN_TOO_HIGH\\\");\\n\\n            maps.tokenSeed[tokenId] = SeedPhraseUtils.generateSeed(tokenId, config.vrfRandomValue);\\n\\n            _mint(addr, tokenId);\\n            _tokenIds.increment();\\n        }\\n\\n        config.doubleBurnTokens -= amount;\\n    }\\n\\n    /**\\n     * @notice Calculate the total available number of mints\\n     * @return total mint available\\n     */\\n    function totalMintsAvailable() public view override returns (uint256) {\\n        uint256 totalAvailable = derivativeParams.maxTotalSupply - totalSupply();\\n        if (block.timestamp > config.publicSaleLaunchTime + 18 hours) {\\n            // Double candle burning starts and decreases max. mintable supply with 1 token per minute.\\n            uint256 doubleBurn = (block.timestamp - (config.publicSaleLaunchTime + 18 hours)) / 1 minutes;\\n            totalAvailable = totalAvailable > doubleBurn ? totalAvailable - doubleBurn : 0;\\n        }\\n\\n        return totalAvailable;\\n    }\\n\\n    function getDoubleBurnedTokens() external view returns (uint256) {\\n        return config.doubleBurnTokens;\\n    }\\n\\n    function _getMaxMintPerWallet() internal view returns (uint128) {\\n        return _isPublicSaleActive() ? config.maxPublicMint : params.maxMintAllowance;\\n    }\\n\\n    function isValidPairing(uint16 first, uint16 second) public view returns (bool) {\\n        return maps.doubleWordPairings[first] == second;\\n    }\\n\\n    function amendPairings(uint16[][] calldata pairings) external onlyAdmin {\\n        for (uint16 i = 0; i < pairings.length; i++) {\\n            if (pairings[i].length != 2) {\\n                continue;\\n            }\\n\\n            maps.doubleWordPairings[pairings[i][0]] = pairings[i][1];\\n        }\\n    }\\n\\n    function shuffleBipWords() external onlyAdmin {\\n        require(config.vrfNumberGenerated, \\\"SP:VRF_NOT_CALLED\\\");\\n        require(!config.bipWordsShuffled, \\\"SP:ALREADY_SHUFFLED\\\");\\n        bipWordIds = SeedPhraseUtils.shuffleBipWords(config.vrfRandomValue);\\n        config.bipWordsShuffled = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    internal\\n    virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(\\n    bytes32 _keyHash,\\n    uint256 _fee\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface immutable internal LINK;\\n  address immutable private vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(\\n    address _vrfCoordinator,\\n    address _link\\n  ) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    external\\n  {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/seed-phrases/SeedPhrasePricing.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"../core/NilPassCore.sol\\\";\\n\\nabstract contract SeedPhrasePricing is NilPassCore {\\n    uint256 preSalePrice;\\n    uint256 publicSalePrice;\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        IN n,\\n        DerivativeParameters memory derivativeParams,\\n        uint256 preSalePrice_,\\n        uint256 publicSalePrice_,\\n        address masterMint,\\n        address dao\\n    ) NilPassCore(name, symbol, n, derivativeParams, masterMint, dao) {\\n        preSalePrice = preSalePrice_;\\n        publicSalePrice = publicSalePrice_;\\n    }\\n\\n    enum PreSaleType {\\n        GenesisSketch,\\n        OG,\\n        GM,\\n        Karma,\\n        N,\\n        None\\n    }\\n\\n    function _canMintPresale(\\n        address addr,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal view virtual returns (bool, PreSaleType);\\n\\n    function _isPublicSaleActive() internal view virtual returns (bool);\\n\\n    /**\\n     * @notice Returns the next price for an N mint\\n     */\\n    function getNextPriceForNHoldersInWei(\\n        uint256 numberOfMints,\\n        address account,\\n        bytes memory data\\n    ) public view override returns (uint256) {\\n        (bool preSaleEligible, ) = _canMintPresale(account, numberOfMints, data);\\n        uint256 price = preSaleEligible && !_isPublicSaleActive() ? preSalePrice : publicSalePrice;\\n        return numberOfMints * price;\\n    }\\n\\n    /**\\n     * @notice Returns the next price for an open mint\\n     */\\n    function getNextPriceForOpenMintInWei(\\n        uint256 numberOfMints,\\n        address account,\\n        bytes memory data\\n    ) public view override returns (uint256) {\\n        (bool preSaleEligible, ) = _canMintPresale(account, numberOfMints, data);\\n        uint256 price = preSaleEligible && !_isPublicSaleActive() ? preSalePrice : publicSalePrice;\\n        return numberOfMints * price;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IN.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\ninterface IN is IERC721Enumerable, IERC721Metadata {\\n    function getFirst(uint256 tokenId) external view returns (uint256);\\n\\n    function getSecond(uint256 tokenId) external view returns (uint256);\\n\\n    function getThird(uint256 tokenId) external view returns (uint256);\\n\\n    function getFourth(uint256 tokenId) external view returns (uint256);\\n\\n    function getFifth(uint256 tokenId) external view returns (uint256);\\n\\n    function getSixth(uint256 tokenId) external view returns (uint256);\\n\\n    function getSeventh(uint256 tokenId) external view returns (uint256);\\n\\n    function getEight(uint256 tokenId) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRarible.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\ninterface IRarible is IERC721Enumerable, IERC721Metadata {\\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IKarmaScore.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n/**\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(     (@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@           @@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(   @@@@@@@@@@@@@@@@@@@@(            @@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@         @@@@@@@@@@@@@@@             @@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@           @@@@@@@@@@@(            @@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@(            @@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@     @@@@@@@     @@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@(         @@(         @@(            @@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@          @@          @@           @@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@     @@@@@@@     @@@@@@@     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@ @@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(     @@@@@@@     @@@@@@@     @@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@           @           @           @@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@(            @@@         @@@         @@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@     @@@@@@@     @@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@(            @@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@(            @@@@@@@@@@@@           @@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@(            @@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@(     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n */\\npragma solidity >=0.8.4;\\n\\ninterface IKarmaScore {\\n    function verify(\\n        address account,\\n        uint256 score,\\n        bytes calldata data\\n    ) external view returns (bool);\\n\\n    function merkleRoot() external view returns (bytes32);\\n\\n    function setMerkleRoot(bytes32 _merkleRoot) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INOwnerResolver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface INOwnerResolver {\\n    function ownerOf(uint256 nid) external view returns (address);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function nOwned(address owner) external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/NilProtocolUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary NilProtocolUtils {\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// [MIT License]\\n    /// @title Base64\\n    /// @notice Provides a function for encoding some bytes in base64\\n    /// @author Brecht Devos <brecht@loopring.org>\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function base64encode(bytes memory data) external pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n\\n    // @notice converts number to string\\n    function stringify(uint256 value) external pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT license\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SeedPhraseUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../interfaces/IKarmaScore.sol\\\";\\nimport \\\"./NilProtocolUtils.sol\\\";\\nimport \\\"../libraries/NilProtocolUtils.sol\\\";\\n\\nlibrary SeedPhraseUtils {\\n    using Strings for uint256;\\n    using Strings for uint16;\\n    using Strings for uint8;\\n\\n    struct Random {\\n        uint256 seed;\\n        uint256 offsetBit;\\n    }\\n\\n    struct Colors {\\n        string background;\\n        string panel;\\n        string panel2;\\n        string panelStroke;\\n        string selectedCircleStroke;\\n        string selectedCircleFill;\\n        string selectedCircleFill2;\\n        string negativeCircleStroke;\\n        string negativeCircleFill;\\n        string blackOrWhite;\\n        string dynamicOpacity;\\n        string backgroundCircle;\\n    }\\n\\n    struct Attrs {\\n        bool showStroke;\\n        bool border;\\n        bool showPanel;\\n        bool backgroundSquare;\\n        bool bigBackgroundCircle;\\n        bool showGrid;\\n        bool backgroundCircles;\\n        bool greyscale;\\n        bool doublePanel;\\n        uint16 bipWordId;\\n        uint16 secondBipWordId;\\n    }\\n\\n    uint8 internal constant strokeWeight = 7;\\n    uint16 internal constant segmentSize = 100;\\n    uint16 internal constant radius = 50;\\n    uint16 internal constant padding = 10;\\n    uint16 internal constant viewBox = 1600;\\n    uint16 internal constant panelWidth = segmentSize * 4;\\n    uint16 internal constant panelHeight = segmentSize * 10;\\n    uint16 internal constant singlePanelX = (segmentSize * 6);\\n    uint16 internal constant doublePanel1X = (segmentSize * 3);\\n    uint16 internal constant doublePanel2X = doublePanel1X + (segmentSize * 6);\\n    uint16 internal constant panelY = (segmentSize * 3);\\n\\n    function generateSeed(uint256 tokenId, uint256 vrfRandomValue) external view returns (bytes32) {\\n        return keccak256(abi.encode(tokenId, block.timestamp, block.difficulty, vrfRandomValue));\\n    }\\n\\n    function _shouldAddTrait(\\n        bool isTrue,\\n        bytes memory trueName,\\n        bytes memory falseName,\\n        uint8 prevRank,\\n        uint8 newRank,\\n        bytes memory traits\\n    ) internal pure returns (bytes memory, uint8) {\\n        if (isTrue) {\\n            traits = abi.encodePacked(traits, ',{\\\"value\\\": \\\"', trueName, '\\\"}');\\n        }\\n        // Only add the falsy trait if it's named (e.g. there's no negative version of \\\"greyscale\\\")\\n        else if (falseName.length != 0) {\\n            traits = abi.encodePacked(traits, ',{\\\"value\\\": \\\"', falseName, '\\\"}');\\n        }\\n\\n        // Return new (higher rank if trait is true)\\n        return (traits, (isTrue ? newRank : prevRank));\\n    }\\n\\n    function tokenTraits(Attrs memory attributes) internal pure returns (bytes memory traits, uint8 rarityRating) {\\n        rarityRating = 0;\\n        traits = abi.encodePacked(\\\"[\\\");\\n        // Add both words to trait if a double panel\\n        if (attributes.doublePanel) {\\n            traits = abi.encodePacked(\\n                traits,\\n                '{\\\"trait_type\\\": \\\"Double Panel BIP39 IDs\\\", \\\"value\\\": \\\"',\\n                attributes.bipWordId.toString(),\\n                \\\" - \\\",\\n                attributes.secondBipWordId.toString(),\\n                '\\\"},',\\n                '{\\\"value\\\": \\\"Double Panel\\\"}'\\n            );\\n        } else {\\n            traits = abi.encodePacked(\\n                traits,\\n                '{\\\"trait_type\\\": \\\"BIP39 ID\\\",  \\\"display_type\\\": \\\"number\\\", \\\"max_value\\\": 2048, \\\"value\\\": ',\\n                attributes.bipWordId.toString(),\\n                \\\"}\\\"\\n            );\\n        }\\n        // Stroke trait - rank 1\\n        (traits, rarityRating) = _shouldAddTrait(\\n            !attributes.showStroke,\\n            \\\"No Stroke\\\",\\n            \\\"OG Stroke\\\",\\n            rarityRating,\\n            1,\\n            traits\\n        );\\n        // Border - rank 2\\n        (traits, rarityRating) = _shouldAddTrait(attributes.border, \\\"Border\\\", \\\"\\\", rarityRating, 2, traits);\\n        // No Panel - rank 3\\n        (traits, rarityRating) = _shouldAddTrait(\\n            !attributes.showPanel,\\n            \\\"No Panel\\\",\\n            \\\"OG Panel\\\",\\n            rarityRating,\\n            3,\\n            traits\\n        );\\n        // Symmetry Group Square - rank 4\\n        (traits, rarityRating) = _shouldAddTrait(\\n            attributes.backgroundSquare,\\n            \\\"Group Square\\\",\\n            \\\"\\\",\\n            rarityRating,\\n            4,\\n            traits\\n        );\\n        // Symmetry Group Circle - rank 5\\n        (traits, rarityRating) = _shouldAddTrait(\\n            attributes.bigBackgroundCircle,\\n            \\\"Group Circle\\\",\\n            \\\"\\\",\\n            rarityRating,\\n            5,\\n            traits\\n        );\\n        // Caged - rank 6\\n        (traits, rarityRating) = _shouldAddTrait(attributes.showGrid, \\\"Caged\\\", \\\"\\\", rarityRating, 6, traits);\\n        // Bubblewrap - rank 7\\n        (traits, rarityRating) = _shouldAddTrait(\\n            attributes.backgroundCircles,\\n            \\\"Bubblewrap\\\",\\n            \\\"\\\",\\n            rarityRating,\\n            7,\\n            traits\\n        );\\n        // Monochrome - rank 8\\n        (traits, rarityRating) = _shouldAddTrait(attributes.greyscale, \\\"Monochrome\\\", \\\"\\\", rarityRating, 8, traits);\\n\\n        traits = abi.encodePacked(traits, \\\"]\\\");\\n    }\\n\\n    /**\\n     * @notice Generates the art defining attributes\\n     * @param bipWordId bip39 word id\\n     * @param secondBipWordId ^ only for a double panel\\n     * @param random RNG\\n     * @param predefinedRarity double panels trait to carry over\\n     * @return attributes struct\\n     */\\n    function tokenAttributes(\\n        uint16 bipWordId,\\n        uint16 secondBipWordId,\\n        Random memory random,\\n        uint8 predefinedRarity\\n    ) internal pure returns (Attrs memory attributes) {\\n        attributes = Attrs({\\n            showStroke: (predefinedRarity == 1) ? false : _boolPercentage(random, 70), // rank 1\\n            border: (predefinedRarity == 2) ? true : _boolPercentage(random, 30), // rank 2\\n            showPanel: (predefinedRarity == 3) ? false : _boolPercentage(random, 80), // rank 3\\n            backgroundSquare: (predefinedRarity == 4) ? true : _boolPercentage(random, 18), // rank 4\\n            bigBackgroundCircle: (predefinedRarity == 5) ? true : _boolPercentage(random, 12), // rank = 5\\n            showGrid: (predefinedRarity == 6) ? true : _boolPercentage(random, 6), // rank 6\\n            backgroundCircles: (predefinedRarity == 7) ? true : _boolPercentage(random, 4), // rank 7\\n            greyscale: (predefinedRarity == 8) ? true : _boolPercentage(random, 2), // rank 8\\n            bipWordId: bipWordId,\\n            doublePanel: (secondBipWordId > 0),\\n            secondBipWordId: secondBipWordId\\n        });\\n\\n        // Rare attributes should always superseed less-rare\\n        // If greyscale OR grid is true then turn on stroke (as it is required)\\n        if (attributes.showGrid || attributes.greyscale) {\\n            attributes.showStroke = true;\\n        }\\n        // backgroundCircles superseeds grid (they cannot co-exist)\\n        if (attributes.backgroundCircles) {\\n            attributes.showGrid = false;\\n        }\\n        // Border cannot be on if background shapes are turned on\\n        if (attributes.bigBackgroundCircle || attributes.backgroundSquare) {\\n            attributes.border = false;\\n            // Big Background Shapes cannot co-exist\\n            if (attributes.bigBackgroundCircle) {\\n                attributes.backgroundSquare = false;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Converts a tokenId (uint256) into the formats needed to generate the art\\n     * @param tokenId tokenId (also the BIP39 word)\\n     * @return tokenArray with prepended 0's (if tokenId is less that 4 digits) also returns in string format\\n     */\\n    function _transformTokenId(uint256 tokenId) internal pure returns (uint8[4] memory tokenArray, string memory) {\\n        bytes memory tokenString;\\n        uint8 digit;\\n\\n        for (int8 i = 3; i >= 0; i--) {\\n            digit = uint8(tokenId % 10); // This returns the final digit in the token\\n            if (tokenId > 0) {\\n                tokenId = tokenId / 10; // this removes the last digit from the token as we've grabbed the digit already\\n                tokenArray[uint8(i)] = digit;\\n            }\\n            tokenString = abi.encodePacked(digit.toString(), tokenString);\\n        }\\n\\n        return (tokenArray, string(tokenString));\\n    }\\n\\n    function _renderText(string memory text, string memory color) internal pure returns (bytes memory svg) {\\n        svg = abi.encodePacked(\\n            \\\"<text x='1500' y='1500' text-anchor='end' style='font:700 36px &quot;Courier New&quot;;fill:\\\",\\n            color,\\n            \\\";opacity:.4'>#\\\",\\n            text,\\n            \\\"</text>\\\"\\n        );\\n\\n        return svg;\\n    }\\n\\n    function _backgroundShapeSizing(Random memory random, Attrs memory attributes)\\n        internal\\n        pure\\n        returns (uint16, uint16)\\n    {\\n        uint256 idx;\\n        // If we DON'T have a 'doublePanel' or 'no panel' we can return the default sizing\\n        if (!attributes.doublePanel && attributes.showPanel) {\\n            uint16[2][6] memory defaultSizing = [\\n                [1275, 200],\\n                [1150, 375],\\n                [900, 300],\\n                [925, 225],\\n                [850, 150],\\n                [775, 125]\\n            ];\\n            idx = SeedPhraseUtils._next(random, 0, defaultSizing.length);\\n            return (defaultSizing[idx][0], defaultSizing[idx][1]);\\n        }\\n\\n        // Otherwise we need to return some slightly different data\\n        if (attributes.bigBackgroundCircle) {\\n            uint16[2][4] memory restrictedCircleDimensions = [[1150, 150], [1275, 200], [1300, 100], [1350, 200]];\\n            idx = SeedPhraseUtils._next(random, 0, restrictedCircleDimensions.length);\\n            return (restrictedCircleDimensions[idx][0], restrictedCircleDimensions[idx][1]);\\n        }\\n\\n        // Else we can assume that it is backgroundSquares\\n        uint16[2][4] memory restrictedSquareDimensions = [[1150, 50], [1100, 125], [1275, 200], [1300, 150]];\\n        idx = SeedPhraseUtils._next(random, 0, restrictedSquareDimensions.length);\\n        return (restrictedSquareDimensions[idx][0], restrictedSquareDimensions[idx][1]);\\n    }\\n\\n    function _getStrokeStyle(\\n        bool showStroke,\\n        string memory color,\\n        string memory opacity,\\n        uint8 customStrokeWeight\\n    ) internal pure returns (bytes memory strokeStyle) {\\n        if (showStroke) {\\n            strokeStyle = abi.encodePacked(\\n                \\\" style='stroke-opacity:\\\",\\n                opacity,\\n                \\\";stroke:\\\",\\n                color,\\n                \\\";stroke-width:\\\",\\n                customStrokeWeight.toString(),\\n                \\\"' \\\"\\n            );\\n\\n            return strokeStyle;\\n        }\\n    }\\n\\n    function _getPalette(Random memory random, Attrs memory attributes) internal pure returns (Colors memory) {\\n        string[6] memory selectedPallet;\\n        uint8[6] memory lumosity;\\n        if (attributes.greyscale) {\\n            selectedPallet = [\\\"#f8f9fa\\\", \\\"#c3c4c4\\\", \\\"#909091\\\", \\\"#606061\\\", \\\"#343435\\\", \\\"#0a0a0b\\\"];\\n            lumosity = [249, 196, 144, 96, 52, 10];\\n        } else {\\n            uint256 randPalette = SeedPhraseUtils._next(random, 0, 25);\\n            if (randPalette == 0) {\\n                selectedPallet = [\\\"#ffe74c\\\", \\\"#ff5964\\\", \\\"#ffffff\\\", \\\"#6bf178\\\", \\\"#35a7ff\\\", \\\"#5b3758\\\"];\\n                lumosity = [225, 125, 255, 204, 149, 65];\\n            } else if (randPalette == 1) {\\n                selectedPallet = [\\\"#ff0000\\\", \\\"#ff8700\\\", \\\"#e4ff33\\\", \\\"#a9ff1f\\\", \\\"#0aefff\\\", \\\"#0a33ff\\\"];\\n                lumosity = [54, 151, 235, 221, 191, 57];\\n            } else if (randPalette == 2) {\\n                selectedPallet = [\\\"#f433ab\\\", \\\"#cb04a5\\\", \\\"#934683\\\", \\\"#65334d\\\", \\\"#2d1115\\\", \\\"#e0e2db\\\"];\\n                lumosity = [101, 58, 91, 64, 23, 225];\\n            } else if (randPalette == 3) {\\n                selectedPallet = [\\\"#f08700\\\", \\\"#f6aa28\\\", \\\"#f9d939\\\", \\\"#00a6a6\\\", \\\"#bbdef0\\\", \\\"#23556c\\\"];\\n                lumosity = [148, 177, 212, 131, 216, 76];\\n            } else if (randPalette == 4) {\\n                selectedPallet = [\\\"#f7e6de\\\", \\\"#e5b59e\\\", \\\"#cb7d52\\\", \\\"#bb8f77\\\", \\\"#96624a\\\", \\\"#462b20\\\"];\\n                lumosity = [233, 190, 138, 151, 107, 48];\\n            } else if (randPalette == 5) {\\n                selectedPallet = [\\\"#f61379\\\", \\\"#d91cbc\\\", \\\"#da81ee\\\", \\\"#5011e4\\\", \\\"#4393ef\\\", \\\"#8edef6\\\"];\\n                lumosity = [75, 80, 156, 46, 137, 207];\\n            } else if (randPalette == 6) {\\n                selectedPallet = [\\\"#010228\\\", \\\"#006aa3\\\", \\\"#005566\\\", \\\"#2ac1df\\\", \\\"#82dded\\\", \\\"#dbf5fa\\\"];\\n                lumosity = [5, 88, 68, 163, 203, 240];\\n            } else if (randPalette == 7) {\\n                selectedPallet = [\\\"#f46036\\\", \\\"#5b85aa\\\", \\\"#414770\\\", \\\"#372248\\\", \\\"#171123\\\", \\\"#f7f5fb\\\"];\\n                lumosity = [124, 127, 73, 41, 20, 246];\\n            } else if (randPalette == 8) {\\n                selectedPallet = [\\\"#393d3f\\\", \\\"#fdfdff\\\", \\\"#c6c5b9\\\", \\\"#62929e\\\", \\\"#546a7b\\\", \\\"#c52233\\\"];\\n                lumosity = [60, 253, 196, 137, 103, 70];\\n            } else if (randPalette == 9) {\\n                selectedPallet = [\\\"#002626\\\", \\\"#0e4749\\\", \\\"#95c623\\\", \\\"#e55812\\\", \\\"#efe7da\\\", \\\"#8ddbe0\\\"];\\n                lumosity = [30, 59, 176, 113, 232, 203];\\n            } else if (randPalette == 10) {\\n                selectedPallet = [\\\"#03071e\\\", \\\"#62040d\\\", \\\"#d00000\\\", \\\"#e85d04\\\", \\\"#faa307\\\", \\\"#ffcb47\\\"];\\n                lumosity = [8, 25, 44, 116, 170, 205];\\n            } else if (randPalette == 11) {\\n                selectedPallet = [\\\"#f56a00\\\", \\\"#ff931f\\\", \\\"#ffd085\\\", \\\"#20003d\\\", \\\"#7b2cbf\\\", \\\"#c698eb\\\"];\\n                lumosity = [128, 162, 213, 11, 71, 168];\\n            } else if (randPalette == 12) {\\n                selectedPallet = [\\\"#800016\\\", \\\"#ffffff\\\", \\\"#ff002b\\\", \\\"#407ba7\\\", \\\"#004e89\\\", \\\"#00043a\\\"];\\n                lumosity = [29, 255, 57, 114, 66, 7];\\n            } else if (randPalette == 13) {\\n                selectedPallet = [\\\"#d6d6d6\\\", \\\"#f9f7dc\\\", \\\"#ffee32\\\", \\\"#ffd100\\\", \\\"#202020\\\", \\\"#6c757d\\\"];\\n                lumosity = [214, 245, 228, 204, 32, 116];\\n            } else if (randPalette == 14) {\\n                selectedPallet = [\\\"#fff5d6\\\", \\\"#ccc5b9\\\", \\\"#403d39\\\", \\\"#252422\\\", \\\"#eb5e28\\\", \\\"#bb4111\\\"];\\n                lumosity = [245, 198, 61, 36, 120, 87];\\n            } else if (randPalette == 15) {\\n                selectedPallet = [\\\"#0c0f0a\\\", \\\"#ff206e\\\", \\\"#fbff12\\\", \\\"#41ead4\\\", \\\"#6c20fd\\\", \\\"#ffffff\\\"];\\n                lumosity = [14, 85, 237, 196, 224, 255];\\n            } else if (randPalette == 16) {\\n                selectedPallet = [\\\"#fdd8d8\\\", \\\"#f67979\\\", \\\"#e51010\\\", \\\"#921314\\\", \\\"#531315\\\", \\\"#151315\\\"];\\n                lumosity = [224, 148, 61, 46, 33, 20];\\n            } else if (randPalette == 17) {\\n                selectedPallet = [\\\"#000814\\\", \\\"#002752\\\", \\\"#0066cc\\\", \\\"#f5bc00\\\", \\\"#ffd60a\\\", \\\"#ffee99\\\"];\\n                lumosity = [7, 34, 88, 187, 208, 235];\\n            } else if (randPalette == 18) {\\n                selectedPallet = [\\\"#010b14\\\", \\\"#022d4f\\\", \\\"#fdfffc\\\", \\\"#2ec4b6\\\", \\\"#e71d36\\\", \\\"#ff990a\\\"];\\n                lumosity = [10, 38, 254, 163, 74, 164];\\n            } else if (randPalette == 19) {\\n                selectedPallet = [\\\"#fd650d\\\", \\\"#d90368\\\", \\\"#820263\\\", \\\"#291720\\\", \\\"#06efa9\\\", \\\"#0d5943\\\"];\\n                lumosity = [127, 56, 36, 27, 184, 71];\\n            } else if (randPalette == 20) {\\n                selectedPallet = [\\\"#002914\\\", \\\"#005200\\\", \\\"#34a300\\\", \\\"#70e000\\\", \\\"#aef33f\\\", \\\"#e0ff85\\\"];\\n                lumosity = [31, 59, 128, 184, 215, 240];\\n            } else if (randPalette == 21) {\\n                selectedPallet = [\\\"#001413\\\", \\\"#fafffe\\\", \\\"#6f0301\\\", \\\"#a92d04\\\", \\\"#f6b51d\\\", \\\"#168eb6\\\"];\\n                lumosity = [16, 254, 26, 68, 184, 119];\\n            } else if (randPalette == 22) {\\n                selectedPallet = [\\\"#6a1f10\\\", \\\"#d53e20\\\", \\\"#f7d1ca\\\", \\\"#c4f3fd\\\", \\\"#045362\\\", \\\"#fffbfa\\\"];\\n                lumosity = [46, 92, 217, 234, 67, 252];\\n            } else if (randPalette == 23) {\\n                selectedPallet = [\\\"#6b42ff\\\", \\\"#a270ff\\\", \\\"#dda1f7\\\", \\\"#ffd6eb\\\", \\\"#ff8fb2\\\", \\\"#f56674\\\"];\\n                lumosity = [88, 133, 180, 224, 169, 133];\\n            } else if (randPalette == 24) {\\n                selectedPallet = [\\\"#627132\\\", \\\"#273715\\\", \\\"#99a271\\\", \\\"#fefae1\\\", \\\"#e0a35c\\\", \\\"#bf6b21\\\"];\\n                lumosity = [105, 49, 157, 249, 171, 120];\\n            }\\n        }\\n\\n        // Randomize pallet order here...\\n        return _shufflePallet(random, selectedPallet, lumosity, attributes);\\n    }\\n\\n    function _shufflePallet(\\n        Random memory random,\\n        string[6] memory hexColors,\\n        uint8[6] memory lumaValues,\\n        Attrs memory attributes\\n    ) internal pure returns (Colors memory) {\\n        // Shuffle colors and luma values with the same index\\n        for (uint8 i = 0; i < hexColors.length; i++) {\\n            // n = Pick random i > (array length - i)\\n            uint256 n = i + SeedPhraseUtils._next(random, 0, (hexColors.length - i));\\n            // temp = Temporarily store value from array[n]\\n            string memory tempHex = hexColors[n];\\n            uint8 tempLuma = lumaValues[n];\\n            // Swap n value with i value\\n            hexColors[n] = hexColors[i];\\n            hexColors[i] = tempHex;\\n            lumaValues[n] = lumaValues[i];\\n            lumaValues[i] = tempLuma;\\n        }\\n\\n        Colors memory pallet = Colors({\\n            background: hexColors[0],\\n            panel: hexColors[1],\\n            panel2: \\\"\\\", // panel2 should match selected circles\\n            panelStroke: hexColors[2],\\n            selectedCircleStroke: hexColors[2], // Match panel stroke\\n            negativeCircleStroke: hexColors[3],\\n            negativeCircleFill: hexColors[4],\\n            selectedCircleFill: hexColors[5],\\n            selectedCircleFill2: \\\"\\\", // should match panel1\\n            backgroundCircle: \\\"\\\",\\n            blackOrWhite: lumaValues[0] < 150 ? \\\"#fff\\\" : \\\"#000\\\",\\n            dynamicOpacity: lumaValues[0] < 150 ? \\\"0.08\\\" : \\\"0.04\\\"\\n        });\\n\\n        if (attributes.doublePanel) {\\n            pallet.panel2 = pallet.selectedCircleFill;\\n            pallet.selectedCircleFill2 = pallet.panel;\\n        }\\n\\n        if (attributes.bigBackgroundCircle) {\\n            // Set background circle colors here\\n            pallet.backgroundCircle = pallet.background;\\n            pallet.background = pallet.panel;\\n            // Luma based on 'new background', previous background is used for bgCircleColor)\\n            pallet.blackOrWhite = lumaValues[1] < 150 ? \\\"#fff\\\" : \\\"#000\\\";\\n            pallet.dynamicOpacity = lumaValues[1] < 150 ? \\\"0.08\\\" : \\\"0.04\\\";\\n        }\\n\\n        return pallet;\\n    }\\n\\n    /// @notice get an random number between (min and max) using seed and offseting bits\\n    ///         this function assumes that max is never bigger than 0xffffff (hex color with opacity included)\\n    /// @dev this function is simply used to get random number using a seed.\\n    ///      if does bitshifting operations to try to reuse the same seed as much as possible.\\n    ///      should be enough for anyth\\n    /// @param random the randomizer\\n    /// @param min the minimum\\n    /// @param max the maximum\\n    /// @return result the resulting pseudo random number\\n    function _next(\\n        Random memory random,\\n        uint256 min,\\n        uint256 max\\n    ) internal pure returns (uint256 result) {\\n        uint256 newSeed = random.seed;\\n        uint256 newOffset = random.offsetBit + 3;\\n\\n        uint256 maxOffset = 4;\\n        uint256 mask = 0xf;\\n        if (max > 0xfffff) {\\n            mask = 0xffffff;\\n            maxOffset = 24;\\n        } else if (max > 0xffff) {\\n            mask = 0xfffff;\\n            maxOffset = 20;\\n        } else if (max > 0xfff) {\\n            mask = 0xffff;\\n            maxOffset = 16;\\n        } else if (max > 0xff) {\\n            mask = 0xfff;\\n            maxOffset = 12;\\n        } else if (max > 0xf) {\\n            mask = 0xff;\\n            maxOffset = 8;\\n        }\\n\\n        // if offsetBit is too high to get the max number\\n        // just get new seed and restart offset to 0\\n        if (newOffset > (256 - maxOffset)) {\\n            newOffset = 0;\\n            newSeed = uint256(keccak256(abi.encode(newSeed)));\\n        }\\n\\n        uint256 offseted = (newSeed >> newOffset);\\n        uint256 part = offseted & mask;\\n        result = min + (part % (max - min));\\n\\n        random.seed = newSeed;\\n        random.offsetBit = newOffset;\\n    }\\n\\n    function _boolPercentage(Random memory random, uint256 percentage) internal pure returns (bool) {\\n        // E.G. If percentage = 30, and random = 0-29 we return true\\n        // Percentage = 1, random = 0 (TRUE)\\n        return (SeedPhraseUtils._next(random, 0, 100) < percentage);\\n    }\\n\\n    /// @param random source of randomness (based on tokenSeed)\\n    /// @param attributes art attributes\\n    /// @return the json\\n    function render(SeedPhraseUtils.Random memory random, SeedPhraseUtils.Attrs memory attributes)\\n        external\\n        pure\\n        returns (string memory)\\n    {\\n        // Get color pallet\\n        SeedPhraseUtils.Colors memory pallet = SeedPhraseUtils._getPalette(random, attributes);\\n\\n        //  Start SVG (viewbox & static patterns)\\n        bytes memory svg = abi.encodePacked(\\n            \\\"<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1600 1600'><path fill='\\\",\\n            pallet.background,\\n            \\\"' \\\",\\n            SeedPhraseUtils._getStrokeStyle(attributes.border, pallet.blackOrWhite, \\\"0.3\\\", 50),\\n            \\\" d='M0 0h1600v1600H0z'/>\\\",\\n            \\\"  <pattern id='panelCircles' x='0' y='0' width='.25' height='.1' patternUnits='objectBoundingBox'>\\\",\\n            \\\"<circle cx='50' cy='50' r='40' fill='\\\",\\n            pallet.negativeCircleFill,\\n            \\\"' \\\",\\n            SeedPhraseUtils._getStrokeStyle(attributes.showStroke, pallet.negativeCircleStroke, \\\"1\\\", strokeWeight),\\n            \\\" /></pattern>\\\"\\n        );\\n        // Render optional patterns (grid OR background circles)\\n        if (attributes.backgroundCircles) {\\n            svg = abi.encodePacked(\\n                svg,\\n                \\\"<pattern id='backgroundCircles' x='0' y='0' width='100' height='100'\\\",\\n                \\\" patternUnits='userSpaceOnUse'><circle cx='50' cy='50' r='40' fill='\\\",\\n                pallet.blackOrWhite,\\n                \\\"' style='fill-opacity: \\\",\\n                pallet.dynamicOpacity,\\n                \\\";'></circle></pattern><path fill='url(#backgroundCircles)' d='M0 0h1600v1600H0z'/>\\\"\\n            );\\n        } else if (attributes.showGrid) {\\n            svg = abi.encodePacked(\\n                svg,\\n                \\\"<pattern id='grid' x='0' y='0' width='100' height='100'\\\",\\n                \\\" patternUnits='userSpaceOnUse'><rect x='0' y='0' width='100' height='100' fill='none' \\\",\\n                SeedPhraseUtils._getStrokeStyle(true, pallet.blackOrWhite, pallet.dynamicOpacity, strokeWeight),\\n                \\\" /></pattern><path fill='url(#grid)' d='M0 0h1600v1600H0z'/>\\\"\\n            );\\n        }\\n        if (attributes.bigBackgroundCircle) {\\n            (uint16 shapeSize, uint16 stroke) = SeedPhraseUtils._backgroundShapeSizing(random, attributes);\\n            // uint16 centerCircle = (viewBox / 2); // Viewbox = 1600, Center = 800\\n            svg = abi.encodePacked(\\n                svg,\\n                \\\"<circle cx='800' cy='800' r='\\\",\\n                (shapeSize / 2).toString(),\\n                \\\"' fill='\\\",\\n                pallet.backgroundCircle,\\n                \\\"' stroke='\\\",\\n                pallet.negativeCircleStroke,\\n                \\\"' style='stroke-width:\\\",\\n                stroke.toString(),\\n                \\\";stroke-opacity:0.3'/>\\\"\\n            );\\n        } else if (attributes.backgroundSquare) {\\n            (uint16 shapeSize, uint16 stroke) = SeedPhraseUtils._backgroundShapeSizing(random, attributes);\\n            uint16 centerSquare = ((viewBox - shapeSize) / 2);\\n            svg = abi.encodePacked(\\n                svg,\\n                \\\"<rect x='\\\",\\n                centerSquare.toString(),\\n                \\\"' y='\\\",\\n                centerSquare.toString(),\\n                \\\"' width='\\\",\\n                shapeSize.toString(),\\n                \\\"' height='\\\",\\n                shapeSize.toString(),\\n                \\\"' fill='\\\",\\n                pallet.backgroundCircle,\\n                \\\"' stroke='\\\",\\n                pallet.negativeCircleStroke,\\n                \\\"' style='stroke-width:\\\",\\n                stroke.toString(),\\n                \\\";stroke-opacity:0.3'/>\\\"\\n            );\\n        }\\n\\n        // Double panel (only if holder has burned two tokens from the defined pairings)\\n        if (attributes.doublePanel) {\\n            (uint8[4] memory firstBipIndexArray, string memory firstBipIndexStr) = SeedPhraseUtils._transformTokenId(\\n                attributes.bipWordId\\n            );\\n            (uint8[4] memory secondBipIndexArray, string memory secondBipIndexStr) = SeedPhraseUtils._transformTokenId(\\n                attributes.secondBipWordId\\n            );\\n\\n            svg = abi.encodePacked(\\n                svg,\\n                _renderSinglePanel(firstBipIndexArray, attributes, pallet, doublePanel1X, false),\\n                _renderSinglePanel(secondBipIndexArray, attributes, pallet, doublePanel2X, true)\\n            );\\n\\n            // Create text\\n            bytes memory combinedText = abi.encodePacked(firstBipIndexStr, \\\" - #\\\", secondBipIndexStr);\\n            svg = abi.encodePacked(\\n                svg,\\n                SeedPhraseUtils._renderText(string(combinedText), pallet.blackOrWhite),\\n                \\\"</svg>\\\"\\n            );\\n        }\\n        // Single Panel\\n        else {\\n            (uint8[4] memory bipIndexArray, string memory bipIndexStr) = SeedPhraseUtils._transformTokenId(\\n                attributes.bipWordId\\n            );\\n            svg = abi.encodePacked(svg, _renderSinglePanel(bipIndexArray, attributes, pallet, singlePanelX, false));\\n\\n            // Add closing text and svg element\\n            svg = abi.encodePacked(svg, SeedPhraseUtils._renderText(bipIndexStr, pallet.blackOrWhite), \\\"</svg>\\\");\\n        }\\n\\n        return string(svg);\\n    }\\n\\n    function _renderSinglePanel(\\n        uint8[4] memory bipIndexArray,\\n        SeedPhraseUtils.Attrs memory attributes,\\n        SeedPhraseUtils.Colors memory pallet,\\n        uint16 panelX,\\n        bool secondPanel\\n    ) internal pure returns (bytes memory panelSvg) {\\n        // Draw panels\\n        bool squareEdges = (attributes.doublePanel && attributes.backgroundSquare);\\n        if (attributes.showPanel) {\\n            panelSvg = abi.encodePacked(\\n                \\\"<rect x='\\\",\\n                (panelX - padding).toString(),\\n                \\\"' y='\\\",\\n                (panelY - padding).toString(),\\n                \\\"' width='\\\",\\n                (panelWidth + (padding * 2)).toString(),\\n                \\\"' height='\\\",\\n                (panelHeight + (padding * 2)).toString(),\\n                \\\"' rx='\\\",\\n                (squareEdges ? 0 : radius).toString(),\\n                \\\"' fill='\\\",\\n                (secondPanel ? pallet.panel2 : pallet.panel),\\n                \\\"' \\\",\\n                SeedPhraseUtils._getStrokeStyle(attributes.showStroke, pallet.panelStroke, \\\"1\\\", strokeWeight),\\n                \\\"/>\\\"\\n            );\\n        }\\n        // Fill panel with negative circles, should resemble M600 300h400v1000H600z\\n        panelSvg = abi.encodePacked(\\n            panelSvg,\\n            \\\"<path fill='url(#panelCircles)' d='M\\\",\\n            panelX.toString(),\\n            \\\" \\\",\\n            panelY.toString(),\\n            \\\"h\\\",\\n            panelWidth.toString(),\\n            \\\"v\\\",\\n            panelHeight.toString(),\\n            \\\"H\\\",\\n            panelX.toString(),\\n            \\\"z'/>\\\"\\n        );\\n        // Draw selected circles\\n        panelSvg = abi.encodePacked(\\n            panelSvg,\\n            _renderSelectedCircles(bipIndexArray, pallet, attributes.showStroke, panelX, secondPanel)\\n        );\\n    }\\n\\n    function _renderSelectedCircles(\\n        uint8[4] memory bipIndexArray,\\n        SeedPhraseUtils.Colors memory pallet,\\n        bool showStroke,\\n        uint16 panelX,\\n        bool secondPanel\\n    ) internal pure returns (bytes memory svg) {\\n        for (uint8 i = 0; i < bipIndexArray.length; i++) {\\n            svg = abi.encodePacked(\\n                svg,\\n                \\\"<circle cx='\\\",\\n                (panelX + (segmentSize * i) + radius).toString(),\\n                \\\"' cy='\\\",\\n                (panelY + (segmentSize * bipIndexArray[i]) + radius).toString(),\\n                \\\"' r='41' fill='\\\", // Increase the size a tiny bit here (+1) to hide negative circle outline\\n                (secondPanel ? pallet.selectedCircleFill2 : pallet.selectedCircleFill),\\n                \\\"' \\\",\\n                SeedPhraseUtils._getStrokeStyle(showStroke, pallet.selectedCircleStroke, \\\"1\\\", strokeWeight),\\n                \\\" />\\\"\\n            );\\n        }\\n    }\\n\\n    function getRarityRating(bytes32 tokenSeed) external pure returns (uint8) {\\n        SeedPhraseUtils.Random memory random = SeedPhraseUtils.Random({ seed: uint256(tokenSeed), offsetBit: 0 });\\n        (, uint8 rarityRating) = SeedPhraseUtils.tokenTraits(SeedPhraseUtils.tokenAttributes(0, 0, random, 0));\\n\\n        return rarityRating;\\n    }\\n\\n    function getTraitsAndAttributes(\\n        uint16 bipWordId,\\n        uint16 secondBipWordId,\\n        uint8 rarityValue,\\n        SeedPhraseUtils.Random memory random\\n    ) external pure returns (bytes memory, SeedPhraseUtils.Attrs memory) {\\n        SeedPhraseUtils.Attrs memory attributes = SeedPhraseUtils.tokenAttributes(\\n            bipWordId,\\n            secondBipWordId,\\n            random,\\n            rarityValue\\n        );\\n\\n        (bytes memory traits, ) = SeedPhraseUtils.tokenTraits(attributes);\\n\\n        return (traits, attributes);\\n    }\\n\\n    function getKarma(IKarmaScore karma, bytes memory data, address account) external view returns (uint256) {\\n        if (data.length > 0) {\\n            (, uint256 karmaScore, ) = abi.decode(data, (address, uint256, bytes32[]));\\n            if (karma.verify(account, karmaScore, data)) {\\n                return account == address(0) ? 1000 : karmaScore;\\n            }\\n        }\\n        return 1000;\\n    }\\n\\n    function shuffleBipWords(uint256 randomValue) external pure returns (uint16[] memory) {\\n        uint16 size = 2048;\\n        uint16[] memory result = new uint16[](size);\\n\\n        // Initialize array.\\n        for (uint16 i = 0; i < size; i++) {\\n            result[i] = i + 1;\\n        }\\n\\n        // Set the initial randomness based on the provided entropy from VRF.\\n        bytes32 random = keccak256(abi.encodePacked(randomValue));\\n\\n        // Set the last item of the array which will be swapped.\\n        uint16 lastItem = size - 1;\\n\\n        // We need to do `size - 1` iterations to completely shuffle the array.\\n        for (uint16 i = 1; i < size - 1; i++) {\\n            // Select a number based on the randomness.\\n            uint16 selectedItem = uint16(uint256(random) % lastItem);\\n\\n            // Swap items `selected_item <> last_item`.\\n            (result[lastItem], result[selectedItem]) = (result[selectedItem], result[lastItem]);\\n\\n            // Decrease the size of the possible shuffle\\n            // to preserve the already shuffled items.\\n            // The already shuffled items are at the end of the array.\\n            lastItem--;\\n\\n            // Generate new randomness.\\n            random = keccak256(abi.encodePacked(random));\\n        }\\n\\n        return result;\\n    }\\n\\n    function getDescriptionPt1() internal pure returns (string memory) {\\n        return \\\"\\\\\\\"Seed Phrase is a 'Crypto Native' *fully* on-chain collection.\\\\\\\\n\\\\\\\\nA '*SEED*' is unique, it represents a single word from the BIP-0039 word list (the most commonly used word list to generate a seed/recovery phrase, think of it as a dictionary that only holds 2048 words).\\\\\\\\n\\\\\\\\n***Your 'SEED*' = *Your 'WORD*' in the list.**  \\\\\\\\nClick [here](https://www.seedphrase.codes/token?id=\\\";\\n\\n    }\\n\\n    function getDescriptionPt2() internal pure returns (string memory) {\\n        return \\\") to decipher *your 'SEED*' and find out which word it translates to!\\\\\\\\n\\\\\\\\nFor Licensing, T&Cs or any other info, please visit: [www.seedphrase.codes](https://www.seedphrase.codes/).\\\\\\\"\\\";\\n    }\\n\\n    function getTokenURI(string memory output, bytes memory traits, uint256 tokenId) external pure returns (string memory) {\\n        return string(\\n            abi.encodePacked(\\n                \\\"data:application/json;base64,\\\",\\n                    NilProtocolUtils.base64encode(\\n                    bytes(\\n                        string(\\n                            abi.encodePacked(\\n                                '{\\\"name\\\": \\\"Seed Phrase #',\\n                                    NilProtocolUtils.stringify(tokenId),\\n                                '\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n                                    NilProtocolUtils.base64encode(bytes(output)),\\n                                '\\\", \\\"attributes\\\": ',\\n                                traits,\\n                                ', \\\"description\\\": ',\\n                                getDescriptionPt1(),\\n                                tokenId.toString(),\\n                                getDescriptionPt2(),\\n                                \\\"}\\\"\\n                            )\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 remaining\\n    );\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 balance\\n    );\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8 decimalPlaces\\n    );\\n\\n  function decreaseApproval(\\n    address spender,\\n    uint256 addedValue\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function increaseApproval(\\n    address spender,\\n    uint256 subtractedValue\\n  ) external;\\n\\n  function name()\\n    external\\n    view\\n    returns (\\n      string memory tokenName\\n    );\\n\\n  function symbol()\\n    external\\n    view\\n    returns (\\n      string memory tokenSymbol\\n    );\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (\\n      uint256 totalTokensIssued\\n    );\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  )\\n    internal\\n    pure\\n    returns (\\n      uint256\\n    )\\n  {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash,\\n    uint256 _vRFInputSeed\\n  )\\n    internal\\n    pure\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\"\r\n    },\r\n    \"contracts/core/NilPassCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../interfaces/IN.sol\\\";\\nimport \\\"../interfaces/INilPass.sol\\\";\\nimport \\\"../interfaces/IPricingStrategy.sol\\\";\\n\\n/**\\n * @title NilPassCore contract\\n * @author Tony Snark\\n * @notice This contract provides basic functionalities to allow minting using the NilPass\\n * @dev This contract should be used only for testing or testnet deployments\\n */\\nabstract contract NilPassCore is ERC721Enumerable, ReentrancyGuard, AccessControl, INilPass, IPricingStrategy {\\n    uint128 public constant MAX_MULTI_MINT_AMOUNT = 32;\\n    uint128 public constant MAX_N_TOKEN_ID = 8888;\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN\\\");\\n    bytes32 public constant DAO_ROLE = keccak256(\\\"DAO\\\");\\n\\n    IN public immutable n;\\n    uint16 public reserveMinted;\\n    uint256 public mintedOutsideNRange;\\n    address public masterMint;\\n    DerivativeParameters public derivativeParams;\\n    uint128 maxTokenId;\\n\\n    struct DerivativeParameters {\\n        bool onlyNHolders;\\n        bool supportsTokenId;\\n        uint16 reservedAllowance;\\n        uint128 maxTotalSupply;\\n        uint128 maxMintAllowance;\\n    }\\n\\n    event Minted(address to, uint256 tokenId);\\n\\n    /**\\n     * @notice Construct an NilPassCore instance\\n     * @param name Name of the token\\n     * @param symbol Symbol of the token\\n     * @param n_ Address of your n instance (only for testing)\\n     * @param derivativeParams_ Parameters describing the derivative settings\\n     * @param masterMint_ Address of the master mint contract\\n     * @param dao_ Address of the NIL DAO\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        IN n_,\\n        DerivativeParameters memory derivativeParams_,\\n        address masterMint_,\\n        address dao_\\n    ) ERC721(name, symbol) {\\n        derivativeParams = derivativeParams_;\\n        require(derivativeParams.maxTotalSupply > 0, \\\"NilPass:INVALID_SUPPLY\\\");\\n        require(\\n            !derivativeParams.onlyNHolders ||\\n                (derivativeParams.onlyNHolders && derivativeParams.maxTotalSupply <= MAX_N_TOKEN_ID),\\n            \\\"NilPass:INVALID_SUPPLY\\\"\\n        );\\n        require(derivativeParams.maxTotalSupply >= derivativeParams.reservedAllowance, \\\"NilPass:INVALID_ALLOWANCE\\\");\\n        require(masterMint_ != address(0), \\\"NilPass:INVALID_MASTERMINT\\\");\\n        require(dao_ != address(0), \\\"NilPass:INVALID_DAO\\\");\\n        n = n_;\\n        masterMint = masterMint_;\\n        derivativeParams.maxMintAllowance = derivativeParams.maxMintAllowance < MAX_MULTI_MINT_AMOUNT\\n            ? derivativeParams.maxMintAllowance\\n            : MAX_MULTI_MINT_AMOUNT;\\n        maxTokenId = derivativeParams.maxTotalSupply > MAX_N_TOKEN_ID\\n            ? derivativeParams.maxTotalSupply\\n            : MAX_N_TOKEN_ID;\\n        _setupRole(ADMIN_ROLE, msg.sender);\\n        _setupRole(DAO_ROLE, dao_);\\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(DAO_ROLE, DAO_ROLE);\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Nil:ACCESS_DENIED\\\");\\n        _;\\n    }\\n\\n    modifier onlyDAO() {\\n        require(hasRole(DAO_ROLE, msg.sender), \\\"Nil:ACCESS_DENIED\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Allow anyone to mint a token with the supply id if this pass is unrestricted.\\n     *         n token holders can use this function without using the n token holders allowance,\\n     *         this is useful when the allowance is fully utilized.\\n     */\\n    function mint(\\n        address,\\n        uint8,\\n        uint256,\\n        bytes calldata\\n    ) public virtual override nonReentrant {\\n        require(false, \\\"MINTING DISABLED\\\");\\n    }\\n\\n    /**\\n     * @notice Allow anyone to mint multiple tokens with the provided IDs if this pass is unrestricted.\\n     *         n token holders can use this function without using the n token holders allowance,\\n     *         this is useful when the allowance is fully utilized.\\n     */\\n    function mintTokenId(\\n        address,\\n        uint256[] calldata,\\n        uint256,\\n        bytes calldata\\n    ) public virtual override nonReentrant {\\n        require(false, \\\"MINTING DISABLED\\\");\\n    }\\n\\n    /**\\n     * @notice Allow a n token holder to bulk mint tokens with id of their n tokens' id\\n     */\\n    function mintWithN(\\n        address,\\n        uint256[] calldata,\\n        uint256,\\n        bytes calldata\\n    ) public virtual override nonReentrant {\\n        require(false, \\\"MINTING DISABLED\\\");\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual override {\\n        require(msg.sender == masterMint, \\\"NilPass:INVALID_MINTER\\\");\\n        super._safeMint(to, tokenId);\\n        emit Minted(to, tokenId);\\n    }\\n\\n    /**\\n     * @notice Set the exclusivity flag to only allow N holders to mint\\n     * @param status Boolean to enable or disable N holder exclusivity\\n     */\\n    function setOnlyNHolders(bool status) public onlyAdmin {\\n        derivativeParams.onlyNHolders = status;\\n    }\\n\\n    /**\\n     * @notice Calculate the currently available number of reserved tokens for n token holders\\n     * @return Reserved mint available\\n     */\\n    function nHoldersMintsAvailable() public view returns (uint256) {\\n        return derivativeParams.reservedAllowance - reserveMinted;\\n    }\\n\\n    /**\\n     * @notice Calculate the currently available number of open mints\\n     * @return Open mint available\\n     */\\n    function openMintsAvailable() public view returns (uint256) {\\n        uint256 maxOpenMints = derivativeParams.maxTotalSupply - derivativeParams.reservedAllowance;\\n        uint256 currentOpenMints = totalSupply() - reserveMinted;\\n        return maxOpenMints - currentOpenMints;\\n    }\\n\\n    /**\\n     * @notice Calculate the total available number of mints\\n     * @return total mint available\\n     */\\n    function totalMintsAvailable() public view virtual override returns (uint256) {\\n        return nHoldersMintsAvailable() + openMintsAvailable();\\n    }\\n\\n    function mintParameters() external view override returns (INilPass.MintParams memory) {\\n        return\\n            INilPass.MintParams({\\n                reservedAllowance: derivativeParams.reservedAllowance,\\n                maxTotalSupply: derivativeParams.maxTotalSupply,\\n                openMintsAvailable: openMintsAvailable(),\\n                totalMintsAvailable: totalMintsAvailable(),\\n                nHoldersMintsAvailable: nHoldersMintsAvailable(),\\n                nHolderPriceInWei: getNextPriceForNHoldersInWei(1, address(0x1), \\\"\\\"),\\n                openPriceInWei: getNextPriceForOpenMintInWei(1, address(0x1), \\\"\\\"),\\n                totalSupply: totalSupply(),\\n                onlyNHolders: derivativeParams.onlyNHolders,\\n                maxMintAllowance: derivativeParams.maxMintAllowance,\\n                supportsTokenId: derivativeParams.supportsTokenId\\n            });\\n    }\\n\\n    /**\\n     * @notice Check if a token with an Id exists\\n     * @param tokenId The token Id to check for\\n     */\\n    function tokenExists(uint256 tokenId) external view override returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721Enumerable, IERC165, AccessControl)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function maxTotalSupply() external view override returns (uint256) {\\n        return derivativeParams.maxTotalSupply;\\n    }\\n\\n    function reservedAllowance() public view returns (uint16) {\\n        return derivativeParams.reservedAllowance;\\n    }\\n\\n    function getNextPriceForNHoldersInWei(\\n        uint256 numberOfMints,\\n        address account,\\n        bytes memory data\\n    ) public view virtual override returns (uint256);\\n\\n    function getNextPriceForOpenMintInWei(\\n        uint256 numberOfMints,\\n        address account,\\n        bytes memory data\\n    ) public view virtual override returns (uint256);\\n\\n    function canMint(address account, bytes calldata data) external view virtual override returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INilPass.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface INilPass is IERC721Enumerable {\\n    struct MintParams {\\n        uint256 reservedAllowance;\\n        uint256 maxTotalSupply;\\n        uint256 nHoldersMintsAvailable;\\n        uint256 openMintsAvailable;\\n        uint256 totalMintsAvailable;\\n        uint256 nHolderPriceInWei;\\n        uint256 openPriceInWei;\\n        uint256 totalSupply;\\n        uint256 maxMintAllowance;\\n        bool onlyNHolders;\\n        bool supportsTokenId;\\n    }\\n\\n    function mint(\\n        address recipient,\\n        uint8 amount,\\n        uint256 paid,\\n        bytes calldata data\\n    ) external;\\n\\n    function mintTokenId(\\n        address recipient,\\n        uint256[] calldata tokenIds,\\n        uint256 paid,\\n        bytes calldata data\\n    ) external;\\n\\n    function mintWithN(\\n        address recipient,\\n        uint256[] calldata tokenIds,\\n        uint256 paid,\\n        bytes calldata data\\n    ) external;\\n\\n    function totalMintsAvailable() external view returns (uint256);\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function mintParameters() external view returns (MintParams memory);\\n\\n    function tokenExists(uint256 tokenId) external view returns (bool);\\n\\n    function canMint(address account, bytes calldata data) external view returns (bool);\\n\\n    function nUsed(uint256 nid) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPricingStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IPricingStrategy {\\n    /**\\n     * @notice Returns the next price for an N mint\\n     */\\n    function getNextPriceForNHoldersInWei(\\n        uint256 numberOfMints,\\n        address account,\\n        bytes memory data\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the next price for an open mint\\n     */\\n    function getNextPriceForOpenMintInWei(\\n        uint256 numberOfMints,\\n        address account,\\n        bytes memory data\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 300\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/libraries/SeedPhraseUtils.sol\": {\r\n        \"SeedPhraseUtils\": \"0x0612405007bef3dcb751057819480e89f32a03e0\"\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"n\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"masterMint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nOwnersRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"linkToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"karmaAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rarible\",\"type\":\"address\"}],\"internalType\":\"struct SeedPhrase.ContractAddresses\",\"name\":\"contractAddresses\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_vrfKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_linkFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstBurntToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secondBurntToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"doublePaneledToken\",\"type\":\"uint256\"}],\"name\":\"Burnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MULTI_MINT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_N_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropGenesisSketch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[][]\",\"name\":\"pairings\",\"type\":\"uint16[][]\"}],\"name\":\"amendPairings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"firstTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondTokenId\",\"type\":\"uint256\"}],\"name\":\"burnForDoublePanel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"canMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"derivativeParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"onlyNHolders\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"supportsTokenId\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"reservedAllowance\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"maxTotalSupply\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxMintAllowance\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDoubleBurnedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfMints\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getNextPriceForNHoldersInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfMints\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getNextPriceForOpenMintInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVrfSeed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"first\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"second\",\"type\":\"uint16\"}],\"name\":\"isValidPairing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"karma\",\"outputs\":[{\"internalType\":\"contract IKarmaScore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterMint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"mintOrphanedPieces\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"mintOwnerSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintParameters\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reservedAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nHoldersMintsAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openMintsAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMintsAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nHolderPriceInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPriceInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMintAllowance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"onlyNHolders\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"supportsTokenId\",\"type\":\"bool\"}],\"internalType\":\"struct INilPass.MintParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"mintTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintWithN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedOutsideNRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"n\",\"outputs\":[{\"internalType\":\"contract IN\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nHoldersMintsAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nOwnerResolver\",\"outputs\":[{\"internalType\":\"contract INOwnerResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openMintsAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum SeedPhrasePricing.PreSaleType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"presaleLimits\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rarible\",\"outputs\":[{\"internalType\":\"contract IRarible\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveMinted\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservedAllowance\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_burnActiveState\",\"type\":\"bool\"}],\"name\":\"setBurnActiveState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"setGenesisSketchAllowList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"setOgAllowList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setOnlyNHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_preSaleActiveState\",\"type\":\"bool\"}],\"name\":\"setPreSaleState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_time\",\"type\":\"uint32\"}],\"name\":\"setPreSaleTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_publicSaleActiveState\",\"type\":\"bool\"}],\"name\":\"setPublicSaleState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_time\",\"type\":\"uint32\"}],\"name\":\"setPublicSaleTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_saleHaltedState\",\"type\":\"bool\"}],\"name\":\"setSaleHaltedState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shuffleBipWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMintsAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SeedPhrase","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"300","ConstructorArguments":"00000000000000000000000005a46f1e545526fb803ff974c790acea34d1f2d60000000000000000000000004be83e8c164a58cf675bdc4a08bdeb7b012dc9570000000000000000000000009073ba45b25774a32cae9bf4a67e49c82a8a37fa000000000000000000000000731b19acaa0ae77aea8bf8515f6dcdb894c248c2000000000000000000000000f0d54349addcf704f77ae15b96510dea15cb7952000000000000000000000000514910771af9ca656af840dff83e8264ecf986ca000000000000000000000000442dbf15caebee8d1da4465da443b42815d0ed4b000000000000000000000000d07dc4262bcdbf85190c01c996b4c06a461d2430aa77729d3466ca35ae8d28b3bbac7cc36a5031efdc430821c02bc31a238af4450000000000000000000000000000000000000000000000001bc16d674ec80000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}