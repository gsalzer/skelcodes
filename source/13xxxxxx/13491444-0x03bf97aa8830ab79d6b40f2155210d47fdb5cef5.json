{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IMISO {\r\n    function commitEth(\r\n        address payable _beneficiary,\r\n        bool readAndAgreedToMarketParticipationAgreement\r\n    )  external payable ;\r\n\r\n    function commitTokens(uint256 _amount, bool readAndAgreedToMarketParticipationAgreement) external;\r\n    function withdrawTokens() external;\r\n}\r\n\r\n interface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n }\r\n\r\n\r\n\r\ncontract IDO  {\r\n\r\n    address public miso_contract;\r\n    address public miso_token;\r\n    address public pay_token;\r\n    address public admin_addr;\r\n    address public mint_addr;\r\n    \r\n    address public eth_addr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    constructor()  {\r\n        admin_addr = msg.sender;\r\n        mint_addr = msg.sender;\r\n\r\n    }\r\n    \r\n    function setMiso(address addr,address _miso_token,address _pay_token) external {\r\n        require(admin_addr == msg.sender,\"invalid msg.sender\");\r\n        miso_contract = addr;\r\n        miso_token = _miso_token;\r\n        pay_token = _pay_token;\r\n        \r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n\r\n    function setMintAddr(address addr) external  {\r\n        require(admin_addr == msg.sender,\"invalid msg.sender\");\r\n        mint_addr = addr;\r\n\r\n    }\r\n    \r\n\r\n\r\n    function changeMiso(address addr) external  {\r\n        require(admin_addr == msg.sender,\"invalid msg.sender\");\r\n        miso_contract = addr;\r\n\r\n    }\r\n    \r\n    function changePayToken(address _pay_token) external {\r\n        require(admin_addr == msg.sender,\"invalid msg.sender\");\r\n        pay_token = _pay_token;\r\n        \r\n    }\r\n    \r\n    function changeMisoToken(address _miso_token) external {\r\n        require(admin_addr == msg.sender,\"invalid msg.sender\");\r\n        miso_token = _miso_token;\r\n        \r\n    }\r\n\r\n\r\n    function mintETH(address payable _beneficiary,uint256 payamount) external  {\r\n        require(mint_addr == msg.sender,\"invalid msg.sender\");\r\n        (bool success,bytes memory data) = miso_contract.call{value: payamount}(abi.encodeWithSignature(\"commitEth(address,bool)\", _beneficiary,true));\r\n        require(success, string(data));\r\n    }\r\n\r\n    function mintETHWithCoinbase(address payable _beneficiary,uint256 payamount,uint256 coinbase_amount) external  {\r\n        require(mint_addr == msg.sender,\"invalid msg.sender\");\r\n        (bool success,bytes memory data) = miso_contract.call{value: payamount}(abi.encodeWithSignature(\"commitEth(address,bool)\", _beneficiary,true));\r\n        require(success, string(data));\r\n        block.coinbase.transfer(coinbase_amount);\r\n    }\r\n\r\n\r\n\r\n    //要进行授权  授权给拍卖合约 允许转移本合约 的支付代币\r\n    //要进行授权  授权给拍卖合约 允许转移funder的销售代币\r\n    function mintToken(uint256 payAmount) external  {\r\n        require(mint_addr == msg.sender,\"invalid msg.sender\");\r\n        (bool success,bytes memory data) = miso_contract.call(abi.encodeWithSignature(\"commitTokens(uint256,bool)\", payAmount,true));\r\n        require(success, string(data));\r\n    }\r\n\r\n\r\n    function mintTokenWithCoinbase(uint256 payAmount,uint256 coinbase_amount) external  {\r\n        require(mint_addr == msg.sender,\"invalid msg.sender\");\r\n        (bool success,bytes memory data) = miso_contract.call(abi.encodeWithSignature(\"commitTokens(uint256,bool)\", payAmount,true));\r\n        require(success, string(data));\r\n        block.coinbase.transfer(coinbase_amount);\r\n    }\r\n\r\n\r\n    function approveContract(address addr,uint256 amount) external {\r\n        require(admin_addr == msg.sender,\"invalid msg.sender\");\r\n        (bool success,bytes memory data) = pay_token.call(abi.encodeWithSignature(\"approve(address,uint256)\", addr,amount));\r\n        require(success, string(data));\r\n    }\r\n\r\n\r\n     function _safeTransfer(\r\n         address token,\r\n         address to,\r\n         uint256 amount\r\n     ) internal virtual {\r\n         // solium-disable-next-line security/no-low-level-calls\r\n         (bool success, bytes memory data) =\r\n             token.call(\r\n                 // 0xa9059cbb = bytes4(keccak256(\"transfer(address,uint256)\"))\r\n                 abi.encodeWithSelector(0xa9059cbb, to, amount)\r\n             );\r\n         require(success && (data.length == 0 || abi.decode(data, (bool)))); // ERC20 Transfer failed\r\n     }\r\n\r\n\r\n\r\n     function claimToken(uint256 amount,address to) external {\r\n         require(msg.sender == admin_addr,\"invalid msg.sender\");\r\n         _safeTransfer(miso_token,to,amount);\r\n     }\r\n\r\n\r\n\r\n    function transferToCoinbase(uint256 coinbase_amount) public {\r\n        require(admin_addr == msg.sender,\"invalid msg.sender\");\r\n        block.coinbase.transfer(coinbase_amount);\r\n    }\r\n\r\n\r\n     function withdrawToken() external {\r\n         require(msg.sender == admin_addr,\"invalid msg.sender\");\r\n         //require(pay_token != eth_addr,\"paytoken is eth\");\r\n         _safeTransfer(pay_token,admin_addr,IERC20(pay_token).balanceOf(address(this)));\r\n     }\r\n\r\n    function withdrawETH() external {\r\n        require(msg.sender == admin_addr,\"invalid msg.sender\");\r\n        //require(pay_token == eth_addr,\"paytoken not eth\");\r\n        payable(admin_addr).transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"admin_addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeMiso\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_miso_token\",\"type\":\"address\"}],\"name\":\"changeMisoToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pay_token\",\"type\":\"address\"}],\"name\":\"changePayToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eth_addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payamount\",\"type\":\"uint256\"}],\"name\":\"mintETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payamount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coinbase_amount\",\"type\":\"uint256\"}],\"name\":\"mintETHWithCoinbase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coinbase_amount\",\"type\":\"uint256\"}],\"name\":\"mintTokenWithCoinbase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint_addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miso_contract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miso_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pay_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMintAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_miso_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pay_token\",\"type\":\"address\"}],\"name\":\"setMiso\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"coinbase_amount\",\"type\":\"uint256\"}],\"name\":\"transferToCoinbase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"IDO","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://15664e8c8308d3eb11f0cb884fb3a5f9adc4ec6a6f9651ba56fa131da85867ee"}]}