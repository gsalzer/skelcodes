{"status":"1","message":"OK","result":[{"SourceCode":"// File contracts/interfaces/IOlympusProFactoryStorage.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\ninterface IOlympusProFactoryStorage {\r\n    function pushBond(address _payoutToken, address _principleToken, address _customTreasury, address _customBond, address _initialOwner, uint[] calldata _tierCeilings, uint[] calldata _fees) external returns(address _treasury, address _bond);\r\n}\r\n\r\n\r\n// File contracts/types/Ownable.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\ncontract Ownable {\r\n\r\n    address public policy;\r\n\r\n    constructor () {\r\n        policy = msg.sender;\r\n    }\r\n\r\n    modifier onlyPolicy() {\r\n        require( policy == msg.sender, \"Ownable: caller is not the owner\" );\r\n        _;\r\n    }\r\n    \r\n    function transferManagment(address _newOwner) external onlyPolicy() {\r\n        require( _newOwner != address(0) );\r\n        policy = _newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/SafeMath.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function sqrrt(uint256 a) internal pure returns (uint c) {\r\n        if (a > 3) {\r\n            c = a;\r\n            uint b = add( div( a, 2), 1 );\r\n            while (b < c) {\r\n                c = b;\r\n                b = div( add( div( a, b ), b), 2 );\r\n            }\r\n        } else if (a != 0) {\r\n            c = 1;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/Address.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addressToString(address _address) internal pure returns(string memory) {\r\n        bytes32 _bytes = bytes32(uint256(_address));\r\n        bytes memory HEX = \"0123456789abcdef\";\r\n        bytes memory _addr = new bytes(42);\r\n\r\n        _addr[0] = '0';\r\n        _addr[1] = 'x';\r\n\r\n        for(uint256 i = 0; i < 20; i++) {\r\n            _addr[2+i*2] = HEX[uint8(_bytes[i + 12] >> 4)];\r\n            _addr[3+i*2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\r\n        }\r\n\r\n        return string(_addr);\r\n\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC20.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/libraries/SafeERC20.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/FullMath.sol\r\n\r\n\r\npragma solidity 0.7.5;\r\n\r\nlibrary FullMath {\r\n    function fullMul(uint256 x, uint256 y) private pure returns (uint256 l, uint256 h) {\r\n        uint256 mm = mulmod(x, y, uint256(-1));\r\n        l = x * y;\r\n        h = mm - l;\r\n        if (mm < l) h -= 1;\r\n    }\r\n\r\n    function fullDiv(\r\n        uint256 l,\r\n        uint256 h,\r\n        uint256 d\r\n    ) private pure returns (uint256) {\r\n        uint256 pow2 = d & -d;\r\n        d /= pow2;\r\n        l /= pow2;\r\n        l += h * ((-pow2) / pow2 + 1);\r\n        uint256 r = 1;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        return l * r;\r\n    }\r\n\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 d\r\n    ) internal pure returns (uint256) {\r\n        (uint256 l, uint256 h) = fullMul(x, y);\r\n        uint256 mm = mulmod(x, y, d);\r\n        if (mm > l) h -= 1;\r\n        l -= mm;\r\n        require(h < d, 'FullMath::mulDiv: overflow');\r\n        return fullDiv(l, h, d);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/FixedPoint.sol\r\n\r\n\r\npragma solidity 0.7.5;\r\n\r\nlibrary Babylonian {\r\n\r\n    function sqrt(uint256 x) internal pure returns (uint256) {\r\n        if (x == 0) return 0;\r\n\r\n        uint256 xx = x;\r\n        uint256 r = 1;\r\n        if (xx >= 0x100000000000000000000000000000000) {\r\n            xx >>= 128;\r\n            r <<= 64;\r\n        }\r\n        if (xx >= 0x10000000000000000) {\r\n            xx >>= 64;\r\n            r <<= 32;\r\n        }\r\n        if (xx >= 0x100000000) {\r\n            xx >>= 32;\r\n            r <<= 16;\r\n        }\r\n        if (xx >= 0x10000) {\r\n            xx >>= 16;\r\n            r <<= 8;\r\n        }\r\n        if (xx >= 0x100) {\r\n            xx >>= 8;\r\n            r <<= 4;\r\n        }\r\n        if (xx >= 0x10) {\r\n            xx >>= 4;\r\n            r <<= 2;\r\n        }\r\n        if (xx >= 0x8) {\r\n            r <<= 1;\r\n        }\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1; // Seven iterations should be enough\r\n        uint256 r1 = x / r;\r\n        return (r < r1 ? r : r1);\r\n    }\r\n}\r\n\r\nlibrary BitMath {\r\n\r\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\r\n        require(x > 0, 'BitMath::mostSignificantBit: zero');\r\n\r\n        if (x >= 0x100000000000000000000000000000000) {\r\n            x >>= 128;\r\n            r += 128;\r\n        }\r\n        if (x >= 0x10000000000000000) {\r\n            x >>= 64;\r\n            r += 64;\r\n        }\r\n        if (x >= 0x100000000) {\r\n            x >>= 32;\r\n            r += 32;\r\n        }\r\n        if (x >= 0x10000) {\r\n            x >>= 16;\r\n            r += 16;\r\n        }\r\n        if (x >= 0x100) {\r\n            x >>= 8;\r\n            r += 8;\r\n        }\r\n        if (x >= 0x10) {\r\n            x >>= 4;\r\n            r += 4;\r\n        }\r\n        if (x >= 0x4) {\r\n            x >>= 2;\r\n            r += 2;\r\n        }\r\n        if (x >= 0x2) r += 1;\r\n    }\r\n}\r\n\r\n\r\nlibrary FixedPoint {\r\n\r\n    struct uq112x112 {\r\n        uint224 _x;\r\n    }\r\n\r\n    struct uq144x112 {\r\n        uint256 _x;\r\n    }\r\n\r\n    uint8 private constant RESOLUTION = 112;\r\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\r\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000;\r\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\r\n\r\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\r\n        return uint112(self._x >> RESOLUTION);\r\n    }\r\n\r\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\r\n\r\n        return uint(self._x) / 5192296858534827;\r\n    }\r\n\r\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\r\n        require(denominator > 0, 'FixedPoint::fraction: division by zero');\r\n        if (numerator == 0) return FixedPoint.uq112x112(0);\r\n\r\n        if (numerator <= uint144(-1)) {\r\n            uint256 result = (numerator << RESOLUTION) / denominator;\r\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\r\n            return uq112x112(uint224(result));\r\n        } else {\r\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\r\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\r\n            return uq112x112(uint224(result));\r\n        }\r\n    }\r\n    \r\n    // square root of a UQ112x112\r\n    // lossy between 0/1 and 40 bits\r\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\r\n        if (self._x <= uint144(-1)) {\r\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\r\n        }\r\n\r\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\r\n        safeShiftBits -= safeShiftBits % 2;\r\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/ITreasury.sol\r\n\r\n\r\npragma solidity 0.7.5;\r\n\r\ninterface ITreasury {\r\n    function deposit(address _principleTokenAddress, uint _amountPrincipleToken, uint _amountPayoutToken) external;\r\n    function valueOfToken( address _principleTokenAddress, uint _amount ) external view returns ( uint value_ );\r\n}\r\n\r\n\r\n// File contracts/OlympusProCustomBond.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\ncontract CustomBond is Ownable {\r\n    using FixedPoint for *;\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n    \r\n    /* ======== EVENTS ======== */\r\n\r\n    event BondCreated( uint deposit, uint payout, uint expires );\r\n    event BondRedeemed( address recipient, uint payout, uint remaining );\r\n    event BondPriceChanged( uint internalPrice, uint debtRatio );\r\n    event ControlVariableAdjustment( uint initialBCV, uint newBCV, uint adjustment, bool addition );\r\n    \r\n    \r\n     /* ======== STATE VARIABLES ======== */\r\n    \r\n    IERC20 immutable payoutToken; // token paid for principal\r\n    IERC20 immutable principalToken; // inflow token\r\n    ITreasury immutable customTreasury; // pays for and receives principal\r\n    address immutable olympusDAO;\r\n    address olympusTreasury; // receives fee\r\n\r\n    uint public totalPrincipalBonded;\r\n    uint public totalPayoutGiven;\r\n    \r\n    Terms public terms; // stores terms for new bonds\r\n    Adjust public adjustment; // stores adjustment to BCV data\r\n    FeeTiers[] private feeTiers; // stores fee tiers\r\n\r\n    mapping( address => Bond ) public bondInfo; // stores bond information for depositors\r\n\r\n    uint public totalDebt; // total value of outstanding bonds; used for pricing\r\n    uint public lastDecay; // reference block for debt decay\r\n\r\n    address immutable subsidyRouter; // pays subsidy in OHM to custom treasury\r\n    uint payoutSinceLastSubsidy; // principal accrued since subsidy paid\r\n    \r\n    /* ======== STRUCTS ======== */\r\n\r\n    struct FeeTiers {\r\n        uint tierCeilings; // principal bonded till next tier\r\n        uint fees; // in ten-thousandths (i.e. 33300 = 3.33%)\r\n    }\r\n\r\n    // Info for creating new bonds\r\n    struct Terms {\r\n        uint controlVariable; // scaling variable for price\r\n        uint vestingTerm; // in blocks\r\n        uint minimumPrice; // vs principal value\r\n        uint maxPayout; // in thousandths of a %. i.e. 500 = 0.5%\r\n        uint maxDebt; // payout token decimal debt ratio, max % total supply created as debt\r\n    }\r\n\r\n    // Info for bond holder\r\n    struct Bond {\r\n        uint payout; // payout token remaining to be paid\r\n        uint vesting; // Blocks left to vest\r\n        uint lastBlock; // Last interaction\r\n        uint truePricePaid; // Price paid (principal tokens per payout token) in ten-millionths - 4000000 = 0.4\r\n    }\r\n\r\n    // Info for incremental adjustments to control variable \r\n    struct Adjust {\r\n        bool add; // addition or subtraction\r\n        uint rate; // increment\r\n        uint target; // BCV when adjustment finished\r\n        uint buffer; // minimum length (in blocks) between adjustments\r\n        uint lastBlock; // block when last adjustment made\r\n    }\r\n    \r\n    /* ======== CONSTRUCTOR ======== */\r\n\r\n    constructor(\r\n        address _customTreasury, \r\n        address _payoutToken, \r\n        address _principalToken, \r\n        address _olympusTreasury,\r\n        address _subsidyRouter, \r\n        address _initialOwner, \r\n        address _olympusDAO,\r\n        uint[] memory _tierCeilings, \r\n        uint[] memory _fees\r\n    ) {\r\n        require( _customTreasury != address(0) );\r\n        customTreasury = ITreasury( _customTreasury );\r\n        require( _payoutToken != address(0) );\r\n        payoutToken = IERC20( _payoutToken );\r\n        require( _principalToken != address(0) );\r\n        principalToken = IERC20( _principalToken );\r\n        require( _olympusTreasury != address(0) );\r\n        olympusTreasury = _olympusTreasury;\r\n        require( _subsidyRouter != address(0) );\r\n        subsidyRouter = _subsidyRouter;\r\n        require( _initialOwner != address(0) );\r\n        policy = _initialOwner;\r\n        require( _olympusDAO != address(0) );\r\n        olympusDAO = _olympusDAO;\r\n        require(_tierCeilings.length == _fees.length, \"tier length and fee length not the same\");\r\n\r\n        for(uint i; i < _tierCeilings.length; i++) {\r\n            feeTiers.push( FeeTiers({\r\n                tierCeilings: _tierCeilings[i],\r\n                fees: _fees[i]\r\n            }));\r\n        }\r\n    }\r\n\r\n    /* ======== INITIALIZATION ======== */\r\n    \r\n    /**\r\n     *  @notice initializes bond parameters\r\n     *  @param _controlVariable uint\r\n     *  @param _vestingTerm uint\r\n     *  @param _minimumPrice uint\r\n     *  @param _maxPayout uint\r\n     *  @param _maxDebt uint\r\n     *  @param _initialDebt uint\r\n     */\r\n    function initializeBond( \r\n        uint _controlVariable, \r\n        uint _vestingTerm,\r\n        uint _minimumPrice,\r\n        uint _maxPayout,\r\n        uint _maxDebt,\r\n        uint _initialDebt\r\n    ) external onlyPolicy() {\r\n        require( currentDebt() == 0, \"Debt must be 0 for initialization\" );\r\n        terms = Terms ({\r\n            controlVariable: _controlVariable,\r\n            vestingTerm: _vestingTerm,\r\n            minimumPrice: _minimumPrice,\r\n            maxPayout: _maxPayout,\r\n            maxDebt: _maxDebt\r\n        });\r\n        totalDebt = _initialDebt;\r\n        lastDecay = block.number;\r\n    }\r\n    \r\n    \r\n    /* ======== POLICY FUNCTIONS ======== */\r\n\r\n    enum PARAMETER { VESTING, PAYOUT, DEBT }\r\n    /**\r\n     *  @notice set parameters for new bonds\r\n     *  @param _parameter PARAMETER\r\n     *  @param _input uint\r\n     */\r\n    function setBondTerms ( PARAMETER _parameter, uint _input ) external onlyPolicy() {\r\n        if ( _parameter == PARAMETER.VESTING ) { // 0\r\n            require( _input >= 10000, \"Vesting must be longer than 36 hours\" );\r\n            terms.vestingTerm = _input;\r\n        } else if ( _parameter == PARAMETER.PAYOUT ) { // 1\r\n            require( _input <= 1000, \"Payout cannot be above 1 percent\" );\r\n            terms.maxPayout = _input;\r\n        } else if ( _parameter == PARAMETER.DEBT ) { // 2\r\n            terms.maxDebt = _input;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @notice set control variable adjustment\r\n     *  @param _addition bool\r\n     *  @param _increment uint\r\n     *  @param _target uint\r\n     *  @param _buffer uint\r\n     */\r\n    function setAdjustment ( \r\n        bool _addition,\r\n        uint _increment, \r\n        uint _target,\r\n        uint _buffer \r\n    ) external onlyPolicy() {\r\n        require( _increment <= terms.controlVariable.mul( 30 ).div( 1000 ), \"Increment too large\" );\r\n\r\n        adjustment = Adjust({\r\n            add: _addition,\r\n            rate: _increment,\r\n            target: _target,\r\n            buffer: _buffer,\r\n            lastBlock: block.number\r\n        });\r\n    }\r\n\r\n    /**\r\n     *  @notice change address of Olympus Treasury\r\n     *  @param _olympusTreasury uint\r\n     */\r\n    function changeOlympusTreasury(address _olympusTreasury) external {\r\n        require( msg.sender == olympusDAO, \"Only Olympus DAO\" );\r\n        olympusTreasury = _olympusTreasury;\r\n    }\r\n\r\n    /**\r\n     *  @notice subsidy controller checks payouts since last subsidy and resets counter\r\n     *  @return payoutSinceLastSubsidy_ uint\r\n     */\r\n    function paySubsidy() external returns ( uint payoutSinceLastSubsidy_ ) {\r\n        require( msg.sender == subsidyRouter, \"Only subsidy controller\" );\r\n\r\n        payoutSinceLastSubsidy_ = payoutSinceLastSubsidy;\r\n        payoutSinceLastSubsidy = 0;\r\n    }\r\n    \r\n    /* ======== USER FUNCTIONS ======== */\r\n    \r\n    /**\r\n     *  @notice deposit bond\r\n     *  @param _amount uint\r\n     *  @param _maxPrice uint\r\n     *  @param _depositor address\r\n     *  @return uint\r\n     */\r\n    function deposit(uint _amount, uint _maxPrice, address _depositor) external returns (uint) {\r\n        require( _depositor != address(0), \"Invalid address\" );\r\n\r\n        decayDebt();\r\n        require( totalDebt <= terms.maxDebt, \"Max capacity reached\" );\r\n        \r\n        uint nativePrice = trueBondPrice();\r\n\r\n        require( _maxPrice >= nativePrice, \"Slippage limit: more than max price\" ); // slippage protection\r\n\r\n        uint value = customTreasury.valueOfToken( address(principalToken), _amount );\r\n        uint payout = _payoutFor( value ); // payout to bonder is computed\r\n\r\n        require( payout >= 10 ** payoutToken.decimals() / 100, \"Bond too small\" ); // must be > 0.01 payout token ( underflow protection )\r\n        require( payout <= maxPayout(), \"Bond too large\"); // size protection because there is no slippage\r\n\r\n        // profits are calculated\r\n        uint fee = payout.mul( currentOlympusFee() ).div( 1e6 );\r\n\r\n        /**\r\n            principal is transferred in\r\n            approved and\r\n            deposited into the treasury, returning (_amount - profit) payout token\r\n         */\r\n        principalToken.safeTransferFrom( msg.sender, address(this), _amount );\r\n        principalToken.approve( address(customTreasury), _amount );\r\n        customTreasury.deposit( address(principalToken), _amount, payout );\r\n        \r\n        if ( fee != 0 ) { // fee is transferred to dao \r\n            payoutToken.transfer(olympusTreasury, fee);\r\n        }\r\n        \r\n        // total debt is increased\r\n        totalDebt = totalDebt.add( value );\r\n                \r\n        // depositor info is stored\r\n        bondInfo[ _depositor ] = Bond({ \r\n            payout: bondInfo[ _depositor ].payout.add( payout.sub(fee) ),\r\n            vesting: terms.vestingTerm,\r\n            lastBlock: block.number,\r\n            truePricePaid: trueBondPrice()\r\n        });\r\n\r\n        // indexed events are emitted\r\n        emit BondCreated( _amount, payout, block.number.add( terms.vestingTerm ) );\r\n        emit BondPriceChanged( _bondPrice(), debtRatio() );\r\n\r\n        totalPrincipalBonded = totalPrincipalBonded.add(_amount); // total bonded increased\r\n        totalPayoutGiven = totalPayoutGiven.add(payout); // total payout increased\r\n        payoutSinceLastSubsidy = payoutSinceLastSubsidy.add( payout ); // subsidy counter increased\r\n\r\n        adjust(); // control variable is adjusted\r\n        return payout; \r\n    }\r\n    \r\n    /** \r\n     *  @notice redeem bond for user\r\n     *  @return uint\r\n     */ \r\n    function redeem(address _depositor) external returns (uint) {\r\n        Bond memory info = bondInfo[ _depositor ];\r\n        uint percentVested = percentVestedFor( _depositor ); // (blocks since last interaction / vesting term remaining)\r\n\r\n        if ( percentVested >= 10000 ) { // if fully vested\r\n            delete bondInfo[ _depositor ]; // delete user info\r\n            emit BondRedeemed( _depositor, info.payout, 0 ); // emit bond data\r\n            payoutToken.transfer( _depositor, info.payout );\r\n            return info.payout;\r\n\r\n        } else { // if unfinished\r\n            // calculate payout vested\r\n            uint payout = info.payout.mul( percentVested ).div( 10000 );\r\n\r\n            // store updated deposit info\r\n            bondInfo[ _depositor ] = Bond({\r\n                payout: info.payout.sub( payout ),\r\n                vesting: info.vesting.sub( block.number.sub( info.lastBlock ) ),\r\n                lastBlock: block.number,\r\n                truePricePaid: info.truePricePaid\r\n            });\r\n\r\n            emit BondRedeemed( _depositor, payout, bondInfo[ _depositor ].payout );\r\n            payoutToken.transfer( _depositor, payout );\r\n            return payout;\r\n        }\r\n        \r\n    }\r\n    \r\n    /* ======== INTERNAL HELPER FUNCTIONS ======== */\r\n\r\n    /**\r\n     *  @notice makes incremental adjustment to control variable\r\n     */\r\n    function adjust() internal {\r\n        uint blockCanAdjust = adjustment.lastBlock.add( adjustment.buffer );\r\n        if( adjustment.rate != 0 && block.number >= blockCanAdjust ) {\r\n            uint initial = terms.controlVariable;\r\n            if ( adjustment.add ) {\r\n                terms.controlVariable = terms.controlVariable.add( adjustment.rate );\r\n                if ( terms.controlVariable >= adjustment.target ) {\r\n                    adjustment.rate = 0;\r\n                }\r\n            } else {\r\n                terms.controlVariable = terms.controlVariable.sub( adjustment.rate );\r\n                if ( terms.controlVariable <= adjustment.target ) {\r\n                    adjustment.rate = 0;\r\n                }\r\n            }\r\n            adjustment.lastBlock = block.number;\r\n            emit ControlVariableAdjustment( initial, terms.controlVariable, adjustment.rate, adjustment.add );\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @notice reduce total debt\r\n     */\r\n    function decayDebt() internal {\r\n        totalDebt = totalDebt.sub( debtDecay() );\r\n        lastDecay = block.number;\r\n    }\r\n\r\n    /**\r\n     *  @notice calculate current bond price and remove floor if above\r\n     *  @return price_ uint\r\n     */\r\n    function _bondPrice() internal returns ( uint price_ ) {\r\n        price_ = terms.controlVariable.mul( debtRatio() ).div( 10 ** (uint256(payoutToken.decimals()).sub(5)) );\r\n        if ( price_ < terms.minimumPrice ) {\r\n            price_ = terms.minimumPrice;        \r\n        } else if ( terms.minimumPrice != 0 ) {\r\n            terms.minimumPrice = 0;\r\n        }\r\n    }\r\n\r\n\r\n    /* ======== VIEW FUNCTIONS ======== */\r\n\r\n    /**\r\n     *  @notice calculate current bond premium\r\n     *  @return price_ uint\r\n     */\r\n    function bondPrice() public view returns ( uint price_ ) {        \r\n        price_ = terms.controlVariable.mul( debtRatio() ).div( 10 ** (uint256(payoutToken.decimals()).sub(5)) );\r\n        if ( price_ < terms.minimumPrice ) {\r\n            price_ = terms.minimumPrice;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @notice calculate true bond price a user pays\r\n     *  @return price_ uint\r\n     */\r\n    function trueBondPrice() public view returns ( uint price_ ) {\r\n        price_ = bondPrice().add(bondPrice().mul( currentOlympusFee() ).div( 1e6 ) );\r\n    }\r\n\r\n    /**\r\n     *  @notice determine maximum bond size\r\n     *  @return uint\r\n     */\r\n    function maxPayout() public view returns ( uint ) {\r\n        return payoutToken.totalSupply().mul( terms.maxPayout ).div( 100000 );\r\n    }\r\n\r\n    /**\r\n     *  @notice calculate total interest due for new bond\r\n     *  @param _value uint\r\n     *  @return uint\r\n     */\r\n    function _payoutFor( uint _value ) internal view returns ( uint ) {\r\n        return FixedPoint.fraction( _value, bondPrice() ).decode112with18().div( 1e11 );\r\n    }\r\n\r\n    /**\r\n     *  @notice calculate user's interest due for new bond, accounting for Olympus Fee\r\n     *  @param _value uint\r\n     *  @return uint\r\n     */\r\n    function payoutFor( uint _value ) external view returns ( uint ) {\r\n        uint total = FixedPoint.fraction( _value, bondPrice() ).decode112with18().div( 1e11 );\r\n        return total.sub(total.mul( currentOlympusFee() ).div( 1e6 ));\r\n    }\r\n\r\n    /**\r\n     *  @notice calculate current ratio of debt to payout token supply\r\n     *  @notice protocols using Olympus Pro should be careful when quickly adding large %s to total supply\r\n     *  @return debtRatio_ uint\r\n     */\r\n    function debtRatio() public view returns ( uint debtRatio_ ) {   \r\n        debtRatio_ = FixedPoint.fraction( \r\n            currentDebt().mul( 10 ** payoutToken.decimals() ), \r\n            payoutToken.totalSupply()\r\n        ).decode112with18().div( 1e18 );\r\n    }\r\n\r\n    /**\r\n     *  @notice calculate debt factoring in decay\r\n     *  @return uint\r\n     */\r\n    function currentDebt() public view returns ( uint ) {\r\n        return totalDebt.sub( debtDecay() );\r\n    }\r\n\r\n    /**\r\n     *  @notice amount to decay total debt by\r\n     *  @return decay_ uint\r\n     */\r\n    function debtDecay() public view returns ( uint decay_ ) {\r\n        uint blocksSinceLast = block.number.sub( lastDecay );\r\n        decay_ = totalDebt.mul( blocksSinceLast ).div( terms.vestingTerm );\r\n        if ( decay_ > totalDebt ) {\r\n            decay_ = totalDebt;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     *  @notice calculate how far into vesting a depositor is\r\n     *  @param _depositor address\r\n     *  @return percentVested_ uint\r\n     */\r\n    function percentVestedFor( address _depositor ) public view returns ( uint percentVested_ ) {\r\n        Bond memory bond = bondInfo[ _depositor ];\r\n        uint blocksSinceLast = block.number.sub( bond.lastBlock );\r\n        uint vesting = bond.vesting;\r\n\r\n        if ( vesting > 0 ) {\r\n            percentVested_ = blocksSinceLast.mul( 10000 ).div( vesting );\r\n        } else {\r\n            percentVested_ = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @notice calculate amount of payout token available for claim by depositor\r\n     *  @param _depositor address\r\n     *  @return pendingPayout_ uint\r\n     */\r\n    function pendingPayoutFor( address _depositor ) external view returns ( uint pendingPayout_ ) {\r\n        uint percentVested = percentVestedFor( _depositor );\r\n        uint payout = bondInfo[ _depositor ].payout;\r\n\r\n        if ( percentVested >= 10000 ) {\r\n            pendingPayout_ = payout;\r\n        } else {\r\n            pendingPayout_ = payout.mul( percentVested ).div( 10000 );\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @notice current fee Olympus takes of each bond\r\n     *  @return currentFee_ uint\r\n     */\r\n    function currentOlympusFee() public view returns( uint currentFee_ ) {\r\n        uint tierLength = feeTiers.length;\r\n        for(uint i; i < tierLength; i++) {\r\n            if(totalPrincipalBonded < feeTiers[i].tierCeilings || i == tierLength - 1 ) {\r\n                return feeTiers[i].fees;\r\n            }\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n\r\n// File contracts/OlympusProCustomTreasury.sol\r\n\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\ncontract CustomTreasury is Ownable {\r\n    \r\n    /* ======== DEPENDENCIES ======== */\r\n    \r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n    \r\n    \r\n    /* ======== STATE VARIABLS ======== */\r\n    \r\n    address public immutable payoutToken;\r\n\r\n    mapping(address => bool) public bondContract; \r\n    \r\n    /* ======== EVENTS ======== */\r\n\r\n    event BondContractToggled(address bondContract, bool approved);\r\n    event Withdraw(address token, address destination, uint amount);\r\n    \r\n    /* ======== CONSTRUCTOR ======== */\r\n\r\n    constructor(address _payoutToken, address _initialOwner) {\r\n        require( _payoutToken != address(0) );\r\n        payoutToken = _payoutToken;\r\n        require( _initialOwner != address(0) );\r\n        policy = _initialOwner;\r\n    }\r\n\r\n    /* ======== BOND CONTRACT FUNCTION ======== */\r\n\r\n    /**\r\n     *  @notice deposit principle token and recieve back payout token\r\n     *  @param _principleTokenAddress address\r\n     *  @param _amountPrincipleToken uint\r\n     *  @param _amountPayoutToken uint\r\n     */\r\n    function deposit(address _principleTokenAddress, uint _amountPrincipleToken, uint _amountPayoutToken) external {\r\n        require(bondContract[msg.sender], \"msg.sender is not a bond contract\");\r\n        IERC20(_principleTokenAddress).safeTransferFrom(msg.sender, address(this), _amountPrincipleToken);\r\n        IERC20(payoutToken).safeTransfer(msg.sender, _amountPayoutToken);\r\n    }\r\n\r\n    /* ======== VIEW FUNCTION ======== */\r\n    \r\n    /**\r\n    *   @notice returns payout token valuation of priciple\r\n    *   @param _principleTokenAddress address\r\n    *   @param _amount uint\r\n    *   @return value_ uint\r\n     */\r\n    function valueOfToken( address _principleTokenAddress, uint _amount ) public view returns ( uint value_ ) {\r\n        // convert amount to match payout token decimals\r\n        value_ = _amount.mul( 10 ** IERC20( payoutToken ).decimals() ).div( 10 ** IERC20( _principleTokenAddress ).decimals() );\r\n    }\r\n\r\n\r\n    /* ======== POLICY FUNCTIONS ======== */\r\n\r\n    /**\r\n     *  @notice policy can withdraw ERC20 token to desired address\r\n     *  @param _token uint\r\n     *  @param _destination address\r\n     *  @param _amount uint\r\n     */\r\n    function withdraw(address _token, address _destination, uint _amount) external onlyPolicy() {\r\n        IERC20(_token).safeTransfer(_destination, _amount);\r\n\r\n        emit Withdraw(_token, _destination, _amount);\r\n    }\r\n\r\n    /**\r\n        @notice toggle bond contract\r\n        @param _bondContract address\r\n     */\r\n    function toggleBondContract(address _bondContract) external onlyPolicy() {\r\n        bondContract[_bondContract] = !bondContract[_bondContract];\r\n        emit BondContractToggled(_bondContract, bondContract[_bondContract]);\r\n    }\r\n    \r\n}\r\n\r\n\r\n// File contracts/OlympusProFactory.sol\r\n\r\n// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\n\r\n\r\ncontract OlympusProFactory is Ownable {\r\n    \r\n    /* ======== STATE VARIABLS ======== */\r\n    \r\n    address immutable public olympusTreasury;\r\n    address immutable public olympusProFactoryStorage;\r\n    address immutable public olumpusProSubsidyRouter;\r\n    address immutable public olympusDAO;\r\n    \r\n    /* ======== CONSTRUCTION ======== */\r\n    \r\n    constructor(address _olympusTreasury, address _olympusProFactoryStorage, address _olumpusProSubsidyRouter, address _olympusDAO) {\r\n        require( _olympusTreasury != address(0) );\r\n        olympusTreasury = _olympusTreasury;\r\n        require( _olympusProFactoryStorage != address(0) );\r\n        olympusProFactoryStorage = _olympusProFactoryStorage;\r\n        require( _olumpusProSubsidyRouter != address(0) );\r\n        olumpusProSubsidyRouter = _olumpusProSubsidyRouter;\r\n        require( _olympusDAO != address(0) );\r\n        olympusDAO = _olympusDAO;\r\n    }\r\n    \r\n    /* ======== POLICY FUNCTIONS ======== */\r\n    \r\n    /**\r\n        @notice deploys custom treasury and custom bond contracts and returns address of both\r\n        @param _payoutToken address\r\n        @param _principleToken address\r\n        @param _initialOwner address\r\n        @return _treasury address\r\n        @return _bond address\r\n     */\r\n    function createBondAndTreasury(address _payoutToken, address _principleToken, address _initialOwner, uint[] calldata _tierCeilings, uint[] calldata _fees) external onlyPolicy() returns(address _treasury, address _bond) {\r\n    \r\n        CustomTreasury treasury = new CustomTreasury(_payoutToken, _initialOwner);\r\n        CustomBond bond = new CustomBond(address(treasury), _payoutToken, _principleToken, olympusTreasury, olumpusProSubsidyRouter, _initialOwner, olympusDAO, _tierCeilings, _fees);\r\n        \r\n        return IOlympusProFactoryStorage(olympusProFactoryStorage).pushBond(\r\n            _payoutToken, _principleToken, address(treasury), address(bond), _initialOwner, _tierCeilings, _fees\r\n        );\r\n    }\r\n\r\n    /**\r\n        @notice deploys custom treasury and custom bond contracts and returns address of both\r\n        @param _payoutToken address\r\n        @param _principleToken address\r\n        @param _customTreasury address\r\n        @param _initialOwner address\r\n        @return _treasury address\r\n        @return _bond address\r\n     */\r\n    function createBond(address _payoutToken, address _principleToken, address _customTreasury, address _initialOwner, uint[] calldata _tierCeilings, uint[] calldata _fees ) external onlyPolicy() returns(address _treasury, address _bond) {\r\n\r\n        CustomBond bond = new CustomBond(_customTreasury, _payoutToken, _principleToken, _customTreasury, olumpusProSubsidyRouter, _initialOwner, olympusDAO, _tierCeilings, _fees);\r\n\r\n        return IOlympusProFactoryStorage(olympusProFactoryStorage).pushBond(\r\n            _payoutToken, _principleToken, _customTreasury, address(bond), _initialOwner, _tierCeilings, _fees\r\n        );\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_olympusTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_olympusProFactoryStorage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_olumpusProSubsidyRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_olympusDAO\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payoutToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principleToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_customTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tierCeilings\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fees\",\"type\":\"uint256[]\"}],\"name\":\"createBond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bond\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payoutToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principleToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tierCeilings\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fees\",\"type\":\"uint256[]\"}],\"name\":\"createBondAndTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bond\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"olumpusProSubsidyRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"olympusDAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"olympusProFactoryStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"olympusTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferManagment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OlympusProFactory","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000031f8cc382c9898b273eff4e0b7626a6987c846e80000000000000000000000006828d71014d797533c3b49b6990ca1781656b71f00000000000000000000000097fac4ea361338eab5c89792ee196da8712c9a4a000000000000000000000000245cc372c84b3645bf0ffe6538620b04a217988b","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bb016eec3b27d8efb60408b613895988bcb7d6fc22b8ae9c666099d24574264d"}]}