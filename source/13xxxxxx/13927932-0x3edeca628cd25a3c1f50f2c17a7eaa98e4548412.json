{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n//............................................................................................\r\n//.BBBBBBBBBB..BIIII....GGGGGGG......... BBBBBBBBB......AAAAA.....NNNN...NNNN.....GGGGGGG.....\r\n//.BBBBBBBBBBB.BIIII..GGGGGGGGGG........ BBBBBBBBBB.....AAAAA.....NNNNN..NNNN...GGGGGGGGGG....\r\n//.BBBBBBBBBBB.BIIII.GGGGGGGGGGGG....... BBBBBBBBBB....AAAAAA.....NNNNN..NNNN..GGGGGGGGGGGG...\r\n//.BBBB...BBBB.BIIII.GGGGG..GGGGG....... BBB...BBBB....AAAAAAA....NNNNNN.NNNN..GGGGG..GGGGG...\r\n//.BBBB...BBBB.BIIIIIGGGG....GGG........ BBB...BBBB...AAAAAAAA....NNNNNN.NNNN.NGGGG....GGG....\r\n//.BBBBBBBBBBB.BIIIIIGGG................ BBBBBBBBBB...AAAAAAAA....NNNNNNNNNNN.NGGG............\r\n//.BBBBBBBBBB..BIIIIIGGG..GGGGGGGG...... BBBBBBBBB....AAAA.AAAA...NNNNNNNNNNN.NGGG..GGGGGGGG..\r\n//.BBBBBBBBBBB.BIIIIIGGG..GGGGGGGG...... BBBBBBBBBB..BAAAAAAAAA...NNNNNNNNNNN.NGGG..GGGGGGGG..\r\n//.BBBB....BBBBBIIIIIGGGG.GGGGGGGG...... BBB....BBBB.BAAAAAAAAAA..NNNNNNNNNNN.NGGGG.GGGGGGGG..\r\n//.BBBB....BBBBBIIII.GGGGG....GGGG...... BBB....BBBB.BAAAAAAAAAA..NNNN.NNNNNN..GGGGG....GGGG..\r\n//.BBBBBBBBBBBBBIIII.GGGGGGGGGGGG....... BBBBBBBBBBBBBAA....AAAA..NNNN..NNNNN..GGGGGGGGGGGG...\r\n//.BBBBBBBBBBB.BIIII..GGGGGGGGGG........ BBBBBBBBBB.BBAA.....AAAA.NNNN..NNNNN...GGGGGGGGGG....\r\n//.BBBBBBBBBB..BIIII....GGGGGGG......... BBBBBBBBB.BBBAA.....AAAA.NNNN...NNNN.....GGGGGGG.....\r\n//............................................................................................\r\n\r\n/*\r\n* MARSX Token - www.marsxtoken.com - First Multiplanetary Crypto\r\n* Main Staking Contract Of KOSMOS\r\n* www.kosmos.marsxtoken.com\r\n* Developed with love by MarXians\r\n*/\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IBigBang{\r\n    \r\n      /** @dev adding a new stiaking pool\r\n     * @param _stakingToken: token to be used for staking\r\n     * @param _rewardsToken token to be used for rewards\r\n     * @param _tier1Fee Fee tier 1\r\n     * @param _tier2Fee Fee tier 2\r\n     * @param _tier3Fee Fee tier 3\r\n     * @param _tier4Fee Fee tier 4\r\n     * @param _tier5Fee Fee tier 5\r\n     * @param _uom: \r\n         // 0: month\r\n         // 1: week\r\n         // 2: day\r\n         // 3: hour\r\n         // 4: minute\r\n     * @param _multiplier: multiplier\r\n     */\r\n    \r\n    function addPool  (\r\n        address _stakingToken,\r\n        address _rewardsToken,\r\n        uint256 _tier1Fee,\r\n        uint256 _tier2Fee,\r\n        uint256 _tier3Fee,\r\n        uint256 _tier4Fee,\r\n        uint256 _tier5Fee,\r\n        uint256 _uom,\r\n        uint256 _multiplier\r\n        ) external;\r\n        \r\n     /**\r\n     * @dev check how many pools have been created.\r\n     * Can only be called by the current owner.\r\n     */\r\n     function poolLength() external view returns (uint256);\r\n    \r\n    /* @dev check total rewards in the pool\r\n     * @param _pid of the pool\r\n     */\r\n\r\n    function totalRewardsInThePool(uint256 _pid, address _poolAddress) external view returns (uint256);\r\n\r\n    \r\n    /* @dev add rewards to the pool\r\n     * @param _pid of the pool\r\n     */\r\n    function addRewardsToThePool(uint256 _pid, address _poolAddress, uint256 _amount) external;\r\n\r\n    /** @dev stake funds into the contract\r\n     *@param _pid id of the pool\r\n     *@param _address address of the user\r\n     *@param _dValue value of tokens that the msg.sender wants to deposit\r\n     *@param _tier days msg.sender wants to deposit the token for\r\n     \r\n     */\r\n    function stake(uint256 _pid, address _address, address _poolAddress, uint256 _dValue, uint256 _tier) external;\r\n    \r\n    /** @dev withdrawal funds out of pool\r\n     * @param _pid id of the pool\r\n     * @param _address address of the user\r\n     * @param wdValue amount to withdraw\r\n     */\r\n    function unstake(uint256 _pid, address _address, uint256 wdValue) external;\r\n    \r\n     /** @dev claim rewards out of pool\r\n     * @param _address of the user\r\n     * @param _pid of the pool\r\n     */\r\n    \r\n    function claimRewards(uint256 _pid, address _address) external;\r\n    \r\n    /** @dev retreive current state of users funds\r\n     * @param _address of the user\r\n     * @param _pid of the pool\r\n     * @return array of values describing the current state of user\r\n     * index 0: total staked amount \r\n     * index 1: remaining days for getting rewards\r\n     * index 2: pending Rewards\r\n     * index 3: tierFee (apy)\r\n     */\r\n   function getState(uint256 _pid, address _address) external view returns (uint256[] memory);\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/* @title Big Bang Contract\r\n * Open Zeppelin Pausable is Ownable.  contains address owner */\r\ncontract BigBang is Pausable, Ownable {\r\n    using SafeMath for uint256;\r\n  \r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        address stakingToken;                   // Address of staking token contract.\r\n        address rewardsToken;                   // Address of rewards token contract.\r\n        uint256 tier1Fee;                       // TIER1Fee: uint representing the rewards rate (e.g. 5 stands for 0.005 -> 0.5%)\r\n        uint256 tier2Fee;                       // TIER2Fee: uint representing the rewards rate (e.g. 5  stands for 0.005 -> 0.5%)\r\n        uint256 tier3Fee;                       // TIER3Fee: uint representing the rewards rate (e.g. 5  stands for 0.005 -> 0.5%)\r\n        uint256 tier4Fee;                       // TIER4Fee: uint representing the rewards rate (e.g. 5  stands for 0.005 -> 0.5%)\r\n        uint256 tier5Fee;                       // TIER5Fee: uint representing the rewards rate (e.g. 5  stands for 0.005 -> 0.5%)\r\n        uint256 multiplier;                     // 1 or 10 (1 month)\r\n        uint256  uom;                           // unit of measure: \r\n                                                   // 0: month\r\n                                                   // 1: week\r\n                                                   // 2: day\r\n                                                   // 3: hour\r\n                                                   // 4: minute\r\n        uint256 totalDeposited;                 // Total deposits of the stake contract\r\n        uint256 totalRewards;                   // Total deposits of the rewards contract\r\n        uint256 totalRewardsDebt;               // Total debt towards the stakers\r\n    }\r\n    \r\n  \r\n\r\n   /** @dev Info of each user. */\r\n    struct UserInfo {\r\n        uint256 amount;     // How many Staking tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        uint256 endOfStake; // Date when the rewards can be claimed\r\n        uint256 apy;        // APY\r\n        /*\r\n        We do some fancy math here. Basically, any point in time, the amount of rewards\r\n        entitled to a user but is pending to be distributed is:\r\n        \r\n        user.rewardDebt = (user.amount * pool.accCakePerShare)  \r\n        \r\n        */\r\n    }\r\n\r\n\r\n    /** @dev Info of each user that stakes LP tokens.*/\r\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\r\n    /** @dev Info of each pool. */\r\n    PoolInfo[] public poolInfo;\r\n\r\n\r\n    /** @dev notify that StakeContract address has been changed\r\n     * @param oldSC old address of the staking contract\r\n     * @param newSC new address of the staking contract\r\n     */\r\n    event NotifyNewStakingContract(address oldSC, address newSC);\r\n\r\n      /** @dev notify that StakeContract address has been changed\r\n     * @param oldRC old address of the rewards contract\r\n     * @param newRC new address of the rewards contract\r\n     */\r\n    event NotifyNewRewardsContract(address oldRC, address newRC);\r\n\r\n    /** @dev trigger notification of deposits\r\n     * @param pid           pid of the pool\r\n     * @param sender        sender of transaction\r\n     * @param amount        amount of staked tokens\r\n     */\r\n    event NotifyStake(uint256 pid, address sender, uint256 amount);\r\n\r\n    /** @dev trigger notification of staked amount\r\n     * @param pid           pid of the pool\r\n     * @param sender        sender of transaction\r\n     * @param amount        amount of withdrawal tokens\r\n     */\r\n    \r\n    event NotifyUnstake(\r\n        uint256 pid,\r\n        address sender,\r\n        uint256 amount\r\n    );\r\n\r\n    /** @dev trigger notification of withdrawal\r\n     * @param pid               pid of the pool\r\n     * @param sender            address of msg.sender\r\n     * @param rewardAmount      users final rewards withdrawn\r\n     */\r\n    event NotifyRewardClaimed(\r\n        uint256 pid, \r\n        address sender, \r\n        uint256 rewardAmount);\r\n\r\n    /** @dev trigger notification of withdrawal\r\n     * @param pid               pid of the pool\r\n     * @param rewardAmount      users final rewards withdrawn\r\n     */\r\n    event NotifyRewardAdded(\r\n        uint256 pid, \r\n        uint256 rewardAmount);\r\n\r\n\r\n    /** @dev contract constructor\r\n     */\r\n    constructor () {}\r\n        \r\n    /************************ PUBLIC Queries **********************************/\r\n    \r\n    /** @dev check total rewards in the pool\r\n     * @param _pid of the pool\r\n     * @param _poolAddress address of the pool\r\n     */\r\n\r\n    function totalRewardsInThePool(uint256 _pid, address _poolAddress) public view returns (uint256){\r\n        // Retrieve Pool information\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        return ERC20(pool.rewardsToken).balanceOf(_poolAddress);\r\n        }\r\n\r\n    /** @dev check if user has already staked something\r\n     * @param _pid of the pool\r\n     * @param _address of the user\r\n     */\r\n    function isAlreadyUser(uint256 _pid, address _address ) public view returns (uint256) {\r\n        UserInfo storage user = userInfo[_pid][_address];\r\n        uint256 isUser = 0;\r\n        if (user.amount > 0)\r\n        {\r\n            isUser = 1;\r\n        }\r\n        return isUser;\r\n        \r\n    }\r\n\r\n    /** @dev check if the pool is open for staking: the total rewardsDebt of the users does not exceed the total rewards of the pool.\r\n     * @param _pid of the pool\r\n     */\r\n    function isPoolOpen(uint256 _pid) public view returns (bool) {\r\n        // Retrieve Pool information\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        // Check if the total rewards in the pool are minor than the debt that the pool has towards the stakers\r\n        if (pool.totalRewards < pool.totalRewardsDebt)\r\n        {\r\n            // The pool is closed for staking\r\n            return false;\r\n        }\r\n        // The pool is open for staking\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev check how many pools have been created.\r\n     */\r\n     function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    \r\n    /**@dev retrieve amount deposited by the msg.sender\r\n     * @param _address of the user\r\n     * @param _pid of the pool\r\n     * @return uint\r\n     */\r\n    function getBalanceOfDeposit(uint256 _pid, address _address)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        UserInfo storage user = userInfo[_pid][_address];\r\n        return user.amount;\r\n    }\r\n    \r\n\r\n    /** @dev retreive current state of users funds\r\n     * @param _address of the user\r\n     * @param _pid of the pool\r\n     * @return array of values describing the current state of user\r\n     */\r\n    function getState(uint256 _pid,  address _address) external view returns (uint256[] memory) {\r\n        UserInfo storage user = userInfo[_pid][_address];\r\n        uint256[] memory state = new uint256[](5);\r\n        state[0] = user.amount;                                     // total staked amount for getting rewards\r\n        state[1] = user.endOfStake;                                 // remaining days for getting rewards\r\n        state[2] = claimableRewards(_pid, _address);                // claimable Rewards\r\n        state[3] = user.apy;                                        // apy\r\n        state[4] = user.rewardDebt;                                 // total reward debt\r\n\r\n        return state;\r\n    }\r\n\r\n\r\n    /************************ USER MANAGEMENT **********************************/\r\n\r\n    /************************ POOL MANAGEMENT **********************************/\r\n    \r\n     /** @dev adding a new stiaking pool\r\n     * @param _stakingToken: token to be used for staking\r\n     * @param _rewardsToken token to be used for rewards\r\n     * @param _tier1Fee Fee tier 1\r\n     * @param _tier2Fee Fee tier 2\r\n     * @param _tier3Fee Fee tier 3\r\n     * @param _tier4Fee Fee tier 4\r\n     * @param _tier5Fee Fee tier 5\r\n     */\r\n    \r\n    \r\n    function addPool  (\r\n        address _stakingToken,\r\n        address _rewardsToken,\r\n        uint256 _tier1Fee,\r\n        uint256 _tier2Fee,\r\n        uint256 _tier3Fee,\r\n        uint256 _tier4Fee,\r\n        uint256 _tier5Fee, \r\n        uint256 _uom,\r\n        uint256 _multiplier\r\n        ) external \r\n    {\r\n            poolInfo.push(PoolInfo({\r\n            stakingToken:       _stakingToken,\r\n            rewardsToken:       _rewardsToken,\r\n            tier1Fee:           _tier1Fee,\r\n            tier2Fee:           _tier2Fee,\r\n            tier3Fee:           _tier3Fee,\r\n            tier4Fee:           _tier4Fee,\r\n            tier5Fee:           _tier5Fee,\r\n            uom:                _uom,\r\n            multiplier:         _multiplier,\r\n            totalDeposited:0,\r\n            totalRewards:0,\r\n            totalRewardsDebt:0\r\n        })\r\n        );\r\n    }\r\n    \r\n\r\n    /** @dev set staking contract address\r\n     * @param _pid: pid of the pool\r\n     * @param _stakeContract new address to change staking contract / mechanism\r\n     */\r\n    function setStakeContract(uint256 _pid, address _stakeContract) external onlyOwner {\r\n        require(_stakeContract != address(0));\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        address oldSC = pool.stakingToken;\r\n        pool.stakingToken = _stakeContract;\r\n        emit NotifyNewStakingContract(oldSC, _stakeContract);\r\n    }\r\n\r\n    /** @dev set rewards contract address\r\n     ** @pid pid of the pool\r\n     * @param _rewardContract new address to change  contract / mechanism\r\n     */\r\n    function setRewardsContract(uint256 _pid, address _rewardContract) external onlyOwner {\r\n        require(_rewardContract != address(0));\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        address oldRC = pool.rewardsToken;\r\n        pool.rewardsToken = _rewardContract;\r\n        emit NotifyNewRewardsContract(oldRC, _rewardContract);\r\n    }\r\n\r\n    /** @dev add rewards amount to the pool\r\n     ** @pid pid of the pool\r\n     * @param _pid pid of the pool \r\n     * @param _amount of rewards token\r\n     */\r\n    function addRewardsToThePool(uint256 _pid, address _poolAddress, uint256 _amount) external {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        require(totalRewardsInThePool(_pid, _poolAddress) >= _amount, \r\n                \"Insufficient Rewards token for the pool\"\r\n        );\r\n        pool.totalRewards += _amount;\r\n        emit NotifyRewardAdded(_pid, _amount);\r\n    }\r\n\r\n  \r\n    /************************ POOL MANAGEMENT **********************************/\r\n\r\n    /************************ POOL MANAGEMENT INTERNAL **********************************/\r\n\r\n    /** @dev adding a new user to the staking pool\r\n    * @param _pid: pid of the pool\r\n    * @param _user: address of the user\r\n    * @param _amount: deposited amount\r\n    * @param _endOfStake: date of the end of stake\r\n    * @param _rewardDebt: rewardDebt\r\n    */\r\n    \r\n    function addUserToPool(\r\n        uint256 _pid,\r\n        address _user,\r\n        uint256 _amount,\r\n        uint256 _endOfStake,\r\n        uint256 _apy,\r\n        uint256 _rewardDebt\r\n    ) internal {\r\n        UserInfo memory user = UserInfo({\r\n            amount: _amount,\r\n            rewardDebt: _rewardDebt,\r\n            endOfStake: _endOfStake,\r\n            apy: _apy\r\n        });\r\n        userInfo[_pid][_user] = user;\r\n    }\r\n    \r\n     /** @dev remove user from the staking pool*/\r\n\r\n    function removeUserFromPool(\r\n        uint256 _pid,\r\n        address _user\r\n    ) internal {\r\n        delete userInfo[_pid][_user];\r\n    }\r\n\r\n    /** @dev calculate rewards for the user\r\n     * @param _pid pid of the pool\r\n     * @param _apy of the user\r\n     * @param _amount staked by the user\r\n     * @return uint that is the value of the rewards \r\n    */\r\n\r\n    function calculateRewards(uint256 _pid, uint256 _apy, uint256 _amount) public view returns(uint256){\r\n        // retrieve pool information\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n        uint256 rewards= _amount.div(pool.totalRewards).mul(_apy).div(1000);\r\n        return rewards;\r\n    }\r\n\r\n    /************************ POOL MANAGEMENT INTERNAL **********************************/\r\n\r\n\r\n    /************************ PUBLIC POOL ACTIONS **********************************/\r\n\r\n    /** @dev deposit funds to the contract\r\n     *@param _dValue value of tokens that the msg.sender wants to deposit\r\n     *@param _tier days msg.sender wants to deposit the token for\r\n     *@param _pid pool\r\n     \r\n     */\r\n\r\n    function stake(uint256 _pid, address _address, address _poolAddress, uint256 _dValue, uint256 _tier) external whenNotPaused {\r\n        // require the user to be a new user\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        uint256 endOfStake;\r\n        uint256 apy;\r\n        uint256 totalSupplyRewardsToken = ERC20(pool.rewardsToken).totalSupply();\r\n        uint256 totalSupplyStakingToken = ERC20(pool.stakingToken).totalSupply();\r\n\r\n        // user can't have more than 1 position in the pool\r\n        require(\r\n            isAlreadyUser(_pid, _address) == 0,\r\n            \"User has already a position in the pool\"\r\n        );\r\n\r\n        // pool has to be opened\r\n        require (\r\n            isPoolOpen(_pid) == true,\r\n            \"The pool is closed: no enough rewards\"\r\n        );\r\n\r\n        // require the user to have enough tokens to be deposited\r\n        require(\r\n            ERC20(pool.stakingToken).balanceOf(_address) >= _dValue,\r\n            \"The user does not have enough tokens to deposit\"\r\n        );\r\n\r\n        // increase the total deposited variable of the value of tokens transferred as parameter\r\n        pool.totalDeposited = pool.totalDeposited.add(_dValue);\r\n\r\n        //calculate tier % for the user\r\n        if (_tier == 1) {\r\n            apy = pool.tier1Fee;\r\n        }\r\n        if (_tier == 2) {\r\n            apy = pool.tier2Fee;\r\n        }\r\n        if (_tier == 3) {\r\n            apy = pool.tier3Fee;\r\n        }\r\n        if (_tier == 4) {\r\n            apy = pool.tier4Fee;\r\n        }\r\n        if (_tier == 5) {\r\n            apy = pool.tier5Fee;\r\n        }\r\n\r\n        //calculate end of stake\r\n        \r\n        if(pool.uom == 0) {\r\n           endOfStake = block.timestamp + (_tier * pool.multiplier *  30 days);    \r\n        }\r\n        if(pool.uom == 1) {\r\n            endOfStake = block.timestamp + (_tier * pool.multiplier * 1 weeks);    \r\n        }\r\n        if(pool.uom == 2) {\r\n            endOfStake = block.timestamp + (_tier * pool.multiplier * 1 days);        \r\n        }\r\n        if(pool.uom == 3) {\r\n            endOfStake = block.timestamp + (_tier * pool.multiplier * 1 hours);    \r\n        }\r\n        if(pool.uom == 4) {\r\n            endOfStake = block.timestamp + (_tier * pool.multiplier * 1 minutes);    \r\n        }\r\n        \r\n        \r\n        // calculate rewards\r\n        uint256 weigthedRatio = totalSupplyRewardsToken / totalSupplyStakingToken;\r\n        uint256 rewards= _dValue.mul(apy).div(1000).mul(weigthedRatio);\r\n\r\n        // update the total reward debt of the pool\r\n        pool.totalRewardsDebt = pool.totalRewardsDebt.add(rewards);\r\n\r\n        // add  user in the mapping array\r\n        addUserToPool(\r\n            _pid\r\n            ,_address\r\n            ,_dValue\r\n            ,endOfStake\r\n            ,apy\r\n            ,rewards\r\n        );\r\n\r\n        // transfer the tokens from the ERC20 smart contract to this pool address\r\n        ERC20(pool.stakingToken).transferFrom(_address , _poolAddress, _dValue);\r\n        // emit notify stake event\r\n        emit NotifyStake(_pid, _address, _dValue);\r\n    }\r\n\r\n    /** @dev withdrawal funds out of pool\r\n     * @param _pid pid of the pool\r\n     * @param _address of the user\r\n     * @param wdValue amount to unstake\r\n     */\r\n    function unstake(uint256 _pid, address _address, uint256 wdValue) external whenNotPaused {\r\n        \r\n        // get pool information\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo memory user = userInfo[_pid][_address];\r\n        // require the amount to withdraw to be > 0\r\n        require(wdValue > 0);\r\n        // require the sender to have a deposited balance >= at the withdraw requested amount\r\n        require(user.amount >= wdValue);\r\n        \r\n        // transfer the withdraw requested amount to the spender\r\n        ERC20(pool.stakingToken).transferFrom(msg.sender, _address, wdValue);\r\n\r\n        // emit new event\r\n        emit NotifyUnstake(\r\n            _pid,\r\n            _address,\r\n            wdValue\r\n        );\r\n        \r\n        // calculate new deposited amount\r\n        user.amount.sub(wdValue);\r\n\r\n        // remove user from the mapping array\r\n        removeUserFromPool(_pid, _address);\r\n        \r\n        // redute the deposited balance by the withdraw requested amount\r\n        pool.totalDeposited = pool.totalDeposited.sub(wdValue);\r\n        \r\n    }\r\n\r\n    /** @dev calculate rewards for the user\r\n     * @param _address of the user\r\n     * @return uint that is the value of the rewards\r\n     */\r\n\r\n    function claimableRewards(uint256 _pid, address _address)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        \r\n        UserInfo storage user = userInfo[_pid][_address];\r\n        \r\n        uint256 rewards = 0;\r\n        \r\n        \r\n        // check if the staking period is over\r\n        if (block.timestamp > user.endOfStake) {\r\n           rewards = user.rewardDebt;\r\n            \r\n        }\r\n        // return the rewards balance\r\n        return rewards;\r\n    }\r\n\r\n    /** @dev claim rewards out of pool\r\n     * @param _address of the user\r\n     * @param _pid of the pool\r\n     */\r\n    \r\n    function claimRewards(uint256 _pid, address _address) external whenNotPaused {\r\n        // add a require\r\n        // get user information\r\n        UserInfo storage user = userInfo[_pid][_address];\r\n        uint256 prevRewardDebt = user.rewardDebt;\r\n        uint256 newRewardDebt;\r\n        \r\n        // get pool information\r\n        PoolInfo storage pool = poolInfo[_pid]; \r\n        \r\n        // transfer the rewards\r\n        ERC20(pool.rewardsToken).transferFrom(msg.sender, _address,claimableRewards(_pid, _address));\r\n        emit NotifyRewardClaimed(_pid, _address, claimableRewards(_pid, _address));\r\n        \r\n        // update the user information about the rewardDebt\r\n        newRewardDebt = prevRewardDebt - claimableRewards(_pid, _address);\r\n        user.rewardDebt = newRewardDebt;\r\n        \r\n        // update pool information\r\n        pool.totalRewardsDebt -= prevRewardDebt;\r\n    }\r\n    \r\n    /************************ PUBLIC POOL ACTIONS **********************************/\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRC\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRC\",\"type\":\"address\"}],\"name\":\"NotifyNewRewardsContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldSC\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSC\",\"type\":\"address\"}],\"name\":\"NotifyNewStakingContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"NotifyRewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"NotifyRewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotifyStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotifyUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tier1Fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier2Fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier3Fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier4Fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier5Fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_uom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addRewardsToThePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"claimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBalanceOfDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAlreadyUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"isPoolOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tier1Fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier2Fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier3Fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier4Fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier5Fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardsDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardContract\",\"type\":\"address\"}],\"name\":\"setRewardsContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stakeContract\",\"type\":\"address\"}],\"name\":\"setStakeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"totalRewardsInThePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wdValue\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endOfStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BigBang","CompilerVersion":"v0.8.11+commit.d7f03943","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d9ee5894389b678d855a79036d648f3807ace8ef950c62b4598ba437f5cc98e2"}]}