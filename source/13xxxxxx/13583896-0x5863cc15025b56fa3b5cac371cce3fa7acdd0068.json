{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/test/RebalanceBot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport '../interfaces/IxAssetCLR.sol';\\nimport '../interfaces/IxTokenManager.sol';\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * CLR rebalance bot which performs adminSwap and adminBurn / adminMint\\n * in order to bring tokens in the CLR position back to a certain ratio\\n */\\ncontract RebalanceBot is Ownable {\\n    IxTokenManager xTokenManager = IxTokenManager(0xfA3CaAb19E6913b6aAbdda4E27ac413e96EaB0Ca);\\n\\n    /**\\n     * Performs a rebalance for a given CLR instance which swaps underlying for xAsset and burns it\\n     * Used to bring token ratio in a given position back to normal using xAsset burn method\\n     * Groups Unstake, Swap and Burn in one transaction\\n     * @param xAssetCLR CLR instance\\n     * @param t0UnstakeAmt amount of token 0 to unstake\\n     * @param t1UnstakeAmt amount of token 1 to unstake\\n     * @param swapAmount amount of underlying asset to swap for xAsset\\n     * @param burnAmount amount of xAsset to burn\\n     * @param t0IsxAsset true if token 0 is the xAsset, false otherwise\\n     */\\n    function swapAndBurnRebalance(IxAssetCLR xAssetCLR, uint256 t0UnstakeAmt, uint256 t1UnstakeAmt, \\n                            uint256 swapAmount, uint256 burnAmount, bool t0IsxAsset) public onlyOwnerOrManager {\\n        xAssetCLR.adminUnstake(t0UnstakeAmt, t1UnstakeAmt);\\n        xAssetCLR.adminSwap(swapAmount, !t0IsxAsset);\\n        xAssetCLR.adminBurn(burnAmount, t0IsxAsset);\\n    }\\n\\n    /**\\n     * Performs a rebalance for a given CLR instance which swaps xAsset for underlying and mints more xAsset\\n     * Used to bring token ratio in a given position back to normal using xAsset mint method\\n     * Groups Unstake, Swap and Mint in one transaction\\n     * @param xAssetCLR CLR instance\\n     * @param t0UnstakeAmt amount of token 0 to unstake\\n     * @param t1UnstakeAmt amount of token 1 to unstake\\n     * @param swapAmount amount of xAsset to swap for underlying asset\\n     * @param mintAmount amount of underlying asset to mint with\\n     * @param t0IsxAsset true if token 0 is the xAsset, false otherwise\\n     */\\n    function swapAndMintRebalance(IxAssetCLR xAssetCLR, uint256 t0UnstakeAmt, uint256 t1UnstakeAmt, \\n                            uint256 swapAmount, uint256 mintAmount, bool t0IsxAsset) public onlyOwnerOrManager {\\n        xAssetCLR.adminUnstake(t0UnstakeAmt, t1UnstakeAmt);\\n        xAssetCLR.adminSwap(swapAmount, t0IsxAsset);\\n        xAssetCLR.adminMint(mintAmount, t0IsxAsset);\\n    }\\n\\n    modifier onlyOwnerOrManager {\\n        require(\\n            msg.sender == owner() ||\\n            xTokenManager.isManager(msg.sender, address(this)),\\n            \\\"Function may be called only by owner or manager\\\"\\n        );\\n        _;\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IxAssetCLR.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * xAssetCLR Interface\\n */\\ninterface IxAssetCLR is IERC20 {\\n    function adminRebalance() external;\\n\\n    function adminStake(uint256 amount0, uint256 amount1) external;\\n\\n    function adminSwap(uint256 amount, bool _0for1) external;\\n\\n    function adminSwapOneInch(\\n        uint256 minReturn,\\n        bool _0for1,\\n        bytes memory _oneInchData\\n    ) external;\\n\\n    function adminUnstake(uint256 amount0, uint256 amount1) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function calculateAmountsMintedSingleToken(uint8 inputAsset, uint256 amount)\\n        external\\n        view\\n        returns (uint256 amount0Minted, uint256 amount1Minted);\\n\\n    function calculateMintAmount(uint256 _amount, uint256 totalSupply)\\n        external\\n        view\\n        returns (uint256 mintAmount);\\n\\n    function calculatePoolMintedAmounts(uint256 amount0, uint256 amount1)\\n        external\\n        view\\n        returns (uint256 amount0Minted, uint256 amount1Minted);\\n\\n    function changePool(address _poolAddress, uint24 _poolFee) external;\\n\\n    function collect()\\n        external\\n        returns (uint256 collected0, uint256 collected1);\\n\\n    function collectAndRestake() external;\\n\\n    function decimals() external view returns (uint8);\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        external\\n        returns (bool);\\n\\n    function getAmountInAsset0Terms(uint256 amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAmountInAsset1Terms(uint256 amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAmountsForLiquidity(uint128 liquidity)\\n        external\\n        view\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function getAsset0Price() external view returns (int128);\\n\\n    function getAsset1Price() external view returns (int128);\\n\\n    function getBufferBalance() external view returns (uint256);\\n\\n    function getBufferToken0Balance() external view returns (uint256 amount0);\\n\\n    function getBufferToken1Balance() external view returns (uint256 amount1);\\n\\n    function getBufferTokenBalance()\\n        external\\n        view\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function getLiquidityForAmounts(uint256 amount0, uint256 amount1)\\n        external\\n        view\\n        returns (uint128 liquidity);\\n\\n    function getNav() external view returns (uint256);\\n\\n    function getPositionLiquidity() external view returns (uint128 liquidity);\\n\\n    function getStakedBalance() external view returns (uint256);\\n\\n    function getStakedTokenBalance()\\n        external\\n        view\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function getTicks() external view returns (int24 tick0, int24 tick1);\\n\\n    function getTotalLiquidity() external view returns (uint256 amount);\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        external\\n        returns (bool);\\n\\n    function initialize(\\n        string memory _symbol,\\n        int24 _tickLower,\\n        int24 _tickUpper,\\n        address _token0,\\n        address _token1,\\n        UniswapContracts memory contracts,\\n        // Staking parameters\\n        address _rewardsToken,\\n        address _rewardEscrow,\\n        bool _rewardsAreEscrowed\\n    ) external;\\n\\n    function lastLockedBlock(address) external view returns (uint256);\\n\\n    function mint(uint8 inputAsset, uint256 amount) external;\\n\\n    function mintInitial(uint256 amount0, uint256 amount1) external;\\n\\n    function name() external view returns (string memory);\\n\\n    function owner() external view returns (address);\\n\\n    function pauseContract() external returns (bool);\\n\\n    function paused() external view returns (bool);\\n\\n    function poolFee() external view returns (uint24);\\n\\n    function renounceOwnership() external;\\n\\n    function resetTwap() external;\\n\\n    function setMaxTwapDeviationDivisor(uint256 newDeviationDivisor) external;\\n\\n    function setTwapPeriod(uint32 newPeriod) external;\\n\\n    function symbol() external view returns (string memory);\\n\\n    function token0DecimalMultiplier() external view returns (uint256);\\n\\n    function token0Decimals() external view returns (uint8);\\n\\n    function token1DecimalMultiplier() external view returns (uint256);\\n\\n    function token1Decimals() external view returns (uint8);\\n\\n    function tokenDiffDecimalMultiplier() external view returns (uint256);\\n\\n    function tokenId() external view returns (uint256);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function adminMint(uint256 amount, bool isToken0) external;\\n\\n    function adminBurn(uint256 amount, bool isToken0) external;\\n    \\n    function adminApprove(bool isToken0) external;\\n\\n    struct UniswapContracts {\\n        address pool;\\n        address router;\\n        address quoter;\\n        address positionManager;\\n    }\\n\\n    function unpauseContract() external returns (bool);\\n\\n    function withdrawToken(address token, address receiver) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IxTokenManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface IxTokenManager {\\n    /**\\n     * @dev Add a manager to an xAsset fund\\n     */\\n    function addManager(address manager, address fund) external;\\n\\n    /**\\n     * @dev Remove a manager from an xAsset fund\\n     */\\n    function removeManager(address manager, address fund) external;\\n\\n    /**\\n     * @dev Check if an address is a manager for a fund\\n     */\\n    function isManager(address manager, address fund)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Set revenue controller\\n     */\\n    function setRevenueController(address controller) external;\\n\\n    /**\\n     * @dev Check if address is revenue controller\\n     */\\n    function isRevenueController(address caller) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IxAssetCLR\",\"name\":\"xAssetCLR\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"t0UnstakeAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"t1UnstakeAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"t0IsxAsset\",\"type\":\"bool\"}],\"name\":\"swapAndBurnRebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IxAssetCLR\",\"name\":\"xAssetCLR\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"t0UnstakeAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"t1UnstakeAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"t0IsxAsset\",\"type\":\"bool\"}],\"name\":\"swapAndMintRebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RebalanceBot","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}