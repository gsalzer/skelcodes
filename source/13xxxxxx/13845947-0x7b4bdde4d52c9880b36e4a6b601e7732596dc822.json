{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BarnyardFashionistasStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\n//import \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n//import \\\"./SignedMinting.sol\\\";\\n\\ninterface NftContract {\\n    function mint(address) external;\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\\ncontract BarnyardFashionistasStore is ReentrancyGuard, Ownable {\\n//contract BarnyardFashionistasStore is EIP712, SignedMinting, Ownable {\\n    NftContract public bfNft =\\n        NftContract(0xBAB7dF6D042F4b83b62070b670Da929b62eD22d8);\\n    \\n    address private constant core1Address =\\n        0x3002E0E7Db1FB99072516033b8dc2BE9897178bA;\\n    uint256 private constant core1Shares = 84650;\\n\\n    address private constant core2Address =\\n        0x452d40db156034223e8865F93d6a532aE62c4A99; \\n    uint256 private constant core2Shares = 5000;\\n\\n    address private constant core3Address =\\n        0xEbCEe6204eeEEf21e406C0A75734E70f342914e0; \\n    uint256 private constant core3Shares = 5000;\\n\\n    address private constant core4Address =\\n        0xCa93378a4d2c9217A1f6C2D9aB50B791a4043A87; \\n    uint256 private constant core4Shares = 3000;\\n\\n    address private constant core5Address =\\n        0xa808208Bb50e2395c63ce3fd41990d2E009E3053; \\n    uint256 private constant core5Shares = 750;\\n\\n    address private constant core6Address =\\n        0x1996FabEC51878e3Ff99cd07c6CaC9Ac668A22fD; \\n    uint256 private constant core6Shares = 600;\\n\\n    address private constant core7Address =\\n        0x30734A0adeCa7e07c3C960587d6502fC5EA0f8df; \\n    uint256 private constant core7Shares = 500;\\n    \\n    address private constant core8Address =\\n        0x74E101B1E67Cd303A3ec896421ceCf894891ac25; \\n    uint256 private constant core8Shares = 500;\\n\\n    \\n\\n    uint256 private constant baseMod = 100000;\\n\\n    /**\\n        Numbers for Barnyard Fashionistas NftContract\\n     */\\n    // uint256 public constant maxFashionistas = 9999;\\n    uint256 public maxFashionistas = 9999;\\n\\n    //whitelist and mints\\n    mapping(address => uint256) private whitelist;    \\n    mapping(address => uint256) private bonusMintAmount;\\n\\n    mapping(address => uint256) private oglist;\\n    mapping(address => uint256) public mintedFashionistasOf;\\n\\n    /**\\n        Team allocated Fashionistas\\n     */\\n    // Fashionistas which is minted by the owner\\n    uint256 public preMintedFashionistas = 0;\\n    // MAX Fashionistas which owner can mint\\n    uint256 public constant maxPreMintFashionistas = 300;\\n\\n\\n    //    Mint counts during presale\\n    uint256 public newlyMintedFashionistasPresale = 0;\\n    \\n    //Tracking Sales After Presale\\n    uint256 public mintedFashionistasAfterPresale = 0;\\n\\n    uint256 public mintedFashionistasBonus = 0;\\n    uint256 public mintedOgClaim = 0;\\n\\n    /**\\n        Pricing & sales\\n     */\\n    uint256 public price = 0.044 ether;\\n    uint256 public maxMintPerTx = 6;\\n\\n    uint256 public whitelistMints = 4;\\n\\n    uint256 public maxMintBonusTx = 2;\\n    uint256 public maxMintBonus = 1;\\n    uint256 public bonusMintsTotal = 500;\\n    uint256 public bonusMintsPresale = 200;\\n\\n    \\n    //    Security\\n\\n  \\n\\n\\n    uint256 public mintedFashionistas = 227;\\n\\n\\n    event SetFashionistasNftContract(address bfNft);\\n\\n    event MintWithWhitelist(address account, uint256 amount, uint256 changes);\\n    event SetRemainingFashionistas(uint256 remainingFashionistas);\\n\\n    event mintFashionistas(address account, uint256 amount);\\n    event Withdraw(address to);\\n\\n\\n    bool public presaleOn = false;\\n    bool public mainSaleOn = false;\\n    bool public bonusSaleOn = false;\\n\\n    // constructor(\\n    //     address signer\\n    // ) \\n    // SignedMinting(signer)\\n    // ReentrancyGuard() \\n    // {\\n    // }\\n\\n    constructor(\\n    ) \\n    ReentrancyGuard() \\n    {\\n    }\\n\\n    modifier mainSaleOpened() {\\n        require( mainSaleOn, \\\"Store is not opened\\\" );\\n\\n        _;\\n    }\\n\\n    modifier presaleOpened() {\\n        require(presaleOn, \\\"Store is not opened for Presale\\\");\\n\\n        _;\\n    }\\n\\n    modifier bonussaleOpened() {\\n        require(bonusSaleOn, \\\"Store is not opened for Presale\\\");\\n\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrTeam() {\\n        require(\\n            core1Address == msg.sender || core2Address == msg.sender || core4Address == msg.sender || owner() == msg.sender,\\n            \\\"caller is neither Team Wallet nor Owner\\\"\\n        );\\n        _;\\n    }\\n\\n    function setPrice(uint256 _newPrice) external onlyOwner {\\n        price = _newPrice;\\n    }\\n\\n    function setMaxBonusTx(uint256 _newtx) external onlyOwner {\\n        maxMintBonusTx = _newtx;\\n    }\\n\\n    function setMaxBonus(uint256 _newbonus) external onlyOwner {\\n        maxMintBonus = _newbonus;\\n    }\\n\\n    function togglePresale() external onlyOwner {\\n        presaleOn = !presaleOn;\\n    }\\n\\n    function toggleMainSale() external onlyOwner {\\n        mainSaleOn = !mainSaleOn;\\n    }\\n    \\n    function toggleBonusSale() external onlyOwner {\\n        bonusSaleOn = !bonusSaleOn;\\n    }\\n\\n    function presaleBalance( address checkAddr ) public view returns(uint256) {\\n        return whitelist[checkAddr];\\n    }\\n\\n    // function setMintingSigner(address _signer)\\n    //     public\\n    //     onlyOwner\\n    // {\\n    //     _setMintingSigner(_signer);\\n    // }\\n\\n\\n    function setFashionistasNftContract(NftContract _bfNft) external onlyOwner {\\n        bfNft = _bfNft;\\n        emit SetFashionistasNftContract(address(_bfNft));\\n    }\\n\\n\\n    // Do not update newlyMintedFashionistas to prevent withdrawal\\n    // This needs to become the owner Free mint function. Ditch the time restrictions?\\n    function preMintFashionistas(address[] memory recipients) external onlyOwner {\\n\\n        uint256 totalRecipients = recipients.length;\\n\\n        require(\\n            totalRecipients > 0,\\n            \\\"Number of recipients must be greater than 0\\\"\\n        );\\n        require(\\n            preMintedFashionistas + totalRecipients <= maxPreMintFashionistas,\\n            \\\"Exceeds max pre-mint Fashionistas\\\"\\n        );\\n\\n        require(\\n            mintedFashionistas + totalRecipients < maxFashionistas,\\n            \\\"Exceeds max Fashionistas\\\"\\n        );\\n\\n        for (uint256 i = 0; i < totalRecipients; i++) {\\n            address to = recipients[i];\\n            require(to != address(0), \\\"receiver can not be empty address\\\");\\n            bfNft.mint(to);\\n        }\\n\\n        preMintedFashionistas += totalRecipients;\\n        mintedFashionistas += totalRecipients;\\n    }\\n\\n\\n\\n\\n    // adds to whitelist with specified amounts\\n    function addToOGlistAmounts(address[] memory _listToAdd, uint256[] memory _amountPerAddress) public onlyOwner {\\n        uint256 totalAddresses = _listToAdd.length;\\n        uint256 totalAmounts = _amountPerAddress.length;\\n\\n        require(totalAddresses == totalAmounts, \\\"Item amounts differ\\\");\\n\\n        for (uint256 i = 0; i < totalAddresses; i++) {\\n          oglist[_listToAdd[i]] = _amountPerAddress[i];\\n        }\\n    }\\n\\n\\n    function ogClaim() public payable presaleOpened\\n        nonReentrant\\n    {\\n        \\n        uint256 _count = oglist[msg.sender];\\n        require(mintedFashionistas + _count <= maxFashionistas, \\\"Max limit\\\");\\n\\n        uint256 _balance = bfNft.balanceOf(msg.sender);\\n\\n        if ( _balance < _count){\\n            _count = _balance;\\n        }\\n\\n        for (uint256 i = 0; i < _count; i++) {\\n          bfNft.mint(msg.sender);\\n        }\\n\\n        mintedOgClaim += _count;\\n        mintedFashionistas += _count;\\n\\n        whitelist[msg.sender] = whitelist[msg.sender] - _count;\\n    }\\n\\n\\n    // adds to claim list with specified amounts\\n    function addToWhitelist(address[] memory _listToAdd) public onlyOwner {\\n        uint256 totalAddresses = _listToAdd.length;\\n    \\n        for (uint256 i = 0; i < totalAddresses; i++) {\\n          whitelist[_listToAdd[i]] = whitelistMints;\\n        }\\n    }\\n\\n\\n    function mintPresale( uint256 _count) public payable presaleOpened\\n        nonReentrant\\n    {\\n        require(_count <= whitelist[msg.sender], \\\"Over Max whitelist\\\"  );\\n        \\n        require(mintedFashionistas + _count <= maxFashionistas, \\\"Max limit\\\");\\n        require(msg.value >= (_count * price ), \\\"Value below price\\\");\\n\\n        for (uint256 i = 0; i < _count; i++) {\\n          bfNft.mint(msg.sender);\\n        }\\n\\n        newlyMintedFashionistasPresale += _count;\\n        mintedFashionistas += _count;\\n\\n        whitelist[msg.sender] = whitelist[msg.sender] - _count;\\n    }\\n\\n    \\n\\n    function bonusMint( uint256 _count) public payable bonussaleOpened\\n        nonReentrant\\n    {\\n        require(presaleOn || mainSaleOn, \\\"a sale must be on\\\");\\n        require(_count <= maxMintBonusTx, \\\"Over MaxTx bonus\\\"  );\\n        require(mintedFashionistasBonus + _count < bonusMintsTotal, \\\"less bonus remaining\\\");\\n        require(bonusMintAmount[msg.sender] + _count <= maxMintBonus);\\n\\n        if (presaleOn) {\\n            require(mintedFashionistasBonus <= bonusMintsPresale, \\\"bonus presale done\\\");\\n\\n            uint256 fashionistaAmount = bfNft.balanceOf(msg.sender);\\n            require(fashionistaAmount > 0, \\\"Fashionista Required\\\");    \\n        }\\n\\n        require(mintedFashionistas + _count <= maxFashionistas, \\\"Max limit\\\");\\n        \\n \\n        for (uint256 i = 0; i < _count; i++) {\\n          bfNft.mint(msg.sender);\\n        }\\n\\n        bonusMintAmount[msg.sender] += _count;\\n        mintedFashionistasBonus += _count;\\n        mintedFashionistas += _count;\\n\\n    }\\n\\n\\n\\n    function mintMainSale(uint256 _amount) external payable mainSaleOpened {\\n   \\n        require(mintedFashionistas + _amount -1 < maxFashionistas, \\\"exceeds max mint\\\");\\n\\n        uint256 totalPrice = price * _amount;\\n        require(totalPrice <= msg.value, \\\"Not enough money\\\");\\n\\n        require(_amount - 1 < maxMintPerTx, \\\"exceed max transaction\\\");\\n\\n        for (uint256 i = 0; i < _amount; i += 1) {\\n            bfNft.mint(msg.sender);\\n        }\\n\\n        mintedFashionistasAfterPresale += _amount;\\n        mintedFashionistas += _amount;\\n\\n        emit mintFashionistas(msg.sender, _amount);\\n    }\\n\\n\\n\\n    function withdrawCore() external onlyOwnerOrTeam {\\n        uint256 balance = address(this).balance;\\n        require(balance > 0);\\n\\n        _splitAll(balance);\\n    }\\n\\n    //  **** ASK HOW MANY CAN DO SAFE\\n    function _splitAll(uint256 _amount) private {\\n        uint256 singleShare = _amount / baseMod;\\n        _withdraw(core1Address, singleShare * core1Shares);\\n        _withdraw(core2Address, singleShare * core2Shares);\\n        _withdraw(core3Address, singleShare * core3Shares);\\n        _withdraw(core4Address, singleShare * core4Shares);\\n        _withdraw(core5Address, singleShare * core5Shares);\\n        _withdraw(core6Address, singleShare * core6Shares);\\n        _withdraw(core7Address, singleShare * core7Shares);\\n        _withdraw(core8Address, singleShare * core8Shares);\\n    }\\n\\n    function withdrawBU() external onlyOwnerOrTeam {\\n        uint256 balance = address(this).balance;\\n        require(balance > 0);\\n\\n        _withdraw(core1Address, balance);\\n    }\\n\\n    function _withdraw(address _address, uint256 _amount) private {\\n        payable(_address).transfer(_amount);\\n    }    \\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"changes\",\"type\":\"uint256\"}],\"name\":\"MintWithWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bfNft\",\"type\":\"address\"}],\"name\":\"SetFashionistasNftContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingFashionistas\",\"type\":\"uint256\"}],\"name\":\"SetRemainingFashionistas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintFashionistas\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_listToAdd\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountPerAddress\",\"type\":\"uint256[]\"}],\"name\":\"addToOGlistAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_listToAdd\",\"type\":\"address[]\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bfNft\",\"outputs\":[{\"internalType\":\"contract NftContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"bonusMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusMintsPresale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusMintsTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusSaleOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainSaleOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFashionistas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintBonusTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintPerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPreMintFashionistas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintMainSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"mintPresale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedFashionistas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedFashionistasAfterPresale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedFashionistasBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintedFashionistasOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedOgClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newlyMintedFashionistasPresale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ogClaim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"preMintFashionistas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preMintedFashionistas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"checkAddr\",\"type\":\"address\"}],\"name\":\"presaleBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract NftContract\",\"name\":\"_bfNft\",\"type\":\"address\"}],\"name\":\"setFashionistasNftContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newbonus\",\"type\":\"uint256\"}],\"name\":\"setMaxBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newtx\",\"type\":\"uint256\"}],\"name\":\"setMaxBonusTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleBonusSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMainSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBU\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BarnyardFashionistasStore","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}