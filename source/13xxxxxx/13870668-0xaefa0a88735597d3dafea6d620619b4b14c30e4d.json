{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAtopia.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBucks.sol\\\";\\n\\ninterface IAtopia {\\n\\tfunction owner() external view returns (address);\\n\\n\\tfunction bucks() external view returns (IBucks);\\n\\n\\tfunction getAge(uint256 tokenId) external view returns (uint256);\\n\\n\\tfunction ownerOf(uint256 tokenId) external view returns (address);\\n\\n\\tfunction update(uint256 tokenId) external;\\n\\n\\tfunction exitCenter(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 grown,\\n\\t\\tuint256 enjoyFee\\n\\t) external returns (uint256);\\n\\n\\tfunction addReward(uint256 tokenId, uint256 reward) external;\\n\\n\\tfunction claimGrowth(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 grown,\\n\\t\\tuint256 enjoyFee\\n\\t) external returns (uint256);\\n\\n\\tfunction claimBucks(address user, uint256 amount) external;\\n\\n\\tfunction buyAndUseItem(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 itemInfo\\n\\t) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBucks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBucks {\\n\\tfunction mint(address account, uint256 amount) external;\\n\\n\\tfunction burn(uint256 amount) external;\\n\\n\\tfunction burnFrom(address account, uint256 amount) external;\\n\\n\\tfunction transfer(address recipient, uint256 amount) external returns (bool);\\n\\n\\tfunction transferFrom(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) external returns (bool);\\n\\n\\tfunction balanceOf(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITrait.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITrait {\\n\\tfunction name() external view returns (string memory);\\n\\n\\tfunction itemCount() external view returns (uint256);\\n\\n\\tfunction totalItems() external view returns (uint256);\\n\\n\\tfunction getTraitName(uint16 traitId) external view returns (string memory);\\n\\n\\tfunction getTraitContent(uint16 traitId) external view returns (string memory);\\n\\n\\tfunction getTraitByAge(uint16 age) external view returns (uint16);\\n\\n\\tfunction isOverEye(uint16 traitId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/libs/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Base64 {\\n\\tstring private constant base64stdchars = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n\\tfunction encode(bytes memory data) internal pure returns (string memory) {\\n\\t\\tif (data.length == 0) return \\\"\\\";\\n\\n\\t\\t// load the table into memory\\n\\t\\tstring memory table = base64stdchars;\\n\\n\\t\\t// multiply by 4/3 rounded up\\n\\t\\tuint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n\\t\\t// add some extra buffer at the end required for the writing\\n\\t\\tstring memory result = new string(encodedLen + 32);\\n\\n\\t\\tassembly {\\n\\t\\t\\t// set the actual output length\\n\\t\\t\\tmstore(result, encodedLen)\\n\\n\\t\\t\\t// prepare the lookup table\\n\\t\\t\\tlet tablePtr := add(table, 1)\\n\\n\\t\\t\\t// input ptr\\n\\t\\t\\tlet dataPtr := data\\n\\t\\t\\tlet endPtr := add(dataPtr, mload(data))\\n\\n\\t\\t\\t// result ptr, jump over length\\n\\t\\t\\tlet resultPtr := add(result, 32)\\n\\n\\t\\t\\t// run over the input, 3 bytes at a time\\n\\t\\t\\tfor {\\n\\n\\t\\t\\t} lt(dataPtr, endPtr) {\\n\\n\\t\\t\\t} {\\n\\t\\t\\t\\tdataPtr := add(dataPtr, 3)\\n\\n\\t\\t\\t\\t// read 3 bytes\\n\\t\\t\\t\\tlet input := mload(dataPtr)\\n\\n\\t\\t\\t\\t// write 4 characters\\n\\t\\t\\t\\tmstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n\\t\\t\\t\\tresultPtr := add(resultPtr, 1)\\n\\t\\t\\t\\tmstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n\\t\\t\\t\\tresultPtr := add(resultPtr, 1)\\n\\t\\t\\t\\tmstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\\n\\t\\t\\t\\tresultPtr := add(resultPtr, 1)\\n\\t\\t\\t\\tmstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\\n\\t\\t\\t\\tresultPtr := add(resultPtr, 1)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// padding with '='\\n\\t\\t\\tswitch mod(mload(data), 3)\\n\\t\\t\\tcase 1 {\\n\\t\\t\\t\\tmstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n\\t\\t\\t}\\n\\t\\t\\tcase 2 {\\n\\t\\t\\t\\tmstore(sub(resultPtr, 1), shl(248, 0x3d))\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn result;\\n\\t}\\n\\n\\tfunction toString(uint256 value) internal pure returns (string memory) {\\n\\t\\tif (value == 0) {\\n\\t\\t\\treturn \\\"0\\\";\\n\\t\\t}\\n\\t\\tuint256 temp = value;\\n\\t\\tuint256 digits;\\n\\t\\twhile (temp != 0) {\\n\\t\\t\\tdigits++;\\n\\t\\t\\ttemp /= 10;\\n\\t\\t}\\n\\t\\tbytes memory buffer = new bytes(digits);\\n\\t\\twhile (value != 0) {\\n\\t\\t\\tdigits -= 1;\\n\\t\\t\\tbuffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n\\t\\t\\tvalue /= 10;\\n\\t\\t}\\n\\t\\treturn string(buffer);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n\\tusing Address for address;\\n\\n\\taddress implementation_;\\n\\taddress public admin;\\n\\n\\t// Mapping from token ID to account balances\\n\\tmapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n\\t// Mapping from account to operator approvals\\n\\tmapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n\\t// Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n\\tstring private _uri;\\n\\n\\t/**\\n\\t * @dev See {_setURI}.\\n\\t */\\n\\t// function init(string memory uri_) internal {\\n\\t// \\t_setURI(uri_);\\n\\t// }\\n\\n\\t/**\\n\\t * @dev See {IERC165-supportsInterface}.\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n\\t\\treturn\\n\\t\\t\\tinterfaceId == type(IERC1155).interfaceId ||\\n\\t\\t\\tinterfaceId == type(IERC1155MetadataURI).interfaceId ||\\n\\t\\t\\tsuper.supportsInterface(interfaceId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC1155MetadataURI-uri}.\\n\\t *\\n\\t * This implementation returns the same URI for *all* token types. It relies\\n\\t * on the token type ID substitution mechanism\\n\\t * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n\\t *\\n\\t * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n\\t * actual token type ID.\\n\\t */\\n\\tfunction uri(uint256) public view virtual override returns (string memory) {\\n\\t\\treturn _uri;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC1155-balanceOf}.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `account` cannot be the zero address.\\n\\t */\\n\\tfunction balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n\\t\\trequire(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n\\t\\treturn _balances[id][account];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC1155-balanceOfBatch}.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `accounts` and `ids` must have the same length.\\n\\t */\\n\\tfunction balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256[] memory)\\n\\t{\\n\\t\\trequire(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n\\t\\tuint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n\\t\\tfor (uint256 i = 0; i < accounts.length; ++i) {\\n\\t\\t\\tbatchBalances[i] = balanceOf(accounts[i], ids[i]);\\n\\t\\t}\\n\\n\\t\\treturn batchBalances;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC1155-setApprovalForAll}.\\n\\t */\\n\\tfunction setApprovalForAll(address operator, bool approved) public virtual override {\\n\\t\\t_setApprovalForAll(_msgSender(), operator, approved);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC1155-isApprovedForAll}.\\n\\t */\\n\\tfunction isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n\\t\\treturn _operatorApprovals[account][operator];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC1155-safeTransferFrom}.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 id,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory data\\n\\t) public virtual override {\\n\\t\\trequire(\\n\\t\\t\\tfrom == _msgSender() || isApprovedForAll(from, _msgSender()),\\n\\t\\t\\t\\\"ERC1155: caller is not owner nor approved\\\"\\n\\t\\t);\\n\\t\\t_safeTransferFrom(from, to, id, amount, data);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC1155-safeBatchTransferFrom}.\\n\\t */\\n\\tfunction safeBatchTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256[] memory ids,\\n\\t\\tuint256[] memory amounts,\\n\\t\\tbytes memory data\\n\\t) public virtual override {\\n\\t\\trequire(\\n\\t\\t\\tfrom == _msgSender() || isApprovedForAll(from, _msgSender()),\\n\\t\\t\\t\\\"ERC1155: transfer caller is not owner nor approved\\\"\\n\\t\\t);\\n\\t\\t_safeBatchTransferFrom(from, to, ids, amounts, data);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n\\t *\\n\\t * Emits a {TransferSingle} event.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `to` cannot be the zero address.\\n\\t * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n\\t * acceptance magic value.\\n\\t */\\n\\tfunction _safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 id,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory data\\n\\t) internal virtual {\\n\\t\\trequire(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n\\t\\taddress operator = _msgSender();\\n\\n\\t\\t_beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n\\t\\tuint256 fromBalance = _balances[id][from];\\n\\t\\trequire(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n\\t\\tunchecked {\\n\\t\\t\\t_balances[id][from] = fromBalance - amount;\\n\\t\\t}\\n\\t\\t_balances[id][to] += amount;\\n\\n\\t\\temit TransferSingle(operator, from, to, id, amount);\\n\\n\\t\\t_doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n\\t}\\n\\n\\t/**\\n\\t * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n\\t *\\n\\t * Emits a {TransferBatch} event.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n\\t * acceptance magic value.\\n\\t */\\n\\tfunction _safeBatchTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256[] memory ids,\\n\\t\\tuint256[] memory amounts,\\n\\t\\tbytes memory data\\n\\t) internal virtual {\\n\\t\\trequire(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\t\\trequire(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n\\t\\taddress operator = _msgSender();\\n\\n\\t\\t_beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n\\t\\tfor (uint256 i = 0; i < ids.length; ++i) {\\n\\t\\t\\tuint256 id = ids[i];\\n\\t\\t\\tuint256 amount = amounts[i];\\n\\n\\t\\t\\tuint256 fromBalance = _balances[id][from];\\n\\t\\t\\trequire(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\t_balances[id][from] = fromBalance - amount;\\n\\t\\t\\t}\\n\\t\\t\\t_balances[id][to] += amount;\\n\\t\\t}\\n\\n\\t\\temit TransferBatch(operator, from, to, ids, amounts);\\n\\n\\t\\t_doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets a new URI for all token types, by relying on the token type ID\\n\\t * substitution mechanism\\n\\t * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n\\t *\\n\\t * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n\\t * URI or any of the amounts in the JSON file at said URI will be replaced by\\n\\t * clients with the token type ID.\\n\\t *\\n\\t * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n\\t * interpreted by clients as\\n\\t * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n\\t * for token type ID 0x4cce0.\\n\\t *\\n\\t * See {uri}.\\n\\t *\\n\\t * Because these URIs cannot be meaningfully represented by the {URI} event,\\n\\t * this function emits no events.\\n\\t */\\n\\tfunction _setURI(string memory newuri) internal virtual {\\n\\t\\t_uri = newuri;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n\\t *\\n\\t * Emits a {TransferSingle} event.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `to` cannot be the zero address.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n\\t * acceptance magic value.\\n\\t */\\n\\tfunction _mint(\\n\\t\\taddress to,\\n\\t\\tuint256 id,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory data\\n\\t) internal virtual {\\n\\t\\trequire(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n\\t\\taddress operator = _msgSender();\\n\\n\\t\\t_beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n\\t\\t_balances[id][to] += amount;\\n\\t\\temit TransferSingle(operator, address(0), to, id, amount);\\n\\n\\t\\t_doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n\\t}\\n\\n\\t/**\\n\\t * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `ids` and `amounts` must have the same length.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n\\t * acceptance magic value.\\n\\t */\\n\\tfunction _mintBatch(\\n\\t\\taddress to,\\n\\t\\tuint256[] memory ids,\\n\\t\\tuint256[] memory amounts,\\n\\t\\tbytes memory data\\n\\t) internal virtual {\\n\\t\\trequire(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\t\\trequire(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n\\t\\taddress operator = _msgSender();\\n\\n\\t\\t_beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n\\t\\tfor (uint256 i = 0; i < ids.length; i++) {\\n\\t\\t\\t_balances[ids[i]][to] += amounts[i];\\n\\t\\t}\\n\\n\\t\\temit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n\\t\\t_doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Destroys `amount` tokens of token type `id` from `from`\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` cannot be the zero address.\\n\\t * - `from` must have at least `amount` tokens of token type `id`.\\n\\t */\\n\\tfunction _burn(\\n\\t\\taddress from,\\n\\t\\tuint256 id,\\n\\t\\tuint256 amount\\n\\t) internal virtual {\\n\\t\\trequire(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n\\t\\taddress operator = _msgSender();\\n\\n\\t\\t_beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n\\t\\tuint256 fromBalance = _balances[id][from];\\n\\t\\trequire(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n\\t\\tunchecked {\\n\\t\\t\\t_balances[id][from] = fromBalance - amount;\\n\\t\\t}\\n\\n\\t\\temit TransferSingle(operator, from, address(0), id, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `ids` and `amounts` must have the same length.\\n\\t */\\n\\tfunction _burnBatch(\\n\\t\\taddress from,\\n\\t\\tuint256[] memory ids,\\n\\t\\tuint256[] memory amounts\\n\\t) internal virtual {\\n\\t\\trequire(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\t\\trequire(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n\\t\\taddress operator = _msgSender();\\n\\n\\t\\t_beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n\\t\\tfor (uint256 i = 0; i < ids.length; i++) {\\n\\t\\t\\tuint256 id = ids[i];\\n\\t\\t\\tuint256 amount = amounts[i];\\n\\n\\t\\t\\tuint256 fromBalance = _balances[id][from];\\n\\t\\t\\trequire(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\t_balances[id][from] = fromBalance - amount;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\temit TransferBatch(operator, from, address(0), ids, amounts);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Approve `operator` to operate on all of `owner` tokens\\n\\t *\\n\\t * Emits a {ApprovalForAll} event.\\n\\t */\\n\\tfunction _setApprovalForAll(\\n\\t\\taddress owner,\\n\\t\\taddress operator,\\n\\t\\tbool approved\\n\\t) internal virtual {\\n\\t\\trequire(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\t\\t_operatorApprovals[owner][operator] = approved;\\n\\t\\temit ApprovalForAll(owner, operator, approved);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Hook that is called before any token transfer. This includes minting\\n\\t * and burning, as well as batched variants.\\n\\t *\\n\\t * The same hook is called on both single and batched variants. For single\\n\\t * transfers, the length of the `id` and `amount` arrays will be 1.\\n\\t *\\n\\t * Calling conditions (for each `id` and `amount` pair):\\n\\t *\\n\\t * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n\\t * of token type `id` will be  transferred to `to`.\\n\\t * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n\\t * for `to`.\\n\\t * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n\\t * will be burned.\\n\\t * - `from` and `to` are never both zero.\\n\\t * - `ids` and `amounts` have the same, non-zero length.\\n\\t *\\n\\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n\\t */\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256[] memory ids,\\n\\t\\tuint256[] memory amounts,\\n\\t\\tbytes memory data\\n\\t) internal virtual {}\\n\\n\\tfunction _doSafeTransferAcceptanceCheck(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 id,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory data\\n\\t) private {\\n\\t\\tif (to.isContract()) {\\n\\t\\t\\ttry IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n\\t\\t\\t\\tif (response != IERC1155Receiver.onERC1155Received.selector) {\\n\\t\\t\\t\\t\\trevert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t} catch Error(string memory reason) {\\n\\t\\t\\t\\trevert(reason);\\n\\t\\t\\t} catch {\\n\\t\\t\\t\\trevert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _doSafeBatchTransferAcceptanceCheck(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256[] memory ids,\\n\\t\\tuint256[] memory amounts,\\n\\t\\tbytes memory data\\n\\t) private {\\n\\t\\tif (to.isContract()) {\\n\\t\\t\\ttry IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n\\t\\t\\t\\tbytes4 response\\n\\t\\t\\t) {\\n\\t\\t\\t\\tif (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n\\t\\t\\t\\t\\trevert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t} catch Error(string memory reason) {\\n\\t\\t\\t\\trevert(reason);\\n\\t\\t\\t} catch {\\n\\t\\t\\t\\trevert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n\\t\\tuint256[] memory array = new uint256[](1);\\n\\t\\tarray[0] = element;\\n\\n\\t\\treturn array;\\n\\t}\\n\\n\\tfunction burn(\\n\\t\\taddress account,\\n\\t\\tuint256 id,\\n\\t\\tuint256 value\\n\\t) public virtual {\\n\\t\\trequire(\\n\\t\\t\\taccount == _msgSender() || isApprovedForAll(account, _msgSender()),\\n\\t\\t\\t\\\"ERC1155: caller is not owner nor approved\\\"\\n\\t\\t);\\n\\n\\t\\t_burn(account, id, value);\\n\\t}\\n\\n\\t// function burnBatch(\\n\\t// \\taddress account,\\n\\t// \\tuint256[] memory ids,\\n\\t// \\tuint256[] memory values\\n\\t// ) public virtual {\\n\\t// \\trequire(\\n\\t// \\t\\taccount == _msgSender() || isApprovedForAll(account, _msgSender()),\\n\\t// \\t\\t\\\"ERC1155: caller is not owner nor approved\\\"\\n\\t// \\t);\\n\\n\\t// \\t_burnBatch(account, ids, values);\\n\\t// }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Shop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155.sol\\\";\\nimport \\\"../interfaces/IAtopia.sol\\\";\\nimport \\\"../interfaces/IBucks.sol\\\";\\nimport \\\"../interfaces/ITrait.sol\\\";\\nimport \\\"../libs/Base64.sol\\\";\\n\\ncontract AtopiaShop is ERC1155 {\\n\\tusing Base64 for *;\\n\\n\\tstruct Item {\\n\\t\\tuint128 id;\\n\\t\\tuint64 bonusAge;\\n\\t\\tuint16 bonusTrait;\\n\\t\\tuint16 storeIndex;\\n\\t\\tITrait store;\\n\\t\\tuint128 minAge;\\n\\t\\tuint256 price;\\n\\t\\tuint256 stock;\\n\\t}\\n\\n\\tbool public initialized;\\n\\n\\tstring public constant name = \\\"Atopia Shop\\\";\\n\\tstring public constant symbol = \\\"ATPSHOP\\\";\\n\\n\\tevent ItemUpdated(Item item);\\n\\n\\tIAtopia public atopia;\\n\\tIBucks public bucks;\\n\\n\\tItem[] public items;\\n\\n\\tfunction initialize(address _atopia) external {\\n\\t\\trequire(!initialized);\\n\\t\\tinitialized = true;\\n\\t\\tatopia = IAtopia(_atopia);\\n\\t\\tbucks = atopia.bucks();\\n\\t\\t// ERC1155.init(\\\"\\\");\\n\\t}\\n\\n\\tfunction totalItems() external view returns (uint256) {\\n\\t\\treturn items.length;\\n\\t}\\n\\n\\tfunction itemInfo(uint256 index) public view returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\t(uint256(items[index].bonusAge) << 192) |\\n\\t\\t\\t(((uint256(items[index].bonusTrait) << 16) | items[index].storeIndex) << 128) |\\n\\t\\t\\titems[index].minAge;\\n\\t}\\n\\n\\tfunction onlyAtopiaOwner() internal view {\\n\\t\\trequire(msg.sender == atopia.owner());\\n\\t}\\n\\n\\tfunction addItem(\\n\\t\\tuint64 bonusAge,\\n\\t\\tuint16 bonusTrait,\\n\\t\\taddress store,\\n\\t\\tuint16[] memory storeIndexes,\\n\\t\\tuint128 minAge,\\n\\t\\tuint256 price,\\n\\t\\tuint256 stock\\n\\t) external {\\n\\t\\tonlyAtopiaOwner();\\n\\t\\tuint256 itemId = items.length;\\n\\t\\titemId = (itemId << 128) | (itemId + 1);\\n\\t\\tfor (uint16 i = 0; i < storeIndexes.length; i++) {\\n\\t\\t\\titems.push(\\n\\t\\t\\t\\tItem(uint128(itemId), bonusAge, bonusTrait, storeIndexes[i], ITrait(store), minAge, price, stock)\\n\\t\\t\\t);\\n\\t\\t\\temit ItemUpdated(items[itemId >> 128]);\\n\\t\\t\\titemId = (itemId << 128) | (uint128(itemId) + 1);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction updateItem(\\n\\t\\tuint256 itemId,\\n\\t\\tuint64 bonusAge,\\n\\t\\tuint128 minAge,\\n\\t\\tuint256 price,\\n\\t\\tuint256 stock\\n\\t) external {\\n\\t\\tonlyAtopiaOwner();\\n\\t\\tuint256 index = itemId - 1;\\n\\t\\titems[index].bonusAge = bonusAge;\\n\\t\\titems[index].minAge = minAge;\\n\\t\\titems[index].price = price;\\n\\t\\titems[index].stock = stock;\\n\\t\\temit ItemUpdated(items[index]);\\n\\t}\\n\\n\\tfunction buyItem(uint256 itemId, uint256 amount) external {\\n\\t\\tuint256 index = itemId - 1;\\n\\t\\tuint256 stock = items[index].stock;\\n\\t\\tuint256 price = items[index].price * amount;\\n\\t\\trequire(stock >= amount);\\n\\t\\titems[index].stock = stock - amount;\\n\\t\\tbucks.transferFrom(msg.sender, address(this), price);\\n\\t\\t_mint(msg.sender, itemId, amount, \\\"\\\");\\n\\t\\temit ItemUpdated(items[index]);\\n\\t}\\n\\n\\tfunction buyItemAndUse(uint256 itemId, uint256 tokenId) external {\\n\\t\\tuint256 index = itemId - 1;\\n\\t\\tuint256 stock = items[index].stock;\\n\\t\\tuint256 price = items[index].price;\\n\\t\\trequire(stock > 0);\\n\\t\\titems[index].stock = stock - 1;\\n\\t\\tbucks.transferFrom(msg.sender, address(this), price);\\n\\t\\temit TransferSingle(msg.sender, address(0), msg.sender, itemId, 1);\\n\\t\\tatopia.buyAndUseItem(tokenId, itemInfo(index));\\n\\t\\temit TransferSingle(msg.sender, msg.sender, address(0), itemId, 1);\\n\\t\\temit ItemUpdated(items[index]);\\n\\t}\\n\\n\\tfunction distributeItems(uint256[] memory dists, address[] memory users) external {\\n\\t\\trequire(msg.sender == admin);\\n\\t\\tuint256 totalMints;\\n\\t\\tfor (uint256 i = 0; i < dists.length; i += 2) {\\n\\t\\t\\tuint256 itemId = dists[i];\\n\\t\\t\\tuint256 index = itemId - 1;\\n\\t\\t\\tuint256 amount = dists[i + 1];\\n\\t\\t\\tuint256 stock = items[index].stock;\\n\\t\\t\\titems[index].stock = stock - amount;\\n\\t\\t\\tuint256 end = totalMints + amount;\\n\\t\\t\\tfor (; totalMints < end; totalMints++) {\\n\\t\\t\\t\\t_mint(users[totalMints], itemId, 1, \\\"\\\");\\n\\t\\t\\t}\\n\\t\\t\\temit ItemUpdated(items[index]);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction uri(uint256 id) public view virtual override returns (string memory) {\\n\\t\\tItem memory item = items[id - 1];\\n\\t\\treturn\\n\\t\\t\\tstring(\\n\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\\"data:application/json;base64,\\\",\\n\\t\\t\\t\\t\\tBase64.encode(\\n\\t\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\t\\t'{\\\"name\\\":\\\"',\\n\\t\\t\\t\\t\\t\\t\\titem.store.getTraitName(item.storeIndex),\\n\\t\\t\\t\\t\\t\\t\\t'\\\",\\\"description\\\":\\\"Atopia Shopping Item\\\",\\\"image\\\":\\\"data:image/svg+xml;base64,',\\n\\t\\t\\t\\t\\t\\t\\tBase64.encode(\\n\\t\\t\\t\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t'<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><svg version=\\\"1.1\\\" id=\\\"_x31_\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\" viewBox=\\\"0 0 1000 1000\\\" style=\\\"enable-background:new 0 0 1000 1000;\\\" xml:space=\\\"preserve\\\"><style type=\\\"text/css\\\">.g{width:100%;height:100%}.h{overflow:visible;}.s{stroke:#000000;stroke-width:10;stroke-miterlimit:10;}.d{stroke-linecap:round;stroke-linejoin:round}.f{fill:#FDA78B;}.c{fill:#FFDAB6;}.e{fill:none;}.l{fill:white;}.b{fill:black;}</style>',\\n\\t\\t\\t\\t\\t\\t\\t\\t\\titem.store.getTraitContent(item.storeIndex),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"</svg>\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t\\t\\t\\t'\\\",\\\"attributes\\\":[{\\\"trait_type\\\":\\\"Store\\\",\\\"value\\\":\\\"',\\n\\t\\t\\t\\t\\t\\t\\titem.store.name(),\\n\\t\\t\\t\\t\\t\\t\\t'\\\"},{\\\"display_type\\\":\\\"number\\\",\\\"trait_type\\\":\\\"Min Age\\\",\\\"value\\\":\\\"',\\n\\t\\t\\t\\t\\t\\t\\t((item.minAge * 10) / 365 days).toString(),\\n\\t\\t\\t\\t\\t\\t\\t'\\\"},{\\\"display_type\\\":\\\"number\\\",\\\"trait_type\\\":\\\"Age Growth (days)\\\",\\\"value\\\":\\\"',\\n\\t\\t\\t\\t\\t\\t\\t((item.bonusAge * 10) / 1 days).toString(),\\n\\t\\t\\t\\t\\t\\t\\t'\\\"},{\\\"trait_type\\\":\\\"Wearable\\\",\\\"value\\\":\\\"',\\n\\t\\t\\t\\t\\t\\t\\titem.bonusTrait > 0 ? \\\"Yes\\\" : \\\"No\\\",\\n\\t\\t\\t\\t\\t\\t\\t'\\\"}]}'\\n\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t}\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"id\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"bonusAge\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"bonusTrait\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"storeIndex\",\"type\":\"uint16\"},{\"internalType\":\"contract ITrait\",\"name\":\"store\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minAge\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stock\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct AtopiaShop.Item\",\"name\":\"item\",\"type\":\"tuple\"}],\"name\":\"ItemUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"bonusAge\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"bonusTrait\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"store\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"storeIndexes\",\"type\":\"uint16[]\"},{\"internalType\":\"uint128\",\"name\":\"minAge\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stock\",\"type\":\"uint256\"}],\"name\":\"addItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atopia\",\"outputs\":[{\"internalType\":\"contract IAtopia\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bucks\",\"outputs\":[{\"internalType\":\"contract IBucks\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyItemAndUse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"dists\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"distributeItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_atopia\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"itemInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"items\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"id\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"bonusAge\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"bonusTrait\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"storeIndex\",\"type\":\"uint16\"},{\"internalType\":\"contract ITrait\",\"name\":\"store\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minAge\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"bonusAge\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"minAge\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stock\",\"type\":\"uint256\"}],\"name\":\"updateItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AtopiaShop","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}