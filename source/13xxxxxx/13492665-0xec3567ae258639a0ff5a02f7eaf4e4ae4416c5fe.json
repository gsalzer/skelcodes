{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interfaces/INodeOperatorsRegistry.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2020 Lido <info@lido.fi>\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.4.24;\\n\\n\\n/**\\n  * @title Node Operator registry\\n  *\\n  * Node Operator registry manages signing keys and other node operator data.\\n  * It's also responsible for distributing rewards to node operators.\\n  */\\ninterface INodeOperatorsRegistry {\\n    /**\\n      * @notice Add node operator named `name` with reward address `rewardAddress` and staking limit = 0 validators\\n      * @param _name Human-readable name\\n      * @param _rewardAddress Ethereum 1 address which receives stETH rewards for this operator\\n      * @return a unique key of the added operator\\n      */\\n    function addNodeOperator(string _name, address _rewardAddress) external returns (uint256 id);\\n\\n    /**\\n      * @notice `_active ? 'Enable' : 'Disable'` the node operator #`_id`\\n      */\\n    function setNodeOperatorActive(uint256 _id, bool _active) external;\\n\\n    /**\\n      * @notice Change human-readable name of the node operator #`_id` to `_name`\\n      */\\n    function setNodeOperatorName(uint256 _id, string _name) external;\\n\\n    /**\\n      * @notice Change reward address of the node operator #`_id` to `_rewardAddress`\\n      */\\n    function setNodeOperatorRewardAddress(uint256 _id, address _rewardAddress) external;\\n\\n    /**\\n      * @notice Set the maximum number of validators to stake for the node operator #`_id` to `_stakingLimit`\\n      */\\n    function setNodeOperatorStakingLimit(uint256 _id, uint64 _stakingLimit) external;\\n\\n    /**\\n      * @notice Report `_stoppedIncrement` more stopped validators of the node operator #`_id`\\n      */\\n    function reportStoppedValidators(uint256 _id, uint64 _stoppedIncrement) external;\\n\\n    /**\\n      * @notice Remove unused signing keys\\n      * @dev Function is used by the pool\\n      */\\n    function trimUnusedKeys() external;\\n\\n    /**\\n      * @notice Returns total number of node operators\\n      */\\n    function getNodeOperatorsCount() external view returns (uint256);\\n\\n    /**\\n      * @notice Returns number of active node operators\\n      */\\n    function getActiveNodeOperatorsCount() external view returns (uint256);\\n\\n    /**\\n      * @notice Returns the n-th node operator\\n      * @param _id Node Operator id\\n      * @param _fullInfo If true, name will be returned as well\\n      */\\n    function getNodeOperator(uint256 _id, bool _fullInfo) external view returns (\\n        bool active,\\n        string name,\\n        address rewardAddress,\\n        uint64 stakingLimit,\\n        uint64 stoppedValidators,\\n        uint64 totalSigningKeys,\\n        uint64 usedSigningKeys);\\n\\n    /**\\n      * @notice Returns the rewards distribution proportional to the effective stake for each node operator.\\n      * @param _totalRewardShares Total amount of reward shares to distribute.\\n      */\\n    function getRewardsDistribution(uint256 _totalRewardShares) external view returns (\\n        address[] memory recipients,\\n        uint256[] memory shares\\n    );\\n\\n    event NodeOperatorAdded(uint256 id, string name, address rewardAddress, uint64 stakingLimit);\\n    event NodeOperatorActiveSet(uint256 indexed id, bool active);\\n    event NodeOperatorNameSet(uint256 indexed id, string name);\\n    event NodeOperatorRewardAddressSet(uint256 indexed id, address rewardAddress);\\n    event NodeOperatorStakingLimitSet(uint256 indexed id, uint64 stakingLimit);\\n    event NodeOperatorTotalStoppedValidatorsReported(uint256 indexed id, uint64 totalStopped);\\n    event NodeOperatorTotalKeysTrimmed(uint256 indexed id, uint64 totalKeysTrimmed);\\n\\n    /**\\n     * @notice Selects and returns at most `_numKeys` signing keys (as well as the corresponding\\n     *         signatures) from the set of active keys and marks the selected keys as used.\\n     *         May only be called by the pool contract.\\n     *\\n     * @param _numKeys The number of keys to select. The actual number of selected keys may be less\\n     *        due to the lack of active keys.\\n     */\\n    function assignNextSigningKeys(uint256 _numKeys) external returns (bytes memory pubkeys, bytes memory signatures);\\n\\n    /**\\n      * @notice Add `_quantity` validator signing keys to the keys of the node operator #`_operator_id`. Concatenated keys are: `_pubkeys`\\n      * @dev Along with each key the DAO has to provide a signatures for the\\n      *      (pubkey, withdrawal_credentials, 32000000000) message.\\n      *      Given that information, the contract'll be able to call\\n      *      deposit_contract.deposit on-chain.\\n      * @param _operator_id Node Operator id\\n      * @param _quantity Number of signing keys provided\\n      * @param _pubkeys Several concatenated validator signing keys\\n      * @param _signatures Several concatenated signatures for (pubkey, withdrawal_credentials, 32000000000) messages\\n      */\\n    function addSigningKeys(uint256 _operator_id, uint256 _quantity, bytes _pubkeys, bytes _signatures) external;\\n\\n    /**\\n      * @notice Add `_quantity` validator signing keys of operator #`_id` to the set of usable keys. Concatenated keys are: `_pubkeys`. Can be done by node operator in question by using the designated rewards address.\\n      * @dev Along with each key the DAO has to provide a signatures for the\\n      *      (pubkey, withdrawal_credentials, 32000000000) message.\\n      *      Given that information, the contract'll be able to call\\n      *      deposit_contract.deposit on-chain.\\n      * @param _operator_id Node Operator id\\n      * @param _quantity Number of signing keys provided\\n      * @param _pubkeys Several concatenated validator signing keys\\n      * @param _signatures Several concatenated signatures for (pubkey, withdrawal_credentials, 32000000000) messages\\n      */\\n    function addSigningKeysOperatorBH(uint256 _operator_id, uint256 _quantity, bytes _pubkeys, bytes _signatures) external;\\n\\n    /**\\n      * @notice Removes a validator signing key #`_index` from the keys of the node operator #`_operator_id`\\n      * @param _operator_id Node Operator id\\n      * @param _index Index of the key, starting with 0\\n      */\\n    function removeSigningKey(uint256 _operator_id, uint256 _index) external;\\n\\n    /**\\n      * @notice Removes a validator signing key #`_index` of operator #`_id` from the set of usable keys. Executed on behalf of Node Operator.\\n      * @param _operator_id Node Operator id\\n      * @param _index Index of the key, starting with 0\\n      */\\n    function removeSigningKeyOperatorBH(uint256 _operator_id, uint256 _index) external;\\n\\n    /**\\n      * @notice Removes an #`_amount` of validator signing keys starting from #`_index` of operator #`_id` usable keys. Executed on behalf of DAO.\\n      * @param _operator_id Node Operator id\\n      * @param _index Index of the key, starting with 0\\n      * @param _amount Number of keys to remove\\n      */\\n    function removeSigningKeys(uint256 _operator_id, uint256 _index, uint256 _amount) external;\\n\\n    /**\\n      * @notice Removes an #`_amount` of validator signing keys starting from #`_index` of operator #`_id` usable keys. Executed on behalf of Node Operator.\\n      * @param _operator_id Node Operator id\\n      * @param _index Index of the key, starting with 0\\n      * @param _amount Number of keys to remove\\n      */\\n    function removeSigningKeysOperatorBH(uint256 _operator_id, uint256 _index, uint256 _amount) external;\\n\\n    /**\\n      * @notice Returns total number of signing keys of the node operator #`_operator_id`\\n      */\\n    function getTotalSigningKeyCount(uint256 _operator_id) external view returns (uint256);\\n\\n    /**\\n      * @notice Returns number of usable signing keys of the node operator #`_operator_id`\\n      */\\n    function getUnusedSigningKeyCount(uint256 _operator_id) external view returns (uint256);\\n\\n    /**\\n      * @notice Returns n-th signing key of the node operator #`_operator_id`\\n      * @param _operator_id Node Operator id\\n      * @param _index Index of the key, starting with 0\\n      * @return key Key\\n      * @return depositSignature Signature needed for a deposit_contract.deposit call\\n      * @return used Flag indication if the key was used in the staking\\n      */\\n    function getSigningKey(uint256 _operator_id, uint256 _index) external view returns\\n            (bytes key, bytes depositSignature, bool used);\\n\\n\\n    /**\\n     * @notice Returns a monotonically increasing counter that gets incremented when any of the following happens:\\n     *   1. a node operator's key(s) is added;\\n     *   2. a node operator's key(s) is removed;\\n     *   3. a node operator's approved keys limit is changed.\\n     *   4. a node operator was activated/deactivated. Activation or deactivation of node operator\\n     *      might lead to usage of unvalidated keys in the assignNextSigningKeys method.\\n     */\\n    function getKeysOpIndex() external view returns (uint256);\\n\\n    event SigningKeyAdded(uint256 indexed operatorId, bytes pubkey);\\n    event SigningKeyRemoved(uint256 indexed operatorId, bytes pubkey);\\n    event KeysOpIndexSet(uint256 keysOpIndex);\\n}\\n\"\r\n    },\r\n    \"contracts/nos/NodeOperatorsRegistry.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2020 Lido <info@lido.fi>\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\n/* See contracts/COMPILERS.md */\\npragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"@aragon/os/contracts/common/IsContract.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath64.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\nimport \\\"../interfaces/INodeOperatorsRegistry.sol\\\";\\nimport \\\"../lib/MemUtils.sol\\\";\\n\\n\\n/**\\n  * @title Node Operator registry implementation\\n  *\\n  * See the comment of `INodeOperatorsRegistry`.\\n  *\\n  * NOTE: the code below assumes moderate amount of node operators, e.g. up to 50.\\n  */\\ncontract NodeOperatorsRegistry is INodeOperatorsRegistry, IsContract, AragonApp {\\n    using SafeMath for uint256;\\n    using SafeMath64 for uint64;\\n    using UnstructuredStorage for bytes32;\\n\\n    /// ACL\\n    bytes32 constant public MANAGE_SIGNING_KEYS = keccak256(\\\"MANAGE_SIGNING_KEYS\\\");\\n    bytes32 constant public ADD_NODE_OPERATOR_ROLE = keccak256(\\\"ADD_NODE_OPERATOR_ROLE\\\");\\n    bytes32 constant public SET_NODE_OPERATOR_ACTIVE_ROLE = keccak256(\\\"SET_NODE_OPERATOR_ACTIVE_ROLE\\\");\\n    bytes32 constant public SET_NODE_OPERATOR_NAME_ROLE = keccak256(\\\"SET_NODE_OPERATOR_NAME_ROLE\\\");\\n    bytes32 constant public SET_NODE_OPERATOR_ADDRESS_ROLE = keccak256(\\\"SET_NODE_OPERATOR_ADDRESS_ROLE\\\");\\n    bytes32 constant public SET_NODE_OPERATOR_LIMIT_ROLE = keccak256(\\\"SET_NODE_OPERATOR_LIMIT_ROLE\\\");\\n    bytes32 constant public REPORT_STOPPED_VALIDATORS_ROLE = keccak256(\\\"REPORT_STOPPED_VALIDATORS_ROLE\\\");\\n\\n    uint256 constant public PUBKEY_LENGTH = 48;\\n    uint256 constant public SIGNATURE_LENGTH = 96;\\n\\n    uint256 internal constant UINT64_MAX = uint256(uint64(-1));\\n\\n    bytes32 internal constant SIGNING_KEYS_MAPPING_NAME = keccak256(\\\"lido.NodeOperatorsRegistry.signingKeysMappingName\\\");\\n\\n\\n    /// @dev Node Operator parameters and internal state\\n    struct NodeOperator {\\n        bool active;    // a flag indicating if the operator can participate in further staking and reward distribution\\n        address rewardAddress;  // Ethereum 1 address which receives steth rewards for this operator\\n        string name;    // human-readable name\\n        uint64 stakingLimit;    // the maximum number of validators to stake for this operator\\n        uint64 stoppedValidators;   // number of signing keys which stopped validation (e.g. were slashed)\\n\\n        uint64 totalSigningKeys;    // total amount of signing keys of this operator\\n        uint64 usedSigningKeys;     // number of signing keys of this operator which were used in deposits to the Ethereum 2\\n    }\\n\\n    /// @dev Memory cache entry used in the assignNextKeys function\\n    struct DepositLookupCacheEntry {\\n        // Makes no sense to pack types since reading memory is as fast as any op\\n        uint256 id;\\n        uint256 stakingLimit;\\n        uint256 stoppedValidators;\\n        uint256 totalSigningKeys;\\n        uint256 usedSigningKeys;\\n        uint256 initialUsedSigningKeys;\\n    }\\n\\n    /// @dev Mapping of all node operators. Mapping is used to be able to extend the struct.\\n    mapping(uint256 => NodeOperator) internal operators;\\n\\n    // @dev Total number of operators\\n    bytes32 internal constant TOTAL_OPERATORS_COUNT_POSITION = keccak256(\\\"lido.NodeOperatorsRegistry.totalOperatorsCount\\\");\\n\\n    // @dev Cached number of active operators\\n    bytes32 internal constant ACTIVE_OPERATORS_COUNT_POSITION = keccak256(\\\"lido.NodeOperatorsRegistry.activeOperatorsCount\\\");\\n\\n    /// @dev link to the Lido contract\\n    bytes32 internal constant LIDO_POSITION = keccak256(\\\"lido.NodeOperatorsRegistry.lido\\\");\\n\\n    /// @dev link to the index of operations with keys\\n    bytes32 internal constant KEYS_OP_INDEX_POSITION = keccak256(\\\"lido.NodeOperatorsRegistry.keysOpIndex\\\");\\n\\n\\n    modifier onlyLido() {\\n        require(msg.sender == LIDO_POSITION.getStorageAddress(), \\\"APP_AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    modifier validAddress(address _a) {\\n        require(_a != address(0), \\\"EMPTY_ADDRESS\\\");\\n        _;\\n    }\\n\\n    modifier operatorExists(uint256 _id) {\\n        require(_id < getNodeOperatorsCount(), \\\"NODE_OPERATOR_NOT_FOUND\\\");\\n        _;\\n    }\\n\\n    function initialize(address _lido) public onlyInit {\\n        TOTAL_OPERATORS_COUNT_POSITION.setStorageUint256(0);\\n        ACTIVE_OPERATORS_COUNT_POSITION.setStorageUint256(0);\\n        KEYS_OP_INDEX_POSITION.setStorageUint256(0);\\n        LIDO_POSITION.setStorageAddress(_lido);\\n        initialized();\\n    }\\n\\n    /**\\n      * @notice Add node operator named `_name` with reward address `_rewardAddress` and staking limit = 0\\n      * @param _name Human-readable name\\n      * @param _rewardAddress Ethereum 1 address which receives stETH rewards for this operator\\n      * @return a unique key of the added operator\\n      */\\n    function addNodeOperator(string _name, address _rewardAddress) external\\n        auth(ADD_NODE_OPERATOR_ROLE)\\n        validAddress(_rewardAddress)\\n        returns (uint256 id)\\n    {\\n        id = getNodeOperatorsCount();\\n        TOTAL_OPERATORS_COUNT_POSITION.setStorageUint256(id.add(1));\\n\\n        NodeOperator storage operator = operators[id];\\n\\n        uint256 activeOperatorsCount = getActiveNodeOperatorsCount();\\n        ACTIVE_OPERATORS_COUNT_POSITION.setStorageUint256(activeOperatorsCount.add(1));\\n\\n        operator.active = true;\\n        operator.name = _name;\\n        operator.rewardAddress = _rewardAddress;\\n        operator.stakingLimit = 0;\\n\\n        emit NodeOperatorAdded(id, _name, _rewardAddress, 0);\\n\\n        return id;\\n    }\\n\\n    /**\\n      * @notice `_active ? 'Enable' : 'Disable'` the node operator #`_id`\\n      */\\n    function setNodeOperatorActive(uint256 _id, bool _active) external\\n        authP(SET_NODE_OPERATOR_ACTIVE_ROLE, arr(_id, _active ? uint256(1) : uint256(0)))\\n        operatorExists(_id)\\n    {\\n        _increaseKeysOpIndex();\\n        if (operators[_id].active != _active) {\\n            uint256 activeOperatorsCount = getActiveNodeOperatorsCount();\\n            if (_active)\\n                ACTIVE_OPERATORS_COUNT_POSITION.setStorageUint256(activeOperatorsCount.add(1));\\n            else\\n                ACTIVE_OPERATORS_COUNT_POSITION.setStorageUint256(activeOperatorsCount.sub(1));\\n        }\\n\\n        operators[_id].active = _active;\\n\\n        emit NodeOperatorActiveSet(_id, _active);\\n    }\\n\\n    /**\\n      * @notice Change human-readable name of the node operator #`_id` to `_name`\\n      */\\n    function setNodeOperatorName(uint256 _id, string _name) external\\n        authP(SET_NODE_OPERATOR_NAME_ROLE, arr(_id))\\n        operatorExists(_id)\\n    {\\n        operators[_id].name = _name;\\n        emit NodeOperatorNameSet(_id, _name);\\n    }\\n\\n    /**\\n      * @notice Change reward address of the node operator #`_id` to `_rewardAddress`\\n      */\\n    function setNodeOperatorRewardAddress(uint256 _id, address _rewardAddress) external\\n        authP(SET_NODE_OPERATOR_ADDRESS_ROLE, arr(_id, uint256(_rewardAddress)))\\n        operatorExists(_id)\\n        validAddress(_rewardAddress)\\n    {\\n        operators[_id].rewardAddress = _rewardAddress;\\n        emit NodeOperatorRewardAddressSet(_id, _rewardAddress);\\n    }\\n\\n    /**\\n      * @notice Set the maximum number of validators to stake for the node operator #`_id` to `_stakingLimit`\\n      */\\n    function setNodeOperatorStakingLimit(uint256 _id, uint64 _stakingLimit) external\\n        authP(SET_NODE_OPERATOR_LIMIT_ROLE, arr(_id, uint256(_stakingLimit)))\\n        operatorExists(_id)\\n    {\\n        _increaseKeysOpIndex();\\n        operators[_id].stakingLimit = _stakingLimit;\\n        emit NodeOperatorStakingLimitSet(_id, _stakingLimit);\\n    }\\n\\n    /**\\n      * @notice Report `_stoppedIncrement` more stopped validators of the node operator #`_id`\\n      */\\n    function reportStoppedValidators(uint256 _id, uint64 _stoppedIncrement) external\\n        authP(REPORT_STOPPED_VALIDATORS_ROLE, arr(_id, uint256(_stoppedIncrement)))\\n        operatorExists(_id)\\n    {\\n        require(0 != _stoppedIncrement, \\\"EMPTY_VALUE\\\");\\n        operators[_id].stoppedValidators = operators[_id].stoppedValidators.add(_stoppedIncrement);\\n        require(operators[_id].stoppedValidators <= operators[_id].usedSigningKeys, \\\"STOPPED_MORE_THAN_LAUNCHED\\\");\\n\\n        emit NodeOperatorTotalStoppedValidatorsReported(_id, operators[_id].stoppedValidators);\\n    }\\n\\n    /**\\n      * @notice Remove unused signing keys\\n      * @dev Function is used by the Lido contract\\n      */\\n    function trimUnusedKeys() external onlyLido {\\n        uint256 length = getNodeOperatorsCount();\\n        for (uint256 operatorId = 0; operatorId < length; ++operatorId) {\\n            uint64 totalSigningKeys = operators[operatorId].totalSigningKeys;\\n            uint64 usedSigningKeys = operators[operatorId].usedSigningKeys;\\n            if (totalSigningKeys != usedSigningKeys) { // write only if update is needed\\n                operators[operatorId].totalSigningKeys = usedSigningKeys;  // discard unused keys\\n                emit NodeOperatorTotalKeysTrimmed(operatorId, totalSigningKeys - usedSigningKeys);\\n            }\\n        }\\n    }\\n\\n    /**\\n      * @notice Add `_quantity` validator signing keys of operator #`_id` to the set of usable keys. Concatenated keys are: `_pubkeys`. Can be done by the DAO in question by using the designated rewards address.\\n      * @dev Along with each key the DAO has to provide a signatures for the\\n      *      (pubkey, withdrawal_credentials, 32000000000) message.\\n      *      Given that information, the contract'll be able to call\\n      *      deposit_contract.deposit on-chain.\\n      * @param _operator_id Node Operator id\\n      * @param _quantity Number of signing keys provided\\n      * @param _pubkeys Several concatenated validator signing keys\\n      * @param _signatures Several concatenated signatures for (pubkey, withdrawal_credentials, 32000000000) messages\\n      */\\n    function addSigningKeys(uint256 _operator_id, uint256 _quantity, bytes _pubkeys, bytes _signatures) external\\n        authP(MANAGE_SIGNING_KEYS, arr(_operator_id))\\n    {\\n        _addSigningKeys(_operator_id, _quantity, _pubkeys, _signatures);\\n    }\\n\\n    /**\\n      * @notice Add `_quantity` validator signing keys of operator #`_id` to the set of usable keys. Concatenated keys are: `_pubkeys`. Can be done by node operator in question by using the designated rewards address.\\n      * @dev Along with each key the DAO has to provide a signatures for the\\n      *      (pubkey, withdrawal_credentials, 32000000000) message.\\n      *      Given that information, the contract'll be able to call\\n      *      deposit_contract.deposit on-chain.\\n      * @param _operator_id Node Operator id\\n      * @param _quantity Number of signing keys provided\\n      * @param _pubkeys Several concatenated validator signing keys\\n      * @param _signatures Several concatenated signatures for (pubkey, withdrawal_credentials, 32000000000) messages\\n      */\\n    function addSigningKeysOperatorBH(\\n        uint256 _operator_id,\\n        uint256 _quantity,\\n        bytes _pubkeys,\\n        bytes _signatures\\n    )\\n        external\\n    {\\n        require(msg.sender == operators[_operator_id].rewardAddress, \\\"APP_AUTH_FAILED\\\");\\n        _addSigningKeys(_operator_id, _quantity, _pubkeys, _signatures);\\n    }\\n\\n    /**\\n      * @notice Removes a validator signing key #`_index` of operator #`_id` from the set of usable keys. Executed on behalf of DAO.\\n      * @param _operator_id Node Operator id\\n      * @param _index Index of the key, starting with 0\\n      */\\n    function removeSigningKey(uint256 _operator_id, uint256 _index)\\n        external\\n        authP(MANAGE_SIGNING_KEYS, arr(_operator_id))\\n    {\\n        _removeSigningKey(_operator_id, _index);\\n    }\\n\\n    /**\\n      * @notice Removes an #`_amount` of validator signing keys starting from #`_index` of operator #`_id` usable keys. Executed on behalf of DAO.\\n      * @param _operator_id Node Operator id\\n      * @param _index Index of the key, starting with 0\\n      * @param _amount Number of keys to remove\\n      */\\n    function removeSigningKeys(uint256 _operator_id, uint256 _index, uint256 _amount)\\n        external\\n        authP(MANAGE_SIGNING_KEYS, arr(_operator_id))\\n    {\\n        // removing from the last index to the highest one, so we won't get outside the array\\n        for (uint256 i = _index + _amount; i > _index ; --i) {\\n            _removeSigningKey(_operator_id, i - 1);\\n        }\\n    }\\n\\n    /**\\n      * @notice Removes a validator signing key #`_index` of operator #`_id` from the set of usable keys. Executed on behalf of Node Operator.\\n      * @param _operator_id Node Operator id\\n      * @param _index Index of the key, starting with 0\\n      */\\n    function removeSigningKeyOperatorBH(uint256 _operator_id, uint256 _index) external {\\n        require(msg.sender == operators[_operator_id].rewardAddress, \\\"APP_AUTH_FAILED\\\");\\n        _removeSigningKey(_operator_id, _index);\\n    }\\n\\n    /**\\n      * @notice Removes an #`_amount` of validator signing keys starting from #`_index` of operator #`_id` usable keys. Executed on behalf of Node Operator.\\n      * @param _operator_id Node Operator id\\n      * @param _index Index of the key, starting with 0\\n      * @param _amount Number of keys to remove\\n      */\\n    function removeSigningKeysOperatorBH(uint256 _operator_id, uint256 _index, uint256 _amount) external {\\n        require(msg.sender == operators[_operator_id].rewardAddress, \\\"APP_AUTH_FAILED\\\");\\n        // removing from the last index to the highest one, so we won't get outside the array\\n        for (uint256 i = _index + _amount; i > _index ; --i) {\\n            _removeSigningKey(_operator_id, i - 1);\\n        }\\n    }\\n\\n    /**\\n     * @notice Selects and returns at most `_numKeys` signing keys (as well as the corresponding\\n     *         signatures) from the set of active keys and marks the selected keys as used.\\n     *         May only be called by the Lido contract.\\n     *\\n     * @param _numKeys The number of keys to select. The actual number of selected keys may be less\\n     *        due to the lack of active keys.\\n     */\\n    function assignNextSigningKeys(uint256 _numKeys) external onlyLido returns (bytes memory pubkeys, bytes memory signatures) {\\n        // Memory is very cheap, although you don't want to grow it too much\\n        DepositLookupCacheEntry[] memory cache = _loadOperatorCache();\\n        if (0 == cache.length)\\n            return (new bytes(0), new bytes(0));\\n\\n        uint256 numAssignedKeys = 0;\\n        DepositLookupCacheEntry memory entry;\\n\\n        while (numAssignedKeys < _numKeys) {\\n            // Finding the best suitable operator\\n            uint256 bestOperatorIdx = cache.length;   // 'not found' flag\\n            uint256 smallestStake;\\n            // The loop is ligthweight comparing to an ether transfer and .deposit invocation\\n            for (uint256 idx = 0; idx < cache.length; ++idx) {\\n                entry = cache[idx];\\n\\n                assert(entry.usedSigningKeys <= entry.totalSigningKeys);\\n                if (entry.usedSigningKeys == entry.totalSigningKeys)\\n                    continue;\\n\\n                uint256 stake = entry.usedSigningKeys.sub(entry.stoppedValidators);\\n                if (stake + 1 > entry.stakingLimit)\\n                    continue;\\n\\n                if (bestOperatorIdx == cache.length || stake < smallestStake) {\\n                    bestOperatorIdx = idx;\\n                    smallestStake = stake;\\n                }\\n            }\\n\\n            if (bestOperatorIdx == cache.length)  // not found\\n                break;\\n\\n            entry = cache[bestOperatorIdx];\\n            assert(entry.usedSigningKeys < UINT64_MAX);\\n\\n            ++entry.usedSigningKeys;\\n            ++numAssignedKeys;\\n        }\\n\\n        if (numAssignedKeys == 0) {\\n            return (new bytes(0), new bytes(0));\\n        }\\n\\n        if (numAssignedKeys > 1) {\\n            // we can allocate without zeroing out since we're going to rewrite the whole array\\n            pubkeys = MemUtils.unsafeAllocateBytes(numAssignedKeys * PUBKEY_LENGTH);\\n            signatures = MemUtils.unsafeAllocateBytes(numAssignedKeys * SIGNATURE_LENGTH);\\n        }\\n\\n        uint256 numLoadedKeys = 0;\\n\\n        for (uint256 i = 0; i < cache.length; ++i) {\\n            entry = cache[i];\\n\\n            if (entry.usedSigningKeys == entry.initialUsedSigningKeys) {\\n                continue;\\n            }\\n\\n            operators[entry.id].usedSigningKeys = uint64(entry.usedSigningKeys);\\n\\n            for (uint256 keyIndex = entry.initialUsedSigningKeys; keyIndex < entry.usedSigningKeys; ++keyIndex) {\\n                (bytes memory pubkey, bytes memory signature) = _loadSigningKey(entry.id, keyIndex);\\n                if (numAssignedKeys == 1) {\\n                    return (pubkey, signature);\\n                } else {\\n                    MemUtils.copyBytes(pubkey, pubkeys, numLoadedKeys * PUBKEY_LENGTH);\\n                    MemUtils.copyBytes(signature, signatures, numLoadedKeys * SIGNATURE_LENGTH);\\n                    ++numLoadedKeys;\\n                }\\n            }\\n\\n            if (numLoadedKeys == numAssignedKeys) {\\n                break;\\n            }\\n        }\\n\\n        assert(numLoadedKeys == numAssignedKeys);\\n        return (pubkeys, signatures);\\n    }\\n\\n    /**\\n      * @notice Returns the rewards distribution proportional to the effective stake for each node operator.\\n      * @param _totalRewardShares Total amount of reward shares to distribute.\\n      */\\n    function getRewardsDistribution(uint256 _totalRewardShares) external view\\n        returns (\\n            address[] memory recipients,\\n            uint256[] memory shares\\n        )\\n    {\\n        uint256 nodeOperatorCount = getNodeOperatorsCount();\\n\\n        uint256 activeCount = getActiveNodeOperatorsCount();\\n        recipients = new address[](activeCount);\\n        shares = new uint256[](activeCount);\\n        uint256 idx = 0;\\n\\n        uint256 effectiveStakeTotal = 0;\\n        for (uint256 operatorId = 0; operatorId < nodeOperatorCount; ++operatorId) {\\n            NodeOperator storage operator = operators[operatorId];\\n            if (!operator.active)\\n                continue;\\n\\n            uint256 effectiveStake = operator.usedSigningKeys.sub(operator.stoppedValidators);\\n            effectiveStakeTotal = effectiveStakeTotal.add(effectiveStake);\\n\\n            recipients[idx] = operator.rewardAddress;\\n            shares[idx] = effectiveStake;\\n\\n            ++idx;\\n        }\\n\\n        if (effectiveStakeTotal == 0)\\n            return (recipients, shares);\\n\\n        uint256 perValidatorReward = _totalRewardShares.div(effectiveStakeTotal);\\n\\n        for (idx = 0; idx < activeCount; ++idx) {\\n            shares[idx] = shares[idx].mul(perValidatorReward);\\n        }\\n\\n        return (recipients, shares);\\n    }\\n\\n    /**\\n      * @notice Returns number of active node operators\\n      */\\n    function getActiveNodeOperatorsCount() public view returns (uint256) {\\n        return ACTIVE_OPERATORS_COUNT_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n      * @notice Returns the n-th node operator\\n      * @param _id Node Operator id\\n      * @param _fullInfo If true, name will be returned as well\\n      */\\n    function getNodeOperator(uint256 _id, bool _fullInfo) external view\\n        operatorExists(_id)\\n        returns\\n        (\\n            bool active,\\n            string name,\\n            address rewardAddress,\\n            uint64 stakingLimit,\\n            uint64 stoppedValidators,\\n            uint64 totalSigningKeys,\\n            uint64 usedSigningKeys\\n        )\\n    {\\n        NodeOperator storage operator = operators[_id];\\n\\n        active = operator.active;\\n        name = _fullInfo ? operator.name : \\\"\\\";    // reading name is 2+ SLOADs\\n        rewardAddress = operator.rewardAddress;\\n        stakingLimit = operator.stakingLimit;\\n        stoppedValidators = operator.stoppedValidators;\\n        totalSigningKeys = operator.totalSigningKeys;\\n        usedSigningKeys = operator.usedSigningKeys;\\n    }\\n\\n    /**\\n      * @notice Returns total number of signing keys of the node operator #`_operator_id`\\n      */\\n    function getTotalSigningKeyCount(uint256 _operator_id) external view operatorExists(_operator_id) returns (uint256) {\\n        return operators[_operator_id].totalSigningKeys;\\n    }\\n\\n    /**\\n      * @notice Returns number of usable signing keys of the node operator #`_operator_id`\\n      */\\n    function getUnusedSigningKeyCount(uint256 _operator_id) external view operatorExists(_operator_id) returns (uint256) {\\n        return operators[_operator_id].totalSigningKeys.sub(operators[_operator_id].usedSigningKeys);\\n    }\\n\\n    /**\\n      * @notice Returns n-th signing key of the node operator #`_operator_id`\\n      * @param _operator_id Node Operator id\\n      * @param _index Index of the key, starting with 0\\n      * @return key Key\\n      * @return depositSignature Signature needed for a deposit_contract.deposit call\\n      * @return used Flag indication if the key was used in the staking\\n      */\\n    function getSigningKey(uint256 _operator_id, uint256 _index) external view\\n        operatorExists(_operator_id)\\n        returns (bytes key, bytes depositSignature, bool used)\\n    {\\n        require(_index < operators[_operator_id].totalSigningKeys, \\\"KEY_NOT_FOUND\\\");\\n\\n        (bytes memory key_, bytes memory signature) = _loadSigningKey(_operator_id, _index);\\n\\n        return (key_, signature, _index < operators[_operator_id].usedSigningKeys);\\n    }\\n\\n    /**\\n      * @notice Returns total number of node operators\\n      */\\n    function getNodeOperatorsCount() public view returns (uint256) {\\n        return TOTAL_OPERATORS_COUNT_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n     * @notice Returns a monotonically increasing counter that gets incremented when any of the following happens:\\n     *   1. a node operator's key(s) is added;\\n     *   2. a node operator's key(s) is removed;\\n     *   3. a node operator's approved keys limit is changed.\\n     *   4. a node operator was activated/deactivated. Activation or deactivation of node operator\\n     *      might lead to usage of unvalidated keys in the assignNextSigningKeys method.\\n     */\\n    function getKeysOpIndex() public view returns (uint256) {\\n        return KEYS_OP_INDEX_POSITION.getStorageUint256();\\n    }\\n\\n    function _isEmptySigningKey(bytes memory _key) internal pure returns (bool) {\\n        assert(_key.length == PUBKEY_LENGTH);\\n        // algorithm applicability constraint\\n        assert(PUBKEY_LENGTH >= 32 && PUBKEY_LENGTH <= 64);\\n\\n        uint256 k1;\\n        uint256 k2;\\n        assembly {\\n            k1 := mload(add(_key, 0x20))\\n            k2 := mload(add(_key, 0x40))\\n        }\\n\\n        return 0 == k1 && 0 == (k2 >> ((2 * 32 - PUBKEY_LENGTH) * 8));\\n    }\\n\\n    function to64(uint256 v) internal pure returns (uint64) {\\n        assert(v <= uint256(uint64(-1)));\\n        return uint64(v);\\n    }\\n\\n    function _signingKeyOffset(uint256 _operator_id, uint256 _keyIndex) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(SIGNING_KEYS_MAPPING_NAME, _operator_id, _keyIndex)));\\n    }\\n\\n    function _storeSigningKey(uint256 _operator_id, uint256 _keyIndex, bytes memory _key, bytes memory _signature) internal {\\n        assert(_key.length == PUBKEY_LENGTH);\\n        assert(_signature.length == SIGNATURE_LENGTH);\\n        // algorithm applicability constraints\\n        assert(PUBKEY_LENGTH >= 32 && PUBKEY_LENGTH <= 64);\\n        assert(0 == SIGNATURE_LENGTH % 32);\\n\\n        // key\\n        uint256 offset = _signingKeyOffset(_operator_id, _keyIndex);\\n        uint256 keyExcessBits = (2 * 32 - PUBKEY_LENGTH) * 8;\\n        assembly {\\n            sstore(offset, mload(add(_key, 0x20)))\\n            sstore(add(offset, 1), shl(keyExcessBits, shr(keyExcessBits, mload(add(_key, 0x40)))))\\n        }\\n        offset += 2;\\n\\n        // signature\\n        for (uint256 i = 0; i < SIGNATURE_LENGTH; i += 32) {\\n            assembly {\\n                sstore(offset, mload(add(_signature, add(0x20, i))))\\n            }\\n            offset++;\\n        }\\n    }\\n\\n    function _addSigningKeys(uint256 _operator_id, uint256 _quantity, bytes _pubkeys, bytes _signatures) internal\\n        operatorExists(_operator_id)\\n    {\\n        require(_quantity != 0, \\\"NO_KEYS\\\");\\n        require(_pubkeys.length == _quantity.mul(PUBKEY_LENGTH), \\\"INVALID_LENGTH\\\");\\n        require(_signatures.length == _quantity.mul(SIGNATURE_LENGTH), \\\"INVALID_LENGTH\\\");\\n\\n        _increaseKeysOpIndex();\\n\\n        for (uint256 i = 0; i < _quantity; ++i) {\\n            bytes memory key = BytesLib.slice(_pubkeys, i * PUBKEY_LENGTH, PUBKEY_LENGTH);\\n            require(!_isEmptySigningKey(key), \\\"EMPTY_KEY\\\");\\n            bytes memory sig = BytesLib.slice(_signatures, i * SIGNATURE_LENGTH, SIGNATURE_LENGTH);\\n\\n            _storeSigningKey(_operator_id, operators[_operator_id].totalSigningKeys + i, key, sig);\\n            emit SigningKeyAdded(_operator_id, key);\\n        }\\n\\n        operators[_operator_id].totalSigningKeys = operators[_operator_id].totalSigningKeys.add(to64(_quantity));\\n    }\\n\\n    function _removeSigningKey(uint256 _operator_id, uint256 _index) internal\\n        operatorExists(_operator_id)\\n    {\\n        require(_index < operators[_operator_id].totalSigningKeys, \\\"KEY_NOT_FOUND\\\");\\n        require(_index >= operators[_operator_id].usedSigningKeys, \\\"KEY_WAS_USED\\\");\\n\\n        _increaseKeysOpIndex();\\n\\n        (bytes memory removedKey, ) = _loadSigningKey(_operator_id, _index);\\n\\n        uint256 lastIndex = operators[_operator_id].totalSigningKeys.sub(1);\\n        if (_index < lastIndex) {\\n            (bytes memory key, bytes memory signature) = _loadSigningKey(_operator_id, lastIndex);\\n            _storeSigningKey(_operator_id, _index, key, signature);\\n        }\\n\\n        _deleteSigningKey(_operator_id, lastIndex);\\n        operators[_operator_id].totalSigningKeys = operators[_operator_id].totalSigningKeys.sub(1);\\n\\n        if (_index < operators[_operator_id].stakingLimit) {\\n            // decreasing the staking limit so the key at _index can't be used anymore\\n            operators[_operator_id].stakingLimit = uint64(_index);\\n        }\\n\\n        emit SigningKeyRemoved(_operator_id, removedKey);\\n    }\\n\\n    function _deleteSigningKey(uint256 _operator_id, uint256 _keyIndex) internal {\\n        uint256 offset = _signingKeyOffset(_operator_id, _keyIndex);\\n        for (uint256 i = 0; i < (PUBKEY_LENGTH + SIGNATURE_LENGTH) / 32 + 1; ++i) {\\n            assembly {\\n                sstore(add(offset, i), 0)\\n            }\\n        }\\n    }\\n\\n    function _loadSigningKey(uint256 _operator_id, uint256 _keyIndex) internal view returns (bytes memory key, bytes memory signature) {\\n        // algorithm applicability constraints\\n        assert(PUBKEY_LENGTH >= 32 && PUBKEY_LENGTH <= 64);\\n        assert(0 == SIGNATURE_LENGTH % 32);\\n\\n        uint256 offset = _signingKeyOffset(_operator_id, _keyIndex);\\n\\n        // key\\n        bytes memory tmpKey = new bytes(64);\\n        assembly {\\n            mstore(add(tmpKey, 0x20), sload(offset))\\n            mstore(add(tmpKey, 0x40), sload(add(offset, 1)))\\n        }\\n        offset += 2;\\n        key = BytesLib.slice(tmpKey, 0, PUBKEY_LENGTH);\\n\\n        // signature\\n        signature = new bytes(SIGNATURE_LENGTH);\\n        for (uint256 i = 0; i < SIGNATURE_LENGTH; i += 32) {\\n            assembly {\\n                mstore(add(signature, add(0x20, i)), sload(offset))\\n            }\\n            offset++;\\n        }\\n\\n        return (key, signature);\\n    }\\n\\n    function _loadOperatorCache() internal view returns (DepositLookupCacheEntry[] memory cache) {\\n        cache = new DepositLookupCacheEntry[](getActiveNodeOperatorsCount());\\n        if (0 == cache.length)\\n            return cache;\\n\\n        uint256 totalOperators = getNodeOperatorsCount();\\n        uint256 idx = 0;\\n        for (uint256 operatorId = 0; operatorId < totalOperators; ++operatorId) {\\n            NodeOperator storage operator = operators[operatorId];\\n\\n            if (!operator.active)\\n                continue;\\n\\n            DepositLookupCacheEntry memory entry = cache[idx++];\\n            entry.id = operatorId;\\n            entry.stakingLimit = operator.stakingLimit;\\n            entry.stoppedValidators = operator.stoppedValidators;\\n            entry.totalSigningKeys = operator.totalSigningKeys;\\n            entry.usedSigningKeys = operator.usedSigningKeys;\\n            entry.initialUsedSigningKeys = entry.usedSigningKeys;\\n        }\\n        require(idx == cache.length, \\\"INCOSISTENT_ACTIVE_COUNT\\\");\\n\\n        return cache;\\n    }\\n\\n    function _increaseKeysOpIndex() internal {\\n        uint256 keysOpIndex = getKeysOpIndex();\\n        KEYS_OP_INDEX_POSITION.setStorageUint256(keysOpIndex + 1);\\n        emit KeysOpIndexSet(keysOpIndex + 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/apps/AragonApp.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\nimport \\\"../common/Autopetrified.sol\\\";\\nimport \\\"../common/ConversionHelpers.sol\\\";\\nimport \\\"../common/ReentrancyGuard.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../evmscript/EVMScriptRunner.sol\\\";\\n\\n\\n// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\\n// that they can never be initialized.\\n// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\\n// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\\n// are included so that they are automatically usable by subclassing contracts\\ncontract AragonApp is AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\\n    string private constant ERROR_AUTH_FAILED = \\\"APP_AUTH_FAILED\\\";\\n\\n    modifier auth(bytes32 _role) {\\n        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    modifier authP(bytes32 _role, uint256[] _params) {\\n        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\\n    * @param _sender Sender of the call\\n    * @param _role Role on this app\\n    * @param _params Permission params for the role\\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\\n    *         Always returns false if the app hasn't been initialized yet.\\n    */\\n    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\\n        if (!hasInitialized()) {\\n            return false;\\n        }\\n\\n        IKernel linkedKernel = kernel();\\n        if (address(linkedKernel) == address(0)) {\\n            return false;\\n        }\\n\\n        return linkedKernel.hasPermission(\\n            _sender,\\n            address(this),\\n            _role,\\n            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\\n        );\\n    }\\n\\n    /**\\n    * @dev Get the recovery vault for the app\\n    * @return Recovery vault address for the app\\n    */\\n    function getRecoveryVault() public view returns (address) {\\n        // Funds recovery via a vault is only available when used with a kernel\\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/IsContract.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract IsContract {\\n    /*\\n    * NOTE: this should NEVER be used for authentication\\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\\n    *\\n    * This is only intended to be used as a sanity check that an address is actually a contract,\\n    * RATHER THAN an address not being a contract.\\n    */\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/lib/math/SafeMath.sol\": {\r\n      \"content\": \"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\\n// Adapted to use pragma ^0.4.24 and satisfy our linter rules\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    string private constant ERROR_ADD_OVERFLOW = \\\"MATH_ADD_OVERFLOW\\\";\\n    string private constant ERROR_SUB_UNDERFLOW = \\\"MATH_SUB_UNDERFLOW\\\";\\n    string private constant ERROR_MUL_OVERFLOW = \\\"MATH_MUL_OVERFLOW\\\";\\n    string private constant ERROR_DIV_ZERO = \\\"MATH_DIV_ZERO\\\";\\n\\n    /**\\n    * @dev Multiplies two numbers, reverts on overflow.\\n    */\\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (_a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = _a * _b;\\n        require(c / _a == _b, ERROR_MUL_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\\n        uint256 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\\n        uint256 c = _a - _b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, reverts on overflow.\\n    */\\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        uint256 c = _a + _b;\\n        require(c >= _a, ERROR_ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, ERROR_DIV_ZERO);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/lib/math/SafeMath64.sol\": {\r\n      \"content\": \"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\\n// Adapted for uint64, pragma ^0.4.24, and satisfying our linter rules\\n// Also optimized the mul() implementation, see https://github.com/aragon/aragonOS/pull/417\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath64\\n * @dev Math operations for uint64 with safety checks that revert on error\\n */\\nlibrary SafeMath64 {\\n    string private constant ERROR_ADD_OVERFLOW = \\\"MATH64_ADD_OVERFLOW\\\";\\n    string private constant ERROR_SUB_UNDERFLOW = \\\"MATH64_SUB_UNDERFLOW\\\";\\n    string private constant ERROR_MUL_OVERFLOW = \\\"MATH64_MUL_OVERFLOW\\\";\\n    string private constant ERROR_DIV_ZERO = \\\"MATH64_DIV_ZERO\\\";\\n\\n    /**\\n    * @dev Multiplies two numbers, reverts on overflow.\\n    */\\n    function mul(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        uint256 c = uint256(_a) * uint256(_b);\\n        require(c < 0x010000000000000000, ERROR_MUL_OVERFLOW); // 2**64 (less gas this way)\\n\\n        return uint64(c);\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\\n        uint64 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\\n        uint64 c = _a - _b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, reverts on overflow.\\n    */\\n    function add(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        uint64 c = _a + _b;\\n        require(c >= _a, ERROR_ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint64 a, uint64 b) internal pure returns (uint64) {\\n        require(b != 0, ERROR_DIV_ZERO);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"solidity-bytes-utils/contracts/BytesLib.sol\": {\r\n      \"content\": \"/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\n\\npragma solidity ^0.4.19;\\n\\n\\nlibrary BytesLib {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add \\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes_slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes_slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes_slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes_slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes_slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes_slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n                \\n                for { \\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(bytes _bytes, uint _start, uint _length) internal  pure returns (bytes) {\\n        require(_bytes.length >= (_start + _length));\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes _bytes, uint _start) internal  pure returns (address) {\\n        require(_bytes.length >= (_start + 20));\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes _bytes, uint _start) internal  pure returns (uint8) {\\n        require(_bytes.length >= (_start + 1));\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes _bytes, uint _start) internal  pure returns (uint16) {\\n        require(_bytes.length >= (_start + 2));\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes _bytes, uint _start) internal  pure returns (uint32) {\\n        require(_bytes.length >= (_start + 4));\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint(bytes _bytes, uint _start) internal  pure returns (uint256) {\\n        require(_bytes.length >= (_start + 32));\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes _bytes, uint _start) internal  pure returns (bytes32) {\\n        require(_bytes.length >= (_start + 32));\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes_slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes_slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/MemUtils.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2020 Lido <info@lido.fi>\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\n/* See contracts/COMPILERS.md */\\npragma solidity 0.4.24;\\n\\n\\nlibrary MemUtils {\\n    /**\\n     * @dev Allocates a memory byte array of `_len` bytes without zeroing it out.\\n     */\\n    function unsafeAllocateBytes(uint256 _len) internal pure returns (bytes memory result) {\\n        assembly {\\n            result := mload(0x40)\\n            mstore(result, _len)\\n            mstore(0x40, add(add(result, _len), 32))\\n        }\\n    }\\n\\n    /**\\n     * Performs a memory copy of `_len` bytes from position `_src` to position `_dst`.\\n     */\\n    function memcpy(uint256 _src, uint256 _dst, uint256 _len) internal pure {\\n        assembly {\\n            // while al least 32 bytes left, copy in 32-byte chunks\\n            for { } gt(_len, 31) { } {\\n                mstore(_dst, mload(_src))\\n                _src := add(_src, 32)\\n                _dst := add(_dst, 32)\\n                _len := sub(_len, 32)\\n            }\\n            if gt(_len, 0) {\\n                // read the next 32-byte chunk from _dst, replace the first N bytes\\n                // with those left in the _src, and write the transformed chunk back\\n                let mask := sub(shl(1, mul(8, sub(32, _len))), 1) // 2 ** (8 * (32 - _len)) - 1\\n                let srcMasked := and(mload(_src), not(mask))\\n                let dstMasked := and(mload(_dst), mask)\\n                mstore(_dst, or(dstMasked, srcMasked))\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Copies bytes from `_src` to `_dst`, starting at position `_dstStart` into `_dst`.\\n     */\\n    function copyBytes(bytes memory _src, bytes memory _dst, uint256 _dstStart) internal pure {\\n        require(_dstStart + _src.length <= _dst.length, \\\"BYTES_ARRAY_OUT_OF_BOUNDS\\\");\\n        uint256 srcStartPos;\\n        uint256 dstStartPos;\\n        assembly {\\n            srcStartPos := add(_src, 32)\\n            dstStartPos := add(add(_dst, 32), _dstStart)\\n        }\\n        memcpy(srcStartPos, dstStartPos, _src.length);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/apps/AppStorage.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_POSITION = keccak256(\\\"aragonOS.appStorage.kernel\\\");\\n    bytes32 internal constant APP_ID_POSITION = keccak256(\\\"aragonOS.appStorage.appId\\\");\\n    */\\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\\n\\n    function kernel() public view returns (IKernel) {\\n        return IKernel(KERNEL_POSITION.getStorageAddress());\\n    }\\n\\n    function appId() public view returns (bytes32) {\\n        return APP_ID_POSITION.getStorageBytes32();\\n    }\\n\\n    function setKernel(IKernel _kernel) internal {\\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\\n    }\\n\\n    function setAppId(bytes32 _appId) internal {\\n        APP_ID_POSITION.setStorageBytes32(_appId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/acl/ACLSyntaxSugar.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ACLSyntaxSugar {\\n    function arr() internal pure returns (uint256[]) {\\n        return new uint256[](0);\\n    }\\n\\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c);\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c, _d);\\n    }\\n\\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\\n    }\\n\\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\\n        r = new uint256[](1);\\n        r[0] = _a;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\\n        r = new uint256[](2);\\n        r[0] = _a;\\n        r[1] = _b;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        r = new uint256[](3);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        r = new uint256[](4);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        r = new uint256[](5);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n        r[4] = _e;\\n    }\\n}\\n\\n\\ncontract ACLHelpers {\\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 30));\\n    }\\n\\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 31));\\n    }\\n\\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\\n        a = uint32(_x);\\n        b = uint32(_x >> (8 * 4));\\n        c = uint32(_x >> (8 * 8));\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/Autopetrified.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Petrifiable.sol\\\";\\n\\n\\ncontract Autopetrified is Petrifiable {\\n    constructor() public {\\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\\n        // This renders them uninitializable (and unusable without a proxy).\\n        petrify();\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/ConversionHelpers.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.24;\\n\\n\\nlibrary ConversionHelpers {\\n    string private constant ERROR_IMPROPER_LENGTH = \\\"CONVERSION_IMPROPER_LENGTH\\\";\\n\\n    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\\n        // Force cast the uint256[] into a bytes array, by overwriting its length\\n        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 byteLength = _input.length * 32;\\n        assembly {\\n            output := _input\\n            mstore(output, byteLength)\\n        }\\n    }\\n\\n    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\\n        // Force cast the bytes array into a uint256[], by overwriting its length\\n        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 intsLength = _input.length / 32;\\n        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\\n\\n        assembly {\\n            output := _input\\n            mstore(output, intsLength)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/ReentrancyGuard.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\n\\n\\ncontract ReentrancyGuard {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256(\\\"aragonOS.reentrancyGuard.mutex\\\");\\n    */\\n    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\\n\\n    string private constant ERROR_REENTRANT = \\\"REENTRANCY_REENTRANT_CALL\\\";\\n\\n    modifier nonReentrant() {\\n        // Ensure mutex is unlocked\\n        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\\n\\n        // Lock mutex before function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\\n\\n        // Perform function call\\n        _;\\n\\n        // Unlock mutex after function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/VaultRecoverable.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\nimport \\\"./EtherTokenConstant.sol\\\";\\nimport \\\"./IsContract.sol\\\";\\nimport \\\"./IVaultRecoverable.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\n\\n\\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\\n    using SafeERC20 for ERC20;\\n\\n    string private constant ERROR_DISALLOWED = \\\"RECOVER_DISALLOWED\\\";\\n    string private constant ERROR_VAULT_NOT_CONTRACT = \\\"RECOVER_VAULT_NOT_CONTRACT\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_FAILED = \\\"RECOVER_TOKEN_TRANSFER_FAILED\\\";\\n\\n    /**\\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\\n     *         but in case it does, this function allows one to recover them.\\n     * @param _token Token balance to be sent to recovery vault.\\n     */\\n    function transferToVault(address _token) external {\\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\\n        address vault = getRecoveryVault();\\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\\n\\n        uint256 balance;\\n        if (_token == ETH) {\\n            balance = address(this).balance;\\n            vault.transfer(balance);\\n        } else {\\n            ERC20 token = ERC20(_token);\\n            balance = token.staticBalanceOf(this);\\n            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\\n        }\\n\\n        emit RecoverToVault(vault, _token, balance);\\n    }\\n\\n    /**\\n    * @dev By default deriving from AragonApp makes it recoverable\\n    * @param token Token address that would be recovered\\n    * @return bool whether the app allows the recovery\\n    */\\n    function allowRecoverability(address token) public view returns (bool) {\\n        return true;\\n    }\\n\\n    // Cast non-implemented interface to be public so we can use it internally\\n    function getRecoveryVault() public view returns (address);\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/evmscript/EVMScriptRunner.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\nimport \\\"../kernel/KernelConstants.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\n\\n\\ncontract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\\n    string private constant ERROR_EXECUTOR_UNAVAILABLE = \\\"EVMRUN_EXECUTOR_UNAVAILABLE\\\";\\n    string private constant ERROR_PROTECTED_STATE_MODIFIED = \\\"EVMRUN_PROTECTED_STATE_MODIFIED\\\";\\n\\n    /* This is manually crafted in assembly\\n    string private constant ERROR_EXECUTOR_INVALID_RETURN = \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\";\\n    */\\n\\n    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\\n\\n    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\\n    }\\n\\n    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\\n        return IEVMScriptRegistry(registryAddr);\\n    }\\n\\n    function runScript(bytes _script, bytes _input, address[] _blacklist)\\n        internal\\n        isInitialized\\n        protectState\\n        returns (bytes)\\n    {\\n        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\\n\\n        bytes4 sig = executor.execScript.selector;\\n        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\\n\\n        bytes memory output;\\n        assembly {\\n            let success := delegatecall(\\n                gas,                // forward all gas\\n                executor,           // address\\n                add(data, 0x20),    // calldata start\\n                mload(data),        // calldata length\\n                0,                  // don't write output (we'll handle this ourselves)\\n                0                   // don't write output\\n            )\\n\\n            output := mload(0x40) // free mem ptr get\\n\\n            switch success\\n            case 0 {\\n                // If the call errored, forward its full error data\\n                returndatacopy(output, 0, returndatasize)\\n                revert(output, returndatasize)\\n            }\\n            default {\\n                switch gt(returndatasize, 0x3f)\\n                case 0 {\\n                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\\n                    // revert with \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\"\\n                    // See remix: doing a `revert(\\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\")` always results in\\n                    // this memory layout\\n                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\\n                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\\n                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\\n                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\\n\\n                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\\n                }\\n                default {\\n                    // Copy result\\n                    //\\n                    // Needs to perform an ABI decode for the expected `bytes` return type of\\n                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\\n                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\\n                    //    [ output length (32 bytes) ]\\n                    //    [ output content (N bytes) ]\\n                    //\\n                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\\n                    let copysize := sub(returndatasize, 0x20)\\n                    returndatacopy(output, 0x20, copysize)\\n\\n                    mstore(0x40, add(output, copysize)) // free mem ptr set\\n                }\\n            }\\n        }\\n\\n        emit ScriptResult(address(executor), _script, _input, output);\\n\\n        return output;\\n    }\\n\\n    modifier protectState {\\n        address preKernel = address(kernel());\\n        bytes32 preAppId = appId();\\n        _; // exec\\n        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\\n        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/UnstructuredStorage.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/kernel/IKernel.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\ninterface IKernelEvents {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\\n}\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IKernelEvents, IVaultRecoverable {\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/acl/IACL.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/IVaultRecoverable.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IVaultRecoverable {\\n    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\\n\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) external view returns (bool);\\n    function getRecoveryVault() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/Petrifiable.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\n\\ncontract Petrifiable is Initializable {\\n    // Use block UINT256_MAX (which should be never) as the initializable date\\n    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\\n\\n    function isPetrified() public view returns (bool) {\\n        return getInitializationBlock() == PETRIFIED_BLOCK;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract to prevent being initialized.\\n    *      Useful for freezing base contracts when they're used behind proxies.\\n    */\\n    function petrify() internal onlyInit {\\n        initializedAt(PETRIFIED_BLOCK);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/Initializable.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./TimeHelpers.sol\\\";\\nimport \\\"./UnstructuredStorage.sol\\\";\\n\\n\\ncontract Initializable is TimeHelpers {\\n    using UnstructuredStorage for bytes32;\\n\\n    // keccak256(\\\"aragonOS.initializable.initializationBlock\\\")\\n    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\\n\\n    string private constant ERROR_ALREADY_INITIALIZED = \\\"INIT_ALREADY_INITIALIZED\\\";\\n    string private constant ERROR_NOT_INITIALIZED = \\\"INIT_NOT_INITIALIZED\\\";\\n\\n    modifier onlyInit {\\n        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\\n        _;\\n    }\\n\\n    modifier isInitialized {\\n        require(hasInitialized(), ERROR_NOT_INITIALIZED);\\n        _;\\n    }\\n\\n    /**\\n    * @return Block number in which the contract was initialized\\n    */\\n    function getInitializationBlock() public view returns (uint256) {\\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n    * @return Whether the contract has been initialized by the time of the current block\\n    */\\n    function hasInitialized() public view returns (bool) {\\n        uint256 initializationBlock = getInitializationBlock();\\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization has finished.\\n    */\\n    function initialized() internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization to enable the contract\\n    *      at a future block number rather than immediately.\\n    */\\n    function initializedAt(uint256 _blockNumber) internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/TimeHelpers.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Uint256Helpers.sol\\\";\\n\\n\\ncontract TimeHelpers {\\n    using Uint256Helpers for uint256;\\n\\n    /**\\n    * @dev Returns the current block number.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n    * @dev Returns the current block number, converted to uint64.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber64() internal view returns (uint64) {\\n        return getBlockNumber().toUint64();\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp() internal view returns (uint256) {\\n        return block.timestamp; // solium-disable-line security/no-block-members\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp, converted to uint64.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp64() internal view returns (uint64) {\\n        return getTimestamp().toUint64();\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/Uint256Helpers.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.24;\\n\\n\\nlibrary Uint256Helpers {\\n    uint256 private constant MAX_UINT64 = uint64(-1);\\n\\n    string private constant ERROR_NUMBER_TOO_BIG = \\\"UINT64_NUMBER_TOO_BIG\\\";\\n\\n    function toUint64(uint256 a) internal pure returns (uint64) {\\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\\n        return uint64(a);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/lib/token/ERC20.sol\": {\r\n      \"content\": \"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 {\\n    function totalSupply() public view returns (uint256);\\n\\n    function balanceOf(address _who) public view returns (uint256);\\n\\n    function allowance(address _owner, address _spender)\\n        public view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) public returns (bool);\\n\\n    function approve(address _spender, uint256 _value)\\n        public returns (bool);\\n\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        public returns (bool);\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/EtherTokenConstant.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\\n// contracts where both tokens and ETH are accepted\\ncontract EtherTokenConstant {\\n    address internal constant ETH = address(0);\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/SafeERC20.sol\": {\r\n      \"content\": \"// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\n\\n\\nlibrary SafeERC20 {\\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\\n    // https://github.com/ethereum/solidity/issues/3544\\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\\n\\n    string private constant ERROR_TOKEN_BALANCE_REVERTED = \\\"SAFE_ERC_20_BALANCE_REVERTED\\\";\\n    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = \\\"SAFE_ERC_20_ALLOWANCE_REVERTED\\\";\\n\\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\\n        private\\n        returns (bool)\\n    {\\n        bool ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            let success := call(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                0,                    // no value\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                // Check number of bytes returned from last function call\\n                switch returndatasize\\n\\n                // No bytes returned: assume success\\n                case 0 {\\n                    ret := 1\\n                }\\n\\n                // 32 bytes returned: check if non-zero\\n                case 0x20 {\\n                    // Only return success if returned data was true\\n                    // Already have output in ptr\\n                    ret := eq(mload(ptr), 1)\\n                }\\n\\n                // Not sure what was returned: don't mark as success\\n                default { }\\n            }\\n        }\\n        return ret;\\n    }\\n\\n    function staticInvoke(address _addr, bytes memory _calldata)\\n        private\\n        view\\n        returns (bool, uint256)\\n    {\\n        bool success;\\n        uint256 ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            success := staticcall(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                ret := mload(ptr)\\n            }\\n        }\\n        return (success, ret);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferCallData = abi.encodeWithSelector(\\n            TRANSFER_SELECTOR,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferFromCallData = abi.encodeWithSelector(\\n            _token.transferFrom.selector,\\n            _from,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferFromCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\\n        bytes memory approveCallData = abi.encodeWithSelector(\\n            _token.approve.selector,\\n            _spender,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, approveCallData);\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.balanceOf().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\\n        bytes memory balanceOfCallData = abi.encodeWithSelector(\\n            _token.balanceOf.selector,\\n            _owner\\n        );\\n\\n        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\\n        require(success, ERROR_TOKEN_BALANCE_REVERTED);\\n\\n        return tokenBalance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.allowance().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\\n        bytes memory allowanceCallData = abi.encodeWithSelector(\\n            _token.allowance.selector,\\n            _owner,\\n            _spender\\n        );\\n\\n        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return allowance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.totalSupply().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticTotalSupply(ERC20 _token) internal view returns (uint256) {\\n        bytes memory totalSupplyCallData = abi.encodeWithSelector(_token.totalSupply.selector);\\n\\n        (bool success, uint256 totalSupply) = staticInvoke(_token, totalSupplyCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return totalSupply;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IEVMScriptExecutor {\\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\\n    function executorType() external pure returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\n\\n\\ncontract EVMScriptRegistryConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\\\"evmreg\\\");\\n    */\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\\n}\\n\\n\\ninterface IEVMScriptRegistry {\\n    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\\n    function disableScriptExecutor(uint256 executorId) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/kernel/KernelConstants.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract KernelAppIds {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\\\"kernel\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\\\"acl\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\\\"vault\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\\n}\\n\\n\\ncontract KernelNamespaceConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\\\"core\\\");\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\\\"base\\\");\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"constantinople\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator_id\",\"type\":\"uint256\"},{\"name\":\"_quantity\",\"type\":\"uint256\"},{\"name\":\"_pubkeys\",\"type\":\"bytes\"},{\"name\":\"_signatures\",\"type\":\"bytes\"}],\"name\":\"addSigningKeys\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numKeys\",\"type\":\"uint256\"}],\"name\":\"assignNextSigningKeys\",\"outputs\":[{\"name\":\"pubkeys\",\"type\":\"bytes\"},{\"name\":\"signatures\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SIGNATURE_LENGTH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SET_NODE_OPERATOR_ADDRESS_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator_id\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeSigningKeysOperatorBH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setNodeOperatorName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_totalRewardShares\",\"type\":\"uint256\"}],\"name\":\"getRewardsDistribution\",\"outputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"shares\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setNodeOperatorActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SET_NODE_OPERATOR_NAME_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator_id\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removeSigningKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator_id\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeSigningKeys\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADD_NODE_OPERATOR_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator_id\",\"type\":\"uint256\"},{\"name\":\"_quantity\",\"type\":\"uint256\"},{\"name\":\"_pubkeys\",\"type\":\"bytes\"},{\"name\":\"_signatures\",\"type\":\"bytes\"}],\"name\":\"addSigningKeysOperatorBH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getActiveNodeOperatorsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"addNodeOperator\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator_id\",\"type\":\"uint256\"}],\"name\":\"getUnusedSigningKeyCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"setNodeOperatorRewardAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_fullInfo\",\"type\":\"bool\"}],\"name\":\"getNodeOperator\",\"outputs\":[{\"name\":\"active\",\"type\":\"bool\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"rewardAddress\",\"type\":\"address\"},{\"name\":\"stakingLimit\",\"type\":\"uint64\"},{\"name\":\"stoppedValidators\",\"type\":\"uint64\"},{\"name\":\"totalSigningKeys\",\"type\":\"uint64\"},{\"name\":\"usedSigningKeys\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PUBKEY_LENGTH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNodeOperatorsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_stakingLimit\",\"type\":\"uint64\"}],\"name\":\"setNodeOperatorStakingLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator_id\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getSigningKey\",\"outputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"depositSignature\",\"type\":\"bytes\"},{\"name\":\"used\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_stoppedIncrement\",\"type\":\"uint64\"}],\"name\":\"reportStoppedValidators\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lido\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REPORT_STOPPED_VALIDATORS_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getKeysOpIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SET_NODE_OPERATOR_ACTIVE_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SET_NODE_OPERATOR_LIMIT_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator_id\",\"type\":\"uint256\"}],\"name\":\"getTotalSigningKeyCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator_id\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removeSigningKeyOperatorBH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MANAGE_SIGNING_KEYS\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"trimUnusedKeys\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"rewardAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"stakingLimit\",\"type\":\"uint64\"}],\"name\":\"NodeOperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"NodeOperatorActiveSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NodeOperatorNameSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rewardAddress\",\"type\":\"address\"}],\"name\":\"NodeOperatorRewardAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stakingLimit\",\"type\":\"uint64\"}],\"name\":\"NodeOperatorStakingLimitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalStopped\",\"type\":\"uint64\"}],\"name\":\"NodeOperatorTotalStoppedValidatorsReported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalKeysTrimmed\",\"type\":\"uint64\"}],\"name\":\"NodeOperatorTotalKeysTrimmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"SigningKeyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"SigningKeyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"keysOpIndex\",\"type\":\"uint256\"}],\"name\":\"KeysOpIndexSet\",\"type\":\"event\"}]","ContractName":"NodeOperatorsRegistry","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"constantinople","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}