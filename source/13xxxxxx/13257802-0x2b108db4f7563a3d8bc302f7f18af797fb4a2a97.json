{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IGenArtInterface {\r\n    function getMaxMintForMembership(uint256 _membershipId)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getMaxMintForOwner(address owner) external view returns (uint256);\r\n\r\n    function upgradeGenArtTokenContract(address _genArtTokenAddress) external;\r\n\r\n    function setAllowGen(bool allow) external;\r\n\r\n    function genAllowed() external view returns (bool);\r\n\r\n    function isGoldToken(uint256 _membershipId) external view returns (bool);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) external;\r\n\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n    function ownerOf(uint256 _membershipId) external view returns (address);\r\n}\r\n\r\ninterface IGenArt {\r\n    function getTokensByOwner(address owner)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n\r\n    function isGoldToken(uint256 _tokenId) external view returns (bool);\r\n}\r\n\r\ncontract GenArtTreasury is Ownable {\r\n    struct Partner {\r\n        uint256 vestingAmount;\r\n        uint256 claimedAmount;\r\n        uint256 vestingBegin;\r\n        uint256 vestingEnd;\r\n    }\r\n\r\n    using SafeMath for uint256;\r\n\r\n    address genartToken;\r\n    address genArtInterfaceAddress;\r\n    address genArtMembershipAddress;\r\n    uint256 vestingBegin;\r\n    uint256 vestingEnd;\r\n\r\n    // 100mm total token supply\r\n    uint256 liqTokenAmount = 10_000_000 * 10**18; // 10mm\r\n    uint256 treasuryTokenAmount = 37_000_000 * 10**18; // 37mm\r\n    uint256 teamMemberTokenAmount = 3_750_000 * 10**18; // 4 team members: 15mm\r\n    uint256 standardMemberTokenAmount = 4_000 * 10**18; // 5k members: 20mm\r\n    uint256 goldMemberTokenAmount = 20_000 * 10**18; // 100 gold members: 2mm\r\n    uint256 marketingTokenAmount = 6_000_000 * 10**18; // 6mm\r\n    uint256 partnerTokenAmount = 10_000_000 * 10**18; // 10mm\r\n\r\n    uint256 totalOwnerWithdrawAmount = 0; // total amount withdrawn by withdraw function\r\n    uint256 spendPartnerTokens = 0;\r\n\r\n    mapping(address => uint256) nonces;\r\n    mapping(address => uint256) partnerClaims;\r\n    mapping(address => uint256) teamClaimedAmount;\r\n    mapping(uint256 => bool) membershipClaims;\r\n    mapping(address => bool) teamMembers;\r\n    mapping(address => Partner) partners;\r\n\r\n    constructor(\r\n        address genArtInterfaceAddress_,\r\n        address genArtMembershipAddress_,\r\n        uint256 vestingBegin_,\r\n        uint256 vestingEnd_,\r\n        address teamMember1_,\r\n        address teamMember2_,\r\n        address teamMember3_,\r\n        address teamMember4_\r\n    ) {\r\n        require(\r\n            vestingBegin_ >= block.timestamp,\r\n            \"GenArtTreasury: vesting begin too early\"\r\n        );\r\n        require(\r\n            vestingEnd_ > vestingBegin_,\r\n            \"GenArtTreasury: vesting end too early\"\r\n        );\r\n        genArtMembershipAddress = genArtMembershipAddress_;\r\n        genArtInterfaceAddress = genArtInterfaceAddress_;\r\n        vestingBegin = vestingBegin_;\r\n        vestingEnd = vestingEnd_;\r\n\r\n        teamMembers[teamMember1_] = true;\r\n        teamMembers[teamMember2_] = true;\r\n        teamMembers[teamMember3_] = true;\r\n        teamMembers[teamMember4_] = true;\r\n    }\r\n\r\n    function claimTokensAllMemberships() public {\r\n        uint256[] memory memberships = IGenArt(genArtMembershipAddress)\r\n            .getTokensByOwner(msg.sender);\r\n        for (uint256 i = 0; i < memberships.length; i++) {\r\n            claimTokensMembership(memberships[i]);\r\n        }\r\n    }\r\n\r\n    function claimTokensMembership(uint256 membershipId_) public {\r\n        if (!membershipClaims[membershipId_]) {\r\n            address owner = IGenArt(genArtMembershipAddress).ownerOf(\r\n                membershipId_\r\n            );\r\n            bool isGold = IGenArtInterface(genArtInterfaceAddress).isGoldToken(\r\n                membershipId_\r\n            );\r\n            require(\r\n                owner == msg.sender,\r\n                \"GenArtTreasury: only owner can claim tokens\"\r\n            );\r\n            IERC20(genartToken).transfer(\r\n                owner,\r\n                (isGold ? goldMemberTokenAmount : standardMemberTokenAmount)\r\n            );\r\n            membershipClaims[membershipId_] = true;\r\n        }\r\n    }\r\n\r\n    function withdraw(uint256 _amount, address _to) public onlyOwner {\r\n        uint256 maxWithdrawAmount = liqTokenAmount +\r\n            treasuryTokenAmount +\r\n            marketingTokenAmount;\r\n        uint256 newWithdrawAmount = _amount.add(totalOwnerWithdrawAmount);\r\n\r\n        require(\r\n            newWithdrawAmount <= maxWithdrawAmount,\r\n            \"GenArtTreasury: amount would excceed limit\"\r\n        );\r\n        IERC20(genartToken).transfer(_to, _amount);\r\n        totalOwnerWithdrawAmount = newWithdrawAmount;\r\n    }\r\n\r\n    function calcVestedAmount(\r\n        uint256 startDate_,\r\n        uint256 endDate_,\r\n        uint256 amount_\r\n    ) public view returns (uint256) {\r\n        if (block.timestamp >= endDate_) {\r\n            return amount_;\r\n        }\r\n        uint256 fractions = amount_.div(endDate_.sub(startDate_));\r\n        return fractions.mul(block.timestamp.sub(startDate_));\r\n    }\r\n\r\n    function claimTokensTeamMember(address to_) public {\r\n        address teamMember = msg.sender;\r\n\r\n        require(\r\n            teamMembers[teamMember],\r\n            \"GenArtTreasury: caller is not team member\"\r\n        );\r\n        require(\r\n            teamClaimedAmount[teamMember] < teamMemberTokenAmount,\r\n            \"GenArtTreasury: no tokens to claim\"\r\n        );\r\n        uint256 vestedAmount = calcVestedAmount(\r\n            vestingBegin,\r\n            vestingEnd,\r\n            teamMemberTokenAmount\r\n        );\r\n\r\n        uint256 payoutAmount = vestedAmount.sub(teamClaimedAmount[teamMember]);\r\n        IERC20(genartToken).transfer(to_, payoutAmount);\r\n        teamClaimedAmount[teamMember] = payoutAmount.add(\r\n            teamClaimedAmount[teamMember]\r\n        );\r\n    }\r\n\r\n    function claimTokensPartner(address to_) public {\r\n        Partner memory partner = partners[msg.sender];\r\n        require(\r\n            block.number > nonces[msg.sender],\r\n            \"GenArtTreasury: another transaction in progress\"\r\n        );\r\n        nonces[msg.sender] = block.number;\r\n        require(\r\n            partner.vestingAmount > 0,\r\n            \"GenArtTreasury: caller is not partner\"\r\n        );\r\n        require(\r\n            partner.claimedAmount < partner.vestingAmount,\r\n            \"GenArtTreasury: no tokens to claim\"\r\n        );\r\n        uint256 vestedAmount = calcVestedAmount(\r\n            partner.vestingBegin,\r\n            partner.vestingEnd,\r\n            partner.vestingAmount\r\n        );\r\n        uint256 payoutAmount = vestedAmount.sub(partner.claimedAmount);\r\n        IERC20(genartToken).transfer(to_, payoutAmount);\r\n        partners[msg.sender].claimedAmount = payoutAmount.add(\r\n            partner.claimedAmount\r\n        );\r\n    }\r\n\r\n    function addPartner(\r\n        address wallet_,\r\n        uint256 vestingBegin_,\r\n        uint256 vestingEnd_,\r\n        uint256 vestingAmount_\r\n    ) public onlyOwner {\r\n        require(\r\n            partners[wallet_].vestingAmount == 0,\r\n            \"GenArtTreasury: partner already added\"\r\n        );\r\n        require(spendPartnerTokens.add(vestingAmount_) <= partnerTokenAmount);\r\n        partners[wallet_] = Partner({\r\n            vestingBegin: vestingBegin_,\r\n            vestingEnd: vestingEnd_,\r\n            vestingAmount: vestingAmount_,\r\n            claimedAmount: 0\r\n        });\r\n\r\n        spendPartnerTokens = spendPartnerTokens.add(vestingAmount_);\r\n    }\r\n\r\n    function updateGenArtInterfaceAddress(address newAddress_)\r\n        public\r\n        onlyOwner\r\n    {\r\n        genArtInterfaceAddress = newAddress_;\r\n    }\r\n\r\n    function updateGenArtTokenAddress(address newAddress_) public onlyOwner {\r\n        genartToken = newAddress_;\r\n    }\r\n\r\n    function calcUnclaimedTeamTokenAmount(address account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return teamMemberTokenAmount.sub(teamClaimedAmount[account]);\r\n    }\r\n\r\n    function isTeamMember(address account) public view returns (bool) {\r\n        return teamMembers[account];\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"genArtInterfaceAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"genArtMembershipAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vestingBegin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingEnd_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"teamMember1_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamMember2_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamMember3_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamMember4_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vestingBegin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingEnd_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingAmount_\",\"type\":\"uint256\"}],\"name\":\"addPartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calcUnclaimedTeamTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startDate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"calcVestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokensAllMemberships\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"membershipId_\",\"type\":\"uint256\"}],\"name\":\"claimTokensMembership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"claimTokensPartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"claimTokensTeamMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isTeamMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress_\",\"type\":\"address\"}],\"name\":\"updateGenArtInterfaceAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress_\",\"type\":\"address\"}],\"name\":\"updateGenArtTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GenArtTreasury","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000097275a3a1237b1b63ce089daffffc7ddf6a5c2620000000000000000000000001ca39c7f0f65b4da24b094a9afac7acf626b7f38000000000000000000000000000000000000000000000000000000006147b2e00000000000000000000000000000000000000000000000000000000066ec9ee0000000000000000000000000fef7641230ef68ca103b6ef62c7f5ecc226f467a0000000000000000000000002af514d23d9a62b9fd5fcbc93429dee4edb35e4f000000000000000000000000afb3aaf68079f5ed366be7938fcb654fc4bfd76d000000000000000000000000e601c3ef7843f616822ddc12a5b258b7ff8c436c","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d4f1f23f074bae2be62eea8e649f83c7b3cb1a69965929bb612984eac42d7c6a"}]}