{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IAssetManager.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\n/// @title Asset Manager - The asset manager interface\r\n/// @notice This contract is used to manage fund asset\r\ninterface IAssetManager {\r\n\r\n    /// @notice Total asset\r\n    /// @dev This function calculates the net worth or AUM\r\n    /// @return Total asset\r\n    function assets()external view returns(uint256);\r\n\r\n    /// @notice Withdraw asset\r\n    /// @dev Only fund contract can withdraw asset\r\n    /// @param to Withdraw address\r\n    /// @param amount Withdraw amount\r\n    /// @param scale Withdraw percentage\r\n    function withdraw(address to,uint256 amount,uint256 scale)external;\r\n\r\n    /// @notice Withdraw underlying asset\r\n    /// @dev Only fund contract can withdraw underlying asset\r\n    /// @param to Withdraw address\r\n    /// @param scale Withdraw percentage\r\n    function withdrawOfUnderlying(address to,uint256 scale)external;\r\n}\r\n\r\n// File: contracts/interfaces/erc20/IERC20Metadata.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IERC20Metadata {\r\n\r\n    function name() external view returns(string memory);\r\n\r\n    function symbol() external view returns(string memory);\r\n\r\n    function decimals() external view returns(uint8);\r\n}\r\n\r\n// File: contracts/libraries/SafeMathExtends.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\n// a library for performing various math operations\r\n\r\nlibrary SafeMathExtends {\r\n\r\n    uint256 internal constant BONE = 10 ** 18;\r\n\r\n    // Add two numbers together checking for overflows\r\n    function badd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"ERR_ADD_OVERFLOW\");\r\n        return c;\r\n    }\r\n\r\n    // subtract two numbers and return diffecerence when it underflows\r\n    function bsubSign(uint256 a, uint256 b) internal pure returns (uint256, bool) {\r\n        if (a >= b) {\r\n            return (a - b, false);\r\n        } else {\r\n            return (b - a, true);\r\n        }\r\n    }\r\n\r\n    // Subtract two numbers checking for underflows\r\n    function bsub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        (uint256 c, bool flag) = bsubSign(a, b);\r\n        require(!flag, \"ERR_SUB_UNDERFLOW\");\r\n        return c;\r\n    }\r\n\r\n    // Multiply two 18 decimals numbers\r\n    function bmul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c0 = a * b;\r\n        require(a == 0 || c0 / a == b, \"ERR_MUL_OVERFLOW\");\r\n        uint256 c1 = c0 + (BONE / 2);\r\n        require(c1 >= c0, \"ERR_MUL_OVERFLOW\");\r\n        uint256 c2 = c1 / BONE;\r\n        return c2;\r\n    }\r\n\r\n    // Divide two 18 decimals numbers\r\n    function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"ERR_DIV_ZERO\");\r\n        uint256 c0 = a * BONE;\r\n        require(a == 0 || c0 / a == BONE, \"ERR_DIV_INTERNAL\");\r\n        // bmul overflow\r\n        uint256 c1 = c0 + (b / 2);\r\n        require(c1 >= c0, \"ERR_DIV_INTERNAL\");\r\n        //  badd require\r\n        uint256 c2 = c1 / b;\r\n        return c2;\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/storage/SmartPoolStorage.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\nlibrary SmartPoolStorage {\r\n\r\n    bytes32 public constant sSlot = keccak256(\"SmartPoolStorage.storage.location\");\r\n\r\n    struct Storage {\r\n        address controller;\r\n        uint256 cap;\r\n        mapping(FeeType => Fee) fees;\r\n        mapping(address => uint256) nets;\r\n        address token;\r\n        address am;\r\n        bool bind;\r\n        bool suspend;\r\n        bool allowJoin;\r\n        bool allowExit;\r\n    }\r\n\r\n    struct Fee {\r\n        uint256 ratio;\r\n        uint256 denominator;\r\n        uint256 lastTimestamp;\r\n        uint256 minLine;\r\n    }\r\n\r\n    enum FeeType{\r\n        JOIN_FEE, EXIT_FEE, MANAGEMENT_FEE, PERFORMANCE_FEE\r\n    }\r\n\r\n    function load() internal pure returns (Storage storage s) {\r\n        bytes32 loc = sSlot;\r\n        assembly {\r\n            s.slot := loc\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: contracts/storage/GovIdentityStorage.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\nlibrary GovIdentityStorage {\r\n\r\n    bytes32 public constant govSlot = keccak256(\"GovIdentityStorage.storage.location\");\r\n\r\n    struct Identity{\r\n        address governance;\r\n        address strategist;\r\n        address rewards;\r\n    }\r\n\r\n    function load() internal pure returns (Identity storage gov) {\r\n        bytes32 loc = govSlot;\r\n        assembly {\r\n            gov.slot := loc\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/base/GovIdentity.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\ncontract GovIdentity {\r\n\r\n    constructor() {\r\n        _init();\r\n    }\r\n\r\n    function _init() internal{\r\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\r\n        identity.governance = msg.sender;\r\n        identity.strategist = msg.sender;\r\n        identity.rewards = msg.sender;\r\n    }\r\n\r\n    modifier onlyStrategist() {\r\n        GovIdentityStorage.Identity memory identity= GovIdentityStorage.load();\r\n        require(msg.sender == identity.strategist, \"GovIdentity.onlyStrategist: !strategist\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovernance() {\r\n        GovIdentityStorage.Identity memory identity= GovIdentityStorage.load();\r\n        require(msg.sender == identity.governance, \"GovIdentity.onlyGovernance: !governance\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyStrategistOrGovernance() {\r\n        GovIdentityStorage.Identity memory identity= GovIdentityStorage.load();\r\n        require(msg.sender == identity.strategist || msg.sender == identity.governance, \"GovIdentity.onlyGovernance: !governance and !strategist\");\r\n        _;\r\n    }\r\n\r\n    function setRewards(address _rewards) public onlyGovernance{\r\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\r\n        identity.rewards = _rewards;\r\n    }\r\n\r\n    function setStrategist(address _strategist) public onlyGovernance{\r\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\r\n        identity.strategist = _strategist;\r\n    }\r\n\r\n    function setGovernance(address _governance) public onlyGovernance{\r\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\r\n        identity.governance = _governance;\r\n    }\r\n\r\n    function getRewards() public pure returns(address){\r\n        GovIdentityStorage.Identity memory identity= GovIdentityStorage.load();\r\n        return identity.rewards ;\r\n    }\r\n\r\n    function getStrategist() public pure returns(address){\r\n        GovIdentityStorage.Identity memory identity= GovIdentityStorage.load();\r\n        return identity.strategist;\r\n    }\r\n\r\n    function getGovernance() public pure returns(address){\r\n        GovIdentityStorage.Identity memory identity= GovIdentityStorage.load();\r\n        return identity.governance;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/base/BasicFund.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\n\r\n\r\npragma abicoder v2;\r\n/// @title Basic Fund - Abstract Fund definition\r\n/// @notice This contract extends ERC20, defines basic fund functions and rewrites ERC20 transferFrom function\r\nabstract contract BasicFund is ERC20, GovIdentity {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint8 internal _decimals;\r\n\r\n    event CapChanged(address indexed setter, uint256 oldCap, uint256 newCap);\r\n    event TakeFee(SmartPoolStorage.FeeType ft, address owner, uint256 fee);\r\n    event FeeChanged(address indexed setter, uint256 oldRatio, uint256 oldDenominator, uint256 newRatio, uint256 newDenominator);\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_\r\n    )ERC20(name_, symbol_) {\r\n        super._init();\r\n    }\r\n\r\n    /// @notice 限制基金发行量\r\n    modifier withinCap() {\r\n        _;\r\n        uint256 cap = SmartPoolStorage.load().cap;\r\n        bool check = cap == 0 || totalSupply() <= cap ? true : false;\r\n        require(check, \"BasicFund.withinCap: Cap limit reached\");\r\n    }\r\n\r\n    /// @notice Prohibition of fund circulation\r\n    modifier deny() {\r\n        require(!SmartPoolStorage.load().suspend, \"BasicFund.isNotSuspend: fund is suspend\");\r\n        _;\r\n    }\r\n\r\n    /// @notice is allow join\r\n    modifier isAllowJoin() {\r\n        require(checkAllowJoin(), \"BasicFund.checkAllowJoin: fund is not allowJoin\");\r\n        _;\r\n    }\r\n\r\n    /// @notice is allow exit\r\n    modifier isAllowExit() {\r\n        require(checkAllowExit(), \"BasicFund.checkAllowExit: fund is not allowExit\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Check allow join\r\n    /// @return bool\r\n    function checkAllowJoin()public view returns(bool){\r\n        return SmartPoolStorage.load().allowJoin;\r\n    }\r\n\r\n    /// @notice Check allow exit\r\n    /// @return bool\r\n    function checkAllowExit()public view returns(bool){\r\n        return SmartPoolStorage.load().allowExit;\r\n    }\r\n\r\n    /// @notice Fund decimals\r\n    /// @dev This function rewrites ERC20 decimals function\r\n    /// @return decimals\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /// @notice Update weighted average net worth\r\n    /// @dev This function is used by the new transferFrom/transfer function\r\n    /// @param account Account address\r\n    /// @param addAmount Newly added fund amount\r\n    /// @param newNet New weighted average net worth\r\n    function _updateAvgNet(address account, uint256 addAmount, uint256 newNet) internal {\r\n        uint256 balance = balanceOf(account);\r\n        uint256 oldNet = SmartPoolStorage.load().nets[account];\r\n        uint256 total = balance.add(addAmount);\r\n        if (total != 0) {\r\n            uint256 nextNet = oldNet.mul(balance).add(newNet.mul(addAmount)).div(total);\r\n            SmartPoolStorage.load().nets[account] = nextNet;\r\n        }\r\n    }\r\n\r\n\r\n    /// @notice Overwrite transfer function\r\n    /// @dev The purpose is to update weighted average net worth\r\n    /// @param sender Sender address\r\n    /// @param recipient Recipient address\r\n    /// @param amount Transfer amount\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override deny {\r\n        uint256 newNet = SmartPoolStorage.load().nets[sender];\r\n        _updateAvgNet(recipient, amount, newNet);\r\n        super._transfer(sender, recipient, amount);\r\n        if (balanceOf(sender) == 0) {\r\n            SmartPoolStorage.load().nets[sender] = 0;\r\n        }\r\n    }\r\n\r\n    /// @notice Overwrite mint function\r\n    /// @dev the purpose is to set the initial net worth of the fund. It also limit the max fund cap\r\n    /// @param recipient Recipient address\r\n    /// @param amount Mint amount\r\n    function _mint(address recipient, uint256 amount) internal virtual override withinCap deny {\r\n        uint256 newNet = globalNetValue();\r\n        if (newNet == 0) newNet = 1e18;\r\n        _updateAvgNet(recipient, amount, newNet);\r\n        super._mint(recipient, amount);\r\n    }\r\n\r\n    /// @notice Overwrite burn function\r\n    /// @dev The purpose is to set the net worth of fund to 0 when the balance of the account is 0\r\n    /// @param account Account address\r\n    /// @param amount Burn amount\r\n    function _burn(address account, uint256 amount) internal virtual override deny {\r\n        super._burn(account, amount);\r\n        if (balanceOf(account) == 0) {\r\n            SmartPoolStorage.load().nets[account] = 0;\r\n        }\r\n    }\r\n\r\n    /// @notice Overwrite fund transferFrom function\r\n    /// @dev The overwrite is to simplify the transaction behavior, and the authorization operation behavior can be avoided when the fund transaction payer is the function initiator\r\n    /// @param sender Sender address\r\n    /// @param recipient Recipient address\r\n    /// @param amount Transfer amount\r\n    /// @return Transfer result\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        require(\r\n            _msgSender() == sender || amount <= allowance(sender, _msgSender()),\r\n            \"ERR_KTOKEN_BAD_CALLER\"\r\n        );\r\n        _transfer(sender, recipient, amount);\r\n        if (_msgSender() != sender) {\r\n            _approve(sender, _msgSender(), allowance(sender, _msgSender()).sub(amount, \"BasicFund: transfer amount exceeds allowance\"));\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @notice Fund cap\r\n    /// @dev The max number of fund to be issued\r\n    /// @return Max fund cap\r\n    function getCap() public view returns (uint256){\r\n        return SmartPoolStorage.load().cap;\r\n    }\r\n\r\n    /// @notice Set max fund cap\r\n    /// @dev To set max fund cap\r\n    /// @param cap Max fund cap\r\n    function setCap(uint256 cap) external onlyStrategistOrGovernance {\r\n        uint256 oldCap = SmartPoolStorage.load().cap;\r\n        SmartPoolStorage.load().cap = cap;\r\n        emit CapChanged(msg.sender, oldCap, cap);\r\n    }\r\n\r\n    /// @notice The net worth of the fund from the time the last fee collected\r\n    /// @dev This is used to calculate the performance fee\r\n    /// @param account Account address\r\n    /// @return The net worth of the fund\r\n    function accountNetValue(address account) public view returns (uint256){\r\n        return SmartPoolStorage.load().nets[account];\r\n    }\r\n\r\n    /// @notice The current fund net worth\r\n    /// @dev This is used to update and calculate account net worth\r\n    /// @return The net worth of the fund\r\n    function globalNetValue() public view returns (uint256){\r\n        return convertToCash(1e18);\r\n    }\r\n\r\n    /// @notice Get fee by type\r\n    /// @dev (0=JOIN_FEE,1=EXIT_FEE,2=MANAGEMENT_FEE,3=PERFORMANCE_FEE)\r\n    /// @param ft Fee type\r\n    function getFee(SmartPoolStorage.FeeType ft) public view returns (SmartPoolStorage.Fee memory){\r\n        return SmartPoolStorage.load().fees[ft];\r\n    }\r\n\r\n    /// @notice Set fee by type\r\n    /// @dev Only Governance address can set fees (0=JOIN_FEE,1=EXIT_FEE,2=MANAGEMENT_FEE,3=PERFORMANCE_FEE)\r\n    /// @param ft Fee type\r\n    /// @param ratio Fee ratio\r\n    /// @param denominator The max ratio limit\r\n    /// @param minLine The minimum line to charge a fee\r\n    function setFee(SmartPoolStorage.FeeType ft, uint256 ratio, uint256 denominator, uint256 minLine) external onlyGovernance {\r\n        require(ratio <= denominator, \"BasicFund.setFee: ratio<=denominator\");\r\n        SmartPoolStorage.Fee storage fee = SmartPoolStorage.load().fees[ft];\r\n        require(fee.denominator == 0, \"BasicFund.setFee: already initialized \");\r\n        emit FeeChanged(msg.sender, fee.ratio, fee.denominator, ratio, denominator);\r\n        fee.ratio = ratio;\r\n        fee.denominator = denominator;\r\n        fee.minLine = minLine;\r\n        fee.lastTimestamp = block.timestamp;\r\n    }\r\n\r\n    /// @notice Collect outstanding management fee\r\n    /// @dev The outstanding management fee is calculated from the time the last fee is collected.\r\n    function takeOutstandingManagementFee() public returns (uint256){\r\n        SmartPoolStorage.Fee storage fee = SmartPoolStorage.load().fees[SmartPoolStorage.FeeType.MANAGEMENT_FEE];\r\n        uint256 outstandingFee = calcManagementFee();\r\n        if (outstandingFee == 0 || outstandingFee < fee.minLine) return 0;\r\n        _mint(getRewards(), outstandingFee);\r\n        fee.lastTimestamp = block.timestamp;\r\n        emit TakeFee(SmartPoolStorage.FeeType.MANAGEMENT_FEE, address(0), outstandingFee);\r\n        return outstandingFee;\r\n    }\r\n\r\n    /// @notice Collect performance fee\r\n    /// @dev Performance fee is calculated by each address. The new net worth of the address is updated each time the performance is collected.\r\n    /// @param target Account address to collect performance fee\r\n    function takeOutstandingPerformanceFee(address target) public returns (uint256){\r\n        if (target == getRewards()) return 0;\r\n        uint256 netValue = globalNetValue();\r\n        SmartPoolStorage.Fee storage fee = SmartPoolStorage.load().fees[SmartPoolStorage.FeeType.PERFORMANCE_FEE];\r\n        uint256 outstandingFee = calcPerformanceFee(target, netValue);\r\n        if (outstandingFee == 0 || outstandingFee < fee.minLine) return 0;\r\n        _transfer(target, getRewards(), outstandingFee);\r\n        fee.lastTimestamp = block.timestamp;\r\n        SmartPoolStorage.load().nets[target] = netValue;\r\n        emit TakeFee(SmartPoolStorage.FeeType.PERFORMANCE_FEE, target, outstandingFee);\r\n        return outstandingFee;\r\n    }\r\n\r\n    /// @notice Collect Join fee\r\n    /// @dev The join fee is collected each time a user buys the fund\r\n    /// @param target Account address to collect join fee\r\n    /// @param fundAmount Fund amount\r\n    function _takeJoinFee(address target, uint256 fundAmount) internal returns (uint256){\r\n        if (target == getRewards()) return 0;\r\n        SmartPoolStorage.Fee memory fee = getFee(SmartPoolStorage.FeeType.JOIN_FEE);\r\n        uint256 payFee = calcRatioFee(SmartPoolStorage.FeeType.JOIN_FEE, fundAmount);\r\n        if (payFee == 0 || payFee < fee.minLine) return 0;\r\n        _mint(getRewards(), payFee);\r\n        emit TakeFee(SmartPoolStorage.FeeType.JOIN_FEE, target, payFee);\r\n        return payFee;\r\n    }\r\n\r\n    /// @notice Collect Redeem fee\r\n    /// @dev The redeem fee is collected when a user redeems the fund\r\n    /// @param target Account address to collect redeem fee\r\n    /// @param fundAmount Fund amount\r\n    function _takeExitFee(address target, uint256 fundAmount) internal returns (uint256){\r\n        if (target == getRewards()) return 0;\r\n        SmartPoolStorage.Fee memory fee = getFee(SmartPoolStorage.FeeType.EXIT_FEE);\r\n        uint256 payFee = calcRatioFee(SmartPoolStorage.FeeType.EXIT_FEE, fundAmount);\r\n        if (payFee == 0 || payFee < fee.minLine) return 0;\r\n        _transfer(target, getRewards(), payFee);\r\n        emit TakeFee(SmartPoolStorage.FeeType.EXIT_FEE, target, payFee);\r\n        return payFee;\r\n    }\r\n\r\n    /// @notice Calculate management fee\r\n    /// @dev Outstanding management fee is calculated from the time the last fee is collected.\r\n    function calcManagementFee() public view returns (uint256){\r\n        SmartPoolStorage.Fee memory fee = getFee(SmartPoolStorage.FeeType.MANAGEMENT_FEE);\r\n        uint256 denominator = fee.denominator == 0 ? 1000 : fee.denominator;\r\n        if (fee.lastTimestamp == 0) return 0;\r\n        uint256 diff = block.timestamp.sub(fee.lastTimestamp);\r\n        return totalSupply().mul(diff).mul(fee.ratio).div(denominator * 365.25 days);\r\n    }\r\n\r\n    /// @notice Calculate performance fee\r\n    /// @dev Performance fee is calculated by each address. The new net worth line of the address is updated each time the performance is collected.\r\n    /// @param target Account address to collect performance fee\r\n    /// @param newNet New net worth\r\n    function calcPerformanceFee(address target, uint256 newNet) public view returns (uint256){\r\n        if (newNet == 0) return 0;\r\n        uint256 balance = balanceOf(target);\r\n        uint256 oldNet = accountNetValue(target);\r\n        uint256 diff = newNet > oldNet ? newNet.sub(oldNet) : 0;\r\n        SmartPoolStorage.Fee memory fee = getFee(SmartPoolStorage.FeeType.PERFORMANCE_FEE);\r\n        uint256 denominator = fee.denominator == 0 ? 1000 : fee.denominator;\r\n        uint256 cash = diff.mul(balance).mul(fee.ratio).div(denominator);\r\n        return cash.div(newNet);\r\n    }\r\n\r\n    /// @notice Calculate the fee by ratio\r\n    /// @dev This is used to calculate join and redeem fee\r\n    /// @param ft Fee type\r\n    /// @param fundAmount Fund amount\r\n    function calcRatioFee(SmartPoolStorage.FeeType ft, uint256 fundAmount) public view returns (uint256){\r\n        if (fundAmount == 0) return 0;\r\n        SmartPoolStorage.Fee memory fee = getFee(ft);\r\n        uint256 denominator = fee.denominator == 0 ? 1000 : fee.denominator;\r\n        uint256 amountRatio = fundAmount.div(denominator);\r\n        return amountRatio.mul(fee.ratio);\r\n    }\r\n\r\n    //@notice fund maintenance\r\n    //@dev stop and open fund circulation\r\n    /// @param _value status value\r\n    function maintain(bool _value) external onlyStrategistOrGovernance {\r\n        SmartPoolStorage.load().suspend = _value;\r\n    }\r\n\r\n    //@notice fund allowJoin\r\n    //@dev stop and open fund circulation\r\n    /// @param _value status value\r\n    function allowJoin(bool _value) external onlyStrategistOrGovernance {\r\n        SmartPoolStorage.load().allowJoin = _value;\r\n    }\r\n\r\n    //@notice fund allowExit\r\n    //@dev stop and open fund circulation\r\n    /// @param _value status value\r\n    function allowExit(bool _value) external onlyStrategistOrGovernance {\r\n        SmartPoolStorage.load().allowExit = _value;\r\n    }\r\n\r\n    /// @notice Convert fund amount to cash amount\r\n    /// @dev This converts the user fund amount to cash amount when a user redeems the fund\r\n    /// @param fundAmount Redeem fund amount\r\n    /// @return Cash amount\r\n    function convertToCash(uint256 fundAmount) public virtual view returns (uint256);\r\n\r\n    /// @notice Convert cash amount to fund amount\r\n    /// @dev This converts cash amount to fund amount when a user buys the fund\r\n    /// @param cashAmount Join cash amount\r\n    /// @return Fund amount\r\n    function convertToFund(uint256 cashAmount) public virtual view returns (uint256);\r\n\r\n}\r\n\r\n// File: contracts/Fund.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\n/// @title Fund Contract - The implmentation of fund contract\r\n/// @notice This contract extends Basic Fund and defines the join and redeem activities\r\ncontract Fund is BasicFund {\r\n\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    using SafeMathExtends for uint256;\r\n    using Address for address;\r\n\r\n    event PoolJoined(address indexed investor, uint256 amount);\r\n    event PoolExited(address indexed investor, uint256 amount);\r\n\r\n    /// @notice deny contract\r\n    modifier notAllowContract() {\r\n        require(!address(msg.sender).isContract(), \"Fund.notContract: sender is contract \");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol\r\n    ) BasicFund(name, symbol){\r\n\r\n    }\r\n\r\n    /// @notice Bind join and redeem address with asset management contract\r\n    /// @dev Make the accuracy of the fund consistent with the accuracy of the bound token; it can only be bound once and cannot be modified\r\n    /// @param token Join and redeem fund token address\r\n    /// @param am Asset managemeent address\r\n    function bind(address token, address am) external onlyGovernance {\r\n        require(!SmartPoolStorage.load().bind, \"Fund.bind: already bind\");\r\n        _decimals = IERC20Metadata(token).decimals();\r\n        SmartPoolStorage.load().token = token;\r\n        SmartPoolStorage.load().am = am;\r\n        SmartPoolStorage.load().bind = true;\r\n        SmartPoolStorage.load().suspend = false;\r\n        SmartPoolStorage.load().allowJoin = true;\r\n        SmartPoolStorage.load().allowExit = true;\r\n    }\r\n\r\n    /// @notice Subscript fund\r\n    /// @dev When subscribing to the fund, fee will be collected, and contract access is not allowed\r\n    /// @param amount Subscription amount\r\n    function joinPool(uint256 amount) external isAllowJoin notAllowContract {\r\n        address investor = msg.sender;\r\n        require(amount <= ioToken().balanceOf(investor) && amount > 0, \"Fund.joinPool: Insufficient balance\");\r\n        uint256 fundAmount = convertToFund(amount);\r\n        //take management fee\r\n        takeOutstandingManagementFee();\r\n        //take join fee\r\n        uint256 fee = _takeJoinFee(investor, fundAmount);\r\n        uint256 realFundAmount = fundAmount.sub(fee);\r\n        _mint(investor, realFundAmount);\r\n        ioToken().safeTransferFrom(investor, AM(), amount);\r\n        emit PoolJoined(investor, realFundAmount);\r\n    }\r\n\r\n    /// @notice Redeem fund\r\n    /// @dev When the fund is redeemed, fees will be collected, and contract access is not allowed\r\n    /// @param amount Redeem amount\r\n    function exitPool(uint256 amount) external isAllowExit notAllowContract {\r\n        address investor = msg.sender;\r\n        require(balanceOf(investor) >= amount && amount > 0, \"Fund.exitPool: Insufficient balance\");\r\n        //take exit fee\r\n        uint256 exitFee = _takeExitFee(investor, amount);\r\n        uint256 exitAmount = amount.sub(exitFee);\r\n        //take performance fee\r\n        uint256 perFee = takeOutstandingPerformanceFee(investor);\r\n        exitAmount = exitAmount.sub(perFee);\r\n        uint256 scale = exitAmount.bdiv(totalSupply());\r\n        uint256 cashAmount = convertToCash(exitAmount);\r\n        //take management fee\r\n        takeOutstandingManagementFee();\r\n        // withdraw cash\r\n        IAssetManager(AM()).withdraw(investor, cashAmount, scale);\r\n        _burn(investor, exitAmount);\r\n        emit PoolExited(investor, amount);\r\n    }\r\n\r\n    /// @notice Redeem the underlying assets of the fund\r\n    /// @dev When the fund is redeemed, fees will be collected, and contract access is not allowed\r\n    /// @param amount Redeem amount\r\n    function exitPoolOfUnderlying(uint256 amount) external isAllowExit notAllowContract {\r\n        address investor = msg.sender;\r\n        require(balanceOf(investor) >= amount && amount > 0, \"Fund.exitPoolOfUnderlying: Insufficient balance\");\r\n        //take exit fee\r\n        uint256 exitFee = _takeExitFee(investor, amount);\r\n        uint256 exitAmount = amount.sub(exitFee);\r\n        //take performance fee\r\n        uint256 perFee = takeOutstandingPerformanceFee(investor);\r\n        exitAmount = exitAmount.sub(perFee);\r\n        uint256 scale = exitAmount.bdiv(totalSupply());\r\n        //take management fee\r\n        takeOutstandingManagementFee();\r\n        //harvest underlying\r\n        IAssetManager(AM()).withdrawOfUnderlying(investor, scale);\r\n        _burn(investor, exitAmount);\r\n        emit PoolExited(investor, amount);\r\n    }\r\n\r\n    /// @notice Fund token address for joining and redeeming\r\n    /// @dev This is address is created when the fund is first created.\r\n    /// @return Fund token address\r\n    function ioToken() public view returns (IERC20){\r\n        return IERC20(SmartPoolStorage.load().token);\r\n    }\r\n\r\n    /// @notice Fund mangement contract address\r\n    /// @dev The fund management contract address is bind to the fund when the fund is created\r\n    /// @return Fund management contract address\r\n    function AM() public view returns (address){\r\n        return SmartPoolStorage.load().am;\r\n    }\r\n\r\n\r\n    /// @notice Convert fund amount to cash amount\r\n    /// @dev This converts the user fund amount to cash amount when a user redeems the fund\r\n    /// @param fundAmount Redeem fund amount\r\n    /// @return Cash amount\r\n    function convertToCash(uint256 fundAmount) public virtual override view returns (uint256){\r\n        uint256 cash = 0;\r\n        uint256 totalSupply = totalSupply();\r\n        uint256 _assets = assets();\r\n        if (totalSupply == 0 || _assets == 0) {\r\n            cash = 0;\r\n        } else {\r\n            cash = _assets.mul(fundAmount).div(totalSupply);\r\n        }\r\n        return cash;\r\n    }\r\n\r\n    /// @notice Convert cash amount to fund amount\r\n    /// @dev This converts cash amount to fund amount when a user buys the fund\r\n    /// @param cashAmount Join cash amount\r\n    /// @return Fund amount\r\n    function convertToFund(uint256 cashAmount) public virtual override view returns (uint256){\r\n        uint256 totalSupply = totalSupply();\r\n        uint256 _assets = assets();\r\n        if (totalSupply == 0 || _assets == 0) {\r\n            return cashAmount;\r\n        } else {\r\n            return cashAmount.mul(totalSupply).div(_assets);\r\n        }\r\n    }\r\n\r\n    /// @notice Fund total asset\r\n    /// @dev This calculates fund net worth or AUM\r\n    /// @return Fund total asset\r\n    function assets() public view returns (uint256){\r\n        return IAssetManager(AM()).assets();\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"CapChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDenominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDenominator\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolExited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum SmartPoolStorage.FeeType\",\"name\":\"ft\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"TakeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountNetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"allowExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"allowJoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"am\",\"type\":\"address\"}],\"name\":\"bind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcManagementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newNet\",\"type\":\"uint256\"}],\"name\":\"calcPerformanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum SmartPoolStorage.FeeType\",\"name\":\"ft\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fundAmount\",\"type\":\"uint256\"}],\"name\":\"calcRatioFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkAllowExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkAllowJoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundAmount\",\"type\":\"uint256\"}],\"name\":\"convertToCash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cashAmount\",\"type\":\"uint256\"}],\"name\":\"convertToFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exitPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exitPoolOfUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum SmartPoolStorage.FeeType\",\"name\":\"ft\",\"type\":\"uint8\"}],\"name\":\"getFee\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLine\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolStorage.Fee\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalNetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ioToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"joinPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"maintain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum SmartPoolStorage.FeeType\",\"name\":\"ft\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLine\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOutstandingManagementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"takeOutstandingPerformanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Fund","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000194b4620556e6973776170204c69717569646974792046756e640000000000000000000000000000000000000000000000000000000000000000000000000000064b46554e4c460000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://abb89c49245edd99a50f997542983310039d93d147d6a69f3c12948cbe35c2bf"}]}