{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"src/LootXP.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.8.7;\\n\\nabstract contract Ownable {\\n    address internal _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor(address firstOwner) {\\n        _owner = firstOwner;\\n        emit OwnershipTransferred(address(0), firstOwner);\\n    }\\n\\n    function owner() external view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"NOT_OWNER\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() external onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        require(newOwner != address(0), \\\"ZERO_ADDRESS\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n\\ncontract LootXP is Ownable {\\n    event SourceSet(address indexed generator, address indexed source, bool added);\\n    event SinkSet(address indexed generator, address indexed sink, bool added);\\n    event GeneratorSet(address indexed generator, bool added);\\n\\n    event XP(uint256 indexed lootId, address indexed sourceOrSink, uint256 previousAmount, uint256 newAmount);\\n\\n    mapping(uint256 => uint256) public xp;\\n    mapping(address => uint256) public xpGenerated;\\n    mapping(address => uint256) public xpDestroyed;\\n\\n    mapping(address => bool) public xpSource;\\n    mapping(address => bool) public xpSink;\\n\\n    mapping(address => bool) public generator;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address firstOwner) Ownable(firstOwner) {}\\n\\n    function addXP(uint256 lootId, uint256 amount) external returns (bool) {\\n        // use return bool instead of throw so that caller can be sure the call will not revert and can carry on\\n        if (xpSource[msg.sender]) {\\n            uint256 oldXP = xp[lootId];\\n            uint256 newXP;\\n            unchecked {newXP = oldXP + amount;}\\n            if (newXP < oldXP) {\\n                newXP = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            }\\n            xp[lootId] = newXP;\\n            emit XP(lootId, msg.sender, oldXP, newXP);\\n            amount = newXP - oldXP;\\n\\n            oldXP = xpGenerated[msg.sender];\\n            unchecked {newXP = oldXP + amount;}\\n            if (newXP < oldXP) {\\n                newXP = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            }\\n            xpGenerated[msg.sender] = newXP;\\n\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function removeXP(uint256 lootId, uint256 amount) external returns (bool) {\\n        // use return bool instead of throw so that caller can be sure the call will not revert and can carry on\\n        if (xpSink[msg.sender]) {\\n            uint256 oldXP = xp[lootId];\\n            uint256 newXP;\\n            if (amount > oldXP) {\\n                newXP = 0;\\n            } else {\\n                newXP = oldXP - amount;\\n            }\\n            xp[lootId] = newXP;\\n            emit XP(lootId, msg.sender, oldXP, newXP);\\n            amount = oldXP - newXP;\\n\\n            oldXP = xpDestroyed[msg.sender];\\n            unchecked {newXP = oldXP + amount;}\\n            if (newXP < oldXP) {\\n                newXP = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            }\\n            xpDestroyed[msg.sender] = newXP;\\n\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function setSource(address source, bool add) external {\\n        require(generator[msg.sender] || msg.sender == _owner, \\\"NOT_ALLOWED\\\");\\n        xpSource[source] = add;\\n        emit SourceSet(msg.sender, source, add);\\n    }\\n\\n    function setSink(address sink, bool add) external {\\n        require(generator[msg.sender] || msg.sender == _owner, \\\"NOT_ALLOWED\\\");\\n        xpSink[sink] = add;\\n        emit SinkSet(msg.sender, sink, add);\\n    }\\n\\n    function setGenerator(address generatorToSet, bool add) external {\\n        require(msg.sender == _owner, \\\"NOT_ALLOWED\\\");\\n        generator[generatorToSet] = add;\\n        emit GeneratorSet(generatorToSet, add);\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"firstOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"generator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"added\",\"type\":\"bool\"}],\"name\":\"GeneratorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"generator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sink\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"added\",\"type\":\"bool\"}],\"name\":\"SinkSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"generator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"added\",\"type\":\"bool\"}],\"name\":\"SourceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lootId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sourceOrSink\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"XP\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lootId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addXP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"generator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lootId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeXP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"generatorToSet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"setGenerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sink\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"setSink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"setSource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"xp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"xpDestroyed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"xpGenerated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"xpSink\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"xpSource\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LootXP","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"000000000000000000000000dca9d1fa839bb9fe65ddc4de5161bca43751d4b4","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}