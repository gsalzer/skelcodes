{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\ncontract EtherPixel {\r\n    \r\n    struct Pixel {\r\n        address owner;\r\n        bool currentlyForSale;\r\n        uint price;\r\n        uint timesSold;\r\n    }\r\n    \r\n    mapping (uint => Pixel) public Pixels;\r\n    \r\n    mapping (address => uint[]) public PixelOwners;\r\n\r\n    uint public latestNewPixelForSale;\r\n    \r\n    address owner;\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function EtherPixel() {\r\n        \r\n        latestNewPixelForSale = 6;\r\n        \r\n        Pixels[0].owner = msg.sender;\r\n        Pixels[0].currentlyForSale = true;\r\n        Pixels[0].price = 250000000000000000;\r\n        Pixels[0].timesSold = 1;\r\n        PixelOwners[msg.sender].push(0);\r\n        \r\n        Pixels[1].owner = msg.sender;\r\n        Pixels[1].currentlyForSale = true;\r\n        Pixels[1].price = 250000000000000000;\r\n        Pixels[1].timesSold = 1;\r\n        PixelOwners[msg.sender].push(1);\r\n        \r\n        Pixels[2].owner = msg.sender;\r\n        Pixels[2].currentlyForSale = true;\r\n        Pixels[2].price = 250000000000000000;\r\n        Pixels[2].timesSold = 1;\r\n        PixelOwners[msg.sender].push(2);\r\n        \r\n        Pixels[3].owner = msg.sender;\r\n        Pixels[3].currentlyForSale = true;\r\n        Pixels[3].price = 250000000000000000;\r\n        Pixels[3].timesSold = 1;\r\n        PixelOwners[msg.sender].push(3);\r\n        \r\n        Pixels[4].owner = msg.sender;\r\n        Pixels[4].currentlyForSale = true;\r\n        Pixels[4].price = 250000000000000000;\r\n        Pixels[4].timesSold = 1;\r\n        PixelOwners[msg.sender].push(4);\r\n        \r\n        Pixels[5].owner = msg.sender;\r\n        Pixels[5].currentlyForSale = true;\r\n        Pixels[5].price = 250000000000000000;\r\n        Pixels[5].timesSold = 1;\r\n        PixelOwners[msg.sender].push(5);\r\n        \r\n        Pixels[6].currentlyForSale = true;\r\n        Pixels[6].price = 250000000000000000;\r\n        \r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function getPixelInfo (uint PixelNumber) returns (address, bool, uint, uint) {\r\n        return (Pixels[PixelNumber].owner, Pixels[PixelNumber].currentlyForSale, Pixels[PixelNumber].price, Pixels[PixelNumber].timesSold);\r\n    }\r\n    \r\n    function PixelOwningHistory (address _address) returns (uint[]) {\r\n        return PixelOwners[_address];\r\n    }\r\n    \r\n    function buyPixel (uint PixelNumber) payable {\r\n        require(Pixels[PixelNumber].currentlyForSale == true);\r\n        require(msg.value == Pixels[PixelNumber].price);\r\n        Pixels[PixelNumber].currentlyForSale = false;\r\n        Pixels[PixelNumber].timesSold++;\r\n        if (PixelNumber != latestNewPixelForSale) {\r\n            Pixels[PixelNumber].owner.transfer(Pixels[PixelNumber].price);\r\n        }\r\n        Pixels[PixelNumber].owner = msg.sender;\r\n        PixelOwners[msg.sender].push(PixelNumber);\r\n        if (PixelNumber == latestNewPixelForSale) {\r\n            if (PixelNumber != 99) {\r\n                latestNewPixelForSale++;\r\n                Pixels[latestNewPixelForSale].price = 250000000000000000;\r\n                Pixels[latestNewPixelForSale].currentlyForSale = true;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function sellPixel (uint PixelNumber, uint price) {\r\n        require(msg.sender == Pixels[PixelNumber].owner);\r\n        require(price > 0);\r\n        Pixels[PixelNumber].price = price;\r\n        Pixels[PixelNumber].currentlyForSale = true;\r\n    }\r\n    \r\n    function dontSellPixel (uint PixelNumber) {\r\n        require(msg.sender == Pixels[PixelNumber].owner);\r\n        Pixels[PixelNumber].currentlyForSale = false;\r\n    }\r\n    \r\n    function giftPixel (uint PixelNumber, address receiver) {\r\n        require(msg.sender == Pixels[PixelNumber].owner);\r\n        Pixels[PixelNumber].owner = receiver;\r\n        PixelOwners[receiver].push(PixelNumber);\r\n    }\r\n    \r\n    function() payable {\r\n        \r\n    }\r\n    \r\n    function withdraw() onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"PixelOwningHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Pixels\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"currentlyForSale\",\"type\":\"bool\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"timesSold\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"PixelNumber\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"sellPixel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"PixelNumber\",\"type\":\"uint256\"}],\"name\":\"getPixelInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PixelOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestNewPixelForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"PixelNumber\",\"type\":\"uint256\"}],\"name\":\"dontSellPixel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"PixelNumber\",\"type\":\"uint256\"}],\"name\":\"buyPixel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"PixelNumber\",\"type\":\"uint256\"},{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"giftPixel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"EtherPixel","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b81cf4a4fc7ffc4eeb2c773e44b43c9ef0e65a1eac879e309eef0beb516d2417"}]}