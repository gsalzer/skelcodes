{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL V3.0\r\n\r\npragma solidity 0.8.0;\r\n\r\n// Global Enums and Structs\r\n\r\n\r\n\r\nstruct BattleInfo {\r\n    uint256 defenderPower;\r\n    uint256 attackerPower;\r\n    uint256 duration;\r\n    uint256 endTimestamp;\r\n    uint256 numWarriors;\r\n}\r\nstruct WarriorInfo {\r\n    uint256 power;\r\n    uint256 side;\r\n}\r\n\r\n// Part: IBattleRewarder\r\n\r\ninterface IBattleRewarder {\r\n    // Record that a battle was finished, and update reward distributions appropriately.\r\n    // Should not require a lot of gas for this computation (unless we are rewarding\r\n    // whoever calls `finishBattle` with some bonus XP or something...)\r\n    function battleFinished(uint256 battleId) external;\r\n\r\n    // Allows a warrior to claim rewards for a battle that they participated in.\r\n    function claimRewardsForBattle(uint256 battleId) external;\r\n}\r\n\r\n// Part: IPowerCalculator\r\n\r\ninterface IPowerCalculator {\r\n    function calculatePower(uint256 weaponId) external returns (uint256);\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@4.0.0/Context\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@4.0.0/IERC165\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@4.0.0/IERC721\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@4.0.0/Ownable\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: Battle.sol\r\n\r\n/**\r\n * Implements battles between Loot weapon holders.\r\n *\r\n * The battle is a simple tug-of-war in which people can enlist to support\r\n * either side. Each weapon contributes a \"power\" score that amplifies the\r\n * strength of their side. At the end of the battle, the side with more power wins.\r\n *\r\n * A given warrior (address) can only participate in any individual battle once.\r\n * In practice, some people might run multiple warriors via separate addresses,\r\n * but our setup discourages this practice.\r\n * Similarly, each weapon can only be used once in a given battle.\r\n *\r\n * We record the power of the weapon _at the time it is used_; upgrades to the\r\n * weapon will have no effect on battles that weapon is currently in.\r\n *\r\n * Once a warrior and weapon are committed, there is no turning back, retreating,\r\n * or switching sides. This simplifies the state tracking.\r\n *\r\n * Weapon power computation is abstracted behind an IPowerCalculator, which\r\n * allows the possibility of re-balancing the game without needing to change\r\n * this contract.\r\n * Similarly, the distribution of battle rewards (XP) is handled through an\r\n * IBattleRewarder, so we can tweak the XP reward mechanics without redeploying\r\n * this contract.\r\n *\r\n * There is support for a v2 loot weapon contract; once we deploy it we can\r\n * add the new contract address. Since all weapon stat calculation is abstracted\r\n * behind the IPowerCalculator, from the perspective of this contract we only\r\n * know that the loot weapons are ERC-721s and we check that warriors actually\r\n * own them.\r\n */\r\ncontract Battle is Ownable {\r\n    uint256 constant ATTACKER_SIDE = 1;\r\n    uint256 constant DEFENDER_SIDE = 2;\r\n    IERC721 public weaponContractV1 =\r\n        IERC721(0x0ac0ECc6D249F1383c5C7c2Ff4941Bd56DEcDd14);\r\n    IERC721 public weaponContractV2;\r\n\r\n    mapping(uint256 => BattleInfo) public idToBattleInfo;\r\n    mapping(uint256 => mapping(uint256 => bool))\r\n        public battleIdToWeaponEnlisted;\r\n    mapping(uint256 => mapping(address => WarriorInfo))\r\n        public battleIdToWarriorInfo;\r\n\r\n    event BattleStarted(\r\n        uint256 indexed battleId,\r\n        uint256 duration,\r\n        uint256 endTimestamp\r\n    );\r\n\r\n    event WarriorEnlisted(\r\n        uint256 indexed battleId,\r\n        address indexed warrior,\r\n        uint256 indexed weaponId,\r\n        uint256 side,\r\n        uint256 power\r\n    );\r\n    event BattleRewarderChanged(IBattleRewarder newRewarder);\r\n    event PowerCalculatorChanged(IPowerCalculator newCalculator);\r\n\r\n    IBattleRewarder public battleRewarder;\r\n    IPowerCalculator public powerCalculator;\r\n\r\n    uint256 public nextBattleId;\r\n\r\n    // Start w/ 5 min duration, we can increase it after testing\r\n    uint256 public minBattleDuration = 300;\r\n\r\n    function setBattleRewarder(IBattleRewarder newRewarder) public onlyOwner {\r\n        battleRewarder = newRewarder;\r\n        emit BattleRewarderChanged(newRewarder);\r\n    }\r\n\r\n    function setPowerCalculator(IPowerCalculator newCalculator)\r\n        public\r\n        onlyOwner\r\n    {\r\n        powerCalculator = newCalculator;\r\n        emit PowerCalculatorChanged(newCalculator);\r\n    }\r\n\r\n    function setV2ContractAddress(IERC721 newV2Contract) public onlyOwner {\r\n        weaponContractV2 = newV2Contract;\r\n    }\r\n\r\n    function changeMinBattleDuration(uint256 newDuration) public onlyOwner {\r\n        require(newDuration > 0, \"duration may not be 0\");\r\n        minBattleDuration = newDuration;\r\n    }\r\n\r\n    function startBattle(uint256 duration) public returns (uint256) {\r\n        require(duration >= minBattleDuration, \"battle too short\");\r\n        uint256 endTimestamp = block.timestamp + duration;\r\n        idToBattleInfo[nextBattleId].endTimestamp = endTimestamp;\r\n        idToBattleInfo[nextBattleId].duration = duration;\r\n        emit BattleStarted(nextBattleId, duration, endTimestamp);\r\n        nextBattleId++;\r\n        return nextBattleId - 1;\r\n    }\r\n\r\n    function enlist(\r\n        uint256 battleId,\r\n        uint256 side,\r\n        uint256 weaponId\r\n    ) public {\r\n        bool ownsV1 = weaponContractV1.ownerOf(weaponId) == msg.sender;\r\n        bool ownsV2 = address(weaponContractV2) != address(0) &&\r\n            weaponContractV2.ownerOf(weaponId) == msg.sender;\r\n        require(ownsV1 || ownsV2, \"must own weapon\");\r\n        uint256 endTimestamp = idToBattleInfo[battleId].endTimestamp;\r\n        require(endTimestamp != 0, \"battle must exist\");\r\n        require(block.timestamp < endTimestamp, \"too late for battle\");\r\n\r\n        require(!battleIdToWeaponEnlisted[battleId][weaponId], \"weapon in use\");\r\n        require(\r\n            battleIdToWarriorInfo[battleId][msg.sender].side == 0,\r\n            \"warrior in battle\"\r\n        );\r\n        require(\r\n            side == ATTACKER_SIDE || side == DEFENDER_SIDE,\r\n            \"no bystanders!\"\r\n        );\r\n\r\n        uint256 power = powerCalculator.calculatePower(weaponId);\r\n        battleIdToWarriorInfo[battleId][msg.sender] = WarriorInfo(power, side);\r\n        battleIdToWeaponEnlisted[battleId][weaponId] = true;\r\n\r\n        if (side == ATTACKER_SIDE) {\r\n            idToBattleInfo[battleId].attackerPower += power;\r\n        } else {\r\n            idToBattleInfo[battleId].defenderPower += power;\r\n        }\r\n        idToBattleInfo[battleId].numWarriors++;\r\n\r\n        emit WarriorEnlisted(battleId, msg.sender, weaponId, side, power);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IBattleRewarder\",\"name\":\"newRewarder\",\"type\":\"address\"}],\"name\":\"BattleRewarderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"BattleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IPowerCalculator\",\"name\":\"newCalculator\",\"type\":\"address\"}],\"name\":\"PowerCalculatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"warrior\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"weaponId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"side\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"}],\"name\":\"WarriorEnlisted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"battleIdToWarriorInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"side\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"battleIdToWeaponEnlisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"battleRewarder\",\"outputs\":[{\"internalType\":\"contract IBattleRewarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"changeMinBattleDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"side\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weaponId\",\"type\":\"uint256\"}],\"name\":\"enlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToBattleInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"defenderPower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"attackerPower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numWarriors\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBattleDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextBattleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"powerCalculator\",\"outputs\":[{\"internalType\":\"contract IPowerCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBattleRewarder\",\"name\":\"newRewarder\",\"type\":\"address\"}],\"name\":\"setBattleRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPowerCalculator\",\"name\":\"newCalculator\",\"type\":\"address\"}],\"name\":\"setPowerCalculator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"newV2Contract\",\"type\":\"address\"}],\"name\":\"setV2ContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"startBattle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weaponContractV1\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weaponContractV2\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Battle","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fc7bdcd4abab274538ab0a41fc3c35802ae9f827572909110b40def211a31ddd"}]}