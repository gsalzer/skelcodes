{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals()\r\n    external\r\n    view\r\n    returns (\r\n      uint8\r\n    );\r\n\r\n  function description()\r\n    external\r\n    view\r\n    returns (\r\n      string memory\r\n    );\r\n\r\n  function version()\r\n    external\r\n    view\r\n    returns (\r\n      uint256\r\n    );\r\n\r\n  /* getRoundData and latestRoundData should both raise \"No data present\" */\r\n  /* if they do not have data to report, instead of returning unset values */\r\n  /* which could be misinterpreted as actual reported values. */\r\n  function getRoundData(\r\n    uint80 _roundId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n/* Token Contract call and send Functions */\r\ninterface Token {\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function approveAndCall(address spender, uint tokens, bytes memory data) external returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n        address public owner;\r\n        event onOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n        constructor() {\r\n            owner = payable(msg.sender);\r\n        }\r\n\r\n        modifier onlyOwner {\r\n            require(msg.sender == owner);\r\n            _;\r\n        }\r\n\r\n        function transferOwnership(address _newOwner) onlyOwner public {\r\n            require(_newOwner != address(0));\r\n            emit onOwnershipTransferred(owner, _newOwner);\r\n            owner = _newOwner;\r\n        }\r\n}\r\n\r\ncontract LockNLoad is Ownable{\r\n    using SafeMath for uint256;\r\n    \r\n    /* Deposit Variables */\r\n    struct Items {\r\n        address tokenAddress;\r\n        address withdrawalAddress;\r\n        uint256 tokenAmount;\r\n        uint256 unlockTime;\r\n        bool withdrawn;\r\n    }\r\n    \r\n    uint256 public depositId;\r\n    uint256[] public allDepositIds;\r\n    mapping (address => uint256[]) public depositsByWithdrawalAddress;\r\n    mapping (uint256 => Items) public lockedToken;\r\n    mapping (address => mapping(address => uint256)) public walletTokenBalance;\r\n    mapping(address => bool) public premiumMember;\r\n    bool public premium = true;\r\n    int private feerate = 1;\r\n    uint256 systemFeeCollected;\r\n    \r\n    event LogWithdrawal(address SentToAddress, uint256 AmountTransferred);\r\n    AggregatorV3Interface internal priceFeed;\r\n    \r\n    constructor()  {\r\n        priceFeed = AggregatorV3Interface(0x773616E4d11A78F511299002da57A0a94577F1f4);\r\n        premiumMember[msg.sender] = true;\r\n    }\r\n    \r\n    /* Calculate 1$ Price from Blockchain */\r\n    function getLatestPrice() public view returns (uint256) {\r\n        (\r\n            , \r\n            int price,\r\n            ,\r\n            ,\r\n        ) = priceFeed.latestRoundData();\r\n        return uint256(price);\r\n    }\r\n    \r\n    /* Calculate the original Fee */\r\n    function getSystemFees() public view returns (uint256) {\r\n        (\r\n            , \r\n            int price,\r\n            ,\r\n            ,\r\n        ) = priceFeed.latestRoundData();\r\n        return uint256(price*feerate);\r\n    }\r\n\r\n    /* Calculate Price for Multiple Locks */\r\n    function getSystemFeesBatch(uint256 _totalBatch) public view returns (uint256) {\r\n      return(getSystemFees()*_totalBatch);\r\n    }\r\n    \r\n    /* Lock the Tokens */\r\n    function lockTokens(address _tokenAddress, address _withdrawalAddress, uint256 _amount, uint256 _unlockTime) public payable returns (uint256 _id) {\r\n        require(_amount > 0);\r\n        require(_unlockTime < 10000000000);\r\n        uint256 fee = getSystemFees();\r\n        \r\n\r\n        /* Fee will be taken from non premium users */\r\n        if(premium){\r\n            if(!premiumMember[_withdrawalAddress]){\r\n                require(msg.value>=fee,\"System Fee Required\");\r\n                payable(owner).transfer(msg.value);\r\n                systemFeeCollected = systemFeeCollected + msg.value;\r\n            }\r\n        }\r\n        \r\n        /* update balance in address */\r\n        walletTokenBalance[_tokenAddress][_withdrawalAddress] = walletTokenBalance[_tokenAddress][_withdrawalAddress].add(_amount);\r\n        \r\n        _id = ++depositId;\r\n        lockedToken[_id].tokenAddress = _tokenAddress;\r\n        lockedToken[_id].withdrawalAddress = _withdrawalAddress;\r\n        lockedToken[_id].tokenAmount = _amount;\r\n        lockedToken[_id].unlockTime = _unlockTime;\r\n        lockedToken[_id].withdrawn = false;\r\n        \r\n        allDepositIds.push(_id);\r\n        depositsByWithdrawalAddress[_withdrawalAddress].push(_id);\r\n        \r\n        /* transfer tokens into contract */\r\n        require(Token(_tokenAddress).transferFrom(msg.sender, address(this), _amount));\r\n    }\r\n    \r\n    /* Create Multiple Locks */\r\n    function createMultipleLocks(address _tokenAddress, address _withdrawalAddress, uint256[] memory _amounts, uint256[] memory _unlockTimes) public payable returns (uint256 _id) {\r\n        require(_amounts.length > 0);\r\n        require(_amounts.length == _unlockTimes.length);\r\n        \r\n        uint256 fee = getSystemFees() * _amounts.length;\r\n        \r\n        /* Fee will be taken from non premium users */\r\n        if(premium){\r\n            if(!premiumMember[_withdrawalAddress]){\r\n                require(msg.value>=fee,\"System Fee Required\");\r\n                payable(owner).transfer(msg.value);\r\n                systemFeeCollected = systemFeeCollected + msg.value;\r\n            }\r\n        }\r\n        \r\n        uint256 i;\r\n        for(i=0; i<_amounts.length; i++){\r\n            require(_amounts[i] > 0);\r\n            require(_unlockTimes[i] < 10000000000);\r\n            \r\n            /* update balance in address */\r\n            walletTokenBalance[_tokenAddress][_withdrawalAddress] = walletTokenBalance[_tokenAddress][_withdrawalAddress].add(_amounts[i]);\r\n            \r\n            _id = ++depositId;\r\n            lockedToken[_id].tokenAddress = _tokenAddress;\r\n            lockedToken[_id].withdrawalAddress = _withdrawalAddress;\r\n            lockedToken[_id].tokenAmount = _amounts[i];\r\n            lockedToken[_id].unlockTime = _unlockTimes[i];\r\n            lockedToken[_id].withdrawn = false;\r\n            \r\n            allDepositIds.push(_id);\r\n            depositsByWithdrawalAddress[_withdrawalAddress].push(_id);\r\n            \r\n            /* transfer tokens into contract */\r\n            require(Token(_tokenAddress).transferFrom(msg.sender, address(this), _amounts[i]));\r\n        }\r\n    }\r\n    \r\n    /* Extend the Lock Duration */\r\n    function extendLockDuration(uint256 _id, uint256 _unlockTime) public {\r\n        require(_unlockTime < 10000000000);\r\n        require(_unlockTime > lockedToken[_id].unlockTime);\r\n        require(!lockedToken[_id].withdrawn);\r\n        require(msg.sender == lockedToken[_id].withdrawalAddress);\r\n        \r\n        /* set new unlock time */\r\n        lockedToken[_id].unlockTime = _unlockTime;\r\n    }\r\n    \r\n    /* Transfer the Locked Tokens */\r\n    function transferLocks(uint256 _id, address _receiverAddress) public {\r\n        require(!lockedToken[_id].withdrawn);\r\n        require(msg.sender == lockedToken[_id].withdrawalAddress);\r\n        \r\n        /* decrease sender's token balance */\r\n        walletTokenBalance[lockedToken[_id].tokenAddress][msg.sender] = walletTokenBalance[lockedToken[_id].tokenAddress][msg.sender].sub(lockedToken[_id].tokenAmount);\r\n        \r\n        /* increase receiver's token balance */\r\n        walletTokenBalance[lockedToken[_id].tokenAddress][_receiverAddress] = walletTokenBalance[lockedToken[_id].tokenAddress][_receiverAddress].add(lockedToken[_id].tokenAmount);\r\n        \r\n        /* remove this id from sender address */\r\n        uint256 j;\r\n        uint256 arrLength = depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress].length;\r\n        for (j=0; j<arrLength; j++) {\r\n            if (depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][j] == _id) {\r\n                depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][j] = depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][arrLength - 1];\r\n                depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress].pop();\r\n                break;\r\n            }\r\n        }\r\n        \r\n        /* Assign this id to receiver address */\r\n        lockedToken[_id].withdrawalAddress = _receiverAddress;\r\n        depositsByWithdrawalAddress[_receiverAddress].push(_id);\r\n    }\r\n    \r\n    /* Withdraw Tokens */\r\n    function withdrawTokens(uint256 _id) public {\r\n        require(block.timestamp >= lockedToken[_id].unlockTime);\r\n        require(msg.sender == lockedToken[_id].withdrawalAddress);\r\n        require(!lockedToken[_id].withdrawn);\r\n        \r\n        \r\n        lockedToken[_id].withdrawn = true;\r\n        \r\n        /* update balance in address */\r\n        walletTokenBalance[lockedToken[_id].tokenAddress][msg.sender] = walletTokenBalance[lockedToken[_id].tokenAddress][msg.sender].sub(lockedToken[_id].tokenAmount);\r\n        \r\n        /* remove this id from this address */\r\n        uint256 j;\r\n        uint256 arrLength = depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress].length;\r\n        for (j=0; j<arrLength; j++) {\r\n            if (depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][j] == _id) {\r\n                depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][j] = depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][arrLength - 1];\r\n                depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress].pop();\r\n                break;\r\n            }\r\n        }\r\n        \r\n        /* transfer tokens to wallet address */\r\n        require(Token(lockedToken[_id].tokenAddress).transfer(msg.sender, lockedToken[_id].tokenAmount));\r\n        emit LogWithdrawal(msg.sender, lockedToken[_id].tokenAmount);\r\n\r\n        /* Removes any BNB Stuck inside contract to Owner */\r\n        if(address(this).balance>0){\r\n          payable(owner).transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    /* Get Total Token Balance in Contract */\r\n    function getTotalTokenBalance(address _tokenAddress) view public returns (uint256)\r\n    {\r\n       return Token(_tokenAddress).balanceOf(address(this));\r\n    }\r\n    \r\n    /* Get Total Token Balance by Address */\r\n    function getTokenBalanceByAddress(address _tokenAddress, address _walletAddress) view public returns (uint256)\r\n    {\r\n       return walletTokenBalance[_tokenAddress][_walletAddress];\r\n    }\r\n    \r\n    /* Get All Deposit IDs */\r\n    function getAllDepositIds() view public returns (uint256[] memory)\r\n    {\r\n        return allDepositIds;\r\n    }\r\n    \r\n    /* Get Deposit Details */\r\n    function getDepositDetails(uint256 _id) view public returns (address _tokenAddress, address _withdrawalAddress, uint256 _tokenAmount, uint256 _unlockTime, bool _withdrawn)\r\n    {\r\n        return(lockedToken[_id].tokenAddress,lockedToken[_id].withdrawalAddress,lockedToken[_id].tokenAmount,\r\n        lockedToken[_id].unlockTime,lockedToken[_id].withdrawn);\r\n    }\r\n    \r\n    /* Get Deposit Details by Withdrawal Address */\r\n    function getDepositsByWithdrawalAddress(address _withdrawalAddress) view public returns (uint256[] memory)\r\n    {\r\n        return depositsByWithdrawalAddress[_withdrawalAddress];\r\n    }\r\n    \r\n    /* Turn Premium Feature ON or OFF */\r\n    function turnPremiumFeature() public onlyOwner returns (bool success)  {\r\n        if (premium) {\r\n            premium = false;\r\n        } else {\r\n            premium = true;\r\n        }\r\n        return true;\r\n        \r\n    }\r\n\r\n    /* This Function will whitelist Addresses for Premium Service */\r\n    function addtoPremiumService(address[] memory _recipients) public onlyOwner returns (bool) {\r\n        require(_recipients.length <= 100); //maximum receievers can be 100\r\n        for (uint i = 0; i < _recipients.length; i++) {\r\n            premiumMember[_recipients[i]] = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /* This Function will blacklist Addresses for Premium Service */\r\n    function removefromPremiumService(address[] memory _recipients) public onlyOwner returns (bool) {\r\n        require(_recipients.length <= 100); //maximum receievers can be 100\r\n        for (uint i = 0; i < _recipients.length; i++) {\r\n            premiumMember[_recipients[i]] = false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /* View BNB Balance */\r\n    function bnbBalance() public view returns (uint256){\r\n        return address(this).balance;\r\n    }\r\n    \r\n    /* Update fee Rate with respect to $ */\r\n    function updateFeeRate(int _feerate) public onlyOwner returns (bool success){\r\n        feerate = _feerate;\r\n        return true;\r\n    }\r\n    \r\n    /* Only Recieve Token for Lock */\r\n    receive() payable external {\r\n        payable(owner).transfer(msg.value);\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"SentToAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"AmountTransferred\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"onOwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"}],\"name\":\"addtoPremiumService\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allDepositIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_withdrawalAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_unlockTimes\",\"type\":\"uint256[]\"}],\"name\":\"createMultipleLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositsByWithdrawalAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"extendLockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllDepositIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDepositDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_withdrawalAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withdrawn\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_withdrawalAddress\",\"type\":\"address\"}],\"name\":\"getDepositsByWithdrawalAddress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSystemFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalBatch\",\"type\":\"uint256\"}],\"name\":\"getSystemFeesBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_walletAddress\",\"type\":\"address\"}],\"name\":\"getTokenBalanceByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getTotalTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_withdrawalAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premium\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"premiumMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"}],\"name\":\"removefromPremiumService\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiverAddress\",\"type\":\"address\"}],\"name\":\"transferLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnPremiumFeature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_feerate\",\"type\":\"int256\"}],\"name\":\"updateFeeRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"LockNLoad","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://948a7bff99cb42f29b2d1b622b377d9357e1d8c4d3d9c936caeb078a640b8b09"}]}