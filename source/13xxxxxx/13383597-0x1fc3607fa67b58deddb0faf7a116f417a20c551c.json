{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.7.6;\r\npragma abicoder v2;\r\n\r\ninterface IERC20 {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IAggregationExecutor {\r\n    function callBytes(bytes calldata data) external payable; // 0xd9c45357\r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: APPROVE_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FROM_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\r\n    }\r\n}\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\nlibrary SafeMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b > 0, \"ds-math-division-by-zero\");\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ninterface IERC20Permit {\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n\r\nlibrary RevertReasonParser {\r\n    function parse(bytes memory data, string memory prefix)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        // https://solidity.readthedocs.io/en/latest/control-structures.html#revert\r\n        // We assume that revert reason is abi-encoded as Error(string)\r\n\r\n        // 68 = 4-byte selector 0x08c379a0 + 32 bytes offset + 32 bytes length\r\n        if (\r\n            data.length >= 68 &&\r\n            data[0] == \"\\x08\" &&\r\n            data[1] == \"\\xc3\" &&\r\n            data[2] == \"\\x79\" &&\r\n            data[3] == \"\\xa0\"\r\n        ) {\r\n            string memory reason;\r\n            // solhint-disable no-inline-assembly\r\n            assembly {\r\n                // 68 = 32 bytes data length + 4-byte selector + 32 bytes offset\r\n                reason := add(data, 68)\r\n            }\r\n            /*\r\n                revert reason is padded up to 32 bytes with ABI encoder: Error(string)\r\n                also sometimes there is extra 32 bytes of zeros padded in the end:\r\n                https://github.com/ethereum/solidity/issues/10170\r\n                because of that we can't check for equality and instead check\r\n                that string length + extra 68 bytes is less than overall data length\r\n            */\r\n            require(\r\n                data.length >= 68 + bytes(reason).length,\r\n                \"Invalid revert reason\"\r\n            );\r\n            return string(abi.encodePacked(prefix, \"Error(\", reason, \")\"));\r\n        }\r\n        // 36 = 4-byte selector 0x4e487b71 + 32 bytes integer\r\n        else if (\r\n            data.length == 36 &&\r\n            data[0] == \"\\x4e\" &&\r\n            data[1] == \"\\x48\" &&\r\n            data[2] == \"\\x7b\" &&\r\n            data[3] == \"\\x71\"\r\n        ) {\r\n            uint256 code;\r\n            // solhint-disable no-inline-assembly\r\n            assembly {\r\n                // 36 = 32 bytes data length + 4-byte selector\r\n                code := mload(add(data, 36))\r\n            }\r\n            return\r\n                string(abi.encodePacked(prefix, \"Panic(\", _toHex(code), \")\"));\r\n        }\r\n\r\n        return string(abi.encodePacked(prefix, \"Unknown(\", _toHex(data), \")\"));\r\n    }\r\n\r\n    function _toHex(uint256 value) private pure returns (string memory) {\r\n        return _toHex(abi.encodePacked(value));\r\n    }\r\n\r\n    function _toHex(bytes memory data) private pure returns (string memory) {\r\n        bytes16 alphabet = 0x30313233343536373839616263646566;\r\n        bytes memory str = new bytes(2 + data.length * 2);\r\n        str[0] = \"0\";\r\n        str[1] = \"x\";\r\n        for (uint256 i = 0; i < data.length; i++) {\r\n            str[2 * i + 2] = alphabet[uint8(data[i] >> 4)];\r\n            str[2 * i + 3] = alphabet[uint8(data[i] & 0x0f)];\r\n        }\r\n        return string(str);\r\n    }\r\n}\r\n\r\ncontract Permitable {\r\n    event Error(string reason);\r\n\r\n    function _permit(\r\n        IERC20 token,\r\n        uint256 amount,\r\n        bytes calldata permit\r\n    ) internal {\r\n        if (permit.length == 32 * 7) {\r\n            // solhint-disable-next-line avoid-low-level-calls\r\n            (bool success, bytes memory result) =\r\n                address(token).call(\r\n                    abi.encodePacked(IERC20Permit.permit.selector, permit)\r\n                );\r\n            if (!success) {\r\n                string memory reason =\r\n                    RevertReasonParser.parse(result, \"Permit call failed: \");\r\n                if (token.allowance(msg.sender, address(this)) < amount) {\r\n                    revert(reason);\r\n                } else {\r\n                    emit Error(reason);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract AggregationRouter is Permitable, Ownable {\r\n    using SafeMath for uint256;\r\n    address public immutable WETH;\r\n    address private constant ETH_ADDRESS =\r\n        address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    uint256 private constant _PARTIAL_FILL = 0x01;\r\n    uint256 private constant _REQUIRES_EXTRA_ETH = 0x02;\r\n    uint256 private constant _SHOULD_CLAIM = 0x04;\r\n    uint256 private constant _BURN_FROM_MSG_SENDER = 0x08;\r\n    uint256 private constant _BURN_FROM_TX_ORIGIN = 0x10;\r\n\r\n    struct SwapDescription {\r\n        IERC20 srcToken;\r\n        IERC20 dstToken;\r\n        address srcReceiver;\r\n        address dstReceiver;\r\n        uint256 amount;\r\n        uint256 minReturnAmount;\r\n        uint256 flags;\r\n        bytes permit;\r\n    }\r\n\r\n    event Swapped(\r\n        address sender,\r\n        IERC20 srcToken,\r\n        IERC20 dstToken,\r\n        address dstReceiver,\r\n        uint256 spentAmount,\r\n        uint256 returnAmount\r\n    );\r\n\r\n    event Exchange(address pair, uint256 amountOut, address output);\r\n\r\n    modifier ensure(uint256 deadline) {\r\n        require(deadline >= block.timestamp, \"Router: EXPIRED\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _WETH) public {\r\n        WETH = _WETH;\r\n    }\r\n\r\n    receive() external payable {\r\n        assert(msg.sender == WETH);\r\n        // only accept ETH via fallback from the WETH contract\r\n    }\r\n\r\n    function swap(\r\n        IAggregationExecutor caller,\r\n        SwapDescription calldata desc,\r\n        bytes calldata data\r\n    ) external payable returns (uint256 returnAmount) {\r\n        require(desc.minReturnAmount > 0, \"Min return should not be 0\");\r\n        require(data.length > 0, \"data should be not zero\");\r\n\r\n        uint256 flags = desc.flags;\r\n        uint256 amount = desc.amount;\r\n        IERC20 srcToken = desc.srcToken;\r\n        IERC20 dstToken = desc.dstToken;\r\n\r\n        if (flags & _REQUIRES_EXTRA_ETH != 0) {\r\n            require(\r\n                msg.value > (isETH(srcToken) ? amount : 0),\r\n                \"Invalid msg.value\"\r\n            );\r\n        } else {\r\n            require(\r\n                msg.value == (isETH(srcToken) ? amount : 0),\r\n                \"Invalid msg.value\"\r\n            );\r\n        }\r\n\r\n        if (flags & _SHOULD_CLAIM != 0) {\r\n            require(!isETH(srcToken), \"Claim token is ETH\");\r\n            _permit(srcToken, amount, desc.permit);\r\n            TransferHelper.safeTransferFrom(\r\n                address(srcToken),\r\n                msg.sender,\r\n                desc.srcReceiver,\r\n                amount\r\n            );\r\n        }\r\n\r\n        address dstReceiver =\r\n            (desc.dstReceiver == address(0)) ? msg.sender : desc.dstReceiver;\r\n        uint256 initialSrcBalance =\r\n            (flags & _PARTIAL_FILL != 0) ? getBalance(srcToken, msg.sender) : 0;\r\n        uint256 initialDstBalance = getBalance(dstToken, dstReceiver);\r\n\r\n        {\r\n            // solhint-disable-next-line avoid-low-level-calls\r\n            (bool success, bytes memory result) =\r\n                address(caller).call{value: msg.value}(\r\n                    abi.encodeWithSelector(caller.callBytes.selector, data)\r\n                );\r\n            if (!success) {\r\n                revert(RevertReasonParser.parse(result, \"callBytes failed: \"));\r\n            }\r\n        }\r\n\r\n        uint256 spentAmount = amount;\r\n        returnAmount = getBalance(dstToken, dstReceiver).sub(initialDstBalance);\r\n\r\n        if (flags & _PARTIAL_FILL != 0) {\r\n            spentAmount = initialSrcBalance.add(amount).sub(\r\n                getBalance(srcToken, msg.sender)\r\n            );\r\n            require(\r\n                returnAmount.mul(amount) >=\r\n                    desc.minReturnAmount.mul(spentAmount),\r\n                \"Return amount is not enough\"\r\n            );\r\n        } else {\r\n            require(\r\n                returnAmount >= desc.minReturnAmount,\r\n                \"Return amount is not enough\"\r\n            );\r\n        }\r\n\r\n        emit Swapped(\r\n            msg.sender,\r\n            srcToken,\r\n            dstToken,\r\n            dstReceiver,\r\n            spentAmount,\r\n            returnAmount\r\n        );\r\n        emit Exchange(\r\n            address(caller),\r\n            returnAmount,\r\n            isETH(dstToken) ? WETH : address(dstToken)\r\n        );\r\n    }\r\n\r\n    function getBalance(IERC20 token, address account)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (isETH(token)) {\r\n            return account.balance;\r\n        } else {\r\n            return token.balanceOf(account);\r\n        }\r\n    }\r\n\r\n    function isETH(IERC20 token) internal pure returns (bool) {\r\n        return (address(token) == ETH_ADDRESS);\r\n    }\r\n\r\n    function rescueFunds(address token, uint256 amount) external onlyOwner {\r\n        if (isETH(IERC20(token))) {\r\n            TransferHelper.safeTransferETH(msg.sender, amount);\r\n        } else {\r\n            TransferHelper.safeTransfer(token, msg.sender, amount);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"Error\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"output\",\"type\":\"address\"}],\"name\":\"Exchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAggregationExecutor\",\"name\":\"caller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"internalType\":\"struct AggregationRouter.SwapDescription\",\"name\":\"desc\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"AggregationRouter","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b35595226045d97544539f78e03481c4fad23be8e5ac73398f0678c83ab2db4e"}]}