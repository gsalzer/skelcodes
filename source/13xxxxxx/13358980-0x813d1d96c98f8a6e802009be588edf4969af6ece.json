{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.8.9;\r\n\r\ninterface IBXRToken {\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function balanceOf(address) external view returns (uint256);\r\n}\r\n\r\ncontract Sale {\r\n    address public owner;\r\n    address public updater;\r\n    address public token;\r\n\r\n    uint256 internal rate;\r\n    uint256 internal constant RATE_DELIMITER = 1000;\r\n\r\n    uint256 internal oldRate;\r\n    uint256 internal rateUpdateDelay = 5 minutes;\r\n    uint256 internal rateBecomesValidAt;\r\n\r\n    event Purchase(address indexed buyer, uint256 amount);\r\n    event RateUpdate(uint256 newRate, uint256 rateBecomesValidAt);\r\n    event DelayUpdate(uint256 newDelay);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event TokensReceived(uint256 amount);\r\n    event ChangedUpdater(address indexed previousUpdater, address indexed newUpdater);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyUpdater() {\r\n        require(msg.sender == updater, \"This function is callable only by updater\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _token, uint256 _rate) {\r\n        require(_token != address(0));\r\n        require(_rate != 0);\r\n\r\n        owner = msg.sender;\r\n        token = _token;\r\n        rate = _rate;\r\n    }\r\n\r\n    function recieve() external payable {\r\n        require(msg.data.length == 0);\r\n\r\n        buy();\r\n    }\r\n\r\n    function updateRate(uint256 newRate) internal {\r\n        require(newRate != 0);\r\n\r\n        if (block.timestamp > rateBecomesValidAt) {\r\n            oldRate = rate;\r\n        }\r\n        rate = newRate;\r\n        rateBecomesValidAt = block.timestamp + rateUpdateDelay;\r\n        emit RateUpdate(newRate, rateBecomesValidAt);\r\n    }\r\n\r\n    function updateRateByOwner(uint256 newRate) external onlyOwner {\r\n        updateRate(newRate);\r\n    }\r\n\r\n    function updateRateByUpdater(uint256 newRate) external onlyUpdater {\r\n        (uint256 future_rate, uint256 timePriorToApply) = futureRate();\r\n        require(timePriorToApply == 0, \"New rate hasn't been applied yet\");\r\n        uint256 newRateMultiplied = newRate * 100;\r\n        require(newRateMultiplied / 100 == newRate, \"Integer overflow\");\r\n        // No need to check previous rate for overflow as newRate is checked\r\n        // uint256 rateMultiplied = rate * 100;\r\n        // require(rateMultiplied / 100 == rate, \"Integer overflow\");\r\n        require(newRate * 99 <= future_rate * 100, \"New rate is too high\");\r\n\r\n        updateRate(newRate);\r\n    }\r\n\r\n    function changeRateUpdateDelay(uint256 newDelay) external onlyOwner {\r\n        rateUpdateDelay = newDelay;\r\n        emit DelayUpdate(newDelay);\r\n    }\r\n\r\n    function withdraw() external onlyOwner {\r\n        require(address(this).balance > 0);\r\n\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function withdraw(address payable to) external onlyOwner {\r\n        require(address(this).balance > 0);\r\n\r\n        to.transfer(address(this).balance);\r\n    }\r\n\r\n    function transferOwnership(address _owner) external onlyOwner {\r\n        require(_owner != address(0));\r\n\r\n        emit OwnershipTransferred(owner, _owner);\r\n\r\n        owner = _owner;\r\n    }\r\n\r\n    function tokenFallback(address, uint value, bytes calldata) external {\r\n        require(msg.sender == token);\r\n\r\n        emit TokensReceived(value);\r\n    }\r\n\r\n    function buy() public payable returns (uint256) {\r\n        uint256 availableTotal = availableTokens();\r\n        require(availableTotal > 0);\r\n\r\n        uint256 amount = weiToTokens(msg.value);\r\n        \r\n        // actual = min(amount, availableTotal)\r\n        uint256 actual = amount < availableTotal ? amount : availableTotal;\r\n\r\n        require(IBXRToken(token).transfer(msg.sender, actual));\r\n\r\n        if (amount != actual) {\r\n            uint256 weiRefund = msg.value - tokensToWei(actual);\r\n            payable(msg.sender).transfer(weiRefund);\r\n        }\r\n\r\n        emit Purchase(msg.sender, actual);\r\n\r\n        return actual;\r\n    }\r\n\r\n    function currentRate() public view returns (uint256) {\r\n        return (block.timestamp < rateBecomesValidAt) ? oldRate : rate;\r\n    }\r\n\r\n    function weiToTokens(uint256 weiAmount) public view returns (uint256) {\r\n        uint256 exchangeRate = currentRate();\r\n\r\n        return weiAmount * exchangeRate / RATE_DELIMITER;\r\n    }\r\n\r\n    function tokensToWei(uint256 tokensAmount) public view returns (uint256) {\r\n        uint256 exchangeRate = currentRate();\r\n\r\n        return tokensAmount * RATE_DELIMITER / exchangeRate;\r\n    }\r\n\r\n    function futureRate() public view returns (uint256, uint256) {\r\n        return (block.timestamp < rateBecomesValidAt) ? (rate, rateBecomesValidAt - block.timestamp) : (rate, 0);\r\n    }\r\n\r\n    function availableTokens() public view returns (uint256) {\r\n        return IBXRToken(token).balanceOf(address(this));\r\n    }\r\n\r\n    function changeUpdater(address _updater) external onlyOwner {\r\n        require(_updater != address(0), \"Invalid _updater address\");\r\n\r\n        emit ChangedUpdater(updater, _updater);\r\n\r\n        updater = _updater;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousUpdater\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newUpdater\",\"type\":\"address\"}],\"name\":\"ChangedUpdater\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"}],\"name\":\"DelayUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rateBecomesValidAt\",\"type\":\"uint256\"}],\"name\":\"RateUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensReceived\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"availableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"}],\"name\":\"changeRateUpdateDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_updater\",\"type\":\"address\"}],\"name\":\"changeUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"futureRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recieve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"tokensToWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"updateRateByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"updateRateByUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"weiToTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Sale","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000097a3bd8a445cc187c6a751f392e15c3b2134d695000000000000000000000000000000000000000000000000000000000504268e","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c1b200b3565e8ea7eaf297e0a190de39a3b98e232d20c973a075cbbca0780380"}]}