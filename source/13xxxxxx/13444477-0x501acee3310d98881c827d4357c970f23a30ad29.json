{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Registry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport \\\"./Governable.sol\\\";\\nimport \\\"./interface/IRegistry.sol\\\";\\n\\n/**\\n * @title Registry\\n * @author solace.fi\\n * @notice Tracks the contracts of the Solaverse.\\n *\\n * [**Governance**](/docs/protocol/governance) can set the contract addresses and anyone can look them up.\\n *\\n * Note that `Registry` doesn't track all Solace contracts. Farms are tracked in [`FarmController`](./FarmController), Products are tracked in [`PolicyManager`](./PolicyManager), and the `Registry` is untracked.\\n */\\ncontract Registry is IRegistry, Governable {\\n\\n    /***************************************\\n    GLOBAL VARIABLES\\n    ***************************************/\\n\\n    // WETH contract.\\n    address internal _weth;\\n    // Vault contract.\\n    address internal _vault;\\n    // Claims Escrow contract.\\n    address internal _claimsEscrow;\\n    // Treasury contract.\\n    address internal _treasury;\\n    // Policy Manager contract.\\n    address internal _policyManager;\\n    // Risk Manager contract.\\n    address internal _riskManager;\\n    // SOLACE contract.\\n    address internal _solace;\\n    // OptionsFarming contract.\\n    address internal _optionsFarming;\\n    // FarmController contract.\\n    address internal _farmController;\\n    // Locker contract.\\n    address internal _locker;\\n\\n    /**\\n     * @notice Constructs the registry contract.\\n     * @param governance_ The address of the [governor](/docs/protocol/governance).\\n     */\\n    constructor(address governance_) Governable(governance_) { }\\n\\n    /***************************************\\n    VIEW FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Gets the [**WETH**](./WETH9) contract.\\n     * @return weth_ The address of the [**WETH**](./WETH9) contract.\\n     */\\n    function weth() external view override returns (address weth_) {\\n        return _weth;\\n    }\\n\\n    /**\\n     * @notice Gets the [`Vault`](./Vault) contract.\\n     * @return vault_ The address of the [`Vault`](./Vault) contract.\\n     */\\n    function vault() external view override returns (address vault_) {\\n        return _vault;\\n    }\\n\\n    /**\\n     * @notice Gets the [`ClaimsEscrow`](./ClaimsEscrow) contract.\\n     * @return claimsEscrow_ The address of the [`ClaimsEscrow`](./ClaimsEscrow) contract.\\n     */\\n    function claimsEscrow() external view override returns (address claimsEscrow_) {\\n        return _claimsEscrow;\\n    }\\n\\n    /**\\n     * @notice Gets the [`Treasury`](./Treasury) contract.\\n     * @return treasury_ The address of the [`Treasury`](./Treasury) contract.\\n     */\\n    function treasury() external view override returns (address treasury_) {\\n        return _treasury;\\n    }\\n\\n    /**\\n     * @notice Gets the [`PolicyManager`](./PolicyManager) contract.\\n     * @return policyManager_ The address of the [`PolicyManager`](./PolicyManager) contract.\\n     */\\n    function policyManager() external view override returns (address policyManager_) {\\n        return _policyManager;\\n    }\\n\\n    /**\\n     * @notice Gets the [`RiskManager`](./RiskManager) contract.\\n     * @return riskManager_ The address of the [`RiskManager`](./RiskManager) contract.\\n     */\\n    function riskManager() external view override returns (address riskManager_) {\\n        return _riskManager;\\n    }\\n\\n    /**\\n     * @notice Gets the [**SOLACE**](./SOLACE) contract.\\n     * @return solace_ The address of the [**SOLACE**](./SOLACE) contract.\\n     */\\n    function solace() external view override returns (address solace_) {\\n        return _solace;\\n    }\\n\\n    /**\\n     * @notice Gets the [`OptionsFarming`](./OptionsFarming) contract.\\n     * @return optionsFarming_ The address of the [`OptionsFarming`](./OptionsFarming) contract.\\n     */\\n    function optionsFarming() external view override returns (address optionsFarming_) {\\n        return _optionsFarming;\\n    }\\n\\n    /**\\n     * @notice Gets the [`FarmController`](./FarmController) contract.\\n     * @return farmController_ The address of the [`FarmController`](./FarmController) contract.\\n     */\\n    function farmController() external view override returns (address farmController_) {\\n        return _farmController;\\n    }\\n\\n    /**\\n     * @notice Gets the [`Locker`](./Locker) contract.\\n     * @return locker_ The address of the [`Locker`](./Locker) contract.\\n     */\\n    function locker() external view override returns (address) {\\n        return _locker;\\n    }\\n\\n    /***************************************\\n    GOVERNANCE FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Sets the [**WETH**](./WETH9) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param weth_ The address of the [**WETH**](./WETH9) contract.\\n     */\\n    function setWeth(address weth_) external override onlyGovernance {\\n        require(weth_ != address(0x0), \\\"zero address weth\\\");\\n        _weth = weth_;\\n        emit WethSet(weth_);\\n    }\\n\\n    /**\\n     * @notice Sets the [`Vault`](./Vault) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param vault_ The address of the [`Vault`](./Vault) contract.\\n     */\\n    function setVault(address vault_) external override onlyGovernance {\\n        require(vault_ != address(0x0), \\\"zero address vault\\\");\\n        _vault = vault_;\\n        emit VaultSet(vault_);\\n    }\\n\\n    /**\\n     * @notice Sets the [`Claims Escrow`](./ClaimsEscrow) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param claimsEscrow_ The address of the [`Claims Escrow`](./ClaimsEscrow) contract.\\n     */\\n    function setClaimsEscrow(address claimsEscrow_) external override onlyGovernance {\\n        require(claimsEscrow_ != address(0x0), \\\"zero address claims escrow\\\");\\n        _claimsEscrow = claimsEscrow_;\\n        emit ClaimsEscrowSet(claimsEscrow_);\\n    }\\n\\n    /**\\n     * @notice Sets the [`Treasury`](./Treasury) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param treasury_ The address of the [`Treasury`](./Treasury) contract.\\n     */\\n    function setTreasury(address treasury_) external override onlyGovernance {\\n        require(treasury_ != address(0x0), \\\"zero address treasury\\\");\\n        _treasury = treasury_;\\n        emit TreasurySet(treasury_);\\n    }\\n\\n    /**\\n     * @notice Sets the [`Policy Manager`](./PolicyManager) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param policyManager_ The address of the [`Policy Manager`](./PolicyManager) contract.\\n     */\\n    function setPolicyManager(address policyManager_) external override onlyGovernance {\\n        require(policyManager_ != address(0x0), \\\"zero address policymanager\\\");\\n        _policyManager = policyManager_;\\n        emit PolicyManagerSet(policyManager_);\\n    }\\n\\n    /**\\n     * @notice Sets the [`Risk Manager`](./RiskManager) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param riskManager_ The address of the [`Risk Manager`](./RiskManager) contract.\\n     */\\n    function setRiskManager(address riskManager_) external override onlyGovernance {\\n        require(riskManager_ != address(0x0), \\\"zero address riskmanager\\\");\\n        _riskManager = riskManager_;\\n        emit RiskManagerSet(riskManager_);\\n    }\\n\\n    /**\\n     * @notice Sets the [**SOLACE**](./SOLACE) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param solace_ The address of the [**SOLACE**](./SOLACE) contract.\\n     */\\n    function setSolace(address solace_) external override onlyGovernance {\\n        require(solace_ != address(0x0), \\\"zero address solace\\\");\\n        _solace = solace_;\\n        emit SolaceSet(solace_);\\n    }\\n\\n    /**\\n     * @notice Sets the [`OptionsFarming`](./OptionsFarming) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param optionsFarming_ The address of the [`OptionsFarming`](./OptionsFarming) contract.\\n     */\\n    function setOptionsFarming(address optionsFarming_) external override onlyGovernance {\\n        _optionsFarming = optionsFarming_;\\n        emit OptionsFarmingSet(optionsFarming_);\\n    }\\n\\n    /**\\n     * @notice Sets the [`FarmController`](./FarmController) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param farmController_ The address of the [`FarmController`](./FarmController) contract.\\n     */\\n    function setFarmController(address farmController_) external override onlyGovernance {\\n        require(farmController_ != address(0x0), \\\"zero address farmcontroller\\\");\\n        _farmController = farmController_;\\n        emit FarmControllerSet(farmController_);\\n    }\\n\\n    /**\\n     * @notice Sets the [`Locker`](./Locker) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param locker_ The address of the [`Locker`](./Locker) contract.\\n     */\\n    function setLocker(address locker_) external override onlyGovernance {\\n        require(locker_ != address(0x0), \\\"zero address locker\\\");\\n        _locker = locker_;\\n        emit LockerSet(locker_);\\n    }\\n\\n    /**\\n     * @notice Sets multiple contracts in one call.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param weth_ The address of the [**WETH**](../WETH9) contract.\\n     * @param vault_ The address of the [`Vault`](../Vault) contract.\\n     * @param claimsEscrow_ The address of the [`Claims Escrow`](../ClaimsEscrow) contract.\\n     * @param treasury_ The address of the [`Treasury`](../Treasury) contract.\\n     * @param policyManager_ The address of the [`Policy Manager`](../PolicyManager) contract.\\n     * @param riskManager_ The address of the [`Risk Manager`](../RiskManager) contract.\\n     * @param solace_ The address of the [**SOLACE**](../SOLACE) contract.\\n     * @param optionsFarming_ The address of the [`OptionsFarming`](./OptionsFarming) contract.\\n     * @param farmController_ The address of the [`FarmController`](./FarmController) contract.\\n     * @param locker_ The address of the [`Locker`](../Locker) contract.\\n     */\\n    function setMultiple(\\n        address weth_,\\n        address vault_,\\n        address claimsEscrow_,\\n        address treasury_,\\n        address policyManager_,\\n        address riskManager_,\\n        address solace_,\\n        address optionsFarming_,\\n        address farmController_,\\n        address locker_\\n    ) external override onlyGovernance {\\n        require(weth_ != address(0x0), \\\"zero address weth\\\");\\n        require(vault_ != address(0x0), \\\"zero address vault\\\");\\n        require(claimsEscrow_ != address(0x0), \\\"zero address claims escrow\\\");\\n        require(treasury_ != address(0x0), \\\"zero address treasury\\\");\\n        require(policyManager_ != address(0x0), \\\"zero address policymanager\\\");\\n        require(riskManager_ != address(0x0), \\\"zero address riskmanager\\\");\\n        require(solace_ != address(0x0), \\\"zero address solace\\\");\\n        require(optionsFarming_ != address(0x0), \\\"zero address optionsfarming\\\");\\n        require(farmController_ != address(0x0), \\\"zero address farmcontroller\\\");\\n        require(locker_ != address(0x0), \\\"zero address locker\\\");\\n        _weth = weth_;\\n        emit WethSet(weth_);\\n        _vault = vault_;\\n        emit VaultSet(vault_);\\n        _claimsEscrow = claimsEscrow_;\\n        emit ClaimsEscrowSet(claimsEscrow_);\\n        _treasury = treasury_;\\n        emit TreasurySet(treasury_);\\n        _policyManager = policyManager_;\\n        emit PolicyManagerSet(policyManager_);\\n        _riskManager = riskManager_;\\n        emit RiskManagerSet(riskManager_);\\n        _solace = solace_;\\n        emit SolaceSet(solace_);\\n        _optionsFarming = optionsFarming_;\\n        emit OptionsFarmingSet(optionsFarming_);\\n        _farmController = farmController_;\\n        emit FarmControllerSet(farmController_);\\n        _locker = locker_;\\n        emit LockerSet(locker_);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport \\\"./interface/IGovernable.sol\\\";\\n\\n/**\\n * @title Governable\\n * @author solace.fi\\n * @notice Enforces access control for important functions to [**governor**](/docs/protocol/governance).\\n *\\n * Many contracts contain functionality that should only be accessible to a privileged user. The most common access control pattern is [OpenZeppelin's `Ownable`](https://docs.openzeppelin.com/contracts/4.x/access-control#ownership-and-ownable). We instead use `Governable` with a few key differences:\\n   * - Transferring the governance role is a two step process. The current governance must [`setPendingGovernance(pendingGovernance_)`](#setPendingGovernance) then the new governance must [`acceptGovernance()`](#acceptgovernance). This is to safeguard against accidentally setting ownership to the wrong address and locking yourself out of your contract.\\n * - `governance` is a constructor argument instead of `msg.sender`. This is especially useful when deploying contracts via a [`SingletonFactory`](./interface/ISingletonFactory).\\n * - We use `lockGovernance()` instead of `renounceOwnership()`. `renounceOwnership()` is a prerequisite for the reinitialization bug because it sets `owner = address(0x0)`. We also use the `governanceIsLocked()` flag.\\n */\\ncontract Governable is IGovernable {\\n\\n    /***************************************\\n    GLOBAL VARIABLES\\n    ***************************************/\\n\\n    // Governor.\\n    address private _governance;\\n\\n    // governance to take over.\\n    address private _pendingGovernance;\\n\\n    bool private _locked;\\n\\n    /**\\n     * @notice Constructs the governable contract.\\n     * @param governance_ The address of the [governor](/docs/protocol/governance).\\n     */\\n    constructor(address governance_) {\\n        require(governance_ != address(0x0), \\\"zero address governance\\\");\\n        _governance = governance_;\\n        _pendingGovernance = address(0x0);\\n        _locked = false;\\n    }\\n\\n    /***************************************\\n    MODIFIERS\\n    ***************************************/\\n\\n    // can only be called by governor\\n    // can only be called while unlocked\\n    modifier onlyGovernance() {\\n        require(!_locked, \\\"governance locked\\\");\\n        require(msg.sender == _governance, \\\"!governance\\\");\\n        _;\\n    }\\n\\n    // can only be called by pending governor\\n    // can only be called while unlocked\\n    modifier onlyPendingGovernance() {\\n        require(!_locked, \\\"governance locked\\\");\\n        require(msg.sender == _pendingGovernance, \\\"!pending governance\\\");\\n        _;\\n    }\\n\\n    /***************************************\\n    VIEW FUNCTIONS\\n    ***************************************/\\n\\n    /// @notice Address of the current governor.\\n    function governance() external view override returns (address) {\\n        return _governance;\\n    }\\n\\n    /// @notice Address of the governor to take over.\\n    function pendingGovernance() external view override returns (address) {\\n        return _pendingGovernance;\\n    }\\n\\n    /// @notice Returns true if governance is locked.\\n    function governanceIsLocked() external view override returns (bool) {\\n        return _locked;\\n    }\\n\\n    /***************************************\\n    MUTATOR FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Initiates transfer of the governance role to a new governor.\\n     * Transfer is not complete until the new governor accepts the role.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param pendingGovernance_ The new governor.\\n     */\\n    function setPendingGovernance(address pendingGovernance_) external override onlyGovernance {\\n        _pendingGovernance = pendingGovernance_;\\n        emit GovernancePending(pendingGovernance_);\\n    }\\n\\n    /**\\n     * @notice Accepts the governance role.\\n     * Can only be called by the pending governor.\\n     */\\n    function acceptGovernance() external override onlyPendingGovernance {\\n        // sanity check against transferring governance to the zero address\\n        // if someone figures out how to sign transactions from the zero address\\n        // consider the entirety of ethereum to be rekt\\n        require(_pendingGovernance != address(0x0), \\\"zero governance\\\");\\n        address oldGovernance = _governance;\\n        _governance = _pendingGovernance;\\n        _pendingGovernance = address(0x0);\\n        emit GovernanceTransferred(oldGovernance, _governance);\\n    }\\n\\n    /**\\n     * @notice Permanently locks this contract's governance role and any of its functions that require the role.\\n     * This action cannot be reversed.\\n     * Before you call it, ask yourself:\\n     *   - Is the contract self-sustaining?\\n     *   - Is there a chance you will need governance privileges in the future?\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     */\\n    function lockGovernance() external override onlyGovernance {\\n        _locked = true;\\n        // intentionally not using address(0x0), see re-initialization exploit\\n        _governance = address(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\\n        _pendingGovernance = address(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\\n        emit GovernanceTransferred(msg.sender, address(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF));\\n        emit GovernanceLocked();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\n/**\\n * @title IRegistry\\n * @author solace.fi\\n * @notice Tracks the contracts of the Solaverse.\\n *\\n * [**Governance**](/docs/protocol/governance) can set the contract addresses and anyone can look them up.\\n *\\n * Note that `Registry` doesn't track all Solace contracts. FarmController is tracked in [`OptionsFarming`](../OptionsFarming), farms are tracked in FarmController, Products are tracked in [`PolicyManager`](../PolicyManager), and the `Registry` is untracked.\\n */\\ninterface IRegistry {\\n\\n    /***************************************\\n    EVENTS\\n    ***************************************/\\n\\n    // Emitted when WETH is set.\\n    event WethSet(address weth);\\n    // Emitted when Vault is set.\\n    event VaultSet(address vault);\\n    // Emitted when ClaimsEscrow is set.\\n    event ClaimsEscrowSet(address claimsEscrow);\\n    // Emitted when Treasury is set.\\n    event TreasurySet(address treasury);\\n    // Emitted when PolicyManager is set.\\n    event PolicyManagerSet(address policyManager);\\n    // Emitted when RiskManager is set.\\n    event RiskManagerSet(address riskManager);\\n    // Emitted when Solace Token is set.\\n    event SolaceSet(address solace);\\n    // Emitted when OptionsFarming is set.\\n    event OptionsFarmingSet(address optionsFarming);\\n    // Emitted when FarmController is set.\\n    event FarmControllerSet(address farmController);\\n    // Emitted when Locker is set.\\n    event LockerSet(address locker);\\n\\n    /***************************************\\n    VIEW FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Gets the [**WETH**](../WETH9) contract.\\n     * @return weth_ The address of the [**WETH**](../WETH9) contract.\\n     */\\n    function weth() external view returns (address weth_);\\n\\n    /**\\n     * @notice Gets the [`Vault`](../Vault) contract.\\n     * @return vault_ The address of the [`Vault`](../Vault) contract.\\n     */\\n    function vault() external view returns (address vault_);\\n\\n    /**\\n     * @notice Gets the [`ClaimsEscrow`](../ClaimsEscrow) contract.\\n     * @return claimsEscrow_ The address of the [`ClaimsEscrow`](../ClaimsEscrow) contract.\\n     */\\n    function claimsEscrow() external view returns (address claimsEscrow_);\\n\\n    /**\\n     * @notice Gets the [`Treasury`](../Treasury) contract.\\n     * @return treasury_ The address of the [`Treasury`](../Treasury) contract.\\n     */\\n    function treasury() external view returns (address treasury_);\\n\\n    /**\\n     * @notice Gets the [`PolicyManager`](../PolicyManager) contract.\\n     * @return policyManager_ The address of the [`PolicyManager`](../PolicyManager) contract.\\n     */\\n    function policyManager() external view returns (address policyManager_);\\n\\n    /**\\n     * @notice Gets the [`RiskManager`](../RiskManager) contract.\\n     * @return riskManager_ The address of the [`RiskManager`](../RiskManager) contract.\\n     */\\n    function riskManager() external view returns (address riskManager_);\\n\\n    /**\\n     * @notice Gets the [**SOLACE**](../SOLACE) contract.\\n     * @return solace_ The address of the [**SOLACE**](../SOLACE) contract.\\n     */\\n    function solace() external view returns (address solace_);\\n\\n    /**\\n     * @notice Gets the [`OptionsFarming`](../OptionsFarming) contract.\\n     * @return optionsFarming_ The address of the [`OptionsFarming`](../OptionsFarming) contract.\\n     */\\n    function optionsFarming() external view returns (address optionsFarming_);\\n\\n    /**\\n     * @notice Gets the [`FarmController`](../FarmController) contract.\\n     * @return farmController_ The address of the [`FarmController`](../FarmController) contract.\\n     */\\n    function farmController() external view returns (address farmController_);\\n\\n    /**\\n     * @notice Gets the [`Locker`](../Locker) contract.\\n     * @return locker_ The address of the [`Locker`](../Locker) contract.\\n     */\\n    function locker() external view returns (address locker_);\\n\\n    /***************************************\\n    GOVERNANCE FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Sets the [**WETH**](../WETH9) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param weth_ The address of the [**WETH**](../WETH9) contract.\\n     */\\n    function setWeth(address weth_) external;\\n\\n    /**\\n     * @notice Sets the [`Vault`](../Vault) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param vault_ The address of the [`Vault`](../Vault) contract.\\n     */\\n    function setVault(address vault_) external;\\n\\n    /**\\n     * @notice Sets the [`Claims Escrow`](../ClaimsEscrow) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param claimsEscrow_ The address of the [`Claims Escrow`](../ClaimsEscrow) contract.\\n     */\\n    function setClaimsEscrow(address claimsEscrow_) external;\\n\\n    /**\\n     * @notice Sets the [`Treasury`](../Treasury) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param treasury_ The address of the [`Treasury`](../Treasury) contract.\\n     */\\n    function setTreasury(address treasury_) external;\\n\\n    /**\\n     * @notice Sets the [`Policy Manager`](../PolicyManager) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param policyManager_ The address of the [`Policy Manager`](../PolicyManager) contract.\\n     */\\n    function setPolicyManager(address policyManager_) external;\\n\\n    /**\\n     * @notice Sets the [`Risk Manager`](../RiskManager) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param riskManager_ The address of the [`Risk Manager`](../RiskManager) contract.\\n     */\\n    function setRiskManager(address riskManager_) external;\\n\\n    /**\\n     * @notice Sets the [**SOLACE**](../SOLACE) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param solace_ The address of the [**SOLACE**](../SOLACE) contract.\\n     */\\n    function setSolace(address solace_) external;\\n\\n    /**\\n     * @notice Sets the [`OptionsFarming`](../OptionsFarming) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param optionsFarming_ The address of the [`OptionsFarming`](../OptionsFarming) contract.\\n     */\\n    function setOptionsFarming(address optionsFarming_) external;\\n\\n    /**\\n     * @notice Sets the [`FarmController`](../FarmController) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param farmController_ The address of the [`FarmController`](../FarmController) contract.\\n     */\\n    function setFarmController(address farmController_) external;\\n\\n    /**\\n     * @notice Sets the [`Locker`](../Locker) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param locker_ The address of the [`Locker`](../Locker) contract.\\n     */\\n    function setLocker(address locker_) external;\\n\\n    /**\\n     * @notice Sets multiple contracts in one call.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param weth_ The address of the [**WETH**](../WETH9) contract.\\n     * @param vault_ The address of the [`Vault`](../Vault) contract.\\n     * @param claimsEscrow_ The address of the [`Claims Escrow`](../ClaimsEscrow) contract.\\n     * @param treasury_ The address of the [`Treasury`](../Treasury) contract.\\n     * @param policyManager_ The address of the [`Policy Manager`](../PolicyManager) contract.\\n     * @param riskManager_ The address of the [`Risk Manager`](../RiskManager) contract.\\n     * @param solace_ The address of the [**SOLACE**](../SOLACE) contract.\\n     * @param optionsFarming_ The address of the [`OptionsFarming`](./OptionsFarming) contract.\\n     * @param farmController_ The address of the [`FarmController`](./FarmController) contract.\\n     * @param locker_ The address of the [`Locker`](../Locker) contract.\\n     */\\n    function setMultiple(\\n        address weth_,\\n        address vault_,\\n        address claimsEscrow_,\\n        address treasury_,\\n        address policyManager_,\\n        address riskManager_,\\n        address solace_,\\n        address optionsFarming_,\\n        address farmController_,\\n        address locker_\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IGovernable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\n/**\\n * @title IGovernable\\n * @author solace.fi\\n * @notice Enforces access control for important functions to [**governor**](/docs/protocol/governance).\\n *\\n * Many contracts contain functionality that should only be accessible to a privileged user. The most common access control pattern is [OpenZeppelin's `Ownable`](https://docs.openzeppelin.com/contracts/4.x/access-control#ownership-and-ownable). We instead use `Governable` with a few key differences:\\n * - Transferring the governance role is a two step process. The current governance must [`setPendingGovernance(pendingGovernance_)`](#setPendingGovernance) then the new governance must [`acceptGovernance()`](#acceptgovernance). This is to safeguard against accidentally setting ownership to the wrong address and locking yourself out of your contract.\\n * - `governance` is a constructor argument instead of `msg.sender`. This is especially useful when deploying contracts via a [`SingletonFactory`](./ISingletonFactory).\\n * - We use `lockGovernance()` instead of `renounceOwnership()`. `renounceOwnership()` is a prerequisite for the reinitialization bug because it sets `owner = address(0x0)`. We also use the `governanceIsLocked()` flag.\\n */\\ninterface IGovernable {\\n\\n    /***************************************\\n    EVENTS\\n    ***************************************/\\n\\n    /// @notice Emitted when pending Governance is set.\\n    event GovernancePending(address pendingGovernance);\\n    /// @notice Emitted when Governance is set.\\n    event GovernanceTransferred(address oldGovernance, address newGovernance);\\n    /// @notice Emitted when Governance is locked.\\n    event GovernanceLocked();\\n\\n    /***************************************\\n    VIEW FUNCTIONS\\n    ***************************************/\\n\\n    /// @notice Address of the current governor.\\n    function governance() external view returns (address);\\n\\n    /// @notice Address of the governor to take over.\\n    function pendingGovernance() external view returns (address);\\n\\n    /// @notice Returns true if governance is locked.\\n    function governanceIsLocked() external view returns (bool);\\n\\n    /***************************************\\n    MUTATORS\\n    ***************************************/\\n\\n    /**\\n     * @notice Initiates transfer of the governance role to a new governor.\\n     * Transfer is not complete until the new governor accepts the role.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param pendingGovernance_ The new governor.\\n     */\\n    function setPendingGovernance(address pendingGovernance_) external;\\n\\n    /**\\n     * @notice Accepts the governance role.\\n     * Can only be called by the new governor.\\n     */\\n    function acceptGovernance() external;\\n\\n    /**\\n     * @notice Permanently locks this contract's governance role and any of its functions that require the role.\\n     * This action cannot be reversed.\\n     * Before you call it, ask yourself:\\n     *   - Is the contract self-sustaining?\\n     *   - Is there a chance you will need governance privileges in the future?\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     */\\n    function lockGovernance() external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimsEscrow\",\"type\":\"address\"}],\"name\":\"ClaimsEscrowSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"farmController\",\"type\":\"address\"}],\"name\":\"FarmControllerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GovernanceLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingGovernance\",\"type\":\"address\"}],\"name\":\"GovernancePending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGovernance\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"GovernanceTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"}],\"name\":\"LockerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"optionsFarming\",\"type\":\"address\"}],\"name\":\"OptionsFarmingSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"policyManager\",\"type\":\"address\"}],\"name\":\"PolicyManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"riskManager\",\"type\":\"address\"}],\"name\":\"RiskManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"solace\",\"type\":\"address\"}],\"name\":\"SolaceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"TreasurySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"name\":\"WethSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimsEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"claimsEscrow_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"farmController_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceIsLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionsFarming\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"optionsFarming_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"policyManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"riskManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"riskManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimsEscrow_\",\"type\":\"address\"}],\"name\":\"setClaimsEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmController_\",\"type\":\"address\"}],\"name\":\"setFarmController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"locker_\",\"type\":\"address\"}],\"name\":\"setLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"claimsEscrow_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"policyManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"riskManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"solace_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"optionsFarming_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"farmController_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"locker_\",\"type\":\"address\"}],\"name\":\"setMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"optionsFarming_\",\"type\":\"address\"}],\"name\":\"setOptionsFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingGovernance_\",\"type\":\"address\"}],\"name\":\"setPendingGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"policyManager_\",\"type\":\"address\"}],\"name\":\"setPolicyManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"riskManager_\",\"type\":\"address\"}],\"name\":\"setRiskManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"solace_\",\"type\":\"address\"}],\"name\":\"setSolace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"}],\"name\":\"setWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"solace\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"solace_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Registry","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"000000000000000000000000501ace0e8d16b92236763e2ded7ae3bc2dffa276","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}