{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.6.8 https://hardhat.org\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v3.4.1-solc-0.7-2\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v3.4.1-solc-0.7-2\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IVault.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IVault {\r\n  function getRewardTokens() external view returns (address[] memory);\r\n\r\n  function balance() external view returns (uint256);\r\n\r\n  function balanceOf(address _user) external view returns (uint256);\r\n\r\n  function deposit(uint256 _amount) external;\r\n\r\n  function withdraw(uint256 _amount) external;\r\n\r\n  function claim() external;\r\n\r\n  function exit() external;\r\n\r\n  function harvest() external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IRewardBondDepositor.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IRewardBondDepositor {\r\n  function currentEpoch()\r\n    external\r\n    view\r\n    returns (\r\n      uint64 epochNumber,\r\n      uint64 startBlock,\r\n      uint64 nextBlock,\r\n      uint64 epochLength\r\n    );\r\n\r\n  function rewardShares(uint256 _epoch, address _vault) external view returns (uint256);\r\n\r\n  function getVaultsFromAccount(address _user) external view returns (address[] memory);\r\n\r\n  function getAccountRewardShareSince(\r\n    uint256 _epoch,\r\n    address _user,\r\n    address _vault\r\n  ) external view returns (uint256[] memory);\r\n\r\n  function bond(address _vault) external;\r\n\r\n  function rebase() external;\r\n\r\n  function notifyRewards(address _user, uint256[] memory _amounts) external;\r\n}\r\n\r\n\r\n// File contracts/Keeper.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\ncontract Keeper is Ownable {\r\n  // The address of reward bond depositor.\r\n  address public immutable depositor;\r\n\r\n  // Record whether an address can call bond or not\r\n  mapping(address => bool) public isBondWhitelist;\r\n  // Record whether an address can call rebase or not\r\n  mapping(address => bool) public isRebaseWhitelist;\r\n\r\n  // A list of vaults. Push only, beware false-positives.\r\n  address[] public vaults;\r\n  // Record whether an address is vault or not.\r\n  mapping(address => bool) public isVault;\r\n\r\n  /// @param _depositor The address of reward bond depositor.\r\n  constructor(address _depositor) {\r\n    depositor = _depositor;\r\n  }\r\n\r\n  /// @dev bond ald for a list of vaults.\r\n  /// @param _vaults The address list of vaults.\r\n  function bond(address[] memory _vaults) external {\r\n    require(isBondWhitelist[msg.sender], \"Keeper: only bond whitelist\");\r\n\r\n    for (uint256 i = 0; i < _vaults.length; i++) {\r\n      IRewardBondDepositor(depositor).bond(_vaults[i]);\r\n    }\r\n  }\r\n\r\n  /// @dev bond ald for all supported vaults.\r\n  function bondAll() external {\r\n    require(isBondWhitelist[msg.sender], \"Keeper: only bond whitelist\");\r\n\r\n    for (uint256 i = 0; i < vaults.length; i++) {\r\n      address _vault = vaults[i];\r\n      if (isVault[_vault]) {\r\n        IRewardBondDepositor(depositor).bond(_vault);\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @dev rebase ald\r\n  function rebase() external {\r\n    require(isRebaseWhitelist[msg.sender], \"Keeper: only rebase whitelist\");\r\n\r\n    IRewardBondDepositor(depositor).rebase();\r\n  }\r\n\r\n  /// @dev harvest reward for all supported vaults.\r\n  function harvestAll() external {\r\n    for (uint256 i = 0; i < vaults.length; i++) {\r\n      address _vault = vaults[i];\r\n      if (isVault[_vault]) {\r\n        IVault(_vault).harvest();\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @dev update the whitelist who can call bond.\r\n  /// @param _users The list of address.\r\n  /// @param status Whether to add or remove.\r\n  function updateBondWhitelist(address[] memory _users, bool status) external onlyOwner {\r\n    for (uint256 i = 0; i < _users.length; i++) {\r\n      isBondWhitelist[_users[i]] = status;\r\n    }\r\n  }\r\n\r\n  /// @dev update the whitelist who can call rebase.\r\n  /// @param _users The list of address.\r\n  /// @param status Whether to add or remove.\r\n  function updateRebaseWhitelist(address[] memory _users, bool status) external onlyOwner {\r\n    for (uint256 i = 0; i < _users.length; i++) {\r\n      isRebaseWhitelist[_users[i]] = status;\r\n    }\r\n  }\r\n\r\n  /// @dev update supported vault\r\n  /// @param _vault The address of vault.\r\n  /// @param status Whether it is add or remove vault.\r\n  function updateVault(address _vault, bool status) external onlyOwner {\r\n    if (status) {\r\n      require(!isVault[_vault], \"Keeper: already added\");\r\n      isVault[_vault] = true;\r\n      if (!_listContainsAddress(vaults, _vault)) {\r\n        vaults.push(_vault);\r\n      }\r\n    } else {\r\n      require(isVault[_vault], \"Keeper: already removed\");\r\n      isVault[_vault] = false;\r\n    }\r\n  }\r\n\r\n  function _listContainsAddress(address[] storage _list, address _item) internal view returns (bool) {\r\n    uint256 length = _list.length;\r\n    for (uint256 i = 0; i < length; i++) {\r\n      if (_list[i] == _item) return true;\r\n    }\r\n    return false;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vaults\",\"type\":\"address[]\"}],\"name\":\"bond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBondWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRebaseWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateBondWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateRebaseWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Keeper","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000c6a477f1ef7b0ac7530b6b78f52e270a973b0198","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fe8864a0a4f1aadd7112538304ab39cd23fb56f7e1a9c2315686ba02265e096d"}]}