{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IndexPoolRecovery.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\nimport './lib/UniswapV2Library.sol';\\nimport './lib/TransferHelper.sol';\\nimport './interfaces/IProxyManagerAccessControl.sol';\\nimport './interfaces/IDelegateCallProxyManager.sol';\\nimport './interfaces/IERC20.sol';\\nimport './interfaces/IRootChainManager.sol';\\n\\ncontract IndexPoolRecovery {\\n  uint256 internal constant sideChainDepositAmount = type(uint128).max;\\n  address internal constant treasury = 0x78a3eF33cF033381FEB43ba4212f2Af5A5A0a2EA;\\n  IProxyManagerAccessControl internal constant proxyManagerController =\\n    IProxyManagerAccessControl(0x3D4860d4b7952A3CAD3Accfada61463F15fc0D54);\\n  IDelegateCallProxyManager internal constant proxyManager =\\n    IDelegateCallProxyManager(0xD23DeDC599bD56767e42D48484d6Ca96ab01C115);\\n  IRootChainManager internal constant polygonRootChainManager =\\n    IRootChainManager(0xA0c68C638235ee32657e8f720a23ceC1bFc77C77);\\n  address internal constant polygonERC20Predicate = 0x40ec5B33f54e0E8A33A975908C5BA1c14e5BbbDf;\\n  address internal immutable polygonRecipient;\\n\\n  address internal constant DEFI5 = 0xfa6de2697D59E88Ed7Fc4dFE5A33daC43565ea41;\\n  address internal constant CC10 = 0x17aC188e09A7890a1844E5E65471fE8b0CcFadF3;\\n  address internal constant CC10_SELLER = 0xE487F6E45D292BF8D9B883d007d93714f4bFE148;\\n  address internal constant FFF = 0xaBAfA52D3d5A2c18A4C1Ae24480D22B831fC0413;\\n  address internal constant DEGEN = 0x126c121f99e1E211dF2e5f8De2d96Fa36647c855;\\n\\n  address internal immutable recoveryContract;\\n  bytes32 internal constant slot = bytes32(uint256(keccak256('indexed.recovery.module')) - 1);\\n  address internal immutable corePoolImplementation;\\n  bytes32 internal constant corePoolImplementationID = keccak256('IndexPool.sol');\\n  address internal immutable coreSellerImplementation;\\n  bytes32 internal constant coreSellerImplementationID = keccak256('UnboundTokenSeller.sol');\\n  address internal immutable sigmaPoolImplementation;\\n  bytes32 internal constant sigmaPoolImplementationID = keccak256('SigmaIndexPoolV1.sol');\\n  address internal immutable coreControllerImplementation;\\n  address internal constant coreControllerAddress = 0xF00A38376C8668fC1f3Cd3dAeef42E0E44A7Fcdb;\\n  address internal immutable sigmaControllerImplementation;\\n  address internal constant sigmaControllerAddress = 0x5B470A8C134D397466A1a603678DadDa678CBC29;\\n\\n  function getImplementationAddress(bytes32 implementationID) internal view returns (address implementation) {\\n    address holder = proxyManager.getImplementationHolder(implementationID);\\n    (bool success, bytes memory data) = holder.staticcall('');\\n    require(success, string(data));\\n    implementation = abi.decode((data), (address));\\n    require(implementation != address(0), 'ERR_NULL_IMPLEMENTATION');\\n  }\\n\\n  constructor(\\n    address _coreControllerImplementation,\\n    address _sigmaControllerImplementation,\\n    address _coreIndexPoolImplementation,\\n    address _sigmaPoolImplementation,\\n    address _polygonRecipient\\n  ) public {\\n    coreControllerImplementation = _coreControllerImplementation;\\n    sigmaControllerImplementation = _sigmaControllerImplementation;\\n    corePoolImplementation = _coreIndexPoolImplementation;\\n    sigmaPoolImplementation = _sigmaPoolImplementation;\\n    coreSellerImplementation = getImplementationAddress(coreSellerImplementationID);\\n    recoveryContract = address(this);\\n    polygonRecipient = _polygonRecipient;\\n  }\\n\\n  /**\\n   * @dev Enables fake deposits to Polygon.\\n   * Accepts the transferFrom call only if the current contract is\\n   * DEFI5, CC10 or FFF, the caller is the polygon erc20 predicate,\\n   * the sender is the recovery contract, the receiver is the polygon\\n   * erc20 predicate and the amount is 2**128-1.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external view returns (bool) {\\n    require(\\n      (\\n        address(this) == DEFI5 ||\\n        address(this) == CC10 ||\\n        address(this) == FFF\\n      ) &&\\n      msg.sender == polygonERC20Predicate &&\\n      from == recoveryContract &&\\n      to == polygonERC20Predicate &&\\n      amount == sideChainDepositAmount\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Enable transfers when the sender is FFF and the receiver is DEGEN.\\n   * This allows DEGEN to be removed from FFF even while the implementation contract\\n   * for Sigma pools is set to the recovery contract.\\n   */\\n  function transfer(address to, uint256 amount) external onlyFromTo(FFF, DEGEN) returns (bool) {\\n    _delegate(sigmaPoolImplementation);\\n  }\\n\\n  /**\\n   * @dev If the sender is FFF and the receiver is DEGEN, delegate\\n   * to the real sigma pool implementation to read the balance;\\n   * otherwise, return the value stored at the balance slot for `account`.\\n   */\\n  function balanceOf(address account) external returns (uint256 bal) {\\n    if (msg.sender == FFF && address(this) == DEGEN) {\\n      _delegate(sigmaPoolImplementation);\\n    }\\n    uint256 balslot = balanceSlot(account);\\n    assembly {\\n      bal := sload(balslot)\\n    }\\n  }\\n\\n  /**\\n   * @dev Delegate to an implementation contract.\\n   */\\n  function _delegate(address implementation) internal virtual {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      // Copy msg.data. We take full control of memory in this inline assembly\\n      // block because it will not return to Solidity code. We overwrite the\\n      // Solidity scratch pad at memory position 0.\\n      calldatacopy(0, 0, calldatasize())\\n\\n      // Call the implementation.\\n      // out and outsize are 0 because we don't know the size yet.\\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n      // Copy the returned data.\\n      returndatacopy(0, 0, returndatasize())\\n\\n      switch result\\n        // delegatecall returns 0 on error.\\n        case 0 {\\n          revert(0, returndatasize())\\n        }\\n        default {\\n          return(0, returndatasize())\\n        }\\n    }\\n  }\\n\\n  /**\\n   * @dev Calculates the slot for temporary balance storage.\\n   */\\n  function balanceSlot(address account) internal pure returns (uint256 _slot) {\\n    _slot = uint256(keccak256(abi.encodePacked(slot, keccak256(abi.encodePacked(account))))) - 1;\\n  }\\n\\n  /**\\n   * @dev Temporarily set a balance value at the balance slot for an account.\\n   * This is used for draining Uniswap pairs.\\n   */\\n  function setContractBal(address account, uint256 bal) internal {\\n    uint256 balslot = balanceSlot(account);\\n    assembly {\\n      sstore(balslot, bal)\\n    }\\n  }\\n\\n  function calculateUniswapPair(\\n    address token0,\\n    address token1\\n  ) internal pure returns (address pair) {\\n    pair = address(\\n      uint256(\\n        keccak256(\\n          abi.encodePacked(\\n            hex'ff',\\n            0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f,\\n            keccak256(abi.encodePacked(token0, token1)),\\n            hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\\n          )\\n        )\\n      )\\n    );\\n  }\\n\\n\\n  /**\\n   * @dev Transfer the full balance held by this contract of a token to the treasury.\\n   */\\n  function claimToken(IERC20 token) internal {\\n    uint256 bal = token.balanceOf(address(this));\\n    if (bal > 0) TransferHelper.safeTransfer(address(token), treasury, bal);\\n  }\\n\\n  /**\\n   * @dev Transfer all but 1 wei of the paired token from a Uniswap pair\\n   * to the treasury.\\n   */\\n  function claimLiquidity(address pairedToken) internal {\\n    (address token0, address token1) =\\n      address(this) < pairedToken ? (address(this), pairedToken) : (pairedToken, address(this));\\n    address pair = calculateUniswapPair(token0, token1);\\n    uint256 pairedReserves = IERC20(pairedToken).balanceOf(pair);\\n    setContractBal(pair, 1);\\n    IUniswapV2Pair(pair).sync();\\n    uint256 amountIn = UniswapV2Library.getAmountIn(pairedReserves - 1, 1, pairedReserves);\\n    setContractBal(pair, amountIn + 1);\\n    if (token0 == address(this)) {\\n      IUniswapV2Pair(pair).swap(0, pairedReserves - 1, treasury, '');\\n    } else {\\n      IUniswapV2Pair(pair).swap(pairedReserves - 1, 0, treasury, '');\\n    }\\n    setContractBal(pair, 0);\\n  }\\n\\n  modifier onlyFromTo(address _caller, address _contract) {\\n    require(msg.sender == _caller && address(this) == _contract);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Transfer the assets in DEFI5 and its Uniswap pair's WETH to the treasury.\\n   */\\n  function defi5() external onlyFromTo(recoveryContract, DEFI5) {\\n    claimToken(IERC20(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2)); // sushi\\n    claimToken(IERC20(0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984)); // uni\\n    claimToken(IERC20(0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9)); // aave\\n    claimToken(IERC20(0xD533a949740bb3306d119CC777fa900bA034cd52)); // crv\\n    claimToken(IERC20(0xc00e94Cb662C3520282E6f5717214004A7f26888)); // comp\\n    claimToken(IERC20(0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2)); // mkr\\n    claimToken(IERC20(0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F)); // snx\\n    claimLiquidity(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    address _treasury = treasury;\\n  }\\n\\n  /**\\n   * @dev Transfer the assets in CC10 and its Uniswap pair's WETH to the treasury.\\n   */\\n  function cc10() external onlyFromTo(recoveryContract, CC10) {\\n    claimToken(IERC20(0xd26114cd6EE289AccF82350c8d8487fedB8A0C07)); // omg\\n    claimToken(IERC20(0x04Fa0d235C4abf4BcF4787aF4CF447DE572eF828)); // uma\\n    claimToken(IERC20(0x0D8775F648430679A709E98d2b0Cb6250d2887EF)); // bat\\n    claimToken(IERC20(0xc00e94Cb662C3520282E6f5717214004A7f26888)); // comp\\n    claimToken(IERC20(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2)); // sushi\\n    claimToken(IERC20(0xD533a949740bb3306d119CC777fa900bA034cd52)); // crv\\n    claimToken(IERC20(0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2)); // mkr\\n    claimToken(IERC20(0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F)); // snx\\n    claimToken(IERC20(0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e)); // yfi\\n    claimToken(IERC20(0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984)); // uni\\n    claimLiquidity(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    address _treasury = treasury;\\n  }\\n\\n  /**\\n   * @dev Transfer the assets in FFF and its Uniswap pair's WETH to the treasury.\\n   */\\n  function fff() external onlyFromTo(recoveryContract, FFF) {\\n    claimToken(IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2)); // weth\\n    claimToken(IERC20(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599)); // wbtc\\n    claimToken(IERC20(DEGEN)); // degen\\n    claimLiquidity(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    address _treasury = treasury;\\n  }\\n\\n  /**\\n   * @dev Transfer the assets in the CC10 token seller to the treasury.\\n   */\\n  function cc10Seller() external onlyFromTo(recoveryContract, CC10_SELLER) {\\n    claimToken(IERC20(0xd26114cd6EE289AccF82350c8d8487fedB8A0C07));\\n    claimToken(IERC20(0xE41d2489571d322189246DaFA5ebDe1F4699F498));\\n    address _treasury = treasury;\\n    assembly {\\n      selfdestruct(_treasury)\\n    }\\n  }\\n\\n  /**\\n   * @dev Execute a deposit to Polygon.\\n   */\\n  function sendToPolygon() internal {\\n    bytes memory encodedAmount = abi.encode(sideChainDepositAmount);\\n\\n    polygonRootChainManager.depositFor(polygonRecipient, DEFI5, encodedAmount);\\n    polygonRootChainManager.depositFor(polygonRecipient, CC10, encodedAmount);\\n    polygonRootChainManager.depositFor(polygonRecipient, FFF, encodedAmount);\\n  }\\n\\n  function drainAndRepair() external onlyFromTo(treasury, recoveryContract) {\\n    proxyManagerController.setImplementationAddressManyToOne(corePoolImplementationID, address(this));\\n    proxyManagerController.setImplementationAddressManyToOne(coreSellerImplementationID, address(this));\\n    proxyManagerController.setImplementationAddressManyToOne(sigmaPoolImplementationID, address(this));\\n    sendToPolygon();\\n    IndexPoolRecovery(FFF).fff();\\n    IndexPoolRecovery(DEFI5).defi5();\\n    IndexPoolRecovery(CC10).cc10();\\n    IndexPoolRecovery(CC10_SELLER).cc10Seller();\\n\\n    proxyManagerController.setImplementationAddressManyToOne(corePoolImplementationID, corePoolImplementation);\\n    proxyManagerController.setImplementationAddressManyToOne(coreSellerImplementationID, coreSellerImplementation);\\n    proxyManagerController.setImplementationAddressManyToOne(sigmaPoolImplementationID, sigmaPoolImplementation);\\n    proxyManagerController.setImplementationAddressOneToOne(coreControllerAddress, coreControllerImplementation);\\n    proxyManagerController.setImplementationAddressOneToOne(sigmaControllerAddress, sigmaControllerImplementation);\\n\\n    proxyManagerController.transferOwnership(treasury);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDelegateCallProxyManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n\\n/**\\n * @dev Contract that manages deployment and upgrades of delegatecall proxies.\\n *\\n * An implementation identifier can be created on the proxy manager which is\\n * used to specify the logic address for a particular contract type, and to\\n * upgrade the implementation as needed.\\n *\\n * A one-to-one proxy is a single proxy contract with an upgradeable implementation\\n * address.\\n *\\n * A many-to-one proxy is a single upgradeable implementation address that may be\\n * used by many proxy contracts.\\n */\\ninterface IDelegateCallProxyManager {\\n/* ==========  Events  ========== */\\n\\n  event DeploymentApprovalGranted(address deployer);\\n  event DeploymentApprovalRevoked(address deployer);\\n\\n  event ManyToOne_ImplementationCreated(\\n    bytes32 implementationID,\\n    address implementationAddress\\n  );\\n\\n  event ManyToOne_ImplementationUpdated(\\n    bytes32 implementationID,\\n    address implementationAddress\\n  );\\n\\n  event ManyToOne_ProxyDeployed(\\n    bytes32 implementationID,\\n    address proxyAddress\\n  );\\n\\n  event OneToOne_ProxyDeployed(\\n    address proxyAddress,\\n    address implementationAddress\\n  );\\n\\n  event OneToOne_ImplementationUpdated(\\n    address proxyAddress,\\n    address implementationAddress\\n  );\\n\\n/* ==========  Controls  ========== */\\n\\n  /**\\n   * @dev Allows `deployer` to deploy many-to-one proxies.\\n   */\\n  function approveDeployer(address deployer) external;\\n\\n  /**\\n   * @dev Prevents `deployer` from deploying many-to-one proxies.\\n   */\\n  function revokeDeployerApproval(address deployer) external;\\n\\n/* ==========  Implementation Management  ========== */\\n\\n  /**\\n   * @dev Creates a many-to-one proxy relationship.\\n   *\\n   * Deploys an implementation holder contract which stores the\\n   * implementation address for many proxies. The implementation\\n   * address can be updated on the holder to change the runtime\\n   * code used by all its proxies.\\n   *\\n   * @param implementationID ID for the implementation, used to identify the\\n   * proxies that use it. Also used as the salt in the create2 call when\\n   * deploying the implementation holder contract.\\n   * @param implementation Address with the runtime code the proxies\\n   * should use.\\n   */\\n  function createManyToOneProxyRelationship(\\n    bytes32 implementationID,\\n    address implementation\\n  ) external;\\n\\n  /**\\n   * @dev Lock the current implementation for `proxyAddress` so that it can never be upgraded again.\\n   */\\n  function lockImplementationManyToOne(bytes32 implementationID) external;\\n\\n  /**\\n   * @dev Lock the current implementation for `proxyAddress` so that it can never be upgraded again.\\n   */\\n  function lockImplementationOneToOne(address proxyAddress) external;\\n\\n  /**\\n   * @dev Updates the implementation address for a many-to-one\\n   * proxy relationship.\\n   *\\n   * @param implementationID Identifier for the implementation.\\n   * @param implementation Address with the runtime code the proxies\\n   * should use.\\n   */\\n  function setImplementationAddressManyToOne(\\n    bytes32 implementationID,\\n    address implementation\\n  ) external;\\n\\n  /**\\n   * @dev Updates the implementation address for a one-to-one proxy.\\n   *\\n   * Note: This could work for many-to-one as well if the caller\\n   * provides the implementation holder address in place of the\\n   * proxy address, as they use the same access control and update\\n   * mechanism.\\n   *\\n   * @param proxyAddress Address of the deployed proxy\\n   * @param implementation Address with the runtime code for\\n   * the proxy to use.\\n   */\\n  function setImplementationAddressOneToOne(\\n    address proxyAddress,\\n    address implementation\\n  ) external;\\n\\n/* ==========  Proxy Deployment  ========== */\\n\\n  /**\\n   * @dev Deploy a proxy contract with a one-to-one relationship\\n   * with its implementation.\\n   *\\n   * The proxy will have its own implementation address which can\\n   * be updated by the proxy manager.\\n   *\\n   * @param suppliedSalt Salt provided by the account requesting deployment.\\n   * @param implementation Address of the contract with the runtime\\n   * code that the proxy should use.\\n   */\\n  function deployProxyOneToOne(\\n    bytes32 suppliedSalt,\\n    address implementation\\n  ) external returns(address proxyAddress);\\n\\n  /**\\n   * @dev Deploy a proxy with a many-to-one relationship with its implemenation.\\n   *\\n   * The proxy will call the implementation holder for every transaction to\\n   * determine the address to use in calls.\\n   *\\n   * @param implementationID Identifier for the proxy's implementation.\\n   * @param suppliedSalt Salt provided by the account requesting deployment.\\n   */\\n  function deployProxyManyToOne(\\n    bytes32 implementationID,\\n    bytes32 suppliedSalt\\n  ) external returns(address proxyAddress);\\n\\n/* ==========  Queries  ========== */\\n\\n  /**\\n   * @dev Returns a boolean stating whether `implementationID` is locked.\\n   */\\n  function isImplementationLocked(bytes32 implementationID) external view returns (bool);\\n\\n  /**\\n   * @dev Returns a boolean stating whether `proxyAddress` is locked.\\n   */\\n  function isImplementationLocked(address proxyAddress) external view returns (bool);\\n\\n  /**\\n   * @dev Returns a boolean stating whether `deployer` is allowed to deploy many-to-one\\n   * proxies.\\n   */\\n  function isApprovedDeployer(address deployer) external view returns (bool);\\n\\n  /**\\n   * @dev Queries the temporary storage value `_implementationHolder`.\\n   * This is used in the constructor of the many-to-one proxy contract\\n   * so that the create2 address is static (adding constructor arguments\\n   * would change the codehash) and the implementation holder can be\\n   * stored as a constant.\\n   */\\n  function getImplementationHolder() external view returns (address);\\n\\n  /**\\n   * @dev Returns the address of the implementation holder contract\\n   * for `implementationID`.\\n   */\\n  function getImplementationHolder(bytes32 implementationID) external view returns (address);\\n\\n  /**\\n   * @dev Computes the create2 address for a one-to-one proxy requested\\n   * by `originator` using `suppliedSalt`.\\n   *\\n   * @param originator Address of the account requesting deployment.\\n   * @param suppliedSalt Salt provided by the account requesting deployment.\\n   */\\n  function computeProxyAddressOneToOne(\\n    address originator,\\n    bytes32 suppliedSalt\\n  ) external view returns (address);\\n\\n  /**\\n   * @dev Computes the create2 address for a many-to-one proxy for the\\n   * implementation `implementationID` requested by `originator` using\\n   * `suppliedSalt`.\\n   *\\n   * @param originator Address of the account requesting deployment.\\n   * @param implementationID The identifier for the contract implementation.\\n   * @param suppliedSalt Salt provided by the account requesting deployment.\\n  */\\n  function computeProxyAddressManyToOne(\\n    address originator,\\n    bytes32 implementationID,\\n    bytes32 suppliedSalt\\n  ) external view returns (address);\\n\\n  /**\\n   * @dev Computes the create2 address of the implementation holder\\n   * for `implementationID`.\\n   *\\n   * @param implementationID The identifier for the contract implementation.\\n  */\\n  function computeHolderAddressManyToOne(bytes32 implementationID) external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n\\ninterface IERC20 {\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  function totalSupply() external view returns (uint256);\\n  function balanceOf(address account) external view returns (uint256);\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n  function allowance(address owner, address spender) external view returns (uint256);\\n  function approve(address spender, uint256 amount) external returns (bool);\\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IProxyManagerAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n\\ninterface IProxyManagerAccessControl {\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  function transferManagerOwnership(address newOwner) external;\\n\\n  function transferOwnership(address newOwner) external;\\n\\n  function setImplementationAddressManyToOne(\\n    bytes32 implementationID,\\n    address implementation\\n  ) external;\\n\\n  function setImplementationAddressOneToOne(\\n    address proxyAddress,\\n    address implementation\\n  ) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRootChainManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IRootChainManager {\\n  event TokenMapped(address indexed rootToken, address indexed childToken, bytes32 indexed tokenType);\\n\\n  event PredicateRegistered(bytes32 indexed tokenType, address indexed predicateAddress);\\n\\n  function registerPredicate(bytes32 tokenType, address predicateAddress) external;\\n\\n  function mapToken(\\n    address rootToken,\\n    address childToken,\\n    bytes32 tokenType\\n  ) external;\\n\\n  function cleanMapToken(address rootToken, address childToken) external;\\n\\n  function remapToken(\\n    address rootToken,\\n    address childToken,\\n    bytes32 tokenType\\n  ) external;\\n\\n  function depositEtherFor(address user) external payable;\\n\\n  function depositFor(\\n    address user,\\n    address rootToken,\\n    bytes calldata depositData\\n  ) external;\\n\\n  function exit(bytes calldata inputData) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n/************************************************************************************************\\nOriginally from https://github.com/Uniswap/uniswap-lib/blob/master/contracts/libraries/TransferHelper.sol\\n\\nThis source code has been modified from the original, which was copied from the github repository\\nat commit hash cfedb1f55864dcf8cc0831fdd8ec18eb045b7fd1.\\n\\nSubject to the MIT license\\n*************************************************************************************************/\\n\\n\\nlibrary TransferHelper {\\n  function safeApproveMax(address token, address to) internal {\\n    safeApprove(token, to, type(uint256).max);\\n  }\\n\\n  function safeUnapprove(address token, address to) internal {\\n    safeApprove(token, to, 0);\\n  }\\n\\n  function safeApprove(address token, address to, uint value) internal {\\n    // bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TH:SA\\\");\\n  }\\n\\n  function safeTransfer(address token, address to, uint value) internal {\\n    // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TH:ST\\\");\\n  }\\n\\n  function safeTransferFrom(address token, address from, address to, uint value) internal {\\n    // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TH:STF\\\");\\n  }\\n\\n  function safeTransferETH(address to, uint256 value) internal {\\n    (bool success, ) = to.call{value: value}(\\\"\\\");\\n    require(success, \\\"TH:STE\\\");\\n  }\\n}\"\r\n    },\r\n    \"contracts/lib/UniswapV2Library.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.6.0;\\n\\n/* ========== External Interfaces ========== */\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\n\\n/* ========== External Libraries ========== */\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/************************************************************************************************\\nOriginally from https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/libraries/UniswapV2Library.sol\\n\\nThis source code has been modified from the original, which was copied from the github repository\\nat commit hash 87edfdcaf49ccc52591502993db4c8c08ea9eec0.\\n\\nSubject to the GPL-3.0 license\\n*************************************************************************************************/\\n\\n\\nlibrary UniswapV2Library {\\n  using SafeMath for uint256;\\n\\n  // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n  function sortTokens(address tokenA, address tokenB)\\n    internal\\n    pure\\n    returns (address token0, address token1)\\n  {\\n    require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n    (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n  }\\n\\n  function calculatePair(\\n    address factory,\\n    address token0,\\n    address token1\\n  ) internal pure returns (address pair) {\\n    pair = address(\\n      uint256(\\n        keccak256(\\n          abi.encodePacked(\\n            hex\\\"ff\\\",\\n            factory,\\n            keccak256(abi.encodePacked(token0, token1)),\\n            hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\" // init code hash\\n          )\\n        )\\n      )\\n    );\\n  }\\n\\n  // calculates the CREATE2 address for a pair without making any external calls\\n  function pairFor(\\n    address factory,\\n    address tokenA,\\n    address tokenB\\n  ) internal pure returns (address pair) {\\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\\n    pair = calculatePair(factory, token0, token1);\\n  }\\n\\n  function getCumulativePriceLast(\\n    address factory,\\n    address tokenIn,\\n    address tokenOut\\n  ) internal view returns (uint256) {\\n    (address token0, address token1) = sortTokens(tokenIn, tokenOut);\\n    IUniswapV2Pair pair = IUniswapV2Pair(\\n      calculatePair(factory, token0, token1)\\n    );\\n    if (token0 == tokenIn) return pair.price0CumulativeLast();\\n    return pair.price1CumulativeLast();\\n  }\\n\\n  // fetches and sorts the reserves for a pair\\n  function getReserves(\\n    address factory,\\n    address tokenA,\\n    address tokenB\\n  ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n    (address token0, ) = sortTokens(tokenA, tokenB);\\n    (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\\n      pairFor(factory, tokenA, tokenB)\\n    )\\n      .getReserves();\\n    (reserveA, reserveB) = tokenA == token0\\n      ? (reserve0, reserve1)\\n      : (reserve1, reserve0);\\n  }\\n\\n  // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) internal pure returns (uint256 amountB) {\\n    require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n    require(\\n      reserveA > 0 && reserveB > 0,\\n      \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n    amountB = amountA.mul(reserveB) / reserveA;\\n  }\\n\\n  // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) internal pure returns (uint256 amountOut) {\\n    require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n    require(\\n      reserveIn > 0 && reserveOut > 0,\\n      \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n    uint256 amountInWithFee = amountIn.mul(997);\\n    uint256 numerator = amountInWithFee.mul(reserveOut);\\n    uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n    amountOut = numerator / denominator;\\n  }\\n\\n  // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) internal pure returns (uint256 amountIn) {\\n    require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    require(\\n      reserveIn > 0 && reserveOut > 0,\\n      \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n    uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n    uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n    amountIn = (numerator / denominator).add(1);\\n  }\\n\\n  // performs chained getAmountOut calculations on any number of pairs\\n  function getAmountsOut(\\n    address factory,\\n    uint256 amountIn,\\n    address[] memory path\\n  ) internal view returns (uint256[] memory amounts) {\\n    require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length);\\n    amounts[0] = amountIn;\\n    for (uint256 i; i < path.length - 1; i++) {\\n      (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n        factory,\\n        path[i],\\n        path[i + 1]\\n      );\\n      amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n    }\\n  }\\n\\n  // performs chained getAmountIn calculations on any number of pairs\\n  function getAmountsIn(\\n    address factory,\\n    uint256 amountOut,\\n    address[] memory path\\n  ) internal view returns (uint256[] memory amounts) {\\n    require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length);\\n    amounts[amounts.length - 1] = amountOut;\\n    for (uint256 i = path.length - 1; i > 0; i--) {\\n      (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n        factory,\\n        path[i - 1],\\n        path[i]\\n      );\\n      amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n    }\\n  }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coreControllerImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sigmaControllerImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coreIndexPoolImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sigmaPoolImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_polygonRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bal\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cc10\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cc10Seller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defi5\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drainAndRepair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"IndexPoolRecovery","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000078b4f45b4a2afa333c7be1dbc7f2c9f0566153270000000000000000000000004561784841de5335922a9ad3e44aba69a162ba7a00000000000000000000000084dbd48c487032d2bd363cc74605e2690d3a95eb00000000000000000000000092bd1aa95ca9265eab2af8ac1b536aa995d8fc37000000000000000000000000a7204780ed47146a0e626d533e5fc14a5beda0f0","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}