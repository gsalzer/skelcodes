{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AnimalDescriptors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\nimport './Eyes.sol';\\nimport './UintStrings.sol';\\nimport './IAnimalSVG.sol';\\n\\ncontract AnimalDescriptors {\\n    IAnimalSVG public immutable creator;\\n    IAnimalSVG public immutable unicorn;\\n    IAnimalSVG public immutable skull;\\n    IAnimalSVG public immutable cat;\\n    IAnimalSVG public immutable mouse;\\n    IAnimalSVG public immutable bunny;\\n\\n    constructor(IAnimalSVG _creator, IAnimalSVG _unicorn, IAnimalSVG _skull, IAnimalSVG _cat, IAnimalSVG _mouse, IAnimalSVG _bunny){\\n        creator = _creator;\\n        unicorn = _unicorn;\\n        skull = _skull;\\n        cat = _cat;\\n        mouse = _mouse;\\n        bunny = _bunny;\\n    }\\n\\n    function animalSvg(uint8 animalType, uint8 mood) external view returns (string memory){\\n        string memory moodSVG = moodSvg(mood);\\n        return (animalType == 1 ? cat.svg(moodSVG) :\\n                    (animalType == 2 ? bunny.svg(moodSVG) :\\n                        (animalType == 3 ? mouse.svg(moodSVG) :\\n                            (animalType == 4 ? skull.svg(moodSVG) : \\n                                (animalType == 5 ? unicorn.svg(moodSVG) : creator.svg(moodSVG))))));\\n    }\\n\\n    function moodSvg(uint8 mood) public view returns (string memory){\\n        if(mood == 1){\\n            string memory rand1 = UintStrings.decimalString(_randomishIntLessThan('rand1', 4) + 10, 0, false);\\n            string memory rand2 = UintStrings.decimalString(_randomishIntLessThan('rand2', 5) + 14, 0, false);\\n            string memory rand3 = UintStrings.decimalString(_randomishIntLessThan('rand3', 3) + 5, 0, false);\\n            return Eyes.aloof(rand1, rand2, rand3);\\n        } else {\\n            return (mood == 2 ? Eyes.sly() : \\n                        (mood == 3 ? Eyes.dramatic() : \\n                            (mood == 4 ? Eyes.mischievous() : \\n                                (mood == 5 ? Eyes.flirty() : Eyes.shy()))));\\n        }\\n    }\\n\\n    function _randomishIntLessThan(bytes32 salt, uint8 n) private view returns (uint8) {\\n        if (n == 0)\\n            return 0;\\n        return uint8(keccak256(abi.encodePacked(block.timestamp, msg.sender, salt))[0]) % n;\\n    }\\n\\n    function animalTypeString(uint8 animalType) public view returns (string memory){\\n        return (animalType == 1 ? \\\"Cat\\\" : \\n                (animalType == 2 ? \\\"Bunny\\\" : \\n                    (animalType == 3 ? \\\"Mouse\\\" : \\n                        (animalType == 4 ? \\\"Skull\\\" : \\n                            (animalType == 5 ? \\\"Unicorn\\\" : \\\"Creator\\\")))));\\n    }\\n\\n    function moodTypeString(uint8 mood) public view returns (string memory){\\n        return (mood == 1 ? \\\"Aloof\\\" : \\n                (mood == 2 ? \\\"Sly\\\" : \\n                    (mood == 3 ? \\\"Dramatic\\\" : \\n                        (mood == 4 ? \\\"Mischievous\\\" : \\n                            (mood == 5 ? \\\"Flirty\\\" : \\\"Shy\\\")))));\\n    }\\n}\"\r\n    },\r\n    \"contracts/Eyes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.6;\\n\\nlibrary Eyes{\\n    function sly() internal pure returns (string memory){\\n        return string(\\n            abi.encodePacked(\\n                '<g id=\\\"sly\\\">',\\n                    '<rect x=\\\"1\\\" y=\\\"1\\\" class=\\\"c3\\\">',\\n                        '<animate attributeName=\\\"x\\\" values=\\\"1;1;.5;.5;1;1\\\" keyTimes=\\\"0;.55;.6;.83;.85;1\\\" dur=\\\"13s\\\" repeatCount=\\\"indefinite\\\"/>',\\n                    '</rect>',\\n                    '<rect x=\\\"6\\\" y=\\\"1\\\" class=\\\"c3\\\">',\\n                        '<animate attributeName=\\\"x\\\" values=\\\"6;6;5.5;5.5;6;6\\\" keyTimes=\\\"0;.55;.6;.83;.85;1\\\" dur=\\\"13s\\\" repeatCount=\\\"indefinite\\\"/>',\\n                    '</rect>',\\n                    '<rect x=\\\"0\\\" y=\\\"0\\\" class=\\\"c1 l\\\" height=\\\"0\\\">',\\n                        '<animate attributeName=\\\"height\\\" values=\\\"0;0;1;1;2;1;1;0;0\\\" keyTimes=\\\"0;.55;.6;.72;.73;.74;.83;.85;1\\\" dur=\\\"13s\\\" repeatCount=\\\"indefinite\\\"/>',\\n                    '</rect>',\\n                    '<rect x=\\\"5\\\" y=\\\"0\\\" class=\\\"c1 l\\\" height=\\\"0\\\">',\\n                        '<animate attributeName=\\\"height\\\" values=\\\"0;0;1;1;0;0\\\" keyTimes=\\\"0;.55;.6;.83;.85;1\\\" dur=\\\"13s\\\" repeatCount=\\\"indefinite\\\"/>',\\n                    '</rect>',\\n                '</g>'\\n            )\\n        );\\n    }\\n\\n    function aloof(string memory rand1, string memory rand2, string memory rand3) internal view returns (string memory){\\n        return string(\\n            abi.encodePacked(\\n                '<g id=\\\"aloof\\\">',\\n                    '<rect x=\\\"0\\\" y=\\\"1\\\" class=\\\"c3\\\">',\\n                        '<animate attributeName=\\\"x\\\" values=\\\"0;0;1;1;0;0\\\" keyTimes=\\\"0;.5;.56;.96;.98;1\\\" dur=\\\"',\\n                        rand1,\\n                        's\\\" repeatCount=\\\"indefinite\\\"/>',\\n                        '<animate attributeName=\\\"y\\\" values=\\\"1;1;0;0;1;1\\\" keyTimes=\\\"0;.5;.56;.96;.98;1\\\" dur=\\\"',\\n                        rand2,\\n                        's\\\" repeatCount=\\\"indefinite\\\"/>',\\n                    '</rect>',\\n                    '<rect x=\\\"5\\\" y=\\\"1\\\" class=\\\"c3\\\">',\\n                        '<animate attributeName=\\\"x\\\" values=\\\"5;5;6;6;5;5\\\" keyTimes=\\\"0;.5;.56;.96;.98;1\\\" dur=\\\"',\\n                        rand1,\\n                        's\\\" repeatCount=\\\"indefinite\\\"/>',\\n                        '<animate attributeName=\\\"y\\\" values=\\\"1;1;0;0;1;1\\\" keyTimes=\\\"0;.5;.56;.96;.98;1\\\" dur=\\\"',\\n                        rand2,\\n                        's\\\" repeatCount=\\\"indefinite\\\"/>',\\n                    '</rect>',\\n                    '<rect x=\\\"0\\\" y=\\\"0\\\" class=\\\"c1 l\\\" height=\\\"0\\\">',\\n                        '<animate attributeName=\\\"height\\\" values=\\\"0;0;2;0;0\\\" keyTimes=\\\"0;.55;.57;.59;1\\\" dur=\\\"',\\n                        rand3,\\n                        's\\\" repeatCount=\\\"indefinite\\\"/>',\\n                    '</rect>',\\n                    '<rect x=\\\"5\\\" y=\\\"0\\\" class=\\\"c1 l\\\" height=\\\"0\\\">',\\n                        '<animate attributeName=\\\"height\\\" values=\\\"0;0;2;0;0\\\" keyTimes=\\\"0;.55;.57;.59;1\\\" dur=\\\"',\\n                        rand3,\\n                        's\\\" repeatCount=\\\"indefinite\\\"/>',\\n                    '</rect>',\\n                '</g>'\\n            )\\n        );\\n    }\\n\\n    function dramatic() internal pure returns (string memory){\\n        return string(\\n            abi.encodePacked(\\n                '<g id=\\\"dramatic\\\">',\\n                    '<rect x=\\\"0\\\" y=\\\"1\\\" class=\\\"c3\\\">',\\n                        '<animate attributeName=\\\"x\\\" values=\\\"0;0;0;1;1;0;0;\\\" keyTimes=\\\"0;.6;.62;.64;.82;.84;1\\\" dur=\\\"12s\\\" repeatCount=\\\"indefinite\\\"/>',\\n                        '<animate attributeName=\\\"y\\\" values=\\\"1;1;0;0;0;1;1\\\" keyTimes=\\\"0;.6;.62;.64;.82;.84;1\\\" dur=\\\"12s\\\" repeatCount=\\\"indefinite\\\"/>',\\n                    '</rect>',\\n                    '<rect x=\\\"5\\\" y=\\\"1\\\" class=\\\"c3\\\">',\\n                        '<animate attributeName=\\\"x\\\" values=\\\"5;5;5;6;6;5;5\\\" keyTimes=\\\"0;.6;.62;.64;.82;.84;1\\\" dur=\\\"12s\\\" repeatCount=\\\"indefinite\\\"/>',\\n                        '<animate attributeName=\\\"y\\\" values=\\\"1;1;0;0;0;1;1\\\" keyTimes=\\\"0;.6;.62;.64;.82;.84;1\\\" dur=\\\"12s\\\" repeatCount=\\\"indefinite\\\"/>',\\n                    '</rect>',\\n                    '<rect x=\\\"0\\\" y=\\\"0\\\" class=\\\"c1 l\\\" height=\\\"0\\\">',\\n                        '<animate attributeName=\\\"height\\\" values=\\\"0;0;2;0;0;2;0;0\\\" keyTimes=\\\"0;.58;.59;.6;.8;.81;.82;1\\\" dur=\\\"12s\\\" repeatCount=\\\"indefinite\\\"/>',\\n                    '</rect>',\\n                    '<rect x=\\\"5\\\" y=\\\"0\\\" class=\\\"c1 l\\\" height=\\\"0\\\">',\\n                        '<animate attributeName=\\\"height\\\" values=\\\"0;0;2;0;0;2;0;0\\\" keyTimes=\\\"0;.58;.59;.6;.8;.81;.82;1\\\" dur=\\\"12s\\\" repeatCount=\\\"indefinite\\\"/>',\\n                    '</rect>',\\n                '</g>'\\n            )\\n        );\\n    }\\n\\n    function flirty() internal pure returns (string memory){\\n        return string(\\n            abi.encodePacked(\\n                '<g id=\\\"flirty\\\">',\\n                    '<rect x=\\\"0\\\" y=\\\"0\\\" class=\\\"c3\\\">',\\n                        '<animate attributeName=\\\"x\\\" values=\\\"0;0;1;1;0;0\\\" keyTimes=\\\"0;.5;.52;.96;.98;1\\\" dur=\\\"20s\\\" repeatCount=\\\"indefinite\\\"/>',\\n                    '</rect>',\\n                    '<rect x=\\\"5\\\" y=\\\"0\\\" class=\\\"c3\\\">',\\n                        '<animate attributeName=\\\"x\\\" values=\\\"5;5;6;6;5;5\\\" keyTimes=\\\"0;.5;.52;.96;.98;1\\\" dur=\\\"20s\\\" repeatCount=\\\"indefinite\\\"/>',\\n                    '</rect>',\\n                    '<rect x=\\\"0\\\" y=\\\"0\\\" class=\\\"c1 l\\\" height=\\\"0\\\">',\\n                        '<animate attributeName=\\\"height\\\" values=\\\"0;0;2;0;2;0;0\\\" keyTimes=\\\"0;.16;.17;.18;.19;.2;1\\\" dur=\\\"10s\\\" repeatCount=\\\"indefinite\\\"/>',\\n                    '</rect>',\\n                    '<rect x=\\\"5\\\" y=\\\"0\\\" class=\\\"c1 l\\\" height=\\\"0\\\">',\\n                        '<animate attributeName=\\\"height\\\" values=\\\"0;0;2;0;2;0;0\\\" keyTimes=\\\"0;.16;.17;.18;.19;.2;1\\\" dur=\\\"10s\\\" repeatCount=\\\"indefinite\\\"/>',\\n                    '</rect>',\\n                '</g>'\\n            )\\n        );\\n    }\\n\\n    function mischievous() internal pure returns (string memory){\\n        return string(\\n            abi.encodePacked(\\n                '<g id=\\\"mischievous\\\">',\\n                    '<rect x=\\\"0\\\" y=\\\"1\\\" class=\\\"c3 s\\\">',\\n                        '<animate attributeName=\\\"x\\\" values=\\\"0;0;1;1;0;0\\\" keyTimes=\\\"0;.3;.5;.83;.85;1\\\" dur=\\\"8s\\\" repeatCount=\\\"indefinite\\\"/>',\\n                    '</rect>',\\n                    '<rect x=\\\"5\\\" y=\\\"1\\\" class=\\\"c3 s\\\">',\\n                        '<animate attributeName=\\\"x\\\" values=\\\"5;5;6;6;5;5\\\" keyTimes=\\\"0;.3;.5;.83;.85;1\\\" dur=\\\"8s\\\" repeatCount=\\\"indefinite\\\"/>',\\n                    '</rect>',\\n                    '<rect x=\\\"0\\\" y=\\\"0\\\" class=\\\"c1 l\\\" height=\\\"0\\\">',\\n                        '<animate attributeName=\\\"height\\\" values=\\\"0;0;1;1;0;0\\\" keyTimes=\\\"0;.2;.25;.63;.65;1\\\" dur=\\\"8s\\\" repeatCount=\\\"indefinite\\\"/>',\\n                    '</rect>',\\n                    '<rect x=\\\"5\\\" y=\\\"0\\\" class=\\\"c1 l\\\" height=\\\"0\\\">',\\n                        '<animate attributeName=\\\"height\\\" values=\\\"0;0;1;1;0;0\\\" keyTimes=\\\"0;.2;.25;.63;.65;1\\\" dur=\\\"8s\\\" repeatCount=\\\"indefinite\\\"/>',\\n                    '</rect>',\\n                '</g>'\\n            )\\n        );\\n    }\\n\\n    function shy() internal pure returns (string memory){\\n        return string(\\n            abi.encodePacked(\\n                '<g id=\\\"shy\\\">',\\n                    '<rect x=\\\"0\\\" y=\\\"0\\\" class=\\\"c3\\\">',\\n                        '<animate attributeName=\\\"x\\\" values=\\\"0;0;.5;0;0\\\" keyTimes=\\\"0;.1;.7;.71;1\\\" dur=\\\"8s\\\" repeatCount=\\\"indefinite\\\"/>',\\n                        '<animate attributeName=\\\"y\\\" values=\\\"0;0;.5;0;0\\\" keyTimes=\\\"0;.1;.7;.71;1\\\" dur=\\\"8s\\\" repeatCount=\\\"indefinite\\\"/>',\\n                    '</rect>',\\n                    '<rect x=\\\"5\\\" y=\\\"0\\\" class=\\\"c3\\\">',\\n                        '<animate attributeName=\\\"x\\\" values=\\\"5;5;5.5;5;5\\\" keyTimes=\\\"0;.1;.7;.71;1\\\" dur=\\\"8s\\\" repeatCount=\\\"indefinite\\\"/>',\\n                        '<animate attributeName=\\\"y\\\" values=\\\"0;0;.5;0;0\\\" keyTimes=\\\"0;.1;.7;.71;1\\\" dur=\\\"8s\\\" repeatCount=\\\"indefinite\\\"/>',\\n                    '</rect>',\\n                '</g>'\\n            )\\n        );\\n    }\\n}\"\r\n    },\r\n    \"contracts/UintStrings.sol\": {\r\n      \"content\": \"pragma solidity 0.8.6;\\n\\n\\nlibrary UintStrings {\\n    function decimalString(uint256 number, uint8 decimals, bool isPercent) internal pure returns(string memory){\\n        if(number == 0){\\n            return isPercent ? \\\"0%\\\" : \\\"0\\\";\\n        }\\n        \\n        uint8 percentBufferOffset = isPercent ? 1 : 0;\\n        uint256 tenPowDecimals = 10 ** decimals;\\n\\n        uint256 temp = number;\\n        uint8 digits;\\n        uint8 numSigfigs;\\n        while (temp != 0) {\\n            if (numSigfigs > 0) {\\n                // count all digits preceding least significant figure\\n                numSigfigs++;\\n            } else if (temp % 10 != 0) {\\n                numSigfigs++;\\n            }\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        DecimalStringParams memory params;\\n        params.isPercent = isPercent;\\n        if((digits - numSigfigs) >= decimals) {\\n            // no decimals, ensure we preserve all trailing zeros\\n            params.sigfigs = number / tenPowDecimals;\\n            params.sigfigIndex = digits - decimals;\\n            params.bufferLength = params.sigfigIndex + percentBufferOffset;\\n        } else {\\n            // chop all trailing zeros for numbers with decimals\\n            params.sigfigs = number / (10 ** (digits - numSigfigs));\\n            if(tenPowDecimals > number){\\n                // number is less than one\\n                // in this case, there may be leading zeros after the decimal place \\n                // that need to be added\\n\\n                // offset leading zeros by two to account for leading '0.'\\n                params.zerosStartIndex = 2;\\n                params.zerosEndIndex = decimals - digits + 2;\\n                params.sigfigIndex = numSigfigs + params.zerosEndIndex;\\n                params.bufferLength = params.sigfigIndex + percentBufferOffset;\\n                params.isLessThanOne = true;\\n            } else {\\n                // In this case, there are digits before and\\n                // after the decimal place\\n                params.sigfigIndex = numSigfigs + 1;\\n                params.decimalIndex = digits - decimals + 1;\\n            }\\n        }\\n        params.bufferLength = params.sigfigIndex + percentBufferOffset;\\n        return generateDecimalString(params);\\n    }\\n\\n    // With modifications, From https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/NFTDescriptor.sol#L189-L231\\n\\n    struct DecimalStringParams {\\n        // significant figures of decimal\\n        uint256 sigfigs;\\n        // length of decimal string\\n        uint8 bufferLength;\\n        // ending index for significant figures (funtion works backwards when copying sigfigs)\\n        uint8 sigfigIndex;\\n        // index of decimal place (0 if no decimal)\\n        uint8 decimalIndex;\\n        // start index for trailing/leading 0's for very small/large numbers\\n        uint8 zerosStartIndex;\\n        // end index for trailing/leading 0's for very small/large numbers\\n        uint8 zerosEndIndex;\\n        // true if decimal number is less than one\\n        bool isLessThanOne;\\n        // true if string should include \\\"%\\\"\\n        bool isPercent;\\n    }\\n\\n    function generateDecimalString(DecimalStringParams memory params) private pure returns (string memory) {\\n        bytes memory buffer = new bytes(params.bufferLength);\\n        if (params.isPercent) {\\n            buffer[buffer.length - 1] = '%';\\n        }\\n        if (params.isLessThanOne) {\\n            buffer[0] = '0';\\n            buffer[1] = '.';\\n        }\\n\\n        // add leading/trailing 0's\\n        for (uint256 zerosCursor = params.zerosStartIndex; zerosCursor < params.zerosEndIndex; zerosCursor++) {\\n            buffer[zerosCursor] = bytes1(uint8(48));\\n        }\\n        // add sigfigs\\n        while (params.sigfigs > 0) {\\n            if (params.decimalIndex > 0 && params.sigfigIndex == params.decimalIndex) {\\n                buffer[--params.sigfigIndex] = '.';\\n            }\\n            buffer[--params.sigfigIndex] = bytes1(uint8(uint256(48) + (params.sigfigs % 10)));\\n            params.sigfigs /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\"\r\n    },\r\n    \"contracts/IAnimalSVG.sol\": {\r\n      \"content\": \"pragma solidity 0.8.6;\\n\\ninterface IAnimalSVG {\\n    function svg(string memory eyes) external pure returns(string memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IAnimalSVG\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"contract IAnimalSVG\",\"name\":\"_unicorn\",\"type\":\"address\"},{\"internalType\":\"contract IAnimalSVG\",\"name\":\"_skull\",\"type\":\"address\"},{\"internalType\":\"contract IAnimalSVG\",\"name\":\"_cat\",\"type\":\"address\"},{\"internalType\":\"contract IAnimalSVG\",\"name\":\"_mouse\",\"type\":\"address\"},{\"internalType\":\"contract IAnimalSVG\",\"name\":\"_bunny\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"animalType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mood\",\"type\":\"uint8\"}],\"name\":\"animalSvg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"animalType\",\"type\":\"uint8\"}],\"name\":\"animalTypeString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bunny\",\"outputs\":[{\"internalType\":\"contract IAnimalSVG\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cat\",\"outputs\":[{\"internalType\":\"contract IAnimalSVG\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"contract IAnimalSVG\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"mood\",\"type\":\"uint8\"}],\"name\":\"moodSvg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"mood\",\"type\":\"uint8\"}],\"name\":\"moodTypeString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mouse\",\"outputs\":[{\"internalType\":\"contract IAnimalSVG\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skull\",\"outputs\":[{\"internalType\":\"contract IAnimalSVG\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unicorn\",\"outputs\":[{\"internalType\":\"contract IAnimalSVG\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AnimalDescriptors","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002a61b5cf451629e6ea643916a77ce7cfcf4eed45000000000000000000000000a88bb1413499467e6c762ba05ce8c394e984d32200000000000000000000000092749034b1d661d12e57e2b3f41aaa2c741c986900000000000000000000000080417d6aca73a8ce28b850eda79b3b885bcea1040000000000000000000000008f131d3d9054371842169941b7462c4fd9e90b94000000000000000000000000974309b702a27f591b191497d796fc693c372077","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}