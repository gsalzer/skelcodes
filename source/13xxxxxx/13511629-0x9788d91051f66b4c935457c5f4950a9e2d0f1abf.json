{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-10-21\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.8; \r\n\r\n/**\r\n * @title Claim\r\n * @author gotbit\r\n */\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, 'Only owner can call this function');\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner_) external onlyOwner {\r\n        require(newOwner_ != address(0), 'You cant tranfer ownerships to address 0x0');\r\n        require(newOwner_ != owner, 'You cant transfer ownerships to yourself');\r\n        emit OwnershipTransferred(owner, newOwner_);\r\n        owner = newOwner_;\r\n    }\r\n}\r\n\r\ncontract Claim is Ownable {\r\n    IERC20 public token;\r\n\r\n    uint256 public start;\r\n    uint256 public finish;\r\n    uint256 public totalBank;\r\n\r\n    struct User {\r\n        uint256 bank;\r\n        uint256 claimed;\r\n        uint256 debt; // Unclaimed from previous program\r\n        uint256 finish; // Compare with global finish to determine if user is in current 2nd+ program\r\n    }\r\n    mapping(address => User) public users;\r\n\r\n    event Started(uint256 timestamp, uint256 rewardsDuration, address who);\r\n    event Claimed(address indexed who, uint256 amount);\r\n    event SetBank(address indexed who, uint256 bank, uint256 debt);\r\n    event RecoveredERC20(address owner, uint256 amount);\r\n    event RecoveredAnotherERC20(IERC20 token, address owner, uint256 amount);\r\n\r\n    constructor(address owner_, IERC20 token_) {\r\n        owner = owner_;\r\n        token = token_;\r\n    }\r\n\r\n    function claim() external returns (bool) {\r\n        address who = msg.sender;\r\n        User storage user = users[who];\r\n        uint256 absoluteClaimable = getAbsoluteClaimable(who);\r\n        uint256 amount = (absoluteClaimable + user.debt) - user.claimed;\r\n\r\n        require(amount > 0, 'You dont have LIME to harvest');\r\n        require(token.balanceOf(address(this)) >= amount, 'Not enough tokens on contract');\r\n        require(token.transfer(who, amount), 'Transfer issue');\r\n\r\n        totalBank -= amount;\r\n        user.debt = 0;\r\n        user.claimed = absoluteClaimable;\r\n\r\n        emit Claimed(who, amount);\r\n        return true;\r\n    }\r\n\r\n    function getAbsoluteClaimable(address who) public view returns (uint256) {\r\n        User storage user = users[who];\r\n\r\n        // No program or user never participated\r\n        if (start == 0 || user.finish == 0) return 0;\r\n\r\n        if (user.finish == finish) {\r\n            // Nth program, and user is included in last activated program\r\n            uint256 lastApplicableTime = block.timestamp;\r\n            if (lastApplicableTime > user.finish) lastApplicableTime = user.finish;\r\n            return (user.bank * (lastApplicableTime - start)) / (user.finish - start);\r\n        } else {\r\n            // Nth program, and user is not included in last activated program\r\n            // always true in this case:\r\n            // block.timestamp > user.finish\r\n            return user.bank;\r\n        }\r\n    }\r\n\r\n    // For UI\r\n    function getActualClaimable(address who) public view returns (uint256) {\r\n        return (getAbsoluteClaimable(who) + users[who].debt) - users[who].claimed;\r\n    }\r\n\r\n    function infoBundle(address who)\r\n        public\r\n        view\r\n        returns (\r\n            User memory uInfo,\r\n            uint256 uBalance,\r\n            uint256 uClaimable,\r\n            uint256 cBalance,\r\n            uint256 cStart,\r\n            uint256 cFinish,\r\n            uint256 cBank\r\n        )\r\n    {\r\n        uInfo = users[who];\r\n        uBalance = token.balanceOf(who);\r\n        uClaimable = getActualClaimable(who);\r\n        cBalance = token.balanceOf(address(this));\r\n        cStart = start;\r\n        cFinish = finish;\r\n        cBank = totalBank;\r\n    }\r\n\r\n    function setRewards(\r\n        address[] memory whos,\r\n        uint256[] memory banks,\r\n        uint256 durationDays\r\n    ) public onlyOwner {\r\n        require(whos.length == banks.length, 'Different lengths');\r\n\r\n        require(block.timestamp > finish, 'Claiming programm is already started. Wait for its end');\r\n        start = block.timestamp;\r\n        finish = start + (durationDays * (1 days));\r\n\r\n        for (uint256 i = 0; i < whos.length; i++) {\r\n            address who = whos[i];\r\n            uint256 bank = banks[i];\r\n            uint256 debt = (users[who].bank + users[who].debt) - users[who].claimed;\r\n\r\n            users[who] = User({bank: bank, claimed: 0, debt: debt, finish: finish});\r\n            emit SetBank(who, bank, debt);\r\n\r\n            totalBank += bank;\r\n        }\r\n\r\n        emit Started(start, durationDays, msg.sender);\r\n    }\r\n\r\n    function recoverERC20(uint256 amount) external onlyOwner {\r\n        require(token.balanceOf(address(this)) >= totalBank + amount, 'RecoverERC20 error: Not enough balance on contract');\r\n        require(token.transfer(owner, amount), 'Transfer issue');\r\n        emit RecoveredERC20(owner, amount);\r\n    }\r\n\r\n    function recoverAnotherERC20(IERC20 token_, uint256 amount) external onlyOwner {\r\n        require(token_ != token, 'For recovering main token use another function');\r\n        require(token_.balanceOf(address(this)) >= amount, 'RecoverAnotherERC20 error: Not enough balance on contract');\r\n        require(token_.transfer(owner, amount), 'Transfer issue');\r\n        emit RecoveredAnotherERC20(token_, owner, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoveredAnotherERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoveredERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bank\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"SetBank\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Started\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getAbsoluteClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getActualClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"infoBundle\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bank\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"internalType\":\"struct Claim.User\",\"name\":\"uInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"uBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uClaimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cBank\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverAnotherERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"whos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"banks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"durationDays\",\"type\":\"uint256\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bank\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Claim","CompilerVersion":"v0.8.8+commit.dddeac2f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000028941dca628615be82121e4e062fd3bfe41f6d4a0000000000000000000000009d0b65a76274645b29e4cc41b8f23081fa09f4a3","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7744f99585b21741a77cb1edce6d3b27877071669c8f26222adb3092b4f7020a"}]}