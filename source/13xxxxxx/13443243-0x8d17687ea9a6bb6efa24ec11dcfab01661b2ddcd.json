{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/RoyaltyEngineV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport \\\"./libraries/SuperRareContracts.sol\\\";\\n\\nimport \\\"./specs/IManifold.sol\\\";\\nimport \\\"./specs/IRarible.sol\\\";\\nimport \\\"./specs/IFoundation.sol\\\";\\nimport \\\"./specs/ISuperRare.sol\\\";\\nimport \\\"./specs/IEIP2981.sol\\\";\\nimport \\\"./specs/IZoraOverride.sol\\\";\\nimport \\\"./IRoyaltyEngineV1.sol\\\";\\nimport \\\"./IRoyaltyRegistry.sol\\\";\\n\\n/**\\n * @dev Engine to lookup royalty configurations\\n */\\ncontract RoyaltyEngineV1 is ERC165, OwnableUpgradeable, IRoyaltyEngineV1 {\\n    using AddressUpgradeable for address;\\n\\n    // Use int16 for specs to support future spec additions\\n    // When we add a spec, we also decrement the NONE value\\n    // Anything > NONE and <= NOT_CONFIGURED is considered not configured\\n    int16 constant private NONE = -1;\\n    int16 constant private NOT_CONFIGURED = 0;\\n    int16 constant private MANIFOLD = 1;\\n    int16 constant private RARIBLEV1 = 2;\\n    int16 constant private RARIBLEV2 = 3;\\n    int16 constant private FOUNDATION = 4;\\n    int16 constant private EIP2981 = 5;\\n    int16 constant private SUPERRARE = 6;\\n    int16 constant private ZORA = 7;\\n\\n    mapping (address => int16) _specCache;\\n\\n    address public royaltyRegistry;\\n\\n    function initialize(address royaltyRegistry_) public initializer {\\n        __Ownable_init_unchained();\\n        require(ERC165Checker.supportsInterface(royaltyRegistry_, type(IRoyaltyRegistry).interfaceId));\\n        royaltyRegistry = royaltyRegistry_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IRoyaltyEngineV1).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IRoyaltyEngineV1-getRoyalty}\\n     */\\n    function getRoyalty(address tokenAddress, uint256 tokenId, uint256 value) public override returns(address payable[] memory recipients, uint256[] memory amounts) {\\n        int16 spec;\\n        address royaltyAddress;\\n        bool addToCache;\\n\\n        (recipients, amounts, spec, royaltyAddress, addToCache) = _getRoyaltyAndSpec(tokenAddress, tokenId, value);\\n        if (addToCache) _specCache[royaltyAddress] = spec;\\n        return (recipients, amounts);\\n    }\\n\\n    /**\\n     * @dev See {IRoyaltyEngineV1-getRoyaltyView}.\\n     */\\n    function getRoyaltyView(address tokenAddress, uint256 tokenId, uint256 value) public view override returns(address payable[] memory recipients, uint256[] memory amounts) {\\n        (recipients, amounts, , , ) = _getRoyaltyAndSpec(tokenAddress, tokenId, value);\\n        return (recipients, amounts);\\n    }\\n\\n    /**\\n     * @dev Get the royalty and royalty spec for a given token\\n     * \\n     * returns recipieints array, amounts array, royalty spec, royalty address, whether or not to add to cache\\n     */\\n    function _getRoyaltyAndSpec(address tokenAddress, uint256 tokenId, uint256 value) private view returns(address payable[] memory recipients, uint256[] memory amounts, int16 spec, address royaltyAddress, bool addToCache) {\\n\\n        royaltyAddress = IRoyaltyRegistry(royaltyRegistry).getRoyaltyLookupAddress(tokenAddress);\\n        spec = _specCache[royaltyAddress];\\n\\n        if (spec <= NOT_CONFIGURED && spec > NONE) {\\n            // No spec configured yet, so we need to detect the spec\\n            addToCache = true;\\n\\n            // SuperRare handling\\n            if (tokenAddress == SuperRareContracts.SUPERRARE_V1 || tokenAddress == SuperRareContracts.SUPERRARE_V2) {\\n                try ISuperRareRegistry(SuperRareContracts.SUPERRARE_REGISTRY).tokenCreator(tokenAddress, tokenId) returns(address payable creator) {\\n                    try ISuperRareRegistry(SuperRareContracts.SUPERRARE_REGISTRY).calculateRoyaltyFee(tokenAddress, tokenId, value) returns(uint256 amount) {\\n                        recipients = new address payable[](1);\\n                        amounts = new uint256[](1);\\n                        recipients[0] = creator;\\n                        amounts[0] = amount;\\n                        return (recipients, amounts, SUPERRARE, royaltyAddress, addToCache);                        \\n                    } catch {}\\n                } catch {}\\n            }\\n            try IManifold(royaltyAddress).getRoyalties(tokenId) returns(address payable[] memory recipients_, uint256[] memory bps) {\\n                // Supports manifold interface.  Compute amounts\\n                require(recipients_.length == bps.length);\\n                return (recipients_, _computeAmounts(value, bps), MANIFOLD, royaltyAddress, addToCache);\\n            } catch {}\\n            try IRaribleV2(royaltyAddress).getRaribleV2Royalties(tokenId) returns(IRaribleV2.Part[] memory royalties) {\\n                // Supports rarible v2 interface. Compute amounts\\n                recipients = new address payable[](royalties.length);\\n                amounts = new uint256[](royalties.length);\\n                for (uint i = 0; i < royalties.length; i++) {\\n                    recipients[i] = royalties[i].account;\\n                    amounts[i] = value*royalties[i].value/10000;\\n                }\\n                return (recipients, amounts, RARIBLEV2, royaltyAddress, addToCache);\\n            } catch {}\\n            try IRaribleV1(royaltyAddress).getFeeRecipients(tokenId) returns(address payable[] memory recipients_) {\\n                // Supports rarible v1 interface. Compute amounts\\n                recipients_ = IRaribleV1(royaltyAddress).getFeeRecipients(tokenId);\\n                try IRaribleV1(royaltyAddress).getFeeBps(tokenId) returns (uint256[] memory bps) {\\n                    require(recipients_.length == bps.length);\\n                    return (recipients_, _computeAmounts(value, bps), RARIBLEV1, royaltyAddress, addToCache);\\n                } catch {}\\n            } catch {}\\n            try IFoundation(royaltyAddress).getFees(tokenId) returns(address payable[] memory recipients_, uint256[] memory bps) {\\n                // Supports foundation interface.  Compute amounts\\n                require(recipients_.length == bps.length);\\n                return (recipients_, _computeAmounts(value, bps), FOUNDATION, royaltyAddress, addToCache);\\n            } catch {}\\n            try IEIP2981(royaltyAddress).royaltyInfo(tokenId, value) returns(address recipient, uint256 amount) {\\n                // Supports EIP2981.  Return amounts\\n                recipients = new address payable[](1);\\n                amounts = new uint256[](1);\\n                recipients[0] = payable(recipient);\\n                amounts[0] = amount;\\n                return (recipients, amounts, EIP2981, royaltyAddress, addToCache);\\n            } catch {}\\n            try IZoraOverride(royaltyAddress).convertBidShares(tokenAddress, tokenId) returns(address payable[] memory recipients_, uint256[] memory bps) {\\n                // Support Zora override\\n                require(recipients_.length == bps.length);\\n                return (recipients_, _computeAmounts(value, bps), ZORA, royaltyAddress, addToCache);\\n            } catch {}\\n\\n            // No supported royalties configured\\n            return (recipients, amounts, NONE, royaltyAddress, addToCache);\\n        } else {\\n            // Spec exists, just execute the appropriate one\\n            addToCache = false;\\n            if (spec == NONE) {\\n                return (recipients, amounts, spec, royaltyAddress, addToCache);\\n            } else if (spec == MANIFOLD) {\\n                // Manifold spec\\n                uint256[] memory bps;\\n                (recipients, bps) = IManifold(royaltyAddress).getRoyalties(tokenId);\\n                require(recipients.length == bps.length);\\n                return (recipients, _computeAmounts(value, bps), spec, royaltyAddress, addToCache);\\n            } else if (spec == RARIBLEV2) {\\n                // Rarible v2 spec\\n                IRaribleV2.Part[] memory royalties;\\n                royalties = IRaribleV2(royaltyAddress).getRaribleV2Royalties(tokenId);\\n                recipients = new address payable[](royalties.length);\\n                amounts = new uint256[](royalties.length);\\n                for (uint i = 0; i < royalties.length; i++) {\\n                    recipients[i] = royalties[i].account;\\n                    amounts[i] = value*royalties[i].value/10000;\\n                }\\n                return (recipients, amounts, spec, royaltyAddress, addToCache);\\n            } else if (spec == RARIBLEV1) {\\n                // Rarible v1 spec\\n                uint256[] memory bps;\\n                recipients = IRaribleV1(royaltyAddress).getFeeRecipients(tokenId);\\n                bps = IRaribleV1(royaltyAddress).getFeeBps(tokenId);\\n                require(recipients.length == bps.length);\\n                return (recipients, _computeAmounts(value, bps), spec, royaltyAddress, addToCache);\\n            } else if (spec == FOUNDATION) {\\n                // Foundation spec\\n                uint256[] memory bps;\\n                (recipients, bps) = IFoundation(royaltyAddress).getFees(tokenId);\\n                require(recipients.length == bps.length);\\n                return (recipients, _computeAmounts(value, bps), spec, royaltyAddress, addToCache);\\n            } else if (spec == EIP2981) {\\n                // EIP2981 spec\\n                (address recipient, uint256 amount) = IEIP2981(royaltyAddress).royaltyInfo(tokenId, value);\\n                recipients = new address payable[](1);\\n                amounts = new uint256[](1);\\n                recipients[0] = payable(recipient);\\n                amounts[0] = amount;\\n                return (recipients, amounts, spec, royaltyAddress, addToCache);\\n            } else if (spec == SUPERRARE) {\\n                // SUPERRARE spec\\n                address payable creator = ISuperRareRegistry(SuperRareContracts.SUPERRARE_REGISTRY).tokenCreator(tokenAddress, tokenId);\\n                uint256 amount = ISuperRareRegistry(SuperRareContracts.SUPERRARE_REGISTRY).calculateRoyaltyFee(tokenAddress, tokenId, value);\\n                recipients = new address payable[](1);\\n                amounts = new uint256[](1);\\n                recipients[0] = creator;\\n                amounts[0] = amount;\\n                return (recipients, amounts, spec, royaltyAddress, addToCache);            \\n            } else if (spec == ZORA) {\\n                // Zora spec\\n                uint256[] memory bps;\\n                (recipients, bps) =IZoraOverride(royaltyAddress).convertBidShares(tokenAddress, tokenId);\\n                require(recipients.length == bps.length);\\n                return (recipients, _computeAmounts(value, bps), spec, royaltyAddress, addToCache);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Compute royalty amounts\\n     */\\n    function _computeAmounts(uint256 value, uint256[] memory bps) private pure returns(uint256[] memory amounts) {\\n        amounts = new uint256[](bps.length);\\n        for (uint i = 0; i < bps.length; i++) {\\n            amounts[i] = value*bps[i]/10000;\\n        }\\n        return amounts;\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SuperRareContracts.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary SuperRareContracts {\\n    address public constant SUPERRARE_REGISTRY = 0x17B0C8564E53f22364A6C8de6F7ca5CE9BEa4e5D;\\n    address public constant SUPERRARE_V1 = 0x41A322b28D0fF354040e2CbC676F0320d8c8850d;\\n    address public constant SUPERRARE_V2 = 0xb932a70A57673d89f4acfFBE830E8ed7f75Fb9e0;\\n\\n}\"\r\n    },\r\n    \"contracts/specs/IManifold.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\n/**\\n * @dev Royalty interface for creator core classes\\n */\\ninterface IManifold {\\n\\n    /**\\n     * @dev Get royalites of a token.  Returns list of receivers and basisPoints\\n     *\\n     *  bytes4(keccak256('getRoyalties(uint256)')) == 0xbb3bafd6\\n     *\\n     *  => 0xbb3bafd6 = 0xbb3bafd6\\n     */\\n    function getRoyalties(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n}\"\r\n    },\r\n    \"contracts/specs/IRarible.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRaribleV1 {\\n    /*\\n     * bytes4(keccak256('getFeeBps(uint256)')) == 0x0ebd4c7f\\n     * bytes4(keccak256('getFeeRecipients(uint256)')) == 0xb9c4d9fb\\n     *\\n     * => 0x0ebd4c7f ^ 0xb9c4d9fb == 0xb7799584\\n     */\\n    function getFeeBps(uint256 id) external view returns (uint[] memory);\\n    function getFeeRecipients(uint256 id) external view returns (address payable[] memory);\\n}\\n\\n\\ninterface IRaribleV2 {\\n    /*\\n     *  bytes4(keccak256('getRaribleV2Royalties(uint256)')) == 0xcad96cca\\n     */\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n    function getRaribleV2Royalties(uint256 id) external view returns (Part[] memory);\\n}\"\r\n    },\r\n    \"contracts/specs/IFoundation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFoundation {\\n    /*\\n     *  bytes4(keccak256('getFees(uint256)')) == 0xd5a06d4c\\n     *\\n     *  => 0xd5a06d4c = 0xd5a06d4c\\n     */\\n    function getFees(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n}\\n\\ninterface IFoundationTreasuryNode {\\n    function getFoundationTreasury() external view returns (address payable);\\n}\\n\\ninterface IFoundationTreasury {\\n    function isAdmin(address account) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/specs/ISuperRare.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISuperRareRegistry {\\n    /**\\n     * @dev Get the royalty fee percentage for a specific ERC721 contract.\\n     * @param _contractAddress address ERC721Contract address.\\n     * @param _tokenId uint256 token ID.\\n     * @return uint8 wei royalty fee.\\n     */\\n    function getERC721TokenRoyaltyPercentage(\\n        address _contractAddress,\\n        uint256 _tokenId\\n    ) external view returns (uint8);\\n\\n    /**\\n     * @dev Utililty function to calculate the royalty fee for a token.\\n     * @param _contractAddress address ERC721Contract address.\\n     * @param _tokenId uint256 token ID.\\n     * @param _amount uint256 wei amount.\\n     * @return uint256 wei fee.\\n     */\\n    function calculateRoyaltyFee(\\n        address _contractAddress,\\n        uint256 _tokenId,\\n        uint256 _amount\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Get the token creator which will receive royalties of the given token\\n     * @param _contractAddress address ERC721Contract address.\\n     * @param _tokenId uint256 token ID.\\n     */\\n    function tokenCreator(address _contractAddress, uint256 _tokenId)\\n        external\\n        view\\n        returns (address payable);\\n}\\n\\n\"\r\n    },\r\n    \"contracts/specs/IEIP2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * EIP-2981\\n */\\ninterface IEIP2981 {\\n    /**\\n     * bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n     *\\n     * => 0x2a55205a = 0x2a55205a\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\\n}\"\r\n    },\r\n    \"contracts/specs/IZoraOverride.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * Paired down version of the Zora Market interface\\n */\\ninterface IZoraMarket {\\n    struct ZoraDecimal {\\n        uint256 value;\\n    }\\n\\n    struct ZoraBidShares {\\n        // % of sale value that goes to the _previous_ owner of the nft\\n        ZoraDecimal prevOwner;\\n        // % of sale value that goes to the original creator of the nft\\n        ZoraDecimal creator;\\n        // % of sale value that goes to the seller (current owner) of the nft\\n        ZoraDecimal owner;\\n    }\\n\\n    function bidSharesForToken(uint256 tokenId) external view returns (ZoraBidShares memory);\\n}\\n\\n/**\\n * Paired down version of the Zora Media interface\\n */\\ninterface IZoraMedia {\\n\\n    /**\\n     * Auto-generated accessors of public variables\\n     */\\n    function marketContract() external view returns(address);\\n    function previousTokenOwners(uint256 tokenId) external view returns(address);\\n    function tokenCreators(uint256 tokenId) external view returns(address);\\n\\n    /**\\n     * ERC721 function\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n}\\n\\n/**\\n * Interface for a Zora media override\\n */\\ninterface IZoraOverride {\\n\\n    /**\\n     * @dev Convert bid share configuration of a Zora Media token into an array of receivers and bps values\\n     *      Does not support prevOwner and sell-on amounts as that is specific to Zora marketplace implementation\\n     *      and requires updates on the Zora Media and Marketplace to update the sell-on amounts/previous owner values.\\n     *      An off-Zora marketplace sale will break the sell-on functionality.\\n     */\\n    function convertBidShares(address media, uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/IRoyaltyEngineV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Lookup engine interface\\n */\\ninterface IRoyaltyEngineV1 is IERC165 {\\n\\n    /**\\n     * Get the royalty for a given token (address, id) and value amount.  Does not cache the bps/amounts.  Caches the spec for a given token address\\n     * \\n     * @param tokenAddress - The address of the token\\n     * @param tokenId      - The id of the token\\n     * @param value        - The value you wish to get the royalty of\\n     *\\n     * returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\\n     */\\n    function getRoyalty(address tokenAddress, uint256 tokenId, uint256 value) external returns(address payable[] memory recipients, uint256[] memory amounts);\\n\\n    /**\\n     * View only version of getRoyalty\\n     * \\n     * @param tokenAddress - The address of the token\\n     * @param tokenId      - The id of the token\\n     * @param value        - The value you wish to get the royalty of\\n     *\\n     * returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\\n     */\\n    function getRoyaltyView(address tokenAddress, uint256 tokenId, uint256 value) external view returns(address payable[] memory recipients, uint256[] memory amounts);\\n}\"\r\n    },\r\n    \"contracts/IRoyaltyRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Royalty registry interface\\n */\\ninterface IRoyaltyRegistry is IERC165 {\\n\\n     event RoyaltyOverride(address owner, address tokenAddress, address royaltyAddress);\\n\\n    /**\\n     * Override the location of where to look up royalty information for a given token contract.\\n     * Allows for backwards compatibility and implementation of royalty logic for contracts that did not previously support them.\\n     * \\n     * @param tokenAddress    - The token address you wish to override\\n     * @param royaltyAddress  - The royalty override address\\n     */\\n    function setRoyaltyLookupAddress(address tokenAddress, address royaltyAddress) external;\\n\\n    /**\\n     * Returns royalty address location.  Returns the tokenAddress by default, or the override if it exists\\n     *\\n     * @param tokenAddress    - The token address you are looking up the royalty for\\n     */\\n    function getRoyaltyLookupAddress(address tokenAddress) external view returns(address);\\n\\n    /**\\n     * Whether or not the message sender can override the royalty address for the given token address\\n     *\\n     * @param tokenAddress    - The token address you are looking up the royalty for\\n     */\\n    function overrideAllowed(address tokenAddress) external view returns(bool);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getRoyalty\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getRoyaltyView\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"royaltyRegistry_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RoyaltyEngineV1","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}