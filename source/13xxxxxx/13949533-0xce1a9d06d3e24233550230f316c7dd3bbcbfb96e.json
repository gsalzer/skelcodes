{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/utils/cryptography/MerkleProof.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle Trees proofs.\r\n *\r\n * The proofs can be generated using the JavaScript library\r\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\r\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\r\n *\r\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(\r\n        bytes32[] memory proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        return processProof(proof, leaf) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\r\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\r\n     * hash matches the root of the tree. When processing the proof, the pairs\r\n     * of leafs & pre-images are assumed to be sorted.\r\n     *\r\n     * _Available since v4.4._\r\n     */\r\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            bytes32 proofElement = proof[i];\r\n            if (computedHash <= proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n            }\r\n        }\r\n        return computedHash;\r\n    }\r\n}\r\n\r\n// File: contracts/LeAnime2Simplified_RELEASEDAY/Merkle_1_Multiple.sol\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\n\r\ninterface IWrapper {\r\n    function mintSpirits(address account, uint256[] calldata tokenId) external;\r\n}\r\n\r\ncontract Spirits_MerkleClaim {  // Merkle Root Final = 0x14e17a04e8f074c2ed318767ec9a6a75acbdceecb41d66db1802ce2bf99c16e2\r\n    address immutable public wrapperContract;\r\n    bytes32 immutable public merkleRoot;\r\n\r\n    constructor(address contractAddress, bytes32 root) {\r\n        wrapperContract = contractAddress;\r\n        merkleRoot = root;\r\n    }\r\n\r\n    function claimSpirit(address account, uint256[] calldata tokenId, bytes32[] calldata proof)\r\n    external\r\n    {\r\n        \r\n        require(_verify(_leaf(account, tokenId), proof), \"Invalid merkle proof\");\r\n\r\n        IWrapper(wrapperContract).mintSpirits(account, tokenId);\r\n        \r\n    }\r\n\r\n    function _leaf(address account, uint256[] calldata tokenId)\r\n    internal pure returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(tokenId, account));\r\n    }\r\n\r\n    function _verify(bytes32 leaf, bytes32[] memory proof)\r\n    internal view returns (bool)\r\n    {\r\n        return MerkleProof.verify(proof, merkleRoot, leaf);\r\n    }\r\n\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claimSpirit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapperContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Spirits_MerkleClaim","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000003bebcf3d62c1e7465f8a095bfa08a79ca2892a114e17a04e8f074c2ed318767ec9a6a75acbdceecb41d66db1802ce2bf99c16e2","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://25d7873c6a1df9dce475ff42e5c99ff04f30cedd8d2f58c325c9cf933018cf5f"}]}