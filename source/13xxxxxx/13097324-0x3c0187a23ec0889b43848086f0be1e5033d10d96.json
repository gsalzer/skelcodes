{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\n// See ArtBotter.io for a UI\r\n\r\ninterface IERC721 {\r\n\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n}\r\n\r\ncontract ERC721LimitOrder {\r\n\tstruct Order {\r\n\t\tuint128 priceInWeiEach;\r\n\t\tuint128 quantity;\r\n\t}\r\n\r\n\taddress public coordinator;\r\n\taddress public profitReceiver;\r\n\tuint256 public botFeeBips; // fee paid by bots\r\n\r\n\t// user => token address => {priceInWeiEach, quantity}\r\n\tmapping(address => mapping(address => Order)) public orders;\r\n\t// bot => eth balance\r\n\tmapping(address => uint256) balances;\r\n\r\n\tevent Action(address indexed user, address indexed tokenAddress, uint256 priceInWeiEach, uint256 quantity, string action, uint256 optionalTokenId);\r\n\r\n\tmodifier onlyCoordinator() {\r\n\t\trequire(msg.sender == coordinator, 'not Coordinator');\r\n\t\t_;\r\n\t}\r\n\r\n\tconstructor(address _profitReceiver , uint256 _botFeeBips) {\r\n\t\tcoordinator = msg.sender;\r\n\t\tprofitReceiver = _profitReceiver;\r\n\t\trequire(_botFeeBips <= 500, 'fee too high');\r\n\t\tbotFeeBips = _botFeeBips;\r\n\t}\r\n\r\n\t// **************\r\n\t// USER FUNCTIONS\r\n\t// **************\r\n\r\n    // users should place orders ONLY for token addresses that they trust\r\n\tfunction placeOrder(address _tokenAddress, uint128 _quantity) external payable {\r\n\t\tOrder memory order = orders[msg.sender][_tokenAddress];\r\n\t\trequire(order.quantity == 0, 'You already have an order for this token. Please cancel the existing order before making a new one.');\r\n\t\tuint128 priceInWeiEach = uint128(msg.value) / _quantity;\r\n\t\trequire(priceInWeiEach > 0, 'Zero wei offers not accepted.');\r\n\r\n\t\t// EFFECTS\r\n\t\torders[msg.sender][_tokenAddress].priceInWeiEach = priceInWeiEach;\r\n\t\torders[msg.sender][_tokenAddress].quantity = _quantity;\r\n\r\n\t\temit Action(msg.sender, _tokenAddress, priceInWeiEach, _quantity, 'order placed', 0);\r\n\t}\r\n\r\n\tfunction cancelOrder(address _tokenAddress) external {\r\n\t\t// CHECKS\r\n\t\tOrder memory order = orders[msg.sender][_tokenAddress];\r\n\t\tuint256 amountToSendBack = order.priceInWeiEach * order.quantity;\r\n\t\trequire(amountToSendBack != 0, 'You do not have an existing order for this token.');\r\n\r\n\t\t// EFFECTS\r\n\t\tdelete orders[msg.sender][_tokenAddress];\r\n\r\n\t\t// INTERACTIONS\r\n\t\tsendValue(payable(msg.sender), amountToSendBack);\r\n\r\n\t\temit Action(msg.sender, _tokenAddress, 0, 0, 'order cancelled', 0);\r\n\t}\r\n\r\n\t// *************\r\n\t// BOT FUNCTIONS\r\n\t// *************\r\n\r\n\tfunction fillOrder(address _user, address _tokenAddress, uint256 _tokenId, uint256 _expectedPriceInWeiEach, address _profitTo, bool _sendNow) public returns (uint256) {\r\n\t\t// CHECKS\r\n\t\tOrder memory order = orders[_user][_tokenAddress];\r\n\t\trequire(order.quantity > 0, 'user order DNE');\r\n\t\trequire(order.priceInWeiEach >= _expectedPriceInWeiEach, 'user offer insufficient'); // protects bots from users frontrunning them\r\n\r\n\t\t// EFFECTS\r\n\t\torders[_user][_tokenAddress].quantity = order.quantity - 1; // reverts on underflow\r\n\t\tuint256 botFee = order.priceInWeiEach * botFeeBips / 10_000;\r\n\t\tbalances[profitReceiver] += botFee;\r\n\r\n\t\t// INTERACTIONS\r\n\t\t// transfer NFT to user (benign reentrancy possible here)\r\n\t\tIERC721(_tokenAddress).safeTransferFrom(msg.sender, _user, _tokenId); // ERC721-compliant contracts revert on failure here\r\n\r\n\t\t// pay the bot\r\n\t\tuint256 botPayment = order.priceInWeiEach - botFee;\r\n\t\tif (_sendNow) {\r\n\t\t\tsendValue(payable(_profitTo), botPayment);\r\n\t\t} else {\r\n\t\t\tbalances[_profitTo] += botPayment;\r\n\t\t}\r\n\r\n\t\temit Action(_user, _tokenAddress, order.priceInWeiEach, order.quantity - 1, 'order filled', _tokenId);\r\n\r\n\t\treturn botPayment;\r\n\t}\r\n\r\n\tfunction fillMultipleOrders(address[] memory _users, address _tokenAddress, uint256[] memory _tokenIds, uint256[] memory _expectedPriceInWeiEach, address _profitTo, bool _sendNow) external returns (uint256[] memory) {\r\n\t\trequire(_users.length == _tokenIds.length && _tokenIds.length == _expectedPriceInWeiEach.length, 'array length mismatch');\r\n\t\tuint256[] memory output = new uint256[](_users.length);\r\n\t\tfor (uint256 i = 0; i < _users.length; i++) {\r\n\t\t\toutput[i] = fillOrder(_users[i], _tokenAddress, _tokenIds[i], _expectedPriceInWeiEach[i], _profitTo, _sendNow);\r\n\t\t}\r\n\t\treturn output;\r\n\t}\r\n\r\n\t// *********************\r\n\t// COORDINATOR FUNCTIONS\r\n\t// *********************\r\n\r\n\tfunction changeCoordinator(address _newCoordinator) external onlyCoordinator {\r\n\t\tcoordinator = _newCoordinator;\r\n\t}\r\n\r\n\tfunction changeProfitReceiver(address _newProfitReceiver) external onlyCoordinator {\r\n\t\tprofitReceiver = _newProfitReceiver;\r\n\t}\r\n\r\n\tfunction changeBotFeeBips(uint256 _newBotFeeBips) external onlyCoordinator {\r\n\t\trequire(_newBotFeeBips <= 500, 'fee cannot be greater than 5%');\r\n\t\tbotFeeBips = _newBotFeeBips;\r\n\t}\r\n\r\n\t// ****************\r\n\t// HELPER FUNCTIONS\r\n\t// ****************\r\n\r\n\t// OpenZeppelin's sendValue function, used for transfering ETH out of this contract\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n\t\trequire(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\t\t// solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n\t\t(bool success, ) = recipient.call{ value: amount }(\"\");\r\n\t\trequire(success, \"Address: unable to send value, recipient may have reverted\");\r\n\t}\r\n\r\n\tfunction viewOrder(address _user, address _tokenAddress) external view returns (Order memory) {\r\n\t\treturn orders[_user][_tokenAddress];\r\n\t}\r\n\r\n\tfunction viewOrders(address[] memory _users, address[] memory _tokenAddresses) external view returns (Order[] memory) {\r\n\t\tOrder[] memory output = new Order[](_users.length);\r\n\t\tfor (uint256 i = 0; i < _users.length; i++) output[i] = orders[_users[i]][_tokenAddresses[i]];\r\n\t\treturn output;\r\n\t}\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_profitReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_botFeeBips\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceInWeiEach\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionalTokenId\",\"type\":\"uint256\"}],\"name\":\"Action\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"botFeeBips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBotFeeBips\",\"type\":\"uint256\"}],\"name\":\"changeBotFeeBips\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCoordinator\",\"type\":\"address\"}],\"name\":\"changeCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newProfitReceiver\",\"type\":\"address\"}],\"name\":\"changeProfitReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coordinator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_expectedPriceInWeiEach\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_profitTo\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_sendNow\",\"type\":\"bool\"}],\"name\":\"fillMultipleOrders\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expectedPriceInWeiEach\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_profitTo\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_sendNow\",\"type\":\"bool\"}],\"name\":\"fillOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"priceInWeiEach\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"quantity\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_quantity\",\"type\":\"uint128\"}],\"name\":\"placeOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"viewOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"priceInWeiEach\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"quantity\",\"type\":\"uint128\"}],\"internalType\":\"struct ERC721LimitOrder.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokenAddresses\",\"type\":\"address[]\"}],\"name\":\"viewOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"priceInWeiEach\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"quantity\",\"type\":\"uint128\"}],\"internalType\":\"struct ERC721LimitOrder.Order[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ERC721LimitOrder","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"000000000000000000000000c87f98bc399fd19f86affae85d80e150ce92f17000000000000000000000000000000000000000000000000000000000000001f4","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f391f55cce96579ac788dba97cd42ed02377d3c61c10937cbbf4b83233b39e25"}]}