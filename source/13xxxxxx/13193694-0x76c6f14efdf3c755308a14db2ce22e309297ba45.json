{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.15\r\n# @author skozin\r\n# @licence MIT\r\n\r\ninterface LidoOracle:\r\n    def getLastCompletedEpochId() -> uint256: view\r\n    def getBeaconSpec() -> (uint256, uint256, uint256, uint256): view\r\n\r\ninterface LidoNodeOperators:\r\n    def getNodeOperatorsCount() -> uint256: view\r\n    def getNodeOperator(id: uint256, full_info: bool) -> (bool, String[100], address, uint256, uint256, uint256, uint256): view\r\n\r\ninterface AnchorVault:\r\n    def last_liquidation_time() -> uint256: view\r\n\r\ninterface WstETH:\r\n    def getStETHByWstETH(wstETHAmount: uint256) -> uint256: view\r\n\r\ninterface CurveStableSwap:\r\n    def balances(i: uint256) -> uint256: view\r\n\r\n\r\nLIDO_ORACLE: constant(address) = 0x442af784A788A5bd6F42A01Ebe9F287a871243fb\r\nLIDO_NODE_OPS_REGISTRY: constant(address) = 0x55032650b14df07b85bF18A3a3eC8E0Af2e028d5\r\nANCHOR_VAULT: constant(address) = 0xA2F987A546D4CD1c607Ee8141276876C26b72Bdf\r\nCURVE_STETH_POOL: constant(address) = 0xDC24316b9AE028F1497c275EB9192a3Ea0f67022\r\nWSTETH_TOKEN: constant(address) = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0\r\nBALANCER_VAULT: constant(address) = 0xBA12222222228d8Ba445958a75a0704d566BF2C8\r\nBALANCER_POOL_ID: constant(bytes32) = 0x32296969ef14eb0c6d29669c550d4a0449130230000200000000000000000080\r\n\r\n\r\nadmin: public(address)\r\n\r\n\r\n@external\r\ndef __init__():\r\n    self.admin = msg.sender\r\n\r\n\r\n@external\r\ndef set_admin(new_admin: address):\r\n    assert msg.sender == self.admin # dev: unauthorized\r\n    self.admin = new_admin\r\n\r\n\r\n@external\r\ndef kill():\r\n    assert msg.sender == self.admin # dev: unauthorized\r\n    selfdestruct(msg.sender)\r\n\r\n\r\n@internal\r\n@view\r\ndef _get_node_op_spare_keys_count(id: uint256) -> uint256:\r\n    active: bool = False\r\n    name: String[100] = \"\"\r\n    reward_address: address = ZERO_ADDRESS\r\n    staking_limit: uint256 = 0\r\n    stopped_validators: uint256 = 0\r\n    total_signing_keys: uint256 = 0\r\n    used_signing_keys: uint256 = 0\r\n\r\n    (active, name, reward_address, staking_limit,\r\n        stopped_validators,\r\n        total_signing_keys,\r\n        used_signing_keys) = LidoNodeOperators(LIDO_NODE_OPS_REGISTRY).getNodeOperator(id, False)\r\n\r\n    if (not active) or (staking_limit <= used_signing_keys):\r\n        return 0\r\n\r\n    return min(total_signing_keys, staking_limit) - used_signing_keys\r\n\r\n@external\r\n@view\r\ndef get_node_op_spare_keys_count(id: uint256) -> uint256:\r\n    return self._get_node_op_spare_keys_count(id)\r\n\r\n\r\n@external\r\n@view\r\ndef spare_signing_keys_count() -> uint256:\r\n    total_ops: uint256 = LidoNodeOperators(LIDO_NODE_OPS_REGISTRY).getNodeOperatorsCount()\r\n    spare_keys: uint256 = 0\r\n    for i in range(300):\r\n        if i >= total_ops:\r\n            break\r\n        spare_keys += self._get_node_op_spare_keys_count(i)\r\n    return spare_keys\r\n\r\n\r\n@internal\r\n@view\r\ndef _last_reported_epoch_time() -> uint256:\r\n    _: uint256 = 0\r\n    slots_per_epoch: uint256 = 0\r\n    seconds_per_slot: uint256 = 0\r\n    genesis_time: uint256 = 0\r\n    (_, slots_per_epoch, seconds_per_slot, genesis_time) = LidoOracle(LIDO_ORACLE).getBeaconSpec()\r\n    epoch_id: uint256 = LidoOracle(LIDO_ORACLE).getLastCompletedEpochId()\r\n    return genesis_time + epoch_id * slots_per_epoch * seconds_per_slot\r\n\r\n@external\r\n@view\r\ndef last_reported_epoch_time() -> uint256:\r\n    return self._last_reported_epoch_time()\r\n\r\n@external\r\n@view\r\ndef time_since_last_reported_epoch() -> uint256:\r\n    return block.timestamp - self._last_reported_epoch_time()\r\n\r\n\r\n@internal\r\n@view\r\ndef _last_rewards_liquidation_time() -> uint256:\r\n    return AnchorVault(ANCHOR_VAULT).last_liquidation_time()\r\n\r\n@external\r\n@view\r\ndef last_rewards_liquidation_time() -> uint256:\r\n    return self._last_rewards_liquidation_time()\r\n\r\n\r\n@external\r\n@view\r\ndef time_since_last_liquidation() -> uint256:\r\n    last_liquidation_at: uint256 = self._last_rewards_liquidation_time()\r\n    return block.timestamp - last_liquidation_at\r\n\r\n\r\n@internal\r\n@view\r\ndef _time_without_liquidation_since_reported_epoch() -> uint256:\r\n    reported_epoch_time: uint256 = self._last_reported_epoch_time()\r\n    last_liquidation_at: uint256 = self._last_rewards_liquidation_time()\r\n    if last_liquidation_at > reported_epoch_time:\r\n        return 0\r\n    return block.timestamp - reported_epoch_time\r\n\r\n@external\r\n@view\r\ndef time_without_liquidation_since_reported_epoch() -> uint256:\r\n    return self._time_without_liquidation_since_reported_epoch()\r\n\r\n\r\n@external\r\n@view\r\ndef curve_pool_size() -> uint256:\r\n    eth_balance: uint256 = CurveStableSwap(CURVE_STETH_POOL).balances(0)\r\n    steth_balance: uint256 = CurveStableSwap(CURVE_STETH_POOL).balances(1)\r\n    return eth_balance + steth_balance\r\n\r\n\r\n@internal\r\n@pure\r\ndef _calc_imbalance(eth_balance: uint256, steth_balance: uint256) -> int256:\r\n    if steth_balance >= eth_balance:\r\n        return convert((steth_balance * 10**18) / eth_balance - 10**18, int256)\r\n    else:\r\n        return -convert((eth_balance * 10**18) / steth_balance - 10**18, int256)\r\n\r\n\r\n@external\r\n@view\r\ndef curve_pool_imbalance_percent() -> int256:\r\n    \"\"\"\r\n    @dev Value between -10**18 (only ETH in pool) to 10**18 (only stETH in pool).\r\n    \"\"\"\r\n    eth_balance: uint256 = CurveStableSwap(CURVE_STETH_POOL).balances(0)\r\n    steth_balance: uint256 = CurveStableSwap(CURVE_STETH_POOL).balances(1)\r\n    return self._calc_imbalance(eth_balance, steth_balance)\r\n\r\n\r\n@internal\r\n@view\r\ndef _balancer_get_balances() -> (uint256, uint256):\r\n    result: Bytes[32 * 9] = raw_call(\r\n        BALANCER_VAULT,\r\n        concat(method_id(\"getPoolTokens(bytes32)\"), BALANCER_POOL_ID),\r\n        max_outsize = 32 * 9,\r\n        is_static_call = True\r\n    )\r\n    # the return type is (tokens address[], balances uint256[], lastChangeBlock uint256)\r\n    # and there are two items in each array\r\n    wsteth_balance: uint256 = convert(extract32(result, 32*7), uint256)\r\n    eth_balance: uint256 = convert(extract32(result, 32*8), uint256)\r\n    return (wsteth_balance, eth_balance)\r\n\r\n\r\n@external\r\n@view\r\ndef balancer_pool_size() -> uint256:\r\n    wsteth_balance: uint256 = 0\r\n    eth_balance: uint256 = 0\r\n    (wsteth_balance, eth_balance) = self._balancer_get_balances()\r\n    return wsteth_balance + eth_balance\r\n\r\n\r\n@external\r\n@view\r\ndef balancer_pool_imbalance_percent() -> int256:\r\n    wsteth_balance: uint256 = 0\r\n    eth_balance: uint256 = 0\r\n    (wsteth_balance, eth_balance) = self._balancer_get_balances()\r\n    steth_balance: uint256 = WstETH(WSTETH_TOKEN).getStETHByWstETH(wsteth_balance)\r\n    return self._calc_imbalance(eth_balance, steth_balance)","ABI":"[{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_admin\",\"inputs\":[{\"name\":\"new_admin\",\"type\":\"address\"}],\"outputs\":[],\"gas\":37545},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"kill\",\"inputs\":[],\"outputs\":[],\"gas\":27468},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_node_op_spare_keys_count\",\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":11815},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"spare_signing_keys_count\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3561422},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"last_reported_epoch_time\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":6987},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"time_since_last_reported_epoch\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":7183},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"last_rewards_liquidation_time\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3384},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"time_since_last_liquidation\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3607},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"time_without_liquidation_since_reported_epoch\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":20430},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"curve_pool_size\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":5538},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"curve_pool_imbalance_percent\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"gas\":6781},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balancer_pool_size\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":11744},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balancer_pool_imbalance_percent\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"gas\":15398},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2778}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.15","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}