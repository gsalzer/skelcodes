{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/UniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nimport './interfaces/IUniswapV2Factory.sol';\\r\\nimport './UniswapV2Pair.sol';\\r\\n\\r\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract UniswapV2Factory is IUniswapV2Factory {\\r\\n    // address public override feeTo;\\r\\n    address owner;\\r\\n\\r\\n    address treasury;\\r\\n\\r\\n    mapping(address => mapping(address => address)) public override getPair;\\r\\n    // address[] public allPairs; // storage of all pairs\\r\\n    uint public override allPairs;\\r\\n\\r\\n    bytes32 public constant INIT_CODE_PAIR_HASH = keccak256(abi.encodePacked(type(UniswapV2Pair).creationCode));\\r\\n    \\r\\n    uint releaseTime;\\r\\n    uint lockTime = 2 days;\\r\\n\\r\\n    constructor(address _owner, address _treasury) {\\r\\n        owner = _owner;\\r\\n        treasury = _treasury;\\r\\n        releaseTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function allPairsLength() external override view returns (uint) {\\r\\n        // return pair length\\r\\n        // return allPairs.length;\\r\\n        return allPairs;\\r\\n    }\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external override returns (address pair) {\\r\\n        require(tokenA != tokenB, 'PolkaBridge AMM V1: IDENTICAL_ADDRESSES');\\r\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), 'PolkaBridge AMM V1: ZERO_ADDRESS');\\r\\n        require(getPair[token0][token1] == address(0), 'PolkaBridge AMM V1: PAIR_EXISTS'); // single check is sufficient\\r\\n        bytes memory bytecode = type(UniswapV2Pair).creationCode;\\r\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\r\\n        assembly {\\r\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\r\\n        }\\r\\n        IUniswapV2Pair(pair).initialize(token0, token1, owner, treasury);\\r\\n        getPair[token0][token1] = pair;\\r\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\r\\n        // allPairs.push(pair);\\r\\n        allPairs++;\\r\\n        // emit PairCreated(token0, token1, pair, allPairs.length);\\r\\n        emit PairCreated(token0, token1, pair, allPairs);\\r\\n    }\\r\\n\\r\\n    function setTreasuryAddress(address _treasury) external override {\\r\\n        require(msg.sender == owner, 'Only owner can set treasury');\\r\\n        {\\r\\n            require(block.timestamp - releaseTime >= lockTime, \\\"current time is before release time\\\");\\r\\n            treasury = _treasury;\\r\\n            emit TreasurySet(_treasury);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/libraries/UQ112x112.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.0;\\r\\n\\r\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\r\\n\\r\\n// range: [0, 2**112 - 1]\\r\\n// resolution: 1 / 2**112\\r\\n\\r\\nlibrary UQ112x112 {\\r\\n    uint224 constant Q112 = 2**112;\\r\\n\\r\\n    // encode a uint112 as a UQ112x112\\r\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\r\\n        z = uint224(y) * Q112; // never overflows\\r\\n    }\\r\\n\\r\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\r\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\r\\n        z = x / uint224(y);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.0;\\r\\n\\r\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\r\\n    }\\r\\n\\r\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\r\\n    }\\r\\n\\r\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\r\\n    }\\r\\n\\r\\n    function div(uint x, uint y) internal pure returns (uint) {\\r\\n        require (y > 0, 'SafeMath: denominator can not be zero');\\r\\n        return x/y;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/libraries/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.0;\\r\\n\\r\\n// a library for performing various math operations\\r\\n\\r\\nlibrary Math {\\r\\n    function min(uint x, uint y) internal pure returns (uint z) {\\r\\n        z = x < y ? x : y;\\r\\n    }\\r\\n\\r\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\r\\n    function sqrt(uint y) internal pure returns (uint z) {\\r\\n        if (y > 3) {\\r\\n            z = y;\\r\\n            uint x = y / 2 + 1;\\r\\n            while (x < z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nimport './IUniswapV2ERC20.sol';\\r\\n\\r\\ninterface IUniswapV2Pair is IUniswapV2ERC20 {\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n    event TreasurySet(address _address);\\r\\n\\r\\n    function setTreasuryAddress(address _address) external;\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;    \\r\\n    function initialize(address, address, address, address) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.0;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n    event TreasurySet(address _address);\\r\\n    \\r\\n\\r\\n    function setTreasuryAddress(address _address) external;\\r\\n    \\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs() external view returns (uint);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IUniswapV2ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.0;\\r\\n\\r\\ninterface IUniswapV2ERC20 {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/UniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nimport './interfaces/IUniswapV2Pair.sol';\\r\\nimport './UniswapV2ERC20.sol';\\r\\nimport './libraries/Math.sol';\\r\\nimport './libraries/UQ112x112.sol';\\r\\nimport './interfaces/IERC20.sol';\\r\\nimport './interfaces/IUniswapV2Factory.sol';\\r\\n// import './interfaces/IUniswapV2Callee.sol';\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n\\r\\ncontract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20, Ownable {\\r\\n    using SafeMath  for uint;\\r\\n    using UQ112x112 for uint224;\\r\\n\\r\\n    uint public override constant MINIMUM_LIQUIDITY = 10**3;\\r\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n\\r\\n    address public override factory;\\r\\n    address public override token0;\\r\\n    address public override token1;\\r\\n    \\r\\n    address ownerAddress;\\r\\n\\r\\n    address treasury;\\r\\n\\r\\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\\r\\n    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\\r\\n    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\\r\\n\\r\\n    uint public override price0CumulativeLast;\\r\\n    uint public override price1CumulativeLast;\\r\\n    uint public override kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\r\\n\\r\\n    uint private unlocked = 1;\\r\\n    uint256 private releaseTime;\\r\\n    uint256 private lockTime = 2 days;\\r\\n\\r\\n    modifier lock() {\\r\\n        require(unlocked == 1, 'PolkaBridge AMM V1: LOCKED');\\r\\n        unlocked = 0;\\r\\n        _;\\r\\n        unlocked = 1;\\r\\n    }\\r\\n\\r\\n    function getReserves() public override view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\r\\n        _reserve0 = reserve0;\\r\\n        _reserve1 = reserve1;\\r\\n        _blockTimestampLast = blockTimestampLast;\\r\\n    }\\r\\n\\r\\n    function _safeTransfer(address token, address to, uint value) private {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'PolkaBridge AMM V1: TRANSFER_FAILED');\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        factory = msg.sender;\\r\\n    }\\r\\n\\r\\n    // called once by the factory at time of deployment\\r\\n    function initialize(address _token0, address _token1, address _owner, address _treasury) external override {\\r\\n        require(msg.sender == factory, 'PolkaBridge AMM V1: FORBIDDEN'); // sufficient check\\r\\n        token0 = _token0;\\r\\n        token1 = _token1;\\r\\n        ownerAddress = _owner;\\r\\n        treasury = _treasury;\\r\\n    }\\r\\n\\r\\n    // update reserves and, on the first call per block, price accumulators\\r\\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\\r\\n        require(balance0 <= uint112(int112(-1)) && balance1 <= uint112(int112(-1)), 'PolkaBridge AMM V1: OVERFLOW');\\r\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\r\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\r\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\r\\n            // * never overflows, and + overflow is desired\\r\\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\r\\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\r\\n        }\\r\\n        reserve0 = uint112(balance0);\\r\\n        reserve1 = uint112(balance1);\\r\\n        blockTimestampLast = blockTimestamp;\\r\\n        emit Sync(reserve0, reserve1);\\r\\n    }\\r\\n\\r\\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\r\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\r\\n        address feeTo = address(0);//IUniswapV2Factory(factory).feeTo();\\r\\n        feeOn = feeTo != address(0);\\r\\n        uint _kLast = kLast; // gas savings\\r\\n        if (feeOn) {\\r\\n            if (_kLast != 0) {\\r\\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\\r\\n                uint rootKLast = Math.sqrt(_kLast);\\r\\n                if (rootK > rootKLast) {\\r\\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\\r\\n                    uint denominator = rootK.mul(5).add(rootKLast);\\r\\n                    uint liquidity = numerator / denominator;\\r\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\r\\n                }\\r\\n            }\\r\\n        } else if (_kLast != 0) {\\r\\n            kLast = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // this low-level function should be called from a contract which performs important safety checks\\r\\n    function mint(address to) external override lock returns (uint liquidity) {\\r\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\r\\n        uint balance0 = IERC20(token0).balanceOf(address(this));\\r\\n        uint balance1 = IERC20(token1).balanceOf(address(this));\\r\\n        uint amount0 = balance0.sub(_reserve0);\\r\\n        uint amount1 = balance1.sub(_reserve1);\\r\\n\\r\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\r\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\r\\n        if (_totalSupply == 0) {\\r\\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\r\\n           _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\r\\n        } else {\\r\\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\r\\n        }\\r\\n        require(liquidity > 0, 'PolkaBridge AMM V1: INSUFFICIENT_LIQUIDITY_MINTED');\\r\\n        _mint(to, liquidity);\\r\\n\\r\\n        _update(balance0, balance1, _reserve0, _reserve1);\\r\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\r\\n        emit Mint(msg.sender, amount0, amount1);\\r\\n    }\\r\\n\\r\\n    // this low-level function should be called from a contract which performs important safety checks\\r\\n    function burn(address to) external override lock returns (uint amount0, uint amount1) {\\r\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\r\\n        address _token0 = token0;                                // gas savings\\r\\n        address _token1 = token1;                                // gas savings\\r\\n        uint balance0 = IERC20(_token0).balanceOf(address(this));\\r\\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\\r\\n        uint liquidity = balanceOf[address(this)];\\r\\n\\r\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\r\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\r\\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\r\\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\r\\n        require(amount0 > 0 && amount1 > 0, 'PolkaBridge AMM V1: INSUFFICIENT_LIQUIDITY_BURNED');\\r\\n        _burn(address(this), liquidity);\\r\\n        _safeTransfer(_token0, to, amount0);\\r\\n        _safeTransfer(_token1, to, amount1);\\r\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\r\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\r\\n\\r\\n        _update(balance0, balance1, _reserve0, _reserve1);\\r\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\r\\n        emit Burn(msg.sender, amount0, amount1, to);\\r\\n    }\\r\\n    \\r\\n    // this low-level function should be called from a contract which performs important safety checks\\r\\n    function swap(uint amount0Out, uint amount1Out, address to) external override lock {\\r\\n        require(amount0Out > 0 || amount1Out > 0, 'PolkaBridge AMM V1: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\r\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'PolkaBridge AMM V1: INSUFFICIENT_LIQUIDITY');\\r\\n\\r\\n        uint balance0;\\r\\n        uint balance1;\\r\\n        { // scope for _token{0,1}, avoids stack too deep errors\\r\\n            address _token0 = token0;\\r\\n            address _token1 = token1;\\r\\n            require(to != _token0 && to != _token1, 'PolkaBridge AMM V1: INVALID_TO');\\r\\n\\r\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\r\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\r\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\r\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\r\\n        }\\r\\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\r\\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\r\\n        require(amount0In > 0 || amount1In > 0, 'PolkaBridge AMM V1: INSUFFICIENT_INPUT_AMOUNT');\\r\\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\r\\n            uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(2));\\r\\n            uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(2));\\r\\n            require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'PolkaBridge AMM V1: K');\\r\\n        }\\r\\n\\r\\n            if(amount0In.mul(4).div(10000) > 0) {\\r\\n                require(treasury != address(0), 'Treasury address error');\\r\\n                _safeTransfer(token0, treasury, amount0In.mul(4).div(10000));\\r\\n                balance0 = balance0 - amount0In.mul(4).div(10000);\\r\\n                _reserve0 = _reserve0 - uint112(amount0In.mul(4).div(10000));\\r\\n            }\\r\\n            if(amount1In.mul(4).div(10000) > 0) {\\r\\n                require(treasury != address(0), 'Treasury address error');\\r\\n                _safeTransfer(token1, treasury, amount1In.mul(4).div(10000));\\r\\n                balance1 = balance1 - amount1In.mul(4).div(10000);\\r\\n                _reserve1 = _reserve1 - uint112(amount1In.mul(4).div(10000));\\r\\n            }\\r\\n        \\r\\n        _update(balance0, balance1, _reserve0, _reserve1);\\r\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\r\\n\\r\\n    }    \\r\\n\\r\\n    function skim(address to) external override lock {\\r\\n        address _token0 = token0; // gas savings\\r\\n        address _token1 = token1; // gas savings\\r\\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\\r\\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\\r\\n    }\\r\\n\\r\\n    // force reserves to match balances\\r\\n    function sync() external override lock {\\r\\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\r\\n    }\\r\\n\\r\\n    function setTreasuryAddress(address _treasury) external override {\\r\\n        require(msg.sender == ownerAddress, 'Only ownerAddress can set treasury');\\r\\n        {\\r\\n            require(block.timestamp - releaseTime >= lockTime, \\\"current time is before release time\\\");\\r\\n            treasury = _treasury;\\r\\n            emit TreasurySet(_treasury);\\r\\n        }\\r\\n    }    \\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/UniswapV2ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nimport './interfaces/IUniswapV2ERC20.sol';\\r\\nimport './libraries/SafeMath.sol';\\r\\n\\r\\ncontract UniswapV2ERC20 is IUniswapV2ERC20 {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    string public override constant name = 'PolkaBridge AMM V1';\\r\\n    string public override constant symbol = 'PBRAMM-V1';\\r\\n    uint8 public override constant decimals = 18;\\r\\n    uint  public override totalSupply;\\r\\n    mapping(address => uint) public override balanceOf;\\r\\n    mapping(address => mapping(address => uint)) public override allowance;\\r\\n\\r\\n    bytes32 public override DOMAIN_SEPARATOR;\\r\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\r\\n    bytes32 public override constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\r\\n    mapping(address => uint) public override nonces;\\r\\n\\r\\n    constructor() {\\r\\n        uint chainId;\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n        DOMAIN_SEPARATOR = keccak256(\\r\\n            abi.encode(\\r\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\r\\n                keccak256(bytes(name)),\\r\\n                keccak256(bytes('1')),\\r\\n                chainId,\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _mint(address to, uint value) internal {\\r\\n        totalSupply = totalSupply.add(value);\\r\\n        balanceOf[to] = balanceOf[to].add(value);\\r\\n        emit Transfer(address(0), to, value);\\r\\n    }\\r\\n\\r\\n    function _burn(address from, uint value) internal {\\r\\n        balanceOf[from] = balanceOf[from].sub(value);\\r\\n        totalSupply = totalSupply.sub(value);\\r\\n        emit Transfer(from, address(0), value);\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint value) private {\\r\\n        allowance[owner][spender] = value;\\r\\n        emit Approval(owner, spender, value);\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint value) private {\\r\\n        balanceOf[from] = balanceOf[from].sub(value);\\r\\n        balanceOf[to] = balanceOf[to].add(value);\\r\\n        emit Transfer(from, to, value);\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint value) external override returns (bool) {\\r\\n        _approve(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint value) external override returns (bool) {\\r\\n        _transfer(msg.sender, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint value) external override returns (bool) {\\r\\n        if (allowance[from][msg.sender] != uint(int(-1))) {\\r\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\r\\n        }\\r\\n        _transfer(from, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external override {\\r\\n        require(deadline >= block.timestamp, 'PolkaBridge AMM V1: EXPIRED');\\r\\n        bytes32 digest = keccak256(\\r\\n            abi.encodePacked(\\r\\n                '\\\\x19\\\\x01',\\r\\n                DOMAIN_SEPARATOR,\\r\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\r\\n            )\\r\\n        );\\r\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\r\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'PolkaBridge AMM V1: INVALID_SIGNATURE');\\r\\n        _approve(owner, spender, value);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"TreasurySet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INIT_CODE_PAIR_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UniswapV2Factory","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000057866ed63ca5f9744cef9aa270bd1f1dce935831000000000000000000000000aa9b97cf7e4c52d028b854f2610aac18f60c86f5","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}