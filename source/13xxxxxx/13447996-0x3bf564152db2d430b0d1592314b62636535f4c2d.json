{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165Upgradeable {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721Upgradeable is IERC165Upgradeable {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary StringsUpgradeable {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ninterface INFTMoneyClubCard {\r\n    function acceptPartnerFee() external payable returns (bool);\r\n    function hasUser(address _user) external view returns (bool, bool);\r\n    function mint(uint256 _parentTokenID, bool _wannaVIP) external payable ;\r\n    function upgradeToVIP() external  payable  ;\r\n    function upgradeTokenToVIP(uint256 _tokenID) external payable;\r\n    function buyService(uint256 _parentTokenID, uint32 _serviceID) external payable ;\r\n    function distributePartnerFee(address _partner) external ;\r\n    function setUserImage(string memory _hash) external ;\r\n    function claimReward() external  ;\r\n    function claimCommissionPool() external ;\r\n    function availableRewardForUser(address _user) external  view returns(uint256);\r\n    function getUserRefData(address user) external view returns(bool, uint256, uint256, uint32, uint32, uint8, uint32, uint8, uint8, uint64, string memory);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721ReceiverUpgradeable {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\r\n    function __ERC165_init() internal initializer {\r\n        __ERC165_init_unchained();\r\n    }\r\n\r\n    function __ERC165_init_unchained() internal initializer {\r\n    }\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\r\n    using AddressUpgradeable for address;\r\n    using StringsUpgradeable for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC165_init_unchained();\r\n        __ERC721_init_unchained(name_, symbol_);\r\n    }\r\n\r\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\r\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721ReceiverUpgradeable(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n    uint256[44] private __gap;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\r\n    function __ERC721Enumerable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC165_init_unchained();\r\n        __ERC721Enumerable_init_unchained();\r\n    }\r\n\r\n    function __ERC721Enumerable_init_unchained() internal initializer {\r\n    }\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\r\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Upgradeable.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721Upgradeable.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n    uint256[46] private __gap;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    function __Pausable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Pausable_init_unchained();\r\n    }\r\n\r\n    function __Pausable_init_unchained() internal initializer {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n\r\n\r\ncontract NFTsMoneyClubCard is ERC721EnumerableUpgradeable, PausableUpgradeable, OwnableUpgradeable, INFTMoneyClubCard\r\n{\r\n\r\n    // bytes32 public constant MANAGER = keccak256(\"MANAGER\");\r\n    uint256 public constant e12 = 10**12;\r\n\r\n    struct User{\r\n        uint64 parentTokenID; // token ID of the parent token;\r\n        uint32 ePower; //Earning Power\r\n        uint32 vPower; //Voting Power\r\n        uint8 refBonus; //referralBonus, %\r\n        uint32 refCount; //amount of referrals\r\n        uint8 discount; //user's discount, %\r\n        uint8 xFactor; //magic happens here...\r\n        bool vip; //VIP Status flag.\r\n        uint64 rank; //user Rank\r\n        uint256 directRefBonusBalance;//amount of ETH distributed to a user as a direct referral bonus\r\n        uint256 directRefBonusBalanceWithdrawn;\r\n        //userpool or vippool related withdrawals;\r\n        uint256 pendingReward; //how many tokens user was rewarded with, pending to withdraw\r\n        uint256 totalRewarded; //total amount of ETH rewarded to user from pool (userPool/vipPool)\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        //NFT Metadata\r\n        string imageHash; // imageHash in IPFS\r\n    }\r\n\r\n     // Info of each pool.\r\n    struct Pool {\r\n        uint256 totalAmountDistributed;// total amount of reward distributed to pool shareholders\r\n        uint256 accTokenPerShare; // Accumulated Tokens per share, times 1e12. share = ePower\r\n        uint256 totalDeposited; //total tokens deposited in address of a pool [ePower]\r\n    }\r\n\r\n    mapping(uint256 => User) userData; //tokenID => User\r\n    string private baseURIStr;\r\n    /**\r\n    Max values for:\r\n    [0] max ePower\r\n    [1] max vPower\r\n    [2] max refBonus\r\n    [3] max discount\r\n    [4] max xFactor\r\n    [5] refCount value when a User becomes VIP\r\n    [6] max user pool percent value\r\n    [7] vip pool commission from service [percent]\r\n    [8] ref Level2 percent value\r\n    [9] commission pool distribution percent when service bought\r\n    [10] max totalSupply\r\n    [11] vip pool commission when buying/upgrading to VIP [percent]\r\n    */\r\n    uint32[12] public settings;\r\n    uint256[2] public cardPrices; //card prices [0] - userPrice [1] - vipPrice\r\n    mapping(uint32 => uint256) public servicePrices;\r\n\r\n    uint256 private directRefBonusBalance; //[ETH]\r\n    // uint256 public userPoolBalance; //[ETH]\r\n    // uint256 public vipPoolBalance; //[ETH]\r\n    uint256 private commissionPoolBalance; //[ETH]\r\n\r\n    Pool private userPool;\r\n    Pool private vipPool;\r\n\r\n    uint128 public totalVPower;\r\n    uint128 public totalVIPs;\r\n\r\n    address payable public commissionPoolDistributor;\r\n\r\n    mapping(address => uint256) private whitelistedServiceContracts;\r\n    mapping(address => uint256) private undistributedServiceContractsBalance;\r\n\r\n    uint8 private storageVersion;\r\n\r\n    event MintBonuses(uint256 indexed tokenID, uint256 price, uint256 refBonus, uint256 userBonus, uint256 vipBonus, uint256 commission);\r\n    event UpgradeBonuses(uint256 indexed tokenID, uint256 price, uint256 refBonus, uint256 userBonus, uint256 vipBonus, uint256 commission);\r\n    event ServiceBonuses(uint256 indexed tokenID, uint256 price, uint256 refBonus, uint256 userBonus, uint256 vipBonus, uint256 commission);\r\n\r\n    event ServicePriceSet(uint256 indexed id, uint256 price);\r\n    event RewardClaimed(uint256 indexed tokenID, uint256 directRefBonus, uint256 poolRewardPayout);\r\n    event XFactorUpdated(address indexed user, uint256 indexed tokenID, uint8 xFactor);\r\n    event RankUpdated(address indexed user, uint256 indexed tokenID, uint64 rank);\r\n\r\n    function initialize() public initializer {\r\n        __ERC721Enumerable_init();\r\n        __Pausable_init_unchained();\r\n        __Ownable_init_unchained();\r\n        __ERC721_init_unchained(\"NFTs Money Club Card\", \"NMCC\");\r\n        // _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n        baseURIStr = \"ipfs://\";\r\n        settings = [\r\n            uint32(1000), //[0] max ePower\r\n            uint32(1000), //[1] max vPower\r\n            uint32(25), //[2] max refBonus\r\n            uint32(20), //[3] max discount\r\n            uint32(10), //[4] max xFactor\r\n            uint32(100), //[5] refCount value when a User becomes VIP\r\n            uint32(45), //[6] max user pool percent value\r\n            uint32(5), //[7] vip pool commission from service [percent]\r\n            uint32(5),  //[8] ref Level2 percent value;\r\n            uint32(20), //[9] commission pool distribution percent when service bought\r\n            uint32(50000), //[10] max totalSupply\r\n            uint32(25) //vip pool commission when buying/upgrading to VIP [percent]\r\n            ];\r\n        cardPrices = [100000000000000000, 2000000000000000000]; //0.1 && 2 ETH\r\n        storageVersion = version();\r\n    }\r\n\r\n    function version() public pure returns (uint8){\r\n        return uint8(5);\r\n    }\r\n\r\n    function updateStorage() public {\r\n        require (storageVersion < version(), \"Can't upgrade. Already done!\");\r\n        storageVersion = version();\r\n    }\r\n\r\n    function _baseURI() internal view override returns (string memory) {\r\n        return baseURIStr;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view override (ERC721EnumerableUpgradeable) returns (bool){\r\n        return  super.supportsInterface(interfaceId)\r\n                || interfaceId == type(IERC721Upgradeable).interfaceId\r\n                || interfaceId == type(IERC721EnumerableUpgradeable).interfaceId\r\n                || interfaceId == type(IERC721MetadataUpgradeable).interfaceId;\r\n    }\r\n\r\n    //*************** OWNER FUNCTIONS ******************************* */\r\n\r\n    function setBaseURI(string memory _baseURIStr) public onlyOwner(){\r\n        baseURIStr = _baseURIStr;\r\n    }\r\n\r\n    function pause() public onlyOwner() {\r\n        super._pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner() {\r\n        super._unpause();\r\n    }\r\n\r\n    function updateSettings(uint256 _id, uint32 _value) public onlyOwner(){\r\n        require(_id < settings.length,\"Index out of bound\");\r\n        settings[_id] = _value;\r\n    }\r\n\r\n    function updateCardPrices(uint256 _id, uint256 _value) public onlyOwner(){\r\n        require(_id < cardPrices.length,\"Index out of bound\");\r\n        cardPrices[_id] = _value;\r\n    }\r\n\r\n    function setServicePrice(uint32 _id, uint256 _value) public onlyOwner(){\r\n        servicePrices[_id] = _value;\r\n        emit ServicePriceSet(_id, _value);\r\n    }\r\n\r\n    function setCommissionPoolDistributor(address payable _address) public onlyOwner(){\r\n        commissionPoolDistributor = _address;\r\n    }\r\n\r\n    function setUserXFactor(uint256 _tokenID, uint8 _xFactor) public onlyOwner() {\r\n        require(_exists(_tokenID), \"Token doesn't exist\");\r\n        userData[_tokenID].xFactor = _xFactor;\r\n        emit XFactorUpdated(ownerOf(_tokenID), _tokenID, _xFactor);\r\n    }\r\n\r\n    function setUserRank(uint256 _tokenID, uint64 _rank) public onlyOwner() {\r\n        require(_exists(_tokenID), \"Token doesn't exist\");\r\n        userData[_tokenID].rank = _rank;\r\n        emit RankUpdated(ownerOf(_tokenID), _tokenID, _rank);\r\n    }\r\n\r\n    function whitelistServiceContract(address _contract, uint256 _parentTokenID) public onlyOwner() {\r\n        whitelistedServiceContracts[_contract] = _parentTokenID;\r\n    }\r\n\r\n    function delistServiceContract(address _contract) public onlyOwner(){\r\n        delete whitelistedServiceContracts[_contract];\r\n    }\r\n\r\n    //*************** PUBLIC FUNCTIONS ******************************* */\r\n    function mintRegular(uint256 _parentTokenID) public payable whenNotPaused(){\r\n        mint(_parentTokenID, false);\r\n    }\r\n\r\n    function mintVIP(uint256 _parentTokenID) public payable whenNotPaused(){\r\n        mint(_parentTokenID, true);\r\n    }\r\n\r\n    function mint(uint256 _parentTokenID, bool _wannaVIP) public override payable whenNotPaused(){\r\n        require(!isContract(msg.sender), \"Contract calls are not available\");\r\n        require(totalSupply() <= settings[10], \"No more cards allowed\");\r\n        require(balanceOf(msg.sender) == 0, \"NFTs Club Card already minted for this address\");\r\n        uint256 requiredValue = _price(_wannaVIP);\r\n        if(_exists(_parentTokenID)){\r\n            requiredValue = requiredValue * 9 / 10; //10% discount applied\r\n        }\r\n        require(msg.value >= requiredValue, \"Not enough money sent\");\r\n\r\n        if(_exists(_parentTokenID)){\r\n            userData[_parentTokenID].refCount++;\r\n\r\n            if(!userData[_parentTokenID].vip && userData[_parentTokenID].refCount >= settings[5]){\r\n                _moveUserToVIPPool(_parentTokenID);\r\n            }\r\n\r\n            if(userData[_parentTokenID].refBonus < settings[2]){\r\n                userData[_parentTokenID].refBonus++;\r\n            }\r\n            // else if(userData[_parentTokenID].ePower + 10 < settings[0]){\r\n            //     _increaseEPower(_parentTokenID, 10);\r\n            // }\r\n\r\n        }\r\n\r\n        // Mint User Card\r\n        bool userVip = _wannaVIP ? true: (_random(0,1000,\"vip\") > 990);\r\n        uint256 userEPower = userVip ? uint32(800): _random(100, settings[0], \"epower\");\r\n        uint256 mintedTokenID = totalSupply() + 1;\r\n        _safeMint(msg.sender, mintedTokenID);\r\n         //deposit user ePower into the pool (therefore the user is immediately eligible for rewards)\r\n        if(userVip){\r\n            vipPool.totalDeposited += userEPower;\r\n        }else{\r\n            userPool.totalDeposited += userEPower;\r\n        }\r\n        //distributing money\r\n\r\n        //1. refBonus for Parent (layer 1)\r\n        uint256 thisRefBonus = 0;\r\n        if(_exists(_parentTokenID)){\r\n            thisRefBonus = requiredValue*userData[_parentTokenID].refBonus / 100;\r\n            userData[_parentTokenID].directRefBonusBalance += thisRefBonus;\r\n            //1.1. refBonus for Parent (layer 2)\r\n            if(_exists(userData[_parentTokenID].parentTokenID) ){\r\n                uint256 level2Bonus = requiredValue * settings[8] / 100;\r\n                thisRefBonus += level2Bonus;\r\n                userData[userData[_parentTokenID].parentTokenID].directRefBonusBalance += level2Bonus;\r\n            }\r\n        }\r\n        directRefBonusBalance += thisRefBonus;\r\n\r\n        //2. vipPoolBalance\r\n        uint256 thisVipPoolBonus = requiredValue * (userVip?settings[11]:settings[7]) / 100;\r\n        vipPool.accTokenPerShare += thisVipPoolBonus * e12 / vipPool.totalDeposited;\r\n        vipPool.totalAmountDistributed += thisVipPoolBonus;\r\n\r\n\r\n        //3. userPoolBalance\r\n        uint256 thisUserPoolBonus = 0;\r\n        if(!userVip){\r\n            thisUserPoolBonus = requiredValue * settings[6] / 100 - thisRefBonus;\r\n            userPool.accTokenPerShare += thisUserPoolBonus * e12 / userPool.totalDeposited;\r\n            userPool.totalAmountDistributed += thisUserPoolBonus;\r\n        }\r\n\r\n        //4. commissionPoolBalance\r\n        uint256 thisCommissionPoolBonus = 0;\r\n        if(thisVipPoolBonus+thisUserPoolBonus+thisRefBonus < requiredValue){\r\n            thisCommissionPoolBonus = requiredValue - (thisVipPoolBonus + thisUserPoolBonus + thisRefBonus);\r\n        }\r\n        commissionPoolBalance += thisCommissionPoolBonus;\r\n\r\n        //event\r\n        emit MintBonuses(mintedTokenID, requiredValue, thisRefBonus, thisUserPoolBonus, thisVipPoolBonus, thisCommissionPoolBonus);\r\n\r\n        //distribute rewards on the user in the pool\r\n        uint256 userRewardDebt;\r\n        if(userVip){\r\n            totalVIPs++;\r\n            userRewardDebt = userEPower * vipPool.accTokenPerShare / e12;\r\n        }else{\r\n            userRewardDebt = userEPower * userPool.accTokenPerShare / e12;\r\n        }\r\n\r\n        userData[mintedTokenID] = User({\r\n            parentTokenID: uint64(_parentTokenID),\r\n            ePower: uint32(userEPower),\r\n            vPower: userVip ? settings[1]: uint32(_random(100,settings[1],\"vpower\")),\r\n            refBonus: userVip ? uint8(settings[2]) : uint8(_random(10, settings[2],\"refbonus\")),\r\n            refCount: 0,\r\n            discount: userVip ? uint8(settings[3]) :  uint8(_random(5, settings[3],\"discount\")),\r\n            xFactor: uint8(_random(5, settings[4],\"xfactor\")),\r\n            vip: userVip,\r\n            rank: 0,\r\n            directRefBonusBalance: 0,\r\n            directRefBonusBalanceWithdrawn: 0,\r\n            pendingReward: 0,\r\n            totalRewarded: 0,\r\n            rewardDebt: userRewardDebt,\r\n            imageHash: \"\"\r\n        });\r\n\r\n        totalVPower += userData[mintedTokenID].vPower;\r\n\r\n        //send remaining value of ETH back to user;\r\n        if(msg.value > requiredValue){\r\n            address payable receiver = payable(msg.sender);\r\n            receiver.transfer(msg.value - requiredValue);\r\n        }\r\n\r\n    }\r\n\r\n    function upgradeToVIP() public override payable whenNotPaused() {\r\n        upgradeTokenToVIP(tokenOfOwnerByIndex(msg.sender,0));\r\n    }\r\n\r\n    function upgradeTokenToVIP(uint256 _tokenID) public override payable whenNotPaused() {\r\n        require(!isContract(msg.sender), \"Contract calls are not available\");\r\n        require(_exists(_tokenID), \"Incorrect tokenID\");\r\n        require(!userData[_tokenID].vip, \"Already VIP\");\r\n\r\n        uint256 requiredValue = _price(true) - _price(false); //price difference\r\n        uint256 _parentTokenID = userData[_tokenID].parentTokenID;\r\n\r\n        if(_exists(_parentTokenID)){\r\n            requiredValue = requiredValue * 9 / 10; //10% discount applied\r\n        }\r\n        require(msg.value >= requiredValue, \"Not enough money sent\");\r\n\r\n        //move User to VIP pool\r\n        _moveUserToVIPPool(_tokenID);\r\n\r\n        if(userData[_tokenID].vPower < settings[1]){\r\n            totalVPower += (settings[1] - userData[_tokenID].vPower); //add the difference\r\n            userData[_tokenID].vPower = settings[1];\r\n        }\r\n        userData[_tokenID].refBonus = userData[_tokenID].refBonus > settings[2] ? userData[_tokenID].refBonus : uint8(settings[2]);\r\n        userData[_tokenID].discount = userData[_tokenID].discount > settings[3] ? userData[_tokenID].discount : uint8(settings[3]);\r\n        //distributing money\r\n\r\n        //1. refBonus for Parent (layer 1)\r\n        uint256 thisRefBonus = 0;\r\n        if(_exists(_parentTokenID)){\r\n            thisRefBonus = requiredValue*userData[_parentTokenID].refBonus/100;\r\n            userData[_parentTokenID].directRefBonusBalance += thisRefBonus;\r\n            //1.1. refBonus for Parent (layer 2)\r\n            if(_exists(userData[_parentTokenID].parentTokenID) ){\r\n                uint256 level2Bonus = requiredValue * settings[8] / 100;\r\n                thisRefBonus += level2Bonus;\r\n                userData[userData[_parentTokenID].parentTokenID].directRefBonusBalance += level2Bonus;\r\n            }\r\n        }\r\n        directRefBonusBalance += thisRefBonus;\r\n\r\n        //2. vipPoolBalance\r\n        uint256 thisVipPoolBonus = requiredValue * settings[11] / 100;\r\n        vipPool.accTokenPerShare += thisVipPoolBonus * e12 / vipPool.totalDeposited;\r\n        vipPool.totalAmountDistributed += thisVipPoolBonus;\r\n\r\n        //3. userPoolBalance\r\n        uint256 thisUserPoolBonus = 0;\r\n\r\n        //4. commissionPoolBalance\r\n        uint256 thisCommissionPoolBonus = 0;\r\n        if(thisVipPoolBonus+thisUserPoolBonus+thisRefBonus < requiredValue){\r\n            thisCommissionPoolBonus = requiredValue - (thisVipPoolBonus + thisUserPoolBonus + thisRefBonus);\r\n        }\r\n        commissionPoolBalance += thisCommissionPoolBonus;\r\n\r\n        //event\r\n        emit UpgradeBonuses(_tokenID, requiredValue, thisRefBonus, thisUserPoolBonus, thisVipPoolBonus, thisCommissionPoolBonus);\r\n\r\n        //send remaining value of ETH back to user;\r\n        if(msg.value > requiredValue){\r\n            address payable receiver = payable(msg.sender);\r\n            receiver.transfer(msg.value - requiredValue);\r\n        }\r\n    }\r\n\r\n    function buyService(uint256 _parentTokenID, uint32 _serviceID) public override payable whenNotPaused() {\r\n        // require(_serviceID < servicePrices.length, \"Service ID Invalid\");\r\n        uint256 requiredValue = servicePrices[_serviceID];\r\n        if(_exists(_parentTokenID)){\r\n            //apply discount\r\n            requiredValue = requiredValue * (100 - userData[_parentTokenID].discount) / 100;\r\n            if(userData[_parentTokenID].ePower + 100 < settings[0]){\r\n                _increaseEPower(_parentTokenID, 100);\r\n            }\r\n        }\r\n        // distribute money\r\n        _distributeServiceFee(requiredValue, _parentTokenID);\r\n\r\n        //send remaining value of ETH back to user;\r\n        if(msg.value > requiredValue){\r\n            address payable receiver = payable(msg.sender);\r\n            receiver.transfer(msg.value - requiredValue);\r\n        }\r\n    }\r\n\r\n    function acceptPartnerFee() external override payable returns (bool) {\r\n        if(msg.value > 0) {\r\n            undistributedServiceContractsBalance[msg.sender] += msg.value;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function distributePartnerFee(address _partner) public override whenNotPaused(){\r\n        uint256 toDistribute = undistributedServiceContractsBalance[_partner];\r\n        require(toDistribute > 0, \"Nothing to distribute\");\r\n        require(whitelistedServiceContracts[_partner] > 0, \"Partner referral not set\");\r\n        undistributedServiceContractsBalance[_partner] = 0;\r\n        _distributeServiceFee(toDistribute, whitelistedServiceContracts[_partner]);\r\n    }\r\n\r\n    function setUserImage(string memory _hash) public override whenNotPaused(){\r\n        uint256 _tokenID = tokenOfOwnerByIndex(msg.sender,0);\r\n        userData[_tokenID].imageHash = _hash;\r\n    }\r\n\r\n    function burn(uint256 _tokenId) external whenNotPaused() {\r\n        _burn(_tokenId);\r\n    }\r\n\r\n    function claimReward() public override whenNotPaused() {\r\n        uint256 _tokenID = tokenOfOwnerByIndex(msg.sender,0);\r\n        require(!isContract(msg.sender), \"Contract calls are not available\");\r\n        require(ownerOf(_tokenID) == msg.sender, \"Not a token owner\");\r\n        uint256 directRefBonusPayout = userData[_tokenID].directRefBonusBalance - userData[_tokenID].directRefBonusBalanceWithdrawn;\r\n        if(directRefBonusPayout > 0){\r\n            userData[_tokenID].directRefBonusBalanceWithdrawn += directRefBonusPayout;\r\n        }\r\n        uint256 poolRewardPayout = 0;\r\n\r\n        uint256 accTokenPerShare = userData[_tokenID].vip ? vipPool.accTokenPerShare : userPool.accTokenPerShare;\r\n        userData[_tokenID].pendingReward += userData[_tokenID].ePower * accTokenPerShare / e12 - userData[_tokenID].rewardDebt;\r\n        userData[_tokenID].rewardDebt = userData[_tokenID].ePower * accTokenPerShare / e12;\r\n\r\n        if(userData[_tokenID].pendingReward > 0){\r\n            userData[_tokenID].totalRewarded += userData[_tokenID].pendingReward;\r\n            poolRewardPayout = userData[_tokenID].pendingReward;\r\n            userData[_tokenID].pendingReward = 0;\r\n        }\r\n        require (directRefBonusBalance >= directRefBonusPayout, \"Ref bonus account balance low\");\r\n        directRefBonusBalance -= directRefBonusPayout;\r\n        if(userData[_tokenID].vip){\r\n            require(vipPool.totalAmountDistributed >= poolRewardPayout, \"VIP Pool balance low\");\r\n            vipPool.totalAmountDistributed -= poolRewardPayout;\r\n        }else{\r\n            require(userPool.totalAmountDistributed >= poolRewardPayout, \"User Pool balance low\");\r\n            userPool.totalAmountDistributed -= poolRewardPayout;\r\n        }\r\n\r\n        emit RewardClaimed (_tokenID, directRefBonusPayout, poolRewardPayout);\r\n        //send remaining value of ETH back to user;\r\n        if(directRefBonusPayout + poolRewardPayout > 0){\r\n            address payable receiver = payable(msg.sender);\r\n            receiver.transfer(directRefBonusPayout + poolRewardPayout);\r\n        }\r\n    }\r\n\r\n    function claimCommissionPool() public override whenNotPaused() {\r\n        require(msg.sender == commissionPoolDistributor, \"Not an commission pool distributor\");\r\n        uint256 amount = commissionPoolBalance;\r\n        commissionPoolBalance = 0;\r\n        (bool success,) = commissionPoolDistributor.call{value: amount}(\"\");\r\n        require(success, \"Distribution in external contract failed\");\r\n    }\r\n    //***************** VIEW Functions ************************/\r\n\r\n    function getUndestributedServiceContractBalance(address _serviceContract) public view returns(uint256){\r\n        return undistributedServiceContractsBalance[_serviceContract];\r\n    }\r\n\r\n    function getServiceContractReferral(address _serviceContract) public view returns(uint256){\r\n        return whitelistedServiceContracts[_serviceContract];\r\n    }\r\n\r\n    function currentPriceRegular(uint256 _parentTokenID) public view returns(uint256) {\r\n        if(_exists(_parentTokenID))\r\n            return _price(false) * 9 / 10;\r\n        else\r\n            return _price(false);\r\n    }\r\n\r\n    function currentPriceVIP(uint256 _parentTokenID) public view returns(uint256) {\r\n        if(_exists(_parentTokenID))\r\n            return _price(true) * 9 / 10;\r\n        else\r\n            return _price(true);\r\n    }\r\n\r\n    function getServicePrice(uint32 _index) public view returns(uint256){\r\n        return servicePrices[_index];\r\n    }\r\n\r\n    function availableRewardForUser(address _user) public override view returns(uint256){\r\n        return availableReward(tokenOfOwnerByIndex(_user,0));\r\n    }\r\n\r\n    function availableReward(uint256 _tokenID) public view returns(uint256){\r\n        uint256 availablePoolReward = userData[_tokenID].pendingReward;\r\n        uint256 accTokenPerShare = userData[_tokenID].vip ? vipPool.accTokenPerShare : userPool.accTokenPerShare;\r\n        availablePoolReward += userData[_tokenID].ePower * accTokenPerShare / e12 - userData[_tokenID].rewardDebt;\r\n        return availablePoolReward +\r\n        (userData[_tokenID].directRefBonusBalance - userData[_tokenID].directRefBonusBalanceWithdrawn);\r\n    }\r\n\r\n    function getUserRefData(address user) public override view returns(bool, uint256, uint256, uint32, uint32, uint8, uint32, uint8, uint8, uint64, string memory){\r\n        uint256 userTokenID = tokenOfOwnerByIndex(user,0);\r\n        return(\r\n            userData[userTokenID].vip,\r\n            userTokenID ,//tokenID\r\n            userData[userTokenID].parentTokenID,\r\n            userData[userTokenID].ePower,\r\n            userData[userTokenID].vPower,\r\n            userData[userTokenID].refBonus,\r\n            userData[userTokenID].refCount,\r\n            userData[userTokenID].discount,\r\n            userData[userTokenID].xFactor,\r\n            userData[userTokenID].rank,\r\n            userData[userTokenID].imageHash\r\n        );\r\n    }\r\n\r\n    function getUserBonusData(address user) public view returns(uint256,uint256,uint256,uint256,uint256){\r\n        uint256 userTokenID = tokenOfOwnerByIndex(user,0);\r\n        uint256 accTokenPerShare = userData[userTokenID].vip ? vipPool.accTokenPerShare : userPool.accTokenPerShare;\r\n        return(\r\n            userTokenID ,//tokenID\r\n            userData[userTokenID].directRefBonusBalance,\r\n            userData[userTokenID].directRefBonusBalanceWithdrawn,\r\n            userData[userTokenID].pendingReward + userData[userTokenID].ePower * accTokenPerShare / e12 - userData[userTokenID].rewardDebt, //claimable pool reward\r\n            userData[userTokenID].totalRewarded\r\n        );\r\n    }\r\n\r\n    function getUserPoolData(address user) public view returns(uint256, bool, uint256,uint256,uint256,uint256){\r\n        uint256 userTokenID = tokenOfOwnerByIndex(user,0);\r\n        uint256 accTokenPerShare = userData[userTokenID].vip ? vipPool.accTokenPerShare : userPool.accTokenPerShare;\r\n        return(\r\n            userTokenID ,//tokenID\r\n            userData[userTokenID].vip,\r\n            userData[userTokenID].pendingReward,\r\n            userData[userTokenID].rewardDebt,\r\n            userData[userTokenID].totalRewarded,\r\n            userData[userTokenID].pendingReward + userData[userTokenID].ePower * accTokenPerShare / e12 - userData[userTokenID].rewardDebt //claimable pool reward\r\n        );\r\n    }\r\n\r\n    function getPoolData(bool vip) public view returns(uint256, uint256, uint256){\r\n        if(vip){\r\n            return (vipPool.accTokenPerShare, vipPool.totalAmountDistributed, vipPool.totalDeposited);\r\n        }\r\n        else{\r\n            return (userPool.accTokenPerShare, userPool.totalAmountDistributed, userPool.totalDeposited);\r\n        }\r\n    }\r\n\r\n    function contractBalances() public view returns(uint256, uint256, uint256, uint256){\r\n        return (directRefBonusBalance, userPool.totalAmountDistributed, vipPool.totalAmountDistributed, commissionPoolBalance);\r\n    }\r\n\r\n    function hasUser(address _user) public override view returns (bool, bool) {\r\n        uint256 userTokenID = tokenOfOwnerByIndex(_user,0);\r\n        return(userTokenID > 0, userTokenID > 0 ? userData[userTokenID].vip : false);\r\n    }\r\n\r\n    function tokenIDByUser(address owner) external view returns (uint256){\r\n        if(balanceOf(owner) > 0){\r\n            return tokenOfOwnerByIndex(owner,0);\r\n        } else\r\n            return 0;\r\n    }\r\n    //***************** INTERNAL Functions ************************/\r\n\r\n    function _moveUserToVIPPool(uint256 _tokenID) private {\r\n        require(!userData[_tokenID].vip, \"Already VIP\");\r\n        //when user leaves userPool, his pending reward to be withdrawn. Withdrawing into directRefBonuses sub account\r\n        userData[_tokenID].pendingReward += userData[_tokenID].ePower * userPool.accTokenPerShare / e12 - userData[_tokenID].rewardDebt;\r\n        // userData[_tokenID].rewardDebt = userData[_tokenID].ePower * userPool.accTokenPerShare / e12; //this variable will change to the one from VIP pool\r\n\r\n        if(userData[_tokenID].pendingReward > 0){\r\n            userData[_tokenID].totalRewarded += userData[_tokenID].pendingReward;//?\r\n            userData[_tokenID].directRefBonusBalance += userData[_tokenID].pendingReward;\r\n            //moving money from userPool subAcct to directRefBonus subacct\r\n            userPool.totalAmountDistributed -= userData[_tokenID].pendingReward;\r\n            directRefBonusBalance += userData[_tokenID].pendingReward;\r\n            //reset pendingReward\r\n            userData[_tokenID].pendingReward = 0;\r\n        }\r\n\r\n        //remove from userPool\r\n        // userData[_tokenID].ePower = userData[_tokenID].ePower > 800 ? userData[_tokenID].ePower : uint32(800); //should be 0 here.\r\n        userPool.totalDeposited -= userData[_tokenID].ePower;\r\n        //change userEPower to VIP\r\n        userData[_tokenID].ePower = userData[_tokenID].ePower > 800 ? userData[_tokenID].ePower : uint32(800);\r\n        //add to vipPool\r\n        vipPool.totalDeposited += userData[_tokenID].ePower;\r\n        userData[_tokenID].rewardDebt = userData[_tokenID].ePower * vipPool.accTokenPerShare / e12;\r\n        //set VIP\r\n        userData[_tokenID].vip = true;\r\n        totalVIPs++;\r\n    }\r\n\r\n    function _random(uint256 _min, uint256 _max, string memory seed) private view returns(uint256){\r\n        require (_min < _max, \"Random: invalid params\");\r\n        uint256 base =  uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp, block.coinbase, seed)));\r\n        return _min + base % (_max - _min);\r\n    }\r\n\r\n    function _price(bool _vip) public view returns(uint256) {\r\n        if(_vip){\r\n            return cardPrices[1] + 10000000000000000 * totalVIPs;\r\n        }else{\r\n            return cardPrices[0];\r\n        }\r\n\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC721-_beforeTokenTransfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the contract must not be paused.\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        require(!paused(), \"ERC721Pausable: token transfer while paused\");\r\n    }\r\n\r\n    function _increaseEPower(uint256 _tokenID, uint32 ePowerIncrement) private {\r\n        Pool storage _pool = userData[_tokenID].vip ? vipPool : userPool;\r\n        userData[_tokenID].pendingReward += userData[_tokenID].ePower * _pool.accTokenPerShare / e12 - userData[_tokenID].rewardDebt;\r\n        //deposit more ePower\r\n        userData[_tokenID].ePower += ePowerIncrement;\r\n        _pool.totalDeposited += ePowerIncrement;\r\n        //record reward debt\r\n        userData[_tokenID].rewardDebt = userData[_tokenID].ePower * _pool.accTokenPerShare / e12;\r\n    }\r\n\r\n    function _distributeServiceFee(uint256 requiredValue, uint256 _parentTokenID) private {\r\n        // refBonus -> ParentTokenID.directRefBonusBalance (if exists)\r\n        // 5% - ParentTokenID2.directRefBonusBalance (if exists)\r\n        // 5% -> VIPPool;\r\n        // 20% -> CommissionPool;\r\n        // what's left -> userpool;\r\n\r\n        //1. refBonus for Parent (layer 1)\r\n        uint256 thisRefBonus = 0;\r\n        if(_exists(_parentTokenID)){\r\n            thisRefBonus = requiredValue*userData[_parentTokenID].refBonus/100;\r\n            userData[_parentTokenID].directRefBonusBalance += thisRefBonus;\r\n            //1.1. refBonus for Parent (layer 2)\r\n            if(_exists(userData[_parentTokenID].parentTokenID) ){\r\n                uint256 level2Bonus = requiredValue * settings[8] / 100;\r\n                thisRefBonus += level2Bonus;\r\n                userData[userData[_parentTokenID].parentTokenID].directRefBonusBalance += level2Bonus;\r\n            }\r\n        }\r\n        directRefBonusBalance += thisRefBonus;\r\n\r\n        //2. vipPoolBalance\r\n        uint256 thisVipPoolBonus = requiredValue * settings[7] / 100;\r\n        if(vipPool.totalDeposited>0){\r\n            vipPool.accTokenPerShare += thisVipPoolBonus * e12 / vipPool.totalDeposited;\r\n            vipPool.totalAmountDistributed += thisVipPoolBonus;\r\n            // vipPoolBalance += thisVipPoolBonus;\r\n        }\r\n        else\r\n            thisVipPoolBonus = 0;\r\n\r\n\r\n        //3. commissionPoolBalance\r\n        uint256 thisCommissionPoolBonus = requiredValue * settings[9] / 100;\r\n        commissionPoolBalance += thisCommissionPoolBonus;\r\n\r\n        //4. userPoolBalance\r\n        uint256 thisUserPoolBonus = 0;\r\n        if(thisVipPoolBonus+thisCommissionPoolBonus+thisRefBonus < requiredValue){\r\n            thisUserPoolBonus = requiredValue - (thisVipPoolBonus + thisCommissionPoolBonus + thisRefBonus);\r\n            if(userPool.totalDeposited>0) {\r\n                userPool.accTokenPerShare += thisUserPoolBonus * e12 / userPool.totalDeposited;\r\n                userPool.totalAmountDistributed += thisUserPoolBonus;\r\n                // userPoolBalance += thisUserPoolBonus;\r\n            }\r\n            else\r\n                thisUserPoolBonus = 0;\r\n        }\r\n        //event\r\n        emit ServiceBonuses(_parentTokenID, requiredValue, thisRefBonus, thisUserPoolBonus, thisVipPoolBonus, thisCommissionPoolBonus);\r\n    }\r\n\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vipBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"MintBonuses\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"rank\",\"type\":\"uint64\"}],\"name\":\"RankUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"directRefBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolRewardPayout\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vipBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"ServiceBonuses\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ServicePriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vipBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"UpgradeBonuses\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"xFactor\",\"type\":\"uint8\"}],\"name\":\"XFactorUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_vip\",\"type\":\"bool\"}],\"name\":\"_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptPartnerFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"availableReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"availableRewardForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_parentTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_serviceID\",\"type\":\"uint32\"}],\"name\":\"buyService\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimCommissionPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionPoolDistributor\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_parentTokenID\",\"type\":\"uint256\"}],\"name\":\"currentPriceRegular\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_parentTokenID\",\"type\":\"uint256\"}],\"name\":\"currentPriceVIP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"delistServiceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"distributePartnerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"e12\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"vip\",\"type\":\"bool\"}],\"name\":\"getPoolData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_serviceContract\",\"type\":\"address\"}],\"name\":\"getServiceContractReferral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"}],\"name\":\"getServicePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_serviceContract\",\"type\":\"address\"}],\"name\":\"getUndestributedServiceContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserBonusData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserPoolData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserRefData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"hasUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_parentTokenID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_wannaVIP\",\"type\":\"bool\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_parentTokenID\",\"type\":\"uint256\"}],\"name\":\"mintRegular\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_parentTokenID\",\"type\":\"uint256\"}],\"name\":\"mintVIP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"servicePrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURIStr\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCommissionPoolDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setServicePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"setUserImage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_rank\",\"type\":\"uint64\"}],\"name\":\"setUserRank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_xFactor\",\"type\":\"uint8\"}],\"name\":\"setUserXFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"settings\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokenIDByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVIPs\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVPower\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateCardPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_value\",\"type\":\"uint32\"}],\"name\":\"updateSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeToVIP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"upgradeTokenToVIP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_parentTokenID\",\"type\":\"uint256\"}],\"name\":\"whitelistServiceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NFTsMoneyClubCard","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6ca4237f88f93e2a983d6d991a17157043aabaf1b97900866c604ce43fdb0ea5"}]}