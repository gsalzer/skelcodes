{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IAssetFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IAssetFactory {\\n    function notDefaultDexRouterToken(address) external view returns (address);\\n\\n    function notDefaultDexFactoryToken(address) external view returns (address);\\n\\n    function defaultDexRouter() external view returns (address);\\n\\n    function defaultDexFactory() external view returns (address);\\n\\n    function weth() external view returns (address);\\n\\n    function isAddressDexRouter(address) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    function getData(address[] calldata tokens)\\n        external\\n        view\\n        returns (bool[] memory isValidValue, uint256[] memory tokensPrices);\\n\\n    function uploadData(address[] calldata tokens, uint256[] calldata values) external;\\n\\n    function getTimestampsOfLastUploads(address[] calldata tokens)\\n        external\\n        view\\n        returns (uint256[] memory timestamps);\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/AssetLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"../pancake-swap/interfaces/IPancakeRouter02.sol\\\";\\nimport \\\"../pancake-swap/interfaces/IPangolinRouter02.sol\\\";\\nimport \\\"../pancake-swap/interfaces/IPancakeRouter02BNB.sol\\\";\\nimport \\\"../pancake-swap/interfaces/IPancakeFactory.sol\\\";\\nimport \\\"../pancake-swap/interfaces/IWETH.sol\\\";\\n\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../interfaces/IAssetFactory.sol\\\";\\n\\nlibrary AssetLib {\\n    function calculateUserWeight(\\n        address user,\\n        address[] memory tokens,\\n        uint256[] memory tokenPricesInIme,\\n        mapping(address => mapping(address => uint256)) storage userEnters\\n    ) external view returns (uint256) {\\n        uint256 totalUserWeight;\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            uint256 decimals_;\\n            if (tokens[i] == address(0)) {\\n                decimals_ = 18;\\n            } else {\\n                decimals_ = IERC20Metadata(tokens[i]).decimals();\\n            }\\n            totalUserWeight +=\\n                (userEnters[user][tokens[i]] * tokenPricesInIme[i]) /\\n                (10**decimals_);\\n        }\\n        return totalUserWeight;\\n    }\\n\\n    function checkIfTokensHavePair(address[] memory tokens, address assetFactory) public view {\\n        address defaultDexFactory = IAssetFactory(assetFactory).defaultDexFactory();\\n        address defaultDexRouter = IAssetFactory(assetFactory).defaultDexRouter();\\n\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            address dexFactory = IAssetFactory(assetFactory).notDefaultDexFactoryToken(tokens[i]);\\n            address dexRouter;\\n            address weth;\\n            if (dexFactory != address(0)) {\\n                dexRouter = IAssetFactory(assetFactory).notDefaultDexRouterToken(tokens[i]);\\n            } else {\\n                dexFactory = defaultDexFactory;\\n                dexRouter = defaultDexRouter;\\n            }\\n            weth = getWethFromDex(dexRouter);\\n\\n            if (tokens[i] == weth) {\\n                continue;\\n            }\\n            bool isValid = checkIfAddressIsToken(tokens[i]);\\n            require(isValid == true, \\\"Address is not token\\\");\\n\\n            address pair = IPancakeFactory(dexFactory).getPair(tokens[i], weth);\\n            require(pair != address(0), \\\"Not have eth pair\\\");\\n        }\\n    }\\n\\n    function checkIfAddressIsToken(address token) public view returns (bool) {\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(token)\\n        }\\n        if (size == 0) {\\n            return false;\\n        }\\n        try IERC20Metadata(token).decimals() returns (uint8) {\\n            return true;\\n        } catch (bytes memory) {\\n            return false;\\n        }\\n    }\\n\\n    function initTokenToBuyInfo(\\n        address[] memory tokensToBuy,\\n        uint256 totalWeight,\\n        mapping(address => uint256) storage tokensDistribution,\\n        IOracle oracle\\n    ) external view returns (uint256[][5] memory, uint256[] memory) {\\n        /*\\n        tokenToBuyInfo\\n        0 - tokens to buy amounts\\n        1 - actual number to buy (tokens to buy amounts - tokensInAssetNow)\\n        2 - actual weight to buy\\n        3 - tokens decimals\\n        4 - is in asset already\\n         */\\n        uint256[][5] memory tokenToBuyInfo;\\n        for (uint256 i = 0; i < tokenToBuyInfo.length; ++i) {\\n            tokenToBuyInfo[i] = new uint256[](tokensToBuy.length);\\n        }\\n\\n        (bool[] memory isValidValue, uint256[] memory tokensPrices) = oracle.getData(tokensToBuy);\\n        for (uint256 i = 0; i < tokensToBuy.length; ++i) {\\n            require(isValidValue[i] == true, \\\"Oracle price error\\\");\\n\\n            tokenToBuyInfo[3][i] = IERC20Metadata(tokensToBuy[i]).decimals();\\n\\n            uint256 tokenWeight = (tokensDistribution[tokensToBuy[i]] * totalWeight) / 1e4;\\n            tokenToBuyInfo[0][i] = (tokenWeight * (10**tokenToBuyInfo[3][i])) / tokensPrices[i];\\n        }\\n\\n        return (tokenToBuyInfo, tokensPrices);\\n    }\\n\\n    function initTokenToSellInfo(\\n        address[] memory tokensOld,\\n        IOracle oracle,\\n        mapping(address => uint256) storage totalTokenAmount\\n    ) external view returns (uint256[][3] memory, uint256) {\\n        uint256[][3] memory tokensOldInfo;\\n        for (uint256 i = 0; i < tokensOldInfo.length; ++i) {\\n            tokensOldInfo[i] = new uint256[](tokensOld.length);\\n        }\\n\\n        (bool[] memory isValidValue, uint256[] memory tokensPrices) = oracle.getData(tokensOld);\\n        uint256 oldWeight;\\n        for (uint256 i = 0; i < tokensOld.length; ++i) {\\n            tokensOldInfo[0][i] = totalTokenAmount[tokensOld[i]];\\n            tokensOldInfo[2][i] = IERC20Metadata(tokensOld[i]).decimals();\\n            require(isValidValue[i] == true, \\\"Oracle error\\\");\\n            oldWeight += (tokensOldInfo[0][i] * tokensPrices[i]) / (10**tokensOldInfo[2][i]);\\n        }\\n        require(oldWeight != 0, \\\"No value in asset\\\");\\n\\n        return (tokensOldInfo, oldWeight);\\n    }\\n\\n    function checkAndWriteDistribution(\\n        address[] memory newTokensInAsset,\\n        uint256[] memory distribution,\\n        address[] memory oldTokens,\\n        mapping(address => uint256) storage tokensDistribution\\n    ) external {\\n        require(newTokensInAsset.length == distribution.length, \\\"Input error\\\");\\n        require(newTokensInAsset.length > 0, \\\"Len error\\\");\\n        uint256 totalPerc;\\n        for (uint256 i = 0; i < newTokensInAsset.length; ++i) {\\n            require(newTokensInAsset[i] != address(0), \\\"Wrong token\\\");\\n            require(distribution[i] > 0, \\\"Zero distribution\\\");\\n            for (uint256 j = i + 1; j < newTokensInAsset.length; ++j) {\\n                require(newTokensInAsset[i] != newTokensInAsset[j], \\\"Input error\\\");\\n            }\\n            tokensDistribution[newTokensInAsset[i]] = distribution[i];\\n            totalPerc += distribution[i];\\n        }\\n        require(totalPerc == 1e4, \\\"Perc error\\\");\\n\\n        for (uint256 i = 0; i < oldTokens.length; ++i) {\\n            bool isFound = false;\\n            for (uint256 j = 0; j < newTokensInAsset.length && isFound == false; ++j) {\\n                if (newTokensInAsset[j] == oldTokens[i]) {\\n                    isFound = true;\\n                }\\n            }\\n\\n            if (isFound == false) {\\n                tokensDistribution[oldTokens[i]] = 0;\\n            }\\n        }\\n    }\\n\\n    function withdrawFromYForOwner(\\n        address[] memory tokensInAsset,\\n        uint256[] memory tokenAmounts,\\n        address sender,\\n        mapping(address => uint256) storage yVaultAmount,\\n        mapping(address => uint256) storage yVaultAmountInStaking\\n    ) external {\\n        require(tokenAmounts.length == tokensInAsset.length, \\\"Invalid input\\\");\\n        for (uint256 i = 0; i < tokensInAsset.length; ++i) {\\n            uint256 yAmount = yVaultAmount[tokensInAsset[i]];\\n            require(yAmount >= tokenAmounts[i], \\\"Not enough y balance\\\");\\n            yAmount -= tokenAmounts[i];\\n            yVaultAmount[tokensInAsset[i]] = yAmount;\\n            yVaultAmountInStaking[tokensInAsset[i]] += tokenAmounts[i];\\n\\n            safeTransfer(tokensInAsset[i], sender, tokenAmounts[i]);\\n        }\\n    }\\n\\n    function checkAndWriteWhitelist(\\n        address[] memory tokenWhitelist,\\n        address assetFactory,\\n        EnumerableSet.AddressSet storage tokenWhitelistSet\\n    ) external {\\n        checkIfTokensHavePair(tokenWhitelist, assetFactory);\\n        for (uint256 i = 0; i < tokenWhitelist.length; ++i) {\\n            require(tokenWhitelist[i] != address(0), \\\"No zero address\\\");\\n            for (uint256 j = 0; j < i; ++j) {\\n                require(tokenWhitelist[i] != tokenWhitelist[j], \\\"Whitelist error\\\");\\n            }\\n            EnumerableSet.add(tokenWhitelistSet, tokenWhitelist[i]);\\n        }\\n    }\\n\\n    function changeWhitelist(\\n        address token,\\n        bool value,\\n        address assetFactory,\\n        EnumerableSet.AddressSet storage set\\n    ) external {\\n        require(token != address(0), \\\"Token error\\\");\\n\\n        if (value) {\\n            address[] memory temp = new address[](1);\\n            temp[0] = token;\\n            checkIfTokensHavePair(temp, assetFactory);\\n            require(EnumerableSet.add(set, token), \\\"Wrong value\\\");\\n        } else {\\n            require(EnumerableSet.remove(set, token), \\\"Wrong value\\\");\\n        }\\n    }\\n\\n    function sellTokensInAssetNow(\\n        address[] memory tokensInAssetNow,\\n        uint256[][3] memory tokensInAssetNowInfo,\\n        address weth,\\n        address assetFactory,\\n        mapping(address => uint256) storage totalTokenAmount\\n    ) external returns (uint256 availableWeth) {\\n        for (uint256 i = 0; i < tokensInAssetNow.length; ++i) {\\n            {\\n                address temp = tokensInAssetNow[i];\\n                if (totalTokenAmount[temp] == 0) {\\n                    totalTokenAmount[temp] = tokensInAssetNowInfo[0][i];\\n                }\\n            }\\n\\n            if (tokensInAssetNowInfo[1][i] == 0) continue;\\n\\n            if (tokensInAssetNow[i] == address(0)) {\\n                IWETH(weth).deposit{value: tokensInAssetNowInfo[1][i]}();\\n                availableWeth += tokensInAssetNowInfo[1][i];\\n            } else if (tokensInAssetNow[i] == address(weth)) {\\n                availableWeth += tokensInAssetNowInfo[1][i];\\n            } else if (tokensInAssetNow[i] != address(weth)) {\\n                availableWeth += safeSwap(\\n                    [tokensInAssetNow[i], weth],\\n                    tokensInAssetNowInfo[1][i],\\n                    assetFactory,\\n                    0\\n                );\\n            }\\n            {\\n                address temp = tokensInAssetNow[i];\\n                totalTokenAmount[temp] -= tokensInAssetNowInfo[1][i];\\n            }\\n        }\\n    }\\n\\n    function buyTokensInAssetRebase(\\n        address[] memory tokensToBuy,\\n        uint256[][5] memory tokenToBuyInfo,\\n        uint256[2] memory tokenToBuyInfoGlobals,\\n        address weth,\\n        address assetFactory,\\n        uint256 availableWeth,\\n        mapping(address => uint256) storage totalTokenAmount\\n    ) external returns (uint256[] memory outputAmounts) {\\n        outputAmounts = new uint256[](tokensToBuy.length);\\n        if (tokenToBuyInfoGlobals[0] == 0 || availableWeth == 0) {\\n            return outputAmounts;\\n        }\\n        uint256 restWeth = availableWeth;\\n        for (uint256 i = 0; i < tokensToBuy.length && tokenToBuyInfoGlobals[1] > 0; ++i) {\\n            uint256 wethToSpend;\\n            // if actual weight to buy = 0\\n            if (tokenToBuyInfo[2][i] == 0) {\\n                continue;\\n            }\\n            if (tokenToBuyInfoGlobals[1] > 1) {\\n                wethToSpend = (availableWeth * tokenToBuyInfo[2][i]) / tokenToBuyInfoGlobals[0];\\n            } else {\\n                wethToSpend = restWeth;\\n            }\\n            require(wethToSpend > 0 && wethToSpend <= restWeth, \\\"Internal error\\\");\\n\\n            restWeth -= wethToSpend;\\n            --tokenToBuyInfoGlobals[1];\\n\\n            outputAmounts[i] = safeSwap([weth, tokensToBuy[i]], wethToSpend, assetFactory, 1);\\n\\n            {\\n                address temp = tokensToBuy[i];\\n                totalTokenAmount[temp] += outputAmounts[i];\\n            }\\n        }\\n\\n        require(restWeth == 0, \\\"Internal error\\\");\\n\\n        return outputAmounts;\\n    }\\n\\n    function transferTokenAndSwapToWeth(\\n        address tokenToPay,\\n        uint256 amount,\\n        address sender,\\n        address weth,\\n        address assetFactory\\n    ) external returns (address, uint256) {\\n        tokenToPay = transferFromToGoodToken(tokenToPay, sender, amount, weth);\\n        uint256 totalWeth;\\n        if (tokenToPay == weth) {\\n            totalWeth = amount;\\n        } else {\\n            totalWeth = safeSwap([tokenToPay, weth], amount, assetFactory, 0);\\n        }\\n\\n        return (tokenToPay, totalWeth);\\n    }\\n\\n    function transferFromToGoodToken(\\n        address token,\\n        address user,\\n        uint256 amount,\\n        address weth\\n    ) public returns (address) {\\n        if (token == address(0)) {\\n            require(msg.value == amount, \\\"Value error\\\");\\n            token = weth;\\n            IWETH(weth).deposit{value: amount}();\\n        } else {\\n            require(msg.value == 0, \\\"Value error\\\");\\n            AssetLib.safeTransferFrom(token, user, amount);\\n        }\\n        return token;\\n    }\\n\\n    function checkCurrency(\\n        address currency,\\n        address weth,\\n        EnumerableSet.AddressSet storage tokenWhitelistSet\\n    ) external view {\\n        address currencyToCheck;\\n        if (currency == address(0)) {\\n            currencyToCheck = weth;\\n        } else {\\n            currencyToCheck = currency;\\n        }\\n        require(EnumerableSet.contains(tokenWhitelistSet, currencyToCheck), \\\"Not allowed currency\\\");\\n    }\\n\\n    function buyTokensMint(\\n        uint256 totalWeth,\\n        address[] memory tokensInAsset,\\n        address[2] memory wethAndAssetFactory,\\n        mapping(address => uint256) storage tokensDistribution,\\n        mapping(address => uint256) storage totalTokenAmount\\n    ) external returns (uint256[] memory buyAmounts, uint256[] memory oldDistribution) {\\n        buyAmounts = new uint256[](tokensInAsset.length);\\n        oldDistribution = new uint256[](tokensInAsset.length);\\n        uint256 restWeth = totalWeth;\\n        for (uint256 i = 0; i < tokensInAsset.length; ++i) {\\n            uint256 wethToThisToken;\\n            if (i < tokensInAsset.length - 1) {\\n                wethToThisToken = (totalWeth * tokensDistribution[tokensInAsset[i]]) / 1e4;\\n            } else {\\n                wethToThisToken = restWeth;\\n            }\\n            require(wethToThisToken > 0 && wethToThisToken <= restWeth, \\\"Internal error\\\");\\n\\n            restWeth -= wethToThisToken;\\n\\n            oldDistribution[i] = totalTokenAmount[tokensInAsset[i]];\\n\\n            buyAmounts[i] = safeSwap(\\n                [wethAndAssetFactory[0], tokensInAsset[i]],\\n                wethToThisToken,\\n                wethAndAssetFactory[1],\\n                1\\n            );\\n\\n            totalTokenAmount[tokensInAsset[i]] = oldDistribution[i] + buyAmounts[i];\\n        }\\n    }\\n\\n    function getMintAmount(\\n        address[] memory tokensInAsset,\\n        uint256[] memory buyAmounts,\\n        uint256[] memory oldDistribution,\\n        uint256 totalSupply,\\n        uint256 decimals,\\n        IOracle oracle,\\n        uint256 initialPrice\\n    ) public view returns (uint256 mintAmount) {\\n        uint256 totalPriceInAsset;\\n        uint256 totalPriceUser;\\n        (bool[] memory isValidValue, uint256[] memory tokensPrices) = oracle.getData(tokensInAsset);\\n        for (uint256 i = 0; i < tokensInAsset.length; ++i) {\\n            require(isValidValue[i] == true, \\\"Oracle error\\\");\\n            uint256 decimalsToken = IERC20Metadata(tokensInAsset[i]).decimals();\\n            totalPriceInAsset += (oldDistribution[i] * tokensPrices[i]) / (10**decimalsToken);\\n            totalPriceUser += (buyAmounts[i] * tokensPrices[i]) / (10**decimalsToken);\\n        }\\n\\n        if (totalPriceInAsset == 0 || totalSupply == 0) {\\n            return (totalPriceUser * 10**decimals) / initialPrice;\\n        } else {\\n            return (totalSupply * totalPriceUser) / totalPriceInAsset;\\n        }\\n    }\\n\\n    function safeSwap(\\n        address[2] memory path,\\n        uint256 amount,\\n        address assetFactory,\\n        uint256 forWhatTokenDex\\n    ) public returns (uint256) {\\n        if (path[0] == path[1]) {\\n            return amount;\\n        }\\n\\n        address dexRouter = getTokenDexRouter(assetFactory, path[forWhatTokenDex]);\\n        checkAllowance(path[0], dexRouter, amount);\\n\\n        address[] memory _path = new address[](2);\\n        _path[0] = path[0];\\n        _path[1] = path[1];\\n        uint256[] memory amounts =\\n            IPancakeRouter02(dexRouter).swapExactTokensForTokens(\\n                amount,\\n                0,\\n                _path,\\n                address(this),\\n                // solhint-disable-next-line not-rely-on-time\\n                block.timestamp\\n            );\\n\\n        return amounts[1];\\n    }\\n\\n    function redeemAndTransfer(\\n        uint256[2] memory amountAndTotalSupply,\\n        address[4] memory userCurrencyToPayWethFactory,\\n        mapping(address => uint256) storage totalTokenAmount,\\n        address[] memory tokensInAsset,\\n        uint256[] memory feePercentages\\n    )\\n        public\\n        returns (\\n            uint256 feeTotal,\\n            uint256[] memory inputAmounts,\\n            uint256 outputAmountTotal\\n        )\\n    {\\n        inputAmounts = new uint256[](tokensInAsset.length);\\n        for (uint256 i = 0; i < tokensInAsset.length; ++i) {\\n            inputAmounts[i] =\\n                (totalTokenAmount[tokensInAsset[i]] * amountAndTotalSupply[0]) /\\n                amountAndTotalSupply[1];\\n\\n            uint256 outputAmount =\\n                swapToCurrency(\\n                    tokensInAsset[i],\\n                    userCurrencyToPayWethFactory[1],\\n                    inputAmounts[i],\\n                    [userCurrencyToPayWethFactory[2], userCurrencyToPayWethFactory[3]]\\n                );\\n\\n            uint256 fee = (outputAmount * feePercentages[i]) / 1e4;\\n            outputAmountTotal += outputAmount - fee;\\n            feeTotal += fee;\\n\\n            totalTokenAmount[tokensInAsset[i]] -= inputAmounts[i];\\n        }\\n\\n        if (userCurrencyToPayWethFactory[1] == address(0)) {\\n            IWETH(userCurrencyToPayWethFactory[2]).withdraw(outputAmountTotal);\\n            safeTransfer(address(0), userCurrencyToPayWethFactory[0], outputAmountTotal);\\n        } else {\\n            safeTransfer(\\n                userCurrencyToPayWethFactory[1],\\n                userCurrencyToPayWethFactory[0],\\n                outputAmountTotal\\n            );\\n        }\\n    }\\n\\n    function initTokenInfoFromWhitelist(\\n        address[] memory tokensWhitelist,\\n        mapping(address => uint256) storage tokenEntersIme\\n    ) external view returns (uint256[][3] memory tokensIncomeAmounts) {\\n        tokensIncomeAmounts[0] = new uint256[](tokensWhitelist.length);\\n        tokensIncomeAmounts[1] = new uint256[](tokensWhitelist.length);\\n        tokensIncomeAmounts[2] = new uint256[](tokensWhitelist.length);\\n        for (uint256 i = 0; i < tokensWhitelist.length; ++i) {\\n            tokensIncomeAmounts[0][i] = tokenEntersIme[tokensWhitelist[i]];\\n            tokensIncomeAmounts[2][i] = IERC20Metadata(tokensWhitelist[i]).decimals();\\n        }\\n    }\\n\\n    function calculateXYAfterIme(\\n        address[] memory tokensInAsset,\\n        mapping(address => uint256) storage totalTokenAmount,\\n        mapping(address => uint256) storage xVaultAmount,\\n        mapping(address => uint256) storage yVaultAmount\\n    ) external {\\n        for (uint256 i = 0; i < tokensInAsset.length; ++i) {\\n            uint256 amountTotal = totalTokenAmount[tokensInAsset[i]];\\n            uint256 amountToX = (amountTotal * 2000) / 1e4;\\n\\n            xVaultAmount[tokensInAsset[i]] = amountToX;\\n            yVaultAmount[tokensInAsset[i]] = amountTotal - amountToX;\\n        }\\n    }\\n\\n    function depositToY(\\n        address[] memory tokensInAsset,\\n        uint256[] memory tokenAmountsOfY,\\n        address sender,\\n        address assetFactory,\\n        address weth,\\n        mapping(address => uint256) storage yVaultAmountInStaking,\\n        mapping(address => uint256) storage yVaultAmount\\n    ) external {\\n        require(tokensInAsset.length == tokenAmountsOfY.length, \\\"Input error 1\\\");\\n\\n        for (uint256 i = 0; i < tokensInAsset.length; ++i) {\\n            uint256 amountInStaking = yVaultAmountInStaking[tokensInAsset[i]];\\n            require(amountInStaking >= tokenAmountsOfY[i], \\\"Trying to send more\\\");\\n            amountInStaking -= tokenAmountsOfY[i];\\n            yVaultAmountInStaking[tokensInAsset[i]] = amountInStaking;\\n            yVaultAmount[tokensInAsset[i]] += tokenAmountsOfY[i];\\n\\n            safeTransferFrom(tokensInAsset[i], sender, tokenAmountsOfY[i]);\\n        }\\n    }\\n\\n    function proceedIme(\\n        address[] memory tokens,\\n        IOracle oracle,\\n        mapping(address => uint256) storage tokenEntersIme\\n    ) external view returns (uint256, uint256[] memory) {\\n        (bool[] memory isValidValue, uint256[] memory tokensPrices) = oracle.getData(tokens);\\n\\n        uint256 totalWeight;\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            require(isValidValue[i] == true, \\\"Not valid oracle values\\\");\\n            uint256 decimals_ = IERC20Metadata(tokens[i]).decimals();\\n            totalWeight += (tokenEntersIme[tokens[i]] * tokensPrices[i]) / (10**decimals_);\\n        }\\n\\n        return (totalWeight, tokensPrices);\\n    }\\n\\n    function getFeePercentagesRedeem(\\n        address[] memory tokensInAsset,\\n        mapping(address => uint256) storage totalTokenAmount,\\n        mapping(address => uint256) storage xVaultAmount\\n    ) external view returns (uint256[] memory feePercentages) {\\n        feePercentages = new uint256[](tokensInAsset.length);\\n\\n        for (uint256 i = 0; i < tokensInAsset.length; ++i) {\\n            uint256 totalAmount = totalTokenAmount[tokensInAsset[i]];\\n            uint256 xAmount = xVaultAmount[tokensInAsset[i]];\\n\\n            if (xAmount >= (1500 * totalAmount) / 1e4) {\\n                feePercentages[i] = 200;\\n            } else if (\\n                xAmount < (1500 * totalAmount) / 1e4 && xAmount >= (500 * totalAmount) / 1e4\\n            ) {\\n                uint256 xAmountPertcentage = (xAmount * 1e4) / totalAmount;\\n                feePercentages[i] = 600 - (400 * (xAmountPertcentage - 500)) / 1000;\\n            } else {\\n                revert(\\\"xAmount percentage error\\\");\\n            }\\n        }\\n    }\\n\\n    function swapToCurrency(\\n        address inputCurrency,\\n        address outputCurrency,\\n        uint256 amount,\\n        address[2] memory wethAndAssetFactory\\n    ) internal returns (uint256) {\\n        require(inputCurrency != address(0), \\\"Internal error\\\");\\n        if (inputCurrency != outputCurrency) {\\n            uint256 outputAmount;\\n            if (outputCurrency == wethAndAssetFactory[0] || outputCurrency == address(0)) {\\n                outputAmount = safeSwap(\\n                    [inputCurrency, wethAndAssetFactory[0]],\\n                    amount,\\n                    wethAndAssetFactory[1],\\n                    0\\n                );\\n            } else {\\n                outputAmount = safeSwap(\\n                    [inputCurrency, wethAndAssetFactory[0]],\\n                    amount,\\n                    wethAndAssetFactory[1],\\n                    0\\n                );\\n                outputAmount = safeSwap(\\n                    [wethAndAssetFactory[0], outputCurrency],\\n                    outputAmount,\\n                    wethAndAssetFactory[1],\\n                    1\\n                );\\n            }\\n            return outputAmount;\\n        } else {\\n            return amount;\\n        }\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        uint256 amount\\n    ) internal {\\n        if (token == address(0)) {\\n            require(msg.value == amount, \\\"Value error\\\");\\n        } else {\\n            require(IERC20(token).transferFrom(from, address(this), amount), \\\"TransferFrom failed\\\");\\n        }\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) public {\\n        if (to == address(this)) {\\n            return;\\n        }\\n        if (token == address(0)) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, ) = to.call{value: amount}(new bytes(0));\\n            require(success, \\\"Transfer eth failed\\\");\\n        } else {\\n            require(IERC20(token).transfer(to, amount), \\\"Transfer token failed\\\");\\n        }\\n    }\\n\\n    function checkAllowance(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) public {\\n        uint256 allowance = IERC20(token).allowance(address(this), to);\\n\\n        if (amount > allowance) {\\n            IERC20(token).approve(to, type(uint256).max);\\n        }\\n    }\\n\\n    function getWethFromDex(address dexRouter) public view returns (address) {\\n        try IPancakeRouter02(dexRouter).WETH() returns (address weth) {\\n            return weth;\\n        } catch (bytes memory) {} // solhint-disable-line no-empty-blocks\\n\\n        try IPangolinRouter02(dexRouter).WAVAX() returns (address weth) {\\n            return weth;\\n        } catch (bytes memory) {} // solhint-disable-line no-empty-blocks\\n\\n        try IPancakeRouter02BNB(dexRouter).WBNB() returns (address weth) {\\n            return weth;\\n        } catch (bytes memory) {\\n            return address(0);\\n        }\\n    }\\n\\n    function getTokenDexRouter(address factory, address token) public view returns (address) {\\n        address customDexRouter = IAssetFactory(factory).notDefaultDexRouterToken(token);\\n\\n        if (customDexRouter != address(0)) {\\n            return customDexRouter;\\n        } else {\\n            return IAssetFactory(factory).defaultDexRouter();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/AssetLib2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"../pancake-swap/interfaces/IPancakeRouter02.sol\\\";\\nimport \\\"../pancake-swap/interfaces/IPangolinRouter02.sol\\\";\\nimport \\\"../pancake-swap/interfaces/IPancakeRouter02BNB.sol\\\";\\nimport \\\"../pancake-swap/interfaces/IWETH.sol\\\";\\n\\nimport \\\"../interfaces/IOracle.sol\\\";\\n\\nimport \\\"./AssetLib.sol\\\";\\n\\nlibrary AssetLib2 {\\n    function calculateBuyAmountOut(\\n        uint256 amount,\\n        address currencyIn,\\n        address[] memory tokensInAsset,\\n        address[3] memory wethAssetFactoryAndOracle,\\n        uint256[3] memory totalSupplyDecimalsAndInitialPrice,\\n        mapping(address => uint256) storage tokensDistribution,\\n        mapping(address => uint256) storage totalTokenAmount\\n    ) external view returns (uint256) {\\n        if (amount == 0) {\\n            return 0;\\n        }\\n        address[] memory path = new address[](2);\\n        if (currencyIn == address(0)) {\\n            currencyIn = wethAssetFactoryAndOracle[0];\\n        }\\n        if (currencyIn != wethAssetFactoryAndOracle[0]) {\\n            path[0] = currencyIn;\\n            path[1] = wethAssetFactoryAndOracle[0];\\n            address dexRouter =\\n                AssetLib.getTokenDexRouter(wethAssetFactoryAndOracle[1], currencyIn);\\n            try IPancakeRouter02(dexRouter).getAmountsOut(amount, path) returns (\\n                uint256[] memory amounts\\n            ) {\\n                amount = amounts[1];\\n            } catch (bytes memory) {\\n                amount = 0;\\n            }\\n        }\\n        if (amount == 0) {\\n            return 0;\\n        }\\n        amount -= (amount * 50) / 1e4;\\n        uint256 restAmount = amount;\\n        uint256[][2] memory buyAmountsAndDistribution;\\n        buyAmountsAndDistribution[0] = new uint256[](tokensInAsset.length);\\n        buyAmountsAndDistribution[1] = new uint256[](tokensInAsset.length);\\n        for (uint256 i = 0; i < tokensInAsset.length; ++i) {\\n            uint256 wethToThisToken;\\n            buyAmountsAndDistribution[1][i] = totalTokenAmount[tokensInAsset[i]];\\n            if (i < tokensInAsset.length - 1) {\\n                wethToThisToken = (amount * tokensDistribution[tokensInAsset[i]]) / 1e4;\\n            } else {\\n                wethToThisToken = restAmount;\\n            }\\n            restAmount -= wethToThisToken;\\n\\n            if (tokensInAsset[i] != wethAssetFactoryAndOracle[0]) {\\n                path[0] = wethAssetFactoryAndOracle[0];\\n                path[1] = tokensInAsset[i];\\n                address dexRouter =\\n                    AssetLib.getTokenDexRouter(wethAssetFactoryAndOracle[1], tokensInAsset[i]);\\n                try IPancakeRouter02(dexRouter).getAmountsOut(wethToThisToken, path) returns (\\n                    uint256[] memory amounts\\n                ) {\\n                    buyAmountsAndDistribution[0][i] = amounts[1];\\n                } catch (bytes memory) {\\n                    buyAmountsAndDistribution[0][i] = 0;\\n                }\\n            } else {\\n                buyAmountsAndDistribution[0][i] = wethToThisToken;\\n            }\\n        }\\n\\n        return\\n            AssetLib.getMintAmount(\\n                tokensInAsset,\\n                buyAmountsAndDistribution[0],\\n                buyAmountsAndDistribution[1],\\n                totalSupplyDecimalsAndInitialPrice[0],\\n                totalSupplyDecimalsAndInitialPrice[1],\\n                IOracle(wethAssetFactoryAndOracle[2]),\\n                totalSupplyDecimalsAndInitialPrice[2]\\n            );\\n    }\\n\\n    function calculateSellAmountOut(\\n        uint256[2] memory amountAndTotalSupply,\\n        address currencyToPay,\\n        address[] memory tokensInAsset,\\n        address[2] memory wethAndAssetFactory,\\n        mapping(address => uint256) storage totalTokenAmount,\\n        mapping(address => uint256) storage xVaultAmount\\n    ) external view returns (uint256) {\\n        if (amountAndTotalSupply[0] == 0 || amountAndTotalSupply[1] == 0) {\\n            return 0;\\n        }\\n        if (currencyToPay == address(0)) {\\n            currencyToPay = wethAndAssetFactory[0];\\n        }\\n        uint256[] memory feePercentages =\\n            AssetLib.getFeePercentagesRedeem(tokensInAsset, totalTokenAmount, xVaultAmount);\\n\\n        address[] memory path = new address[](2);\\n        uint256 outputAmountTotal;\\n        for (uint256 i = 0; i < tokensInAsset.length; ++i) {\\n            uint256 inputAmount =\\n                (totalTokenAmount[tokensInAsset[i]] * amountAndTotalSupply[0]) /\\n                    amountAndTotalSupply[1];\\n\\n            if (inputAmount == 0) {\\n                continue;\\n            }\\n\\n            uint256 outputAmount;\\n            if (tokensInAsset[i] != currencyToPay) {\\n                if (\\n                    currencyToPay == wethAndAssetFactory[0] ||\\n                    tokensInAsset[i] == wethAndAssetFactory[0]\\n                ) {\\n                    address dexRouter;\\n                    if (tokensInAsset[i] != wethAndAssetFactory[0]) {\\n                        dexRouter = AssetLib.getTokenDexRouter(\\n                            wethAndAssetFactory[1],\\n                            tokensInAsset[i]\\n                        );\\n                    } else {\\n                        dexRouter = AssetLib.getTokenDexRouter(\\n                            wethAndAssetFactory[1],\\n                            currencyToPay\\n                        );\\n                    }\\n                    path[0] = tokensInAsset[i];\\n                    path[1] = currencyToPay;\\n                    try IPancakeRouter02(dexRouter).getAmountsOut(inputAmount, path) returns (\\n                        uint256[] memory amounts\\n                    ) {\\n                        outputAmount = amounts[1];\\n                    } catch (bytes memory) {\\n                        outputAmount = 0;\\n                    }\\n                } else {\\n                    address dexRouter =\\n                        AssetLib.getTokenDexRouter(wethAndAssetFactory[1], tokensInAsset[i]);\\n                    path[0] = tokensInAsset[i];\\n                    path[1] = wethAndAssetFactory[0];\\n                    try IPancakeRouter02(dexRouter).getAmountsOut(inputAmount, path) returns (\\n                        uint256[] memory amounts\\n                    ) {\\n                        outputAmount = amounts[1];\\n                    } catch (bytes memory) {\\n                        outputAmount = 0;\\n                        continue;\\n                    }\\n\\n                    dexRouter = AssetLib.getTokenDexRouter(wethAndAssetFactory[1], currencyToPay);\\n                    path[0] = wethAndAssetFactory[0];\\n                    path[1] = currencyToPay;\\n                    try IPancakeRouter02(dexRouter).getAmountsOut(outputAmount, path) returns (\\n                        uint256[] memory amounts\\n                    ) {\\n                        outputAmount = amounts[1];\\n                    } catch (bytes memory) {\\n                        outputAmount = 0;\\n                    }\\n                }\\n            } else {\\n                outputAmount = inputAmount;\\n            }\\n\\n            uint256 fee = (outputAmount * feePercentages[i]) / 1e4;\\n            outputAmountTotal += outputAmount - fee;\\n        }\\n\\n        return outputAmountTotal;\\n    }\\n\\n    function xyDistributionAfterMint(\\n        address[] memory tokensInAsset,\\n        uint256[] memory buyAmounts,\\n        uint256[] memory oldDistribution,\\n        mapping(address => uint256) storage xVaultAmount,\\n        mapping(address => uint256) storage yVaultAmount\\n    ) external {\\n        for (uint256 i = 0; i < tokensInAsset.length; ++i) {\\n            uint256 totalAmount = buyAmounts[i] + oldDistribution[i];\\n            uint256 maxAmountInX = (totalAmount * 2000) / 1e4;\\n\\n            uint256 amountInXOld = xVaultAmount[tokensInAsset[i]];\\n            uint256 restAmountToDistribute = buyAmounts[i];\\n            if (amountInXOld < maxAmountInX) {\\n                amountInXOld += restAmountToDistribute;\\n                if (amountInXOld > maxAmountInX) {\\n                    uint256 delta = amountInXOld - maxAmountInX;\\n                    amountInXOld = maxAmountInX;\\n                    restAmountToDistribute = delta;\\n                } else {\\n                    restAmountToDistribute = 0;\\n                }\\n            }\\n\\n            if (restAmountToDistribute > 0) {\\n                yVaultAmount[tokensInAsset[i]] += restAmountToDistribute;\\n            }\\n\\n            xVaultAmount[tokensInAsset[i]] = amountInXOld;\\n        }\\n    }\\n\\n    function xyDistributionAfterRedeem(\\n        mapping(address => uint256) storage totalTokenAmount,\\n        bool isAllowedAutoXYRebalace,\\n        mapping(address => uint256) storage xVaultAmount,\\n        mapping(address => uint256) storage yVaultAmount,\\n        address[] memory tokensInAsset,\\n        uint256[] memory sellAmounts\\n    ) public {\\n        for (uint256 i = 0; i < tokensInAsset.length; ++i) {\\n            uint256 totalAmount = totalTokenAmount[tokensInAsset[i]];\\n            uint256 xStopAmount = (totalAmount * 500) / 1e4;\\n            uint256 xAmountMax = (totalAmount * 2000) / 1e4;\\n\\n            uint256 xAmount = xVaultAmount[tokensInAsset[i]];\\n            if (isAllowedAutoXYRebalace == true) {\\n                uint256 yAmount = yVaultAmount[tokensInAsset[i]];\\n                require(\\n                    xAmount + yAmount >= sellAmounts[i] &&\\n                        xAmount + yAmount - sellAmounts[i] >= xStopAmount,\\n                    \\\"Not enough XY\\\"\\n                );\\n                if (xAmount >= sellAmounts[i] && xAmount - sellAmounts[i] >= xStopAmount) {\\n                    xAmount -= sellAmounts[i];\\n                } else {\\n                    xAmount += yAmount;\\n                    xAmount -= sellAmounts[i];\\n                    if (xAmount > xAmountMax) {\\n                        uint256 delta = xAmount - xAmountMax;\\n                        yAmount = delta;\\n                        xAmount = xAmountMax;\\n\\n                        yVaultAmount[tokensInAsset[i]] = yAmount;\\n                    }\\n                }\\n            } else {\\n                require(\\n                    xAmount >= sellAmounts[i] && xAmount - sellAmounts[i] >= xStopAmount,\\n                    \\\"Not enough X\\\"\\n                );\\n                xAmount -= sellAmounts[i];\\n            }\\n            xVaultAmount[tokensInAsset[i]] = xAmount;\\n        }\\n    }\\n\\n    function xyDistributionAfterRebase(\\n        address[] memory tokensInAssetNow,\\n        uint256[] memory tokensInAssetNowSellAmounts,\\n        address[] memory tokensToBuy,\\n        uint256[] memory tokenToBuyAmounts,\\n        mapping(address => uint256) storage xVaultAmount,\\n        mapping(address => uint256) storage yVaultAmount,\\n        mapping(address => uint256) storage totalTokenAmount\\n    ) external {\\n        for (uint256 i = 0; i < tokensInAssetNow.length; ++i) {\\n            uint256 xAmount = xVaultAmount[tokensInAssetNow[i]];\\n            uint256 yAmount = yVaultAmount[tokensInAssetNow[i]];\\n\\n            require(\\n                xAmount + yAmount >= tokensInAssetNowSellAmounts[i],\\n                \\\"Not enought value in asset\\\"\\n            );\\n            if (tokensInAssetNowSellAmounts[i] > yAmount) {\\n                xAmount -= tokensInAssetNowSellAmounts[i] - yAmount;\\n                yAmount = 0;\\n                xVaultAmount[tokensInAssetNow[i]] = xAmount;\\n                yVaultAmount[tokensInAssetNow[i]] = yAmount;\\n            } else {\\n                yAmount -= tokensInAssetNowSellAmounts[i];\\n                yVaultAmount[tokensInAssetNow[i]] = yAmount;\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < tokensToBuy.length; ++i) {\\n            uint256 xAmount = xVaultAmount[tokensToBuy[i]];\\n            uint256 yAmount = yVaultAmount[tokensToBuy[i]];\\n            uint256 xMaxAmount = (totalTokenAmount[tokensToBuy[i]] * 2000) / 1e4;\\n\\n            xAmount += tokenToBuyAmounts[i];\\n            if (xAmount > xMaxAmount) {\\n                yAmount += xAmount - xMaxAmount;\\n                xAmount = xMaxAmount;\\n                xVaultAmount[tokensToBuy[i]] = xAmount;\\n                yVaultAmount[tokensToBuy[i]] = yAmount;\\n            } else {\\n                xVaultAmount[tokensToBuy[i]] = xAmount;\\n            }\\n        }\\n    }\\n\\n    function xyRebalance(\\n        uint256 xPercentage,\\n        address[] memory tokensInAsset,\\n        mapping(address => uint256) storage xVaultAmount,\\n        mapping(address => uint256) storage yVaultAmount,\\n        mapping(address => uint256) storage totalTokenAmount\\n    ) external {\\n        for (uint256 i = 0; i < tokensInAsset.length; ++i) {\\n            uint256 totalAmount = totalTokenAmount[tokensInAsset[i]];\\n            uint256 xAmount = xVaultAmount[tokensInAsset[i]];\\n            uint256 yAmount = yVaultAmount[tokensInAsset[i]];\\n            uint256 xAmountDesired = (totalAmount * xPercentage) / 1e4;\\n\\n            if (xAmount > xAmountDesired) {\\n                yAmount += xAmount - xAmountDesired;\\n                xAmount = xAmountDesired;\\n                xVaultAmount[tokensInAsset[i]] = xAmount;\\n                yVaultAmount[tokensInAsset[i]] = yAmount;\\n            } else if (xAmount < xAmountDesired) {\\n                uint256 delta = xAmountDesired - xAmount;\\n                require(yAmount >= delta, \\\"Not enough value in Y\\\");\\n                xAmount += delta;\\n                yAmount -= delta;\\n            } else {\\n                continue;\\n            }\\n            xVaultAmount[tokensInAsset[i]] = xAmount;\\n            yVaultAmount[tokensInAsset[i]] = yAmount;\\n        }\\n    }\\n\\n    function swapTokensDex(\\n        address dexRouter,\\n        address[] memory path,\\n        uint256 amount\\n    ) external returns (uint256, bool) {\\n        try\\n            IPancakeRouter02(dexRouter).swapExactTokensForETH(\\n                amount,\\n                0,\\n                path,\\n                address(this),\\n                // solhint-disable-next-line not-rely-on-time\\n                block.timestamp\\n            )\\n        returns (uint256[] memory amounts) {\\n            return (amounts[1], true);\\n        } catch (bytes memory) {} // solhint-disable-line no-empty-blocks\\n\\n        try\\n            IPangolinRouter02(dexRouter).swapExactTokensForAVAX(\\n                amount,\\n                0,\\n                path,\\n                address(this),\\n                // solhint-disable-next-line not-rely-on-time\\n                block.timestamp\\n            )\\n        returns (uint256[] memory amounts) {\\n            return (amounts[1], true);\\n        } catch (bytes memory) {} // solhint-disable-line no-empty-blocks\\n\\n        try\\n            IPancakeRouter02BNB(dexRouter).swapExactTokensForBNB(\\n                amount,\\n                0,\\n                path,\\n                address(this),\\n                // solhint-disable-next-line not-rely-on-time\\n                block.timestamp\\n            )\\n        returns (uint256[] memory amounts) {\\n            return (amounts[1], true);\\n        } catch (bytes memory) {\\n            return (0, false);\\n        }\\n    }\\n\\n    function addLiquidityETH(\\n        address dexRouter,\\n        address token,\\n        uint256 amount\\n    )\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        AssetLib.checkAllowance(token, dexRouter, amount);\\n        try\\n            IPancakeRouter02(dexRouter).addLiquidityETH(\\n                token,\\n                amount,\\n                0,\\n                0,\\n                address(this),\\n                // solhint-disable-next-line not-rely-on-time\\n                block.timestamp\\n            )\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity) {\\n            return (amountToken, amountETH, liquidity);\\n        } catch (bytes memory) {} // solhint-disable-line no-empty-blocks\\n\\n        try\\n            IPangolinRouter02(dexRouter).addLiquidityAVAX(\\n                token,\\n                amount,\\n                0,\\n                0,\\n                address(this),\\n                // solhint-disable-next-line not-rely-on-time\\n                block.timestamp\\n            )\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity) {\\n            return (amountToken, amountETH, liquidity);\\n        } catch (bytes memory) {} // solhint-disable-line no-empty-blocks\\n\\n        try\\n            IPancakeRouter02BNB(dexRouter).addLiquidityBNB(\\n                token,\\n                amount,\\n                0,\\n                0,\\n                address(this),\\n                // solhint-disable-next-line not-rely-on-time\\n                block.timestamp\\n            )\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity) {\\n            return (amountToken, amountETH, liquidity);\\n        } catch Error(string memory reason) {\\n            revert(reason);\\n        }\\n        /* catch (bytes memory) {\\n            revert(\\\"Wriong dex router\\\");\\n        } */\\n    }\\n\\n    function removeLiquidityBNB(\\n        address dexRouter,\\n        address token,\\n        address goodToken,\\n        uint256 amount\\n    )\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        AssetLib.checkAllowance(token, dexRouter, amount);\\n        try\\n            IPancakeRouter02(dexRouter).removeLiquidityETH(\\n                goodToken,\\n                amount,\\n                0,\\n                0,\\n                address(this),\\n                // solhint-disable-next-line not-rely-on-time\\n                block.timestamp\\n            )\\n        returns (uint256 amountToken, uint256 amountETH) {\\n            return (amountToken, amountETH, true);\\n        } catch Error(string memory reason) {\\n            if (compareStrings(reason, string(\\\"revert\\\")) == 0) {\\n                return (0, 0, false);\\n            }\\n        }\\n\\n        try\\n            IPangolinRouter02(dexRouter).removeLiquidityAVAX(\\n                goodToken,\\n                amount,\\n                0,\\n                0,\\n                address(this),\\n                // solhint-disable-next-line not-rely-on-time\\n                block.timestamp\\n            )\\n        returns (uint256 amountToken, uint256 amountETH) {\\n            return (amountToken, amountETH, true);\\n        } catch Error(string memory reason) {\\n            if (compareStrings(reason, string(\\\"revert\\\")) == 0) {\\n                return (0, 0, false);\\n            }\\n        }\\n\\n        try\\n            IPancakeRouter02BNB(dexRouter).removeLiquidityBNB(\\n                goodToken,\\n                amount,\\n                0,\\n                0,\\n                address(this),\\n                // solhint-disable-next-line not-rely-on-time\\n                block.timestamp\\n            )\\n        returns (uint256 amountToken, uint256 amountETH) {\\n            return (amountToken, amountETH, true);\\n        } catch (bytes memory) {\\n            return (0, 0, false);\\n        }\\n        /* catch (bytes memory) {\\n            revert(\\\"Wriong dex router\\\");\\n        } */\\n    }\\n\\n    function compareStrings(string memory _a, string memory _b) internal pure returns (int256) {\\n        bytes memory a = bytes(_a);\\n        bytes memory b = bytes(_b);\\n        uint256 minLength = a.length;\\n        if (b.length < minLength) minLength = b.length;\\n        //@todo unroll the loop into increments of 32 and do full 32 byte comparisons\\n        for (uint256 i = 0; i < minLength; i++)\\n            if (a[i] < b[i]) return -1;\\n            else if (a[i] > b[i]) return 1;\\n        if (a.length < b.length) return -1;\\n        else if (a.length > b.length) return 1;\\n        else return 0;\\n    }\\n\\n    function fillInformationInSellAndBuyTokens(\\n        address[] memory tokensInAssetNow,\\n        uint256[][3] memory tokensInAssetNowInfo,\\n        address[] memory tokensToBuy,\\n        uint256[][5] memory tokenToBuyInfo,\\n        uint256[] memory tokensPrices\\n    )\\n        external\\n        pure\\n        returns (\\n            uint256[][3] memory,\\n            uint256[][5] memory,\\n            uint256[2] memory\\n        )\\n    {\\n        for (uint256 i = 0; i < tokensInAssetNow.length; ++i) {\\n            bool isFound = false;\\n            for (uint256 j = 0; j < tokensToBuy.length && isFound == false; ++j) {\\n                if (tokensInAssetNow[i] == tokensToBuy[j]) {\\n                    isFound = true;\\n                    // mark that we found that token in asset already\\n                    tokenToBuyInfo[4][j] = 1;\\n\\n                    if (tokenToBuyInfo[0][j] >= tokensInAssetNowInfo[0][i]) {\\n                        // if need to buy more than asset already have\\n\\n                        // amount to sell = 0 (already 0)\\n                        //tokensInAssetNowInfo[1][i] = 0;\\n\\n                        // actual amount to buy = (total amount to buy) - (amount in asset already)\\n                        tokenToBuyInfo[1][j] = tokenToBuyInfo[0][j] - tokensInAssetNowInfo[0][i];\\n                    } else {\\n                        // if need to buy less than asset already have\\n\\n                        // amount to sell = (amount in asset already) - (total amount to buy)\\n                        tokensInAssetNowInfo[1][i] =\\n                            tokensInAssetNowInfo[0][i] -\\n                            tokenToBuyInfo[0][j];\\n\\n                        // actual amount to buy = 0 (already 0)\\n                        //tokenToBuyInfo[1][j] = 0;\\n                    }\\n                }\\n            }\\n\\n            // if we don't find token in _tokensToBuy than we need to sell it all\\n            if (isFound == false) {\\n                tokensInAssetNowInfo[1][i] = tokensInAssetNowInfo[0][i];\\n            }\\n        }\\n\\n        // tokenToBuyInfoGlobals info\\n        // 0 - total weight to buy\\n        // 1 - number of true tokens to buy\\n        uint256[2] memory tokenToBuyInfoGlobals;\\n        for (uint256 i = 0; i < tokensToBuy.length; ++i) {\\n            if (tokenToBuyInfo[4][i] == 0) {\\n                // if no found in asset yet\\n\\n                // actual weight to buy = (amount to buy) * (token price) / decimals\\n                tokenToBuyInfo[2][i] =\\n                    (tokenToBuyInfo[0][i] * tokensPrices[i]) /\\n                    (10**tokenToBuyInfo[3][i]);\\n            } else if (tokenToBuyInfo[1][i] != 0) {\\n                // if found in asset and amount to buy != 0\\n\\n                // actual weight to buy = (actual amount to buy) * (token price) / decimals\\n                tokenToBuyInfo[2][i] =\\n                    (tokenToBuyInfo[1][i] * tokensPrices[i]) /\\n                    (10**tokenToBuyInfo[3][i]);\\n            } else {\\n                // if found in asset and amount to buy = 0\\n                continue;\\n            }\\n            // increase total weight\\n            tokenToBuyInfoGlobals[0] += tokenToBuyInfo[2][i];\\n            // increase number of true tokens to buy\\n            ++tokenToBuyInfoGlobals[1];\\n        }\\n\\n        return (tokensInAssetNowInfo, tokenToBuyInfo, tokenToBuyInfoGlobals);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/pancake-swap/interfaces/IPancakeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPancakeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/pancake-swap/interfaces/IPancakeRouter01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external view returns (address);\\n\\n    function WETH() external view returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"/contracts/pancake-swap/interfaces/IPancakeRouter01BNB.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPancakeRouter01BNB {\\n    function factory() external view returns (address);\\n\\n    function WBNB() external view returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityBNB(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountBNBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountBNB,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityBNB(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountBNBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountBNB);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityBNBWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountBNBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountBNB);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactBNBForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactBNB(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForBNB(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapBNBForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"/contracts/pancake-swap/interfaces/IPancakeRouter02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IPancakeRouter01.sol\\\";\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/pancake-swap/interfaces/IPancakeRouter02BNB.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IPancakeRouter01BNB.sol\\\";\\n\\ninterface IPancakeRouter02BNB is IPancakeRouter01BNB {\\n    function removeLiquidityBNBSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountBNBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountBNB);\\n\\n    function removeLiquidityBNBWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountBNBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountBNB);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactBNBForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForBNBSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/pancake-swap/interfaces/IPangolinRouter02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPangolinRouter02 {\\n    function WAVAX() external view returns (address);\\n\\n    function swapExactTokensForAVAX(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function addLiquidityAVAX(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidityAVAX(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n}\\n\"\r\n    },\r\n    \"/contracts/pancake-swap/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {\r\n      \"/contracts/lib/AssetLib.sol\": {\r\n        \"AssetLib\": \"0xf03Dccaec9A28200A6708c686cf0b8BF26dDc356\"\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokensInAssetNow\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][3]\",\"name\":\"tokensInAssetNowInfo\",\"type\":\"uint256[][3]\"},{\"internalType\":\"address[]\",\"name\":\"tokensToBuy\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][5]\",\"name\":\"tokenToBuyInfo\",\"type\":\"uint256[][5]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensPrices\",\"type\":\"uint256[]\"}],\"name\":\"fillInformationInSellAndBuyTokens\",\"outputs\":[{\"internalType\":\"uint256[][3]\",\"name\":\"\",\"type\":\"uint256[][3]\"},{\"internalType\":\"uint256[][5]\",\"name\":\"\",\"type\":\"uint256[][5]\"},{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"AssetLib2","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}