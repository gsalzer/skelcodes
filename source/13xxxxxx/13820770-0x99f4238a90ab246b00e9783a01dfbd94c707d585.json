{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/Globals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nuint256 constant SECONDS_IN_THE_YEAR = 365 * 24 * 60 * 60; // 365 days * 24 hours * 60 minutes * 60 seconds\\nuint256 constant DAYS_IN_THE_YEAR = 365;\\nuint256 constant MAX_INT = type(uint256).max;\\n\\nuint256 constant DECIMALS18 = 10**18;\\n\\nuint256 constant PRECISION = 10**25;\\nuint256 constant PERCENTAGE_100 = 100 * PRECISION;\\n\\nuint256 constant BLOCKS_PER_DAY = 6450;\\nuint256 constant BLOCKS_PER_YEAR = BLOCKS_PER_DAY * 365;\\n\\nuint256 constant APY_TOKENS = DECIMALS18;\\n\\nuint256 constant PROTOCOL_PERCENTAGE = 20 * PRECISION;\\n\\nuint256 constant DEFAULT_REBALANCING_THRESHOLD = 10**23;\\n\\nuint256 constant EPOCH_DAYS_AMOUNT = 7;\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/YieldGenerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IContractsRegistry.sol\\\";\\nimport \\\"./interfaces/IYieldGenerator.sol\\\";\\nimport \\\"./interfaces/IDefiProtocol.sol\\\";\\nimport \\\"./interfaces/ICapitalPool.sol\\\";\\n\\nimport \\\"./abstract/AbstractDependant.sol\\\";\\n\\nimport \\\"./Globals.sol\\\";\\n\\ncontract YieldGenerator is IYieldGenerator, OwnableUpgradeable, AbstractDependant {\\n    using SafeERC20 for ERC20;\\n    using SafeMath for uint256;\\n    using Math for uint256;\\n\\n    uint256 public constant DEPOSIT_SAFETY_MARGIN = 15 * 10**24; //1.5\\n    uint256 public constant PROTOCOLS_NUMBER = 3;\\n\\n    ERC20 public stblToken;\\n    ICapitalPool public capitalPool;\\n\\n    uint256 public totalDeposit;\\n    uint256 public whitelistedProtocols;\\n\\n    // index => defi protocol\\n    mapping(uint256 => DefiProtocol) internal defiProtocols;\\n    // index => defi protocol addresses\\n    mapping(uint256 => address) internal defiProtocolsAddresses;\\n    // available protcols to deposit/withdraw (weighted and threshold is true)\\n    uint256[] internal availableProtocols;\\n    // selected protocols for multiple deposit/withdraw\\n    uint256[] internal _selectedProtocols;\\n\\n    event DefiDeposited(\\n        uint256 indexed protocolIndex,\\n        uint256 amount,\\n        uint256 depositedPercentage\\n    );\\n    event DefiWithdrawn(uint256 indexed protocolIndex, uint256 amount, uint256 withdrawPercentage);\\n\\n    modifier onlyCapitalPool() {\\n        require(_msgSender() == address(capitalPool), \\\"YG: Not a capital pool contract\\\");\\n        _;\\n    }\\n\\n    modifier updateDefiProtocols(bool isDeposit) {\\n        _updateDefiProtocols(isDeposit);\\n        _;\\n    }\\n\\n    function __YieldGenerator_init() external initializer {\\n        __Ownable_init();\\n        whitelistedProtocols = 3;\\n        // setup AAVE\\n        defiProtocols[uint256(DefiProtocols.AAVE)].targetAllocation = 45 * PRECISION;\\n        defiProtocols[uint256(DefiProtocols.AAVE)].whiteListed = true;\\n        defiProtocols[uint256(DefiProtocols.AAVE)].threshold = true;\\n        // setup Compound\\n        defiProtocols[uint256(DefiProtocols.COMPOUND)].targetAllocation = 45 * PRECISION;\\n        defiProtocols[uint256(DefiProtocols.COMPOUND)].whiteListed = true;\\n        defiProtocols[uint256(DefiProtocols.COMPOUND)].threshold = true;\\n        // setup Yearn\\n        defiProtocols[uint256(DefiProtocols.YEARN)].targetAllocation = 10 * PRECISION;\\n        defiProtocols[uint256(DefiProtocols.YEARN)].whiteListed = true;\\n        defiProtocols[uint256(DefiProtocols.YEARN)].threshold = true;\\n    }\\n\\n    function setDependencies(IContractsRegistry _contractsRegistry)\\n        external\\n        override\\n        onlyInjectorOrZero\\n    {\\n        stblToken = ERC20(_contractsRegistry.getUSDTContract());\\n        capitalPool = ICapitalPool(_contractsRegistry.getCapitalPoolContract());\\n        defiProtocolsAddresses[uint256(DefiProtocols.AAVE)] = _contractsRegistry\\n            .getAaveProtocolContract();\\n        defiProtocolsAddresses[uint256(DefiProtocols.COMPOUND)] = _contractsRegistry\\n            .getCompoundProtocolContract();\\n        defiProtocolsAddresses[uint256(DefiProtocols.YEARN)] = _contractsRegistry\\n            .getYearnProtocolContract();\\n    }\\n\\n    /// @notice deposit stable coin into multiple defi protocols using formulas, access: capital pool\\n    /// @param amount uint256 the amount of stable coin to deposit\\n    function deposit(uint256 amount) external override onlyCapitalPool returns (uint256) {\\n        if (amount == 0 && _getCurrentvSTBLVolume() == 0) return 0;\\n        return _aggregateDepositWithdrawFunction(amount, true);\\n    }\\n\\n    /// @notice withdraw stable coin from mulitple defi protocols using formulas, access: capital pool\\n    /// @param amount uint256 the amount of stable coin to withdraw\\n    function withdraw(uint256 amount) external override onlyCapitalPool returns (uint256) {\\n        if (amount == 0 && _getCurrentvSTBLVolume() == 0) return 0;\\n        return _aggregateDepositWithdrawFunction(amount, false);\\n    }\\n\\n    /// @notice set the protocol settings for each defi protocol (allocations, whitelisted, threshold), access: owner\\n    /// @param whitelisted bool[] list of whitelisted values for each protocol\\n    /// @param allocations uint256[] list of allocations value for each protocol\\n    /// @param threshold bool[] list of threshold values for each protocol\\n    function setProtocolSettings(\\n        bool[] calldata whitelisted,\\n        uint256[] calldata allocations,\\n        bool[] calldata threshold\\n    ) external override onlyOwner {\\n        require(\\n            whitelisted.length == PROTOCOLS_NUMBER &&\\n                allocations.length == PROTOCOLS_NUMBER &&\\n                threshold.length == PROTOCOLS_NUMBER,\\n            \\\"YG: Invlaid arr length\\\"\\n        );\\n\\n        whitelistedProtocols = 0;\\n        bool _whiteListed;\\n        for (uint256 i = 0; i < PROTOCOLS_NUMBER; i++) {\\n            _whiteListed = whitelisted[i];\\n\\n            if (_whiteListed) {\\n                whitelistedProtocols = whitelistedProtocols.add(1);\\n            }\\n\\n            defiProtocols[i].targetAllocation = allocations[i];\\n\\n            defiProtocols[i].whiteListed = _whiteListed;\\n            defiProtocols[i].threshold = threshold[i];\\n        }\\n    }\\n\\n    /// @notice claim rewards for all defi protocols and send them to reinsurance pool, access: owner\\n    function claimRewards() external override onlyOwner {\\n        for (uint256 i = 0; i < PROTOCOLS_NUMBER; i++) {\\n            IDefiProtocol(defiProtocolsAddresses[i]).claimRewards();\\n        }\\n    }\\n\\n    /// @notice returns defi protocol info by its index\\n    /// @param index uint256 the index of the defi protocol\\n    function defiProtocol(uint256 index)\\n        external\\n        view\\n        override\\n        returns (DefiProtocol memory _defiProtocol)\\n    {\\n        _defiProtocol = DefiProtocol(\\n            defiProtocols[index].targetAllocation,\\n            _calcProtocolCurrentAllocation(index),\\n            defiProtocols[index].rebalanceWeight,\\n            defiProtocols[index].depositedAmount,\\n            defiProtocols[index].whiteListed,\\n            defiProtocols[index].threshold,\\n            defiProtocols[index].withdrawMax,\\n            IDefiProtocol(defiProtocolsAddresses[index]).totalValue()\\n        );\\n    }\\n\\n    function _aggregateDepositWithdrawFunction(uint256 amount, bool isDeposit)\\n        internal\\n        updateDefiProtocols(isDeposit)\\n        returns (uint256 _actualAmount)\\n    {\\n        uint256 _protocolIndex;\\n        uint256 _protocolsNo = _howManyProtocols(amount, isDeposit);\\n        if (_protocolsNo == 1) {\\n            if (availableProtocols.length == 0) {\\n                return _actualAmount;\\n            }\\n\\n            if (isDeposit) {\\n                _protocolIndex = _getProtocolOfMaxWeight();\\n                // deposit 100% to this protocol\\n                _depoist(_protocolIndex, amount, PERCENTAGE_100);\\n                _actualAmount = amount;\\n            } else {\\n                _protocolIndex = _getProtocolOfMinWeight();\\n                // withdraw 100% from this protocol\\n                _actualAmount = _withdraw(_protocolIndex, amount, PERCENTAGE_100);\\n            }\\n        } else if (_protocolsNo > 1) {\\n            delete _selectedProtocols;\\n\\n            uint256 _totalWeight;\\n            uint256 _depoistedAmount;\\n            uint256 _protocolRebalanceAllocation;\\n\\n            for (uint256 i = 0; i < _protocolsNo; i++) {\\n                if (availableProtocols.length == 0) {\\n                    break;\\n                }\\n                if (isDeposit) {\\n                    _protocolIndex = _getProtocolOfMaxWeight();\\n                } else {\\n                    _protocolIndex = _getProtocolOfMinWeight();\\n                }\\n                _totalWeight = _totalWeight.add(defiProtocols[_protocolIndex].rebalanceWeight);\\n                _selectedProtocols.push(_protocolIndex);\\n            }\\n\\n            if (_selectedProtocols.length > 0) {\\n                for (uint256 i = 0; i < _selectedProtocols.length; i++) {\\n                    _protocolRebalanceAllocation = _calcRebalanceAllocation(\\n                        _selectedProtocols[i],\\n                        _totalWeight\\n                    );\\n\\n                    if (isDeposit) {\\n                        // deposit % allocation to this protocol\\n                        _depoistedAmount = amount.mul(_protocolRebalanceAllocation).div(\\n                            PERCENTAGE_100\\n                        );\\n                        _depoist(\\n                            _selectedProtocols[i],\\n                            _depoistedAmount,\\n                            _protocolRebalanceAllocation\\n                        );\\n                        _actualAmount += _depoistedAmount;\\n                    } else {\\n                        _actualAmount += _withdraw(\\n                            _selectedProtocols[i],\\n                            amount.mul(_protocolRebalanceAllocation).div(PERCENTAGE_100),\\n                            _protocolRebalanceAllocation\\n                        );\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice deposit into defi protocols\\n    /// @param _protocolIndex uint256 the predefined index of the defi protocol\\n    /// @param _amount uint256 amount of stable coin to deposit\\n    /// @param _depositedPercentage uint256 the percentage of deposited amount into the protocol\\n    function _depoist(\\n        uint256 _protocolIndex,\\n        uint256 _amount,\\n        uint256 _depositedPercentage\\n    ) internal {\\n        // should approve yield to transfer from the capital pool\\n        stblToken.safeTransferFrom(_msgSender(), defiProtocolsAddresses[_protocolIndex], _amount);\\n\\n        IDefiProtocol(defiProtocolsAddresses[_protocolIndex]).deposit(_amount);\\n\\n        defiProtocols[_protocolIndex].depositedAmount += _amount;\\n\\n        totalDeposit = totalDeposit.add(_amount);\\n\\n        emit DefiDeposited(_protocolIndex, _amount, _depositedPercentage);\\n    }\\n\\n    /// @notice withdraw from defi protocols\\n    /// @param _protocolIndex uint256 the predefined index of the defi protocol\\n    /// @param _amount uint256 amount of stable coin to withdraw\\n    /// @param _withdrawnPercentage uint256 the percentage of withdrawn amount from the protocol\\n    function _withdraw(\\n        uint256 _protocolIndex,\\n        uint256 _amount,\\n        uint256 _withdrawnPercentage\\n    ) internal returns (uint256) {\\n        uint256 _actualAmountWithdrawn;\\n        uint256 allocatedFunds = defiProtocols[_protocolIndex].depositedAmount;\\n\\n        if (allocatedFunds == 0) return _actualAmountWithdrawn;\\n\\n        if (allocatedFunds < _amount) {\\n            _amount = allocatedFunds;\\n        }\\n\\n        _actualAmountWithdrawn = IDefiProtocol(defiProtocolsAddresses[_protocolIndex]).withdraw(\\n            _amount\\n        );\\n\\n        defiProtocols[_protocolIndex].depositedAmount -= _actualAmountWithdrawn;\\n\\n        totalDeposit = totalDeposit.sub(_actualAmountWithdrawn);\\n\\n        emit DefiWithdrawn(_protocolIndex, _actualAmountWithdrawn, _withdrawnPercentage);\\n\\n        return _actualAmountWithdrawn;\\n    }\\n\\n    /// @notice get the number of protocols need to rebalance\\n    /// @param rebalanceAmount uint256 the amount of stable coin will depsoit or withdraw\\n    function _howManyProtocols(uint256 rebalanceAmount, bool isDeposit)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _no1;\\n        if (isDeposit) {\\n            _no1 = whitelistedProtocols.mul(rebalanceAmount);\\n        } else {\\n            _no1 = PROTOCOLS_NUMBER.mul(rebalanceAmount);\\n        }\\n\\n        uint256 _no2 = _getCurrentvSTBLVolume();\\n\\n        return _no1.add(_no2 - 1).div(_no2);\\n        //return _no1.div(_no2).add(_no1.mod(_no2) == 0 ? 0 : 1);\\n    }\\n\\n    /// @notice update defi protocols rebalance weight and threshold status\\n    /// @param isDeposit bool determine the rebalance is for deposit or withdraw\\n    function _updateDefiProtocols(bool isDeposit) internal {\\n        delete availableProtocols;\\n\\n        for (uint256 i = 0; i < PROTOCOLS_NUMBER; i++) {\\n            uint256 _targetAllocation = defiProtocols[i].targetAllocation;\\n            uint256 _currentAllocation = _calcProtocolCurrentAllocation(i);\\n            uint256 _diffAllocation;\\n\\n            if (isDeposit) {\\n                if (_targetAllocation > _currentAllocation) {\\n                    // max weight\\n                    _diffAllocation = _targetAllocation.sub(_currentAllocation);\\n                } else if (_currentAllocation >= _targetAllocation) {\\n                    _diffAllocation = 0;\\n                }\\n            } else {\\n                if (_currentAllocation > _targetAllocation) {\\n                    // max weight\\n                    _diffAllocation = _currentAllocation.sub(_targetAllocation);\\n                    defiProtocols[i].withdrawMax = true;\\n                } else if (_targetAllocation >= _currentAllocation) {\\n                    // min weight\\n                    _diffAllocation = _targetAllocation.sub(_currentAllocation);\\n                    defiProtocols[i].withdrawMax = false;\\n                }\\n            }\\n\\n            // update rebalance weight\\n            defiProtocols[i].rebalanceWeight = _diffAllocation.mul(_getCurrentvSTBLVolume()).div(\\n                PERCENTAGE_100\\n            );\\n\\n            if (\\n                defiProtocols[i].rebalanceWeight > 0 &&\\n                (\\n                    isDeposit\\n                        ? defiProtocols[i].whiteListed && defiProtocols[i].threshold\\n                        : _currentAllocation > 0\\n                )\\n            ) {\\n                availableProtocols.push(i);\\n            }\\n        }\\n    }\\n\\n    /// @notice get the defi protocol has max weight to deposit\\n    /// @dev only select the positive weight from largest to smallest\\n    function _getProtocolOfMaxWeight() internal returns (uint256) {\\n        uint256 _largest;\\n        uint256 _protocolIndex;\\n        uint256 _indexToDelete;\\n\\n        for (uint256 i = 0; i < availableProtocols.length; i++) {\\n            if (defiProtocols[availableProtocols[i]].rebalanceWeight > _largest) {\\n                _largest = defiProtocols[availableProtocols[i]].rebalanceWeight;\\n                _protocolIndex = availableProtocols[i];\\n                _indexToDelete = i;\\n            }\\n        }\\n\\n        availableProtocols[_indexToDelete] = availableProtocols[availableProtocols.length - 1];\\n        availableProtocols.pop();\\n\\n        return _protocolIndex;\\n    }\\n\\n    /// @notice get the defi protocol has min weight to deposit\\n    /// @dev only select the negative weight from smallest to largest\\n    function _getProtocolOfMinWeight() internal returns (uint256) {\\n        uint256 _maxWeight;\\n        for (uint256 i = 0; i < availableProtocols.length; i++) {\\n            if (defiProtocols[availableProtocols[i]].rebalanceWeight > _maxWeight) {\\n                _maxWeight = defiProtocols[availableProtocols[i]].rebalanceWeight;\\n            }\\n        }\\n\\n        uint256 _smallest = _maxWeight;\\n        uint256 _largest;\\n        uint256 _maxProtocolIndex;\\n        uint256 _maxIndexToDelete;\\n        uint256 _minProtocolIndex;\\n        uint256 _minIndexToDelete;\\n\\n        for (uint256 i = 0; i < availableProtocols.length; i++) {\\n            if (\\n                defiProtocols[availableProtocols[i]].rebalanceWeight <= _smallest &&\\n                !defiProtocols[availableProtocols[i]].withdrawMax\\n            ) {\\n                _smallest = defiProtocols[availableProtocols[i]].rebalanceWeight;\\n                _minProtocolIndex = availableProtocols[i];\\n                _minIndexToDelete = i;\\n            } else if (\\n                defiProtocols[availableProtocols[i]].rebalanceWeight > _largest &&\\n                defiProtocols[availableProtocols[i]].withdrawMax\\n            ) {\\n                _largest = defiProtocols[availableProtocols[i]].rebalanceWeight;\\n                _maxProtocolIndex = availableProtocols[i];\\n                _maxIndexToDelete = i;\\n            }\\n        }\\n        if (_largest > 0) {\\n            availableProtocols[_maxIndexToDelete] = availableProtocols[\\n                availableProtocols.length - 1\\n            ];\\n            availableProtocols.pop();\\n            return _maxProtocolIndex;\\n        } else {\\n            availableProtocols[_minIndexToDelete] = availableProtocols[\\n                availableProtocols.length - 1\\n            ];\\n            availableProtocols.pop();\\n            return _minProtocolIndex;\\n        }\\n    }\\n\\n    /// @notice calc the current allocation of defi protocol against current vstable volume\\n    /// @param _protocolIndex uint256 the predefined index of defi protocol\\n    function _calcProtocolCurrentAllocation(uint256 _protocolIndex)\\n        internal\\n        view\\n        returns (uint256 _currentAllocation)\\n    {\\n        uint256 _depositedAmount = defiProtocols[_protocolIndex].depositedAmount;\\n        uint256 _currentvSTBLVolume = _getCurrentvSTBLVolume();\\n        if (_currentvSTBLVolume > 0) {\\n            _currentAllocation = _depositedAmount.mul(PERCENTAGE_100).div(_currentvSTBLVolume);\\n        }\\n    }\\n\\n    /// @notice calc the rebelance allocation % for one protocol for deposit/withdraw\\n    /// @param _protocolIndex uint256 the predefined index of defi protocol\\n    /// @param _totalWeight uint256 sum of rebelance weight for all protocols which avaiable for deposit/withdraw\\n    function _calcRebalanceAllocation(uint256 _protocolIndex, uint256 _totalWeight)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return defiProtocols[_protocolIndex].rebalanceWeight.mul(PERCENTAGE_100).div(_totalWeight);\\n    }\\n\\n    function _getCurrentvSTBLVolume() internal view returns (uint256) {\\n        return capitalPool.virtualUsdtAccumulatedBalance();\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/abstract/AbstractDependant.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\nimport \\\"../interfaces/IContractsRegistry.sol\\\";\\n\\nabstract contract AbstractDependant {\\n    /// @dev keccak256(AbstractDependant.setInjector(address)) - 1\\n    bytes32 private constant _INJECTOR_SLOT =\\n        0xd6b8f2e074594ceb05d47c27386969754b6ad0c15e5eb8f691399cd0be980e76;\\n\\n    modifier onlyInjectorOrZero() {\\n        address _injector = injector();\\n\\n        require(_injector == address(0) || _injector == msg.sender, \\\"Dependant: Not an injector\\\");\\n        _;\\n    }\\n\\n    function setInjector(address _injector) external onlyInjectorOrZero {\\n        bytes32 slot = _INJECTOR_SLOT;\\n\\n        assembly {\\n            sstore(slot, _injector)\\n        }\\n    }\\n\\n    /// @dev has to apply onlyInjectorOrZero() modifier\\n    function setDependencies(IContractsRegistry) external virtual;\\n\\n    function injector() public view returns (address _injector) {\\n        bytes32 slot = _INJECTOR_SLOT;\\n\\n        assembly {\\n            _injector := sload(slot)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/interfaces/ICapitalPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICapitalPool {\\n    struct PremiumFactors {\\n        uint256 stblAmount;\\n        uint256 premiumDurationInDays;\\n        uint256 premiumPrice;\\n        uint256 lStblDeployedByLP;\\n        uint256 vStblDeployedByRP;\\n        uint256 vStblOfCP;\\n        uint256 premiumPerDeployment;\\n        uint256 participatedlStblDeployedByLP;\\n        address userLeveragePoolAddress;\\n    }\\n\\n    function virtualUsdtAccumulatedBalance() external view returns (uint256);\\n\\n    /// @notice distributes the policybook premiums into pools (CP, ULP , RP)\\n    /// @dev distributes the balances acording to the established percentages\\n    /// @param _stblAmount amount hardSTBL ingressed into the system\\n    /// @param _epochsNumber uint256 the number of epochs which the policy holder will pay a premium for\\n    /// @param _protocolFee uint256 the amount of protocol fee earned by premium\\n    function addPolicyHoldersHardSTBL(\\n        uint256 _stblAmount,\\n        uint256 _epochsNumber,\\n        uint256 _protocolFee\\n    ) external returns (uint256);\\n\\n    /// @notice distributes the hardSTBL from the coverage providers\\n    /// @dev emits PoolBalancedUpdated event\\n    /// @param _stblAmount amount hardSTBL ingressed into the system\\n    function addCoverageProvidersHardSTBL(uint256 _stblAmount) external;\\n\\n    /// @notice distributes the hardSTBL from the leverage providers\\n    /// @dev emits PoolBalancedUpdated event\\n    /// @param _stblAmount amount hardSTBL ingressed into the system\\n    function addLeverageProvidersHardSTBL(uint256 _stblAmount) external;\\n\\n    /// @notice distributes the hardSTBL from the reinsurance pool\\n    /// @dev emits PoolBalancedUpdated event\\n    /// @param _stblAmount amount hardSTBL ingressed into the system\\n    function addReinsurancePoolHardSTBL(uint256 _stblAmount) external;\\n\\n    /// @notice rebalances pools acording to v2 specification and dao enforced policies\\n    /// @dev  emits PoolBalancesUpdated\\n    function rebalanceLiquidityCushion() external;\\n\\n    /// @notice Fullfils policybook claims by transfering the balance to claimer\\n    /// @param _claimer, address of the claimer recieving the withdraw\\n    /// @param _stblAmount uint256 amount to be withdrawn\\n    function fundClaim(address _claimer, uint256 _stblAmount) external;\\n\\n    /// @notice Withdraws liquidity from a specific policbybook to the user\\n    /// @param _sender, address of the user beneficiary of the withdraw\\n    /// @param _stblAmount uint256 amount to be withdrawn\\n    /// @param _isLeveragePool bool wether the pool is ULP or CP(policybook)\\n    function withdrawLiquidity(\\n        address _sender,\\n        uint256 _stblAmount,\\n        bool _isLeveragePool\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/interfaces/IContractsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IContractsRegistry {\\n    function getUniswapRouterContract() external view returns (address);\\n\\n    function getUniswapBMIToETHPairContract() external view returns (address);\\n\\n    function getUniswapBMIToUSDTPairContract() external view returns (address);\\n\\n    function getSushiswapRouterContract() external view returns (address);\\n\\n    function getSushiswapBMIToETHPairContract() external view returns (address);\\n\\n    function getSushiswapBMIToUSDTPairContract() external view returns (address);\\n\\n    function getSushiSwapMasterChefV2Contract() external view returns (address);\\n\\n    function getWETHContract() external view returns (address);\\n\\n    function getUSDTContract() external view returns (address);\\n\\n    function getBMIContract() external view returns (address);\\n\\n    function getPriceFeedContract() external view returns (address);\\n\\n    function getPolicyBookRegistryContract() external view returns (address);\\n\\n    function getPolicyBookFabricContract() external view returns (address);\\n\\n    function getBMICoverStakingContract() external view returns (address);\\n\\n    function getBMICoverStakingViewContract() external view returns (address);\\n\\n    function getLegacyRewardsGeneratorContract() external view returns (address);\\n\\n    function getRewardsGeneratorContract() external view returns (address);\\n\\n    function getBMIUtilityNFTContract() external view returns (address);\\n\\n    function getNFTStakingContract() external view returns (address);\\n\\n    function getLiquidityMiningContract() external view returns (address);\\n\\n    function getClaimingRegistryContract() external view returns (address);\\n\\n    function getPolicyRegistryContract() external view returns (address);\\n\\n    function getLiquidityRegistryContract() external view returns (address);\\n\\n    function getClaimVotingContract() external view returns (address);\\n\\n    function getReinsurancePoolContract() external view returns (address);\\n\\n    function getLeveragePortfolioViewContract() external view returns (address);\\n\\n    function getCapitalPoolContract() external view returns (address);\\n\\n    function getPolicyBookAdminContract() external view returns (address);\\n\\n    function getPolicyQuoteContract() external view returns (address);\\n\\n    function getLegacyBMIStakingContract() external view returns (address);\\n\\n    function getBMIStakingContract() external view returns (address);\\n\\n    function getSTKBMIContract() external view returns (address);\\n\\n    function getVBMIContract() external view returns (address);\\n\\n    function getLegacyLiquidityMiningStakingContract() external view returns (address);\\n\\n    function getLiquidityMiningStakingETHContract() external view returns (address);\\n\\n    function getLiquidityMiningStakingUSDTContract() external view returns (address);\\n\\n    function getReputationSystemContract() external view returns (address);\\n\\n    function getAaveProtocolContract() external view returns (address);\\n\\n    function getAaveLendPoolAddressProvdierContract() external view returns (address);\\n\\n    function getAaveATokenContract() external view returns (address);\\n\\n    function getCompoundProtocolContract() external view returns (address);\\n\\n    function getCompoundCTokenContract() external view returns (address);\\n\\n    function getCompoundComptrollerContract() external view returns (address);\\n\\n    function getYearnProtocolContract() external view returns (address);\\n\\n    function getYearnVaultContract() external view returns (address);\\n\\n    function getYieldGeneratorContract() external view returns (address);\\n\\n    function getShieldMiningContract() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/interfaces/IDefiProtocol.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/// @notice Interface for defi protocols (Compound, Aave, bZx, etc.)\\ninterface IDefiProtocol {\\n    /// @return uint256 The total value locked in the defi protocol, in terms of the underlying stablecoin\\n    function totalValue() external view returns (uint256);\\n\\n    /// @return ERC20 the erc20 stable coin which depoisted in the defi protocol\\n    function stablecoin() external view returns (ERC20);\\n\\n    /// @notice deposit an amount in defi protocol\\n    /// @param amount uint256 the amount of stable coin will deposit\\n    function deposit(uint256 amount) external;\\n\\n    /// @notice withdraw an amount from defi protocol\\n    /// @param amountInUnderlying uint256 the amount of underlying token to withdraw the deposited stable coin\\n    function withdraw(uint256 amountInUnderlying) external returns (uint256 actualAmountWithdrawn);\\n\\n    /// @notice Claims farmed tokens and sends it to the rewards pool\\n    function claimRewards() external;\\n\\n    /// @notice set the address of receiving rewards\\n    /// @param newValue address the new address to recieve the rewards\\n    function setRewards(address newValue) external;\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/interfaces/IYieldGenerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IYieldGenerator {\\n    enum DefiProtocols {AAVE, COMPOUND, YEARN}\\n\\n    struct DefiProtocol {\\n        uint256 targetAllocation;\\n        uint256 currentAllocation;\\n        uint256 rebalanceWeight;\\n        uint256 depositedAmount;\\n        bool whiteListed;\\n        bool threshold;\\n        bool withdrawMax;\\n        // new state post v2\\n        uint256 totalValue;\\n    }\\n\\n    /// @notice deposit stable coin into multiple defi protocols using formulas, access: capital pool\\n    /// @param amount uint256 the amount of stable coin to deposit\\n    function deposit(uint256 amount) external returns (uint256);\\n\\n    /// @notice withdraw stable coin from mulitple defi protocols using formulas, access: capital pool\\n    /// @param amount uint256 the amount of stable coin to withdraw\\n    function withdraw(uint256 amount) external returns (uint256);\\n\\n    /// @notice set the protocol settings for each defi protocol (allocations, whitelisted, threshold), access: owner\\n    /// @param whitelisted bool[] list of whitelisted values for each protocol\\n    /// @param allocations uint256[] list of allocations value for each protocol\\n    /// @param threshold bool[] list of threshold values for each protocol\\n    function setProtocolSettings(\\n        bool[] calldata whitelisted,\\n        uint256[] calldata allocations,\\n        bool[] calldata threshold\\n    ) external;\\n\\n    /// @notice Claims farmed tokens and sends it to the reinsurance pool\\n    function claimRewards() external;\\n\\n    /// @notice returns defi protocol info by its index\\n    /// @param index uint256 the index of the defi protocol\\n    function defiProtocol(uint256 index) external view returns (DefiProtocol memory _defiProtocol);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"protocolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositedPercentage\",\"type\":\"uint256\"}],\"name\":\"DefiDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"protocolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawPercentage\",\"type\":\"uint256\"}],\"name\":\"DefiWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEPOSIT_SAFETY_MARGIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROTOCOLS_NUMBER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__YieldGenerator_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capitalPool\",\"outputs\":[{\"internalType\":\"contract ICapitalPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"defiProtocol\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"targetAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalanceWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whiteListed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"threshold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"withdrawMax\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"}],\"internalType\":\"struct IYieldGenerator.DefiProtocol\",\"name\":\"_defiProtocol\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"injector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_injector\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IContractsRegistry\",\"name\":\"_contractsRegistry\",\"type\":\"address\"}],\"name\":\"setDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_injector\",\"type\":\"address\"}],\"name\":\"setInjector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool[]\",\"name\":\"whitelisted\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"allocations\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"threshold\",\"type\":\"bool[]\"}],\"name\":\"setProtocolSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stblToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistedProtocols\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"YieldGenerator","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}