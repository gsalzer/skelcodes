{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.0;\r\n\r\ninterface BatchAuctionLike {\r\n    struct MarketStatus {\r\n        uint128 commitmentsTotal;\r\n        uint128 minimumCommitmentAmount;\r\n        bool finalized;\r\n        bool usePointList;\r\n    }\r\n\r\n    function commitments(address) external view returns (uint);\r\n    function marketStatus() external view returns (MarketStatus memory);\r\n}\r\n\r\n\r\ncontract BatchValidatingPointList {\r\n    function hasPoints(address who, uint newCommitment) public view returns (bool) {\r\n        BatchAuctionLike auction = BatchAuctionLike(msg.sender);\r\n        BatchAuctionLike.MarketStatus memory status = auction.marketStatus();\r\n\r\n        uint expectedEth = status.commitmentsTotal - auction.commitments(who) + newCommitment;\r\n        require(address(auction).balance >= expectedEth, \"BatchValidatingPointList/invalid-eth\");\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCommitment\",\"type\":\"uint256\"}],\"name\":\"hasPoints\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BatchValidatingPointList","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7df329594df5a01f060691011ba962dd3fe380f12658482940dfbbc3bd63d9f3"}]}