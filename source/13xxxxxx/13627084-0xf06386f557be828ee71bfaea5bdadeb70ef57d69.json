{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\n// Copyright (C) 2021 Dai Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface VatLike {\r\n    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\r\n    function urns(bytes32, address) external view returns (uint256, uint256);\r\n}\r\n\r\ninterface DirectLike {\r\n    function vat() external view returns (address);\r\n    function pool() external view returns (address);\r\n    function dai() external view returns (address);\r\n    function adai() external view returns (address);\r\n    function stableDebt() external view returns (address);\r\n    function variableDebt() external view returns (address);\r\n    function bar() external view returns (uint256);\r\n    function ilk() external view returns (bytes32);\r\n    function exec() external;\r\n}\r\n\r\ninterface LendingPoolLike {\r\n    function getReserveData(address asset) external view returns (\r\n        uint256,    // Configuration\r\n        uint128,    // the liquidity index. Expressed in ray\r\n        uint128,    // variable borrow index. Expressed in ray\r\n        uint128,    // the current supply rate. Expressed in ray\r\n        uint128,    // the current variable borrow rate. Expressed in ray\r\n        uint128,    // the current stable borrow rate. Expressed in ray\r\n        uint40,\r\n        address,    // address of the adai interest bearing token\r\n        address,    // address of the stable debt token\r\n        address,    // address of the variable debt token\r\n        address,    // address of the interest rate strategy\r\n        uint8\r\n    );\r\n}\r\n\r\n// Helper functions for keeper bots\r\ncontract DirectHelper {\r\n\r\n    // --- Math ---\r\n    function _mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"DssDirectDepositAaveDai/overflow\");\r\n    }\r\n    uint256 constant RAY  = 10 ** 27;\r\n    function _rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = _mul(x, RAY) / y;\r\n    }\r\n\r\n    // Use this to determine whether exec() should be called based on your interest rate deviation threshold\r\n    // This assumes normal operation, culled / global shutdown should be handled externally\r\n    // Also assumes no liquidity issues\r\n    function shouldExec(\r\n        address _direct,\r\n        uint256 interestRateTolerance\r\n    ) public view returns (bool) {\r\n        // IMPORTANT: this function assumes Vat rate of this ilk will always be == 1 * RAY (no fees).\r\n        // That's why this module converts normalized debt (art) to Vat DAI generated with a simple RAY multiplication or division\r\n        // This module will have an unintended behaviour if rate is changed to some other value.\r\n\r\n        DirectLike direct = DirectLike(_direct);\r\n        VatLike vat = VatLike(direct.vat());\r\n        address dai = direct.dai();\r\n        bytes32 ilk = direct.ilk();\r\n        LendingPoolLike pool = LendingPoolLike(direct.pool());\r\n\r\n        (, uint256 daiDebt) = vat.urns(ilk, address(direct));\r\n        uint256 _bar = direct.bar();\r\n        if (_bar == 0) {\r\n            return daiDebt > 1;     // Always attempt to close out if we have debt remaining\r\n        }\r\n\r\n        (,,,, uint256 currVarBorrow,,,,,,,) = pool.getReserveData(dai);\r\n\r\n        uint256 deviation = _rdiv(currVarBorrow, _bar);\r\n        if (deviation < RAY) {\r\n            // Unwind case\r\n            return daiDebt > 1 && (RAY - deviation) > interestRateTolerance;\r\n        } else if (deviation > RAY) {\r\n            // Wind case\r\n            (,,, uint256 line,) = vat.ilks(ilk);\r\n            return (daiDebt + 1)*RAY < line && (deviation - RAY) > interestRateTolerance;\r\n        } else {\r\n            // No change\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function conditionalExec(\r\n        address _direct,\r\n        uint256 interestRateTolerance\r\n    ) external {\r\n        require(shouldExec(_direct, interestRateTolerance), \"DirectHelper/not-ready\");\r\n        \r\n        DirectLike(_direct).exec();\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_direct\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interestRateTolerance\",\"type\":\"uint256\"}],\"name\":\"conditionalExec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_direct\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interestRateTolerance\",\"type\":\"uint256\"}],\"name\":\"shouldExec\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DirectHelper","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://99c1fcf68696e523e5c111665d941c7cfa9f326de6ae0e568b72876c9134a999"}]}