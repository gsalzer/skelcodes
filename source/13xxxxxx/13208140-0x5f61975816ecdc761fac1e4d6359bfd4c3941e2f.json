{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n/**\r\n *\r\n *        -\r\n *   ___/   \\___\r\n *   Gaussian Timepieces\r\n *     by Takens Theorem\r\n *\r\n *   Coded mostly by someone named 'OpenZeppelin' + some twists by Takens\r\n * \r\n *   Terms, conditions: Experimental, use at your own risk. Each token provided \r\n *   as-is and as-available without any and all warranty. By using this contract \r\n *   you accept sole responsibility for any and all transactions involving \r\n *   Gaussian Timepieces. \r\n * \r\n * \r\n */\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping (uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping (address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC721).interfaceId\r\n            || interfaceId == type(IERC721Metadata).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0\r\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\r\n            : '';\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\r\n     * in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");        \r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n        private returns (bool)\r\n    {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    // solhint-disable-next-line no-inline-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant alphabet = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"\";\r\n        buffer[1] = \"\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = alphabet[value & 0xf];\r\n            value >>= 4; \r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n    \r\n    // adapted from tkeber solution: https://ethereum.stackexchange.com/a/8447\r\n    function toAsciiString(address x) internal pure returns (string memory) {\r\n        bytes memory s = new bytes(40);\r\n        for (uint i = 0; i < 20; i++) {\r\n            bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8*(19 - i)))));\r\n            bytes1 hi = bytes1(uint8(b) / 16);\r\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\r\n            s[2*i] = char(hi);\r\n            s[2*i+1] = char(lo);            \r\n        }\r\n        return string(s);\r\n    }\r\n    \r\n    function char(bytes1 b) internal pure returns (bytes1 c) {\r\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\r\n        else return bytes1(uint8(b) + 0x57);\r\n    }    \r\n    \r\n    // adapted from t-nicci solution https://ethereum.stackexchange.com/a/31470\r\n    function subString(string memory str, uint startIndex, uint endIndex) internal pure returns (string memory) {\r\n        bytes memory strBytes = bytes(str);\r\n        bytes memory result = new bytes(endIndex-startIndex);\r\n        for(uint i = startIndex; i < endIndex; i++) {\r\n            result[i-startIndex] = strBytes[i];\r\n        }\r\n        return string(result);\r\n    }    \r\n    \r\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\r\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\r\n    }\r\n    \r\n    // nice solution: https://ethereum.stackexchange.com/questions/56319/how-to-convert-bytes32-to-string\r\n    function toShortString(bytes32 _data) internal pure returns (string memory) {\r\n      bytes memory _bytesContainer = new bytes(32);\r\n      uint256 _charCount = 0;\r\n      // loop through every element in bytes32\r\n      for (uint256 _bytesCounter = 0; _bytesCounter < 32; _bytesCounter++) {\r\n        bytes1 _char = bytes1(bytes32(uint256(_data) * 2 ** (8 * _bytesCounter)));\r\n        if (_char != 0) {\r\n          _bytesContainer[_charCount] = _char;\r\n          _charCount++;\r\n        }\r\n      }\r\n    \r\n      bytes memory _bytesContainerTrimmed = new bytes(_charCount);\r\n    \r\n      for (uint256 _charCounter = 0; _charCounter < _charCount; _charCounter++) {\r\n        _bytesContainerTrimmed[_charCounter] = _bytesContainer[_charCounter];\r\n      }\r\n    \r\n      return string(_bytesContainerTrimmed);\r\n    }    \r\n    \r\n}\r\n\r\ncontract externalNft {function balanceOf(address owner) external view returns (uint256 balance) {}}\r\n\r\n/**\r\n * @title GTPTT1 contract\r\n * @dev Extends ERC721 Non-Fungible Token Standard basic implementation\r\n */\r\ncontract GTPTT1 is ERC721, Ownable {\r\n    using Counters for Counters.Counter;\r\n    Counters.Counter private _tokenIds;\r\n\r\n    string private constant svg_start = \"<?xml version='1.0' encoding='UTF-8'?><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' height='1000' width='1000' viewBox='-1000 -1000 2000 2000'><rect x='-1000' y='-1000' width='2000' height='2000' fill='#ffffff' /><style>\";\r\n\r\n    // attributes json for opensea\r\n    function makeAttributes(uint256 tokenId) private view returns (string memory) {\r\n        (uint256 period, uint256 color, uint256 shape) = getAttributes(tokenId);\r\n        (uint256 totToks, uint256 totProjs) = getNftBalance(ownerOf(tokenId));\r\n        string memory colorNm = color == 0 ? 'Dark' : 'Light';\r\n        string memory shapeNm = shape == 0 ? 'Circles' : 'Blocks';\r\n        string memory content = string(abi.encodePacked(\r\n            '{\"trait_type\":\"Period\",\"value\":\"', Strings.toString(period), ' blocks\"},',\r\n            '{\"trait_type\":\"Theme\",\"value\":\"', colorNm, '\"},',\r\n            '{\"trait_type\":\"Shapes\",\"value\":\"', shapeNm, '\"},',\r\n            '{\"trait_type\":\"On-Chain Items (Owner)\",\"value\":', Strings.toString(totToks), '},',\r\n            '{\"trait_type\":\"On-Chain Projects (Owner)\",\"value\":', Strings.toString(totProjs), '}'\r\n        ));\r\n        return content; \r\n    }\r\n\r\n    // render one circle svg object\r\n    function makeCircle(uint256 i, uint256 tokenId) private view returns (string memory) {\r\n        string memory sz = Strings.toString((vl(i, tokenId) % 128+10)*10);\r\n        string memory fill = cl(i, tokenId);\r\n        // 0 = filled; else ring\r\n        if (vl(i, tokenId) % 2 == 0) {\r\n            return string(abi.encodePacked(c[0], sz, \"px' fill='#\",\r\n                    fill, \"' id='c\", Strings.toString(i), \"' />\"));        \r\n        } \r\n        return string(abi.encodePacked(c[0], sz, \"px' stroke='#\",\r\n                fill, \"' fill='none' stroke-width='\", Strings.toString(vl(i, tokenId) % 28+4),\r\n                \"pt' id='c\", Strings.toString(i), \"' />\"));        \r\n    }\r\n    \r\n    // render one rect svg object\r\n    function makeRect(uint256 i, uint256 tokenId) private view returns (string memory) {\r\n        uint256 sz = (vl(i, tokenId) % 128+10)*10;\r\n        string memory fill = cl(i, tokenId);\r\n        string memory sz_str = Strings.toString(sz);\r\n        string memory sz2_str = Strings.toString(sz*2);\r\n        // 0 = filled; else ring\r\n        if (vl(i,tokenId) % 2 == 0) {\r\n            return string(abi.encodePacked(\"<rect x='-\",\r\n                    sz_str, \"px' y='-\",\r\n                    sz_str, \"px' width='\",\r\n                    sz2_str, \"px' height='\",\r\n                    sz2_str, \"px' fill='#\",\r\n                    fill, \"' id='c\", Strings.toString(i), \"' />\"));        \r\n        } \r\n        return string(abi.encodePacked(\"<rect x='-\",\r\n                sz_str, \"px' y='-\",\r\n                sz_str, \"px' width='\",\r\n                sz2_str, \"px' height='\",\r\n                sz2_str, \"px' fill='none' stroke='#\",\r\n                fill, \"' stroke-width='\", Strings.toString(vl(i, tokenId) % 28+4),\r\n                \"pt' id='c\", Strings.toString(i), \"' />\"));       \r\n    }    \r\n    \r\n    // define animation; clunky, but to avoid stack depth issues\r\n    function animDefine(uint256 i, string memory x, string memory y, string memory sign1, \r\n                                    string memory sign2) private view returns (string memory) {\r\n        \r\n        string memory content = string(abi.encodePacked( // swing of a pendulum, back\r\n            \"@keyframes mv\", Strings.toString(i), c[1],\r\n            (bytes(sign1).length==0 ? \"\" : \"-\"), x, \"px,\",\r\n            (bytes(sign2).length==0 ? \"\" : \"-\"), y, \"px\",\r\n            \");opacity:0.25;}50%{transform:translate(0px,0px);opacity:1.0;}60%{transform:translate(\"\r\n        ));\r\n        content = string(abi.encodePacked(content, // and forth\r\n            (bytes(sign1).length==0 ? \"-\" : \"\"), x, \"px,\",\r\n            (bytes(sign2).length==0 ? \"-\" : \"\"), y, \"px\",\r\n            \");opacity:0.25;}100%{transform:translate(0px,0px);opacity:1.0;}}\"\r\n        ));\r\n        \r\n        return content;        \r\n    }\r\n\r\n    // assign animation\r\n    function animAssign(uint256 i, uint256 tm) private pure returns (string memory) {\r\n        string memory content = string(abi.encodePacked(\"#c\", Strings.toString(i),\r\n            \"{animation:mv\", Strings.toString(i), \" \", Strings.toString(tm), \"s infinite ease-in-out;}\"));\r\n        return content;\r\n    }\r\n    \r\n    // create style tag content for circle/rects\r\n    function makeStyle(uint256 i, uint256 tokenId) private view returns (string memory) {\r\n        \r\n        (uint256 period,, uint256 shape) = getAttributes(tokenId);\r\n        \r\n        string memory sign1 = vl(i+1, tokenId) % 2==0 ? \"-\" : \"\";\r\n        string memory sign2 = vl(i+2, tokenId) % 2==0 ? \"-\" : \"\";\r\n        string memory x;\r\n        string memory y;\r\n        uint256 tm = period*26;\r\n        \r\n        if (shape == 0) { // circles\r\n            x = Strings.toString((vl(i, tokenId) % 64)*28);\r\n            y = Strings.toString((vl(i+1, tokenId) % 64)*28);\r\n        } else { // rects\r\n            uint256 f1 = i % 2;\r\n            uint256 f2 = 1 - f1;\r\n            x = Strings.toString(f1*(vl(i, tokenId) % 64)*28);\r\n            y = Strings.toString(f2*(vl(i+1, tokenId) % 64)*28);\r\n        }\r\n        return string(abi.encodePacked(animDefine(i, x, y, sign1, sign2), animAssign(i, tm)));    \r\n    }\r\n\r\n    // real time marker\r\n    function realTimeHand(uint256 tokenId, uint256 timeZone) private view returns (string memory) {\r\n        uint256 deg = ((block.timestamp - timeZone*60*60) % 43200)/120;\r\n        string memory content = string(abi.encodePacked(\"<path d='M -30 -1090 L 0 -940 L 30 -1090' stroke-width='0px' style='transform:rotate(\",\r\n            Strings.toString(deg), \"deg);' id='clock' fill='#\", fcl(tokenId), \"' />\"));\r\n        return content;\r\n    }\r\n\r\n    // real time style tag\r\n    function realTimeAnim(uint256 timeZone) private view returns (string memory) {\r\n        uint256 deg = ((block.timestamp - timeZone*60*60) % 43200)/120;\r\n        string memory content = string(abi.encodePacked(\"@keyframes clockrot{0%{transorm:rotate(\",\r\n            Strings.toString(deg), \"deg);}100%{transform:rotate(\",\r\n            Strings.toString(deg+360), \"deg);}}#clock{animation:clockrot 43200s linear infinite;}\"));\r\n        return content;\r\n    }\r\n\r\n    // hand, distribution, empirical arc, circle frames...\r\n    function frames(uint256 tokenId) private view returns (string memory) {\r\n        (uint256 period,,) = getAttributes(tokenId);\r\n        \r\n        string memory content = string(abi.encodePacked(\r\n            \r\n            \"<circle cx='0px' cy='-\", \r\n                Strings.toString(10+period), \"px' r='\",\r\n                Strings.toString(1240+period), \"px' style='transform:rotate(-\",\r\n                Strings.toString(2000/period/period),\r\n                \"deg);' id='numerarc' fill='none' stroke='#000000' stroke-width='500pt' />\",\r\n\r\n            \"<circle cx='0px' cy='0px' r='1250px' id='inside' fill='none' stroke='#\",\r\n                bcl(3, tokenId), \"' stroke-width='500pt' />\",\r\n                \r\n            \"<circle cx='0px' cy='0px' r='1350px' id='outside' fill='none' stroke='#\",\r\n                bcl(5, tokenId), \"' stroke-width='400pt' />\"\r\n        ));\r\n        \r\n        content = string(abi.encodePacked(content,\r\n        \r\n            ticks(tokenId),\r\n                \r\n            \"<circle cx='0px' cy='900px' r='100px' id='hand' fill='#\",\r\n                fcl(tokenId), \"' />\",\r\n                \r\n            \"<path d='M-500 961 C -250 961, -250 700, 0 700, 250 700, 250 961, 500 961, A1000 1000 1 0 1 -500 961' id='gauss' fill='#\",\r\n                bcl(7, tokenId), \"' />\"             \r\n                \r\n        ));\r\n\r\n        return content;\r\n    }\r\n    \r\n    // attribs determined by tokenId\r\n    function getAttributes(uint256 tokenId) private pure returns (uint256, uint256, uint256) {\r\n        // period / color / shape\r\n        return(\r\n                2**((tokenId - 1) % 5 + 1),\r\n                tokenId % 2 == 0 ? 1 : 0,\r\n                tokenId % 3 == 0 ? 1 : 0\r\n            );\r\n    }\r\n    \r\n    // text adornments; awkward concatenation due to stack depth\r\n    function accessories(uint256 tokenId) private view returns (string memory) {\r\n        (uint256 totToks,) = getNftBalance(ownerOf(tokenId));\r\n        (uint256 period,,) = getAttributes(tokenId);\r\n        \r\n        string memory content = string(abi.encodePacked(\r\n            \r\n            \"<text x='-980px' y='920px' font-size='.8em' id='tokenId' fill='#\",\r\n                fcl(tokenId), \"55'>Timepiece #\", Strings.toString(tokenId), \"</text>\",\r\n            \r\n            \"<text x='-980px' y='940px' font-size='.8em' id='ownerCnt' fill='#\",\r\n                fcl(tokenId), \"55'>Owner on-chain count: \",\r\n                Strings.toString(totToks), \"</text>\"\r\n                \r\n        ));\r\n        \r\n        content = string(abi.encodePacked(content,\r\n        \r\n            \"<text x='-980px' y='960px' font-size='.8em' id='signat' fill='#\",\r\n                fcl(tokenId), \"55'>takenstheorem 2021 | Gaussian Timepieces</text>\",\r\n        \r\n            \"<text x='-980px' y='980px' font-size='.8em' id='owner' fill='#\",\r\n                fcl(tokenId), \"55'>Owner: 0x\", Strings.toAsciiString(ownerOf(tokenId)), \"</text>\"\r\n                \r\n        ));        \r\n        \r\n        content = string(abi.encodePacked(content,\r\n        \r\n            \"<text x='0px' y='860px' font-size='5em' fill='#\",\r\n                fcl(tokenId), \"66' text-anchor='middle' dominant-baseline='central' id='blockPeriod'>+\",\r\n                Strings.toString(period), \"</text>\",\r\n        \r\n            \"<text x='0px' y='770px' font-size='2.8em' fill='#\",\r\n                fcl(tokenId), \"aa' text-anchor='middle' dominant-baseline='central' id='gasPrice'>\",\r\n                rep(2, tokenId), \"</text>\"\r\n                \r\n        ));\r\n        \r\n        content = string(abi.encodePacked(content,\r\n        \r\n            \"<text x='-180px' y='940px' font-size='2.1em' fill='#\",\r\n                fcl(tokenId), \"66' text-anchor='middle' dominant-baseline='central' id='blockSt'>\",\r\n                Strings.toString(block.number), \"</text>\",    \r\n                \r\n            \"<text x='+180px' y='940px' font-size='2.1em' fill='#\",\r\n                fcl(tokenId), \"66' text-anchor='middle' dominant-baseline='central' id='blockEnd'>\",\r\n                Strings.toString(block.number+period), \"</text>\"\r\n            \r\n        ));\r\n\r\n        return content;\r\n    }\r\n    \r\n    string ncp = 'WAIT';\r\n    string[] private c = ['', ''];\r\n    function setStr(string memory val) public onlyOwner {\r\n        require(bytes(ncp).length > 0, 'ERROR: Already configured');\r\n        if (bytes(c[0]).length == 0) {\r\n            c[0] = val;\r\n        } else if (bytes(c[1]).length == 0) {\r\n            c[1] = val;\r\n        } else if (bytes(ncp).length > 0) {\r\n            ncp = val;        \r\n        }\r\n    }    \r\n    \r\n    // repeat chars; used for bezel and gas price\r\n    function rep(uint256 char, uint256 tokenId) private view returns (string memory) {\r\n        \r\n        if (char == 2) {\r\n            uint256 gasVal = (block.basefee / 1000000000) / 25;\r\n            if (gasVal > 12) {\r\n                gasVal = 12;\r\n            }\r\n            return Strings.subString(\"****************\", 0, gasVal+1);\r\n        }\r\n        \r\n        (uint256 totToks,uint256 totProjs) = getNftBalance(ownerOf(tokenId));\r\n        if (totToks > 30) {\r\n            totToks = 30;\r\n        }\r\n        \r\n        if (char == 0) { \r\n            return Strings.subString(\"|||||||||||||||||||||||||||||||||||\", 0, totToks);\r\n        } else {\r\n            return Strings.subString(\"|||||||||||||||||||||||||||||||||||\", 0, 2*totProjs);\r\n        }\r\n    }\r\n    \r\n    // ticks of ownership on-chain on left/right bezel\r\n    function ticks(uint256 tokenId) private view returns (string memory) {\r\n        \r\n        string memory content = string(abi.encodePacked(\r\n            \r\n            \"<path d='M400 920 A950 950 180 0 0 -400 -920' stroke='none' fill='none' id='numProjPath' />\",\r\n            \r\n            \"<text font-size='3em' id='numProjOn' fill='#\",\r\n                fcl(tokenId), \"'><textPath textLength='2600' href='#numProjPath'>\",\r\n                rep(0, tokenId), \"</textPath></text>\"    \r\n            \r\n        ));\r\n        \r\n        content = string(abi.encodePacked(content,\r\n            \r\n            \"<path d='M-400 920 A950 950 -180 1 1 400 -920' stroke='none' fill='none' id='numNftPath' />\",\r\n            \r\n            \"<text font-size='3em' id='numNftOn' fill='#\",\r\n                fcl(tokenId), \"' dominant-baseline='hanging' ><textPath textLength='2600' href='#numNftPath'>\",\r\n                rep(1, tokenId), \"</textPath></text>\"\r\n        \r\n        ));\r\n        \r\n        return content;\r\n        \r\n    }\r\n\r\n    // compute # of on-chain nfts and # of projects owned\r\n    function getNftBalance(address addr) private view returns (uint256, uint256) { // totTok,totProjs\r\n        uint256[] memory projCounts = new uint256[](15);\r\n        projCounts[0] = externalNft(0x31C70e9a1BAb16f47710E4B302c49998Cfb36ef9).balanceOf(addr); // CryptoSketches\r\n        projCounts[1] = externalNft(0xd4e4078ca3495DE5B1d4dB434BEbc5a986197782).balanceOf(addr); // Autoglyphs\r\n        projCounts[2] = externalNft(0x60F3680350F65Beb2752788cB48aBFCE84a4759E).balanceOf(addr); // Colorglyphs\r\n        projCounts[3] = externalNft(0x91047Abf3cAb8da5A9515c8750Ab33B4f1560a7A).balanceOf(addr); // ChainFaces\r\n        projCounts[4] = externalNft(0xF3E778F839934fC819cFA1040AabaCeCBA01e049).balanceOf(addr); // Avastars\r\n        projCounts[5] = externalNft(0x36F379400DE6c6BCDF4408B282F8b685c56adc60).balanceOf(addr); // Squiggly\r\n        projCounts[6] = externalNft(0xB2D6fb1Dc231F97F8cC89467B52F7C4F78484044).balanceOf(addr); // Neolastics\r\n        projCounts[7] = externalNft(0x46F9A4522666d2476a5F5Cd51ea3E0b5800E7f98).balanceOf(addr); // TinyBoxes\r\n        projCounts[8] = externalNft(0x8FdDE660C3cCAb82756AcC5233687a4CeB4B8f30).balanceOf(addr); // Etherpoems\r\n        projCounts[9] = externalNft(0x8d04a8c79cEB0889Bdd12acdF3Fa9D207eD3Ff63).balanceOf(addr); // Blitmap\r\n        projCounts[10] = externalNft(0xDaCa87395f3b1Bbc46F3FA187e996E03a5dCc985).balanceOf(addr); // Mandala\r\n        projCounts[11] = externalNft(0x5D4683bA64Ee6283bB7FDB8A91252F6aAB32A110).balanceOf(addr); // Genesis [sol]Seedlings\r\n        projCounts[12] = externalNft(0xEA61926B4C8B5f8E2bC6f85C0BD800969dc79fcf).balanceOf(addr); // 512 [sol]Seedlings\r\n        projCounts[13] = externalNft(0xd31fC221D2b0E0321C43E9F6824b26ebfFf01D7D).balanceOf(addr); // Brotchain\r\n        projCounts[14] = externalNft(0xf76c5d925b27a63a3745A6b787664A7f38fA79bd).balanceOf(addr); // the_coin\r\n        \r\n        uint256 totToks = 0;\r\n        uint256 totProjs = 0;\r\n        for (uint256 i = 0; i < 15; i++){\r\n            totToks = totToks + projCounts[i];\r\n            if (projCounts[i] > 0) {\r\n                totProjs = totProjs + 1;    \r\n            }\r\n        }\r\n        \r\n        return(totToks, totProjs);\r\n    }\r\n\r\n    // build all style tag contents\r\n    function buildAllStyles(uint256 tokenId, uint256 nEls) private view returns (string memory) {\r\n        string memory content = '';\r\n        for (uint256 i = 0; i < nEls; i++) {\r\n            content = string(abi.encodePacked(content, makeStyle(i,tokenId)));\r\n        }        \r\n        return content;\r\n    }\r\n    \r\n    // build all svg elements\r\n    function buildAllEls(uint256 tokenId, uint256 nEls) private view returns (string memory) {\r\n        (,,uint256 shape) = getAttributes(tokenId);\r\n        string memory content = '';\r\n        uint256 i = nEls;\r\n        while (i != 0) { // decouple colors/locs\r\n            i = i - 1;\r\n            if (shape == 0) {\r\n                content = string(abi.encodePacked(content, makeCircle(i, tokenId)));        \r\n            } else {\r\n                content = string(abi.encodePacked(content, makeRect(i, tokenId)));        \r\n            }\r\n        }        \r\n        return content;\r\n    }\r\n    \r\n    // raw svg\r\n    function reveal(uint256 tokenId, uint256 timeZone) public view returns (string memory) {\r\n        require(bytes(ncp).length == 0, \"ERROR: Misconfigured\");\r\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\r\n        (uint256 totToks,) = getNftBalance(ownerOf(tokenId));\r\n        (uint256 period,,) = getAttributes(tokenId);\r\n        \r\n        uint256 nEls = period/2 + ownerOf(tokenId).balance / 1000000000000000000 + totToks;\r\n        if (nEls > 16) {\r\n            nEls = 16;\r\n        }\r\n        \r\n        string memory content = buildAllStyles(tokenId, nEls);\r\n\r\n        content = string(abi.encodePacked(content, \"@keyframes handrot{0%{transorm:rotate(0deg);}100%{transform:rotate(360deg);}}#hand{animation:handrot \",\r\n             Strings.toString(period*13), \"s linear infinite;}\", realTimeAnim(timeZone),\"</style>\"));\r\n\r\n        content = string(abi.encodePacked(content, buildAllEls(tokenId, nEls)));\r\n\r\n        bytes memory _img = abi.encodePacked(svg_start, content,\r\n                frames(tokenId), accessories(tokenId), realTimeHand(tokenId, timeZone),\r\n                 '</svg>'\r\n             );\r\n        return string(_img);\r\n    }\r\n\r\n    function mintNFT_n(uint256 n) public onlyOwner {\r\n        require(_tokenIds.current() < 100,'ERROR: minting complete');\r\n        for (uint i = 0; i < n; i++) {\r\n            if (_tokenIds.current() == 100) { // avoid accidental overring\r\n                break;\r\n            }\r\n            _tokenIds.increment();\r\n            uint256 newItemId = _tokenIds.current();\r\n            _mint(msg.sender, newItemId);\r\n        }\r\n    }\r\n\r\n    // to single string\r\n    function ts1(address addr, uint256 i1) private pure returns (string memory) {\r\n        return Strings.subString(Strings.toAsciiString(addr), i1, i1+1); \r\n    }\r\n    \r\n    // to double string\r\n    function ts2(address addr, uint256 i1) private pure returns (string memory) {\r\n        return Strings.subString(Strings.toAsciiString(addr), i1, i1+2); \r\n    }\r\n    \r\n    // make random color\r\n    function cl(uint256 i, uint256 tokenId) private view returns (string memory) {\r\n        address baseContent = address(getRandBase(tokenId));\r\n        return Strings.subString(Strings.toAsciiString(baseContent), i, i+6);    \r\n    }\r\n    \r\n    // get bg color byte\r\n    function gbcl(string memory cols, uint256 i, uint256 tokenId) private view returns (string memory) {\r\n        return Strings.subString(cols, vl(i,tokenId)%5, vl(i,tokenId)%5+1);\r\n    }\r\n    \r\n    // get random base for vl and other pseudorandom functions\r\n    function getRandBase(uint256 tokenId) private view returns (bytes20) {\r\n        (uint256 period,,) = getAttributes(tokenId);\r\n        return bytes20(keccak256(abi.encodePacked(ownerOf(tokenId), block.number / period, tokenId)));\r\n    }\r\n    \r\n    // background color\r\n    function bcl(uint256 i, uint256 tokenId) private view returns (string memory) {\r\n        (,uint256 color,) = getAttributes(tokenId);\r\n        address baseContent = address(getRandBase(tokenId));\r\n        string[] memory bgc = new string[](3);\r\n        if (color == 0) { // dark mode\r\n            bgc[0] = gbcl(\"1234567\", i, tokenId); \r\n            bgc[1] = gbcl(\"1234567\", i+1, tokenId);\r\n            bgc[2] = gbcl(\"1234567\", i+2, tokenId);\r\n            return string(abi.encodePacked(\r\n                bgc[0], ts1(baseContent, i),\r\n                bgc[1], ts1(baseContent, i+2),\r\n                bgc[2], ts1(baseContent, i+4)));\r\n        } else { // light mode\r\n            bgc[0] = gbcl(\"9abcde\", i, tokenId);\r\n            bgc[1] = gbcl(\"9abcde\", i+1, tokenId);\r\n            bgc[2] = gbcl(\"9abcde\", i+2, tokenId);\r\n            return string(abi.encodePacked(\r\n                bgc[0], ts1(baseContent, i),\r\n                bgc[1], ts1(baseContent, i+2),\r\n                bgc[2], ts1(baseContent, i+4)));\r\n        }\r\n    }\r\n    \r\n    // foreground\r\n    function fcl(uint256 tokenId) private pure returns (string memory) {\r\n        (,uint256 color,) = getAttributes(tokenId);\r\n        if (color == 0) {\r\n            return 'ffffff';\r\n        } \r\n        return '000000';\r\n    }    \r\n    \r\n    // pseudorandom value\r\n    function vl(uint256 i, uint256 tokenId) private view returns (uint256) {\r\n        bytes20 baseContent = getRandBase(tokenId);\r\n        return uint256(uint8(baseContent[i]));\r\n    }\r\n    \r\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\r\n        require(bytes(ncp).length==0, \"ERROR: Misconfigured\");\r\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\r\n        \r\n        bytes memory json = abi.encodePacked('{\"name\":\"', string(abi.encodePacked('Timepiece #', Strings.toString(tokenId))),\r\n                                            '\", \"description\":\"Transitions across stochasticity towards another inevitable block height.',\r\n                                            '\", \"attributes\":[', makeAttributes(tokenId),\r\n                                            '], \"created_by\":\"Takens Theorem\", \"image\":\"',\r\n            reveal(tokenId, 0), '\"}');\r\n        \r\n        return string(abi.encodePacked('data:text/plain,', json));\r\n        \r\n    }\r\n     \r\n    constructor() ERC721(\"Gaussian Timepieces by Takens Theorem\", \"GTPTT1\") {}    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"mintNFT_n\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeZone\",\"type\":\"uint256\"}],\"name\":\"reveal\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"setStr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GTPTT1","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e2c8e4d3ed5b9398be13969b645ccc02f1f276a5b4b820c63191f8d6473108da"}]}