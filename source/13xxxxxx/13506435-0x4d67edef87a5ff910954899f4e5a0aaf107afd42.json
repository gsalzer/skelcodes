{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        return _functionCallWithValue(target, data, value, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor ()  {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"},\"TokenContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n// Website : https://bluesparrowtoken.com/\\r\\n// Discord : https://discord.gg/M4wJ5zwe\\r\\n// Twitter : http://twitter.com/BlueSparrowETH\\r\\n// Telegram: https://t.me/BlueSparrowToken\\r\\n\\r\\n\\r\\npragma solidity  ^0.8.7;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n\\r\\n//An interface contract to interact with VRF random number generate \\\"chainLink\\\"\\r\\n\\r\\ninterface RNG{\\r\\n    function getRandomNumber() external;\\r\\n    function randomResult() view external returns (uint256);\\r\\n}\\r\\n\\r\\ncontract BlueSparrow is Context, IERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n    \\r\\n\\r\\n  \\r\\n    mapping (address =\\u003e uint256) private _rOwned;\\r\\n    mapping (address =\\u003e uint256) private _tOwned;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n    mapping (address =\\u003e bool) private _isExcluded;\\r\\n    \\r\\n    address[] private _excluded;\\r\\n   \\r\\n    uint256 private constant MAX = ~uint256(0);\\r\\n    uint256 private constant _tTotal = 10**17 * 10**9 ;\\r\\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\\r\\n    uint256 private _tFeeTotal;\\r\\n\\r\\n    string private _name = \\\"BlueSparrowToken\\\";\\r\\n    string private _symbol = \\\"BlueSparrow\\\";\\r\\n    uint8  private _decimals = 9;\\r\\n\\r\\n           \\r\\n    //Array for store list of eligible holders for draw\\r\\n    \\r\\n    address[] public _DrawHolders;                             \\r\\n\\r\\n\\r\\n    //To make sure not duplicate an address in draw holders\\r\\n    \\r\\n    mapping (address =\\u003e bool) private _ExistInDrawHolders;\\r\\n\\r\\n\\r\\n    // fees; Total fee = 5%\\r\\n\\r\\n    uint256 private _marketingFee    = 50;         // 0.5%     marketing fee \\r\\n    uint256 private _burnFee         = 100;        // 1%       burn \\r\\n    uint256 private _charityFee      = 50;         // 0.5%     charity\\r\\n    uint256 private _reward          = 200;        // 2%       Public reward\\r\\n    uint256 private _draw            = 45;         // 0.45%    daily and weekly draw\\r\\n    uint256 private _mounthlyDraw    = 5;          // 0.05%    mounthly draw\\r\\n    uint256 private _devFee          = 50;         // 0.5%     dev wallet        \\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    // Addresses for store fee \\u0026 burn Address\\r\\n     \\r\\n    address public  marketingWallet;\\r\\n    address public  charityWallet;\\r\\n    address public  mounthlyDrawWallet;             // An address that Accumulate fee for mounthly draw\\r\\n    address public  devWallet;\\r\\n    address private immutable burnAddress = 0x000000000000000000000000000000000000dEaD;\\r\\n    \\r\\n\\r\\n    // A struct data type for fees\\r\\n    \\r\\n    struct feeData {\\r\\n\\r\\n        uint256 rAmount;\\r\\n        uint256 rTransferAmount;\\r\\n        uint256 rReward;\\r\\n        uint256 rMarketing;\\r\\n        uint256 rBurn;\\r\\n        uint256 rDraw;\\r\\n        uint256 rCharity;\\r\\n        uint256 rDev;\\r\\n        uint256 rMounthlyDraw;\\r\\n\\r\\n        uint256 tAmount;\\r\\n        uint256 tTransferAmount;\\r\\n        uint256 tReward;\\r\\n        uint256 tMarketing;\\r\\n        uint256 tBurn;\\r\\n        uint256 tDraw;\\r\\n        uint256 tCharity;\\r\\n        uint256 tDev;\\r\\n        uint256 tMounthlyDraw;\\r\\n\\r\\n        uint256 currentRate;\\r\\n    } \\r\\n      \\r\\n    // Maximum transaction amount  \\r\\n     \\r\\n    uint256 public _maxTxAmount; \\r\\n\\r\\n    // Minimum number of token to be eligible for draw \\r\\n\\r\\n    uint256 public _minCoAmount;\\r\\n    \\r\\n    \\r\\n    // RNG Instance \\r\\n    \\r\\n    RNG _RNG;\\r\\n\\r\\n    //Constructor that feed VRF contract Address, and et.\\r\\n\\r\\n    constructor(address VRFcontractAddress, address _marketingWallet, address _charityWallet, address _mounthlyDrawWallet, address _devWallet, uint256 minCoAmount)  {\\r\\n           \\r\\n       _rOwned[_msgSender()] = _rTotal;\\r\\n       emit Transfer(address(0), _msgSender(), _tTotal);\\r\\n\\r\\n       _RNG = RNG(VRFcontractAddress);\\r\\n\\r\\n       marketingWallet      = _marketingWallet;\\r\\n       charityWallet        = _charityWallet;\\r\\n       mounthlyDrawWallet   = _mounthlyDrawWallet;\\r\\n       devWallet            = _devWallet;\\r\\n       _minCoAmount         = minCoAmount;\\r\\n \\r\\n    }   \\r\\n   \\r\\n      \\r\\n   \\r\\n\\r\\n    //the ERC20 function\\u0027s \\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public pure override returns (uint256) {\\r\\n        return _tTotal;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        if (_isExcluded[account]) return _tOwned[account];\\r\\n        return tokenFromReflection(_rOwned[account]);\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function isExcluded(address account) public view returns (bool) {\\r\\n        return _isExcluded[account];\\r\\n    }\\r\\n\\r\\n    function totalFees() public view returns (uint256) {\\r\\n        return _tFeeTotal;\\r\\n    }\\r\\n\\r\\n    //Set minimum number of token for draw\\r\\n\\r\\n    function setMinCoAmount(uint256 minCoAmount) external onlyOwner(){\\r\\n        _minCoAmount = minCoAmount.mul(10**9);\\r\\n    }\\r\\n    \\r\\n    \\r\\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\\r\\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(\\r\\n            10**4\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function changeAddresses(address _marketingWallet, address _charityWallet, address _mounthlyDrawWallet, address _devWallet ) public onlyOwner() {\\r\\n        marketingWallet      = _marketingWallet;\\r\\n        charityWallet        = _charityWallet;\\r\\n        mounthlyDrawWallet   = _mounthlyDrawWallet;\\r\\n        devWallet            = _devWallet;\\r\\n    }\\r\\n\\r\\n    function reflect(uint256 tAmount) public {\\r\\n        address sender = _msgSender();\\r\\n        require(!_isExcluded[sender], \\\"Excluded addresses cannot call this function\\\");\\r\\n        feeData memory fd = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(fd.rAmount);\\r\\n        _rTotal = _rTotal.sub(fd.rAmount);\\r\\n        _tFeeTotal = _tFeeTotal.add(tAmount);\\r\\n    }\\r\\n\\r\\n   function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\\r\\n        require(tAmount \\u003c= _tTotal, \\\"Amount must be less than supply\\\");\\r\\n        if (!deductTransferFee) {\\r\\n           feeData memory fd = _getValues(tAmount);\\r\\n            return fd.rAmount;\\r\\n        } else {\\r\\n            feeData memory fd = _getValues(tAmount);\\r\\n            return fd.rTransferAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\\r\\n        require(rAmount \\u003c= _rTotal, \\\"Amount must be less than total reflections\\\");\\r\\n        uint256 currentRate = _getRate();\\r\\n        return rAmount.div(currentRate);\\r\\n    } \\r\\n\\r\\n    function excludeAccount(address account) external onlyOwner() {\\r\\n        require(!_isExcluded[account], \\\"Account is already excluded\\\");\\r\\n        if(_rOwned[account] \\u003e 0) {\\r\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\r\\n        }\\r\\n        _isExcluded[account] = true;\\r\\n        _excluded.push(account);\\r\\n    }\\r\\n\\r\\n   function includeAccount(address account) external onlyOwner() {\\r\\n        require(_isExcluded[account], \\\"Account is already excluded\\\");\\r\\n        for (uint256 i = 0; i \\u003c _excluded.length; i++) {\\r\\n            if (_excluded[i] == account) {\\r\\n                _excluded[i] = _excluded[_excluded.length - 1];\\r\\n                _tOwned[account] = 0;\\r\\n                _isExcluded[account] = false;\\r\\n                _excluded.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    } \\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n   function takeTransactionFee(address to, uint256 tAmount, uint256 currentRate) private {\\r\\n        if (tAmount \\u003c= 0) { return; }\\r\\n\\r\\n        uint256 rAmount = tAmount.mul(currentRate);\\r\\n        _rOwned[to] = _rOwned[to].add(rAmount);\\r\\n        if (_isExcluded[to]) {\\r\\n            _tOwned[to] = _tOwned[to].add(tAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calculateFee(uint256 amount, uint256 _fee) private pure returns (uint256) {\\r\\n        return amount.mul(_fee).div(10000);\\r\\n    }\\r\\n\\r\\n    // note:the draw mechanism will randomly choose 7 addresses from eligible holders\\r\\n\\r\\n         \\r\\n\\r\\n    uint256 public randomResult;                       // Store VRF random number \\r\\n    uint256 public _accumulatedDailyReward;            // Accumulated Daily reward \\r\\n    uint256 public _accumulatedWeeklyReward;           // Accumulated weekly Reward\\r\\n    uint256[] private _indexOfWinners ;                // Index of winner \\r\\n    address[] public _Winners;                         // Daily and weekly Winners addresses\\r\\n    \\r\\n\\r\\n    function takeDrawFee(uint256 tDraw) private {\\r\\n\\r\\n        _accumulatedDailyReward  = _accumulatedDailyReward.add(tDraw.mul(7).div(9));\\r\\n        _accumulatedWeeklyReward = _accumulatedWeeklyReward.add(tDraw.mul(2).div(9));\\r\\n    }\\r\\n\\r\\n     \\r\\n   //An instance of RNG contract interface\\r\\n   \\r\\n   \\r\\n    \\r\\n    function getRandomNumber() public onlyOwner() {\\r\\n        _RNG.getRandomNumber();\\r\\n    }\\r\\n\\r\\n    function getResult() public onlyOwner() returns(uint256){\\r\\n        return randomResult = _RNG.randomResult();\\r\\n    }\\r\\n\\r\\n    function pickIndexOfWinners() public onlyOwner() {\\r\\n\\r\\n       uint256[] memory indexOfWinners = new uint256[](7);\\r\\n     \\r\\n        for (uint256 i = 0; i \\u003c 7; i++) {\\r\\n          indexOfWinners[i] = (uint256(keccak256(abi.encode(randomResult, i)))% _DrawHolders.length);\\r\\n        }\\r\\n\\r\\n        _indexOfWinners = indexOfWinners;\\r\\n    } \\r\\n    \\r\\n\\r\\n    function pickWinners() public onlyOwner() {\\r\\n        address[] memory Winners = new address[](7);\\r\\n        \\r\\n        for (uint256 i= 0; i \\u003c 7; i++){\\r\\n            Winners[i] = _DrawHolders[_indexOfWinners[i]];\\r\\n        }\\r\\n        \\r\\n        _Winners = Winners;\\r\\n        delete _indexOfWinners;\\r\\n     }\\r\\n    \\r\\n    \\r\\n    //Transfer Reward to Daily Winners\\r\\n        \\r\\n    function _enterDaWinReward() public onlyOwner() {  \\r\\n        \\r\\n        uint256 currentRate =  _getRate();\\r\\n        \\r\\n        for (uint256 i = 0; i \\u003c 7; i++) {\\r\\n         _rOwned[_Winners[i]] = _rOwned[_Winners[i]].add(_accumulatedDailyReward.div(7).mul(currentRate));\\r\\n        }\\r\\n        \\r\\n        delete _Winners;\\r\\n        _accumulatedDailyReward = 0;\\r\\n    }\\r\\n\\r\\n    //Transfer Reward to Weekly Winners\\r\\n\\r\\n    function _enterWeWinReward() public onlyOwner() {\\r\\n        \\r\\n        uint256 currentRate =  _getRate();\\r\\n        \\r\\n         for (uint256 i = 0; i \\u003c 7; i++) {\\r\\n         _rOwned[_Winners[i]] = _rOwned[_Winners[i]].add(_accumulatedWeeklyReward.div(7).mul(currentRate));\\r\\n          \\r\\n        }\\r\\n        \\r\\n        delete _Winners;\\r\\n        _accumulatedWeeklyReward = 0;\\r\\n        \\r\\n        \\r\\n    }  \\r\\n     \\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) private {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount \\u003e 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n        if(sender != owner() \\u0026\\u0026 recipient != owner())\\r\\n          require(amount \\u003c= _maxTxAmount, \\\"Transfer amount exceeds the maxTxAmount.\\\");\\r\\n            \\r\\n        if (_isExcluded[sender] \\u0026\\u0026 !_isExcluded[recipient]) {\\r\\n            _transferFromExcluded(sender, recipient, amount);\\r\\n        } else if (!_isExcluded[sender] \\u0026\\u0026 _isExcluded[recipient]) {\\r\\n            _transferToExcluded(sender, recipient, amount);\\r\\n        } else if (!_isExcluded[sender] \\u0026\\u0026 !_isExcluded[recipient]) {\\r\\n            _transferStandard(sender, recipient, amount);\\r\\n        } else if (_isExcluded[sender] \\u0026\\u0026 _isExcluded[recipient]) {\\r\\n            _transferBothExcluded(sender, recipient, amount);\\r\\n        } else {\\r\\n            _transferStandard(sender, recipient, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\r\\n    \\r\\n    //Exclude from draw array\\r\\n\\r\\n     function ExcludeFEA (address _address) private {\\r\\n         for (uint256 j = 0; j \\u003c _DrawHolders.length; j++) {\\r\\n                  if( _DrawHolders[j] == _address){\\r\\n                  _DrawHolders[j] = _DrawHolders[_DrawHolders.length - 1];\\r\\n                  _ExistInDrawHolders[_address] = false;\\r\\n                  _DrawHolders.pop();\\r\\n                 break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n                    \\r\\n    // Once array stored, \\\"checkState\\\" will check the eligible account for any further transfer               \\r\\n     \\r\\n       \\r\\n    address[2] _addresses;\\r\\n    \\r\\n    function checkState() private {\\r\\n            \\r\\n        for(uint256 i=0; i\\u003c2; i++){\\r\\n\\r\\n            if( _minCoAmount \\u003c= tokenFromReflection(_rOwned[_addresses[i]]) \\u0026\\u0026 !_ExistInDrawHolders[_addresses[i]]) {\\r\\n               \\r\\n                _DrawHolders.push(_addresses[i]);\\r\\n                _ExistInDrawHolders[_addresses[i]] = true;\\r\\n               } \\r\\n                 else if (tokenFromReflection(_rOwned[_addresses[i]]) \\u003c _minCoAmount \\u0026\\u0026 _ExistInDrawHolders[_addresses[i]]){\\r\\n                             ExcludeFEA(_addresses[i]);               \\r\\n            } \\r\\n        } \\r\\n        delete _addresses;\\r\\n    }\\r\\n    \\r\\n\\r\\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\\r\\n\\r\\n        feeData memory fd = _getValues(tAmount);\\r\\n        \\r\\n        \\r\\n        _rOwned[sender] = _rOwned[sender].sub(fd.rAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(fd.rTransferAmount);    \\r\\n\\r\\n        takeTransactionFee(address(charityWallet), fd.tCharity, fd.currentRate);\\r\\n        takeTransactionFee(address(marketingWallet), fd.tMarketing, fd.currentRate);\\r\\n        takeTransactionFee(address(burnAddress), fd.tBurn, fd.currentRate); \\r\\n        takeTransactionFee(address(mounthlyDrawWallet), fd.tDraw, fd.currentRate);\\r\\n        takeTransactionFee(address(devWallet), fd.tDev, fd.currentRate);\\r\\n\\r\\n        takeDrawFee(fd.tDraw);\\r\\n\\r\\n        _reflectFee(fd.rReward, fd.tReward);\\r\\n        emit Transfer(sender, recipient, fd.tTransferAmount);\\r\\n\\r\\n        //check and update state of sender \\u0026 recipient\\r\\n        \\r\\n        _addresses[0] = sender;\\r\\n        _addresses[1] = recipient;\\r\\n        \\r\\n        checkState();\\r\\n        \\r\\n    }  \\r\\n\\r\\n     \\r\\n           \\r\\n\\r\\n\\r\\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n      feeData memory fd = _getValues(tAmount);\\r\\n\\r\\n        _rOwned[sender] = _rOwned[sender].sub(fd.rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient].add(fd.tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(fd.rTransferAmount);\\r\\n\\r\\n        takeTransactionFee(address(charityWallet), fd.tCharity, fd.currentRate);\\r\\n        takeTransactionFee(address(marketingWallet), fd.tMarketing, fd.currentRate);\\r\\n        takeTransactionFee(address(burnAddress), fd.tBurn, fd.currentRate); \\r\\n        takeTransactionFee(address(mounthlyDrawWallet), fd.tMounthlyDraw, fd.currentRate);\\r\\n        takeTransactionFee(address(devWallet), fd.tDev, fd.currentRate);\\r\\n\\r\\n\\r\\n        takeDrawFee(fd.tDraw);\\r\\n\\r\\n        _reflectFee(fd.rReward, fd.tReward);\\r\\n\\r\\n        emit Transfer(sender, recipient, fd.tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n      \\r\\n        feeData memory fd = _getValues(tAmount);\\r\\n\\r\\n        _tOwned[sender] = _tOwned[sender].sub(fd.tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(fd.rAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(fd.rTransferAmount);\\r\\n\\r\\n        takeTransactionFee(address(charityWallet), fd.tCharity, fd.currentRate);\\r\\n        takeTransactionFee(address(marketingWallet), fd.tMarketing, fd.currentRate);\\r\\n        takeTransactionFee(address(burnAddress), fd.tBurn, fd.currentRate); \\r\\n        takeTransactionFee(address(mounthlyDrawWallet), fd.tMounthlyDraw, fd.currentRate);\\r\\n        takeTransactionFee(address(devWallet), fd.tDev, fd.currentRate);\\r\\n\\r\\n\\r\\n        takeDrawFee(fd.tDraw);\\r\\n\\r\\n        _reflectFee(fd.rReward, fd.tReward);\\r\\n        \\r\\n        emit Transfer(sender, recipient, fd.tTransferAmount);\\r\\n\\r\\n    }\\r\\n\\r\\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n        \\r\\n        feeData memory fd  = _getValues(tAmount);\\r\\n\\r\\n        _tOwned[sender]    = _tOwned[sender].sub(fd.tAmount);\\r\\n        _rOwned[sender]    = _rOwned[sender].sub(fd.rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient].add(fd.tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(fd.rTransferAmount);\\r\\n\\r\\n        takeTransactionFee(address(charityWallet), fd.tCharity, fd.currentRate);\\r\\n        takeTransactionFee(address(marketingWallet), fd.tMarketing, fd.currentRate);\\r\\n        takeTransactionFee(address(burnAddress), fd.tBurn, fd.currentRate); \\r\\n        takeTransactionFee(address(mounthlyDrawWallet), fd.tMounthlyDraw, fd.currentRate);\\r\\n        takeTransactionFee(address(devWallet), fd.tDev, fd.currentRate);\\r\\n\\r\\n\\r\\n        takeDrawFee(fd.tDraw);\\r\\n\\r\\n        _reflectFee(fd.rReward, fd.tReward);\\r\\n        \\r\\n        emit Transfer(sender, recipient, fd.tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _reflectFee(uint256 rReward, uint256 tReward) private {\\r\\n        _rTotal = _rTotal.sub(rReward);\\r\\n        _tFeeTotal = _tFeeTotal.add(tReward);\\r\\n    }\\r\\n\\r\\n    function _getValues(uint256 tAmount) private view returns (feeData memory) {\\r\\n        feeData memory intermediate = _getTValues(tAmount);\\r\\n        uint256 currentRate         =  _getRate();\\r\\n        feeData memory res          = _getRValues(intermediate, currentRate);\\r\\n        return res;\\r\\n    }\\r\\n\\r\\n    function _getTValues(uint256 tAmount) private view returns (feeData memory) {\\r\\n        feeData memory fd;\\r\\n        fd.tAmount          = tAmount;\\r\\n        fd.tReward          = calculateFee(tAmount, _reward);\\r\\n        fd.tCharity         = calculateFee(tAmount, _charityFee);\\r\\n        fd.tMarketing       = calculateFee(tAmount, _marketingFee);\\r\\n        fd.tBurn            = calculateFee(tAmount, _burnFee);\\r\\n        fd.tDraw            = calculateFee(tAmount, _draw);\\r\\n        fd.tMounthlyDraw    = calculateFee(tAmount, _mounthlyDraw);\\r\\n        fd.tDev             = calculateFee(tAmount, _devFee);\\r\\n\\r\\n        fd.tTransferAmount  = tAmount.sub(fd.tReward);\\r\\n        fd.tTransferAmount  = fd.tTransferAmount.sub(fd.tCharity);\\r\\n        fd.tTransferAmount  = fd.tTransferAmount.sub(fd.tMarketing);\\r\\n        fd.tTransferAmount  = fd.tTransferAmount.sub(fd.tBurn);\\r\\n        fd.tTransferAmount  = fd.tTransferAmount.sub(fd.tDraw);\\r\\n        fd.tTransferAmount  = fd.tTransferAmount.sub(fd.tMounthlyDraw);\\r\\n        fd.tTransferAmount  = fd.tTransferAmount.sub(fd.tDev);\\r\\n        return fd;\\r\\n        \\r\\n    }\\r\\n\\r\\n    function _getRValues(feeData memory fd, uint256 currentRate) private pure returns (feeData memory) {\\r\\n\\r\\n        fd.currentRate     = currentRate;\\r\\n        fd.rAmount         = fd.tAmount.mul(fd.currentRate);\\r\\n        fd.rReward         = fd.tReward.mul(fd.currentRate);\\r\\n        fd.rCharity        = fd.tCharity.mul(fd.currentRate);\\r\\n        fd.rMarketing      = fd.tMarketing.mul(fd.currentRate);\\r\\n        fd.rBurn           = fd.tBurn.mul(fd.currentRate);\\r\\n        fd.rDraw           = fd.tDraw.mul(fd.currentRate);\\r\\n        fd.rMounthlyDraw   = fd.tMounthlyDraw.mul(fd.currentRate);\\r\\n        fd.rDev            = fd.tDev.mul(fd.currentRate);\\r\\n\\r\\n        fd.rTransferAmount   = fd.rAmount.sub(fd.rReward);\\r\\n        fd.rTransferAmount   = fd.rTransferAmount.sub(fd.rCharity);\\r\\n        fd.rTransferAmount   = fd.rTransferAmount.sub(fd.rMarketing);\\r\\n        fd.rTransferAmount   = fd.rTransferAmount.sub(fd.rBurn);\\r\\n        fd.rTransferAmount   = fd.rTransferAmount.sub(fd.rDraw);\\r\\n        fd.rTransferAmount   = fd.rTransferAmount.sub(fd.rMounthlyDraw);\\r\\n        fd.rTransferAmount   = fd.rTransferAmount.sub(fd.rDev);\\r\\n\\r\\n        return fd;\\r\\n    }\\r\\n\\r\\n    function _getRate() private view returns(uint256) {\\r\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\r\\n        return rSupply.div(tSupply);\\r\\n    } \\r\\n\\r\\n    function _getCurrentSupply() private view returns(uint256, uint256) {\\r\\n        uint256 rSupply = _rTotal;\\r\\n        uint256 tSupply = _tTotal;      \\r\\n        for (uint256 i = 0; i \\u003c _excluded.length; i++) {\\r\\n            if (_rOwned[_excluded[i]] \\u003e rSupply || _tOwned[_excluded[i]] \\u003e tSupply) return (_rTotal, _tTotal);\\r\\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\\r\\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\\r\\n        }\\r\\n        if (rSupply \\u003c _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\r\\n        return (rSupply, tSupply);\\r\\n    } \\r\\n\\r\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"VRFcontractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_charityWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mounthlyDrawWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minCoAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_DrawHolders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_Winners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_accumulatedDailyReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_accumulatedWeeklyReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_enterDaWinReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_enterWeWinReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minCoAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_charityWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mounthlyDrawWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devWallet\",\"type\":\"address\"}],\"name\":\"changeAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRandomNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mounthlyDrawWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickIndexOfWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"reflect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minCoAmount\",\"type\":\"uint256\"}],\"name\":\"setMinCoAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BlueSparrow","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000da7aaa575950c95e370c292872f8fa0689ebb8e1000000000000000000000000a6f368fc6f4f3f7bbe224b392c50abc1d585f083000000000000000000000000f14b674507390bef4435386a81f7bc4d55386f210000000000000000000000002ca76f9c0d770ce8698f8b5c05c4ecdf5181c72e0000000000000000000000001f054a5e9ac34abd49a3c02078dff1eb9ccb83cf00000000000000000000000000000000000000000000001b1ae4d6e2ef500000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b3d6256c48fe6fcc106aca14bf66c21769c212a76d65e8310f9e605aefa1789e"}]}