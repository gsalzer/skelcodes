{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\ncontract MultiSend is Ownable {\r\n    mapping(address => bool) private _isWhiteList;\r\n\r\n    modifier onlyWhiteList() {\r\n        require(_isWhiteList[msg.sender], \"You do not have execute permission\");\r\n        _;\r\n    }\r\n\r\n    constructor () {\r\n        _isWhiteList[msg.sender] = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function addWhiteList(address[] calldata _account) external onlyOwner() {\r\n        for (uint256 i = 0; i < _account.length; i++) {\r\n            _isWhiteList[_account[i]] = true;\r\n        }\r\n    }\r\n\r\n    function isWhiteList(address _account) public view returns (bool) {\r\n        return _isWhiteList[_account];\r\n    }\r\n\r\n    function RecoverERC20(address tokenAddress) public onlyOwner {\r\n        uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\r\n        TransferHelper.safeTransfer(tokenAddress, msg.sender, balance);\r\n    }\r\n\r\n    function RecoverETH() public onlyWhiteList() {\r\n        address owner = owner();\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n\r\n    function MultiSendETH(address[] calldata _users, uint256 _amount) external payable onlyWhiteList {\r\n        require(_amount != 0, 'amount is 0');\r\n        require(_users.length != 0, 'users is 0');\r\n\r\n        uint256 userCount = _users.length;\r\n        uint256 balance = address(this).balance;\r\n\r\n        require(balance >= _amount * userCount, 'Insufficient balance');\r\n        // send eth\r\n        for (uint256 i = 0; i < userCount; i++) {\r\n            payable(_users[i]).transfer(_amount);\r\n        }\r\n        if (address(this).balance != 0) {\r\n            RecoverETH();\r\n        }\r\n    }\r\n\r\n    function BulkSendETH(address[] calldata _users, uint256[] calldata _amount) external payable onlyWhiteList {\r\n        require(address(this).balance != 0, 'balance is 0');\r\n        require(_amount.length != 0, 'amount is 0');\r\n        require(_users.length != 0, 'users is 0');\r\n\r\n        uint256 amountCount = _amount.length;\r\n        uint256 userCount = _users.length;\r\n\r\n        require(amountCount == userCount, 'counter do not match');\r\n        // send eth\r\n        for (uint256 i = 0; i < userCount; i++) {\r\n            payable(_users[i]).transfer(_amount[i]);\r\n        }\r\n        if (address(this).balance != 0) {\r\n            RecoverETH();\r\n        }\r\n    }\r\n    \r\n    function MultiSendToken(address[] calldata _users, uint256 _amount, address _tokenAddress) external onlyWhiteList {\r\n        require(_amount != 0, 'amount is 0');\r\n        require(_users.length != 0, 'users is 0');\r\n\r\n        uint256 userCount = _users.length;\r\n\r\n        TransferHelper.safeTransferFrom(_tokenAddress, msg.sender, address(this), _amount * userCount);\r\n        // send token\r\n        for (uint256 i = 0; i < userCount; i++) {\r\n            TransferHelper.safeTransfer(_tokenAddress, _users[i], _amount);\r\n        }\r\n        if (IERC20(_tokenAddress).balanceOf(address(this)) != 0) {\r\n            RecoverERC20(_tokenAddress);\r\n        }\r\n    }\r\n\r\n    function BulkSendToken(address[] calldata _users, uint256[] calldata _amount, address _tokenAddress) external onlyWhiteList {\r\n        require(_amount.length != 0, 'amount is 0');\r\n        require(_users.length != 0, 'users is 0');\r\n\r\n        uint256 amountCount = _amount.length;\r\n        uint256 userCount = _users.length;\r\n\r\n        require(amountCount == userCount, 'counter do not match');\r\n        // check amount\r\n        uint256 totalAmount = 0;\r\n        for (uint256 i = 0; i < amountCount; i++) {\r\n            totalAmount += _amount[i];\r\n        }\r\n\r\n        TransferHelper.safeTransferFrom(_tokenAddress, msg.sender, address(this), totalAmount);\r\n        // send token\r\n        for (uint256 i = 0; i < userCount; i++) {\r\n            TransferHelper.safeTransfer(_tokenAddress, _users[i], _amount[i]);\r\n        }\r\n        if (IERC20(_tokenAddress).balanceOf(address(this)) != 0) {\r\n            RecoverERC20(_tokenAddress);\r\n        }\r\n    }\r\n    \r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"BulkSendETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"BulkSendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"MultiSendETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"MultiSendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"RecoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RecoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_account\",\"type\":\"address[]\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MultiSend","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://da18d66796ab789d5ad9d68bf3134e63a69b89418f0bab4dc5caabca82708ac8"}]}