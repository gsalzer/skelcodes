{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-09-01\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicense\r\n\r\n/*\r\n\r\n    Synthetic AnimeLoot\r\n    \r\n    This contract creates a \"virtual NFT\" of AnimeLoot based\r\n    on a given wallet address. \r\n    \r\n    Because the wallet address is used as the deterministic \r\n    seed, there can only be one AnimeLoot Anime Character per wallet. \r\n    \r\n    Because it's not a real NFT, there is no \r\n    minting, transferability, etc.\r\n    \r\n    Creators building on top of AnimeLoot can choose to recognize \r\n    Synthetic AnimeLoot as a way to allow a wider range of \r\n    adventurers to participate in the ecosystem, while\r\n    still being able to differentiate between \r\n    \"original\" AnimeLoot and Synthetic AnimeLoot.\r\n    \r\n    Anyone with an Ethereum wallet has Synthetic AnimeLoot.\r\n    \r\n    -----\r\n    \r\n    Also optionally returns data in AnimeLootComponents format:\r\n    \r\n    Call speciesComponents(), sexComponents(), etc. to get \r\n    an array of attributes that correspond to the item. \r\n    \r\n    The return format is:\r\n    \r\n    uint256[5] =>\r\n        [0] = Item ID\r\n        [1] = 0\r\n        [2] = 0\r\n        [3] = 0\r\n        [4] = Augmentation (0 = false, 1 = true)\r\n    \r\n    See the item and attribute tables below for corresponding IDs.\r\n    \r\n    The original AnimeLootComponents contract is at address:\r\n    0x3D666422fFD721E3999395C2A25dC880D785a72a\r\n\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract SyntheticAnimeLoot {\r\n\r\n    string[] private species = [\r\n        \"Human\",\r\n        \"Therianthrope\",\r\n        \"Elf\",\r\n        \"Dwarf\",\r\n        \"Vampire\",\r\n        \"Merfolk\",\r\n        \"Dragonewt\",\r\n        \"Angel\",\r\n        \"Demon\",\r\n        \"Monster\",\r\n        \"Unknown\"\r\n    ];\r\n    \r\n    string[] private sex = [\r\n        \"Female\",\r\n        \"Male\",\r\n        \"Hermaphrodite\",\r\n        \"Unknown\"\r\n    ];\r\n    \r\n    string[] private heritage = [\r\n        \"High Class\",\r\n        \"Middle Class\",\r\n        \"Low Class\",\r\n        \"Unknown\"\r\n    ];\r\n    \r\n    string[] private personality = [\r\n       \"Serious\",\r\n       \"Frivolous\",\r\n       \"Passionate\",\r\n       \"Cool\",\r\n       \"Confident\",\r\n       \"Diffident\",\r\n       \"Optimistic\",\r\n       \"Pessimistic\",\r\n       \"Rough\",\r\n       \"Gentle\",\r\n       \"Unknown\" \r\n    ];\r\n\r\n    function random(string memory input) internal pure returns (uint256) {\r\n        return uint256(keccak256(abi.encodePacked(input)));\r\n    }\r\n    \r\n    function speciesComponents(address walletAddress) public view returns (uint256[5] memory) {\r\n        return pluck(walletAddress, \"SPECIES\", species);\r\n    }\r\n    \r\n    function sexComponents(address walletAddress) public view returns (uint256[5] memory) {\r\n        return pluck(walletAddress, \"SEX\", sex);\r\n    }\r\n    \r\n    function heritageComponents(address walletAddress) public view returns (uint256[5] memory) {\r\n        return pluck(walletAddress, \"HERITAGE\", heritage);\r\n    }\r\n    \r\n    function personalityComponents(address walletAddress) public view returns (uint256[5] memory) {\r\n        return pluck(walletAddress, \"PERSONALITY\", personality);\r\n    }\r\n    \r\n    function getSpecies(address walletAddress) public view returns (string memory) {\r\n        return pluckName(walletAddress, \"SPECIES\", species);\r\n    }\r\n    \r\n    function getSex(address walletAddress) public view returns (string memory) {\r\n        return pluckName(walletAddress, \"SEX\", sex);\r\n    }\r\n    \r\n    function getHeritage(address walletAddress) public view returns (string memory) {\r\n        return pluckName(walletAddress, \"HERITAGE\", heritage);\r\n    }\r\n    \r\n    function getPersonality(address walletAddress) public view returns (string memory) {\r\n        return pluckName(walletAddress, \"PERSONALITY\", personality);\r\n    }\r\n    \r\n    function pluckName(address walletAddress, string memory keyPrefix, string[] memory sourceArray) internal view returns (string memory) {\r\n        uint256 rand = random(string(abi.encodePacked(keyPrefix, abi.encodePacked(walletAddress))));\r\n        string memory output = sourceArray[rand % sourceArray.length];\r\n        \r\n        return output;\r\n    }\r\n\r\n    function pluck(address walletAddress, string memory keyPrefix, string[] memory sourceArray) internal view returns (uint256[5] memory) {\r\n        uint256[5] memory components;\r\n        \r\n        uint256 rand = random(string(abi.encodePacked(keyPrefix, abi.encodePacked(walletAddress))));\r\n        \r\n        components[0] = rand % sourceArray.length;\r\n        components[1] = 0;\r\n        components[2] = 0;\r\n    \r\n        return components;\r\n    }\r\n    \r\n    function tokenURI(address walletAddress) public view returns (string memory) {\r\n        string[17] memory parts;\r\n        parts[0] = '<svg xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 350 350\"><style>.base { fill: #000000; font-family: serif; font-size: 14px; }</style><rect width=\"100%\" height=\"100%\" fill=\"#FFF100\" /><text x=\"10\" y=\"20\" class=\"base\">';\r\n\r\n        parts[1] = getSpecies(walletAddress);\r\n\r\n        parts[2] = '</text><text x=\"10\" y=\"40\" class=\"base\">';\r\n\r\n        parts[3] = getSex(walletAddress);\r\n\r\n        parts[4] = '</text><text x=\"10\" y=\"60\" class=\"base\">';\r\n\r\n        parts[5] = getHeritage(walletAddress);\r\n\r\n        parts[6] = '</text><text x=\"10\" y=\"80\" class=\"base\">';\r\n\r\n        parts[7] = getPersonality(walletAddress);\r\n\r\n        parts[8] = '</text><text x=\"10\" y=\"100\" class=\"base\">';\r\n\r\n        parts[9] = '';\r\n\r\n        parts[10] = '</text><text x=\"10\" y=\"120\" class=\"base\">';\r\n\r\n        parts[11] = '';\r\n\r\n        parts[12] = '</text><text x=\"10\" y=\"140\" class=\"base\">';\r\n\r\n        parts[13] = '';\r\n\r\n        parts[14] = '</text><text x=\"10\" y=\"160\" class=\"base\">';\r\n\r\n        parts[15] = '';\r\n\r\n        parts[16] = '</text></svg>';\r\n\r\n        string memory output = string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7], parts[8]));\r\n        output = string(abi.encodePacked(output, parts[9], parts[10], parts[11], parts[12], parts[13], parts[14], parts[15], parts[16]));\r\n        \r\n        string memory json = Base64.encode(bytes(string(abi.encodePacked('{\"name\": \"Anime Character 0x', toAsciiString(walletAddress), '\", \"description\": \"AnimeLoot is randomized anime characters generated and stored on chain. Other features of the characters are intentionally omitted for others to interpret. Feel free to use AnimeLoot in any way you want.\", \"image\": \"data:image/svg+xml;base64,', Base64.encode(bytes(output)), '\"}'))));\r\n        output = string(abi.encodePacked('data:application/json;base64,', json));\r\n\r\n        return output;\r\n    }\r\n    \r\n    // https://ethereum.stackexchange.com/a/8447\r\n    function toAsciiString(address x) internal pure returns (string memory) {\r\n        bytes memory s = new bytes(40);\r\n        for (uint i = 0; i < 20; i++) {\r\n            bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8*(19 - i)))));\r\n            bytes1 hi = bytes1(uint8(b) / 16);\r\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\r\n            s[2*i] = char(hi);\r\n            s[2*i+1] = char(lo);            \r\n        }\r\n        return string(s);\r\n    }\r\n    \r\n    // https://ethereum.stackexchange.com/a/8447\r\n    function char(bytes1 b) internal pure returns (bytes1 c) {\r\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\r\n        else return bytes1(uint8(b) + 0x57);\r\n    }\r\n}\r\n\r\n/// [MIT License]\r\n/// @title Base64\r\n/// @notice Provides a function for encoding some bytes in base64\r\n/// @author Brecht Devos <brecht@loopring.org>\r\nlibrary Base64 {\r\n    bytes internal constant TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n    /// @notice Encodes some bytes to the base64 representation\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        uint256 len = data.length;\r\n        if (len == 0) return \"\";\r\n\r\n        // multiply by 4/3 rounded up\r\n        uint256 encodedLen = 4 * ((len + 2) / 3);\r\n\r\n        // Add some extra buffer at the end\r\n        bytes memory result = new bytes(encodedLen + 32);\r\n\r\n        bytes memory table = TABLE;\r\n\r\n        assembly {\r\n            let tablePtr := add(table, 1)\r\n            let resultPtr := add(result, 32)\r\n\r\n            for {\r\n                let i := 0\r\n            } lt(i, len) {\r\n\r\n            } {\r\n                i := add(i, 3)\r\n                let input := and(mload(add(data, i)), 0xffffff)\r\n\r\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\r\n                out := shl(224, out)\r\n\r\n                mstore(resultPtr, out)\r\n\r\n                resultPtr := add(resultPtr, 4)\r\n            }\r\n\r\n            switch mod(len, 3)\r\n            case 1 {\r\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\r\n            }\r\n            case 2 {\r\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\r\n            }\r\n\r\n            mstore(result, encodedLen)\r\n        }\r\n\r\n        return string(result);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"getHeritage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"getPersonality\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"getSex\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"getSpecies\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"heritageComponents\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"personalityComponents\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"sexComponents\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"speciesComponents\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SyntheticAnimeLoot","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ec9d59a32fa9df1b9a861cacc3ae939c45a69329024fa3eb868bcc950eb8d9f2"}]}