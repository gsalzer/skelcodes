{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/HighStreetCorePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./HighStreetPoolBase.sol\\\";\\n\\n/**\\n * @title HIGH Core Pool\\n *\\n * @notice Core pools represent permanent pools like HIGH or HIGH/ETH Pair pool,\\n *      core pools allow staking for arbitrary periods of time up to 1 year\\n *\\n * @dev See HighStreetPoolBase for more details\\n *\\n */\\ncontract HighStreetCorePool is HighStreetPoolBase {\\n    /// @dev Flag indicating pool type, false means \\\"core pool\\\"\\n    bool public constant override isFlashPool = false;\\n\\n    /// @dev Link to deployed vault instance\\n    address public vault;\\n\\n    /// @dev Used to calculate vault rewards\\n    /// @dev This value is different from \\\"reward per token\\\" used in locked pool\\n    /// @dev Note: stakes are different in duration and \\\"weight\\\" reflects that\\n    uint256 public vaultRewardsPerWeight;\\n\\n    /// @dev Pool tokens value available in the pool;\\n    ///      pool token examples are HIGH (HIGH core pool) or HIGH/ETH pair (LP core pool)\\n    /// @dev For LP core pool this value doesnt' count for HIGH tokens received as Vault rewards\\n    ///      while for HIGH core pool it does count for such tokens as well\\n    uint256 public poolTokenReserve;\\n\\n    /**\\n     * @dev Fired in receiveVaultRewards()\\n     *\\n     * @param _by an address that sent the rewards, always a vault\\n     * @param amount amount of tokens received\\n     */\\n    event VaultRewardsReceived(address indexed _by, uint256 amount);\\n\\n    /**\\n     * @dev Fired in _processVaultRewards() and dependent functions, like processRewards()\\n     *\\n     * @param _by an address which executed the function\\n     * @param _to an address which received a reward\\n     * @param amount amount of reward received\\n     */\\n    event VaultRewardsClaimed(address indexed _by, address indexed _to, uint256 amount);\\n\\n    /**\\n     * @dev Fired in setVault()\\n     *\\n     * @param _by an address which executed the function, always a factory owner\\n     */\\n    event VaultUpdated(address indexed _by, address _fromVal, address _toVal);\\n\\n    /**\\n     * @dev Creates/deploys an instance of the core pool\\n     *\\n     * @param _high HIGH ERC20 Token IlluviumERC20 address\\n     * @param _factory Pool factory HighStreetPoolFactory instance/address\\n     * @param _poolToken token the pool operates on, for example HIGH or HIGH/ETH pair\\n     * @param _initBlock initial block used to calculate the rewards\\n     * @param _weight number representing a weight of the pool, actual weight fraction\\n     *      is calculated as that number divided by the total pools weight and doesn't exceed one\\n     */\\n    constructor(\\n        address _high,\\n        HighStreetPoolFactory _factory,\\n        address _poolToken,\\n        uint256 _initBlock,\\n        uint256 _weight\\n    ) HighStreetPoolBase(_high, _factory, _poolToken, _initBlock, _weight) {}\\n\\n    /**\\n     * @notice Calculates current vault rewards value available for address specified\\n     *\\n     * @dev Performs calculations based on current smart contract state only,\\n     *      not taking into account any additional time/blocks which might have passed\\n     *\\n     * @param _staker an address to calculate vault rewards value for\\n     * @return pending calculated vault reward value for the given address\\n     */\\n    function pendingVaultRewards(address _staker) public view returns (uint256 pending) {\\n        User memory user = users[_staker];\\n\\n        return weightToReward(user.totalWeight, vaultRewardsPerWeight) - user.subVaultRewards;\\n    }\\n\\n    /**\\n     * @dev Executed only by the factory owner to Set the vault\\n     *\\n     * @param _vault an address of deployed IlluviumVault instance\\n     */\\n    function setVault(address _vault) external {\\n        // verify function is executed by the factory owner\\n        require(factory.owner() == msg.sender, \\\"access denied\\\");\\n\\n        // verify input is set\\n        require(_vault != address(0), \\\"zero input\\\");\\n\\n        // emit an event\\n        emit VaultUpdated(msg.sender, vault, _vault);\\n\\n        // update vault address\\n        vault = _vault;\\n    }\\n\\n    /**\\n     * @dev Executed by the vault to transfer vault rewards HIGH from the vault\\n     *      into the pool\\n     *\\n     * @dev This function is executed only for HIGH core pools\\n     *\\n     * @param _rewardsAmount amount of HIGH rewards to transfer into the pool\\n     */\\n    function receiveVaultRewards(uint256 _rewardsAmount) external {\\n        require(msg.sender == vault, \\\"access denied\\\");\\n        // return silently if there is no reward to receive\\n        if (_rewardsAmount == 0) {\\n            return;\\n        }\\n        require(usersLockingWeight > 0, \\\"zero locking weight\\\");\\n\\n        transferHighTokenFrom(msg.sender, address(this), _rewardsAmount);\\n\\n        vaultRewardsPerWeight += rewardToWeight(_rewardsAmount, usersLockingWeight);\\n\\n        // update `poolTokenReserve` only if this is a HIGH Core Pool\\n        if (poolToken == HIGH) {\\n            poolTokenReserve += _rewardsAmount;\\n        }\\n\\n        emit VaultRewardsReceived(msg.sender, _rewardsAmount);\\n    }\\n\\n    /**\\n     * @notice Service function to calculate and pay pending vault and yield rewards to the sender\\n     *\\n     * @dev Internally executes similar function `_processRewards` from the parent smart contract\\n     *      to calculate and pay yield rewards; adds vault rewards processing\\n     *\\n     * @dev Can be executed by anyone at any time, but has an effect only when\\n     *      executed by deposit holder and when at least one block passes from the\\n     *      previous reward processing\\n     * @dev Executed internally when \\\"staking as a pool\\\" (`stakeAsPool`)\\n     * @dev When timing conditions are not met (executed too frequently, or after factory\\n     *      end block), function doesn't throw and exits silently\\n     *\\n     * @dev Reentrancy safety enforced via `ReentrancyGuard.nonReentrant`\\n     *\\n     */\\n    function processRewards() external override nonReentrant{\\n        _processRewards(msg.sender, true);\\n        User storage user = users[msg.sender];\\n        user.subVaultRewards = weightToReward(user.totalWeight, vaultRewardsPerWeight);\\n    }\\n\\n    /**\\n     * @dev Executed internally by the pool itself (from the parent `HighStreetPoolBase` smart contract)\\n     *      as part of yield rewards processing logic (`HighStreetPoolBase._processRewards` function)\\n     *\\n     * @dev Because the reward in all pools should be regarded as a yield staking in HIGH token pool\\n     *      thus this function can only be excecuted within HIGH token pool\\n     *\\n     * @param _staker an address which stakes (the yield reward)\\n     * @param _amount amount to be staked (yield reward amount)\\n     */\\n    function stakeAsPool(address _staker, uint256 _amount) external {\\n        require(factory.poolExists(msg.sender), \\\"access denied\\\");\\n        require(poolToken == HIGH, \\\"not HIGH token pool\\\");\\n\\n        _sync();\\n        User storage user = users[_staker];\\n        if (user.tokenAmount > 0) {\\n            _processRewards(_staker, false);\\n        }\\n        uint256 depositWeight = _amount * YEAR_STAKE_WEIGHT_MULTIPLIER;\\n        Deposit memory newDeposit =\\n            Deposit({\\n                tokenAmount: _amount,\\n                lockedFrom: uint64(now256()),\\n                lockedUntil: uint64(now256() + 365 days),\\n                weight: depositWeight,\\n                isYield: true\\n            });\\n        user.tokenAmount += _amount;\\n        user.rewardAmount += _amount;\\n        user.totalWeight += depositWeight;\\n        user.deposits.push(newDeposit);\\n\\n        usersLockingWeight += depositWeight;\\n\\n        user.subYieldRewards = weightToReward(user.totalWeight, yieldRewardsPerWeight);\\n        user.subVaultRewards = weightToReward(user.totalWeight, vaultRewardsPerWeight);\\n\\n        // update `poolTokenReserve` only if this is a LP Core Pool (stakeAsPool can be executed only for LP pool)\\n        poolTokenReserve += _amount;\\n    }\\n\\n    /**\\n     * @inheritdoc HighStreetPoolBase\\n     *\\n     * @dev Additionally to the parent smart contract, updates vault rewards of the holder,\\n     *      and updates (increases) pool token reserve (pool tokens value available in the pool)\\n     */\\n    function _stake(\\n        address _staker,\\n        uint256 _amount,\\n        uint64 _lockedUntil\\n    ) internal override {\\n        super._stake(_staker, _amount, _lockedUntil);\\n        User storage user = users[_staker];\\n        user.subVaultRewards = weightToReward(user.totalWeight, vaultRewardsPerWeight);\\n\\n        poolTokenReserve += _amount;\\n    }\\n\\n    /**\\n     * @inheritdoc HighStreetPoolBase\\n     *\\n     * @dev Additionally to the parent smart contract, updates vault rewards of the holder,\\n     *      and updates (decreases) pool token reserve (pool tokens value available in the pool)\\n     */\\n    function _unstake(\\n        address _staker,\\n        uint256 _depositId,\\n        uint256 _amount\\n    ) internal override {\\n        User storage user = users[_staker];\\n        Deposit memory stakeDeposit = user.deposits[_depositId];\\n        require(stakeDeposit.lockedFrom == 0 || now256() > stakeDeposit.lockedUntil, \\\"deposit not yet unlocked\\\");\\n        poolTokenReserve -= _amount;\\n        super._unstake(_staker, _depositId, _amount);\\n        user.subVaultRewards = weightToReward(user.totalWeight, vaultRewardsPerWeight);\\n    }\\n\\n    /**\\n     * @inheritdoc HighStreetPoolBase\\n     *\\n     * @dev Additionally to the parent smart contract, updates vault rewards of the holder,\\n     *      and updates (decreases) pool token reserve (pool tokens value available in the pool)\\n     */\\n    function _emergencyWithdraw(\\n        address _staker\\n    ) internal override {\\n        User storage user = users[_staker];\\n        uint256 amount = user.tokenAmount;\\n\\n        poolTokenReserve -= amount;\\n        super._emergencyWithdraw(_staker);\\n        user.subVaultRewards = 0;\\n    }\\n\\n    /**\\n     * @inheritdoc HighStreetPoolBase\\n     *\\n     * @dev Additionally to the parent smart contract, processes vault rewards of the holder,\\n     *      and for HIGH pool updates (increases) pool token reserve (pool tokens value available in the pool)\\n     */\\n    function _processRewards(\\n        address _staker,\\n        bool _withUpdate\\n    ) internal override returns (uint256 pendingYield) {\\n        _processVaultRewards(_staker);\\n        pendingYield = super._processRewards(_staker, _withUpdate);\\n\\n        // update `poolTokenReserve` only if this is a HIGH Core Pool\\n        if (poolToken == HIGH) {\\n            poolTokenReserve += pendingYield;\\n        }\\n    }\\n\\n    /**\\n     * @dev Used internally to process vault rewards for the staker\\n     *\\n     * @param _staker address of the user (staker) to process rewards for\\n     */\\n    function _processVaultRewards(address _staker) private {\\n        User storage user = users[_staker];\\n        uint256 pendingVaultClaim = pendingVaultRewards(_staker);\\n        if (pendingVaultClaim == 0) return;\\n        // read HIGH token balance of the pool via standard ERC20 interface\\n        uint256 highBalance = IERC20(HIGH).balanceOf(address(this));\\n        require(highBalance >= pendingVaultClaim, \\\"contract HIGH balance too low\\\");\\n\\n        // update `poolTokenReserve` only if this is a HIGH Core Pool\\n        if (poolToken == HIGH) {\\n            // protects against rounding errors\\n            poolTokenReserve -= pendingVaultClaim > poolTokenReserve ? poolTokenReserve : pendingVaultClaim;\\n        }\\n\\n        user.subVaultRewards = weightToReward(user.totalWeight, vaultRewardsPerWeight);\\n\\n        // transfer fails if pool HIGH balance is not enough - which is a desired behavior\\n        transferHighToken(_staker, pendingVaultClaim);\\n\\n        emit VaultRewardsClaimed(msg.sender, _staker, pendingVaultClaim);\\n    }\\n\\n    /**\\n     * @dev Executes SafeERC20.safeTransfer on a HIGH token\\n     *\\n     */\\n    function transferHighToken(address _to, uint256 _value) internal {\\n        // just delegate call to the target\\n        SafeERC20.safeTransfer(IERC20(HIGH), _to, _value);\\n    }\\n\\n    /**\\n     * @dev Executes SafeERC20.safeTransferFrom on a HIGH token\\n     *\\n     */\\n    function transferHighTokenFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal {\\n        // just delegate call to the target\\n        SafeERC20.safeTransferFrom(IERC20(HIGH), _from, _to, _value);\\n    }\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @title High Street Pool\\n *\\n * @notice An abstraction representing a pool, see HighStreetPoolBase for details\\n *\\n */\\ninterface IPool {\\n    /**\\n     * @dev Deposit is a key data structure used in staking,\\n     *      it represents a unit of stake with its amount, weight and term (time interval)\\n     */\\n    struct Deposit {\\n        // @dev token amount staked\\n        uint256 tokenAmount;\\n        // @dev stake weight\\n        uint256 weight;\\n        // @dev locking period - from\\n        uint64 lockedFrom;\\n        // @dev locking period - until\\n        uint64 lockedUntil;\\n        // @dev indicates if the stake was created as a yield reward\\n        bool isYield;\\n    }\\n\\n    // for the rest of the functions see Soldoc in HighStreetPoolBase\\n    function HIGH() external view returns (address);\\n\\n    function poolToken() external view returns (address);\\n\\n    function isFlashPool() external view returns (bool);\\n\\n    function weight() external view returns (uint256);\\n\\n    function lastYieldDistribution() external view returns (uint256);\\n\\n    function yieldRewardsPerWeight() external view returns (uint256);\\n\\n    function usersLockingWeight() external view returns (uint256);\\n\\n    function pendingYieldRewards(address _user) external view returns (uint256);\\n\\n    function balanceOf(address _user) external view returns (uint256);\\n\\n    function getDeposit(address _user, uint256 _depositId) external view returns (Deposit memory);\\n\\n    function getDepositsLength(address _user) external view returns (uint256);\\n\\n    function stake(\\n        uint256 _amount,\\n        uint64 _lockedUntil\\n    ) external;\\n\\n    function unstake(\\n        uint256 _depositId,\\n        uint256 _amount\\n    ) external;\\n\\n    function sync() external;\\n\\n    function processRewards() external;\\n\\n    function setWeight(uint256 _weight) external;\\n}\"\r\n    },\r\n    \"/contracts/interfaces/ICorePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface ICorePool is IPool {\\n    function vaultRewardsPerToken() external view returns (uint256);\\n\\n    function poolTokenReserve() external view returns (uint256);\\n\\n    function stakeAsPool(address _staker, uint256 _amount) external;\\n\\n    function receiveVaultRewards(uint256 _amount) external;\\n}\"\r\n    },\r\n    \"/contracts/HighStreetPoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\n\\n/**\\n * @title HighStreet Pool Factory\\n *\\n * @notice HIGH Pool Factory manages HighStreet Yield farming pools, provides a single\\n *      public interface to access the pools, provides an interface for the pools\\n *      to mint yield rewards, access pool-related info, update weights, etc.\\n *\\n * @notice The factory is authorized (via its owner) to register new pools, change weights\\n *      of the existing pools, removing the pools (by changing their weights to zero)\\n *\\n * @dev The factory requires ROLE_TOKEN_CREATOR permission on the HIGH token to mint yield\\n *      (see `mintYieldTo` function)\\n *\\n */\\ncontract HighStreetPoolFactory is Ownable {\\n    /**\\n     * @dev Smart contract unique identifier, a random number\\n     * @dev Should be regenerated each time smart contact source code is changed\\n     *      and changes smart contract itself is to be redeployed\\n     * @dev Generated using https://www.random.org/bytes/\\n     */\\n    uint256 public constant FACTORY_UID = 0x484a992416a6637667452c709058dccce100b22b278536f5a6d25a14b6a1acdb;\\n\\n    /// @dev Link to HIGH STREET ERC20 Token instance\\n    address public immutable HIGH;\\n\\n    /// @dev Auxiliary data structure used only in getPoolData() view function\\n    struct PoolData {\\n        // @dev pool token address (like HIGH)\\n        address poolToken;\\n        // @dev pool address (like deployed core pool instance)\\n        address poolAddress;\\n        // @dev pool weight (200 for HIGH pools, 800 for HIGH/ETH pools - set during deployment)\\n        uint256 weight;\\n        // @dev flash pool flag\\n        bool isFlashPool;\\n    }\\n\\n    /**\\n     * @dev HIGH/block determines yield farming reward base\\n     *      used by the yield pools controlled by the factory\\n     */\\n    uint256 public highPerBlock;\\n\\n    /**\\n     * @dev The yield is distributed proportionally to pool weights;\\n     *      total weight is here to help in determining the proportion\\n     */\\n    uint256 public totalWeight;\\n\\n    /**\\n     * @dev HIGH/block decreases by 3% every blocks/update (set to 91252 blocks during deployment);\\n     *      an update is triggered by executing `updateHighPerBlock` public function\\n     */\\n    uint256 public immutable blocksPerUpdate;\\n\\n    /**\\n     * @dev End block is the last block when HIGH/block can be decreased;\\n     *      it is implied that yield farming stops after that block\\n     */\\n    uint256 public endBlock;\\n\\n    /**\\n     * @dev Each time the HIGH/block ratio gets updated, the block number\\n     *      when the operation has occurred gets recorded into `lastRatioUpdate`\\n     * @dev This block number is then used to check if blocks/update `blocksPerUpdate`\\n     *      has passed when decreasing yield reward by 3%\\n     */\\n    uint256 public lastRatioUpdate;\\n\\n    /// @dev Maps pool token address (like HIGH) -> pool address (like core pool instance)\\n    mapping(address => address) public pools;\\n\\n    /// @dev Keeps track of registered pool addresses, maps pool address -> exists flag\\n    mapping(address => bool) public poolExists;\\n\\n    /**\\n     * @dev Fired in createPool() and registerPool()\\n     *\\n     * @param _by an address which executed an action\\n     * @param poolToken pool token address (like HIGH)\\n     * @param poolAddress deployed pool instance address\\n     * @param weight pool weight\\n     * @param isFlashPool flag indicating if pool is a flash pool\\n     */\\n    event PoolRegistered(\\n        address indexed _by,\\n        address indexed poolToken,\\n        address indexed poolAddress,\\n        uint256 weight,\\n        bool isFlashPool\\n    );\\n\\n    /**\\n     * @dev Fired in changePoolWeight()\\n     *\\n     * @param _by an address which executed an action\\n     * @param poolAddress deployed pool instance address\\n     * @param weight new pool weight\\n     */\\n    event WeightUpdated(address indexed _by, address indexed poolAddress, uint256 weight);\\n\\n    /**\\n     * @dev Fired in updateHighPerBlock()\\n     *\\n     * @param _by an address which executed an action\\n     * @param newHighPerBlock new HIGH/block value\\n     */\\n    event HighRatioUpdated(address indexed _by, uint256 newHighPerBlock);\\n\\n    /**\\n     * @dev Fired in mintYieldTo()\\n     *\\n     * @param _to an address to mint tokens to\\n     * @param amount amount of HIGH tokens to mint\\n     */\\n    event MintYield(address indexed _to, uint256 amount);\\n\\n    /**\\n     * @dev Creates/deploys a factory instance\\n     *\\n     * @param _high HIGH ERC20 token address\\n     * @param _highPerBlock initial HIGH/block value for rewards\\n     * @param _blocksPerUpdate how frequently the rewards gets updated (decreased by 3%), blocks\\n     * @param _initBlock block number to measure _blocksPerUpdate from\\n     * @param _endBlock block number when farming stops and rewards cannot be updated anymore\\n     */\\n    constructor(\\n        address _high,\\n        uint256 _highPerBlock,\\n        uint256 _blocksPerUpdate,\\n        uint256 _initBlock,\\n        uint256 _endBlock\\n    ) {\\n        // verify the inputs are set\\n        require(_high != address(0) , \\\"HIGH is invalid\\\");\\n        require(_highPerBlock > 0, \\\"HIGH/block not set\\\");\\n        require(_blocksPerUpdate > 0, \\\"blocks/update not set\\\");\\n        require(_initBlock > 0, \\\"init block not set\\\");\\n        require(_endBlock > _initBlock, \\\"invalid end block: must be greater than init block\\\");\\n\\n        // save the inputs into internal state variables\\n        HIGH = _high;\\n        highPerBlock = _highPerBlock;\\n        blocksPerUpdate = _blocksPerUpdate;\\n        lastRatioUpdate = _initBlock;\\n        endBlock = _endBlock;\\n    }\\n\\n    /**\\n     * @notice Given a pool token retrieves corresponding pool address\\n     *\\n     * @dev A shortcut for `pools` mapping\\n     *\\n     * @param poolToken pool token address (like HIGH) to query pool address for\\n     * @return pool address for the token specified\\n     */\\n    function getPoolAddress(address poolToken) external view returns (address) {\\n        // read the mapping and return\\n        return pools[poolToken];\\n    }\\n\\n    /**\\n     * @notice Reads pool information for the pool defined by its pool token address,\\n     *      designed to simplify integration with the front ends\\n     *\\n     * @param _poolToken pool token address to query pool information for\\n     * @return pool information packed in a PoolData struct\\n     */\\n    function getPoolData(address _poolToken) external view returns (PoolData memory) {\\n        // get the pool address from the mapping\\n        address poolAddr = pools[_poolToken];\\n\\n        // throw if there is no pool registered for the token specified\\n        require(poolAddr != address(0), \\\"pool not found\\\");\\n\\n        // read pool information from the pool smart contract\\n        // via the pool interface (IPool)\\n        bool isFlashPool = IPool(poolAddr).isFlashPool();\\n        uint256 weight = IPool(poolAddr).weight();\\n\\n        // create the in-memory structure and return it\\n        return PoolData({ poolToken: _poolToken, poolAddress: poolAddr, weight: weight, isFlashPool: isFlashPool });\\n    }\\n\\n    /**\\n     * @dev Verifies if `blocksPerUpdate` has passed since last HIGH/block\\n     *      ratio update and if HIGH/block reward can be decreased by 3%\\n     *\\n     * @return true if enough time has passed and `updateHighPerBlock` can be executed\\n     */\\n    function shouldUpdateRatio() public view returns (bool) {\\n        // if yield farming period has ended\\n        if (blockNumber() > endBlock) {\\n            // HIGH/block reward cannot be updated anymore\\n            return false;\\n        }\\n\\n        // check if blocks/update (91252 blocks) have passed since last update\\n        return blockNumber() >= lastRatioUpdate + blocksPerUpdate;\\n    }\\n\\n    /**\\n     * @dev Registers an already deployed pool instance within the factory\\n     *\\n     * @dev Can be executed by the pool factory owner only\\n     *\\n     * @param poolAddr address of the already deployed pool instance\\n     */\\n    function registerPool(address poolAddr) external onlyOwner {\\n        // read pool information from the pool smart contract\\n        // via the pool interface (IPool)\\n        address poolToken = IPool(poolAddr).poolToken();\\n        bool isFlashPool = IPool(poolAddr).isFlashPool();\\n        uint256 weight = IPool(poolAddr).weight();\\n\\n        // ensure that the pool is not already registered within the factory\\n        require(pools[poolToken] == address(0), \\\"this pool is already registered\\\");\\n\\n        // create pool structure, register it within the factory\\n        pools[poolToken] = poolAddr;\\n        poolExists[poolAddr] = true;\\n        // update total pool weight of the factory\\n        totalWeight += weight;\\n\\n        // emit an event\\n        emit PoolRegistered(msg.sender, poolToken, poolAddr, weight, isFlashPool);\\n    }\\n\\n    /**\\n     * @notice Decreases HIGH/block reward by 3%, can be executed\\n     *      no more than once per `blocksPerUpdate` blocks\\n     */\\n    function updateHighPerBlock() external {\\n        // checks if ratio can be updated i.e. if blocks/update (91252 blocks) have passed\\n        require(shouldUpdateRatio(), \\\"too frequent\\\");\\n\\n        // decreases HIGH/block reward by 3%\\n        highPerBlock = (highPerBlock * 97) / 100;\\n\\n        // set current block as the last ratio update block\\n        lastRatioUpdate = blockNumber();\\n\\n        // emit an event\\n        emit HighRatioUpdated(msg.sender, highPerBlock);\\n    }\\n\\n    /**\\n     * @dev Mints HIGH tokens; executed by HIGH Pool only\\n     *\\n     * @dev Requires factory to have ROLE_TOKEN_CREATOR permission\\n     *      on the HIGH ERC20 token instance\\n     *\\n     * @param _to an address to mint tokens to\\n     * @param _amount amount of HIGH tokens to mint\\n     */\\n    function mintYieldTo(address _to, uint256 _amount) external {\\n        // verify that sender is a pool registered withing the factory\\n        require(poolExists[msg.sender], \\\"access denied\\\");\\n\\n        // transfer HIGH tokens as required\\n        transferHighToken(_to, _amount);\\n\\n        emit MintYield(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev Changes the weight of the pool;\\n     *      executed by the pool itself or by the factory owner\\n     *\\n     * @param poolAddr address of the pool to change weight for\\n     * @param weight new weight value to set to\\n     */\\n    function changePoolWeight(address poolAddr, uint256 weight) external {\\n        // verify function is executed either by factory owner or by the pool itself\\n        require(msg.sender == owner() || poolExists[msg.sender]);\\n\\n        // recalculate total weight\\n        totalWeight = totalWeight + weight - IPool(poolAddr).weight();\\n\\n        // set the new pool weight\\n        IPool(poolAddr).setWeight(weight);\\n\\n        // emit an event\\n        emit WeightUpdated(msg.sender, poolAddr, weight);\\n    }\\n\\n    /**\\n     * @dev Testing time-dependent functionality is difficult and the best way of\\n     *      doing it is to override block number in helper test smart contracts\\n     *\\n     * @return `block.number` in mainnet, custom values in testnets (if overridden)\\n     */\\n    function blockNumber() public view virtual returns (uint256) {\\n        // return current block number\\n        return block.number;\\n    }\\n\\n    /**\\n     * @dev Executes SafeERC20.safeTransfer on a HIGH token\\n     *\\n     */\\n    function transferHighToken(address _to, uint256 _value) internal {\\n        // just delegate call to the target\\n        SafeERC20.safeTransfer(IERC20(HIGH), _to, _value);\\n    }\\n\\n}\"\r\n    },\r\n    \"/contracts/HighStreetPoolBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/ICorePool.sol\\\";\\nimport \\\"./HighStreetPoolFactory.sol\\\";\\n\\n/**\\n * @title HighStreet Pool Base\\n *\\n * @notice An abstract contract containing common logic for a core pool (permanent pool like HIGH/ETH or HIGH pool)\\n *\\n * @dev Deployment and initialization.\\n *      Any pool deployed must be bound to the deployed pool factory (HighStreetPoolFactory)\\n *      Additionally, 3 token instance addresses must be defined on deployment:\\n *          - HIGH token address\\n *          - pool token address, it can be HIGH token address, HIGH/ETH pair address, and others\\n *\\n * @dev Pool weight defines the fraction of the yield current pool receives among the other pools,\\n *      pool factory is responsible for the weight synchronization between the pools.\\n * @dev The weight is logically 20% for HIGH pool and 80% for HIGH/ETH pool.\\n *      Since Solidity doesn't support fractions the weight is defined by the division of\\n *      pool weight by total pools weight (sum of all registered pools within the factory)\\n * @dev For HIGH Pool we use 200 as weight and for HIGH/ETH pool - 800.\\n *\\n */\\nabstract contract HighStreetPoolBase is IPool, ReentrancyGuard {\\n    /// @dev Data structure representing token holder using a pool\\n    struct User {\\n        // @dev Total staked amount\\n        uint256 tokenAmount;\\n        // @dev Total reward amount\\n        uint256 rewardAmount;\\n        // @dev Total weight\\n        uint256 totalWeight;\\n        // @dev Auxiliary variable for yield calculation\\n        uint256 subYieldRewards;\\n        // @dev Auxiliary variable for vault rewards calculation\\n        uint256 subVaultRewards;\\n        // @dev An array of holder's deposits\\n        Deposit[] deposits;\\n    }\\n\\n    /// @dev Link to HIGH STREET ERC20 Token instance\\n    address public immutable override HIGH;\\n\\n    /// @dev Token holder storage, maps token holder address to their data record\\n    mapping(address => User) public users;\\n\\n    /// @dev Link to the pool factory HighStreetPoolFactory instance\\n    HighStreetPoolFactory public immutable factory;\\n\\n    /// @dev Link to the pool token instance, for example HIGH or HIGH/ETH pair\\n    address public immutable override poolToken;\\n\\n    /// @dev Pool weight, 200 for HIGH pool or 800 for HIGH/ETH\\n    uint256 public override weight;\\n\\n    /// @dev Block number of the last yield distribution event\\n    uint256 public override lastYieldDistribution;\\n\\n    /// @dev Used to calculate yield rewards\\n    /// @dev This value is different from \\\"reward per token\\\" used in locked pool\\n    /// @dev Note: stakes are different in duration and \\\"weight\\\" reflects that\\n    uint256 public override yieldRewardsPerWeight;\\n\\n    /// @dev Used to calculate yield rewards, keeps track of the tokens weight locked in staking\\n    uint256 public override usersLockingWeight;\\n\\n    /**\\n     * @dev Stake weight is proportional to deposit amount and time locked, precisely\\n     *      \\\"deposit amount wei multiplied by (fraction of the year locked plus one)\\\"\\n     * @dev To avoid significant precision loss due to multiplication by \\\"fraction of the year\\\" [0, 1],\\n     *      weight is stored multiplied by 1e24 constant, as an integer\\n     * @dev Corner case 1: if time locked is zero, weight is deposit amount multiplied by 1e24\\n     * @dev Corner case 2: if time locked is one year, fraction of the year locked is one, and\\n     *      weight is a deposit amount multiplied by 2 * 1e24\\n     */\\n    uint256 internal constant WEIGHT_MULTIPLIER = 1e24;\\n\\n    /**\\n     * @dev When we know beforehand that staking is done for a year, and fraction of the year locked is one,\\n     *      we use simplified calculation and use the following constant instead previos one\\n     */\\n    uint256 internal constant YEAR_STAKE_WEIGHT_MULTIPLIER = 2 * WEIGHT_MULTIPLIER;\\n\\n    /**\\n     * @dev Rewards per weight are stored multiplied by 1e48, as integers.\\n     */\\n    uint256 internal constant REWARD_PER_WEIGHT_MULTIPLIER = 1e48;\\n\\n    /**\\n     * @dev We want to get deposits batched but not one by one, thus here is define the size of each batch.\\n     */\\n    uint256 internal constant DEPOSIT_BATCH_SIZE  = 20;\\n\\n    /**\\n     * @dev Fired in _stake() and stake()\\n     *\\n     * @param _by an address which performed an operation, usually token holder\\n     * @param _from token holder address, the tokens will be returned to that address\\n     * @param amount amount of tokens staked\\n     */\\n    event Staked(address indexed _by, address indexed _from, uint256 amount);\\n\\n    /**\\n     * @dev Fired in _updateStakeLock() and updateStakeLock()\\n     *\\n     * @param _by an address which performed an operation\\n     * @param depositId updated deposit ID\\n     * @param lockedFrom deposit locked from value\\n     * @param lockedUntil updated deposit locked until value\\n     */\\n    event StakeLockUpdated(address indexed _by, uint256 depositId, uint64 lockedFrom, uint64 lockedUntil);\\n\\n    /**\\n     * @dev Fired in _unstake() and unstake()\\n     *\\n     * @param _by an address which performed an operation, usually token holder\\n     * @param _to an address which received the unstaked tokens, usually token holder\\n     * @param amount amount of tokens unstaked\\n     */\\n    event Unstaked(address indexed _by, address indexed _to, uint256 amount);\\n\\n    /**\\n     * @dev Fired in _sync(), sync() and dependent functions (stake, unstake, etc.)\\n     *\\n     * @param _by an address which performed an operation\\n     * @param yieldRewardsPerWeight updated yield rewards per weight value\\n     * @param lastYieldDistribution usually, current block number\\n     */\\n    event Synchronized(address indexed _by, uint256 yieldRewardsPerWeight, uint256 lastYieldDistribution);\\n\\n    /**\\n     * @dev Fired in _processRewards(), processRewards() and dependent functions (stake, unstake, etc.)\\n     *\\n     * @param _by an address which performed an operation\\n     * @param _to an address which claimed the yield reward\\n     * @param amount amount of yield paid\\n     */\\n    event YieldClaimed(address indexed _by, address indexed _to, uint256 amount);\\n\\n    /**\\n     * @dev Fired in setWeight()\\n     *\\n     * @param _fromVal old pool weight value\\n     * @param _toVal new pool weight value\\n     */\\n    event PoolWeightUpdated(uint256 _fromVal, uint256 _toVal);\\n\\n    /**\\n     * @dev Fired in _emergencyWithdraw()\\n     *\\n     * @param _by an address which performed an operation, usually token holder\\n     * @param amount amount of tokens withdraw\\n     */\\n    event EmergencyWithdraw(address indexed _by, uint256 amount);\\n\\n    /**\\n     * @dev Overridden in sub-contracts to construct the pool\\n     *\\n     * @param _high HIGH ERC20 Token IlluviumERC20 address\\n     * @param _factory Pool factory HighStreetPoolFactory instance/address\\n     * @param _poolToken token the pool operates on, for example HIGH or HIGH/ETH pair\\n     * @param _initBlock initial block used to calculate the rewards\\n     *      note: _initBlock can be set to the future effectively meaning _sync() calls will do nothing\\n     * @param _weight number representing a weight of the pool, actual weight fraction\\n     *      is calculated as that number divided by the total pools weight and doesn't exceed one\\n     */\\n    constructor(\\n        address _high,\\n        HighStreetPoolFactory _factory,\\n        address _poolToken,\\n        uint256 _initBlock,\\n        uint256 _weight\\n    ) {\\n        // verify the inputs are set\\n        require(_high != address(0), \\\"high token address not set\\\");\\n        require(address(_factory) != address(0), \\\"HIGH Pool fct address not set\\\");\\n        require(_poolToken != address(0), \\\"pool token address not set\\\");\\n        require(_initBlock >= blockNumber(), \\\"Invalid init block\\\");\\n        require(_weight > 0, \\\"pool weight not set\\\");\\n\\n        // verify HighStreetPoolFactory instance supplied\\n        require(\\n            _factory.FACTORY_UID() == 0x484a992416a6637667452c709058dccce100b22b278536f5a6d25a14b6a1acdb,\\n            \\\"unexpected FACTORY_UID\\\"\\n        );\\n\\n        // save the inputs into internal state variables\\n        HIGH = _high;\\n        factory = _factory;\\n        poolToken = _poolToken;\\n        weight = _weight;\\n\\n        // init the dependent internal state variables\\n        lastYieldDistribution = _initBlock;\\n    }\\n\\n    /**\\n     * @notice Calculates current yield rewards value available for address specified\\n     *\\n     * @param _staker an address to calculate yield rewards value for\\n     * @return calculated yield reward value for the given address\\n     */\\n    function pendingYieldRewards(address _staker) external view override returns (uint256) {\\n        // `newYieldRewardsPerWeight` will store stored or recalculated value for `yieldRewardsPerWeight`\\n        uint256 newYieldRewardsPerWeight;\\n\\n        // if smart contract state was not updated recently, `yieldRewardsPerWeight` value\\n        // is outdated and we need to recalculate it in order to calculate pending rewards correctly\\n        if (blockNumber() > lastYieldDistribution && usersLockingWeight != 0) {\\n            uint256 endBlock = factory.endBlock();\\n            uint256 multiplier =\\n                blockNumber() > endBlock ? endBlock - lastYieldDistribution : blockNumber() - lastYieldDistribution;\\n            uint256 highRewards = (multiplier * weight * factory.highPerBlock()) / factory.totalWeight();\\n\\n            // recalculated value for `yieldRewardsPerWeight`\\n            newYieldRewardsPerWeight = rewardToWeight(highRewards, usersLockingWeight) + yieldRewardsPerWeight;\\n        } else {\\n            // if smart contract state is up to date, we don't recalculate\\n            newYieldRewardsPerWeight = yieldRewardsPerWeight;\\n        }\\n\\n        // based on the rewards per weight value, calculate pending rewards;\\n        User memory user = users[_staker];\\n        uint256 pending = weightToReward(user.totalWeight, newYieldRewardsPerWeight) - user.subYieldRewards;\\n\\n        return pending;\\n    }\\n\\n    /**\\n     * @notice Returns total staked token balance for the given address\\n     *\\n     * @param _user an address to query balance for\\n     * @return total staked token balance\\n     */\\n    function balanceOf(address _user) external view override returns (uint256) {\\n        // read specified user token amount and return\\n        return users[_user].tokenAmount;\\n    }\\n\\n    /**\\n     * @notice Returns information on the given deposit for the given address\\n     *\\n     * @dev See getDepositsLength\\n     *\\n     * @param _user an address to query deposit for\\n     * @param _depositId zero-indexed deposit ID for the address specified\\n     * @return deposit info as Deposit structure\\n     */\\n    function getDeposit(address _user, uint256 _depositId) external view override returns (Deposit memory) {\\n        // read deposit at specified index and return\\n        return users[_user].deposits[_depositId];\\n    }\\n\\n    /**\\n     * @notice Returns a batch of deposits on the given pageId for the given address\\n     *\\n     * @dev we separate deposits into serveral of pages, and each page have DEPOSIT_BATCH_SIZE of item.\\n     *\\n     * @param _user an address to query deposit for\\n     * @param _pageId zero-indexed page ID for the address specified\\n     * @return deposits info as Deposit structure\\n     */\\n    function getDepositsBatch(address _user, uint256 _pageId) external view returns (Deposit[] memory) {\\n        uint256 pageStart = _pageId * DEPOSIT_BATCH_SIZE;\\n        uint256 pageEnd = (_pageId + 1) * DEPOSIT_BATCH_SIZE;\\n        uint256 pageLength = DEPOSIT_BATCH_SIZE;\\n\\n        if(pageEnd > (users[_user].deposits.length - pageStart)) {\\n            pageEnd = users[_user].deposits.length;\\n            pageLength = pageEnd - pageStart;\\n        }\\n\\n        Deposit[] memory deposits = new Deposit[](pageLength);\\n        for(uint256 i = pageStart; i < pageEnd; i++) {\\n            deposits[i-pageStart] = users[_user].deposits[i];\\n        }\\n        return deposits;\\n    }\\n\\n    /**\\n     * @notice Returns number of pages for the given address. Allows iteration over deposits.\\n     *\\n     * @dev See getDepositsBatch\\n     *\\n     * @param _user an address to query deposit length for\\n     * @return number of pages for the given address\\n     */\\n    function getDepositsBatchLength(address _user) external view returns (uint256) {\\n        if(users[_user].deposits.length == 0) {\\n            return 0;\\n        }\\n        return 1 + (users[_user].deposits.length - 1) / DEPOSIT_BATCH_SIZE;\\n    }\\n\\n    /**\\n     * @notice Returns number of deposits for the given address. Allows iteration over deposits.\\n     *\\n     * @dev See getDeposit\\n     *\\n     * @param _user an address to query deposit length for\\n     * @return number of deposits for the given address\\n     */\\n    function getDepositsLength(address _user) external view override returns (uint256) {\\n        // read deposits array length and return\\n        return users[_user].deposits.length;\\n    }\\n\\n    /**\\n     * @notice Stakes specified amount of tokens for the specified amount of time,\\n     *      and pays pending yield rewards if any\\n     *\\n     * @dev Requires amount to stake to be greater than zero\\n     *\\n     * @dev Reentrancy safety enforced via `ReentrancyGuard.nonReentrant`\\n     *\\n     * @param _amount amount of tokens to stake\\n     * @param _lockUntil stake period as unix timestamp; zero means no locking\\n     */\\n    function stake (\\n        uint256 _amount,\\n        uint64 _lockUntil\\n    ) external override nonReentrant {\\n        // delegate call to an internal function\\n        _stake(msg.sender, _amount, _lockUntil);\\n    }\\n\\n    /**\\n     * @notice Unstakes specified amount of tokens, and pays pending yield rewards if any\\n     *\\n     * @dev Requires amount to unstake to be greater than zero\\n     *\\n     * @dev Reentrancy safety enforced via `ReentrancyGuard.nonReentrant`\\n     *\\n     * @param _depositId deposit ID to unstake from, zero-indexed\\n     * @param _amount amount of tokens to unstake\\n     */\\n    function unstake(\\n        uint256 _depositId,\\n        uint256 _amount\\n    ) external override nonReentrant {\\n        // delegate call to an internal function\\n        _unstake(msg.sender, _depositId, _amount);\\n    }\\n\\n    /**\\n     * @notice Extends locking period for a given deposit\\n     *\\n     * @dev Requires new lockedUntil value to be:\\n     *      higher than the current one, and\\n     *      in the future, but\\n     *      no more than 1 year in the future\\n     *\\n     * @dev Reentrancy safety enforced via `ReentrancyGuard.nonReentrant`\\n     *\\n     * @param depositId updated deposit ID\\n     * @param lockedUntil updated deposit locked until value\\n     */\\n    function updateStakeLock(\\n        uint256 depositId,\\n        uint64 lockedUntil\\n    ) external nonReentrant {\\n        require(users[msg.sender].deposits[depositId].tokenAmount > 0, \\\"Invalid amount\\\");\\n\\n        // sync and call processRewards\\n        _sync();\\n        _processRewards(msg.sender, false);\\n        // delegate call to an internal function\\n        _updateStakeLock(msg.sender, depositId, lockedUntil);\\n    }\\n\\n    /**\\n     * @notice Service function to synchronize pool state with current time\\n     *\\n     * @dev Can be executed by anyone at any time, but has an effect only when\\n     *      at least one block passes between synchronizations\\n     * @dev Executed internally when staking, unstaking, processing rewards in order\\n     *      for calculations to be correct and to reflect state progress of the contract\\n     * @dev When timing conditions are not met (executed too frequently, or after factory\\n     *      end block), function doesn't throw and exits silently\\n     */\\n    function sync() external override {\\n        // delegate call to an internal function\\n        _sync();\\n    }\\n\\n    /**\\n     * @notice Service function to calculate and pay pending yield rewards to the sender\\n     *\\n     * @dev Can be executed by anyone at any time, but has an effect only when\\n     *      executed by deposit holder and when at least one block passes from the\\n     *      previous reward processing\\n     * @dev Executed internally when staking and unstaking, executes sync() under the hood\\n     *      before making further calculations and payouts\\n     * @dev When timing conditions are not met (executed too frequently, or after factory\\n     *      end block), function doesn't throw and exits silently\\n     *\\n     * @dev Reentrancy safety enforced via `ReentrancyGuard.nonReentrant`\\n     *\\n     */\\n    function processRewards() external virtual override nonReentrant {\\n        // delegate call to an internal function\\n        _processRewards(msg.sender, true);\\n    }\\n\\n    /**\\n     * @dev Executed by the factory to modify pool weight; the factory is expected\\n     *      to keep track of the total pools weight when updating\\n     *\\n     * @dev Set weight to zero to disable the pool\\n     *\\n     * @param _weight new weight to set for the pool\\n     */\\n    function setWeight(uint256 _weight) external override {\\n        // verify function is executed by the factory\\n        require(msg.sender == address(factory), \\\"access denied\\\");\\n\\n        // emit an event logging old and new weight values\\n        emit PoolWeightUpdated(weight, _weight);\\n\\n        // set the new weight value\\n        weight = _weight;\\n    }\\n\\n    /**\\n     * @dev Similar to public pendingYieldRewards, but performs calculations based on\\n     *      current smart contract state only, not taking into account any additional\\n     *      time/blocks which might have passed\\n     *\\n     * @param _staker an address to calculate yield rewards value for\\n     * @return pending calculated yield reward value for the given address\\n     */\\n    function _pendingYieldRewards(address _staker) internal view returns (uint256 pending) {\\n        // read user data structure into memory\\n        User memory user = users[_staker];\\n\\n        // and perform the calculation using the values read\\n        return weightToReward(user.totalWeight, yieldRewardsPerWeight) - user.subYieldRewards;\\n    }\\n\\n    /**\\n     * @dev Used internally, mostly by children implementations, see stake()\\n     *\\n     * @param _staker an address which stakes tokens and which will receive them back\\n     * @param _amount amount of tokens to stake\\n     * @param _lockUntil stake period as unix timestamp; zero means no locking\\n     */\\n    function _stake(\\n        address _staker,\\n        uint256 _amount,\\n        uint64 _lockUntil\\n    ) internal virtual {\\n        // validate the inputs\\n        require(_amount > 0, \\\"zero amount\\\");\\n        require(\\n            _lockUntil == 0 || (_lockUntil > now256() && _lockUntil - now256() <= 365 days),\\n            \\\"invalid lock interval\\\"\\n        );\\n\\n        // update smart contract state\\n        _sync();\\n\\n        // get a link to user data struct, we will write to it later\\n        User storage user = users[_staker];\\n        // process current pending rewards if any\\n        if (user.tokenAmount > 0) {\\n            _processRewards(_staker, false);\\n        }\\n\\n        // in most of the cases added amount `addedAmount` is simply `_amount`\\n        // however for deflationary tokens this can be different\\n\\n        // read the current balance\\n        uint256 previousBalance = IERC20(poolToken).balanceOf(address(this));\\n        // transfer `_amount`; note: some tokens may get burnt here\\n        transferPoolTokenFrom(msg.sender, address(this), _amount);\\n        // read new balance, usually this is just the difference `previousBalance - _amount`\\n        uint256 newBalance = IERC20(poolToken).balanceOf(address(this));\\n        // calculate real amount taking into account deflation\\n        uint256 addedAmount = newBalance - previousBalance;\\n\\n        // set the `lockFrom` and `lockUntil` taking into account that\\n        // zero value for `_lockUntil` means \\\"no locking\\\" and leads to zero values\\n        // for both `lockFrom` and `lockUntil`\\n        uint64 lockFrom = _lockUntil > 0 ? uint64(now256()) : 0;\\n        uint64 lockUntil = _lockUntil;\\n\\n        // stake weight formula rewards for locking\\n        uint256 stakeWeight =\\n            (((lockUntil - lockFrom) * WEIGHT_MULTIPLIER) / 365 days + WEIGHT_MULTIPLIER) * addedAmount;\\n\\n        // makes sure stakeWeight is valid\\n        require(stakeWeight > 0, \\\"invalid stakeWeight\\\");\\n\\n        // create and save the deposit (append it to deposits array)\\n        Deposit memory deposit =\\n            Deposit({\\n                tokenAmount: addedAmount,\\n                weight: stakeWeight,\\n                lockedFrom: lockFrom,\\n                lockedUntil: lockUntil,\\n                isYield: false\\n            });\\n        // deposit ID is an index of the deposit in `deposits` array\\n        user.deposits.push(deposit);\\n\\n        // update user record\\n        user.tokenAmount += addedAmount;\\n        user.totalWeight += stakeWeight;\\n        user.subYieldRewards = weightToReward(user.totalWeight, yieldRewardsPerWeight);\\n\\n        // update global variable\\n        usersLockingWeight += stakeWeight;\\n\\n        // emit an event\\n        emit Staked(msg.sender, _staker, addedAmount);\\n    }\\n\\n    /**\\n     * @dev Used internally, mostly by children implementations, see unstake()\\n     *\\n     * @param _staker an address which unstakes tokens (which previously staked them)\\n     * @param _depositId deposit ID to unstake from, zero-indexed\\n     * @param _amount amount of tokens to unstake\\n     */\\n    function _unstake(\\n        address _staker,\\n        uint256 _depositId,\\n        uint256 _amount\\n    ) internal virtual {\\n        // verify an amount is set\\n        require(_amount > 0, \\\"zero amount\\\");\\n\\n        // get a link to user data struct, we will write to it later\\n        User storage user = users[_staker];\\n        // get a link to the corresponding deposit, we may write to it later\\n        Deposit storage stakeDeposit = user.deposits[_depositId];\\n        // deposit structure may get deleted, so we save isYield flag to be able to use it\\n        bool isYield = stakeDeposit.isYield;\\n\\n        // verify available balance\\n        // if staker address ot deposit doesn't exist this check will fail as well\\n        require(stakeDeposit.tokenAmount >= _amount, \\\"amount exceeds stake\\\");\\n\\n        // update smart contract state\\n        _sync();\\n        // and process current pending rewards if any\\n        _processRewards(_staker, false);\\n\\n        // recalculate deposit weight\\n        uint256 previousWeight = stakeDeposit.weight;\\n        uint256 newWeight =\\n            (((stakeDeposit.lockedUntil - stakeDeposit.lockedFrom) * WEIGHT_MULTIPLIER) /\\n                365 days +\\n                WEIGHT_MULTIPLIER) * (stakeDeposit.tokenAmount - _amount);\\n\\n        // update the deposit, or delete it if its depleted\\n        if (stakeDeposit.tokenAmount - _amount == 0) {\\n            delete user.deposits[_depositId];\\n        } else {\\n            stakeDeposit.tokenAmount -= _amount;\\n            stakeDeposit.weight = newWeight;\\n        }\\n\\n        // update user record\\n        user.tokenAmount -= _amount;\\n        user.totalWeight = user.totalWeight - previousWeight + newWeight;\\n        user.subYieldRewards = weightToReward(user.totalWeight, yieldRewardsPerWeight);\\n\\n        // update global variable\\n        usersLockingWeight = usersLockingWeight - previousWeight + newWeight;\\n\\n        // if the deposit was created by the pool itself as a yield reward\\n        if (isYield) {\\n            user.rewardAmount -= _amount;\\n            // mint the yield via the factory\\n            factory.mintYieldTo(msg.sender, _amount);\\n        } else {\\n            // otherwise just return tokens back to holder\\n            transferPoolToken(msg.sender, _amount);\\n        }\\n\\n        // emit an event\\n        emit Unstaked(msg.sender, _staker, _amount);\\n    }\\n\\n    /**\\n     * @notice Emergency withdraw specified amount of tokens\\n     *\\n     *\\n     * @dev Reentrancy safety enforced via `ReentrancyGuard.nonReentrant`\\n     *\\n     */\\n    function emergencyWithdraw() external nonReentrant {\\n        require(factory.totalWeight() == 0, \\\"totalWeight != 0\\\");\\n\\n        // delegate call to an internal function\\n        _emergencyWithdraw(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Used internally, mostly by children implementations, see emergencyWithdraw()\\n     *\\n     * @param _staker an address which unstakes tokens (which previously staked them)\\n     */\\n    function _emergencyWithdraw(\\n        address _staker\\n    ) internal virtual {\\n        // get a link to user data struct, we will write to it later\\n        User storage user = users[_staker];\\n\\n        uint256 totalWeight = user.totalWeight ;\\n        uint256 amount = user.tokenAmount;\\n        uint256 reward = user.rewardAmount;\\n\\n        // update user record\\n        user.tokenAmount = 0;\\n        user.rewardAmount = 0;\\n        user.totalWeight = 0;\\n        user.subYieldRewards = 0;\\n\\n        // delete entire array directly\\n        delete user.deposits;\\n\\n        // update global variable\\n        usersLockingWeight = usersLockingWeight - totalWeight;\\n\\n        // just return tokens back to holder\\n        transferPoolToken(msg.sender, amount - reward);\\n        // mint the yield via the factory\\n        factory.mintYieldTo(msg.sender, reward);\\n\\n        emit EmergencyWithdraw(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Used internally, mostly by children implementations, see sync()\\n     *\\n     * @dev Updates smart contract state (`yieldRewardsPerWeight`, `lastYieldDistribution`),\\n     *      updates factory state via `updatehighPerBlock`\\n     */\\n    function _sync() internal virtual {\\n        // update HIGH per block value in factory if required\\n        if (factory.shouldUpdateRatio()) {\\n            factory.updateHighPerBlock();\\n        }\\n\\n        // check bound conditions and if these are not met -\\n        // exit silently, without emitting an event\\n        uint256 endBlock = factory.endBlock();\\n        if (lastYieldDistribution >= endBlock) {\\n            return;\\n        }\\n        if (blockNumber() <= lastYieldDistribution) {\\n            return;\\n        }\\n        // if locking weight is zero - update only `lastYieldDistribution` and exit\\n        if (usersLockingWeight == 0) {\\n            lastYieldDistribution = blockNumber();\\n            return;\\n        }\\n\\n        // to calculate the reward we need to know how many blocks passed, and reward per block\\n        uint256 currentBlock = blockNumber() > endBlock ? endBlock : blockNumber();\\n        uint256 blocksPassed = currentBlock - lastYieldDistribution;\\n        uint256 highPerBlock = factory.highPerBlock();\\n\\n        // calculate the reward\\n        uint256 highReward = (blocksPassed * highPerBlock * weight) / factory.totalWeight();\\n\\n        // update rewards per weight and `lastYieldDistribution`\\n        yieldRewardsPerWeight += rewardToWeight(highReward, usersLockingWeight);\\n        lastYieldDistribution = currentBlock;\\n\\n        // emit an event\\n        emit Synchronized(msg.sender, yieldRewardsPerWeight, lastYieldDistribution);\\n    }\\n\\n    /**\\n     * @dev Used internally, mostly by children implementations, see processRewards()\\n     *\\n     * @param _staker an address which receives the reward (which has staked some tokens earlier)\\n     * @param _withUpdate flag allowing to disable synchronization (see sync()) if set to false\\n     * @return pendingYield the rewards calculated and optionally re-staked\\n     */\\n    function _processRewards(\\n        address _staker,\\n        bool _withUpdate\\n    ) internal virtual returns (uint256 pendingYield) {\\n        // update smart contract state if required\\n        if (_withUpdate) {\\n            _sync();\\n        }\\n\\n        // calculate pending yield rewards, this value will be returned\\n        pendingYield = _pendingYieldRewards(_staker);\\n\\n        // if pending yield is zero - just return silently\\n        if (pendingYield == 0) return 0;\\n\\n        // get link to a user data structure, we will write into it later\\n        User storage user = users[_staker];\\n\\n        if (poolToken == HIGH) {\\n            // calculate pending yield weight,\\n            // 2e6 is the bonus weight when staking for 1 year\\n            uint256 depositWeight = pendingYield * YEAR_STAKE_WEIGHT_MULTIPLIER;\\n\\n            // if the pool is HIGH Pool - create new HIGH deposit\\n            // and save it - push it into deposits array\\n            Deposit memory newDeposit =\\n                Deposit({\\n                    tokenAmount: pendingYield,\\n                    lockedFrom: uint64(now256()),\\n                    lockedUntil: uint64(now256() + 365 days), // staking yield for 1 year\\n                    weight: depositWeight,\\n                    isYield: true\\n                });\\n            user.deposits.push(newDeposit);\\n\\n            // update user record\\n            user.tokenAmount += pendingYield;\\n            user.rewardAmount += pendingYield;\\n            user.totalWeight += depositWeight;\\n\\n            // update global variable\\n            usersLockingWeight += depositWeight;\\n        } else {\\n            // for other pools - stake as pool\\n            address highPool = factory.getPoolAddress(HIGH);\\n            require(highPool != address(0),\\\"invalid high pool address\\\");\\n            ICorePool(highPool).stakeAsPool(_staker, pendingYield);\\n        }\\n\\n        // update users's record for `subYieldRewards` if requested\\n        if (_withUpdate) {\\n            user.subYieldRewards = weightToReward(user.totalWeight, yieldRewardsPerWeight);\\n        }\\n\\n        // emit an event\\n        emit YieldClaimed(msg.sender, _staker, pendingYield);\\n    }\\n\\n    /**\\n     * @dev See updateStakeLock()\\n     *\\n     * @param _staker an address to update stake lock\\n     * @param _depositId updated deposit ID\\n     * @param _lockedUntil updated deposit locked until value\\n     */\\n    function _updateStakeLock(\\n        address _staker,\\n        uint256 _depositId,\\n        uint64 _lockedUntil\\n    ) internal {\\n        // validate the input time\\n        require(_lockedUntil > now256(), \\\"lock should be in the future\\\");\\n\\n        // get a link to user data struct, we will write to it later\\n        User storage user = users[_staker];\\n        // get a link to the corresponding deposit, we may write to it later\\n        Deposit storage stakeDeposit = user.deposits[_depositId];\\n\\n        // validate the input against deposit structure\\n        require(_lockedUntil > stakeDeposit.lockedUntil, \\\"invalid new lock\\\");\\n\\n        // verify locked from and locked until values\\n        if (stakeDeposit.lockedFrom == 0) {\\n            require(_lockedUntil - now256() <= 365 days, \\\"max lock period is 365 days\\\");\\n            stakeDeposit.lockedFrom = uint64(now256());\\n        } else {\\n            require(_lockedUntil - stakeDeposit.lockedFrom <= 365 days, \\\"max lock period is 365 days\\\");\\n        }\\n\\n        // update locked until value, calculate new weight\\n        stakeDeposit.lockedUntil = _lockedUntil;\\n        uint256 newWeight =\\n            (((stakeDeposit.lockedUntil - stakeDeposit.lockedFrom) * WEIGHT_MULTIPLIER) /\\n                365 days +\\n                WEIGHT_MULTIPLIER) * stakeDeposit.tokenAmount;\\n\\n        // save previous weight\\n        uint256 previousWeight = stakeDeposit.weight;\\n        // update weight\\n        stakeDeposit.weight = newWeight;\\n\\n        // update user total weight and global locking weight\\n        user.totalWeight = user.totalWeight - previousWeight + newWeight;\\n        usersLockingWeight = usersLockingWeight - previousWeight + newWeight;\\n\\n        // emit an event\\n        emit StakeLockUpdated(_staker, _depositId, stakeDeposit.lockedFrom, _lockedUntil);\\n    }\\n\\n    /**\\n     * @dev Converts stake weight (not to be mixed with the pool weight) to\\n     *      HIGH reward value, applying the 10^48 division on weight\\n     *\\n     * @param _weight stake weight\\n     * @param rewardPerWeight HIGH reward per weight\\n     * @return reward value normalized to 10^48\\n     */\\n    function weightToReward(uint256 _weight, uint256 rewardPerWeight) public pure returns (uint256) {\\n        // apply the formula and return\\n        return (_weight * rewardPerWeight) / REWARD_PER_WEIGHT_MULTIPLIER;\\n    }\\n\\n    /**\\n     * @dev Converts reward HIGH value to stake weight (not to be mixed with the pool weight),\\n     *      applying the 10^12 multiplication on the reward\\n     *      - OR -\\n     * @dev Converts reward HIGH value to reward/weight if stake weight is supplied as second\\n     *      function parameter instead of reward/weight\\n     *\\n     * @param reward yield reward\\n     * @param rewardPerWeight reward/weight (or stake weight)\\n     * @return stake weight (or reward/weight)\\n     */\\n    function rewardToWeight(uint256 reward, uint256 rewardPerWeight) public pure returns (uint256) {\\n        // apply the reverse formula and return\\n        return (reward * REWARD_PER_WEIGHT_MULTIPLIER) / rewardPerWeight;\\n    }\\n\\n    /**\\n     * @dev Testing time-dependent functionality is difficult and the best way of\\n     *      doing it is to override block number in helper test smart contracts\\n     *\\n     * @return `block.number` in mainnet, custom values in testnets (if overridden)\\n     */\\n    function blockNumber() public view virtual returns (uint256) {\\n        // return current block number\\n        return block.number;\\n    }\\n\\n    /**\\n     * @dev Testing time-dependent functionality is difficult and the best way of\\n     *      doing it is to override time in helper test smart contracts\\n     *\\n     * @return `block.timestamp` in mainnet, custom values in testnets (if overridden)\\n     */\\n    function now256() public view virtual returns (uint256) {\\n        // return current block timestamp\\n        return block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Executes SafeERC20.safeTransfer on a pool token\\n     *\\n     */\\n    function transferPoolToken(address _to, uint256 _value) internal {\\n        SafeERC20.safeTransfer(IERC20(poolToken), _to, _value);\\n    }\\n\\n    /**\\n     * @dev Executes SafeERC20.safeTransferFrom on a pool token\\n     *\\n     */\\n    function transferPoolTokenFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal {\\n        SafeERC20.safeTransferFrom(IERC20(poolToken), _from, _to, _value);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_high\",\"type\":\"address\"},{\"internalType\":\"contract HighStreetPoolFactory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromVal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toVal\",\"type\":\"uint256\"}],\"name\":\"PoolWeightUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"lockedFrom\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"lockedUntil\",\"type\":\"uint64\"}],\"name\":\"StakeLockUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldRewardsPerWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastYieldDistribution\",\"type\":\"uint256\"}],\"name\":\"Synchronized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VaultRewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VaultRewardsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_fromVal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_toVal\",\"type\":\"address\"}],\"name\":\"VaultUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"YieldClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HIGH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract HighStreetPoolFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lockedFrom\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lockedUntil\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isYield\",\"type\":\"bool\"}],\"internalType\":\"struct IPool.Deposit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pageId\",\"type\":\"uint256\"}],\"name\":\"getDepositsBatch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lockedFrom\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lockedUntil\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isYield\",\"type\":\"bool\"}],\"internalType\":\"struct IPool.Deposit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getDepositsBatchLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getDepositsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFlashPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastYieldDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"now256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"pendingVaultRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"pendingYieldRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolTokenReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsAmount\",\"type\":\"uint256\"}],\"name\":\"receiveVaultRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerWeight\",\"type\":\"uint256\"}],\"name\":\"rewardToWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"setWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_lockUntil\",\"type\":\"uint64\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeAsPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lockedUntil\",\"type\":\"uint64\"}],\"name\":\"updateStakeLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subYieldRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subVaultRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usersLockingWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultRewardsPerWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerWeight\",\"type\":\"uint256\"}],\"name\":\"weightToReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldRewardsPerWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"HighStreetCorePool","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"00000000000000000000000071ab77b7dbb4fa7e017bc15090b216322142028200000000000000000000000003ce1fd60c31ab8b384725bcb0d8a3a46f87e20f00000000000000000000000071ab77b7dbb4fa7e017bc15090b21632214202820000000000000000000000000000000000000000000000000000000000d3513800000000000000000000000000000000000000000000000000000000000000c8","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}