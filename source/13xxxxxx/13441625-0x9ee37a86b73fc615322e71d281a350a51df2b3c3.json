{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// import \"https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/VRFConsumerBase.sol\";\r\n\r\ninterface LinkTokenInterface {\r\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n  function approve(address spender, uint256 value) external returns (bool success);\r\n\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n  function decimals() external view returns (uint8 decimalPlaces);\r\n\r\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\r\n\r\n  function increaseApproval(address spender, uint256 subtractedValue) external;\r\n\r\n  function name() external view returns (string memory tokenName);\r\n\r\n  function symbol() external view returns (string memory tokenSymbol);\r\n\r\n  function totalSupply() external view returns (uint256 totalTokensIssued);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool success);\r\n\r\n  function transferAndCall(\r\n    address to,\r\n    uint256 value,\r\n    bytes calldata data\r\n  ) external returns (bool success);\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) external returns (bool success);\r\n}\r\n\r\ncontract VRFRequestIDBase {\r\n\r\n  function makeVRFInputSeed(\r\n    bytes32 _keyHash,\r\n    uint256 _userSeed,\r\n    address _requester,\r\n    uint256 _nonce\r\n  ) internal pure returns (uint256) {\r\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\r\n  }\r\n\r\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\r\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\r\n  }\r\n}\r\n\r\nabstract contract VRFConsumerBase is VRFRequestIDBase {\r\n\r\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\r\n\r\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\r\n\r\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\r\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\r\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\r\n    nonces[_keyHash] = nonces[_keyHash] + 1;\r\n    return makeRequestId(_keyHash, vRFSeed);\r\n  }\r\n\r\n  LinkTokenInterface internal immutable LINK;\r\n  address private immutable vrfCoordinator;\r\n\r\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\r\n    private nonces;\r\n\r\n  constructor(address _vrfCoordinator, address _link) {\r\n    vrfCoordinator = _vrfCoordinator;\r\n    LINK = LinkTokenInterface(_link);\r\n  }\r\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\r\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\r\n    fulfillRandomness(requestId, randomness);\r\n  }\r\n}\r\n\r\ncontract RandomNumberConsumer is VRFConsumerBase {\r\n    bytes32 public keyHash;\r\n    uint256 public fee;\r\n    uint256 internal randomResult;\r\n    \r\n    // For the storage of pseudo-random numbers\r\n    uint internal nonce;\r\n    event CreateRandomNumber(address indexed requester, uint randomNumber, uint maxNumber);\r\n    mapping(address => mapping(uint => uint)) public randomNumberStorage;\r\n    mapping(address => uint) public currentNonceForAddress;\r\n\r\n    constructor() VRFConsumerBase(\r\n        0xf0d54349aDdcf704F77AE15b96510dEA15cb7952,\r\n        0x514910771AF9Ca656af840dff83E8264EcF986CA\r\n        ) {\r\n        keyHash = 0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445;\r\n        fee = 2 * (10**18); // 2 LINK\r\n    }\r\n    \r\n    function getRandomNumber() public returns (bytes32 requestId) {\r\n        return requestRandomness(keyHash, fee);\r\n    }\r\n    \r\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\r\n        randomResult = randomness;\r\n    }\r\n    \r\n    // this costs less gas\r\n    function emitRandomNumber(uint maxNumber_) public returns (uint) {\r\n        uint _rand = uint(keccak256(abi.encodePacked(randomResult, currentNonceForAddress[msg.sender], block.timestamp, block.difficulty, msg.sender))) % (maxNumber_ + 1);\r\n        currentNonceForAddress[msg.sender]++;\r\n        emit CreateRandomNumber(msg.sender, _rand, maxNumber_); // emit event as a cheaper form of storage\r\n        return _rand;\r\n    }\r\n    // this costs the most gas\r\n    function storeRandomNumber(uint maxNumber_) public returns (uint) {\r\n        uint _rand = uint(keccak256(abi.encodePacked(randomResult, currentNonceForAddress[msg.sender], block.timestamp, block.difficulty, msg.sender))) % (maxNumber_ + 1); \r\n        randomNumberStorage[msg.sender][currentNonceForAddress[msg.sender]] = _rand;\r\n        currentNonceForAddress[msg.sender]++;\r\n        return _rand;\r\n    }\r\n    // this is free!\r\n    function returnRandomNumber(uint maxNumber_, uint nonce_) public view returns (uint) {\r\n        uint _rand = uint(keccak256(abi.encodePacked(randomResult, nonce_, block.timestamp, block.difficulty, msg.sender))) % (maxNumber_ + 1);\r\n        return _rand;\r\n    }\r\n    \r\n    // this returns the lookup-value of the address's stored random numbers generated\r\n    function getArrayOfStorageForAddress(address address_, uint startIndex_, uint endIndex_) public view returns (uint[] memory) {\r\n        uint _arraySize = endIndex_ - startIndex_;\r\n        uint[] memory _returnArray = new uint[](_arraySize);\r\n        for (uint i = 0; i < _arraySize; i++) {\r\n            _returnArray[i] = randomNumberStorage[address_][startIndex_ + i];\r\n        }\r\n        return _returnArray;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxNumber\",\"type\":\"uint256\"}],\"name\":\"CreateRandomNumber\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currentNonceForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxNumber_\",\"type\":\"uint256\"}],\"name\":\"emitRandomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startIndex_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex_\",\"type\":\"uint256\"}],\"name\":\"getArrayOfStorageForAddress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRandomNumber\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomNumberStorage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxNumber_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce_\",\"type\":\"uint256\"}],\"name\":\"returnRandomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxNumber_\",\"type\":\"uint256\"}],\"name\":\"storeRandomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RandomNumberConsumer","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a659e18b915bf99a74901317c9ec742f1376c14bd5fc9971859835eebc4cd3dd"}]}