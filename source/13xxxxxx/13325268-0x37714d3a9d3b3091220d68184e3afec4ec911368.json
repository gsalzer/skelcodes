{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/contract/RocketBase.sol\": {\r\n      \"content\": \"/**\\n  *       .\\n  *      / \\\\\\n  *     |.'.|\\n  *     |'.'|\\n  *   ,'|   |`.\\n  *  |,-'-|-'-.|\\n  *   __|_| |         _        _      _____           _\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\n  * +---------------------------------------------------+\\n  * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\n  * +---------------------------------------------------+\\n  *\\n  *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\n  *  be community-owned, decentralised, and trustless.\\n  *\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\n  *\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\n  *\\n  */\\n\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"../interface/RocketStorageInterface.sol\\\";\\n\\n/// @title Base settings / modifiers for each contract in Rocket Pool\\n/// @author David Rugendyke\\n\\nabstract contract RocketBase {\\n\\n    // Calculate using this as the base\\n    uint256 constant calcBase = 1 ether;\\n\\n    // Version of the contract\\n    uint8 public version;\\n\\n    // The main storage contract where primary persistant storage is maintained\\n    RocketStorageInterface rocketStorage = RocketStorageInterface(0);\\n\\n\\n    /*** Modifiers **********************************************************/\\n\\n    /**\\n    * @dev Throws if called by any sender that doesn't match a Rocket Pool network contract\\n    */\\n    modifier onlyLatestNetworkContract() {\\n        require(getBool(keccak256(abi.encodePacked(\\\"contract.exists\\\", msg.sender))), \\\"Invalid or outdated network contract\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that doesn't match one of the supplied contract or is the latest version of that contract\\n    */\\n    modifier onlyLatestContract(string memory _contractName, address _contractAddress) {\\n        require(_contractAddress == getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", _contractName))), \\\"Invalid or outdated contract\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that isn't a registered node\\n    */\\n    modifier onlyRegisteredNode(address _nodeAddress) {\\n        require(getBool(keccak256(abi.encodePacked(\\\"node.exists\\\", _nodeAddress))), \\\"Invalid node\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that isn't a trusted node DAO member\\n    */\\n    modifier onlyTrustedNode(address _nodeAddress) {\\n        require(getBool(keccak256(abi.encodePacked(\\\"dao.trustednodes.\\\", \\\"member\\\", _nodeAddress))), \\\"Invalid trusted node\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that isn't a registered minipool\\n    */\\n    modifier onlyRegisteredMinipool(address _minipoolAddress) {\\n        require(getBool(keccak256(abi.encodePacked(\\\"minipool.exists\\\", _minipoolAddress))), \\\"Invalid minipool\\\");\\n        _;\\n    }\\n    \\n\\n    /**\\n    * @dev Throws if called by any account other than a guardian account (temporary account allowed access to settings before DAO is fully enabled)\\n    */\\n    modifier onlyGuardian() {\\n        require(msg.sender == rocketStorage.getGuardian(), \\\"Account is not a temporary guardian\\\");\\n        _;\\n    }\\n\\n\\n\\n\\n    /*** Methods **********************************************************/\\n\\n    /// @dev Set the main Rocket Storage address\\n    constructor(RocketStorageInterface _rocketStorageAddress) {\\n        // Update the contract address\\n        rocketStorage = RocketStorageInterface(_rocketStorageAddress);\\n    }\\n\\n\\n    /// @dev Get the address of a network contract by name\\n    function getContractAddress(string memory _contractName) internal view returns (address) {\\n        // Get the current contract address\\n        address contractAddress = getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", _contractName)));\\n        // Check it\\n        require(contractAddress != address(0x0), \\\"Contract not found\\\");\\n        // Return\\n        return contractAddress;\\n    }\\n\\n\\n    /// @dev Get the address of a network contract by name (returns address(0x0) instead of reverting if contract does not exist)\\n    function getContractAddressUnsafe(string memory _contractName) internal view returns (address) {\\n        // Get the current contract address\\n        address contractAddress = getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", _contractName)));\\n        // Return\\n        return contractAddress;\\n    }\\n\\n\\n    /// @dev Get the name of a network contract by address\\n    function getContractName(address _contractAddress) internal view returns (string memory) {\\n        // Get the contract name\\n        string memory contractName = getString(keccak256(abi.encodePacked(\\\"contract.name\\\", _contractAddress)));\\n        // Check it\\n        require(bytes(contractName).length > 0, \\\"Contract not found\\\");\\n        // Return\\n        return contractName;\\n    }\\n\\n    /// @dev Get revert error message from a .call method\\n    function getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n\\n\\n    /*** Rocket Storage Methods ****************************************/\\n\\n    // Note: Unused helpers have been removed to keep contract sizes down\\n\\n    /// @dev Storage get methods\\n    function getAddress(bytes32 _key) internal view returns (address) { return rocketStorage.getAddress(_key); }\\n    function getUint(bytes32 _key) internal view returns (uint) { return rocketStorage.getUint(_key); }\\n    function getString(bytes32 _key) internal view returns (string memory) { return rocketStorage.getString(_key); }\\n    function getBytes(bytes32 _key) internal view returns (bytes memory) { return rocketStorage.getBytes(_key); }\\n    function getBool(bytes32 _key) internal view returns (bool) { return rocketStorage.getBool(_key); }\\n    function getInt(bytes32 _key) internal view returns (int) { return rocketStorage.getInt(_key); }\\n    function getBytes32(bytes32 _key) internal view returns (bytes32) { return rocketStorage.getBytes32(_key); }\\n\\n    /// @dev Storage set methods\\n    function setAddress(bytes32 _key, address _value) internal { rocketStorage.setAddress(_key, _value); }\\n    function setUint(bytes32 _key, uint _value) internal { rocketStorage.setUint(_key, _value); }\\n    function setString(bytes32 _key, string memory _value) internal { rocketStorage.setString(_key, _value); }\\n    function setBytes(bytes32 _key, bytes memory _value) internal { rocketStorage.setBytes(_key, _value); }\\n    function setBool(bytes32 _key, bool _value) internal { rocketStorage.setBool(_key, _value); }\\n    function setInt(bytes32 _key, int _value) internal { rocketStorage.setInt(_key, _value); }\\n    function setBytes32(bytes32 _key, bytes32 _value) internal { rocketStorage.setBytes32(_key, _value); }\\n\\n    /// @dev Storage delete methods\\n    function deleteAddress(bytes32 _key) internal { rocketStorage.deleteAddress(_key); }\\n    function deleteUint(bytes32 _key) internal { rocketStorage.deleteUint(_key); }\\n    function deleteString(bytes32 _key) internal { rocketStorage.deleteString(_key); }\\n    function deleteBytes(bytes32 _key) internal { rocketStorage.deleteBytes(_key); }\\n    function deleteBool(bytes32 _key) internal { rocketStorage.deleteBool(_key); }\\n    function deleteInt(bytes32 _key) internal { rocketStorage.deleteInt(_key); }\\n    function deleteBytes32(bytes32 _key) internal { rocketStorage.deleteBytes32(_key); }\\n\\n    /// @dev Storage arithmetic methods\\n    function addUint(bytes32 _key, uint256 _amount) internal { rocketStorage.addUint(_key, _amount); }\\n    function subUint(bytes32 _key, uint256 _amount) internal { rocketStorage.subUint(_key, _amount); }\\n}\\n\"\r\n    },\r\n    \"/contracts/contract/dao/RocketDAOProposal.sol\": {\r\n      \"content\": \"/**\\n  *       .\\n  *      / \\\\\\n  *     |.'.|\\n  *     |'.'|\\n  *   ,'|   |`.\\n  *  |,-'-|-'-.|\\n  *   __|_| |         _        _      _____           _\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\n  * +---------------------------------------------------+\\n  * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\n  * +---------------------------------------------------+\\n  *\\n  *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\n  *  be community-owned, decentralised, and trustless.\\n  *\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\n  *\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\n  *\\n  */\\n\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"../RocketBase.sol\\\";\\nimport \\\"../../interface/dao/RocketDAOProposalInterface.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\n// A DAO proposal\\ncontract RocketDAOProposal is RocketBase, RocketDAOProposalInterface {\\n\\n    using SafeMath for uint;\\n\\n    // Events\\n    event ProposalAdded(address indexed proposer, string indexed proposalDAO, uint256 indexed proposalID, bytes payload, uint256 time);  \\n    event ProposalVoted(uint256 indexed proposalID, address indexed voter, bool indexed supported, uint256 time);  \\n    event ProposalExecuted(uint256 indexed proposalID, address indexed executer, uint256 time);\\n    event ProposalCancelled(uint256 indexed proposalID, address indexed canceller, uint256 time);    \\n\\n    // The namespace for any data stored in the trusted node DAO (do not change)\\n    string constant private daoProposalNameSpace = \\\"dao.proposal.\\\";\\n\\n    \\n    // Only allow the DAO contract to access\\n    modifier onlyDAOContract(string memory _daoName) {\\n        // Load contracts\\n        require(keccak256(abi.encodePacked(getContractName(msg.sender))) == keccak256(abi.encodePacked(_daoName)), \\\"Sender is not the required DAO contract\\\");\\n        _;\\n    }\\n\\n\\n    // Construct\\n    constructor(RocketStorageInterface _rocketStorageAddress) RocketBase(_rocketStorageAddress) {\\n        // Version\\n        version = 1;\\n    }\\n\\n\\n    /*** Proposals ****************/\\n  \\n    // Get the current total proposals\\n    function getTotal() override public view returns (uint256) {\\n        return getUint(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"total\\\"))); \\n    }\\n\\n    // Get the DAO that this proposal belongs too\\n    function getDAO(uint256 _proposalID) override public view returns (string memory) {\\n        return getString(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"dao\\\", _proposalID))); \\n    }\\n\\n    // Get the member who proposed\\n    function getProposer(uint256 _proposalID) override public view returns (address) {\\n        return getAddress(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"proposer\\\", _proposalID))); \\n    }\\n\\n    // Get the proposal message\\n    function getMessage(uint256 _proposalID) override external view returns (string memory) {\\n        return getString(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"message\\\", _proposalID))); \\n    }\\n\\n    // Get the start block of this proposal\\n    function getStart(uint256 _proposalID) override public view returns (uint256) {\\n        return getUint(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"start\\\", _proposalID))); \\n    } \\n\\n    // Get the end block of this proposal\\n    function getEnd(uint256 _proposalID) override public view returns (uint256) {\\n        return getUint(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"end\\\", _proposalID))); \\n    }\\n\\n    // The block where the proposal expires and can no longer be executed if it is successful\\n    function getExpires(uint256 _proposalID) override public view returns (uint256) {\\n        return getUint(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"expires\\\", _proposalID))); \\n    }\\n\\n    // Get the created status of this proposal\\n    function getCreated(uint256 _proposalID) override external view returns (uint256) {\\n        return getUint(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"created\\\", _proposalID))); \\n    }\\n\\n    // Get the votes for count of this proposal\\n    function getVotesFor(uint256 _proposalID) override public view returns (uint256) {\\n        return getUint(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"votes.for\\\", _proposalID))); \\n    }\\n\\n    // Get the votes against count of this proposal\\n    function getVotesAgainst(uint256 _proposalID) override public view returns (uint256) {\\n        return getUint(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"votes.against\\\", _proposalID))); \\n    }\\n\\n    // How many votes required for the proposal to succeed \\n    function getVotesRequired(uint256 _proposalID) override public view returns (uint256) {\\n        return getUint(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"votes.required\\\", _proposalID))); \\n    }\\n\\n    // Get the cancelled status of this proposal\\n    function getCancelled(uint256 _proposalID) override public view returns (bool) {\\n        return getBool(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"cancelled\\\", _proposalID))); \\n    }\\n\\n    // Get the executed status of this proposal\\n    function getExecuted(uint256 _proposalID) override public view returns (bool) {\\n        return getBool(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"executed\\\", _proposalID))); \\n    }\\n\\n    // Get the votes against count of this proposal\\n    function getPayload(uint256 _proposalID) override public view returns (bytes memory) {\\n        return getBytes(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"payload\\\", _proposalID))); \\n    }\\n\\n    // Returns true if this proposal has already been voted on by a member\\n    function getReceiptHasVoted(uint256 _proposalID, address _nodeAddress) override public view returns (bool) {\\n        return getBool(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"receipt.hasVoted\\\", _proposalID, _nodeAddress))); \\n    }\\n\\n    // Returns true if this proposal was supported by this member\\n    function getReceiptSupported(uint256 _proposalID, address _nodeAddress) override external view returns (bool) {\\n        return getBool(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"receipt.supported\\\", _proposalID, _nodeAddress))); \\n    }\\n    \\n\\n    // Return the state of the specified proposal\\n    // A successful proposal can be executed immediately\\n    function getState(uint256 _proposalID) override public view returns (ProposalState) {\\n        // Check the proposal ID is legit\\n        require(getTotal() >= _proposalID && _proposalID > 0, \\\"Invalid proposal ID\\\");\\n        // Get the amount of votes for and against\\n        uint256 votesFor = getVotesFor(_proposalID);\\n        uint256 votesAgainst = getVotesAgainst(_proposalID);\\n        // Now return the state of the current proposal\\n        if (getCancelled(_proposalID)) {\\n            // Cancelled by the proposer?\\n            return ProposalState.Cancelled;\\n            // Has it been executed?\\n        } else if (getExecuted(_proposalID)) {\\n            return ProposalState.Executed;\\n            // Is the proposal pending? Eg. waiting to be voted on\\n        } else if (block.timestamp < getStart(_proposalID)) {\\n            return ProposalState.Pending;\\n            // Vote was successful, is now awaiting execution\\n        } else if (votesFor >= getVotesRequired(_proposalID) && block.timestamp < getExpires(_proposalID)) {\\n            return ProposalState.Succeeded;\\n            // The proposal is active and can be voted on\\n        } else if (block.timestamp < getEnd(_proposalID)) {\\n            return ProposalState.Active;\\n            // Check the votes, was it defeated?\\n        } else if (votesFor <= votesAgainst || votesFor < getVotesRequired(_proposalID)) {\\n            return ProposalState.Defeated;\\n        } else {\\n            // Was it successful, but has now expired? and cannot be executed anymore?\\n            return ProposalState.Expired;\\n        }\\n    }\\n\\n\\n    // Add a proposal to the an RP DAO, immeditately becomes active\\n    // Calldata is passed as the payload to execute upon passing the proposal\\n    function add(address _member, string memory _dao, string memory _message, uint256 _startTime, uint256 _duration, uint256 _expires, uint256 _votesRequired, bytes memory _payload) override external onlyDAOContract(_dao) returns (uint256) {\\n        // Basic checks\\n        require(_startTime > block.timestamp, \\\"Proposal start time must be in the future\\\");\\n        require(_duration > 0, \\\"Proposal cannot have a duration of 0\\\");\\n        require(_expires > 0, \\\"Proposal cannot have a execution expiration of 0\\\");\\n        require(_votesRequired > 0, \\\"Proposal cannot have a 0 votes required to be successful\\\");\\n        // Set the end block\\n        uint256 endTime = _startTime.add(_duration);\\n        // Set the expires block\\n        uint256 expires = endTime.add(_expires);\\n        // Get the proposal ID\\n        uint256 proposalID = getTotal().add(1);\\n        // The data structure for a proposal\\n        setAddress(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"proposer\\\", proposalID)), _member);                     // Which member is making the proposal\\n        setString(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"dao\\\", proposalID)), _dao);                              // The DAO the proposal relates too\\n        setString(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"message\\\", proposalID)), _message);                      // A general message that can be included with the proposal\\n        setUint(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"start\\\", proposalID)), _startTime);                        // The time the proposal becomes active for voting on\\n        setUint(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"end\\\", proposalID)), endTime);                             // The time the proposal where voting ends\\n        setUint(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"expires\\\", proposalID)), expires);                         // The time when the proposal expires and can no longer be executed if it is successful\\n        setUint(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"created\\\", proposalID)), block.timestamp);                 // The time the proposal was created at\\n        setUint(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"votes.for\\\", proposalID)), 0);                             // Votes for this proposal\\n        setUint(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"votes.against\\\", proposalID)), 0);                         // Votes against this proposal\\n        setUint(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"votes.required\\\", proposalID)), _votesRequired);           // How many votes are required for the proposal to pass\\n        setBool(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"cancelled\\\", proposalID)), false);                         // The proposer can cancel this proposal, but only before it passes\\n        setBool(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"executed\\\", proposalID)), false);                          // Has this proposals calldata been executed?\\n        setBytes(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"payload\\\", proposalID)), _payload);                       // A calldata payload to execute after it is successful\\n        // Update the total proposals\\n        setUint(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"total\\\")), proposalID);\\n        // Log it\\n        emit ProposalAdded(_member, _dao, proposalID, _payload, block.timestamp);\\n        // Done\\n        return proposalID;\\n    }\\n\\n\\n    // Voting for or against a proposal\\n    function vote(address _member, uint256 _votes, uint256 _proposalID, bool _support) override external onlyDAOContract(getDAO(_proposalID)) {\\n        // Successful proposals can be executed immediately, add this as a check for people who are still trying to vote after it has passed\\n        require(getState(_proposalID) != ProposalState.Succeeded, \\\"Proposal has passed, voting is complete and the proposal can now be executed\\\");\\n        // Check the proposal is in a state that can be voted on\\n        require(getState(_proposalID) == ProposalState.Active, \\\"Voting is not active for this proposal\\\");\\n        // Has this member already voted on this proposal?\\n        require(!getReceiptHasVoted(_proposalID, _member), \\\"Member has already voted on proposal\\\");\\n        // Add votes to proposal\\n        if(_support) {\\n            addUint(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"votes.for\\\", _proposalID)), _votes);\\n        }else{\\n            addUint(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"votes.against\\\", _proposalID)), _votes);\\n        }\\n        // Record the vote receipt now\\n        setUint(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"receipt.votes\\\", _proposalID, _member)), _votes);\\n        setBool(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"receipt.hasVoted\\\", _proposalID, _member)), true);\\n        setBool(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"receipt.supported\\\", _proposalID, _member)), _support);\\n        // Log it\\n        emit ProposalVoted(_proposalID, _member, _support, block.timestamp);\\n    }\\n    \\n\\n    // Execute a proposal if it has passed\\n    function execute(uint256 _proposalID) override external {\\n        // Firstly make sure this proposal has passed\\n        require(getState(_proposalID) == ProposalState.Succeeded, \\\"Proposal has not succeeded, has expired or has already been executed\\\");\\n        // Set as executed now before running payload\\n        setBool(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"executed\\\", _proposalID)), true);\\n        // Ok all good, lets run the payload on the dao contract that the proposal relates too, it should execute one of the methods on this contract\\n        (bool success, bytes memory response) = getContractAddress(getDAO(_proposalID)).call(getPayload(_proposalID));\\n        // Was there an error?\\n        require(success, getRevertMsg(response));\\n        // Log it\\n        emit ProposalExecuted(_proposalID, tx.origin, block.timestamp);\\n    }\\n\\n    // Cancel a proposal, can be cancelled by the original proposer only if it hasn't been executed yet\\n    function cancel(address _member, uint256 _proposalID) override external onlyDAOContract(getDAO(_proposalID)) {\\n        // Firstly make sure this proposal can be cancelled\\n        require(getState(_proposalID) == ProposalState.Pending || getState(_proposalID) == ProposalState.Active, \\\"Proposal can only be cancelled if pending or active\\\");\\n        // Only allow the proposer to cancel\\n        require(getProposer(_proposalID) == _member, \\\"Proposal can only be cancelled by the proposer\\\");\\n        // Set as cancelled now\\n        setBool(keccak256(abi.encodePacked(daoProposalNameSpace, \\\"cancelled\\\", _proposalID)), true);\\n        // Log it\\n        emit ProposalCancelled(_proposalID, _member, block.timestamp);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/RocketStorageInterface.sol\": {\r\n      \"content\": \"/**\\n  *       .\\n  *      / \\\\\\n  *     |.'.|\\n  *     |'.'|\\n  *   ,'|   |`.\\n  *  |,-'-|-'-.|\\n  *   __|_| |         _        _      _____           _\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\n  * +---------------------------------------------------+\\n  * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\n  * +---------------------------------------------------+\\n  *\\n  *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\n  *  be community-owned, decentralised, and trustless.\\n  *\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\n  *\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\n  *\\n  */\\n\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketStorageInterface {\\n\\n    // Deploy status\\n    function getDeployedStatus() external view returns (bool);\\n\\n    // Guardian\\n    function getGuardian() external view returns(address);\\n    function setGuardian(address _newAddress) external;\\n    function confirmGuardian() external;\\n\\n    // Getters\\n    function getAddress(bytes32 _key) external view returns (address);\\n    function getUint(bytes32 _key) external view returns (uint);\\n    function getString(bytes32 _key) external view returns (string memory);\\n    function getBytes(bytes32 _key) external view returns (bytes memory);\\n    function getBool(bytes32 _key) external view returns (bool);\\n    function getInt(bytes32 _key) external view returns (int);\\n    function getBytes32(bytes32 _key) external view returns (bytes32);\\n\\n    // Setters\\n    function setAddress(bytes32 _key, address _value) external;\\n    function setUint(bytes32 _key, uint _value) external;\\n    function setString(bytes32 _key, string calldata _value) external;\\n    function setBytes(bytes32 _key, bytes calldata _value) external;\\n    function setBool(bytes32 _key, bool _value) external;\\n    function setInt(bytes32 _key, int _value) external;\\n    function setBytes32(bytes32 _key, bytes32 _value) external;\\n\\n    // Deleters\\n    function deleteAddress(bytes32 _key) external;\\n    function deleteUint(bytes32 _key) external;\\n    function deleteString(bytes32 _key) external;\\n    function deleteBytes(bytes32 _key) external;\\n    function deleteBool(bytes32 _key) external;\\n    function deleteInt(bytes32 _key) external;\\n    function deleteBytes32(bytes32 _key) external;\\n\\n    // Arithmetic\\n    function addUint(bytes32 _key, uint256 _amount) external;\\n    function subUint(bytes32 _key, uint256 _amount) external;\\n\\n    // Protected storage\\n    function getNodeWithdrawalAddress(address _nodeAddress) external view returns (address);\\n    function getNodePendingWithdrawalAddress(address _nodeAddress) external view returns (address);\\n    function setWithdrawalAddress(address _nodeAddress, address _newWithdrawalAddress, bool _confirm) external;\\n    function confirmWithdrawalAddress(address _nodeAddress) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/dao/RocketDAOProposalInterface.sol\": {\r\n      \"content\": \"/**\\n  *       .\\n  *      / \\\\\\n  *     |.'.|\\n  *     |'.'|\\n  *   ,'|   |`.\\n  *  |,-'-|-'-.|\\n  *   __|_| |         _        _      _____           _\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\n  * +---------------------------------------------------+\\n  * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\n  * +---------------------------------------------------+\\n  *\\n  *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\n  *  be community-owned, decentralised, and trustless.\\n  *\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\n  *\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\n  *\\n  */\\n\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketDAOProposalInterface {\\n\\n    // Possible states that a proposal may be in\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Cancelled,\\n        Defeated,\\n        Succeeded,\\n        Expired,\\n        Executed\\n    }\\n\\n    function getTotal() external view returns (uint256);\\n    function getDAO(uint256 _proposalID) external view returns (string memory);\\n    function getProposer(uint256 _proposalID) external view returns (address);\\n    function getMessage(uint256 _proposalID) external view returns (string memory);\\n    function getStart(uint256 _proposalID) external view returns (uint256);\\n    function getEnd(uint256 _proposalID) external view returns (uint256);\\n    function getExpires(uint256 _proposalID) external view returns (uint256);\\n    function getCreated(uint256 _proposalID) external view returns (uint256);\\n    function getVotesFor(uint256 _proposalID) external view returns (uint256);\\n    function getVotesAgainst(uint256 _proposalID) external view returns (uint256);\\n    function getVotesRequired(uint256 _proposalID) external view returns (uint256);\\n    function getCancelled(uint256 _proposalID) external view returns (bool);\\n    function getExecuted(uint256 _proposalID) external view returns (bool);\\n    function getPayload(uint256 _proposalID) external view returns (bytes memory);\\n    function getReceiptHasVoted(uint256 _proposalID, address _nodeAddress) external view returns (bool);\\n    function getReceiptSupported(uint256 _proposalID, address _nodeAddress) external view returns (bool);\\n    function getState(uint256 _proposalID) external view returns (ProposalState);\\n    function add(address _member, string memory _dao, string memory _message, uint256 _startBlock, uint256 _durationBlocks, uint256 _expiresBlocks, uint256 _votesRequired, bytes memory _payload) external returns (uint256);\\n    function vote(address _member, uint256 _votes, uint256 _proposalID, bool _support) external; \\n    function cancel(address _member, uint256 _proposalID) external;\\n    function execute(uint256 _proposalID) external;\\n    \\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 15000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract RocketStorageInterface\",\"name\":\"_rocketStorageAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"proposalDAO\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ProposalAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"canceller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ProposalCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ProposalVoted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_dao\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votesRequired\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"add\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"getCancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"getCreated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"getDAO\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"getEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"getExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"getExpires\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"getMessage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"getPayload\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"getProposer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"}],\"name\":\"getReceiptHasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"}],\"name\":\"getReceiptSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"getStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"enum RocketDAOProposalInterface.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"getVotesAgainst\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"getVotesFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"getVotesRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_votes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_support\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RocketDAOProposal","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"15000","ConstructorArguments":"0000000000000000000000001d8f8f00cfa6758d7be78336684788fb0ee0fa46","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}