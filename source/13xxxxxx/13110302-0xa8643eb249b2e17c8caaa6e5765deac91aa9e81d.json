{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TikiReservation.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\n/*\\n\\n ____                     __               __          ______    __              ______           __                \\n/\\\\  _`\\\\                  /\\\\ \\\\__         __/\\\\ \\\\        /\\\\__  _\\\\__/\\\\ \\\\      __    /\\\\__  _\\\\       __/\\\\ \\\\               \\n\\\\ \\\\ \\\\L\\\\ \\\\     __     __  \\\\ \\\\ ,_\\\\   ___ /\\\\_\\\\ \\\\ \\\\/'\\\\    \\\\/_/\\\\ \\\\/\\\\_\\\\ \\\\ \\\\/'\\\\ /\\\\_\\\\   \\\\/_/\\\\ \\\\/ _ __ /\\\\_\\\\ \\\\ \\\\____     __   \\n \\\\ \\\\  _ <'  /'__`\\\\ /'__`\\\\ \\\\ \\\\ \\\\/ /' _ `\\\\/\\\\ \\\\ \\\\ , <       \\\\ \\\\ \\\\/\\\\ \\\\ \\\\ , < \\\\/\\\\ \\\\     \\\\ \\\\ \\\\/\\\\`'__\\\\/\\\\ \\\\ \\\\ '__`\\\\  /'__`\\\\ \\n  \\\\ \\\\ \\\\L\\\\ \\\\/\\\\  __//\\\\ \\\\L\\\\.\\\\_\\\\ \\\\ \\\\_/\\\\ \\\\/\\\\ \\\\ \\\\ \\\\ \\\\ \\\\\\\\`\\\\      \\\\ \\\\ \\\\ \\\\ \\\\ \\\\ \\\\\\\\`\\\\\\\\ \\\\ \\\\     \\\\ \\\\ \\\\ \\\\ \\\\/ \\\\ \\\\ \\\\ \\\\ \\\\L\\\\ \\\\/\\\\  __/ \\n   \\\\ \\\\____/\\\\ \\\\____\\\\ \\\\__/.\\\\_\\\\\\\\ \\\\__\\\\ \\\\_\\\\ \\\\_\\\\ \\\\_\\\\ \\\\_\\\\ \\\\_\\\\     \\\\ \\\\_\\\\ \\\\_\\\\ \\\\_\\\\ \\\\_\\\\ \\\\_\\\\     \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_,__/\\\\ \\\\____\\\\\\n    \\\\/___/  \\\\/____/\\\\/__/\\\\/_/ \\\\/__/\\\\/_/\\\\/_/\\\\/_/\\\\/_/\\\\/_/      \\\\/_/\\\\/_/\\\\/_/\\\\/_/\\\\/_/      \\\\/_/\\\\/_/   \\\\/_/\\\\/___/  \\\\/____/\\n                                                                                                                                                                                                                                        \\n*/\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\n\\ncontract TikiReservation is Ownable {\\n\\n    using Counters for Counters.Counter;\\n\\n    event TikiReserved(address _address);\\n    \\n    mapping (address => bool) public allowedToSend;\\n    mapping (address => uint256) public reservedTikis;\\n\\n    uint256 public reservationFee;\\n    uint256 public maxReservedTikis;\\n\\n    Counters.Counter private _totalReservations;\\n    Counters.Counter private _totalAddresses;\\n\\n    constructor () {\\n        reservationFee = 0.08 ether;\\n        maxReservedTikis = 1;\\n    }\\n    \\n    function addAddress(address _address) public onlyOwner {\\n        require(_address != address(0), \\\"Cannot add null address\\\");\\n        require(!allowedToSend[_address], \\\"Address already in whitelist\\\");\\n        \\n        allowedToSend[_address] = true;\\n        _totalAddresses.increment();  \\n    }\\n\\n    function removeAddress(address _address) public onlyOwner {\\n        require(_address != address(0), \\\"Cannot remove null address\\\");\\n        require(allowedToSend[_address], \\\"Address not in whitelist\\\");\\n        \\n        allowedToSend[_address] = false;\\n        _totalAddresses.decrement();\\n    }\\n\\n    function bulkaddAddresses(address[] calldata _addresses) public onlyOwner {\\n        for (uint i=0; i<_addresses.length; i++) {\\n            \\n            address _address = _addresses[i];\\n            \\n            if (!allowedToSend[_address] && _address != address(0)) {\\n                allowedToSend[_address] = true;\\n                _totalAddresses.increment();\\n            }\\n\\n        }\\n            \\n    }\\n\\n    function setReservationFee(uint256 _fee) public onlyOwner {\\n        reservationFee = _fee;\\n    }\\n\\n    function setMaxReservedTikis(uint256 _tikis) public onlyOwner {\\n        maxReservedTikis = _tikis;\\n    }\\n\\n    function getTotalReservations() public view onlyOwner returns (uint256) {\\n        return _totalReservations.current();\\n    }\\n\\n    function getTotalAddresses() public view onlyOwner returns (uint256) {\\n        return _totalAddresses.current();\\n    }\\n\\n    function isAddressAllowed(address _address) public view returns (bool) {\\n        return allowedToSend[_address];\\n    }\\n\\n    function getTikisReservedBy(address _address) public view returns (uint256) {\\n        return reservedTikis[_address];\\n    }\\n\\n    function getAddressStatus(address _address) public view returns (bool, uint256) {\\n        return (allowedToSend[_address], reservedTikis[_address]);\\n    }\\n\\n    function getBalance() public view onlyOwner returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        uint256 _balance = address(this).balance;\\n        address payable _sender = payable(_msgSender());\\n        _sender.transfer(_balance);\\n    }\\n\\n    \\n    function reserveTiki() public payable {\\n\\n        address _sender = _msgSender();\\n        require(allowedToSend[_sender], \\\"Sender is not in allowed list\\\");\\n        require(reservedTikis[_sender] < maxReservedTikis, \\\"Cannot reserve any more tikis\\\");\\n        require(msg.value >= reservationFee, \\\"Insufficient funds to reserve tiki\\\");\\n\\n        address payable _payableSender = payable(_sender);\\n        _payableSender.transfer(msg.value - reservationFee);\\n\\n        reservedTikis[_sender] += 1;\\n        _totalReservations.increment();\\n\\n        emit TikiReserved(_sender);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"TikiReserved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedToSend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"bulkaddAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAddressStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTikisReservedBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAddressAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReservedTikis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveTiki\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reservedTikis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tikis\",\"type\":\"uint256\"}],\"name\":\"setMaxReservedTikis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setReservationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TikiReservation","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}