{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n// Sources flattened with hardhat v2.6.5 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/math/Math.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a / b + (a % b == 0 ? 0 : 1);\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControlUpgradeable {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\r\n */\r\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {}\r\n\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary StringsUpgradeable {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165Upgradeable {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\r\n    function __ERC165_init() internal initializer {\r\n        __ERC165_init_unchained();\r\n    }\r\n\r\n    function __ERC165_init_unchained() internal initializer {}\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControlUpgradeable is\r\n    Initializable,\r\n    ContextUpgradeable,\r\n    IAccessControlUpgradeable,\r\n    ERC165Upgradeable\r\n{\r\n    function __AccessControl_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC165_init_unchained();\r\n        __AccessControl_init_unchained();\r\n    }\r\n\r\n    function __AccessControl_init_unchained() internal initializer {}\r\n\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        StringsUpgradeable.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        StringsUpgradeable.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSetUpgradeable {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\r\n */\r\nabstract contract AccessControlEnumerableUpgradeable is\r\n    Initializable,\r\n    IAccessControlEnumerableUpgradeable,\r\n    AccessControlUpgradeable\r\n{\r\n    function __AccessControlEnumerable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC165_init_unchained();\r\n        __AccessControl_init_unchained();\r\n        __AccessControlEnumerable_init_unchained();\r\n    }\r\n\r\n    function __AccessControlEnumerable_init_unchained() internal initializer {}\r\n\r\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\r\n\r\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return\r\n            interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\r\n        return _roleMembers[role].at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\r\n        return _roleMembers[role].length();\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {grantRole} to track enumerable memberships\r\n     */\r\n    function grantRole(bytes32 role, address account)\r\n        public\r\n        virtual\r\n        override(AccessControlUpgradeable, IAccessControlUpgradeable)\r\n    {\r\n        super.grantRole(role, account);\r\n        _roleMembers[role].add(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {revokeRole} to track enumerable memberships\r\n     */\r\n    function revokeRole(bytes32 role, address account)\r\n        public\r\n        virtual\r\n        override(AccessControlUpgradeable, IAccessControlUpgradeable)\r\n    {\r\n        super.revokeRole(role, account);\r\n        _roleMembers[role].remove(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {renounceRole} to track enumerable memberships\r\n     */\r\n    function renounceRole(bytes32 role, address account)\r\n        public\r\n        virtual\r\n        override(AccessControlUpgradeable, IAccessControlUpgradeable)\r\n    {\r\n        super.renounceRole(role, account);\r\n        _roleMembers[role].remove(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {_setupRole} to track enumerable memberships\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual override {\r\n        super._setupRole(role, account);\r\n        _roleMembers[role].add(account);\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    function __Pausable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Pausable_init_unchained();\r\n    }\r\n\r\n    function __Pausable_init_unchained() internal initializer {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuardUpgradeable is Initializable {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    function __ReentrancyGuard_init() internal initializer {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal initializer {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File contracts/IBoneyard.sol\r\n\r\npragma solidity 0.8.9;\r\npragma abicoder v2;\r\n\r\n// Race statuses. We're not using enums, since they aren't backward compatible\r\nuint8 constant STATUS_CREATED = 0;\r\nuint8 constant STATUS_FINALIZED = 1;\r\n\r\nstruct Race {\r\n    uint256 id;\r\n    uint256 createBlock;\r\n    uint256 startBlock;\r\n    uint256 maxLevel;\r\n    uint16 version;\r\n    uint8 status;\r\n}\r\n\r\nstruct RaceInfo {\r\n    Race race;\r\n    uint256[] racers;\r\n}\r\n\r\nstruct RacerPosition {\r\n    uint256 racer;\r\n    uint256 position;\r\n}\r\n\r\ninterface IBoneyard {\r\n    /**\r\n     * @dev Returns the NFT representing racers\r\n     */\r\n    function token() external view returns (IERC721Enumerable);\r\n\r\n    /**\r\n     * @dev Returns race data\r\n     */\r\n    function raceData(uint256 raceId) external view returns (RaceInfo memory);\r\n\r\n    /**\r\n     * @dev Returns race results\r\n     */\r\n    function raceResults(uint256 raceId) external view returns (RacerPosition[] memory);\r\n\r\n    /**\r\n     * @dev Returns the current level of racer\r\n     */\r\n    function levelOf(uint256 tokenId) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the current XP of racer\r\n     */\r\n    function xpOf(uint256 tokenId) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Joins the boneyard\r\n     */\r\n    function joinBoneyard(uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Joins the boneyard\r\n     */\r\n    function joinBoneyardMulti(uint256[] calldata tokenIds) external;\r\n\r\n    /**\r\n     * @dev Leaves the boneyard\r\n     */\r\n    function leaveBoneyard(uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Leaves the boneyard\r\n     */\r\n    function leaveBoneyardMulti(uint256[] calldata tokenIds) external;\r\n\r\n    /**\r\n     * @dev Creates a new race and specifies the maximum number of racers\r\n     */\r\n    function createRace(uint256 tokenId, uint256 maxLevel) external returns (uint256);\r\n\r\n    /**\r\n     * @dev Joins a pending race\r\n     */\r\n    function joinRace(uint256 raceId, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Finalizes a finished and finalizable race\r\n     */\r\n    function finalizeRace(uint256 raceId) external;\r\n\r\n    /**\r\n     * @dev Calculates all racer positions iteratively during the specified number of blocks\r\n     */\r\n    function calcRacePositions(uint256 raceId, uint256 blocks) external view returns (RacerPosition[] memory);\r\n\r\n    /**\r\n     * @dev Returns whether a race is valid\r\n     */\r\n    function isRaceValid(uint256 raceId) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns whether a race is pending\r\n     */\r\n    function isRacePending(uint256 raceId) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns whether a race is live\r\n     */\r\n    function isRaceLive(uint256 raceId) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns whether a race has finished\r\n     */\r\n    function isRaceFinished(uint256 raceId) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns whether a race is finalizable\r\n     */\r\n    function isRaceFinalizable(uint256 raceId) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns whether a race has been finalized\r\n     */\r\n    function isRaceFinalized(uint256 raceId) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns whether a race has expired\r\n     */\r\n    function isRaceExpired(uint256 raceId) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns whether a racer is participating in any ongoing race\r\n     */\r\n    function isParticipating(uint256 tokenId) external view returns (bool);\r\n}\r\n\r\n// File contracts/Boneyard.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\nerror NotInitialized();\r\nerror AccessDenied();\r\nerror InvalidAddress();\r\nerror InvalidRace();\r\nerror InvalidArgument();\r\nerror AlreadyExists();\r\nerror TooManyRacers();\r\nerror LevelTooHigh();\r\nerror AlreadyRacing();\r\nerror NotRacing();\r\n\r\ncontract Boneyard is\r\n    IBoneyard,\r\n    Initializable,\r\n    AccessControlEnumerableUpgradeable,\r\n    PausableUpgradeable,\r\n    ReentrancyGuardUpgradeable\r\n{\r\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\r\n\r\n    // The administrator role is only capable of pausing creation or finalization of new races while still allowing\r\n    // racers to withdraw their tokens\r\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\r\n\r\n    // The version of the current game\r\n    uint8 public constant VERSION = 1;\r\n\r\n    // The maximum number of racers who can participate in a single race\r\n    uint8 public constant MAX_RACERS = 7;\r\n\r\n    // The number of blocks which needs to pass before a created race is live\r\n    uint16 public constant PENDING_BLOCKS = 600;\r\n\r\n    // The number of blocks during which the race is live and the game is on\r\n    uint8 public constant RACING_BLOCKS = 60;\r\n\r\n    // The maximum number of blocks during which it'd still be possible to finalize\r\n    uint8 public constant MAX_FINALIZATION_BLOCKS = 255 - RACING_BLOCKS + 1;\r\n\r\n    // The maximum distance a racer can advance\r\n    uint256 public constant MAX_DISTANCE_PER_BLOCK = 20;\r\n\r\n    // The distance bonus for every bonus points\r\n    uint8 public constant DISTANCE_BONUS = 1;\r\n\r\n    // The number of levels required for each bonus point\r\n    uint8 public constant LEVELS_PER_BONUS_POINT = 1;\r\n\r\n    // The number of XP points required to gain a new level\r\n    uint256 public constant XP_PER_LEVEL = 1000;\r\n\r\n    // The base number of XP points a racer gains by beating another racer\r\n    uint256 public constant XP_BASE_GAIN = 50;\r\n\r\n    // The XP bonus for level differences\r\n    uint256 public constant LEVEL_DIFF_XP_BONUS = 25;\r\n\r\n    // The NFT representing racers\r\n    IERC721Enumerable private immutable _token;\r\n\r\n    // The ID of the next race\r\n    uint256 internal _nextRaceId;\r\n\r\n    // A mapping between race IDs and races\r\n    mapping(uint256 => Race) private _races;\r\n\r\n    // A mapping between race IDs and its participating racers\r\n    mapping(uint256 => EnumerableSetUpgradeable.UintSet) private _racers;\r\n\r\n    // A mapping of racer owners\r\n    mapping(uint256 => address) internal _owners;\r\n\r\n    // A mapping of participating racers and their current race IDs\r\n    mapping(uint256 => uint256) internal _racing;\r\n\r\n    // A mapping of racers IDs and their overall XP\r\n    mapping(uint256 => uint256) internal _xp;\r\n\r\n    // A mapping of race results\r\n    mapping(uint256 => RacerPosition[]) private _results;\r\n\r\n    // Future compatibility storage gap, since the contract is designed to be deployed as a proxy\r\n    uint256[50 - 7] private __gap;\r\n\r\n    // Triggered when a racer joins the boneyard\r\n    event BoneyardJoined(address indexed racer, uint256 indexed racerTokenId);\r\n\r\n    // Triggered when a racer leaves the boneyard\r\n    event BoneyardLeft(address indexed racer, uint256 indexed racerTokenId);\r\n\r\n    // Triggered when a race is created\r\n    event RaceCreated(\r\n        uint256 indexed raceId,\r\n        address indexed host,\r\n        uint256 indexed hostTokenId,\r\n        uint256 createBlock,\r\n        uint256 maxLevel\r\n    );\r\n\r\n    // Triggered when a racer joins a pending race\r\n    event RaceJoined(uint256 indexed raceId, address indexed racer, uint256 indexed racerTokenId);\r\n\r\n    // Triggered when a race is finalized\r\n    event RaceFinalized(uint256 indexed raceId, uint256 indexed winnerTokenId);\r\n\r\n    // This modifier is used to restrict the operation when the boneyard isn't initialized\r\n    modifier whenInitialized() {\r\n        _verifyInitialized();\r\n\r\n        _;\r\n    }\r\n\r\n    // This modifier is used to restrict admin-only operations\r\n    modifier onlyAdmin() {\r\n        _hasRole(ADMIN_ROLE, msg.sender);\r\n\r\n        _;\r\n    }\r\n\r\n    // This modifier is used to verify that a racer has joined the boneyard\r\n    modifier onlyRacer(uint256 tokenId) {\r\n        _verifyRacer(tokenId);\r\n\r\n        _;\r\n    }\r\n\r\n    // This modifier is used to restrict the operation to participating racers\r\n    modifier whenRacing(uint256 tokenId) {\r\n        _verifyParticipation(tokenId, true);\r\n\r\n        _;\r\n    }\r\n\r\n    // This modifier is used to restrict the operation to non-participating racers\r\n    modifier whenNotRacing(uint256 tokenId) {\r\n        _verifyParticipation(tokenId, false);\r\n\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev A constructor only used to initialize immutable storage variables\r\n     */\r\n    constructor(IERC721Enumerable initToken) {\r\n        if (address(initToken) == address(0)) {\r\n            revert InvalidAddress();\r\n        }\r\n\r\n        _token = initToken;\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes the contract\r\n     */\r\n    function initialize() external initializer {\r\n        __Boneyard_init();\r\n    }\r\n\r\n    // solhint-disable func-name-mixedcase\r\n\r\n    /**\r\n     * @dev Initializes the contract and its parents\r\n     */\r\n    function __Boneyard_init() internal initializer {\r\n        __AccessControl_init();\r\n        __Pausable_init();\r\n        __ReentrancyGuard_init();\r\n\r\n        __Boneyard_init_unchained();\r\n    }\r\n\r\n    /**\r\n     * @dev Contract-specific initialization\r\n     */\r\n    function __Boneyard_init_unchained() internal initializer {\r\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\r\n        _setupRole(ADMIN_ROLE, msg.sender);\r\n\r\n        _nextRaceId = 1;\r\n    }\r\n\r\n    // solhint-enable func-name-mixedcase\r\n\r\n    /**\r\n     * @inheritdoc IBoneyard\r\n     */\r\n    function token() external view returns (IERC721Enumerable) {\r\n        return _token;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IBoneyard\r\n     */\r\n    function raceData(uint256 raceId) external view returns (RaceInfo memory) {\r\n        return RaceInfo({ race: _races[raceId], racers: _racers[raceId].values() });\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IBoneyard\r\n     */\r\n    function raceResults(uint256 raceId) external view returns (RacerPosition[] memory) {\r\n        return _results[raceId];\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IBoneyard\r\n     */\r\n    function levelOf(uint256 tokenId) external view returns (uint256) {\r\n        return _levelOf(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IBoneyard\r\n     */\r\n    function xpOf(uint256 tokenId) external view returns (uint256) {\r\n        return _xp[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IBoneyard\r\n     */\r\n    function joinBoneyard(uint256 tokenId) external whenInitialized whenNotPaused {\r\n        _joinBoneyard(msg.sender, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IBoneyard\r\n     */\r\n    function joinBoneyardMulti(uint256[] calldata tokenIds) external whenInitialized whenNotPaused {\r\n        uint256 length = tokenIds.length;\r\n\r\n        unchecked {\r\n            for (uint256 i = 0; i < length; ++i) {\r\n                _joinBoneyard(msg.sender, tokenIds[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IBoneyard\r\n     */\r\n    function leaveBoneyard(uint256 tokenId) external whenNotRacing(tokenId) {\r\n        _leaveBoneyard(msg.sender, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IBoneyard\r\n     */\r\n    function leaveBoneyardMulti(uint256[] calldata tokenIds) external {\r\n        uint256 length = tokenIds.length;\r\n\r\n        unchecked {\r\n            for (uint256 i = 0; i < length; ++i) {\r\n                uint256 tokenId = tokenIds[i];\r\n\r\n                _verifyParticipation(tokenId, false);\r\n                _leaveBoneyard(msg.sender, tokenId);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IBoneyard\r\n     */\r\n    function createRace(uint256 tokenId, uint256 maxLevel)\r\n        external\r\n        virtual\r\n        nonReentrant\r\n        whenNotRacing(tokenId)\r\n        whenNotPaused\r\n        returns (uint256)\r\n    {\r\n        if (_levelOf(tokenId) > maxLevel) {\r\n            revert LevelTooHigh();\r\n        }\r\n\r\n        // Generate a new race ID\r\n        uint256 raceId = _nextRaceId;\r\n        unchecked {\r\n            ++_nextRaceId;\r\n        }\r\n\r\n        // Create a new race and store it\r\n        Race memory race = Race({\r\n            id: raceId,\r\n            version: VERSION,\r\n            createBlock: block.number,\r\n            startBlock: block.number + PENDING_BLOCKS - 1,\r\n            maxLevel: maxLevel,\r\n            status: STATUS_CREATED\r\n        });\r\n\r\n        _races[raceId] = race;\r\n\r\n        // Add the current racer to the new race\r\n        _racers[raceId].add(tokenId);\r\n        _racing[tokenId] = raceId;\r\n\r\n        emit RaceCreated({\r\n            raceId: raceId,\r\n            host: msg.sender,\r\n            hostTokenId: tokenId,\r\n            createBlock: block.number,\r\n            maxLevel: maxLevel\r\n        });\r\n\r\n        return raceId;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IBoneyard\r\n     */\r\n    function joinRace(uint256 raceId, uint256 tokenId) external nonReentrant whenNotPaused whenNotRacing(tokenId) {\r\n        Race memory race = _races[raceId];\r\n\r\n        // Verify that the race is still pending\r\n        if (!_isRacePending(race)) {\r\n            revert InvalidRace();\r\n        }\r\n\r\n        if (_levelOf(tokenId) > race.maxLevel) {\r\n            revert LevelTooHigh();\r\n        }\r\n\r\n        // Verify that there is still room in the race and start the race immediately if max racers have joined\r\n        EnumerableSetUpgradeable.UintSet storage racers = _racers[raceId];\r\n        uint256 newRacersCount = racers.length() + 1;\r\n        unchecked {\r\n            if (newRacersCount > MAX_RACERS) {\r\n                revert TooManyRacers();\r\n            }\r\n\r\n            if (newRacersCount == MAX_RACERS) {\r\n                _races[raceId].startBlock = block.number;\r\n            }\r\n        }\r\n\r\n        // Add the new racer to the race\r\n        if (!racers.add(tokenId)) {\r\n            revert AlreadyExists();\r\n        }\r\n\r\n        _racing[tokenId] = raceId;\r\n\r\n        emit RaceJoined({ raceId: raceId, racer: msg.sender, racerTokenId: tokenId });\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IBoneyard\r\n     */\r\n    function finalizeRace(uint256 raceId) external nonReentrant whenNotPaused {\r\n        Race memory race = _races[raceId];\r\n\r\n        // Verify that the race has finished and it's still possible to finalize it\r\n        if (!_isRaceFinalizable(race)) {\r\n            revert InvalidRace();\r\n        }\r\n\r\n        // Calculate all racer positions after the duration of the whole race\r\n        uint256[] memory positions = _calcRacePositions(race, RACING_BLOCKS);\r\n\r\n        // Get the levels of the racers\r\n        uint256[] memory racers = _racers[race.id].values();\r\n        assert(positions.length == racers.length);\r\n        uint256[] memory levels = new uint256[](racers.length);\r\n        unchecked {\r\n            for (uint256 i = 0; i < racers.length; ++i) {\r\n                levels[i] = _levelOf(racers[i]);\r\n            }\r\n        }\r\n\r\n        // Sort the positions in ascending order, in order to calculate the XP gains\r\n        uint256[] memory indexes = new uint256[](racers.length);\r\n        _sortWithIndexes(positions, indexes);\r\n\r\n        unchecked {\r\n            // Go over the sorted positions and updated the XP gains for each racer. Note that we're skipping over the\r\n            // first racer as it hasn't beaten any other races thus gains no XP\r\n            //\r\n            // The XP gain of a level L1 racer beating a level L2 racer is calculated by :\r\n            //\r\n            //     DIFF = L2 - L1\r\n            //     if DIFF > 0\r\n            //         XP = XP_BASE_GAIN + (DIFF * LEVEL_DIFF_XP_BONUS)\r\n            //     else\r\n            //         XP = XP_BASE_GAIN\r\n            //     end\r\n            //\r\n            for (uint256 i = 1; i < positions.length; ++i) {\r\n                uint256 position = positions[i];\r\n                uint256 winnerIndex = indexes[i];\r\n                uint256 winnerRacerId = racers[winnerIndex];\r\n\r\n                uint256 gain = 0;\r\n                for (uint256 j = 0; j < i; ++j) {\r\n                    // If there's a draw - neither of the racers gain XP\r\n                    if (position == positions[j]) {\r\n                        continue;\r\n                    }\r\n\r\n                    uint256 loserIndex = indexes[j];\r\n                    uint256 winnerLevel = levels[winnerIndex];\r\n                    uint256 loserLevel = levels[loserIndex];\r\n\r\n                    // Calculate the current racer's XP gains according to the level of the racer he has beaten\r\n                    gain +=\r\n                        XP_BASE_GAIN +\r\n                        (loserLevel > winnerLevel ? (loserLevel - winnerLevel) * LEVEL_DIFF_XP_BONUS : 0);\r\n                }\r\n\r\n                _xp[winnerRacerId] += gain;\r\n            }\r\n        }\r\n\r\n        // Mark all racers as not racing\r\n        for (uint256 i = 0; i < racers.length; ++i) {\r\n            delete _racing[racers[i]];\r\n        }\r\n\r\n        // Mark the race as finalized\r\n        _races[raceId].status = STATUS_FINALIZED;\r\n\r\n        // Record race reults\r\n        RacerPosition[] storage racePositions = _results[raceId];\r\n        unchecked {\r\n            for (uint256 i = 0; i < positions.length; ++i) {\r\n                racePositions.push(RacerPosition({ racer: racers[indexes[i]], position: positions[i] }));\r\n            }\r\n        }\r\n\r\n        emit RaceFinalized({ raceId: raceId, winnerTokenId: racers[indexes[indexes.length - 1]] });\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates all racer positions iteratively during the specified number of blocks\r\n     */\r\n    function calcRacePositions(uint256 raceId, uint256 blocks) external view returns (RacerPosition[] memory) {\r\n        Race memory race = _races[raceId];\r\n\r\n        // Verify that the race is valid\r\n        if (!_isRaceValid(race)) {\r\n            revert InvalidRace();\r\n        }\r\n\r\n        if (blocks == 0) {\r\n            revert InvalidArgument();\r\n        }\r\n\r\n        uint256[] memory positions = _calcRacePositions(race, blocks);\r\n        uint256[] memory racers = _racers[race.id].values();\r\n        assert(positions.length == racers.length);\r\n\r\n        RacerPosition[] memory racerPositions = new RacerPosition[](racers.length);\r\n        unchecked {\r\n            for (uint256 i = 0; i < racerPositions.length; ++i) {\r\n                racerPositions[i] = RacerPosition({ racer: racers[i], position: positions[i] });\r\n            }\r\n        }\r\n\r\n        return racerPositions;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IBoneyard\r\n     */\r\n    function isRaceValid(uint256 raceId) external view returns (bool) {\r\n        return _isRaceValid(_races[raceId]);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IBoneyard\r\n     */\r\n    function isRacePending(uint256 raceId) external view returns (bool) {\r\n        return _isRacePending(_races[raceId]);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IBoneyard\r\n     */\r\n    function isRaceLive(uint256 raceId) external view returns (bool) {\r\n        Race memory race = _races[raceId];\r\n        return _isRaceLive(race) && !_isRaceExpired(race);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IBoneyard\r\n     */\r\n    function isRaceFinished(uint256 raceId) external view returns (bool) {\r\n        return _isRaceFinished(_races[raceId]);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IBoneyard\r\n     */\r\n    function isRaceFinalizable(uint256 raceId) external view returns (bool) {\r\n        return _isRaceFinalizable(_races[raceId]);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IBoneyard\r\n     */\r\n    function isRaceFinalized(uint256 raceId) external view returns (bool) {\r\n        return _isRaceStatusFinalized(_races[raceId]);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IBoneyard\r\n     */\r\n    function isRaceExpired(uint256 raceId) external view returns (bool) {\r\n        return _isRaceExpired(_races[raceId]);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IBoneyard\r\n     */\r\n    function isParticipating(uint256 tokenId) external view returns (bool) {\r\n        return _isParticipating(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Pauses the contract. Please note that it's still possible to cancel a race and unlock all racers when the\r\n     * contract is paused\r\n     */\r\n    function pause() external onlyAdmin {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @dev Unpauses the contract\r\n     */\r\n    function unpause() external onlyAdmin {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * @dev Joins the boneyard\r\n     */\r\n    function _joinBoneyard(address racer, uint256 tokenId) private {\r\n        _lockRacer(racer, tokenId);\r\n\r\n        emit BoneyardJoined({ racer: racer, racerTokenId: tokenId });\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the boneyard\r\n     */\r\n    function _leaveBoneyard(address racer, uint256 tokenId) private {\r\n        _unlockRacer(tokenId);\r\n\r\n        emit BoneyardLeft({ racer: racer, racerTokenId: tokenId });\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates all racer positions iteratively during the specified number of blocks\r\n     */\r\n    function _calcRacePositions(Race memory race, uint256 blocks) private view returns (uint256[] memory) {\r\n        uint256[] memory racers = _racers[race.id].values();\r\n\r\n        // Calculate and cache per-level bonuses\r\n        uint256[] memory levelBonuses = new uint256[](racers.length);\r\n        unchecked {\r\n            for (uint256 i = 0; i < racers.length; ++i) {\r\n                // The per-level bonus is defined as:\r\n                //\r\n                //      BONUS_POINTS = (LEVEL - 1) / LEVELS_PER_BONUS_POINT + 1\r\n                //      TOTAL_BONUS = BONUS * BONUS_POINTS\r\n                //\r\n                // E.g., +1 for levels 1-4, +2 for levels 5-8, +3 for levels 9-11, etc.)\r\n                //\r\n                levelBonuses[i] = DISTANCE_BONUS * (((_levelOf(racers[i]) - 1) / LEVELS_PER_BONUS_POINT) + 1);\r\n            }\r\n        }\r\n\r\n        uint256[] memory positions = new uint256[](racers.length);\r\n        bytes32 digest = bytes32(0);\r\n\r\n        unchecked {\r\n            uint256 fromBlock = race.startBlock;\r\n            uint256 toBlock = fromBlock + Math.min(RACING_BLOCKS, blocks) - 1;\r\n\r\n            for (uint256 blockNumber = fromBlock; blockNumber <= toBlock; ++blockNumber) {\r\n                // Get a (weak) source of randomness from the current block. Please note, that although this is a weak\r\n                // source of randomness, an attacker would need usually need to affect multiple blocks (up to RACING_BLOCKS),\r\n                // which makes this source of randomness practically acceptable for our case\r\n                digest = keccak256(abi.encodePacked(digest, _blockhash(blockNumber)));\r\n\r\n                for (uint256 i = 0; i < racers.length; ++i) {\r\n                    // Get a per-racer source of randomness\r\n                    uint256 rand = uint256(keccak256(abi.encodePacked(digest, i)));\r\n\r\n                    // Calculate the distance this race move during this block and apply its per-level bonus\r\n                    positions[i] += (rand % (MAX_DISTANCE_PER_BLOCK + 1)) + levelBonuses[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        return positions;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether a race is valid\r\n     */\r\n    function _isRaceValid(Race memory race) private pure returns (bool) {\r\n        return race.id != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether a race is pending\r\n     */\r\n    function _isRacePending(Race memory race) private view returns (bool) {\r\n        if (!_isRaceValid(race)) {\r\n            return false;\r\n        }\r\n\r\n        return block.number < race.startBlock;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether a race is live\r\n     */\r\n    function _isRaceLive(Race memory race) private view returns (bool) {\r\n        if (!_isRaceValid(race)) {\r\n            return false;\r\n        }\r\n\r\n        unchecked {\r\n            uint256 currentBlock = block.number;\r\n            uint256 finishBlock = race.startBlock + RACING_BLOCKS - 1;\r\n\r\n            return race.startBlock <= currentBlock && currentBlock <= finishBlock;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether a race has finished\r\n     */\r\n    function _isRaceFinished(Race memory race) private view returns (bool) {\r\n        if (!_isRaceValid(race)) {\r\n            return false;\r\n        }\r\n\r\n        unchecked {\r\n            uint256 finishBlock = race.startBlock + RACING_BLOCKS - 1;\r\n\r\n            return finishBlock < block.number;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether a race is finalizable\r\n     */\r\n    function _isRaceFinalizable(Race memory race) private view returns (bool) {\r\n        if (_isRaceStatusFinalized(race) || !_isRaceFinished(race) || _isRaceExpired(race)) {\r\n            return false;\r\n        }\r\n\r\n        unchecked {\r\n            uint256 finishBlock = race.startBlock + RACING_BLOCKS - 1;\r\n\r\n            return finishBlock < block.number;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the time of the race has expired\r\n     */\r\n    function _isRaceTimeExpired(Race memory race) private view returns (bool) {\r\n        unchecked {\r\n            uint256 finishBlock = race.startBlock + RACING_BLOCKS - 1;\r\n\r\n            return block.number > finishBlock + MAX_FINALIZATION_BLOCKS - 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether a race has been finalized\r\n     */\r\n    function _isRaceStatusFinalized(Race memory race) private pure returns (bool) {\r\n        return race.status == STATUS_FINALIZED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether a race has expired\r\n     */\r\n    function _isRaceExpired(Race memory race) private view returns (bool) {\r\n        if (!_isRaceValid(race) || _isRaceStatusFinalized(race)) {\r\n            return true;\r\n        }\r\n\r\n        if (_isRacePending(race)) {\r\n            return false;\r\n        }\r\n\r\n        // If the race has expired\r\n        if (_isRaceTimeExpired(race)) {\r\n            return true;\r\n        }\r\n\r\n        // If the creation block has passed and not enough racers have joined\r\n        uint256 racersCount = _racers[race.id].length();\r\n\r\n        return race.startBlock <= block.number && racersCount == 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether a racer is participating in any ongoing race\r\n     */\r\n    function _isParticipating(uint256 tokenId) private view returns (bool) {\r\n        uint256 raceId = _racing[tokenId];\r\n        return raceId != 0 && !_isRaceExpired(_races[raceId]);\r\n    }\r\n\r\n    /**\r\n     * @dev Sorts the provided list in ascending order and returns its new indexes\r\n     */\r\n    function _sortWithIndexes(uint256[] memory list, uint256[] memory indexes) internal pure {\r\n        unchecked {\r\n            uint256 length = list.length;\r\n            for (uint256 i = 0; i < length; i++) {\r\n                indexes[i] = i;\r\n            }\r\n\r\n            for (uint256 i = 1; i < length; i++) {\r\n                uint256 key = list[i];\r\n                uint256 j = i - 1;\r\n                while ((int256(j) >= 0) && (list[j] > key)) {\r\n                    list[j + 1] = list[j];\r\n                    indexes[j + 1] = indexes[j];\r\n\r\n                    j--;\r\n                }\r\n\r\n                list[j + 1] = key;\r\n                indexes[j + 1] = i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the level of a racer. Every racer starts at level 1\r\n     */\r\n    function _levelOf(uint256 tokenId) private view returns (uint256) {\r\n        unchecked {\r\n            return _xp[tokenId] / XP_PER_LEVEL + 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Locks the racer by transferring it to the contract\r\n     */\r\n    function _lockRacer(address owner, uint256 tokenId) private {\r\n        _owners[tokenId] = owner;\r\n\r\n        _token.transferFrom(owner, address(this), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Unlocks the racer by transferring it back to its previous owner\r\n     */\r\n    function _unlockRacer(uint256 tokenId) private {\r\n        address owner = _owners[tokenId];\r\n        delete _owners[tokenId];\r\n\r\n        _token.transferFrom(address(this), owner, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the provided account has the specified role\r\n     */\r\n    function _hasRole(bytes32 role, address account) private view {\r\n        if (!hasRole(role, account)) {\r\n            revert AccessDenied();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Verifies if a racer has joined the boneyard\r\n     */\r\n    function _verifyRacer(uint256 tokenId) private view {\r\n        if (_owners[tokenId] != msg.sender) {\r\n            revert AccessDenied();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Verifies if a racer is a participating in a race\r\n     */\r\n    function _verifyParticipation(uint256 tokenId, bool participating) private view {\r\n        _verifyRacer(tokenId);\r\n\r\n        if (_isParticipating(tokenId) != participating) {\r\n            if (participating) {\r\n                revert NotRacing();\r\n            } else {\r\n                revert AlreadyRacing();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the boneyard was initialized\r\n     */\r\n    function _isInitialized() private view returns (bool) {\r\n        return _nextRaceId != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Verifies whether the boneyard was initialized\r\n     */\r\n    function _verifyInitialized() private view {\r\n        if (!_isInitialized()) {\r\n            revert NotInitialized();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the hash of the specified block\r\n     */\r\n    function _blockhash(uint256 blockNumber) internal view virtual returns (bytes32) {\r\n        return blockhash(blockNumber);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"initToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyRacing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRace\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LevelTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotRacing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyRacers\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"racer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"racerTokenId\",\"type\":\"uint256\"}],\"name\":\"BoneyardJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"racer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"racerTokenId\",\"type\":\"uint256\"}],\"name\":\"BoneyardLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"hostTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"createBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLevel\",\"type\":\"uint256\"}],\"name\":\"RaceCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"winnerTokenId\",\"type\":\"uint256\"}],\"name\":\"RaceFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"racer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"racerTokenId\",\"type\":\"uint256\"}],\"name\":\"RaceJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISTANCE_BONUS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEVELS_PER_BONUS_POINT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEVEL_DIFF_XP_BONUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DISTANCE_PER_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FINALIZATION_BLOCKS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RACERS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PENDING_BLOCKS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RACING_BLOCKS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XP_BASE_GAIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XP_PER_LEVEL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocks\",\"type\":\"uint256\"}],\"name\":\"calcRacePositions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"racer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"internalType\":\"struct RacerPosition[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLevel\",\"type\":\"uint256\"}],\"name\":\"createRace\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"}],\"name\":\"finalizeRace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isParticipating\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"}],\"name\":\"isRaceExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"}],\"name\":\"isRaceFinalizable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"}],\"name\":\"isRaceFinalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"}],\"name\":\"isRaceFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"}],\"name\":\"isRaceLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"}],\"name\":\"isRacePending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"}],\"name\":\"isRaceValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"joinBoneyard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"joinBoneyardMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"joinRace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"leaveBoneyard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"leaveBoneyardMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"levelOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"}],\"name\":\"raceData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct Race\",\"name\":\"race\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"racers\",\"type\":\"uint256[]\"}],\"internalType\":\"struct RaceInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"}],\"name\":\"raceResults\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"racer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"internalType\":\"struct RacerPosition[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"xpOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Boneyard","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"000000000000000000000000f210d5d9dcf958803c286a6f8e278e4ac78e136e","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8b21a331c3a12a32ef000f3272c61949a62a6f0c7b92e9a740dc503e46135eba"}]}