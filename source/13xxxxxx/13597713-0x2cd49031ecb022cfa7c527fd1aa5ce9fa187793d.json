{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/helpers/CDPViewer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2021 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity 0.7.6;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport \\\"../interfaces/IVaultParameters.sol\\\";\\nimport \\\"../interfaces/vault-managers/parameters/IVaultManagerParameters.sol\\\";\\nimport \\\"../interfaces/vault-managers/parameters/IVaultManagerBorrowFeeParameters.sol\\\";\\nimport \\\"../interfaces/IOracleRegistry.sol\\\";\\nimport \\\"./IUniswapV2PairFull.sol\\\";\\nimport \\\"./ERC20Like.sol\\\";\\n\\n\\n/**\\n * @notice Views collaterals in one request to save node requests and speed up dapps.\\n */\\ncontract CDPViewer {\\n\\n    IVault public immutable vault;\\n    IVaultParameters public immutable vaultParameters;\\n    IVaultManagerParameters public immutable vaultManagerParameters;\\n    IVaultManagerBorrowFeeParameters public immutable vaultManagerBorrowFeeParameters;\\n    IOracleRegistry public immutable oracleRegistry;\\n\\n    struct CDP {\\n\\n        // Collateral amount\\n        uint128 collateral;\\n\\n        // Debt amount\\n        uint128 debt;\\n\\n        // Debt + accrued stability fee\\n        uint totalDebt;\\n\\n        // Percentage with 3 decimals\\n        uint32 stabilityFee;\\n\\n        uint32 lastUpdate;\\n\\n        // Percentage with 0 decimals\\n        uint16 liquidationFee;\\n\\n        uint16 oracleType;\\n    }\\n\\n    struct CollateralParameters {\\n\\n        // USDP mint limit\\n        uint128 tokenDebtLimit;\\n\\n        // USDP mint limit\\n        uint128 tokenDebt;\\n\\n        // Percentage with 3 decimals\\n        uint32 stabilityFee;\\n\\n        // Percentage with 3 decimals\\n        uint32 liquidationDiscount;\\n\\n        // Devaluation period in blocks\\n        uint32 devaluationPeriod;\\n\\n        // Percentage with 0 decimals\\n        uint16 liquidationRatio;\\n\\n        // Percentage with 0 decimals\\n        uint16 initialCollateralRatio;\\n\\n        // Percentage with 0 decimals\\n        uint16 liquidationFee;\\n\\n        // Oracle types enabled for this asset\\n        uint16 oracleType;\\n\\n        // Percentage with 2 decimals (basis points)\\n        uint16 borrowFee;\\n\\n        CDP cdp;\\n    }\\n\\n    struct TokenDetails {\\n        address[2] lpUnderlyings;\\n        uint128 balance;\\n        uint128 totalSupply;\\n    }\\n\\n\\n    constructor(address _vaultManagerParameters, address _oracleRegistry, address _vaultManagerBorrowFeeParameters) {\\n         IVaultManagerParameters vmp = IVaultManagerParameters(_vaultManagerParameters);\\n         vaultManagerParameters = vmp;\\n         IVaultParameters vp = IVaultParameters(vmp.vaultParameters());\\n         vaultParameters = vp;\\n         vault = IVault(vp.vault());\\n         oracleRegistry = IOracleRegistry(_oracleRegistry);\\n         vaultManagerBorrowFeeParameters = IVaultManagerBorrowFeeParameters(_vaultManagerBorrowFeeParameters);\\n    }\\n\\n    /**\\n     * @notice Get parameters of one asset\\n     * @param asset asset address\\n     * @param owner owner address\\n     */\\n    function getCollateralParameters(address asset, address owner)\\n        public\\n        view\\n        returns (CollateralParameters memory r)\\n    {\\n        r.stabilityFee = uint32(vaultParameters.stabilityFee(asset));\\n        r.liquidationFee = uint16(vaultParameters.liquidationFee(asset));\\n        r.initialCollateralRatio = uint16(vaultManagerParameters.initialCollateralRatio(asset));\\n        r.liquidationRatio = uint16(vaultManagerParameters.liquidationRatio(asset));\\n        r.liquidationDiscount = uint32(vaultManagerParameters.liquidationDiscount(asset));\\n        r.devaluationPeriod = uint32(vaultManagerParameters.devaluationPeriod(asset));\\n\\n        r.tokenDebtLimit = uint128(vaultParameters.tokenDebtLimit(asset));\\n        r.tokenDebt = uint128(vault.tokenDebts(asset));\\n        r.oracleType = uint16(oracleRegistry.oracleTypeByAsset(asset));\\n\\n        r.borrowFee = vaultManagerBorrowFeeParameters.getBorrowFee(asset);\\n\\n        if (owner == address(0)) return r;\\n        r.cdp.stabilityFee = uint32(vault.stabilityFee(asset, owner));\\n        r.cdp.liquidationFee = uint16(vault.liquidationFee(asset, owner));\\n        r.cdp.debt = uint128(vault.debts(asset, owner));\\n        r.cdp.totalDebt = vault.getTotalDebt(asset, owner);\\n        r.cdp.collateral = uint128(vault.collaterals(asset, owner));\\n        r.cdp.lastUpdate = uint32(vault.lastUpdate(asset, owner));\\n        r.cdp.oracleType = uint16(vault.oracleType(asset, owner));\\n    }\\n\\n    /**\\n     * @notice Get details of one token\\n     * @param asset token address\\n     * @param owner owner address\\n     */\\n    function getTokenDetails(address asset, address owner)\\n        public\\n        view\\n        returns (TokenDetails memory r)\\n    {\\n        try IUniswapV2PairFull(asset).token0() returns(address token0) {\\n            r.lpUnderlyings[0] = token0;\\n            r.lpUnderlyings[1] = IUniswapV2PairFull(asset).token1();\\n            r.totalSupply = uint128(IUniswapV2PairFull(asset).totalSupply());\\n        } catch (bytes memory) { }\\n\\n        if (owner == address(0)) return r;\\n        r.balance = uint128(ERC20Like(asset).balanceOf(owner));\\n    }\\n\\n    /**\\n     * @notice Get parameters of many collaterals\\n     * @param assets asset addresses\\n     * @param owner owner address\\n     */\\n    function getMultiCollateralParameters(address[] calldata assets, address owner)\\n        external\\n        view\\n        returns (CollateralParameters[] memory r)\\n    {\\n        uint length = assets.length;\\n        r = new CollateralParameters[](length);\\n        for (uint i = 0; i < length; ++i) {\\n            r[i] = getCollateralParameters(assets[i], owner);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get details of many token\\n     * @param assets token addresses\\n     * @param owner owner address\\n     */\\n    function getMultiTokenDetails(address[] calldata assets, address owner)\\n        external\\n        view\\n        returns (TokenDetails[] memory r)\\n    {\\n        uint length = assets.length;\\n        r = new TokenDetails[](length);\\n        for (uint i = 0; i < length; ++i) {\\n            r[i] = getTokenDetails(assets[i], owner);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.7.6;\\n\\ninterface IVault {\\n    function DENOMINATOR_1E2 (  ) external view returns ( uint256 );\\n    function DENOMINATOR_1E5 (  ) external view returns ( uint256 );\\n    function borrow ( address asset, address user, uint256 amount ) external returns ( uint256 );\\n    function calculateFee ( address asset, address user, uint256 amount ) external view returns ( uint256 );\\n    function changeOracleType ( address asset, address user, uint256 newOracleType ) external;\\n    function chargeFee ( address asset, address user, uint256 amount ) external;\\n    function col (  ) external view returns ( address );\\n    function colToken ( address, address ) external view returns ( uint256 );\\n    function collaterals ( address, address ) external view returns ( uint256 );\\n    function debts ( address, address ) external view returns ( uint256 );\\n    function depositCol ( address asset, address user, uint256 amount ) external;\\n    function depositEth ( address user ) external payable;\\n    function depositMain ( address asset, address user, uint256 amount ) external;\\n    function destroy ( address asset, address user ) external;\\n    function getTotalDebt ( address asset, address user ) external view returns ( uint256 );\\n    function lastUpdate ( address, address ) external view returns ( uint256 );\\n    function liquidate ( address asset, address positionOwner, uint256 mainAssetToLiquidator, uint256 colToLiquidator, uint256 mainAssetToPositionOwner, uint256 colToPositionOwner, uint256 repayment, uint256 penalty, address liquidator ) external;\\n    function liquidationBlock ( address, address ) external view returns ( uint256 );\\n    function liquidationFee ( address, address ) external view returns ( uint256 );\\n    function liquidationPrice ( address, address ) external view returns ( uint256 );\\n    function oracleType ( address, address ) external view returns ( uint256 );\\n    function repay ( address asset, address user, uint256 amount ) external returns ( uint256 );\\n    function spawn ( address asset, address user, uint256 _oracleType ) external;\\n    function stabilityFee ( address, address ) external view returns ( uint256 );\\n    function tokenDebts ( address ) external view returns ( uint256 );\\n    function triggerLiquidation ( address asset, address positionOwner, uint256 initialPrice ) external;\\n    function update ( address asset, address user ) external;\\n    function usdp (  ) external view returns ( address );\\n    function vaultParameters (  ) external view returns ( address );\\n    function weth (  ) external view returns ( address payable );\\n    function withdrawCol ( address asset, address user, uint256 amount ) external;\\n    function withdrawEth ( address user, uint256 amount ) external;\\n    function withdrawMain ( address asset, address user, uint256 amount ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.7.6;\\n\\ninterface IVaultParameters {\\n    function canModifyVault ( address ) external view returns ( bool );\\n    function foundation (  ) external view returns ( address );\\n    function isManager ( address ) external view returns ( bool );\\n    function isOracleTypeEnabled ( uint256, address ) external view returns ( bool );\\n    function liquidationFee ( address ) external view returns ( uint256 );\\n    function setCollateral ( address asset, uint256 stabilityFeeValue, uint256 liquidationFeeValue, uint256 usdpLimit, uint256[] calldata oracles ) external;\\n    function setFoundation ( address newFoundation ) external;\\n    function setLiquidationFee ( address asset, uint256 newValue ) external;\\n    function setManager ( address who, bool permit ) external;\\n    function setOracleType ( uint256 _type, address asset, bool enabled ) external;\\n    function setStabilityFee ( address asset, uint256 newValue ) external;\\n    function setTokenDebtLimit ( address asset, uint256 limit ) external;\\n    function setVaultAccess ( address who, bool permit ) external;\\n    function stabilityFee ( address ) external view returns ( uint256 );\\n    function tokenDebtLimit ( address ) external view returns ( uint256 );\\n    function vault (  ) external view returns ( address );\\n    function vaultParameters (  ) external view returns ( address );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/vault-managers/parameters/IVaultManagerParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.7.6;\\n\\ninterface IVaultManagerParameters {\\n    function devaluationPeriod ( address ) external view returns ( uint256 );\\n    function initialCollateralRatio ( address ) external view returns ( uint256 );\\n    function liquidationDiscount ( address ) external view returns ( uint256 );\\n    function liquidationRatio ( address ) external view returns ( uint256 );\\n    function maxColPercent ( address ) external view returns ( uint256 );\\n    function minColPercent ( address ) external view returns ( uint256 );\\n    function setColPartRange ( address asset, uint256 min, uint256 max ) external;\\n    function setCollateral (\\n        address asset,\\n        uint256 stabilityFeeValue,\\n        uint256 liquidationFeeValue,\\n        uint256 initialCollateralRatioValue,\\n        uint256 liquidationRatioValue,\\n        uint256 liquidationDiscountValue,\\n        uint256 devaluationPeriodValue,\\n        uint256 usdpLimit,\\n        uint256[] calldata oracles,\\n        uint256 minColP,\\n        uint256 maxColP\\n    ) external;\\n    function setDevaluationPeriod ( address asset, uint256 newValue ) external;\\n    function setInitialCollateralRatio ( address asset, uint256 newValue ) external;\\n    function setLiquidationDiscount ( address asset, uint256 newValue ) external;\\n    function setLiquidationRatio ( address asset, uint256 newValue ) external;\\n    function vaultParameters (  ) external view returns ( address );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/vault-managers/parameters/IVaultManagerBorrowFeeParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2021 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.7.6;\\n\\ninterface IVaultManagerBorrowFeeParameters {\\n\\n    /**\\n     * @notice 1 = 100% = 10000 basis points\\n     **/\\n    function BASIS_POINTS_IN_1() external view returns (uint);\\n\\n    /**\\n     * @notice Borrow fee receiver\\n     **/\\n    function feeReceiver() external view returns (address);\\n\\n    /**\\n     * @notice Sets the borrow fee receiver. Only manager is able to call this function\\n     * @param newFeeReceiver The address of fee receiver\\n     **/\\n    function setFeeReceiver(address newFeeReceiver) external;\\n\\n    /**\\n     * @notice Sets the base borrow fee in basis points (1bp = 0.01% = 0.0001). Only manager is able to call this function\\n     * @param newBaseBorrowFeeBasisPoints The borrow fee in basis points\\n     **/\\n    function setBaseBorrowFee(uint16 newBaseBorrowFeeBasisPoints) external;\\n\\n    /**\\n     * @notice Sets the borrow fee for a particular collateral in basis points (1bp = 0.01% = 0.0001). Only manager is able to call this function\\n     * @param asset The address of the main collateral token\\n     * @param newEnabled Is custom fee enabled for asset\\n     * @param newFeeBasisPoints The borrow fee in basis points\\n     **/\\n    function setAssetBorrowFee(address asset, bool newEnabled, uint16 newFeeBasisPoints) external;\\n\\n    /**\\n     * @notice Returns borrow fee for particular collateral in basis points (1bp = 0.01% = 0.0001)\\n     * @param asset The address of the main collateral token\\n     * @return feeBasisPoints The borrow fee in basis points\\n     **/\\n    function getBorrowFee(address asset) external view returns (uint16 feeBasisPoints);\\n\\n    /**\\n     * @notice Returns borrow fee for usdp amount for particular collateral\\n     * @param asset The address of the main collateral token\\n     * @return The borrow fee\\n     **/\\n    function calcBorrowFeeAmount(address asset, uint usdpAmount) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOracleRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\ninterface IOracleRegistry {\\n\\n    struct Oracle {\\n        uint oracleType;\\n        address oracleAddress;\\n    }\\n\\n    function WETH (  ) external view returns ( address );\\n    function getKeydonixOracleTypes (  ) external view returns ( uint256[] memory );\\n    function getOracles (  ) external view returns ( Oracle[] memory foundOracles );\\n    function keydonixOracleTypes ( uint256 ) external view returns ( uint256 );\\n    function maxOracleType (  ) external view returns ( uint256 );\\n    function oracleByAsset ( address asset ) external view returns ( address );\\n    function oracleByType ( uint256 ) external view returns ( address );\\n    function oracleTypeByAsset ( address ) external view returns ( uint256 );\\n    function oracleTypeByOracle ( address ) external view returns ( uint256 );\\n    function setKeydonixOracleTypes ( uint256[] memory _keydonixOracleTypes ) external;\\n    function setOracle ( uint256 oracleType, address oracle ) external;\\n    function setOracleTypeForAsset ( address asset, uint256 oracleType ) external;\\n    function setOracleTypeForAssets ( address[] memory assets, uint256 oracleType ) external;\\n    function unsetOracle ( uint256 oracleType ) external;\\n    function unsetOracleForAsset ( address asset ) external;\\n    function unsetOracleForAssets ( address[] memory assets ) external;\\n    function vaultParameters (  ) external view returns ( address );\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/IUniswapV2PairFull.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity 0.7.6;\\n\\ninterface IUniswapV2PairFull {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/ERC20Like.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity 0.7.6;\\n\\n\\ninterface ERC20Like {\\n    function balanceOf(address) external view returns (uint);\\n    function decimals() external view returns (uint8);\\n    function transfer(address, uint256) external returns (bool);\\n    function transferFrom(address, address, uint256) external returns (bool);\\n    function totalSupply() external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultManagerParameters\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultManagerBorrowFeeParameters\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getCollateralParameters\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"tokenDebtLimit\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokenDebt\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"stabilityFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"liquidationDiscount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"devaluationPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"liquidationRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"initialCollateralRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidationFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"oracleType\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"borrowFee\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"collateral\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"debt\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"stabilityFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdate\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"liquidationFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"oracleType\",\"type\":\"uint16\"}],\"internalType\":\"struct CDPViewer.CDP\",\"name\":\"cdp\",\"type\":\"tuple\"}],\"internalType\":\"struct CDPViewer.CollateralParameters\",\"name\":\"r\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getMultiCollateralParameters\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"tokenDebtLimit\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokenDebt\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"stabilityFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"liquidationDiscount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"devaluationPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"liquidationRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"initialCollateralRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidationFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"oracleType\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"borrowFee\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"collateral\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"debt\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"stabilityFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdate\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"liquidationFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"oracleType\",\"type\":\"uint16\"}],\"internalType\":\"struct CDPViewer.CDP\",\"name\":\"cdp\",\"type\":\"tuple\"}],\"internalType\":\"struct CDPViewer.CollateralParameters[]\",\"name\":\"r\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getMultiTokenDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address[2]\",\"name\":\"lpUnderlyings\",\"type\":\"address[2]\"},{\"internalType\":\"uint128\",\"name\":\"balance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalSupply\",\"type\":\"uint128\"}],\"internalType\":\"struct CDPViewer.TokenDetails[]\",\"name\":\"r\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getTokenDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address[2]\",\"name\":\"lpUnderlyings\",\"type\":\"address[2]\"},{\"internalType\":\"uint128\",\"name\":\"balance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalSupply\",\"type\":\"uint128\"}],\"internalType\":\"struct CDPViewer.TokenDetails\",\"name\":\"r\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRegistry\",\"outputs\":[{\"internalType\":\"contract IOracleRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManagerBorrowFeeParameters\",\"outputs\":[{\"internalType\":\"contract IVaultManagerBorrowFeeParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManagerParameters\",\"outputs\":[{\"internalType\":\"contract IVaultManagerParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultParameters\",\"outputs\":[{\"internalType\":\"contract IVaultParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CDPViewer","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000203153522b9eaef4ae17c6e99851ee7b2f7d312e00000000000000000000000075fbfe26b21fd3ea008af0c764949f8214150c8f000000000000000000000000cba7154bfbf898d9ab0cf0e259abab6ccbfb4894","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}