{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\ncontract BridgeEth {\r\n    address public admin;\r\n    address public feeWallet = 0xcae28D03f6042E57B79790840890b53AFDab825a;\r\n\r\n    IERC20 public token;\r\n\r\n    mapping(address => mapping(uint => bool)) public processedNonces;\r\n    mapping (address => uint256) public accounts;\r\n    \r\n    mapping(address => uint) public nextNonce;\r\n\r\n    uint256 public _basefees = 50000000000000000; //0.05 eth\r\n    uint256 public _withdrawfees = 10; //1%  /1000\r\n\r\n    enum Step { Burn, Mint }\r\n    event Deposit(\r\n        address from,\r\n        uint256 amount,\r\n        uint date,\r\n        uint nonce,\r\n        bytes signature,\r\n        Step indexed step\r\n    );\r\n    event Mint(\r\n        address to,\r\n        uint256 amount,\r\n        uint date,\r\n        uint nonce,\r\n        bytes signature,\r\n        Step indexed step\r\n    );\r\n    event Withdraw(\r\n        address from,\r\n        uint256 amount\r\n    );\r\n\r\n    constructor () {\r\n        admin = 0x11Faf4470d0294C263EC695E23FdC469046393D4;\r\n        token = IERC20(0x309c1b3282c49E4dC6796644417f8c76b7C8233C);\r\n    }\r\n\r\n    function setToken (address _token ) external {\r\n        require(msg.sender == admin, \"only admin\");\r\n        token = IERC20(_token);\r\n    }\r\n\r\n    function setAdmin (address _admin ) external {\r\n        require(msg.sender == admin, \"only admin\");\r\n        admin = _admin;\r\n    }\r\n\r\n    function setFees (uint256 _fees ) external {\r\n        require(msg.sender == admin, \"only admin\");\r\n        _basefees = _fees;\r\n    }\r\n\r\n    function setWithdrawFees (uint256 _fees ) external {\r\n        require(msg.sender == admin, \"only admin\");\r\n        _withdrawfees = _fees;\r\n    }\r\n\r\n    function setFeeWallet (address _wallet ) external {\r\n        require(msg.sender == admin, \"only admin\");\r\n        feeWallet = _wallet;\r\n    }\r\n\r\n\r\n    function deposit(address from, uint256 amount, uint nonce, bytes calldata signature) external payable{\r\n        require(msg.value >= _basefees, \"insufficient fees\");\r\n        require(processedNonces[msg.sender][nonce] == false, 'transfer already processed');\r\n        processedNonces[msg.sender][nonce] = true;\r\n\r\n        payable(admin).transfer(msg.value);\r\n        \r\n        token.transferFrom(msg.sender, address(this), amount);\r\n        nextNonce[msg.sender] = nextNonce[msg.sender] + 1;\r\n\r\n        emit Deposit(\r\n            from,\r\n            amount,\r\n            block.timestamp,\r\n            nonce,\r\n            signature,\r\n            Step.Burn\r\n        );\r\n    }\r\n\r\n    function calculateWithdrawFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount*(_withdrawfees)/(10**3);\r\n\r\n    }\r\n\r\n    fallback () external payable {\r\n    }\r\n\r\n    receive () external payable {\r\n    }\r\n\r\n    function withdraw( ) external {\r\n        require(accounts[msg.sender] > 0, \"invalid amount\");\r\n        uint256 amount = accounts[msg.sender];\r\n        uint256 _fees = calculateWithdrawFee(amount);\r\n\r\n        bool succ = token.transfer(msg.sender, amount - _fees);\r\n        require(succ, \"tokens not transfered\");\r\n\r\n        bool succ2 = token.transfer(feeWallet , _fees);\r\n        require(succ2, \"fees tokens not transfered\");\r\n\r\n        accounts[msg.sender] = 0;\r\n\r\n        emit Withdraw(msg.sender, amount);\r\n    }\r\n\r\n    function mint(\r\n        address to, \r\n        uint256 amount, \r\n        uint nonce,\r\n        bytes calldata signature\r\n    ) external {\r\n        require(msg.sender == admin, \"only admin\");\r\n        bytes32 message = prefixed(keccak256(abi.encodePacked(to, amount, nonce )));\r\n        require(recoverSigner(message, signature) == to , 'wrong signature');\r\n        require(processedNonces[to][nonce] == false, 'transfer already processed');\r\n        processedNonces[to][nonce] = true;\r\n        nextNonce[to] = nextNonce[to] + 1;\r\n        accounts[to] += amount;\r\n        \r\n        emit Mint(\r\n            to,\r\n            amount,\r\n            block.timestamp,\r\n            nonce,\r\n            signature,\r\n            Step.Mint\r\n        );\r\n    }\r\n\r\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\r\n        '\\x19Ethereum Signed Message:\\n32', \r\n        hash\r\n        ));\r\n    }\r\n\r\n    function recoverSigner(bytes32 message, bytes memory sig)\r\n        internal\r\n        pure\r\n        returns (address)\r\n    {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n    \r\n        (v, r, s) = splitSignature(sig);\r\n    \r\n        return ecrecover(message, v, r, s);\r\n    }\r\n\r\n    function splitSignature(bytes memory sig)\r\n        internal\r\n        pure\r\n        returns (uint8, bytes32, bytes32)\r\n    {\r\n        require(sig.length == 65);\r\n    \r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n    \r\n        assembly {\r\n            // first 32 bytes, after the length prefix\r\n            r := mload(add(sig, 32))\r\n            // second 32 bytes\r\n            s := mload(add(sig, 64))\r\n            // final byte (first byte of the next 32 bytes)\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n    \r\n        return (v, r, s);\r\n    }\r\n\r\n    function emergencyWithdrawTokens() public {\r\n        require(msg.sender == admin, \"only admin\");\r\n        uint256 amount = token.balanceOf(address(this));\r\n        bool succ = token.transfer(msg.sender, amount);\r\n        require(succ, \"tokens not transfered\");\r\n    }\r\n\r\n    function emergencyWithdrawEth() public {\r\n        require(msg.sender == admin, \"only admin\");\r\n        uint256 Balance = address(this).balance;\r\n        (bool succ, ) = msg.sender.call{value: Balance}(\"\");\r\n        require(succ, \"withdraw not sent\"); \r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"enum BridgeEth.Step\",\"name\":\"step\",\"type\":\"uint8\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"enum BridgeEth.Step\",\"name\":\"step\",\"type\":\"uint8\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_basefees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_withdrawfees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"processedNonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fees\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fees\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BridgeEth","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9063c7544ac5e8d1f9b82d12548ff3569a2ddd887efad0eed29ce2acb9f047aa"}]}