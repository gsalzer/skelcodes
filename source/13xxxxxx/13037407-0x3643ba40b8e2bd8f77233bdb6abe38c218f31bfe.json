{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/mainnet/connectors/liquity/main.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.6;\\n\\n/**\\n * @title Liquity.\\n * @dev Lending & Borrowing.\\n */\\nimport {\\n    BorrowerOperationsLike,\\n    TroveManagerLike,\\n    StabilityPoolLike,\\n    StakingLike,\\n    CollateralSurplusLike,\\n    LqtyTokenLike\\n} from \\\"./interface.sol\\\";\\nimport { Stores } from \\\"../../common/stores.sol\\\";\\nimport { Helpers } from \\\"./helpers.sol\\\";\\nimport { Events } from \\\"./events.sol\\\";\\n\\nabstract contract LiquityResolver is Events, Helpers {\\n\\n\\n    /* Begin: Trove */\\n\\n    /**\\n     * @dev Deposit native ETH and borrow LUSD\\n     * @notice Opens a Trove by depositing ETH and borrowing LUSD\\n     * @param depositAmount The amount of ETH to deposit\\n     * @param maxFeePercentage The maximum borrow fee that this transaction should permit \\n     * @param borrowAmount The amount of LUSD to borrow\\n     * @param upperHint Address of the Trove near the upper bound of where the user's Trove should now sit in the ordered Trove list\\n     * @param lowerHint Address of the Trove near the lower bound of where the user's Trove should now sit in the ordered Trove list\\n     * @param getIds Optional (default: 0) Optional storage slot to get deposit & borrow amounts stored using other spells\\n     * @param setIds Optional (default: 0) Optional storage slot to set deposit & borrow amounts to be used in future spells\\n    */\\n    function open(\\n        uint depositAmount,\\n        uint maxFeePercentage,\\n        uint borrowAmount,\\n        address upperHint,\\n        address lowerHint,\\n        uint[] memory getIds,\\n        uint[] memory setIds\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n\\n        depositAmount = getUint(getIds[0], depositAmount);\\n        borrowAmount = getUint(getIds[1], borrowAmount);\\n\\n        depositAmount = depositAmount == uint(-1) ? address(this).balance : depositAmount;\\n\\n        borrowerOperations.openTrove{value: depositAmount}(\\n            maxFeePercentage,\\n            borrowAmount,\\n            upperHint,\\n            lowerHint\\n        );\\n\\n        setUint(setIds[0], depositAmount);\\n        setUint(setIds[1], borrowAmount);\\n\\n        _eventName = \\\"LogOpen(address,uint256,uint256,uint256,uint256[],uint256[])\\\";\\n        _eventParam = abi.encode(address(this), maxFeePercentage, depositAmount, borrowAmount, getIds, setIds);\\n    }\\n\\n    /**\\n     * @dev Repay LUSD debt from the DSA account's LUSD balance, and withdraw ETH to DSA\\n     * @notice Closes a Trove by repaying LUSD debt\\n     * @param setId Optional storage slot to store the ETH withdrawn from the Trove\\n    */\\n    function close(uint setId) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        uint collateral = troveManager.getTroveColl(address(this));\\n        borrowerOperations.closeTrove();\\n\\n        // Allow other spells to use the collateral released from the Trove\\n        setUint(setId, collateral);\\n         _eventName = \\\"LogClose(address,uint256)\\\";\\n        _eventParam = abi.encode(address(this), setId);\\n    }\\n\\n    /**\\n     * @dev Deposit ETH to Trove\\n     * @notice Increase Trove collateral (collateral Top up)\\n     * @param amount Amount of ETH to deposit into Trove\\n     * @param upperHint Address of the Trove near the upper bound of where the user's Trove should now sit in the ordered Trove list\\n     * @param lowerHint Address of the Trove near the lower bound of where the user's Trove should now sit in the ordered Trove list\\n     * @param getId Optional storage slot to retrieve the ETH from\\n     * @param setId Optional storage slot to set the ETH deposited\\n    */\\n    function deposit(\\n        uint amount,\\n        address upperHint,\\n        address lowerHint,\\n        uint getId,\\n        uint setId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam)  {\\n\\n        uint _amount = getUint(getId, amount);\\n\\n        _amount = _amount == uint(-1) ? address(this).balance : _amount;\\n\\n        borrowerOperations.addColl{value: _amount}(upperHint, lowerHint);\\n\\n        setUint(setId, _amount);\\n\\n        _eventName = \\\"LogDeposit(address,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(address(this), _amount, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Withdraw ETH from Trove\\n     * @notice Move Trove collateral from Trove to DSA\\n     * @param amount Amount of ETH to move from Trove to DSA\\n     * @param upperHint Address of the Trove near the upper bound of where the user's Trove should now sit in the ordered Trove list\\n     * @param lowerHint Address of the Trove near the lower bound of where the user's Trove should now sit in the ordered Trove list\\n     * @param getId Optional storage slot to get the amount of ETH to withdraw\\n     * @param setId Optional storage slot to store the withdrawn ETH in\\n    */\\n   function withdraw(\\n        uint amount,\\n        address upperHint,\\n        address lowerHint,\\n        uint getId,\\n        uint setId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam)  {\\n        uint _amount = getUint(getId, amount);\\n\\n        _amount = _amount == uint(-1) ? troveManager.getTroveColl(address(this)) : _amount;\\n\\n        borrowerOperations.withdrawColl(_amount, upperHint, lowerHint);\\n\\n        setUint(setId, _amount);\\n        _eventName = \\\"LogWithdraw(address,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(address(this), _amount, getId, setId);\\n    }\\n    \\n    /**\\n     * @dev Mints LUSD tokens\\n     * @notice Borrow LUSD via an existing Trove\\n     * @param maxFeePercentage The maximum borrow fee that this transaction should permit \\n     * @param amount Amount of LUSD to borrow\\n     * @param upperHint Address of the Trove near the upper bound of where the user's Trove should now sit in the ordered Trove list\\n     * @param lowerHint Address of the Trove near the lower bound of where the user's Trove should now sit in the ordered Trove list\\n     * @param getId Optional storage slot to retrieve the amount of LUSD to borrow\\n     * @param setId Optional storage slot to store the final amount of LUSD borrowed\\n    */\\n    function borrow(\\n        uint maxFeePercentage,\\n        uint amount,\\n        address upperHint,\\n        address lowerHint,\\n        uint getId,\\n        uint setId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam)  {\\n        uint _amount = getUint(getId, amount);\\n\\n        borrowerOperations.withdrawLUSD(maxFeePercentage, _amount, upperHint, lowerHint);\\n\\n        setUint(setId, _amount);\\n\\n        _eventName = \\\"LogBorrow(address,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(address(this), _amount, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Send LUSD to repay debt\\n     * @notice Repay LUSD Trove debt\\n     * @param amount Amount of LUSD to repay\\n     * @param upperHint Address of the Trove near the upper bound of where the user's Trove should now sit in the ordered Trove list\\n     * @param lowerHint Address of the Trove near the lower bound of where the user's Trove should now sit in the ordered Trove list\\n     * @param getId Optional storage slot to retrieve the amount of LUSD from\\n     * @param setId Optional storage slot to store the final amount of LUSD repaid\\n    */\\n    function repay(\\n        uint amount,\\n        address upperHint,\\n        address lowerHint,\\n        uint getId,\\n        uint setId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam)  {\\n        uint _amount = getUint(getId, amount);\\n\\n        if (_amount == uint(-1)) {\\n            uint _lusdBal = lusdToken.balanceOf(address(this));\\n            uint _totalDebt = troveManager.getTroveDebt(address(this));\\n            _amount = _lusdBal > _totalDebt ? _totalDebt : _lusdBal;\\n        }\\n\\n        borrowerOperations.repayLUSD(_amount, upperHint, lowerHint);\\n\\n        setUint(setId, _amount);\\n\\n        _eventName = \\\"LogRepay(address,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(address(this), _amount, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Increase or decrease Trove ETH collateral and LUSD debt in one transaction\\n     * @notice Adjust Trove debt and/or collateral\\n     * @param maxFeePercentage The maximum borrow fee that this transaction should permit \\n     * @param withdrawAmount Amount of ETH to withdraw\\n     * @param depositAmount Amount of ETH to deposit\\n     * @param borrowAmount Amount of LUSD to borrow\\n     * @param repayAmount Amount of LUSD to repay\\n     * @param upperHint Address of the Trove near the upper bound of where the user's Trove should now sit in the ordered Trove list\\n     * @param lowerHint Address of the Trove near the lower bound of where the user's Trove should now sit in the ordered Trove list\\n     * @param getIds Optional Get Ids for deposit, withdraw, borrow & repay\\n     * @param setIds Optional Set Ids for deposit, withdraw, borrow & repay\\n    */\\n    function adjust(\\n        uint maxFeePercentage,\\n        uint depositAmount,\\n        uint withdrawAmount,\\n        uint borrowAmount,\\n        uint repayAmount,\\n        address upperHint,\\n        address lowerHint,\\n        uint[] memory getIds,\\n        uint[] memory setIds\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        AdjustTrove memory adjustTrove;\\n\\n        adjustTrove.maxFeePercentage = maxFeePercentage;\\n\\n        depositAmount = getUint(getIds[0], depositAmount);\\n        adjustTrove.depositAmount = depositAmount == uint(-1) ? address(this).balance : depositAmount;\\n\\n        withdrawAmount = getUint(getIds[1], withdrawAmount);\\n        adjustTrove.withdrawAmount = withdrawAmount == uint(-1) ? troveManager.getTroveColl(address(this)) : withdrawAmount;\\n\\n        borrowAmount = getUint(getIds[2], borrowAmount);\\n\\n        repayAmount = getUint(getIds[3], repayAmount);\\n        if (repayAmount == uint(-1)) {\\n            uint _lusdBal = lusdToken.balanceOf(address(this));\\n            uint _totalDebt = troveManager.getTroveDebt(address(this));\\n            repayAmount = _lusdBal > _totalDebt ? _totalDebt : _lusdBal;\\n        }\\n\\n        adjustTrove.isBorrow = borrowAmount > 0;\\n        adjustTrove.lusdChange = adjustTrove.isBorrow ? borrowAmount : repayAmount;\\n        \\n        borrowerOperations.adjustTrove{value: adjustTrove.depositAmount}(\\n            adjustTrove.maxFeePercentage,\\n            adjustTrove.withdrawAmount,\\n            adjustTrove.lusdChange,\\n            adjustTrove.isBorrow,\\n            upperHint,\\n            lowerHint\\n        );\\n        \\n        setUint(setIds[0], adjustTrove.depositAmount);\\n        setUint(setIds[1], adjustTrove.withdrawAmount);\\n        setUint(setIds[2], borrowAmount);\\n        setUint(setIds[3], repayAmount);\\n\\n        _eventName = \\\"LogAdjust(address,uint256,uint256,uint256,uint256,uint256,uint256[],uint256[])\\\";\\n        _eventParam = abi.encode(address(this), maxFeePercentage, adjustTrove.depositAmount, adjustTrove.withdrawAmount, borrowAmount, repayAmount, getIds, setIds);\\n    }\\n\\n    /**\\n     * @dev Withdraw remaining ETH balance from user's redeemed Trove to their DSA\\n     * @param setId Optional storage slot to store the ETH claimed\\n     * @notice Claim remaining collateral from Trove\\n    */\\n    function claimCollateralFromRedemption(uint setId) external payable returns(string memory _eventName, bytes memory _eventParam) {\\n        uint amount = collateralSurplus.getCollateral(address(this));\\n        borrowerOperations.claimCollateral();\\n        setUint(setId, amount);\\n\\n        _eventName = \\\"LogClaimCollateralFromRedemption(address,uint256,uint256)\\\";\\n        _eventParam = abi.encode(address(this), amount, setId);\\n    }\\n    /* End: Trove */\\n\\n    /* Begin: Stability Pool */\\n\\n    /**\\n     * @dev Deposit LUSD into Stability Pool\\n     * @notice Deposit LUSD into Stability Pool\\n     * @param amount Amount of LUSD to deposit into Stability Pool\\n     * @param frontendTag Address of the frontend to make this deposit against (determines the kickback rate of rewards)\\n     * @param getDepositId Optional storage slot to retrieve the amount of LUSD from\\n     * @param setDepositId Optional storage slot to store the final amount of LUSD deposited\\n     * @param setEthGainId Optional storage slot to store any ETH gains in\\n     * @param setLqtyGainId Optional storage slot to store any LQTY gains in\\n    */\\n    function stabilityDeposit(\\n        uint amount,\\n        address frontendTag,\\n        uint getDepositId,\\n        uint setDepositId,\\n        uint setEthGainId,\\n        uint setLqtyGainId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        amount = getUint(getDepositId, amount);\\n\\n        amount = amount == uint(-1) ? lusdToken.balanceOf(address(this)) : amount;\\n\\n        uint ethGain = stabilityPool.getDepositorETHGain(address(this));\\n        uint lqtyBalanceBefore = lqtyToken.balanceOf(address(this));\\n        \\n        stabilityPool.provideToSP(amount, frontendTag);\\n        \\n        uint lqtyBalanceAfter = lqtyToken.balanceOf(address(this));\\n        uint lqtyGain = sub(lqtyBalanceAfter, lqtyBalanceBefore);\\n\\n        setUint(setDepositId, amount);\\n        setUint(setEthGainId, ethGain);\\n        setUint(setLqtyGainId, lqtyGain);\\n\\n        _eventName = \\\"LogStabilityDeposit(address,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(address(this), amount, ethGain, lqtyGain, frontendTag, getDepositId, setDepositId, setEthGainId, setLqtyGainId);\\n    }\\n\\n    /**\\n     * @dev Withdraw user deposited LUSD from Stability Pool\\n     * @notice Withdraw LUSD from Stability Pool\\n     * @param amount Amount of LUSD to withdraw from Stability Pool\\n     * @param getWithdrawId Optional storage slot to retrieve the amount of LUSD to withdraw from\\n     * @param setWithdrawId Optional storage slot to store the withdrawn LUSD\\n     * @param setEthGainId Optional storage slot to store any ETH gains in\\n     * @param setLqtyGainId Optional storage slot to store any LQTY gains in\\n    */\\n    function stabilityWithdraw(\\n        uint amount,\\n        uint getWithdrawId,\\n        uint setWithdrawId,\\n        uint setEthGainId,\\n        uint setLqtyGainId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        amount = getUint(getWithdrawId, amount);\\n\\n        amount = amount == uint(-1) ? stabilityPool.getCompoundedLUSDDeposit(address(this)) : amount;\\n\\n        uint ethGain = stabilityPool.getDepositorETHGain(address(this));\\n        uint lqtyBalanceBefore = lqtyToken.balanceOf(address(this));\\n        \\n        stabilityPool.withdrawFromSP(amount);\\n        \\n        uint lqtyBalanceAfter = lqtyToken.balanceOf(address(this));\\n        uint lqtyGain = sub(lqtyBalanceAfter, lqtyBalanceBefore);\\n\\n        setUint(setWithdrawId, amount);\\n        setUint(setEthGainId, ethGain);\\n        setUint(setLqtyGainId, lqtyGain);\\n\\n        _eventName = \\\"LogStabilityWithdraw(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(address(this), amount, ethGain, lqtyGain, getWithdrawId, setWithdrawId, setEthGainId, setLqtyGainId);\\n    }\\n\\n    /**\\n     * @dev Increase Trove collateral by sending Stability Pool ETH gain to user's Trove\\n     * @notice Moves user's ETH gain from the Stability Pool into their Trove\\n     * @param upperHint Address of the Trove near the upper bound of where the user's Trove should now sit in the ordered Trove list\\n     * @param lowerHint Address of the Trove near the lower bound of where the user's Trove should now sit in the ordered Trove list\\n    */\\n    function stabilityMoveEthGainToTrove(\\n        address upperHint,\\n        address lowerHint\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        uint amount = stabilityPool.getDepositorETHGain(address(this));\\n        stabilityPool.withdrawETHGainToTrove(upperHint, lowerHint);\\n        _eventName = \\\"LogStabilityMoveEthGainToTrove(address,uint256)\\\";\\n        _eventParam = abi.encode(address(this), amount);\\n    }\\n    /* End: Stability Pool */\\n\\n    /* Begin: Staking */\\n\\n    /**\\n     * @dev Sends LQTY tokens from user to Staking Pool\\n     * @notice Stake LQTY in Staking Pool\\n     * @param amount Amount of LQTY to stake\\n     * @param getStakeId Optional storage slot to retrieve the amount of LQTY to stake\\n     * @param setStakeId Optional storage slot to store the final staked amount (can differ if requested with max balance: uint(-1))\\n     * @param setEthGainId Optional storage slot to store any ETH gains\\n     * @param setLusdGainId Optional storage slot to store any LUSD gains\\n    */\\n    function stake(\\n        uint amount,\\n        uint getStakeId,\\n        uint setStakeId,\\n        uint setEthGainId,\\n        uint setLusdGainId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        amount = getUint(getStakeId, amount);\\n        amount = amount == uint(-1) ? lqtyToken.balanceOf(address(this)) : amount;\\n\\n        uint ethGain = staking.getPendingETHGain(address(this));\\n        uint lusdGain = staking.getPendingLUSDGain(address(this));\\n\\n        staking.stake(amount);\\n        setUint(setStakeId, amount);\\n        setUint(setEthGainId, ethGain);\\n        setUint(setLusdGainId, lusdGain);\\n\\n        _eventName = \\\"LogStake(address,uint256,uint256,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(address(this), amount, getStakeId, setStakeId, setEthGainId, setLusdGainId);\\n    }\\n\\n    /**\\n     * @dev Sends LQTY tokens from Staking Pool to user\\n     * @notice Unstake LQTY in Staking Pool\\n     * @param amount Amount of LQTY to unstake\\n     * @param getUnstakeId Optional storage slot to retrieve the amount of LQTY to unstake\\n     * @param setUnstakeId Optional storage slot to store the unstaked LQTY\\n     * @param setEthGainId Optional storage slot to store any ETH gains\\n     * @param setLusdGainId Optional storage slot to store any LUSD gains\\n    */\\n    function unstake(\\n        uint amount,\\n        uint getUnstakeId,\\n        uint setUnstakeId,\\n        uint setEthGainId,\\n        uint setLusdGainId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        amount = getUint(getUnstakeId, amount);\\n        amount = amount == uint(-1) ? staking.stakes(address(this)) : amount;\\n\\n        uint ethGain = staking.getPendingETHGain(address(this));\\n        uint lusdGain = staking.getPendingLUSDGain(address(this));\\n\\n        staking.unstake(amount);\\n        setUint(setUnstakeId, amount);\\n        setUint(setEthGainId, ethGain);\\n        setUint(setLusdGainId, lusdGain);\\n\\n        _eventName = \\\"LogUnstake(address,uint256,uint256,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(address(this), amount, getUnstakeId, setUnstakeId, setEthGainId, setLusdGainId);\\n    }\\n\\n    /**\\n     * @dev Sends ETH and LUSD gains from Staking to user\\n     * @notice Claim ETH and LUSD gains from Staking\\n     * @param setEthGainId Optional storage slot to store the claimed ETH\\n     * @param setLusdGainId Optional storage slot to store the claimed LUSD\\n    */\\n    function claimStakingGains(\\n        uint setEthGainId,\\n        uint setLusdGainId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        uint ethGain = staking.getPendingETHGain(address(this));\\n        uint lusdGain = staking.getPendingLUSDGain(address(this));\\n\\n        // Gains are claimed when a user's stake is adjusted, so we unstake 0 to trigger the claim\\n        staking.unstake(0);\\n        setUint(setEthGainId, ethGain);\\n        setUint(setLusdGainId, lusdGain);\\n        \\n        _eventName = \\\"LogClaimStakingGains(address,uint256,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(address(this), ethGain, lusdGain, setEthGainId, setLusdGainId);\\n    }\\n    /* End: Staking */\\n\\n}\\n\\ncontract ConnectV2Liquity is LiquityResolver {\\n    string public name = \\\"Liquity-v1\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/connectors/liquity/interface.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.6;\\n\\ninterface BorrowerOperationsLike {\\n    function openTrove(\\n        uint256 _maxFee,\\n        uint256 _LUSDAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    function addColl(address _upperHint, address _lowerHint) external payable;\\n\\n    function withdrawColl(\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function withdrawLUSD(\\n        uint256 _maxFee,\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function repayLUSD(\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function closeTrove() external;\\n\\n    function adjustTrove(\\n        uint256 _maxFee,\\n        uint256 _collWithdrawal,\\n        uint256 _debtChange,\\n        bool isDebtIncrease,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    function claimCollateral() external;\\n}\\n\\ninterface TroveManagerLike {\\n    function getTroveColl(address _borrower) external view returns (uint);\\n    function getTroveDebt(address _borrower) external view returns (uint);\\n}\\n\\ninterface StabilityPoolLike {\\n    function provideToSP(uint _amount, address _frontEndTag) external;\\n    function withdrawFromSP(uint _amount) external;\\n    function withdrawETHGainToTrove(address _upperHint, address _lowerHint) external;\\n    function getDepositorETHGain(address _depositor) external view returns (uint);\\n    function getDepositorLQTYGain(address _depositor) external view returns (uint);\\n    function getCompoundedLUSDDeposit(address _depositor) external view returns (uint);\\n}\\n\\ninterface StakingLike {\\n    function stake(uint _LQTYamount) external;\\n    function unstake(uint _LQTYamount) external;\\n    function getPendingETHGain(address _user) external view returns (uint);\\n    function getPendingLUSDGain(address _user) external view returns (uint);\\n    function stakes(address owner) external view returns (uint);\\n}\\n\\ninterface CollateralSurplusLike { \\n    function getCollateral(address _account) external view returns (uint);\\n}\\n\\ninterface LqtyTokenLike {\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/stores.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { MemoryInterface, InstaMapping } from \\\"./interfaces.sol\\\";\\n\\n\\nabstract contract Stores {\\n\\n  /**\\n   * @dev Return ethereum address\\n   */\\n  address constant internal ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  /**\\n   * @dev Return Wrapped ETH address\\n   */\\n  address constant internal wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n  /**\\n   * @dev Return memory variable address\\n   */\\n  MemoryInterface constant internal instaMemory = MemoryInterface(0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F);\\n\\n  /**\\n   * @dev Return InstaDApp Mapping Addresses\\n   */\\n  InstaMapping constant internal instaMapping = InstaMapping(0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88);\\n\\n  /**\\n   * @dev Get Uint value from InstaMemory Contract.\\n   */\\n  function getUint(uint getId, uint val) internal returns (uint returnVal) {\\n    returnVal = getId == 0 ? val : instaMemory.getUint(getId);\\n  }\\n\\n  /**\\n  * @dev Set Uint value in InstaMemory Contract.\\n  */\\n  function setUint(uint setId, uint val) virtual internal {\\n    if (setId != 0) instaMemory.setUint(setId, val);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/connectors/liquity/helpers.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.6;\\n\\nimport { DSMath } from \\\"../../common/math.sol\\\";\\nimport { Basic } from \\\"../../common/basic.sol\\\";\\n\\nimport { TokenInterface } from \\\"../../common/interfaces.sol\\\";\\n\\nimport {\\n    BorrowerOperationsLike,\\n    TroveManagerLike,\\n    StabilityPoolLike,\\n    StakingLike,\\n    CollateralSurplusLike,\\n    LqtyTokenLike\\n} from \\\"./interface.sol\\\";\\n\\nabstract contract Helpers is DSMath, Basic {\\n\\n    BorrowerOperationsLike internal constant borrowerOperations = BorrowerOperationsLike(0x24179CD81c9e782A4096035f7eC97fB8B783e007);\\n    TroveManagerLike internal constant troveManager = TroveManagerLike(0xA39739EF8b0231DbFA0DcdA07d7e29faAbCf4bb2);\\n    StabilityPoolLike internal constant stabilityPool = StabilityPoolLike(0x66017D22b0f8556afDd19FC67041899Eb65a21bb);\\n    StakingLike internal constant staking = StakingLike(0x4f9Fbb3f1E99B56e0Fe2892e623Ed36A76Fc605d);\\n    CollateralSurplusLike internal constant collateralSurplus = CollateralSurplusLike(0x3D32e8b97Ed5881324241Cf03b2DA5E2EBcE5521);\\n    LqtyTokenLike internal constant lqtyToken = LqtyTokenLike(0x6DEA81C8171D0bA574754EF6F8b412F2Ed88c54D);\\n    TokenInterface internal constant lusdToken = TokenInterface(0x5f98805A4E8be255a32880FDeC7F6728C6568bA0);\\n    \\n    // Prevents stack-too-deep error\\n    struct AdjustTrove {\\n        uint maxFeePercentage;\\n        uint withdrawAmount;\\n        uint depositAmount;\\n        uint lusdChange;\\n        bool isBorrow;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/connectors/liquity/events.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.6;\\n\\ncontract Events {\\n\\n    /* Trove */\\n    event LogOpen(\\n        address indexed borrower,\\n        uint maxFeePercentage,\\n        uint depositAmount,\\n        uint borrowAmount,\\n        uint256[] getIds,\\n        uint256[] setIds\\n    );\\n    event LogClose(address indexed borrower, uint setId);\\n    event LogDeposit(address indexed borrower, uint amount, uint getId, uint setId);\\n    event LogWithdraw(address indexed borrower, uint amount, uint getId, uint setId);\\n    event LogBorrow(address indexed borrower, uint amount, uint getId, uint setId);\\n    event LogRepay(address indexed borrower, uint amount, uint getId, uint setId);\\n    event LogAdjust(\\n        address indexed borrower,\\n        uint maxFeePercentage,\\n        uint depositAmount,\\n        uint withdrawAmount,\\n        uint borrowAmount,\\n        uint repayAmount,\\n        uint256[] getIds,\\n        uint256[] setIds\\n    );\\n    event LogClaimCollateralFromRedemption(address indexed borrower, uint amount, uint setId);\\n\\n    /* Stability Pool */\\n    event LogStabilityDeposit(\\n        address indexed borrower,\\n        uint amount,\\n        uint ethGain,\\n        uint lqtyGain,\\n        address frontendTag,\\n        uint getDepositId,\\n        uint setDepositId,\\n        uint setEthGainId,\\n        uint setLqtyGainId\\n    );\\n    event LogStabilityWithdraw(address indexed borrower,\\n        uint amount,\\n        uint ethGain,\\n        uint lqtyGain,\\n        uint getWithdrawId,\\n        uint setWithdrawId,\\n        uint setEthGainId,\\n        uint setLqtyGainId\\n    );\\n    event LogStabilityMoveEthGainToTrove(address indexed borrower, uint amount);\\n\\n    /* Staking */\\n    event LogStake(address indexed borrower, uint amount, uint getStakeId, uint setStakeId, uint setEthGainId, uint setLusdGainId);\\n    event LogUnstake(address indexed borrower, uint amount, uint getUnstakeId, uint setUnstakeId, uint setEthGainId, uint setLusdGainId);\\n    event LogClaimStakingGains(address indexed borrower, uint ethGain, uint lusdGain, uint setEthGainId, uint setLusdGainId);\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/interfaces.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\ninterface TokenInterface {\\n    function approve(address, uint256) external;\\n    function transfer(address, uint) external;\\n    function transferFrom(address, address, uint) external;\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n    function balanceOf(address) external view returns (uint);\\n    function decimals() external view returns (uint);\\n}\\n\\ninterface MemoryInterface {\\n    function getUint(uint id) external returns (uint num);\\n    function setUint(uint id, uint val) external;\\n}\\n\\ninterface InstaMapping {\\n    function cTokenMapping(address) external view returns (address);\\n    function gemJoinMapping(bytes32) external view returns (address);\\n}\\n\\ninterface AccountInterface {\\n    function enable(address) external;\\n    function disable(address) external;\\n    function isAuth(address) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/math.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract DSMath {\\n  uint constant WAD = 10 ** 18;\\n  uint constant RAY = 10 ** 27;\\n\\n  function add(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(x, y);\\n  }\\n\\n  function sub(uint x, uint y) internal virtual pure returns (uint z) {\\n    z = SafeMath.sub(x, y);\\n  }\\n\\n  function mul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.mul(x, y);\\n  }\\n\\n  function div(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.div(x, y);\\n  }\\n\\n  function wmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\\n  }\\n\\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\\n  }\\n\\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\\n  }\\n\\n  function rmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\\n  }\\n\\n  function toInt(uint x) internal pure returns (int y) {\\n    y = int(x);\\n    require(y >= 0, \\\"int-overflow\\\");\\n  }\\n\\n  function toRad(uint wad) internal pure returns (uint rad) {\\n    rad = mul(wad, 10 ** 27);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/basic.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { TokenInterface } from \\\"./interfaces.sol\\\";\\nimport { Stores } from \\\"./stores.sol\\\";\\nimport { DSMath } from \\\"./math.sol\\\";\\n\\nabstract contract Basic is DSMath, Stores {\\n\\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\\n        amt = (_amt / 10 ** (18 - _dec));\\n    }\\n\\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\\n        amt = mul(_amt, 10 ** (18 - _dec));\\n    }\\n\\n    function getTokenBal(TokenInterface token) internal view returns(uint _amt) {\\n        _amt = address(token) == ethAddr ? address(this).balance : token.balanceOf(address(this));\\n    }\\n\\n    function getTokensDec(TokenInterface buyAddr, TokenInterface sellAddr) internal view returns(uint buyDec, uint sellDec) {\\n        buyDec = address(buyAddr) == ethAddr ?  18 : buyAddr.decimals();\\n        sellDec = address(sellAddr) == ethAddr ?  18 : sellAddr.decimals();\\n    }\\n\\n    function encodeEvent(string memory eventName, bytes memory eventParam) internal pure returns (bytes memory) {\\n        return abi.encode(eventName, eventParam);\\n    }\\n\\n    function approve(TokenInterface token, address spender, uint256 amount) internal {\\n        try token.approve(spender, amount) {\\n\\n        } catch {\\n            token.approve(spender, 0);\\n            token.approve(spender, amount);\\n        }\\n    }\\n\\n    function changeEthAddress(address buy, address sell) internal pure returns(TokenInterface _buy, TokenInterface _sell){\\n        _buy = buy == ethAddr ? TokenInterface(wethAddr) : TokenInterface(buy);\\n        _sell = sell == ethAddr ? TokenInterface(wethAddr) : TokenInterface(sell);\\n    }\\n\\n    function convertEthToWeth(bool isEth, TokenInterface token, uint amount) internal {\\n        if(isEth) token.deposit{value: amount}();\\n    }\\n\\n    function convertWethToEth(bool isEth, TokenInterface token, uint amount) internal {\\n       if(isEth) {\\n            approve(token, address(token), amount);\\n            token.withdraw(amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"getIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"setIds\",\"type\":\"uint256[]\"}],\"name\":\"LogAdjust\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogClaimCollateralFromRedemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethGain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lusdGain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setEthGainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setLusdGainId\",\"type\":\"uint256\"}],\"name\":\"LogClaimStakingGains\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"getIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"setIds\",\"type\":\"uint256[]\"}],\"name\":\"LogOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogRepay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethGain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lqtyGain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"frontendTag\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getDepositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setDepositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setEthGainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setLqtyGainId\",\"type\":\"uint256\"}],\"name\":\"LogStabilityDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogStabilityMoveEthGainToTrove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethGain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lqtyGain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getWithdrawId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setWithdrawId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setEthGainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setLqtyGainId\",\"type\":\"uint256\"}],\"name\":\"LogStabilityWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getStakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setStakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setEthGainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setLusdGainId\",\"type\":\"uint256\"}],\"name\":\"LogStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getUnstakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setUnstakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setEthGainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setLusdGainId\",\"type\":\"uint256\"}],\"name\":\"LogUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lowerHint\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"getIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"setIds\",\"type\":\"uint256[]\"}],\"name\":\"adjust\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lowerHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"claimCollateralFromRedemption\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setEthGainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setLusdGainId\",\"type\":\"uint256\"}],\"name\":\"claimStakingGains\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lowerHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lowerHint\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"getIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"setIds\",\"type\":\"uint256[]\"}],\"name\":\"open\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lowerHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"frontendTag\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"getDepositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setDepositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setEthGainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setLqtyGainId\",\"type\":\"uint256\"}],\"name\":\"stabilityDeposit\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lowerHint\",\"type\":\"address\"}],\"name\":\"stabilityMoveEthGainToTrove\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getWithdrawId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setWithdrawId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setEthGainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setLqtyGainId\",\"type\":\"uint256\"}],\"name\":\"stabilityWithdraw\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getStakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setStakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setEthGainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setLusdGainId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getUnstakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setUnstakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setEthGainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setLusdGainId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lowerHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"ConnectV2Liquity","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}