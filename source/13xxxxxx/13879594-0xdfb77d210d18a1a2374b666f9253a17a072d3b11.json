{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"owner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"SafeERC20.sol\\\"; \\n\\ninterface HistoricalPriceConsumerV3 {\\n  function getLatestPriceX1e6(address) external view returns (int);\\n\\n}\\n\\ninterface VaultV0 {\\n    function expiry() external returns (uint);  \\n    function COLLAT_ADDRESS() external returns (address); \\n    function PRICE_FEED() external returns (address);\\n    function LINK_AGGREGATOR() external returns (address);\\n    \\n    /* Multisig Alpha */\\n    function setOwner(address newOwner) external;\\n    function settleStrike_MM(uint priceX1e6) external;\\n    function setExpiry(uint arbitraryExpiry) external;\\n    function setMaxCap(uint newDepositCap) external;\\n    function setMaker(address newMaker) external;\\n    function setPriceFeed(HistoricalPriceConsumerV3 newPriceFeed) external;\\n    function emergencyWithdraw() external;\\n    function depositOnBehalf(address tgt, uint256 amt) external;\\n    function setAllowInteraction(bool _flag) external;\\n}\\n\\ncontract OwnerProxy {\\n    using SafeERC20 for IERC20;\\n    \\n    address public multisigAlpha;\\n    address public multisigBeta;\\n    address public teamKey;\\n\\n    address public multisigAlpha_pending;\\n    address public multisigBeta_pending;\\n    address public teamKey_pending;\\n    \\n    mapping(bytes32 => uint) public queuedPriceFeed;\\n    \\n    event PriceFeedQueued(address indexed _vault, address pricedFeed);\\n    \\n    constructor() {\\n      multisigAlpha = msg.sender;\\n      multisigBeta  = msg.sender;\\n      teamKey       = msg.sender;\\n    }\\n    \\n    function setMultisigAlpha(address _newMultisig) external {\\n      require(msg.sender == multisigAlpha, \\\"!multisigAlpha\\\");\\n      multisigAlpha_pending = _newMultisig;\\n    }\\n\\n    function setMultisigBeta(address _newMultisig) external {\\n      require(msg.sender == multisigAlpha || msg.sender == multisigBeta, \\\"!multisigAlpha/Beta\\\");\\n      multisigBeta_pending = _newMultisig;\\n    }\\n    \\n    function setTeamKey(address _newTeamKey) external {\\n      require(msg.sender == multisigAlpha || msg.sender == multisigBeta || msg.sender == teamKey, \\\"!ownerKey\\\");\\n      teamKey_pending = _newTeamKey;\\n    }\\n    \\n    function acceptMultisigAlpha() external {\\n      require(msg.sender == multisigAlpha_pending, \\\"!multisigAlpha_pending\\\");\\n      multisigAlpha = multisigAlpha_pending;\\n    }\\n\\n    function acceptMultisigBeta() external {\\n      require(msg.sender == multisigBeta_pending, \\\"!multisigBeta_pending\\\");\\n      multisigBeta = multisigBeta_pending;\\n    }\\n\\n    function acceptTeamKey() external {\\n      require(msg.sender == teamKey_pending, \\\"!teamKey_pending\\\");\\n      teamKey = teamKey_pending;\\n    }\\n    \\n    function setOwner(VaultV0 _vault, address _newOwner) external { \\n      require(msg.sender == multisigAlpha, \\\"!multisigAlpha\\\");\\n      _vault.setOwner(_newOwner);\\n    }\\n    \\n    function emergencyWithdraw(VaultV0 _vault) external { \\n      require(msg.sender == multisigAlpha, \\\"!multisigAlpha\\\");\\n      _vault.emergencyWithdraw();\\n      IERC20 COLLAT = IERC20(_vault.COLLAT_ADDRESS());\\n      COLLAT.safeTransfer(multisigAlpha, COLLAT.balanceOf( address(this) ));\\n      require(COLLAT.balanceOf(address(this)) == 0, \\\"eWithdraw transfer failed.\\\"); \\n    }\\n    \\n    function queuePriceFeed(VaultV0 _vault, HistoricalPriceConsumerV3 _priceFeed) external {\\n      if        (msg.sender == multisigAlpha) {  // multisigAlpha can instantly change the price feed \\n        _vault.setPriceFeed(_priceFeed);\\n        return;\\n      } else if (msg.sender == multisigBeta) {\\n        bytes32 hashedParams = keccak256(abi.encodePacked(_vault, _priceFeed));\\n        if (queuedPriceFeed[hashedParams] == 0) {\\n          queuedPriceFeed[hashedParams] = block.timestamp + 1 days;\\n          emit PriceFeedQueued(address(_vault), address(_priceFeed));\\n        } else {\\n          require(block.timestamp > queuedPriceFeed[hashedParams], \\\"Timelocked\\\"); \\n          _vault.setPriceFeed(_priceFeed);\\n        }\\n      } else if (msg.sender == teamKey) {\\n        bytes32 hashedParams = keccak256(abi.encodePacked(_vault, _priceFeed));\\n        if (queuedPriceFeed[hashedParams] > 0) {\\n          require(block.timestamp > queuedPriceFeed[hashedParams], \\\"Timelocked\\\");\\n          _vault.setPriceFeed(_priceFeed);\\n        }\\n      } else {\\n        revert(\\\"Not Privileged Key\\\");\\n      }\\n    }\\n\\n    function settleStrike_MM(VaultV0 _vault, uint _priceX1e6) external {\\n      if   (msg.sender == multisigAlpha) { // Arbitrary price setting\\n        _vault.settleStrike_MM(_priceX1e6);\\n      } else {\\n        uint curPrice = uint(HistoricalPriceConsumerV3(_vault.PRICE_FEED()).getLatestPriceX1e6(_vault.LINK_AGGREGATOR()));\\n        uint upperBound = curPrice;\\n        uint lowerBound = curPrice; \\n        if (msg.sender == multisigBeta) {   // +/- 20% price set\\n          upperBound = curPrice * 1200 / 1000;\\n          lowerBound = curPrice *  800 / 1000;\\n        } else if (msg.sender == teamKey) { // +/- 5% price set\\n          upperBound = curPrice * 1050 / 1000;\\n          lowerBound = curPrice *  950 / 1000;        \\n        } else {\\n          revert(\\\"Not Owner Keys\\\");\\n        }\\n        if (_priceX1e6 > upperBound) revert(\\\"Price too high\\\");\\n        if (_priceX1e6 < lowerBound) revert(\\\"Price too low\\\");\\n        _vault.settleStrike_MM(_priceX1e6);       \\n      }\\n    }\\n    \\n    function setExpiry(VaultV0 _vault, uint _expiry) external {\\n      require(msg.sender == multisigBeta, \\\"Not multisigBeta\\\");\\n      require(_vault.expiry() > 0, \\\"Expired\\\");\\n      require(_expiry < _vault.expiry(), \\\"Can only set expiry nearer\\\");\\n      require(_expiry > block.timestamp + 1 hours, \\\"At least 1 hour buffer\\\");\\n      _vault.setExpiry(_expiry);\\n    }\\n    \\n    \\n    function depositOnBehalf(VaultV0 _vault, address _onBehalfOf, uint _amt) external {\\n      require(msg.sender == teamKey, \\\"Not teamKey\\\");\\n      IERC20 COLLAT = IERC20(_vault.COLLAT_ADDRESS()); \\n      COLLAT.transferFrom(msg.sender, address(this), _amt);\\n      COLLAT.approve(address(_vault), _amt);\\n      _vault.depositOnBehalf(_onBehalfOf, _amt);\\n      require(COLLAT.balanceOf(address(this)) == 0, \\\"Balance Left On OwnerProxy\\\");\\n    }\\n    \\n    function setMaxCap(VaultV0 _vault, uint _maxCap) external {\\n      require(msg.sender == teamKey, \\\"Not teamKey\\\");\\n      _vault.setMaxCap(_maxCap);\\n    }   \\n    \\n    function setAllowInteraction(VaultV0 _vault, bool _flag) external {\\n      require(msg.sender == teamKey, \\\"Not teamKey\\\");\\n      require(_vault.expiry() == 0, \\\"Not Expired\\\");\\n      _vault.setAllowInteraction(_flag);\\n    }\\n\\n    function setMaker(VaultV0 _vault, address _newMaker) external {\\n      if (msg.sender == multisigBeta) {  \\n        _vault.setMaker(_newMaker);\\n      } else if (msg.sender == teamKey) {\\n        require(_vault.expiry() == 0, \\\"Not Expired\\\");      \\n        _vault.setMaker(_newMaker);\\n      } else {\\n       revert(\\\"!teamKey,!musigBeta\\\");\\n      }\\n    }    \\n    \\n}\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"owner.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pricedFeed\",\"type\":\"address\"}],\"name\":\"PriceFeedQueued\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptMultisigAlpha\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptMultisigBeta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptTeamKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VaultV0\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"depositOnBehalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VaultV0\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multisigAlpha\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multisigAlpha_pending\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multisigBeta\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multisigBeta_pending\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VaultV0\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"contract HistoricalPriceConsumerV3\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"queuePriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"queuedPriceFeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VaultV0\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAllowInteraction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VaultV0\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"}],\"name\":\"setExpiry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VaultV0\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newMaker\",\"type\":\"address\"}],\"name\":\"setMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VaultV0\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxCap\",\"type\":\"uint256\"}],\"name\":\"setMaxCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMultisig\",\"type\":\"address\"}],\"name\":\"setMultisigAlpha\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMultisig\",\"type\":\"address\"}],\"name\":\"setMultisigBeta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VaultV0\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTeamKey\",\"type\":\"address\"}],\"name\":\"setTeamKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VaultV0\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_priceX1e6\",\"type\":\"uint256\"}],\"name\":\"settleStrike_MM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamKey_pending\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OwnerProxy","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":""}]}