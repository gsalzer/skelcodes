{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.10;\r\n\r\ninterface erc20 {\r\n    function approve(address, uint) external returns (bool);\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function balanceOf(address) external view returns (uint);\r\n}\r\n\r\ninterface synthetix {\r\n    function exchangeAtomically(\r\n        bytes32 sourceCurrencyKey,\r\n        uint sourceAmount,\r\n        bytes32 destinationCurrencyKey,\r\n        bytes32 trackingCode\r\n    ) external returns (uint amountReceived);\r\n}\r\n\r\ninterface exchanger {\r\n    function getAmountsForAtomicExchange(\r\n        uint sourceAmount,\r\n        bytes32 sourceCurrencyKey,\r\n        bytes32 destinationCurrencyKey\r\n    )\r\n    external\r\n    view\r\n    returns (\r\n        uint amountReceived,\r\n        uint fee,\r\n        uint exchangeFeeRate\r\n    );\r\n}\r\n\r\ninterface curve {\r\n    function get_dy(int128, int128, uint) external view returns (uint);\r\n    function exchange(int128, int128, uint, uint, address) external returns (uint);\r\n}\r\n\r\ncontract ibAMM {\r\n    synthetix snx = synthetix(0xDC01020857afbaE65224CfCeDb265d1216064c59);\r\n    exchanger exchange = exchanger(0x2A417C61B8062363e4ff50900779463b45d235f6);\r\n    curve eur = curve(0x19b080FE1ffA0553469D20Ca36219F17Fcf03859);\r\n\r\n    address susd = address(0x57Ab1ec28D129707052df4dF418D58a2D46d5f51);\r\n    address ibeur = address(0x96E61422b6A9bA0e068B6c5ADd4fFaBC6a4aae27);\r\n    address seur = address(0xD71eCFF9342A5Ced620049e616c5035F1dB98620);\r\n\r\n    constructor() {\r\n        erc20(susd).approve(address(snx), type(uint).max);\r\n        erc20(seur).approve(address(snx), type(uint).max);\r\n        erc20(ibeur).approve(address(eur), type(uint).max);\r\n        erc20(seur).approve(address(eur), type(uint).max);\r\n    }\r\n\r\n    function quote_snx(uint amount) external view returns (uint amountReceived) {\r\n        (amountReceived,,) = exchange.getAmountsForAtomicExchange(amount, \"sUSD\", \"sEUR\");\r\n    }\r\n\r\n    // Quote susd to ibeur\r\n    function quote_out(uint amount) external view returns (uint amountReceived) {\r\n        (uint _out,,) = exchange.getAmountsForAtomicExchange(amount, \"sUSD\", \"sEUR\");\r\n        return eur.get_dy(1, 0, _out);\r\n    }\r\n\r\n    // Quote ibeur to susd\r\n    function quote_in(uint amount) external view returns (uint amountReceived) {\r\n        uint _out = eur.get_dy(0, 1, amount);\r\n        (amountReceived,,) = exchange.getAmountsForAtomicExchange(_out, \"sEUR\", \"sUSD\");\r\n    }\r\n    \r\n    function swap_snx(uint amount, uint minOut) external returns (uint amountReceived) {\r\n        _safeTransferFrom(susd, msg.sender, address(this), amount);\r\n        amountReceived = snx.exchangeAtomically(\"sUSD\", amount, \"sEUR\", \"ibAMM\");\r\n        require(minOut > amountReceived, \"slippage\");\r\n        _safeTransfer(seur, msg.sender, amountReceived);\r\n    }\r\n    \r\n    // Trade susd to ibeur\r\n    function swap_out(uint amount, uint minOut) external returns (uint amountReceived) {\r\n        _safeTransferFrom(susd, msg.sender, address(this), amount);\r\n        amountReceived = snx.exchangeAtomically(\"sUSD\", amount, \"sEUR\", \"ibAMM\");\r\n        amountReceived = eur.exchange(1, 0, amountReceived, minOut, msg.sender);\r\n    }\r\n    \r\n    // Trade ibeur to susd\r\n    function swap_in(uint amount, uint minOut) external returns (uint amountReceived) {\r\n        _safeTransferFrom(ibeur, msg.sender, address(this), amount);\r\n        amountReceived = eur.exchange(0, 1, amount, 0, address(this));\r\n        amountReceived = snx.exchangeAtomically(\"sEUR\", amountReceived, \"sUSD\", \"ibAMM\");\r\n        require(amountReceived > minOut, \"slippage\");\r\n        _safeTransfer(susd, msg.sender, amountReceived);\r\n    }\r\n\r\n    function _safeTransfer(address token, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(erc20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n\r\n    function _safeTransferFrom(address token, address from, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(erc20.transferFrom.selector, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"quote_in\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"quote_out\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"quote_snx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"}],\"name\":\"swap_in\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"}],\"name\":\"swap_out\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"}],\"name\":\"swap_snx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ibAMM","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://35066f71b34d42f6d969eeb8d3dbe7ab1d8b23b3a0488de1fea31d6b6714703d"}]}