{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/LaidBackLlamas.sol\": {\r\n      \"content\": \"/***\\n *    ██╗      █████╗ ██╗██████╗     ██████╗  █████╗  ██████╗██╗  ██╗\\n *    ██║     ██╔══██╗██║██╔══██╗    ██╔══██╗██╔══██╗██╔════╝██║ ██╔╝\\n *    ██║     ███████║██║██║  ██║    ██████╔╝███████║██║     █████╔╝ \\n *    ██║     ██╔══██║██║██║  ██║    ██╔══██╗██╔══██║██║     ██╔═██╗ \\n *    ███████╗██║  ██║██║██████╔╝    ██████╔╝██║  ██║╚██████╗██║  ██╗\\n *    ╚══════╝╚═╝  ╚═╝╚═╝╚═════╝     ╚═════╝ ╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝\\n *                                                                   \\n *        ██╗     ██╗      █████╗ ███╗   ███╗ █████╗ ███████╗        \\n *        ██║     ██║     ██╔══██╗████╗ ████║██╔══██╗██╔════╝        \\n *        ██║     ██║     ███████║██╔████╔██║███████║███████╗        \\n *        ██║     ██║     ██╔══██║██║╚██╔╝██║██╔══██║╚════██║        \\n *        ███████╗███████╗██║  ██║██║ ╚═╝ ██║██║  ██║███████║        \\n *        ╚══════╝╚══════╝╚═╝  ╚═╝╚═╝     ╚═╝╚═╝  ╚═╝╚══════╝        \\n * Written by MaxFlowO2, Senior Developer and Partner of G&M² Labs\\n * Follow me on https://github.com/MaxflowO2 or Twitter @MaxFlowO2\\n * email: cryptobymaxflowO2@gmail.com\\n *\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./access/Developer.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./interface/IMAX721.sol\\\";\\nimport \\\"./modules/Whitelist.sol\\\";\\nimport \\\"./interface/IMAX721Whitelist.sol\\\";\\nimport \\\"./modules/PaymentSplitter.sol\\\";\\nimport \\\"./modules/BAYC.sol\\\";\\nimport \\\"./modules/ContractURI.sol\\\";\\n\\ncontract LaidBackLlamas is ERC721, BAYC, ContractURI, IMAX721, IMAX721Whitelist, Whitelist, ERC165Storage, ReentrancyGuard, PaymentSplitter, Developer, Ownable {\\n  using Counters for Counters.Counter;\\n  Counters.Counter private _tokenIdCounter;\\n  Counters.Counter private _teamMintCounter;\\n  uint private mintStartID;\\n  uint private constant MINT_FEES = 0.1 ether;\\n  uint private constant PRESALE_MINT_FEES = 0.07 ether;\\n  uint private endOfPresale;\\n  uint private constant MINT_SIZE = 7000;\\n  uint private teamMintSize;\\n  string private base;\\n  bool private enableMinter;\\n  bool private enableWhiteList;\\n  bool private lockedProvenance;\\n  bool private lockedPayees;\\n\\n  event UpdatedBaseURI(string _old, string _new);\\n  event UpdatedMintSize(uint _old, uint _new);\\n  event UpdatedMintStatus(bool _old, bool _new);\\n  event UpdatedTeamMintSize(uint _old, uint _new);\\n  event UpdatedWhitelistStatus(bool _old, bool _new);\\n  event UpdatedPresaleEnd(uint _old, uint _new);\\n  event ProvenanceLocked(bool _status);\\n  event PayeesLocked(bool _status);\\n\\n  // bytes4 constants for ERC165\\n  bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n  bytes4 private constant _INTERFACE_ID_IBAYC = 0xdee68dd1;\\n  bytes4 private constant _INTERFACE_ID_IContractURI = 0xe8a3d485;\\n  bytes4 private constant _INTERFACE_ID_IMAX721 = 0x29499a25;\\n  bytes4 private constant _INTERFACE_ID_IMAX721Whitelist = 0x22699a34;\\n  bytes4 private constant _INTERFACE_ID_Whitelist = 0xc683630d;\\n  bytes4 private constant _INTERFACE_ID_Developer = 0x18f19aba;\\n  bytes4 private constant _INTERFACE_ID_PaymentSplitter = 0x4a7f18f2;\\n\\n  constructor() ERC721(\\\"Laid Back Llamas\\\", \\\"LBL\\\") {\\n\\n    // ECR165 Interfaces Supported\\n    _registerInterface(_INTERFACE_ID_ERC721);\\n    _registerInterface(_INTERFACE_ID_IBAYC);\\n    _registerInterface(_INTERFACE_ID_IContractURI);\\n    _registerInterface(_INTERFACE_ID_IMAX721);\\n    _registerInterface(_INTERFACE_ID_IMAX721Whitelist);\\n    _registerInterface(_INTERFACE_ID_Whitelist);\\n    _registerInterface(_INTERFACE_ID_Developer);\\n    _registerInterface(_INTERFACE_ID_PaymentSplitter);\\n  }\\n\\n/***\\n *    ███╗   ███╗██╗███╗   ██╗████████╗\\n *    ████╗ ████║██║████╗  ██║╚══██╔══╝\\n *    ██╔████╔██║██║██╔██╗ ██║   ██║   \\n *    ██║╚██╔╝██║██║██║╚██╗██║   ██║   \\n *    ██║ ╚═╝ ██║██║██║ ╚████║   ██║   \\n *    ╚═╝     ╚═╝╚═╝╚═╝  ╚═══╝   ╚═╝   \\n */\\n\\n  function publicMint(uint amount) public payable nonReentrant(){\\n    require(lockedProvenance, \\\"Set Providence hashes\\\");\\n    require(enableMinter, \\\"Minter not active\\\");\\n    require(_tokenIdCounter.current() + amount <= MINT_SIZE, \\\"Can not mint that many\\\");\\n    uint yourBalance = IERC721(address(this)).balanceOf(msg.sender);\\n    if(enableWhiteList) {\\n      require(msg.value == PRESALE_MINT_FEES * amount, \\\"Wrong amount of Native Token\\\");\\n      require(isWhitelist[msg.sender], \\\"You are not Whitelisted\\\");\\n      require(yourBalance < 3 && amount + yourBalance <= 3, \\\"You can not get that many!\\\");\\n      checkTime();\\n      // locks them out of whitelist, soft reentrancy guard\\n      _removeWhitelist(msg.sender);\\n      for (uint i = 0; i < amount; i++) {\\n        _safeMint(msg.sender, mintID());\\n        _tokenIdCounter.increment();\\n      }\\n    } else {\\n      require(msg.value == MINT_FEES * amount, \\\"Wrong amount of Native Token\\\");\\n      require(yourBalance < 5 && amount + yourBalance <= 5, \\\"You can not get that many!\\\");\\n      for (uint i = 0; i < amount; i++) {\\n        _safeMint(msg.sender, mintID());\\n        _tokenIdCounter.increment();\\n      }\\n    }\\n  }\\n\\n\\n  function teamMint(address _address) public onlyOwner {\\n    require(lockedProvenance, \\\"Set Providence hashes\\\");\\n    require(teamMintSize != 0, \\\"Team minting not enabled\\\");\\n    require(_tokenIdCounter.current() < MINT_SIZE, \\\"Can not mint that many\\\");\\n    require(_teamMintCounter.current() < teamMintSize, \\\"Can not team mint anymore\\\");\\n    _safeMint(_address, mintID());\\n    _tokenIdCounter.increment();\\n    _teamMintCounter.increment();\\n  }\\n\\n  // @notice this shifts the _tokenIdCounter to proper mint number\\n  function mintID() internal view returns (uint) {\\n    return (mintStartID + _tokenIdCounter.current()) % MINT_SIZE;\\n  }\\n\\n  // @notice this will check time and set whitelist to disabled\\n  function checkTime() private {\\n    if(endOfPresale <= block.timestamp) {\\n      enableWhiteList = !enableWhiteList;\\n    }\\n  } \\n\\n  // Function to receive ether, msg.data must be empty\\n  receive() external payable {\\n    // From PaymentSplitter.sol, 99% of the time won't register\\n    emit PaymentReceived(msg.sender, msg.value);\\n  }\\n\\n  // Function to receive ether, msg.data is not empty\\n  fallback() external payable {\\n    // From PaymentSplitter.sol, 99% of the time won't register\\n    emit PaymentReceived(msg.sender, msg.value);\\n  }\\n\\n  function getBalance() external view returns (uint) {\\n    return address(this).balance;\\n  }\\n\\n/***\\n *     ██████╗ ██╗    ██╗███╗   ██╗███████╗██████╗ \\n *    ██╔═══██╗██║    ██║████╗  ██║██╔════╝██╔══██╗\\n *    ██║   ██║██║ █╗ ██║██╔██╗ ██║█████╗  ██████╔╝\\n *    ██║   ██║██║███╗██║██║╚██╗██║██╔══╝  ██╔══██╗\\n *    ╚██████╔╝╚███╔███╔╝██║ ╚████║███████╗██║  ██║\\n *     ╚═════╝  ╚══╝╚══╝ ╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝\\n * This section will have all the internals set to onlyOwner\\n */\\n\\n  // @notice click this to start it up initally, for ease by onlyOwner\\n  function startMinting() public onlyOwner {\\n    require(lockedProvenance && lockedPayees, \\\"Prerequisites not met\\\");\\n    // This is the initial setting\\n    // Set Presale end time and emit\\n    uint prevEndOfPresale = endOfPresale;\\n    endOfPresale = block.timestamp + 1 days;\\n    emit UpdatedPresaleEnd(prevEndOfPresale, endOfPresale);\\n    // Set Whitelist status and emit\\n    bool prevWhitelist = enableWhiteList;\\n    enableWhiteList = true;\\n    emit UpdatedWhitelistStatus(prevWhitelist, enableWhiteList);\\n    // Set Minter Status and emit\\n    bool prevMintStatus = enableMinter;\\n    enableMinter = true;\\n    emit UpdatedMintStatus(prevMintStatus, enableMinter);\\n  }\\n\\n\\n  // @notice this will enable publicMint()\\n  function enableMinting() public onlyOwner {\\n    bool old = enableMinter;\\n    enableMinter = true;\\n    emit UpdatedMintStatus(old, enableMinter);\\n  }\\n\\n  // @notice this will disable publicMint()\\n  function disableMinting() public onlyOwner {\\n    bool old = enableMinter;\\n    enableMinter = false;\\n    emit UpdatedMintStatus(old, enableMinter);\\n  }\\n\\n  // @notice this will enable whitelist or \\\"if\\\" in publicMint()\\n  function enableWhitelist() public onlyOwner {\\n    // Set Presale end time and emit\\n    uint prevEndOfPresale = endOfPresale;\\n    endOfPresale = block.timestamp + 1 days;\\n    emit UpdatedPresaleEnd(prevEndOfPresale, endOfPresale);\\n    // Set Whitelist status and emit\\n    bool prevWhitelist = enableWhiteList;\\n    enableWhiteList = true;\\n    emit UpdatedWhitelistStatus(prevWhitelist, enableWhiteList);\\n  }\\n\\n  // @notice this will disable whitelist or \\\"else\\\" in publicMint()\\n  function disableWhitelist() public onlyOwner {\\n    bool old = enableWhiteList;\\n    enableWhiteList = false;\\n    emit UpdatedWhitelistStatus(old, enableWhiteList);\\n  }\\n  \\n  // @notice adding functions to mapping\\n  function addWhitelistBatch(address [] memory _addresses) public onlyOwner {\\n    _addWhitelistBatch(_addresses);\\n  }\\n\\n  // @notice adding functions to mapping\\n  function addWhitelist(address _address) public onlyOwner {\\n    _addWhitelist(_address);\\n  }\\n\\n  // @notice removing functions to mapping\\n  function removeWhitelistBatch(address [] memory _addresses) public onlyOwner {\\n    _removeWhitelistBatch(_addresses);\\n  }\\n\\n  // @notice removing functions to mapping\\n  function removeWhitelist(address _address) public onlyOwner {\\n    _removeWhitelist(_address);\\n  }\\n\\n/***\\n *    ██████╗ ███████╗██╗   ██╗\\n *    ██╔══██╗██╔════╝██║   ██║\\n *    ██║  ██║█████╗  ██║   ██║\\n *    ██║  ██║██╔══╝  ╚██╗ ██╔╝\\n *    ██████╔╝███████╗ ╚████╔╝ \\n *    ╚═════╝ ╚══════╝  ╚═══╝  \\n * This section will have all the internals set to onlyDev\\n * also contains all overrides required for funtionality\\n */\\n\\n  // @notice will add an address to PaymentSplitter by onlyDev role\\n  function addPayee(address newAddy, uint newShares) public onlyDev {\\n    require(!lockedPayees, \\\"Can not set, payees locked\\\");\\n    _addPayee(newAddy, newShares);\\n  }\\n\\n  // @notice will lock payees on PaymentSplitter.sol\\n  function lockPayees() public onlyDev {\\n    require(!lockedPayees, \\\"Can not set, payees locked\\\");\\n    lockedPayees = true;\\n    emit PayeesLocked(lockedPayees);\\n  }\\n\\n  // @notice will update _baseURI() by onlyDev role\\n  function setBaseURI(string memory _base) public onlyDev {\\n    string memory old = base;\\n    base = _base;\\n    emit UpdatedBaseURI(old, base);\\n  }\\n\\n  // @notice will set the ContractURI for OpenSea\\n  function setContractURI(string memory _contractURI) public onlyDev {\\n    _setContractURI(_contractURI);\\n  }\\n\\n  // @notice will set \\\"team minting\\\" by onlyDev role\\n  function setTeamMinting(uint _amount) public onlyDev {\\n    uint old = teamMintSize;\\n    teamMintSize = _amount;\\n    emit UpdatedTeamMintSize(old, teamMintSize);\\n  }\\n\\n  // @notice this will set the Provenance Hashes\\n  // This will also set the starting order as well!\\n  // Only one shot to do this, otherwise it shows as invalid\\n  function setProvenance(string memory _images, string memory _json) public onlyDev {\\n    require(lockedPayees, \\\"Can not set, payees unlocked\\\");\\n    require(!lockedProvenance, \\\"Already Set!\\\");\\n    // This is the initial setting\\n    _setProvenanceImages(_images);\\n    _setProvenanceJSON(_json);\\n    // Now to psuedo-random the starting number\\n    // Your API should be a random before this step!\\n    mintStartID = uint(keccak256(abi.encodePacked(block.timestamp, msg.sender, _images, _json, block.difficulty))) % MINT_SIZE;\\n    _setStartNumber(mintStartID);\\n    // @notice Locks sequence\\n    lockedProvenance = true;\\n    emit ProvenanceLocked(lockedProvenance);\\n  }\\n\\n  // @notice this will set the reveal timestamp\\n  // This is more for your API and not on chain...\\n  function setRevealTimestamp(uint _time) public onlyDev {\\n    _setRevealTimestamp(_time);\\n  }\\n\\n  // @notice function useful for accidental ETH transfers to contract (to user address)\\n  // wraps _user in payable to fix address -> address payable\\n  // Set to onlyOwner, this is case of a foulup on PaymentSplitter or minting\\n  function sweepEthToAddress(address _user, uint _amount) public onlyOwner {\\n    payable(_user).transfer(_amount);\\n  }\\n\\n  ///\\n  /// Developer, these are the overrides\\n  ///\\n\\n  // @notice solidity required override for _baseURI()\\n  function _baseURI() internal view override returns (string memory) {\\n    return base;\\n  }\\n\\n  // @notice solidity required override for supportsInterface(bytes4)\\n  function supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC165Storage, IERC165) returns (bool) {\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n  // @notice will return status of Minter\\n  function minterStatus() external view override(IMAX721) returns (bool) {\\n    return enableMinter;\\n  }\\n\\n  // @notice will return minting fees\\n  function minterFees() external pure override(IMAX721) returns (uint) {\\n    return MINT_FEES;\\n  }\\n\\n  // @notice will return presale minting fees\\n  function presaleMinterFees() external pure returns (uint) {\\n    return PRESALE_MINT_FEES;\\n  }\\n\\n  // @notice will return maximum mint capacity\\n  function minterMaximumCapacity() external pure override(IMAX721) returns (uint) {\\n    return MINT_SIZE;\\n  }\\n\\n  // @notice will return maximum \\\"team minting\\\" capacity\\n  function minterMaximumTeamMints() external view override(IMAX721) returns (uint) {\\n    return teamMintSize;\\n  }\\n  // @notice will return \\\"team mints\\\" left\\n  function minterTeamMintsRemaining() external view override(IMAX721) returns (uint) {\\n    return teamMintSize - _teamMintCounter.current();\\n  }\\n\\n  // @notice will return \\\"team mints\\\" count\\n  function minterTeamMintsCount() external view override(IMAX721) returns (uint) {\\n    return _teamMintCounter.current();\\n  }\\n\\n  // @notice will return current token count\\n  function totalSupply() external view override(IMAX721) returns (uint) {\\n    return _tokenIdCounter.current();\\n  }\\n\\n  // @notice will return whitelist end timestamp\\n  function whitelistEnd() external view override(IMAX721Whitelist) returns (uint256) {\\n    return endOfPresale;\\n  }\\n\\n  // @notice will return whitelist status of Minter\\n  function whitelistStatus() external view override(IMAX721Whitelist) returns (bool) {\\n    return enableWhiteList;\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/modules/Whitelist.sol\": {\r\n      \"content\": \"/***\\n *    ██╗    ██╗██╗  ██╗██╗████████╗███████╗██╗     ██╗███████╗████████╗\\n *    ██║    ██║██║  ██║██║╚══██╔══╝██╔════╝██║     ██║██╔════╝╚══██╔══╝\\n *    ██║ █╗ ██║███████║██║   ██║   █████╗  ██║     ██║███████╗   ██║   \\n *    ██║███╗██║██╔══██║██║   ██║   ██╔══╝  ██║     ██║╚════██║   ██║   \\n *    ╚███╔███╔╝██║  ██║██║   ██║   ███████╗███████╗██║███████║   ██║   \\n *     ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝   ╚═╝   ╚══════╝╚══════╝╚═╝╚══════╝   ╚═╝   \\n * Written by MaxFlowO2, Senior Developer and Partner of G&M² Labs\\n * Follow me on https://github.com/MaxflowO2 or Twitter @MaxFlowO2\\n * email: cryptobymaxflowO2@gmail.com\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nabstract contract Whitelist {\\n\\n  // ERC165 data\\n  // Public getter isWhitelist(address) => 0xc683630d\\n  // Whitelist is 0xc683630d\\n\\n  // set contract mapping\\n  mapping(address => bool) public isWhitelist;\\n\\n  // only event needed\\n  event ChangeToWhitelist(address _address, bool old, bool update);\\n\\n  // adding functions to mapping\\n  function _addWhitelistBatch(address [] memory _addresses) internal {\\n    for (uint i = 0; i < _addresses.length; i++) {\\n      _addWhitelist(_addresses[i]);\\n    }\\n  }\\n\\n  function _addWhitelist(address _address) internal {\\n    require(!isWhitelist[_address], \\\"Already on Whitelist\\\");\\n    bool old = isWhitelist[_address];\\n    isWhitelist[_address] = true;\\n    emit ChangeToWhitelist(_address, old, isWhitelist[_address]);\\n  }\\n\\n  // removing functions to mapping\\n  function _removeWhitelistBatch(address [] memory _addresses) internal {\\n    for (uint i = 0; i < _addresses.length; i++) {\\n      _removeWhitelist(_addresses[i]);\\n    }\\n  }\\n\\n  function _removeWhitelist(address _address) internal {\\n    require(isWhitelist[_address], \\\"Already off Whitelist\\\");\\n    bool old = isWhitelist[_address];\\n    isWhitelist[_address] = false;\\n    emit ChangeToWhitelist(_address, old, isWhitelist[_address]);\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/modules/PaymentSplitter.sol\": {\r\n      \"content\": \"/***\\n *    ██████╗  █████╗ ██╗   ██╗███╗   ███╗███████╗███╗   ██╗████████╗\\n *    ██╔══██╗██╔══██╗╚██╗ ██╔╝████╗ ████║██╔════╝████╗  ██║╚══██╔══╝\\n *    ██████╔╝███████║ ╚████╔╝ ██╔████╔██║█████╗  ██╔██╗ ██║   ██║   \\n *    ██╔═══╝ ██╔══██║  ╚██╔╝  ██║╚██╔╝██║██╔══╝  ██║╚██╗██║   ██║   \\n *    ██║     ██║  ██║   ██║   ██║ ╚═╝ ██║███████╗██║ ╚████║   ██║   \\n *    ╚═╝     ╚═╝  ╚═╝   ╚═╝   ╚═╝     ╚═╝╚══════╝╚═╝  ╚═══╝   ╚═╝   \\n *                                                                   \\n *    ███████╗██████╗ ██╗     ██╗████████╗████████╗███████╗██████╗   \\n *    ██╔════╝██╔══██╗██║     ██║╚══██╔══╝╚══██╔══╝██╔════╝██╔══██╗  \\n *    ███████╗██████╔╝██║     ██║   ██║      ██║   █████╗  ██████╔╝  \\n *    ╚════██║██╔═══╝ ██║     ██║   ██║      ██║   ██╔══╝  ██╔══██╗  \\n *    ███████║██║     ███████╗██║   ██║      ██║   ███████╗██║  ██║  \\n *    ╚══════╝╚═╝     ╚══════╝╚═╝   ╚═╝      ╚═╝   ╚══════╝╚═╝  ╚═╝  \\n * This is a re-write of @openzeppelin/contracts/finance/PaymentSplitter.sol\\n * Rewritten by MaxFlowO2, Senior Developer and Partner of G&M² Labs\\n * Follow me on https://github.com/MaxflowO2 or Twitter @MaxFlowO2\\n * email: cryptobymaxflowO2@gmail.com\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n// Removal of SafeMath due to ^0.8.0 standards, not needed\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n */\\n\\nabstract contract PaymentSplitter is Context {\\n\\n  // ERC165 data\\n  // totalShares() => 0x3a98ef39\\n  // totalReleased() => 0xe33b7de3\\n  // shares(address) => 0xce7c2ac2\\n  // released(address) => 0x9852595c\\n  // payee(uint256) => 0x8b83209b\\n  // claim() => 0x4e71d92d\\n  // PaymentSplitter => 0x4a7f18f2\\n\\n  event PayeeAdded(address account, uint256 shares);\\n  event PaymentReleased(address to, uint256 amount);\\n  event PaymentReceived(address from, uint256 amount);\\n\\n  uint256 private _totalShares;\\n  uint256 private _totalReleased;\\n  mapping(address => uint256) private _shares;\\n  mapping(address => uint256) private _released;\\n  address[] private _payees;\\n\\n  /**\\n   * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n   * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n   * reliability of the events, and not the actual splitting of Ether.\\n   *\\n   * To learn more about this see the Solidity documentation for\\n   * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n   * functions].\\n   *\\n   *  receive() external payable virtual {\\n   *    emit PaymentReceived(_msgSender(), msg.value);\\n   *  }\\n   *\\n   *  // Fallback function is called when msg.data is not empty\\n   *  // Added to PaymentSplitter.sol\\n   *  fallback() external payable {\\n   *    emit PaymentReceived(_msgSender(), msg.value);\\n   *  }\\n   *\\n   * receive() and fallback() to be handled at final contract\\n   */\\n\\n  /**\\n   * @dev Getter for the total shares held by payees.\\n   */\\n  // totalShares() => 0x3a98ef39\\n  function totalShares() public view returns (uint256) {\\n    return _totalShares;\\n  }\\n\\n  /**\\n   * @dev Getter for the total amount of Ether already released.\\n   */\\n  // totalReleased() => 0xe33b7de3\\n  function totalReleased() public view returns (uint256) {\\n    return _totalReleased;\\n  }\\n\\n  /**\\n   * @dev Getter for the amount of shares held by an account.\\n   */\\n  // shares(address) => 0xce7c2ac2\\n  function shares(address account) public view returns (uint256) {\\n    return _shares[account];\\n  }\\n\\n  /**\\n   * @dev Getter for the amount of Ether already released to a payee.\\n   */\\n  // released(address) => 0x9852595c\\n  function released(address account) public view returns (uint256) {\\n    return _released[account];\\n  }\\n\\n  /**\\n   * @dev Getter for the address of the payee number `index`.\\n   */\\n  // payee(uint256) => 0x8b83209b\\n  function payee(uint256 index) public view returns (address) {\\n    return _payees[index];\\n  }\\n\\n  /**\\n   * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n   * total shares and their previous withdrawals.\\n   */\\n  // This function was updated from \\\"account\\\" to msg.sender\\n  // claim() => 0x4e71d92d\\n  function claim() public virtual {\\n    require(_shares[msg.sender] > 0, \\\"PaymentSplitter: msg.sender has no shares\\\");\\n\\n    uint256 totalReceived = address(this).balance + _totalReleased;\\n    uint256 payment = (totalReceived * _shares[msg.sender]) / _totalShares - _released[msg.sender];\\n\\n    require(payment != 0, \\\"PaymentSplitter: msg.sender is not due payment\\\");\\n\\n    _released[msg.sender] = _released[msg.sender] + payment;\\n    _totalReleased = _totalReleased + payment;\\n\\n    Address.sendValue(payable(msg.sender), payment);\\n    emit PaymentReleased(msg.sender, payment);\\n  }\\n\\n  /**\\n   * @dev Add a new payee to the contract.\\n   * @param account The address of the payee to add.\\n   * @param shares_ The number of shares owned by the payee.\\n   */\\n  // This function was updated to internal\\n  function _addPayee(address account, uint256 shares_) internal {\\n    require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n    require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n    require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n    _payees.push(account);\\n    _shares[account] = shares_;\\n    _totalShares = _totalShares + shares_;\\n\\n    emit PayeeAdded(account, shares_);\\n  }\\n}\\n\\n\"\r\n    },\r\n    \"/contracts/modules/ContractURI.sol\": {\r\n      \"content\": \"/***\\n *     ██████╗ ██████╗ ███╗   ██╗████████╗██████╗  █████╗  ██████╗████████╗    ██╗   ██╗██████╗ ██╗\\n *    ██╔════╝██╔═══██╗████╗  ██║╚══██╔══╝██╔══██╗██╔══██╗██╔════╝╚══██╔══╝    ██║   ██║██╔══██╗██║\\n *    ██║     ██║   ██║██╔██╗ ██║   ██║   ██████╔╝███████║██║        ██║       ██║   ██║██████╔╝██║\\n *    ██║     ██║   ██║██║╚██╗██║   ██║   ██╔══██╗██╔══██║██║        ██║       ██║   ██║██╔══██╗██║\\n *    ╚██████╗╚██████╔╝██║ ╚████║   ██║   ██║  ██║██║  ██║╚██████╗   ██║       ╚██████╔╝██║  ██║██║\\n *     ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝   ╚═╝        ╚═════╝ ╚═╝  ╚═╝╚═╝\\n * Written by MaxFlowO2, Senior Developer and Partner of G&M² Labs\\n * Follow me on https://github.com/MaxflowO2 or Twitter @MaxFlowO2\\n * email: cryptobymaxflowO2@gmail.com\\n *\\n * Purpose: OpenSea compliance on chain ID #1-5\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../interface/IContractURI.sol\\\";\\n\\nabstract contract ContractURI is IContractURI {\\n\\n  // ERC165 stuff to be added\\n  // all internals are not calculated\\n  // contractURI() => 0xe8a3d485\\n  // ContractURI => 0xe8a3d485\\n\\n  event ContractURIChange(string _old, string _new);\\n\\n  string private thisContractURI;\\n\\n  // @notice this sets the contractURI\\n  function _setContractURI(string memory newURI) internal {\\n    string memory old = thisContractURI;\\n    thisContractURI = newURI;\\n    emit ContractURIChange(old, thisContractURI);\\n  }\\n\\n  // @notice will return string _ContractURI\\n  // contractURI() => 0xe8a3d485\\n  function contractURI() external view override(IContractURI) returns (string memory) {\\n    return thisContractURI;\\n  }\\n\\n}\\n\\n\\n\"\r\n    },\r\n    \"/contracts/modules/BAYC.sol\": {\r\n      \"content\": \"/***\\n *    ██████╗  █████╗ ██╗   ██╗ ██████╗\\n *    ██╔══██╗██╔══██╗╚██╗ ██╔╝██╔════╝\\n *    ██████╔╝███████║ ╚████╔╝ ██║     \\n *    ██╔══██╗██╔══██║  ╚██╔╝  ██║     \\n *    ██████╔╝██║  ██║   ██║   ╚██████╗\\n *    ╚═════╝ ╚═╝  ╚═╝   ╚═╝    ╚═════╝\\n * Written by MaxFlowO2, Senior Developer and Partner of G&M² Labs\\n * Follow me on https://github.com/MaxflowO2 or Twitter @MaxFlowO2\\n * email: cryptobymaxflowO2@gmail.com\\n *\\n * Purpose: Insipired by BAYC on Ethereum, Sets Provential Hashes and More\\n * Source: https://etherscan.io/address/0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d#code\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../interface/IBAYC.sol\\\";\\n\\nabstract contract BAYC is IBAYC {\\n\\n  // ERC165\\n  // RevealTimestamp() => 0x83ba7c1d\\n  // RevealProvenanceImages() => 0xd792d2a0\\n  // RevealProvenanceJSON() => 0x94352676\\n  // RevealStartNumber() => 0x1efb051a\\n  // BAYC => 0xdee68dd1\\n\\n  event SetProvenanceImages(string _old, string _new);\\n  event SetProvenanceJSON(string _old, string _new);\\n  event SetTimestamp(uint _old, uint _new);\\n  event SetStartNumber(uint _old, uint _new);\\n\\n  uint256 private timestamp;\\n  uint256 private startNumber;\\n  string private ProvenanceImages;\\n  string private ProvenanceJSON;\\n\\n  // @notice will set reveal timestamp\\n  // _setRevealTimestamp(uint256) => 0x20add1a4\\n  function _setRevealTimestamp(uint256 _timestamp) internal {\\n    uint256 old = timestamp;\\n    timestamp = _timestamp;\\n    emit SetTimestamp(old, timestamp);\\n  }\\n\\n  // @notice will set start number\\n  // _setStartNumber(uint256) => 0x4266377e\\n  function _setStartNumber(uint256 _startNumber) internal {\\n    uint256 old = startNumber;\\n    startNumber = _startNumber;\\n    emit SetStartNumber(old, startNumber);\\n  }\\n\\n  // @notice will set JSON Provenance\\n  // _setProvenanceJSON(string) => 0xf3808eb1\\n  function _setProvenanceJSON(string memory _ProvenanceJSON) internal {\\n    string memory old = ProvenanceJSON;\\n    ProvenanceJSON = _ProvenanceJSON;\\n    emit SetProvenanceJSON(old, ProvenanceJSON);\\n  }\\n\\n  // @notice will set Images Provenance\\n  // _setProvenanceImages(string) => 0x1ef799c6\\n  function _setProvenanceImages(string memory _ProvenanceImages) internal {\\n    string memory old = ProvenanceImages;\\n    ProvenanceImages = _ProvenanceImages;\\n    emit SetProvenanceImages(old, ProvenanceImages);\\n  }\\n\\n  // @notice will return timestamp of reveal\\n  // RevealTimestamp() => 0x83ba7c1d\\n  function RevealTimestamp() external view override(IBAYC) returns (uint256) {\\n    return timestamp;\\n  }\\n\\n  // @notice will return Provenance hash of images\\n  // RevealProvenanceImages() => 0xd792d2a0\\n  function RevealProvenanceImages() external view override(IBAYC) returns (string memory) {\\n    return ProvenanceImages;\\n  }\\n\\n  // @notice will return Provenance hash of metadata\\n  // RevealProvenanceJSON() => 0x94352676\\n  function RevealProvenanceJSON() external view override(IBAYC) returns (string memory) {\\n    return ProvenanceJSON;\\n  }\\n\\n  // @notice will return starting number for mint\\n  // RevealStartNumber() => 0x1efb051a\\n  function RevealStartNumber() external view override(IBAYC) returns (uint256) {\\n    return startNumber;\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/IMAX721Whitelist.sol\": {\r\n      \"content\": \"/***\\n *    ██╗███╗   ██╗████████╗███████╗██████╗ ███████╗ █████╗  ██████╗███████╗\\n *    ██║████╗  ██║╚══██╔══╝██╔════╝██╔══██╗██╔════╝██╔══██╗██╔════╝██╔════╝\\n *    ██║██╔██╗ ██║   ██║   █████╗  ██████╔╝█████╗  ███████║██║     █████╗  \\n *    ██║██║╚██╗██║   ██║   ██╔══╝  ██╔══██╗██╔══╝  ██╔══██║██║     ██╔══╝  \\n *    ██║██║ ╚████║   ██║   ███████╗██║  ██║██║     ██║  ██║╚██████╗███████╗\\n *    ╚═╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝     ╚═╝  ╚═╝ ╚═════╝╚══════╝\\n *                                                                          \\n *    ███╗   ███╗ █████╗ ██╗  ██╗  ███████╗██████╗  ██╗                     \\n *    ████╗ ████║██╔══██╗╚██╗██╔╝  ╚════██║╚════██╗███║                     \\n *    ██╔████╔██║███████║ ╚███╔╝█████╗ ██╔╝ █████╔╝╚██║                     \\n *    ██║╚██╔╝██║██╔══██║ ██╔██╗╚════╝██╔╝ ██╔═══╝  ██║                     \\n *    ██║ ╚═╝ ██║██║  ██║██╔╝ ██╗     ██║  ███████╗ ██║                     \\n *    ╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝     ╚═╝  ╚══════╝ ╚═╝                     \\n *\\n *    ██╗    ██╗██╗  ██╗██╗████████╗███████╗██╗     ██╗███████╗████████╗\\n *    ██║    ██║██║  ██║██║╚══██╔══╝██╔════╝██║     ██║██╔════╝╚══██╔══╝\\n *    ██║ █╗ ██║███████║██║   ██║   █████╗  ██║     ██║███████╗   ██║   \\n *    ██║███╗██║██╔══██║██║   ██║   ██╔══╝  ██║     ██║╚════██║   ██║   \\n *    ╚███╔███╔╝██║  ██║██║   ██║   ███████╗███████╗██║███████║   ██║   \\n *     ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝   ╚═╝   ╚══════╝╚══════╝╚═╝╚══════╝   ╚═╝   \\n * Written by MaxFlowO2, Senior Developer and Partner of G&M² Labs\\n * Follow me on https://github.com/MaxflowO2 or Twitter @MaxFlowO2\\n * email: cryptobymaxflowO2@gmail.com\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n  ///\\n  /// Developer this is the standard interface for all ERC721's written by myself\\n  ///\\n\\ninterface IMAX721Whitelist is IERC165 {\\n\\n  // ERC165 data\\n  // whitelistStatus() => 0x9ddf7ad3\\n  // whitelistEnd() => 0xbfb6e0e7\\n  // IMAX721Whitelist => 0x22699a34\\n\\n  // @notice will return status of whitelist\\n  function whitelistStatus() external view returns (bool);\\n\\n  // @notice will return whitelist end (quantity or time)\\n  function whitelistEnd() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/IMAX721.sol\": {\r\n      \"content\": \"/***\\n *    ██╗███╗   ██╗████████╗███████╗██████╗ ███████╗ █████╗  ██████╗███████╗\\n *    ██║████╗  ██║╚══██╔══╝██╔════╝██╔══██╗██╔════╝██╔══██╗██╔════╝██╔════╝\\n *    ██║██╔██╗ ██║   ██║   █████╗  ██████╔╝█████╗  ███████║██║     █████╗  \\n *    ██║██║╚██╗██║   ██║   ██╔══╝  ██╔══██╗██╔══╝  ██╔══██║██║     ██╔══╝  \\n *    ██║██║ ╚████║   ██║   ███████╗██║  ██║██║     ██║  ██║╚██████╗███████╗\\n *    ╚═╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝     ╚═╝  ╚═╝ ╚═════╝╚══════╝\\n *                                                                          \\n *    ███╗   ███╗ █████╗ ██╗  ██╗  ███████╗██████╗  ██╗                     \\n *    ████╗ ████║██╔══██╗╚██╗██╔╝  ╚════██║╚════██╗███║                     \\n *    ██╔████╔██║███████║ ╚███╔╝█████╗ ██╔╝ █████╔╝╚██║                     \\n *    ██║╚██╔╝██║██╔══██║ ██╔██╗╚════╝██╔╝ ██╔═══╝  ██║                     \\n *    ██║ ╚═╝ ██║██║  ██║██╔╝ ██╗     ██║  ███████╗ ██║                     \\n *    ╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝     ╚═╝  ╚══════╝ ╚═╝                     \\n * Written by MaxFlowO2, Senior Developer and Partner of G&M² Labs\\n * Follow me on https://github.com/MaxflowO2 or Twitter @MaxFlowO2\\n * email: cryptobymaxflowO2@gmail.com\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n  ///\\n  /// Developer this is the standard interface for all ERC721's written by myself\\n  ///\\n\\ninterface IMAX721 is IERC165 {\\n\\n  // ERC165 data\\n  // minterStatus() => 0x2ecd28ab\\n  // minterFees() => 0xd95ae162\\n  // minterMaximumCapacity() => 0x78c5939b\\n  // minterMaximumTeamMints() => 0x049157bb\\n  // minterTeamMintsRemaining() => 0x5c17e370\\n  // minterTeamMintsCount() => 0xe68b7961\\n  // totalSupply() => 0x18160ddd\\n  // IMAX721 => 0x29499a25\\n\\n  // @notice will return status of Minter\\n  // minterStatus() => 0x2ecd28ab\\n  function minterStatus() external view returns (bool);\\n\\n  // @notice will return minting fees\\n  // minterFees() => 0xd95ae162\\n  function minterFees() external view returns (uint256);\\n\\n  // @notice will return maximum mint capacity\\n  // minterMaximumCapacity() => 0x78c5939b\\n  function minterMaximumCapacity() external view returns (uint256);\\n\\n  // @notice will return maximum \\\"team minting\\\" capacity\\n  // minterMaximumTeamMints() => 0x049157bb\\n  function minterMaximumTeamMints() external view returns (uint256);\\n\\n  // @notice will return \\\"team mints\\\" left\\n  // minterTeamMintsRemaining() => 0x5c17e370\\n  function minterTeamMintsRemaining() external view returns (uint256);\\n\\n  // @notice will return \\\"team mints\\\" count\\n  // minterTeamMintsCount() => 0xe68b7961\\n  function minterTeamMintsCount() external view returns (uint256);\\n\\n  // @notice will return current token count\\n  // totalSupply() => 0x18160ddd\\n  function totalSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/IContractURI.sol\": {\r\n      \"content\": \"/***\\n *    ██╗ ██████╗ ██████╗ ███╗   ██╗████████╗██████╗  █████╗  ██████╗████████╗    ██╗   ██╗██████╗ ██╗\\n *    ██║██╔════╝██╔═══██╗████╗  ██║╚══██╔══╝██╔══██╗██╔══██╗██╔════╝╚══██╔══╝    ██║   ██║██╔══██╗██║\\n *    ██║██║     ██║   ██║██╔██╗ ██║   ██║   ██████╔╝███████║██║        ██║       ██║   ██║██████╔╝██║\\n *    ██║██║     ██║   ██║██║╚██╗██║   ██║   ██╔══██╗██╔══██║██║        ██║       ██║   ██║██╔══██╗██║\\n *    ██║╚██████╗╚██████╔╝██║ ╚████║   ██║   ██║  ██║██║  ██║╚██████╗   ██║       ╚██████╔╝██║  ██║██║\\n *    ╚═╝ ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝   ╚═╝        ╚═════╝ ╚═╝  ╚═╝╚═╝\\n * Written by MaxFlowO2, Senior Developer and Partner of G&M² Labs\\n * Follow me on https://github.com/MaxflowO2 or Twitter @MaxFlowO2\\n * email: cryptobymaxflowO2@gmail.com\\n *\\n * Purpose: OpenSea compliance on chain ID #1-5\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface IContractURI is IERC165{\\n\\n  // contractURI() => 0xe8a3d485\\n  // IContractURI => 0xe8a3d485\\n\\n  // @notice this is the contractURI() for OpeanSea compliance\\n  // contractURI() => 0xe8a3d485\\n  function contractURI() external view returns (string memory);\\n}\\n\\n\"\r\n    },\r\n    \"/contracts/interface/IBAYC.sol\": {\r\n      \"content\": \"/***\\n *    ██╗██████╗  █████╗ ██╗   ██╗ ██████╗\\n *    ██║██╔══██╗██╔══██╗╚██╗ ██╔╝██╔════╝\\n *    ██║██████╔╝███████║ ╚████╔╝ ██║     \\n *    ██║██╔══██╗██╔══██║  ╚██╔╝  ██║     \\n *    ██║██████╔╝██║  ██║   ██║   ╚██████╗\\n *    ╚═╝╚═════╝ ╚═╝  ╚═╝   ╚═╝    ╚═════╝\\n * Written by MaxFlowO2, Senior Developer and Partner of G&M² Labs\\n * Follow me on https://github.com/MaxflowO2 or Twitter @MaxFlowO2\\n * email: cryptobymaxflowO2@gmail.com\\n *\\n * Purpose: Insipired by BAYC on Ethereum, Sets Provential Hashes and More\\n * Source: https://etherscan.io/address/0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d#code\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface IBAYC is IERC165{\\n\\n  // ERC165\\n  // RevealTimestamp() => 0x83ba7c1d\\n  // RevealProvenanceImages() => 0xd792d2a0\\n  // RevealProvenanceJSON() => 0x94352676\\n  // RevealStartNumber() => 0x1efb051a\\n  // IBAYC => 0x515a7c7c\\n\\n  // @notice will return timestamp of reveal\\n  // RevealTimestamp() => 0x83ba7c1d\\n  function RevealTimestamp() external view returns (uint256);\\n\\n  // @notice will return Provenance hash of images\\n  // RevealProvenanceImages() => 0xd792d2a0\\n  function RevealProvenanceImages() external view returns (string memory);\\n\\n  // @notice will return Provenance hash of metadata\\n  // RevealProvenanceJSON() => 0x94352676\\n  function RevealProvenanceJSON() external view returns (string memory);\\n\\n  // @notice will return starting number for mint\\n  // RevealStartNumber() => 0x1efb051a\\n  function RevealStartNumber() external view returns (uint256);\\n}\\n\\n\"\r\n    },\r\n    \"/contracts/access/Developer.sol\": {\r\n      \"content\": \"/***\\n *    ██████╗ ███████╗██╗   ██╗███████╗██╗      ██████╗ ██████╗ ███████╗██████╗ \\n *    ██╔══██╗██╔════╝██║   ██║██╔════╝██║     ██╔═══██╗██╔══██╗██╔════╝██╔══██╗\\n *    ██║  ██║█████╗  ██║   ██║█████╗  ██║     ██║   ██║██████╔╝█████╗  ██████╔╝\\n *    ██║  ██║██╔══╝  ╚██╗ ██╔╝██╔══╝  ██║     ██║   ██║██╔═══╝ ██╔══╝  ██╔══██╗\\n *    ██████╔╝███████╗ ╚████╔╝ ███████╗███████╗╚██████╔╝██║     ███████╗██║  ██║\\n *    ╚═════╝ ╚══════╝  ╚═══╝  ╚══════╝╚══════╝ ╚═════╝ ╚═╝     ╚══════╝╚═╝  ╚═╝\\n * This is a re-write of @openzeppelin/contracts/access/Ownable.sol\\n * Rewritten by MaxFlowO2, Senior Developer and Partner of G&M² Labs\\n * Follow me on https://github.com/MaxflowO2 or Twitter @MaxFlowO2\\n * email: cryptobymaxflowO2@gmail.com\\n */\\n\\n// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2\\n// Rewritten for onlyDev modifier\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (a developer) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the developer account will be the one that deploys the contract. This\\n * can later be changed with {transferDeveloper}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyDev`, which can be applied to your functions to restrict their use to\\n * the developer.\\n */\\nabstract contract Developer is Context {\\n\\n    // ERC165\\n    // developer() => 0xca4b208b\\n    // renounceDeveloper() => 0xad6d9c17\\n    // transferDeveloper(address) => 0xb671f4ea\\n    // Developer => 0x18f19aba\\n\\n    address private _developer;\\n\\n    event DeveloperTransferred(address indexed previousDeveloper, address indexed newDeveloper);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial developer.\\n     */\\n    constructor() {\\n        _transferDeveloper(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current developer.\\n     */\\n    // developer() => 0xca4b208b\\n    function developer() public view virtual returns (address) {\\n        return _developer;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the developer.\\n     */\\n    modifier onlyDev() {\\n        require(developer() == _msgSender(), \\\"Developer: caller is not the developer\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without developer. It will not be possible to call\\n     * `onlyDev` functions anymore. Can only be called by the current developer.\\n     *\\n     * NOTE: Renouncing developership will leave the contract without an developer,\\n     * thereby removing any functionality that is only available to the developer.\\n     */\\n    // renounceDeveloper() => 0xad6d9c17\\n    function renounceDeveloper() public virtual onlyDev {\\n        _transferDeveloper(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers Developer of the contract to a new account (`newDeveloper`).\\n     * Can only be called by the current developer.\\n     */\\n    // transferDeveloper(address) => 0x64cb4edb\\n    function transferDeveloper(address newDeveloper) public virtual onlyDev {\\n        require(newDeveloper != address(0), \\\"Developer: new developer is the zero address\\\");\\n        _transferDeveloper(newDeveloper);\\n    }\\n\\n    /**\\n     * @dev Transfers Developer of the contract to a new account (`newDeveloper`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferDeveloper(address newDeveloper) internal virtual {\\n        address oldDeveloper = _developer;\\n        _developer = newDeveloper;\\n        emit DeveloperTransferred(oldDeveloper, newDeveloper);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Storage is ERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"old\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"update\",\"type\":\"bool\"}],\"name\":\"ChangeToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_old\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_new\",\"type\":\"string\"}],\"name\":\"ContractURIChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousDeveloper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDeveloper\",\"type\":\"address\"}],\"name\":\"DeveloperTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"PayeesLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"ProvenanceLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_old\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_new\",\"type\":\"string\"}],\"name\":\"SetProvenanceImages\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_old\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_new\",\"type\":\"string\"}],\"name\":\"SetProvenanceJSON\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"SetStartNumber\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"SetTimestamp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_old\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_new\",\"type\":\"string\"}],\"name\":\"UpdatedBaseURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"UpdatedMintSize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_old\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_new\",\"type\":\"bool\"}],\"name\":\"UpdatedMintStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"UpdatedPresaleEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"UpdatedTeamMintSize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_old\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_new\",\"type\":\"bool\"}],\"name\":\"UpdatedWhitelistStatus\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"RevealProvenanceImages\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RevealProvenanceJSON\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RevealStartNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RevealTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newShares\",\"type\":\"uint256\"}],\"name\":\"addPayee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addWhitelistBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPayees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterMaximumCapacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterMaximumTeamMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterTeamMintsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterTeamMintsRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleMinterFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"removeWhitelistBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceDeveloper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_base\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_images\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_json\",\"type\":\"string\"}],\"name\":\"setProvenance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setRevealTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTeamMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sweepEthToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"teamMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDeveloper\",\"type\":\"address\"}],\"name\":\"transferDeveloper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"LaidBackLlamas","CompilerVersion":"v0.8.11+commit.d7f03943","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}