{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.6;\r\n   \r\n   \r\n    /**\r\n    * @title SafeMath\r\n    * @dev Math operations with safety checks that throw on error\r\n    */\r\n    library SafeMath {\r\n   \r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n   \r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */  \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n   \r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n       \r\n        return c;\r\n    }\r\n   \r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n   \r\n    /**\r\n    * @dev Mod two numbers.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n        }\r\n    }\r\n   \r\n   \r\n    /**\r\n    * @dev Interface of the ERC20 standard as defined in the EIP.\r\n    */\r\n    interface IERC20 {\r\n   \r\n    function totalSupply() external view returns (uint256);\r\n   \r\n    function balanceOf(address account) external view returns (uint256);\r\n   \r\n    /**\r\n    * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * Emits a {Transfer} event.\r\n    */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n   \r\n    /**\r\n    * @dev Returns the remaining number of tokens that `spender` will be\r\n    * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n    * zero by default.\r\n    *\r\n    * This value changes when {approve} or {transferFrom} are called.\r\n    */\r\n   \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n   \r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n   \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n   \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    }\r\n   \r\n   \r\n    /**\r\n    * @title SafeERC20\r\n    * @dev Wrappers around ERC20 operations that throw on failure.\r\n    * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n    * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n    */\r\n    library SafeERC20 {\r\n    using SafeMath for uint256;\r\n   \r\n        function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n            require(token.transfer(to, value));\r\n        }\r\n   \r\n        function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n            require(token.transferFrom(from, to, value));\r\n        }\r\n    }\r\n   \r\n     /**\r\n    * @title Presale\r\n    * @dev Presale distribution of tokens\r\n    */\r\n    contract Presale {\r\n       \r\n        using SafeERC20 for IERC20;\r\n       \r\n        using SafeMath for uint256;\r\n       \r\n        IERC20 private token;\r\n       \r\n        address private _owner;\r\n       \r\n        // Amount raised in presale\r\n        uint256 public amountRaisedPresale;\r\n       \r\n        address payable private wallet;\r\n       \r\n        mapping (address => uint256) private presaleInvestors;\r\n        uint256 public presaleStartDate;\r\n        uint256 public presaleEndDate;\r\n        uint256 public minContribution;\r\n        uint256 public minCap;\r\n        uint256 public maxCap;\r\n        uint public rate=20000000000000;\r\n   \r\n        //Tokens for presale\r\n        uint256 public presaleToken=50000000000000000000000000;\r\n       \r\n        //Tokens distributed in presale\r\n        uint256 public tokenSoldInPresale;\r\n       \r\n        // Events\r\n        event TokenPurchase(address _beneficiary,uint256 amount,uint256 tokens);\r\n\r\n        /**\r\n       * @dev constructor\r\n       * @param contractAddress Main token contractAddress\r\n       * @param _targetWallet Address where ether will be transferred\r\n       * @param _minContribution Minimum contribution in Presale\r\n       * @param _minCap Minimum cap to make presale successfull\r\n       * @param _maxCap Maximum cap of presale\r\n       * @param _endDate Presale end date\r\n       */\r\n        constructor(address contractAddress,address payable _targetWallet,uint256 _minContribution,uint256 _minCap,uint256 _maxCap,uint256 _endDate) public {\r\n            require(_targetWallet != address(0) ,\"Address zero\");\r\n            require(_minCap >0 && _maxCap>_minCap,\"Value must be greater\");\r\n            token=IERC20(contractAddress);\r\n            _owner=msg.sender;\r\n            wallet=_targetWallet;\r\n            presaleEndDate = block.timestamp+(60*60*24*_endDate);\r\n            presaleStartDate = block.timestamp;\r\n            minContribution = _minContribution;\r\n            minCap = _minCap;\r\n            maxCap = _maxCap;\r\n        }\r\n        /**\r\n       * @dev Throws if called by any account other than the owner.\r\n       */\r\n        modifier onlyOwner(){\r\n            require(_owner==msg.sender,\"Only owner\");\r\n             _;\r\n        }\r\n     \r\n       \r\n        modifier onlyBeforeEnd() {\r\n            require(block.timestamp>=presaleStartDate && block.timestamp <= presaleEndDate,\"Closed\");\r\n            _;\r\n        }\r\n   \r\n        modifier onlyMoreThanMinContribution() {\r\n            require(msg.value >= minContribution,\"Amount less than the minimum contribution\");\r\n            _;\r\n        }\r\n   \r\n        modifier onlyMaxCapNotReached() {\r\n            require(amountRaisedPresale <= maxCap,\"Max cap reached\");\r\n            _;\r\n        }\r\n   \r\n        /**\r\n       * @dev Receive function to receive funds\r\n       */\r\n        receive() external payable {\r\n             buyTokens(msg.sender);\r\n        }\r\n   \r\n        /**\r\n       * @dev Buy tokens .\r\n       * @param _beneficiary Address that will fund the smart contract and trafer the tokens\r\n       */\r\n        function buyTokens(address payable _beneficiary) public onlyBeforeEnd onlyMoreThanMinContribution onlyMaxCapNotReached payable {\r\n            require(_beneficiary != address(0));\r\n            uint256 amount=msg.value;\r\n            require(amount>0,\"Amount must be greater than 0\");\r\n\r\n            uint bonus=1;\r\n            if(amount>=1000000000000000000)\r\n            {\r\n                bonus=2;\r\n            }\r\n            uint256 tokens= _getTokens(amount);\r\n           \r\n            amountRaisedPresale=amountRaisedPresale.add(amount);\r\n            tokens=tokens.mul(bonus)*1000000000000000000;\r\n            token.transfer(_beneficiary,tokens);\r\n            tokenSoldInPresale=tokenSoldInPresale.add(tokens);\r\n            uint256 amountDeposited= presaleInvestors[_beneficiary];\r\n            presaleInvestors[_beneficiary]=amountDeposited.add(amount);\r\n            wallet.transfer(amount);\r\n            emit TokenPurchase(_beneficiary,amount,tokens);\r\n        }\r\n       \r\n        /**\r\n         * @dev Admin can close the presale\r\n         */\r\n        function closePresale() public onlyOwner{\r\n            presaleEndDate=block.timestamp;\r\n        }\r\n       \r\n         /**\r\n         * @dev Calculate number of tokens\r\n         */\r\n        function _getTokens(uint256 _amount) internal view returns (uint256 tokens)\r\n        {\r\n            uint256 capacityLeft = presaleToken.sub(tokenSoldInPresale);\r\n            tokens = _amount.div(rate);\r\n            require(capacityLeft >=tokens,\"Insufficient tokens\");\r\n            return tokens;\r\n        }\r\n       \r\n        // Check Presale is Closed\r\n        function checkPresaleClosed() public view returns(bool) {\r\n            return (block.timestamp>=presaleEndDate);\r\n        }\r\n   \r\n        //check presale failed\r\n        function checkPresaleFailed() public view returns(bool) {\r\n            return block.timestamp >= presaleEndDate && amountRaisedPresale < minCap;\r\n        }\r\n \r\n    }","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_targetWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"amountRaisedPresale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkPresaleClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkPresaleFailed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSoldInPresale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Presale","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c01a327e30b0fbf32861333f238b5c36a60abc09000000000000000000000000c23c1b2c7b53c97f1e73d80949cb9e0c35c00726000000000000000000000000000000000000000000000000000aa87bee5380000000000000000000000000000000000000000000000000056bc75e2d6310000000000000000000000000000000000000000000000000001b1ae4d6e2ef500000000000000000000000000000000000000000000000000000000000000000002d","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e98001d91c8e8421868b7b1892ff7344601ab968dac6d231b9964444cb334a73"}]}