{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\ninterface IUniswapV3PoolActions {\r\n\r\n    function mint(\r\n        address recipient,\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 amount,\r\n        bytes calldata data\r\n    ) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function collect(\r\n        address recipient,\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 amount0Requested,\r\n        uint128 amount1Requested\r\n    ) external returns (uint128 amount0, uint128 amount1);\r\n\r\n    function burn(\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 amount\r\n    ) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        address recipient,\r\n        bool zeroForOne,\r\n        int256 amountSpecified,\r\n        uint160 sqrtPriceLimitX96,\r\n        bytes calldata data\r\n    ) external returns (int256 amount0, int256 amount1);\r\n}\r\n\r\ninterface IUniswapV3PoolDerivedState {\r\n    function observe(uint32[] calldata secondsAgos)\r\n        external\r\n        view\r\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\r\n}\r\n\r\ninterface IUniswapV3PoolImmutables {\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function tickSpacing() external view returns (int24);\r\n}\r\n\r\ninterface IUniswapV3PoolState {\r\n\r\n    function slot0()\r\n        external\r\n        view\r\n        returns (\r\n            uint160 sqrtPriceX96,\r\n            int24 tick,\r\n            uint16 observationIndex,\r\n            uint16 observationCardinality,\r\n            uint16 observationCardinalityNext,\r\n            uint8 feeProtocol,\r\n            bool unlocked\r\n        );\r\n    \r\n    function positions(bytes32 key)\r\n        external\r\n        view\r\n        returns (\r\n            uint128 _liquidity,\r\n            uint256 feeGrowthInside0LastX128,\r\n            uint256 feeGrowthInside1LastX128,\r\n            uint128 tokensOwed0,\r\n            uint128 tokensOwed1\r\n        );\r\n}\r\ninterface IUniswapV3Pool is\r\n    IUniswapV3PoolImmutables,\r\n    IUniswapV3PoolState,\r\n    IUniswapV3PoolDerivedState,\r\n    IUniswapV3PoolActions\r\n{\r\n\r\n}\r\ninterface IPopsicleV3Optimizer {\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function tickSpacing() external view returns (int24);\r\n    function pool() external view returns (IUniswapV3Pool);\r\n    function tickLower() external view returns (int24);\r\n    function tickUpper() external view returns (int24);\r\n    function deposit(\r\n        uint256 amount0Desired,\r\n        uint256 amount1Desired,\r\n        address to\r\n    )\r\n        external\r\n        returns (\r\n            uint256 shares,\r\n            uint256 amount0,\r\n            uint256 amount1\r\n        );\r\n    function withdraw(uint256 shares, address to) external returns (uint256 amount0, uint256 amount1);\r\n    function rerange() external;\r\n    function rebalance() external;\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external ;\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external;\r\n    function transferFrom(address sender, address recipient, uint256 amount) external;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IChi is IERC20 {\r\n    function mint(uint256 value) external;\r\n    function free(uint256 value) external returns (uint256 freed);\r\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\r\n}\r\n\r\ninterface IGasDiscountExtension {\r\n    function calculateGas(uint256 gasUsed, uint256 flags, uint256 calldataLength) external view returns (IChi, uint256);\r\n}\r\n\r\ninterface IAggregationExecutor is IGasDiscountExtension {\r\n    function callBytes(bytes calldata data) external payable;  // 0xd9c45357\r\n}\r\n\r\nlibrary TransferHelper {\r\n    /// @notice Transfers tokens from the targeted address to the given destination\r\n    /// @notice Errors with 'STF' if transfer fails\r\n    /// @param token The contract address of the token to be transferred\r\n    /// @param from The originating address from which the tokens will be transferred\r\n    /// @param to The destination address of the transfer\r\n    /// @param value The amount to be transferred\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\r\n    }\r\n\r\n    /// @notice Transfers tokens from msg.sender to a recipient\r\n    /// @dev Errors with ST if transfer fails\r\n    /// @param token The contract address of the token which will be transferred\r\n    /// @param to The recipient of the transfer\r\n    /// @param value The value of the transfer\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\r\n    }\r\n\r\n    /// @notice Transfers ETH to the recipient address\r\n    /// @dev Fails with `STE`\r\n    /// @param to The destination of the transfer\r\n    /// @param value The value to be transferred\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'STE');\r\n    }\r\n}\r\n\r\ninterface IWETH9 is IERC20 {\r\n    /// @notice Deposit ether to get wrapped ether\r\n    function deposit() external payable;\r\n}\r\n\r\ninterface IRouter {\r\n    struct SwapDescription {\r\n        IERC20 srcToken;\r\n        IERC20 dstToken;\r\n        address srcReceiver;\r\n        address dstReceiver;\r\n        uint256 amount;\r\n        uint256 minReturnAmount;\r\n        uint256 flags;\r\n        bytes permit;\r\n    }\r\n\r\n    function swap(IAggregationExecutor caller, SwapDescription calldata desc, bytes calldata data) external payable returns (uint256 returnAmount, uint256 gasLeft);\r\n    function unoswap(IERC20 srcToken, uint256 amount, uint256 minReturn, bytes32[] calldata ) external payable returns(uint256 returnAmount);\r\n}\r\n\r\ncontract OptimizerZap {\r\n    IRouter constant router = IRouter(0x11111112542D85B3EF69AE05771c2dCCff4fAa26);\r\n    address constant eth = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address public immutable DAO;\r\n    \r\n    event ExtraTokens(\r\n        uint256 extraAmount0,\r\n        uint256 extraAmount1\r\n    );\r\n    \r\n    struct Cache {\r\n        uint256 amount0;\r\n        uint256 amount1;\r\n        uint256 return0Amount;\r\n        uint256 return1Amount;\r\n    }\r\n\r\n    struct TokenData {\r\n        bool IsUno;\r\n        IAggregationExecutor caller;\r\n        IRouter.SwapDescription desc;\r\n        bytes data;\r\n        bytes32[] pools;\r\n    }\r\n\r\n    constructor(address _DAO) {\r\n        DAO = _DAO;\r\n    }\r\n\r\n    function DepositInEth(address optimizer, address to, TokenData calldata tokenData) external payable {\r\n        uint value = msg.value;\r\n       \r\n        address token0 = IPopsicleV3Optimizer(optimizer).token0();\r\n        address token1 = IPopsicleV3Optimizer(optimizer).token1();\r\n        IWETH9(weth).deposit{value: value}();\r\n        IWETH9(weth).approve(optimizer, value);\r\n        require(token0 == weth || token1 == weth, \"BO\");\r\n        if (token0 == weth) {\r\n            require(token1 == address(tokenData.desc.srcToken), \"TNA\");\r\n            \r\n            TransferHelper.safeTransferFrom(token1, msg.sender, address(this), tokenData.desc.amount);\r\n            IERC20(token1).approve(optimizer, tokenData.desc.amount);\r\n            (, uint256 amount0,uint256 amount1) = IPopsicleV3Optimizer(optimizer).deposit(value, tokenData.desc.amount, to);\r\n            require(value >= amount0, \"UA0\");\r\n            require(tokenData.desc.amount >= amount1, \"UA1\");\r\n            _removeAllowance(token1, optimizer);\r\n            emit ExtraTokens(value-amount0, tokenData.desc.amount-amount1);\r\n        } else {\r\n            require(token0 == address(tokenData.desc.srcToken), \"TNA\");\r\n            TransferHelper.safeTransferFrom(token0, msg.sender, address(this), tokenData.desc.amount);\r\n            IERC20(token0).approve(optimizer, tokenData.desc.amount);\r\n            (, uint256 amount0,uint256 amount1) =IPopsicleV3Optimizer(optimizer).deposit(tokenData.desc.amount, value,  to);\r\n            require(tokenData.desc.amount >= amount0, \"UA0\");\r\n            require(value >= amount1, \"UA1\");\r\n            _removeAllowance(token0, optimizer);\r\n            emit ExtraTokens(tokenData.desc.amount-amount0, value-amount1);\r\n        }\r\n        _removeAllowance(weth, optimizer);\r\n    }\r\n\r\n    function ZapIn(address tokenIn, uint amount, address optimizer, address to, TokenData calldata token0Data, TokenData calldata token1Data) external payable {\r\n        require(optimizer != address(0));\r\n        require(to != address(0));\r\n        address token0 = IPopsicleV3Optimizer(optimizer).token0();\r\n        address token1 = IPopsicleV3Optimizer(optimizer).token1();\r\n        require(tokenIn == address(token0Data.desc.srcToken), \"NAT0\");\r\n        require(tokenIn == address(token1Data.desc.srcToken), \"NAT1\");\r\n        require(token0 == address(token0Data.desc.dstToken), \"IT0\");\r\n        require(token1 == address(token1Data.desc.dstToken), \"IT1\");\r\n\r\n        require(token0Data.desc.amount + token1Data.desc.amount <= amount, \"IA\");\r\n        Cache memory cache;\r\n        if (tokenIn == eth || tokenIn == address(0)) {\r\n            require(amount <= msg.value, \"BA\");\r\n\r\n            if (token0 == weth) {\r\n                IWETH9(weth).deposit{value: token0Data.desc.amount}();\r\n                IWETH9(weth).approve(optimizer, token0Data.desc.amount);\r\n                if (token1Data.IsUno)\r\n                {\r\n                    cache.return1Amount = router.unoswap{value: token1Data.desc.amount}(IERC20(tokenIn), token1Data.desc.amount, token1Data.desc.minReturnAmount, token1Data.pools);\r\n                } else {\r\n                    (cache.return1Amount, ) = router.swap{value: token1Data.desc.amount}(token1Data.caller, token1Data.desc, token1Data.data);\r\n                }\r\n\r\n                IERC20(token1).approve(optimizer, cache.return1Amount);\r\n                (, cache.amount0, cache.amount1) = IPopsicleV3Optimizer(optimizer).deposit(token0Data.desc.amount, cache.return1Amount, to);\r\n                require(token0Data.desc.amount >= cache.amount0, \"UA0\");\r\n                require(cache.return1Amount >= cache.amount1, \"UA1\");\r\n                emit ExtraTokens(token0Data.desc.amount-cache.amount0, cache.return1Amount-cache.amount1);\r\n            } else if (token1 == weth) {\r\n                IWETH9(weth).deposit{value: token1Data.desc.amount}();\r\n                IWETH9(weth).approve(optimizer, token1Data.desc.amount);\r\n                if (token0Data.IsUno)\r\n                {\r\n                    cache.return0Amount = router.unoswap{value: token0Data.desc.amount}(IERC20(tokenIn), token0Data.desc.amount, token0Data.desc.minReturnAmount, token0Data.pools);\r\n                } else {\r\n                    (cache.return0Amount, ) = router.swap{value: token0Data.desc.amount}(token0Data.caller, token0Data.desc, token0Data.data);\r\n                }\r\n                \r\n                IERC20(token0).approve(optimizer, cache.return0Amount);\r\n                (, cache.amount0, cache.amount1) = IPopsicleV3Optimizer(optimizer).deposit(cache.return0Amount, token1Data.desc.amount, to);\r\n                require(cache.return0Amount >= cache.amount0, \"UA0\");\r\n                require(token1Data.desc.amount >= cache.amount1, \"UA1\");\r\n                emit ExtraTokens(cache.return0Amount-cache.amount0, token1Data.desc.amount-cache.amount1);\r\n            } else {\r\n                if (token0Data.IsUno)\r\n                {\r\n                    cache.return0Amount = router.unoswap{value: token0Data.desc.amount}(IERC20(tokenIn), token0Data.desc.amount, token0Data.desc.minReturnAmount, token0Data.pools);\r\n                } else {\r\n                    (cache.return0Amount, ) = router.swap{value: token0Data.desc.amount}(token0Data.caller, token0Data.desc, token0Data.data);\r\n                }\r\n                if (token1Data.IsUno)\r\n                {\r\n                    cache.return1Amount = router.unoswap{value: token1Data.desc.amount}(IERC20(tokenIn), token1Data.desc.amount, token1Data.desc.minReturnAmount, token1Data.pools);\r\n                } else {\r\n                    (cache.return1Amount, ) = router.swap{value: token1Data.desc.amount}(token1Data.caller, token1Data.desc, token1Data.data);\r\n                }\r\n                IERC20(token0).approve(optimizer, cache.return0Amount);\r\n                IERC20(token1).approve(optimizer, cache.return1Amount);\r\n                (, cache.amount0, cache.amount1) = IPopsicleV3Optimizer(optimizer).deposit(cache.return0Amount, cache.return1Amount, to);\r\n                require(cache.return0Amount >= cache.amount0, \"UA0\");\r\n                require(cache.return1Amount >= cache.amount1, \"UA1\");\r\n                emit ExtraTokens(cache.return0Amount-cache.amount0, cache.return1Amount-cache.amount1);\r\n            }\r\n            _removeAllowance(token0, optimizer);\r\n            _removeAllowance(token1, optimizer);\r\n            return;\r\n        } else {\r\n            \r\n            TransferHelper.safeTransferFrom(tokenIn, msg.sender, address(this), amount);\r\n            IERC20(tokenIn).approve(address(router), amount);\r\n            if (tokenIn == token0) {\r\n                cache.return0Amount = token0Data.desc.amount;\r\n            } else {\r\n\r\n                if (token0Data.IsUno)\r\n                {\r\n                    cache.return0Amount = router.unoswap(IERC20(tokenIn), token0Data.desc.amount, token0Data.desc.minReturnAmount, token0Data.pools);\r\n                } else {\r\n                    (cache.return0Amount, ) = router.swap(token0Data.caller, token0Data.desc, token0Data.data);\r\n                }\r\n            }\r\n            if (tokenIn == token1) {\r\n                cache.return1Amount = token1Data.desc.amount;\r\n            } else {\r\n                \r\n                if (token1Data.IsUno)\r\n                {\r\n                    cache.return1Amount = router.unoswap(IERC20(tokenIn), token1Data.desc.amount, token1Data.desc.minReturnAmount, token1Data.pools);\r\n                } else {\r\n                    (cache.return1Amount, ) = router.swap(token1Data.caller, token1Data.desc, token1Data.data);\r\n                }\r\n            }\r\n            IERC20(token0).approve(optimizer, cache.return0Amount);\r\n            IERC20(token1).approve(optimizer, cache.return1Amount);\r\n            (, cache.amount0, cache.amount1) = IPopsicleV3Optimizer(optimizer).deposit(cache.return0Amount, cache.return1Amount, to);\r\n            require(cache.return0Amount >= cache.amount0, \"UA0\");\r\n            require(cache.return1Amount >= cache.amount1, \"UA1\");\r\n            emit ExtraTokens(cache.return0Amount-cache.amount0, cache.return1Amount-cache.amount1);\r\n            _removeAllowance(tokenIn, address(router));\r\n            _removeAllowance(token0, optimizer);\r\n            _removeAllowance(token1, optimizer);\r\n            return;\r\n        }\r\n    }\r\n    \r\n    function _removeAllowance(address token, address spender) internal {\r\n        if (IERC20(token).allowance(address(this), spender) > 0){\r\n            IERC20(token).approve(spender, 0);\r\n        }\r\n    }\r\n\r\n    /* ======= AUXILLIARY ======= */\r\n\r\n    /**\r\n     *  @notice allow anyone to send lost tokens (excluding principle or OHM) to the DAO\r\n     *  @return bool\r\n     */\r\n    function recoverLostToken( address _token ) external returns ( bool ) {\r\n        TransferHelper.safeTransfer(_token, DAO, IERC20( _token ).balanceOf( address(this)));\r\n        return true;\r\n    }\r\n\r\n    function refundETH() external returns ( bool ) {\r\n        if (address(this).balance > 0) TransferHelper.safeTransferETH(DAO, address(this).balance);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_DAO\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extraAmount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extraAmount1\",\"type\":\"uint256\"}],\"name\":\"ExtraTokens\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"optimizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"IsUno\",\"type\":\"bool\"},{\"internalType\":\"contract IAggregationExecutor\",\"name\":\"caller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"internalType\":\"struct IRouter.SwapDescription\",\"name\":\"desc\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"pools\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct OptimizerZap.TokenData\",\"name\":\"tokenData\",\"type\":\"tuple\"}],\"name\":\"DepositInEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"optimizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"IsUno\",\"type\":\"bool\"},{\"internalType\":\"contract IAggregationExecutor\",\"name\":\"caller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"internalType\":\"struct IRouter.SwapDescription\",\"name\":\"desc\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"pools\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct OptimizerZap.TokenData\",\"name\":\"token0Data\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"IsUno\",\"type\":\"bool\"},{\"internalType\":\"contract IAggregationExecutor\",\"name\":\"caller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"internalType\":\"struct IRouter.SwapDescription\",\"name\":\"desc\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"pools\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct OptimizerZap.TokenData\",\"name\":\"token1Data\",\"type\":\"tuple\"}],\"name\":\"ZapIn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverLostToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OptimizerZap","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000e9fb0c2206b53d3e76c88da58790f7fe9a45b373","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f56597702d3a6435a791325ea44ada6a01771320b99738f7f6e9db259300d91c"}]}