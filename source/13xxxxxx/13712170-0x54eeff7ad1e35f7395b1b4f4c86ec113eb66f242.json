{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/src/market/MarketGroup.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../common/config/UsingConfig.sol\\\";\\nimport \\\"../common/storage/UsingStorage.sol\\\";\\nimport \\\"../../interface/IMarketGroup.sol\\\";\\n\\ncontract MarketGroup is UsingConfig, UsingStorage, IMarketGroup {\\n\\tusing SafeMath for uint256;\\n\\n\\tconstructor(address _config) public UsingConfig(_config) UsingStorage() {}\\n\\n\\tfunction addGroup(address _addr) external {\\n\\t\\trequire(msg.sender == config().marketFactory(), \\\"illegal access\\\");\\n\\n\\t\\trequire(\\n\\t\\t\\teternalStorage().getBool(getGroupKey(_addr)) == false,\\n\\t\\t\\t\\\"already enabled\\\"\\n\\t\\t);\\n\\t\\teternalStorage().setBool(getGroupKey(_addr), true);\\n\\t\\taddCount();\\n\\t}\\n\\n\\tfunction deleteGroup(address _addr) external {\\n\\t\\trequire(msg.sender == config().marketFactory(), \\\"illegal access\\\");\\n\\n\\t\\trequire(\\n\\t\\t\\teternalStorage().getBool(getGroupKey(_addr)) == true,\\n\\t\\t\\t\\\"not exist\\\"\\n\\t\\t);\\n\\t\\teternalStorage().setBool(getGroupKey(_addr), false);\\n\\t\\treduceCount();\\n\\t}\\n\\n\\tfunction isGroup(address _addr) external view returns (bool) {\\n\\t\\treturn eternalStorage().getBool(getGroupKey(_addr));\\n\\t}\\n\\n\\tfunction reduceCount() private {\\n\\t\\tbytes32 key = getCountKey();\\n\\t\\tuint256 number = eternalStorage().getUint(key);\\n\\t\\tnumber = number.sub(1);\\n\\t\\teternalStorage().setUint(key, number);\\n\\t}\\n\\n\\tfunction addCount() private {\\n\\t\\tbytes32 key = getCountKey();\\n\\t\\tuint256 number = eternalStorage().getUint(key);\\n\\t\\tnumber = number.add(1);\\n\\t\\teternalStorage().setUint(key, number);\\n\\t}\\n\\n\\tfunction getCount() external view returns (uint256) {\\n\\t\\tbytes32 key = getCountKey();\\n\\t\\treturn eternalStorage().getUint(key);\\n\\t}\\n\\n\\tfunction getCountKey() private pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encodePacked(\\\"_count\\\"));\\n\\t}\\n\\n\\tfunction getGroupKey(address _addr) private pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encodePacked(\\\"_group\\\", _addr));\\n\\t}\\n}\\n\"\r\n    },\r\n    \"/contracts/src/common/storage/UsingStorage.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"../../../interface/IUsingStorage.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/ownership/Ownable.sol\\\";\\nimport \\\"./EternalStorage.sol\\\";\\n\\n/**\\n * Module for contrast handling EternalStorage.\\n */\\ncontract UsingStorage is Ownable, IUsingStorage {\\n\\taddress private _storage;\\n\\n\\t/**\\n\\t * Modifier to verify that EternalStorage is set.\\n\\t */\\n\\tmodifier hasStorage() {\\n\\t\\trequire(_storage != address(0), \\\"storage is not set\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * Returns the set EternalStorage instance.\\n\\t */\\n\\tfunction eternalStorage()\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\thasStorage\\n\\t\\treturns (EternalStorage)\\n\\t{\\n\\t\\treturn EternalStorage(_storage);\\n\\t}\\n\\n\\t/**\\n\\t * Returns the set EternalStorage address.\\n\\t */\\n\\tfunction getStorageAddress() external view hasStorage returns (address) {\\n\\t\\treturn _storage;\\n\\t}\\n\\n\\t/**\\n\\t * Create a new EternalStorage contract.\\n\\t * This function call will fail if the EternalStorage contract is already set.\\n\\t * Also, only the owner can execute it.\\n\\t */\\n\\tfunction createStorage() external onlyOwner {\\n\\t\\trequire(_storage == address(0), \\\"storage is set\\\");\\n\\t\\tEternalStorage tmp = new EternalStorage();\\n\\t\\t_storage = address(tmp);\\n\\t}\\n\\n\\t/**\\n\\t * Assigns the EternalStorage contract that has already been created.\\n\\t * Only the owner can execute this function.\\n\\t */\\n\\tfunction setStorage(address _storageAddress) external onlyOwner {\\n\\t\\t_storage = _storageAddress;\\n\\t}\\n\\n\\t/**\\n\\t * Delegates the owner of the current EternalStorage contract.\\n\\t * Only the owner can execute this function.\\n\\t */\\n\\tfunction changeOwner(address newOwner) external onlyOwner {\\n\\t\\tEternalStorage(_storage).changeOwner(newOwner);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"/contracts/src/common/storage/EternalStorage.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\n/**\\n * Module for persisting states.\\n * Stores a map for `uint256`, `string`, `address`, `bytes32`, `bool`, and `int256` type with `bytes32` type as a key.\\n */\\ncontract EternalStorage {\\n\\taddress private currentOwner = msg.sender;\\n\\n\\tmapping(bytes32 => uint256) private uIntStorage;\\n\\tmapping(bytes32 => string) private stringStorage;\\n\\tmapping(bytes32 => address) private addressStorage;\\n\\tmapping(bytes32 => bytes32) private bytesStorage;\\n\\tmapping(bytes32 => bool) private boolStorage;\\n\\tmapping(bytes32 => int256) private intStorage;\\n\\n\\t/**\\n\\t * Modifiers to validate that only the owner can execute.\\n\\t */\\n\\tmodifier onlyCurrentOwner() {\\n\\t\\trequire(msg.sender == currentOwner, \\\"not current owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * Transfer the owner.\\n\\t * Only the owner can execute this function.\\n\\t */\\n\\tfunction changeOwner(address _newOwner) external {\\n\\t\\trequire(msg.sender == currentOwner, \\\"not current owner\\\");\\n\\t\\tcurrentOwner = _newOwner;\\n\\t}\\n\\n\\t// *** Getter Methods ***\\n\\n\\t/**\\n\\t * Returns the value of the `uint256` type that mapped to the given key.\\n\\t */\\n\\tfunction getUint(bytes32 _key) external view returns (uint256) {\\n\\t\\treturn uIntStorage[_key];\\n\\t}\\n\\n\\t/**\\n\\t * Returns the value of the `string` type that mapped to the given key.\\n\\t */\\n\\tfunction getString(bytes32 _key) external view returns (string memory) {\\n\\t\\treturn stringStorage[_key];\\n\\t}\\n\\n\\t/**\\n\\t * Returns the value of the `address` type that mapped to the given key.\\n\\t */\\n\\tfunction getAddress(bytes32 _key) external view returns (address) {\\n\\t\\treturn addressStorage[_key];\\n\\t}\\n\\n\\t/**\\n\\t * Returns the value of the `bytes32` type that mapped to the given key.\\n\\t */\\n\\tfunction getBytes(bytes32 _key) external view returns (bytes32) {\\n\\t\\treturn bytesStorage[_key];\\n\\t}\\n\\n\\t/**\\n\\t * Returns the value of the `bool` type that mapped to the given key.\\n\\t */\\n\\tfunction getBool(bytes32 _key) external view returns (bool) {\\n\\t\\treturn boolStorage[_key];\\n\\t}\\n\\n\\t/**\\n\\t * Returns the value of the `int256` type that mapped to the given key.\\n\\t */\\n\\tfunction getInt(bytes32 _key) external view returns (int256) {\\n\\t\\treturn intStorage[_key];\\n\\t}\\n\\n\\t// *** Setter Methods ***\\n\\n\\t/**\\n\\t * Maps a value of `uint256` type to a given key.\\n\\t * Only the owner can execute this function.\\n\\t */\\n\\tfunction setUint(bytes32 _key, uint256 _value) external onlyCurrentOwner {\\n\\t\\tuIntStorage[_key] = _value;\\n\\t}\\n\\n\\t/**\\n\\t * Maps a value of `string` type to a given key.\\n\\t * Only the owner can execute this function.\\n\\t */\\n\\tfunction setString(bytes32 _key, string calldata _value)\\n\\t\\texternal\\n\\t\\tonlyCurrentOwner\\n\\t{\\n\\t\\tstringStorage[_key] = _value;\\n\\t}\\n\\n\\t/**\\n\\t * Maps a value of `address` type to a given key.\\n\\t * Only the owner can execute this function.\\n\\t */\\n\\tfunction setAddress(bytes32 _key, address _value)\\n\\t\\texternal\\n\\t\\tonlyCurrentOwner\\n\\t{\\n\\t\\taddressStorage[_key] = _value;\\n\\t}\\n\\n\\t/**\\n\\t * Maps a value of `bytes32` type to a given key.\\n\\t * Only the owner can execute this function.\\n\\t */\\n\\tfunction setBytes(bytes32 _key, bytes32 _value) external onlyCurrentOwner {\\n\\t\\tbytesStorage[_key] = _value;\\n\\t}\\n\\n\\t/**\\n\\t * Maps a value of `bool` type to a given key.\\n\\t * Only the owner can execute this function.\\n\\t */\\n\\tfunction setBool(bytes32 _key, bool _value) external onlyCurrentOwner {\\n\\t\\tboolStorage[_key] = _value;\\n\\t}\\n\\n\\t/**\\n\\t * Maps a value of `int256` type to a given key.\\n\\t * Only the owner can execute this function.\\n\\t */\\n\\tfunction setInt(bytes32 _key, int256 _value) external onlyCurrentOwner {\\n\\t\\tintStorage[_key] = _value;\\n\\t}\\n\\n\\t// *** Delete Methods ***\\n\\n\\t/**\\n\\t * Deletes the value of the `uint256` type that mapped to the given key.\\n\\t * Only the owner can execute this function.\\n\\t */\\n\\tfunction deleteUint(bytes32 _key) external onlyCurrentOwner {\\n\\t\\tdelete uIntStorage[_key];\\n\\t}\\n\\n\\t/**\\n\\t * Deletes the value of the `string` type that mapped to the given key.\\n\\t * Only the owner can execute this function.\\n\\t */\\n\\tfunction deleteString(bytes32 _key) external onlyCurrentOwner {\\n\\t\\tdelete stringStorage[_key];\\n\\t}\\n\\n\\t/**\\n\\t * Deletes the value of the `address` type that mapped to the given key.\\n\\t * Only the owner can execute this function.\\n\\t */\\n\\tfunction deleteAddress(bytes32 _key) external onlyCurrentOwner {\\n\\t\\tdelete addressStorage[_key];\\n\\t}\\n\\n\\t/**\\n\\t * Deletes the value of the `bytes32` type that mapped to the given key.\\n\\t * Only the owner can execute this function.\\n\\t */\\n\\tfunction deleteBytes(bytes32 _key) external onlyCurrentOwner {\\n\\t\\tdelete bytesStorage[_key];\\n\\t}\\n\\n\\t/**\\n\\t * Deletes the value of the `bool` type that mapped to the given key.\\n\\t * Only the owner can execute this function.\\n\\t */\\n\\tfunction deleteBool(bytes32 _key) external onlyCurrentOwner {\\n\\t\\tdelete boolStorage[_key];\\n\\t}\\n\\n\\t/**\\n\\t * Deletes the value of the `int256` type that mapped to the given key.\\n\\t * Only the owner can execute this function.\\n\\t */\\n\\tfunction deleteInt(bytes32 _key) external onlyCurrentOwner {\\n\\t\\tdelete intStorage[_key];\\n\\t}\\n}\\n\"\r\n    },\r\n    \"/contracts/src/common/config/UsingConfig.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"../../../interface/IAddressConfig.sol\\\";\\n\\n/**\\n * Module for using AddressConfig contracts.\\n */\\ncontract UsingConfig {\\n\\taddress private _config;\\n\\n\\t/**\\n\\t * Initialize the argument as AddressConfig address.\\n\\t */\\n\\tconstructor(address _addressConfig) public {\\n\\t\\t_config = _addressConfig;\\n\\t}\\n\\n\\t/**\\n\\t * Returns the latest AddressConfig instance.\\n\\t */\\n\\tfunction config() internal view returns (IAddressConfig) {\\n\\t\\treturn IAddressConfig(_config);\\n\\t}\\n\\n\\t/**\\n\\t * Returns the latest AddressConfig address.\\n\\t */\\n\\tfunction configAddress() external view returns (address) {\\n\\t\\treturn _config;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/IUsingStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MPL-2.0\\npragma solidity >=0.5.17;\\n\\ninterface IUsingStorage {\\n\\tfunction getStorageAddress() external view returns (address);\\n\\n\\tfunction createStorage() external;\\n\\n\\tfunction setStorage(address _storageAddress) external;\\n\\n\\tfunction changeOwner(address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/IMarketGroup.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MPL-2.0\\npragma solidity >=0.5.17;\\n\\ninterface IMarketGroup {\\n\\tfunction addGroup(address _addr) external;\\n\\n\\tfunction deleteGroup(address _addr) external;\\n\\n\\tfunction isGroup(address _addr) external view returns (bool);\\n\\n\\tfunction getCount() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/IAddressConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MPL-2.0\\npragma solidity >=0.5.17;\\n\\ninterface IAddressConfig {\\n\\tfunction token() external view returns (address);\\n\\n\\tfunction allocator() external view returns (address);\\n\\n\\tfunction allocatorStorage() external view returns (address);\\n\\n\\tfunction withdraw() external view returns (address);\\n\\n\\tfunction withdrawStorage() external view returns (address);\\n\\n\\tfunction marketFactory() external view returns (address);\\n\\n\\tfunction marketGroup() external view returns (address);\\n\\n\\tfunction propertyFactory() external view returns (address);\\n\\n\\tfunction propertyGroup() external view returns (address);\\n\\n\\tfunction metricsGroup() external view returns (address);\\n\\n\\tfunction metricsFactory() external view returns (address);\\n\\n\\tfunction policy() external view returns (address);\\n\\n\\tfunction policyFactory() external view returns (address);\\n\\n\\tfunction policySet() external view returns (address);\\n\\n\\tfunction policyGroup() external view returns (address);\\n\\n\\tfunction lockup() external view returns (address);\\n\\n\\tfunction lockupStorage() external view returns (address);\\n\\n\\tfunction voteTimes() external view returns (address);\\n\\n\\tfunction voteTimesStorage() external view returns (address);\\n\\n\\tfunction voteCounter() external view returns (address);\\n\\n\\tfunction voteCounterStorage() external view returns (address);\\n\\n\\tfunction setAllocator(address _addr) external;\\n\\n\\tfunction setAllocatorStorage(address _addr) external;\\n\\n\\tfunction setWithdraw(address _addr) external;\\n\\n\\tfunction setWithdrawStorage(address _addr) external;\\n\\n\\tfunction setMarketFactory(address _addr) external;\\n\\n\\tfunction setMarketGroup(address _addr) external;\\n\\n\\tfunction setPropertyFactory(address _addr) external;\\n\\n\\tfunction setPropertyGroup(address _addr) external;\\n\\n\\tfunction setMetricsFactory(address _addr) external;\\n\\n\\tfunction setMetricsGroup(address _addr) external;\\n\\n\\tfunction setPolicyFactory(address _addr) external;\\n\\n\\tfunction setPolicyGroup(address _addr) external;\\n\\n\\tfunction setPolicySet(address _addr) external;\\n\\n\\tfunction setPolicy(address _addr) external;\\n\\n\\tfunction setToken(address _addr) external;\\n\\n\\tfunction setLockup(address _addr) external;\\n\\n\\tfunction setLockupStorage(address _addr) external;\\n\\n\\tfunction setVoteTimes(address _addr) external;\\n\\n\\tfunction setVoteTimesStorage(address _addr) external;\\n\\n\\tfunction setVoteCounter(address _addr) external;\\n\\n\\tfunction setVoteCounterStorage(address _addr) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"configAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"deleteGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorageAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isGroup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storageAddress\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MarketGroup","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001d415aa39d647834786eb9b5a333a50e9935b796","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}