{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/tests/royalty-receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"../NMWD/context.sol\\\";\\n\\ncontract NMWDRoyaltyReceiver is Context{\\n\\n    address immutable public nmwd;\\n    address immutable public artist;\\n    uint immutable public ptc_artist;\\n    mapping(address => uint) private balance;\\n\\n    event Sent(address payee, uint amount);\\n\\n    constructor ( address _nmwd, address _artist,  uint _ptc_artist){\\n        require(_ptc_artist < 10000, \\\"Percentage too high\\\");\\n        require(_ptc_artist > 0, \\\"negative percentage\\\");\\n        require(_nmwd != address(0), \\\"adress 0 not allowed\\\");\\n        require(_artist != address(0), \\\"adress 0 not allowed\\\");\\n        nmwd = _nmwd;\\n        artist = _artist;\\n        ptc_artist = _ptc_artist;\\n    }\\n\\n    receive() external payable{\\n        uint amountArtist = (msg.value * ptc_artist)/10000;\\n        uint amountNmwd = msg.value - amountArtist;\\n        balance[artist] += amountArtist;\\n        balance[nmwd] += amountNmwd;\\n    }\\n\\n\\n    function withdraw(uint amount) external{\\n\\n        require(amount > 0, \\\"negative amount\\\");\\n        require( _msgSender() == artist || _msgSender() == nmwd, \\\"Not your contract\\\");\\n\\n        if(_msgSender() == artist){\\n            require(balance[artist] >= amount, \\\"Not enough balance\\\");\\n            balance[artist] -= amount;\\n            payable(artist).transfer(amount);\\n            emit Sent(artist, amount);\\n\\n        }else if(_msgSender() == nmwd){\\n            require(balance[nmwd] >= amount, \\\"Not enough balance\\\");\\n            balance[nmwd] -= amount;\\n            payable(nmwd).transfer(amount);\\n            emit Sent(nmwd, amount);\\n\\n        }else{\\n            revert();\\n        }\\n    }\\n\\n    function getBalance(address _address) external view returns(uint){\\n        return balance[_address];\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/NMWD/context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nmwd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_artist\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ptc_artist\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"artist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nmwd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ptc_artist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"NMWDRoyaltyReceiver","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000048ac7bc89fd29f2e771f62fd0d9574285da1e7660000000000000000000000004ee9ab899421332a90b082abe3306ecdb6a5fd9000000000000000000000000000000000000000000000000000000000000007d0","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}