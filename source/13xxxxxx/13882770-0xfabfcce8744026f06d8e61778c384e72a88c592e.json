{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.9;\r\n\r\ncontract GovernorAlpha {\r\n    /// @notice The name of this contract\r\n    string public constant name = \"Token Governor Alpha\";\r\n\r\n    /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\r\n    function quorumVotes() public pure returns (uint256) {\r\n        return 4_000_000e18;\r\n    }\r\n\r\n    /// @notice The number of votes required in order for a voter to become a proposer\r\n    function proposalThreshold() public pure returns (uint256) {\r\n        return 1_000_000e18;\r\n    }\r\n\r\n    /// @notice The maximum number of actions that can be included in a proposal\r\n    function proposalMaxOperations() public pure returns (uint256) {\r\n        return 10;\r\n    }\r\n\r\n    /// @notice The delay before voting on a proposal may take place, once proposed\r\n    function votingDelay() public pure returns (uint256) {\r\n        return 1;\r\n    } // 1 block\r\n\r\n    /// @notice The duration of voting on a proposal, in blocks\r\n    function votingPeriod() public pure returns (uint256) {\r\n        return 17280;\r\n    } // ~3 days in blocks (assuming 15s blocks)\r\n\r\n    /// @notice The address of the Protocol Timelock\r\n    TimelockInterface public timelock;\r\n\r\n    /// @notice The address of the governance token\r\n    TokenInterface public token;\r\n\r\n    /// @notice The address of the Governor Guardian\r\n    address public guardian;\r\n\r\n    /// @notice The total number of proposals\r\n    uint256 public proposalCount;\r\n\r\n    struct Proposal {\r\n        /// @notice Unique id for looking up a proposal\r\n        uint256 id;\r\n        /// @notice Creator of the proposal\r\n        address proposer;\r\n        /// @notice The timestamp that the proposal will be available for execution, set once the vote succeeds\r\n        uint256 eta;\r\n        /// @notice the ordered list of target addresses for calls to be made\r\n        address[] targets;\r\n        /// @notice The ordered list of values (i.e. msg.value) to be passed to the calls to be made\r\n        uint256[] values;\r\n        /// @notice The ordered list of function signatures to be called\r\n        string[] signatures;\r\n        /// @notice The ordered list of calldata to be passed to each call\r\n        bytes[] calldatas;\r\n        /// @notice The block at which voting begins: holders must delegate their votes prior to this block\r\n        uint256 startBlock;\r\n        /// @notice The block at which voting ends: votes must be cast prior to this block\r\n        uint256 endBlock;\r\n        /// @notice Current number of votes in favor of this proposal\r\n        uint256 forVotes;\r\n        /// @notice Current number of votes in opposition to this proposal\r\n        uint256 againstVotes;\r\n        /// @notice Flag marking whether the proposal has been canceled\r\n        bool canceled;\r\n        /// @notice Flag marking whether the proposal has been executed\r\n        bool executed;\r\n        /// @notice Receipts of ballots for the entire set of voters\r\n        mapping(address => Receipt) receipts;\r\n    }\r\n\r\n    /// @notice Ballot receipt record for a voter\r\n    struct Receipt {\r\n        /// @notice Whether or not a vote has been cast\r\n        bool hasVoted;\r\n        /// @notice Whether or not the voter supports the proposal\r\n        bool support;\r\n        /// @notice The number of votes the voter had, which were cast\r\n        uint96 votes;\r\n    }\r\n\r\n    /// @notice Possible states that a proposal may be in\r\n    enum ProposalState {\r\n        Pending,\r\n        Active,\r\n        Canceled,\r\n        Defeated,\r\n        Succeeded,\r\n        Queued,\r\n        Expired,\r\n        Executed\r\n    }\r\n\r\n    /// @notice The official record of all proposals ever proposed\r\n    mapping(uint256 => Proposal) public proposals;\r\n\r\n    /// @notice The latest proposal for each proposer\r\n    mapping(address => uint256) public latestProposalIds;\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public constant DOMAIN_TYPEHASH =\r\n        keccak256(\r\n            \"EIP712Domain(string name,uint256 chainId,address verifyingContract)\"\r\n        );\r\n\r\n    /// @notice The EIP-712 typehash for the ballot struct used by the contract\r\n    bytes32 public constant BALLOT_TYPEHASH =\r\n        keccak256(\"Ballot(uint256 proposalId,bool support)\");\r\n\r\n    /// @notice An event emitted when a new proposal is created\r\n    event ProposalCreated(\r\n        uint256 id,\r\n        address proposer,\r\n        address[] targets,\r\n        uint256[] values,\r\n        string[] signatures,\r\n        bytes[] calldatas,\r\n        uint256 startBlock,\r\n        uint256 endBlock,\r\n        string description\r\n    );\r\n\r\n    /// @notice An event emitted when a vote has been cast on a proposal\r\n    event VoteCast(\r\n        address voter,\r\n        uint256 proposalId,\r\n        bool support,\r\n        uint256 votes\r\n    );\r\n\r\n    /// @notice An event emitted when a proposal has been canceled\r\n    event ProposalCanceled(uint256 id);\r\n\r\n    /// @notice An event emitted when a proposal has been queued in the Timelock\r\n    event ProposalQueued(uint256 id, uint256 eta);\r\n\r\n    /// @notice An event emitted when a proposal has been executed in the Timelock\r\n    event ProposalExecuted(uint256 id);\r\n\r\n    constructor(\r\n        address token_,\r\n        address guardian_\r\n    ) {\r\n        token = TokenInterface(token_);\r\n        guardian = guardian_;\r\n    }\r\n\r\n    function setTimelock(address _timelock) external {\r\n        require(\r\n            msg.sender == guardian,\r\n            \"GovernorAlpha::setTimelock: only guardian can call\"\r\n        );\r\n        require(\r\n            timelock == TimelockInterface(address(0)),\r\n            \"GovernorAlpha::setTimelock: timelock is already set\"\r\n        );\r\n        require(\r\n            _timelock != address(0),\r\n            \"GovernorAlpha::setTimelock: timelock cannot be zero\"\r\n        );\r\n        timelock = TimelockInterface(_timelock);\r\n    }\r\n\r\n    function propose(\r\n        address[] memory targets,\r\n        uint256[] memory values,\r\n        string[] memory signatures,\r\n        bytes[] memory calldatas,\r\n        string memory description\r\n    ) public returns (uint256) {\r\n        require(\r\n            token.getPriorVotes(msg.sender, sub256(block.number, 1)) >\r\n                proposalThreshold(),\r\n            \"GovernorAlpha::propose: proposer votes below proposal threshold\"\r\n        );\r\n        require(\r\n            targets.length == values.length &&\r\n                targets.length == signatures.length &&\r\n                targets.length == calldatas.length,\r\n            \"GovernorAlpha::propose: proposal function information arity mismatch\"\r\n        );\r\n        require(\r\n            targets.length != 0,\r\n            \"GovernorAlpha::propose: must provide actions\"\r\n        );\r\n        require(\r\n            targets.length <= proposalMaxOperations(),\r\n            \"GovernorAlpha::propose: too many actions\"\r\n        );\r\n\r\n        uint256 latestProposalId = latestProposalIds[msg.sender];\r\n        if (latestProposalId != 0) {\r\n            ProposalState proposersLatestProposalState = state(\r\n                latestProposalId\r\n            );\r\n            require(\r\n                proposersLatestProposalState != ProposalState.Active,\r\n                \"GovernorAlpha::propose: one live proposal per proposer, found an already active proposal\"\r\n            );\r\n            require(\r\n                proposersLatestProposalState != ProposalState.Pending,\r\n                \"GovernorAlpha::propose: one live proposal per proposer, found an already pending proposal\"\r\n            );\r\n        }\r\n\r\n        uint256 startBlock = add256(block.number, votingDelay());\r\n        uint256 endBlock = add256(startBlock, votingPeriod());\r\n\r\n        Proposal storage newProposal = proposals[++proposalCount];\r\n        newProposal.id = proposalCount;\r\n        newProposal.proposer = msg.sender;\r\n        newProposal.targets = targets;\r\n        newProposal.values = values;\r\n        newProposal.signatures = signatures;\r\n        newProposal.calldatas = calldatas;\r\n        newProposal.startBlock = startBlock;\r\n        newProposal.endBlock = endBlock;\r\n\r\n        latestProposalIds[newProposal.proposer] = newProposal.id;\r\n\r\n        emit ProposalCreated(\r\n            newProposal.id,\r\n            msg.sender,\r\n            targets,\r\n            values,\r\n            signatures,\r\n            calldatas,\r\n            startBlock,\r\n            endBlock,\r\n            description\r\n        );\r\n        return newProposal.id;\r\n    }\r\n\r\n    function queue(uint256 proposalId) public {\r\n        require(\r\n            state(proposalId) == ProposalState.Succeeded,\r\n            \"GovernorAlpha::queue: proposal can only be queued if it is succeeded\"\r\n        );\r\n        Proposal storage proposal = proposals[proposalId];\r\n        uint256 eta = add256(block.timestamp, timelock.delay());\r\n        uint256 length = proposal.targets.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            _queueOrRevert(\r\n                proposal.targets[i],\r\n                proposal.values[i],\r\n                proposal.signatures[i],\r\n                proposal.calldatas[i],\r\n                eta\r\n            );\r\n        }\r\n        proposal.eta = eta;\r\n        emit ProposalQueued(proposalId, eta);\r\n    }\r\n\r\n    function _queueOrRevert(\r\n        address target,\r\n        uint256 value,\r\n        string memory signature,\r\n        bytes memory data,\r\n        uint256 eta\r\n    ) internal {\r\n        require(\r\n            !timelock.queuedTransactions(\r\n                keccak256(abi.encode(target, value, signature, data, eta))\r\n            ),\r\n            \"GovernorAlpha::_queueOrRevert: proposal action already queued at eta\"\r\n        );\r\n        timelock.queueTransaction(target, value, signature, data, eta);\r\n    }\r\n\r\n    function execute(uint256 proposalId) public payable {\r\n        require(\r\n            state(proposalId) == ProposalState.Queued,\r\n            \"GovernorAlpha::execute: proposal can only be executed if it is queued\"\r\n        );\r\n        Proposal storage proposal = proposals[proposalId];\r\n        proposal.executed = true;\r\n        uint256 length = proposal.targets.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            timelock.executeTransaction{\r\n                value: proposal.values[i]\r\n            }(\r\n                proposal.targets[i],\r\n                proposal.values[i],\r\n                proposal.signatures[i],\r\n                proposal.calldatas[i],\r\n                proposal.eta\r\n            );\r\n        }\r\n        emit ProposalExecuted(proposalId);\r\n    }\r\n\r\n    function cancel(uint256 proposalId) public {\r\n        require(\r\n            state(proposalId) != ProposalState.Executed,\r\n            \"GovernorAlpha::cancel: cannot cancel executed proposal\"\r\n        );\r\n\r\n        Proposal storage proposal = proposals[proposalId];\r\n        require(\r\n            msg.sender == guardian ||\r\n                token.getPriorVotes(proposal.proposer, sub256(block.number, 1)) <\r\n                proposalThreshold(),\r\n            \"GovernorAlpha::cancel: proposer above threshold\"\r\n        );\r\n\r\n        proposal.canceled = true;\r\n        uint256 length = proposal.targets.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            timelock.cancelTransaction(\r\n                proposal.targets[i],\r\n                proposal.values[i],\r\n                proposal.signatures[i],\r\n                proposal.calldatas[i],\r\n                proposal.eta\r\n            );\r\n        }\r\n\r\n        emit ProposalCanceled(proposalId);\r\n    }\r\n\r\n    function getActions(uint256 proposalId)\r\n        public\r\n        view\r\n        returns (\r\n            address[] memory targets,\r\n            uint256[] memory values,\r\n            string[] memory signatures,\r\n            bytes[] memory calldatas\r\n        )\r\n    {\r\n        Proposal storage p = proposals[proposalId];\r\n        return (p.targets, p.values, p.signatures, p.calldatas);\r\n    }\r\n\r\n    function getReceipt(uint256 proposalId, address voter)\r\n        public\r\n        view\r\n        returns (Receipt memory)\r\n    {\r\n        return proposals[proposalId].receipts[voter];\r\n    }\r\n\r\n    function state(uint256 proposalId) public view returns (ProposalState) {\r\n        require(\r\n            proposalCount >= proposalId && proposalId > 0,\r\n            \"GovernorAlpha::state: invalid proposal id\"\r\n        );\r\n        Proposal storage proposal = proposals[proposalId];\r\n        if (proposal.canceled) {\r\n            return ProposalState.Canceled;\r\n        } else if (block.number <= proposal.startBlock) {\r\n            return ProposalState.Pending;\r\n        } else if (block.number <= proposal.endBlock) {\r\n            return ProposalState.Active;\r\n        } else if (\r\n            proposal.forVotes <= proposal.againstVotes ||\r\n            proposal.forVotes < quorumVotes()\r\n        ) {\r\n            return ProposalState.Defeated;\r\n        } else if (proposal.eta == 0) {\r\n            return ProposalState.Succeeded;\r\n        } else if (proposal.executed) {\r\n            return ProposalState.Executed;\r\n        } else if (\r\n            block.timestamp >= add256(proposal.eta, timelock.GRACE_PERIOD())\r\n        ) {\r\n            return ProposalState.Expired;\r\n        } else {\r\n            return ProposalState.Queued;\r\n        }\r\n    }\r\n\r\n    function castVote(uint256 proposalId, bool support) public {\r\n        return _castVote(msg.sender, proposalId, support);\r\n    }\r\n\r\n    function castVoteBySig(\r\n        uint256 proposalId,\r\n        bool support,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public {\r\n        bytes32 domainSeparator = keccak256(\r\n            abi.encode(\r\n                DOMAIN_TYPEHASH,\r\n                keccak256(bytes(name)),\r\n                getChainId(),\r\n                address(this)\r\n            )\r\n        );\r\n        bytes32 structHash = keccak256(\r\n            abi.encode(BALLOT_TYPEHASH, proposalId, support)\r\n        );\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash)\r\n        );\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(\r\n            signatory != address(0),\r\n            \"GovernorAlpha::castVoteBySig: invalid signature\"\r\n        );\r\n        return _castVote(signatory, proposalId, support);\r\n    }\r\n\r\n    function _castVote(\r\n        address voter,\r\n        uint256 proposalId,\r\n        bool support\r\n    ) internal {\r\n        require(\r\n            state(proposalId) == ProposalState.Active,\r\n            \"GovernorAlpha::_castVote: voting is closed\"\r\n        );\r\n        Proposal storage proposal = proposals[proposalId];\r\n        Receipt storage receipt = proposal.receipts[voter];\r\n        require(\r\n            receipt.hasVoted == false,\r\n            \"GovernorAlpha::_castVote: voter already voted\"\r\n        );\r\n        uint96 votes = token.getPriorVotes(voter, proposal.startBlock);\r\n\r\n        if (support) {\r\n            proposal.forVotes = add256(proposal.forVotes, votes);\r\n        } else {\r\n            proposal.againstVotes = add256(proposal.againstVotes, votes);\r\n        }\r\n\r\n        receipt.hasVoted = true;\r\n        receipt.support = support;\r\n        receipt.votes = votes;\r\n\r\n        emit VoteCast(voter, proposalId, support, votes);\r\n    }\r\n\r\n    function __acceptAdmin() public {\r\n        require(\r\n            msg.sender == guardian,\r\n            \"GovernorAlpha::__acceptAdmin: sender must be gov guardian\"\r\n        );\r\n        timelock.acceptAdmin();\r\n    }\r\n\r\n    function __abdicate() public {\r\n        require(\r\n            msg.sender == guardian,\r\n            \"GovernorAlpha::__abdicate: sender must be gov guardian\"\r\n        );\r\n        guardian = address(0);\r\n    }\r\n\r\n    function __queueSetTimelockPendingAdmin(\r\n        address newPendingAdmin,\r\n        uint256 eta\r\n    ) public {\r\n        require(\r\n            msg.sender == guardian,\r\n            \"GovernorAlpha::__queueSetTimelockPendingAdmin: sender must be gov guardian\"\r\n        );\r\n        timelock.queueTransaction(\r\n            address(timelock),\r\n            0,\r\n            \"setPendingAdmin(address)\",\r\n            abi.encode(newPendingAdmin),\r\n            eta\r\n        );\r\n    }\r\n\r\n    function __executeSetTimelockPendingAdmin(\r\n        address newPendingAdmin,\r\n        uint256 eta\r\n    ) public {\r\n        require(\r\n            msg.sender == guardian,\r\n            \"GovernorAlpha::__executeSetTimelockPendingAdmin: sender must be gov guardian\"\r\n        );\r\n        timelock.executeTransaction(\r\n            address(timelock),\r\n            0,\r\n            \"setPendingAdmin(address)\",\r\n            abi.encode(newPendingAdmin),\r\n            eta\r\n        );\r\n    }\r\n\r\n    function add256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"subtraction underflow\");\r\n        return a - b;\r\n    }\r\n\r\n    function getChainId() internal view returns (uint256 chainId) {\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n    }\r\n}\r\n\r\ninterface TimelockInterface {\r\n    function delay() external view returns (uint256);\r\n\r\n    function GRACE_PERIOD() external view returns (uint256);\r\n\r\n    function acceptAdmin() external;\r\n\r\n    function queuedTransactions(bytes32 hash) external view returns (bool);\r\n\r\n    function queueTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string calldata signature,\r\n        bytes calldata data,\r\n        uint256 eta\r\n    ) external returns (bytes32);\r\n\r\n    function cancelTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string calldata signature,\r\n        bytes calldata data,\r\n        uint256 eta\r\n    ) external;\r\n\r\n    function executeTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string calldata signature,\r\n        bytes calldata data,\r\n        uint256 eta\r\n    ) external payable returns (bytes memory);\r\n}\r\n\r\ninterface TokenInterface {\r\n    function getPriorVotes(address account, uint256 blockNumber)\r\n        external\r\n        view\r\n        returns (uint96);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guardian_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ProposalQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BALLOT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__abdicate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"__executeSetTimelockPendingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"__queueSetTimelockPendingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"castVoteBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getActions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getReceipt\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"internalType\":\"struct GovernorAlpha.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestProposalIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalMaxOperations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"queue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum GovernorAlpha.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"contract TimelockInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract TokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"GovernorAlpha","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000c5e38a0baea2d4841a3629bcac2c8699cbeccec5000000000000000000000000a456b6c338d66204416ee300dc5874d3640cf283","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6a018ce9801b8210479dea124fb74bfcbcca25b139f68404f4f61efeee433b3a"}]}