{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.3;\r\n\r\n\r\n\r\n// Part: Base64\r\n\r\n/// @title Base64\r\n/// @notice Provides a function for encoding some bytes in base64\r\n/// @author Brecht Devos <brecht@loopring.org>\r\nlibrary Base64 {\r\n  bytes internal constant TABLE =\r\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\r\n  /// @notice Encodes some bytes to the base64 representation\r\n  function encode(bytes memory data) internal pure returns (string memory) {\r\n    uint len = data.length;\r\n    if (len == 0) return '';\r\n    // multiply by 4/3 rounded up\r\n    uint encodedLen = 4 * ((len + 2) / 3);\r\n    // Add some extra buffer at the end\r\n    bytes memory result = new bytes(encodedLen + 32);\r\n    bytes memory table = TABLE;\r\n    assembly {\r\n      let tablePtr := add(table, 1)\r\n      let resultPtr := add(result, 32)\r\n      for {\r\n        let i := 0\r\n      } lt(i, len) {\r\n\r\n      } {\r\n        i := add(i, 3)\r\n        let input := and(mload(add(data, i)), 0xffffff)\r\n        let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\r\n        out := shl(8, out)\r\n        out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\r\n        out := shl(8, out)\r\n        out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\r\n        out := shl(8, out)\r\n        out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\r\n        out := shl(224, out)\r\n        mstore(resultPtr, out)\r\n        resultPtr := add(resultPtr, 4)\r\n      }\r\n      switch mod(len, 3)\r\n      case 1 {\r\n        mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\r\n      }\r\n      case 2 {\r\n        mstore(sub(resultPtr, 1), shl(248, 0x3d))\r\n      }\r\n      mstore(result, encodedLen)\r\n    }\r\n    return string(result);\r\n  }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.0/Address\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.0/Context\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.0/IERC165\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.0/Initializable\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.0/ReentrancyGuard\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// Part: Strings\r\n\r\nlibrary Strings {\r\n  bytes16 private constant _HEX_SYMBOLS = '0123456789abcdef';\r\n\r\n  /**\r\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n   */\r\n  function toString(uint value) internal pure returns (string memory) {\r\n    // Inspired by OraclizeAPI's implementation - MIT licence\r\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n    if (value == 0) {\r\n      return '0';\r\n    }\r\n    uint temp = value;\r\n    uint digits;\r\n    while (temp != 0) {\r\n      digits++;\r\n      temp /= 10;\r\n    }\r\n    bytes memory buffer = new bytes(digits);\r\n    while (value != 0) {\r\n      digits -= 1;\r\n      buffer[digits] = bytes1(uint8(48 + uint(value % 10)));\r\n      value /= 10;\r\n    }\r\n    return string(buffer);\r\n  }\r\n\r\n  /**\r\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n   */\r\n  function toHexString(uint value) internal pure returns (string memory) {\r\n    if (value == 0) {\r\n      return '0x00';\r\n    }\r\n    uint temp = value;\r\n    uint length = 0;\r\n    while (temp != 0) {\r\n      length++;\r\n      temp >>= 8;\r\n    }\r\n    return toHexString(value, length);\r\n  }\r\n\r\n  /**\r\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n   */\r\n  function toHexString(uint value, uint length) internal pure returns (string memory) {\r\n    bytes memory buffer = new bytes(2 * length + 2);\r\n    buffer[0] = '0';\r\n    buffer[1] = 'x';\r\n    for (uint i = 2 * length + 1; i > 1; --i) {\r\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n      value >>= 4;\r\n    }\r\n    require(value == 0, 'Strings: hex length insufficient');\r\n    return string(buffer);\r\n  }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.0/ERC165\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.0/IERC1155\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.0/IERC1155Receiver\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.0/IERC721\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.0/Ownable\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.0/Pausable\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.0/ERC1155Receiver\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.0/IERC1155MetadataURI\r\n\r\n/**\r\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\r\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155MetadataURI is IERC1155 {\r\n    /**\r\n     * @dev Returns the URI for token type `id`.\r\n     *\r\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\r\n     * clients with the actual token type ID.\r\n     */\r\n    function uri(uint256 id) external view returns (string memory);\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.0/ERC1155\r\n\r\n/**\r\n * @dev Implementation of the basic standard multi-token.\r\n * See https://eips.ethereum.org/EIPS/eip-1155\r\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\r\n *\r\n * _Available since v3.1._\r\n */\r\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\r\n    using Address for address;\r\n\r\n    // Mapping from token ID to account balances\r\n    mapping(uint256 => mapping(address => uint256)) private _balances;\r\n\r\n    // Mapping from account to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\r\n    string private _uri;\r\n\r\n    /**\r\n     * @dev See {_setURI}.\r\n     */\r\n    constructor(string memory uri_) {\r\n        _setURI(uri_);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC1155).interfaceId ||\r\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155MetadataURI-uri}.\r\n     *\r\n     * This implementation returns the same URI for *all* token types. It relies\r\n     * on the token type ID substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * Clients calling this function must replace the `\\{id\\}` substring with the\r\n     * actual token type ID.\r\n     */\r\n    function uri(uint256) public view virtual override returns (string memory) {\r\n        return _uri;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\r\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\r\n        return _balances[id][account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOfBatch}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256[] memory)\r\n    {\r\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\r\n\r\n        uint256[] memory batchBalances = new uint256[](accounts.length);\r\n\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\r\n        }\r\n\r\n        return batchBalances;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(_msgSender() != operator, \"ERC1155: setting approval status for self\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[account][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not owner nor approved\"\r\n        );\r\n        _safeTransferFrom(from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeBatchTransferFrom}.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: transfer caller is not owner nor approved\"\r\n        );\r\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n        unchecked {\r\n            _balances[id][from] = fromBalance - amount;\r\n        }\r\n        _balances[id][to] += amount;\r\n\r\n        emit TransferSingle(operator, from, to, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; ++i) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 fromBalance = _balances[id][from];\r\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n            unchecked {\r\n                _balances[id][from] = fromBalance - amount;\r\n            }\r\n            _balances[id][to] += amount;\r\n        }\r\n\r\n        emit TransferBatch(operator, from, to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new URI for all token types, by relying on the token type ID\r\n     * substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\r\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\r\n     * clients with the token type ID.\r\n     *\r\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\r\n     * interpreted by clients as\r\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\r\n     * for token type ID 0x4cce0.\r\n     *\r\n     * See {uri}.\r\n     *\r\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\r\n     * this function emits no events.\r\n     */\r\n    function _setURI(string memory newuri) internal virtual {\r\n        _uri = newuri;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mint(\r\n        address account,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(account != address(0), \"ERC1155: mint to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n        _balances[id][account] += amount;\r\n        emit TransferSingle(operator, address(0), account, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mintBatch(\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            _balances[ids[i]][to] += amounts[i];\r\n        }\r\n\r\n        emit TransferBatch(operator, address(0), to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens of token type `id` from `account`\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens of token type `id`.\r\n     */\r\n    function _burn(\r\n        address account,\r\n        uint256 id,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(account != address(0), \"ERC1155: burn from the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\r\n\r\n        uint256 accountBalance = _balances[id][account];\r\n        require(accountBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[id][account] = accountBalance - amount;\r\n        }\r\n\r\n        emit TransferSingle(operator, account, address(0), id, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     */\r\n    function _burnBatch(\r\n        address account,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts\r\n    ) internal virtual {\r\n        require(account != address(0), \"ERC1155: burn from the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \"\");\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 accountBalance = _balances[id][account];\r\n            require(accountBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n            unchecked {\r\n                _balances[id][account] = accountBalance - amount;\r\n            }\r\n        }\r\n\r\n        emit TransferBatch(operator, account, address(0), ids, amounts);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning, as well as batched variants.\r\n     *\r\n     * The same hook is called on both single and batched variants. For single\r\n     * transfers, the length of the `id` and `amount` arrays will be 1.\r\n     *\r\n     * Calling conditions (for each `id` and `amount` pair):\r\n     *\r\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * of token type `id` will be  transferred to `to`.\r\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\r\n     * for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\r\n     * will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `ids` and `amounts` have the same, non-zero length.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {}\r\n\r\n    function _doSafeTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\r\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _doSafeBatchTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\r\n                bytes4 response\r\n            ) {\r\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\r\n        uint256[] memory array = new uint256[](1);\r\n        array[0] = element;\r\n\r\n        return array;\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.0/ERC1155Supply\r\n\r\n/**\r\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\r\n *\r\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\r\n * clearly identified. Note: While a totalSupply of 1 might mean the\r\n * corresponding is an NFT, there is no guarantees that no other token with the\r\n * same id are not going to be minted.\r\n */\r\nabstract contract ERC1155Supply is ERC1155 {\r\n    mapping(uint256 => uint256) private _totalSupply;\r\n\r\n    /**\r\n     * @dev Total amount of tokens in with a given id.\r\n     */\r\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\r\n        return _totalSupply[id];\r\n    }\r\n\r\n    /**\r\n     * @dev Indicates weither any token exist with a given id, or not.\r\n     */\r\n    function exists(uint256 id) public view virtual returns (bool) {\r\n        return ERC1155Supply.totalSupply(id) > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC1155-_mint}.\r\n     */\r\n    function _mint(\r\n        address account,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual override {\r\n        super._mint(account, id, amount, data);\r\n        _totalSupply[id] += amount;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC1155-_mintBatch}.\r\n     */\r\n    function _mintBatch(\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual override {\r\n        super._mintBatch(to, ids, amounts, data);\r\n        for (uint256 i = 0; i < ids.length; ++i) {\r\n            _totalSupply[ids[i]] += amounts[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC1155-_burn}.\r\n     */\r\n    function _burn(\r\n        address account,\r\n        uint256 id,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        super._burn(account, id, amount);\r\n        _totalSupply[id] -= amount;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC1155-_burnBatch}.\r\n     */\r\n    function _burnBatch(\r\n        address account,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts\r\n    ) internal virtual override {\r\n        super._burnBatch(account, ids, amounts);\r\n        for (uint256 i = 0; i < ids.length; ++i) {\r\n            _totalSupply[ids[i]] -= amounts[i];\r\n        }\r\n    }\r\n}\r\n\r\n// Part: ProvablyRareGem\r\n\r\n/// @title Provably Rare Gems\r\n/// @author Sorawit Suriyakarn (swit.eth / https://twitter.com/nomorebear)\r\ncontract ProvablyRareGem is ERC1155Supply, ReentrancyGuard {\r\n  event Create(uint indexed kind);\r\n  event Mine(address indexed miner, uint indexed kind);\r\n  string public constant name = 'Provably Rare Gem';\r\n\r\n  struct Gem {\r\n    string name; // Gem name\r\n    string color; // Gem color\r\n    bytes32 entropy; // Additional mining entropy. bytes32(0) means can't mine.\r\n    uint difficulty; // Current difficulity level. Must be non decreasing\r\n    uint gemsPerMine; // Amount of gems to distribute per mine\r\n    uint multiplier; // Difficulty multiplier times 1e4. Must be between 1e4 and 1e10\r\n    address crafter; // Address that can craft gems\r\n    address manager; // Current gem manager\r\n    address pendingManager; // Pending gem manager to be transferred to\r\n  }\r\n\r\n  mapping(uint => Gem) public gems;\r\n  mapping(address => uint) public nonce;\r\n  uint public gemCount;\r\n\r\n  constructor() ERC1155('GEM') {}\r\n\r\n  /// @dev Creates a new gem type. The manager can craft a portion of gems + can premine\r\n  function create(\r\n    string calldata name,\r\n    string calldata color,\r\n    uint difficulty,\r\n    uint gemsPerMine,\r\n    uint multiplier,\r\n    address crafter,\r\n    address manager\r\n  ) external returns (uint) {\r\n    require(difficulty > 0 && difficulty <= 2**128, 'bad difficulty');\r\n    require(gemsPerMine > 0 && gemsPerMine <= 1e6, 'bad gems per mine');\r\n    require(multiplier >= 1e4 && multiplier <= 1e10, 'bad multiplier');\r\n    require(manager != address(0), 'bad manager');\r\n    return _create(name, color, difficulty, gemsPerMine, multiplier, crafter, manager);\r\n  }\r\n\r\n  /// @dev Mines new gemstones. Puts kind you want to mine + your salt and tests your luck!\r\n  function mine(uint kind, uint salt) external nonReentrant {\r\n    uint val = luck(kind, salt);\r\n    nonce[msg.sender]++;\r\n    require(kind < gemCount, 'gem kind not exist');\r\n    uint diff = gems[kind].difficulty;\r\n    require(val <= type(uint).max / diff, 'salt not good enough');\r\n    gems[kind].difficulty = (diff * gems[kind].multiplier) / 10000 + 1;\r\n    _mint(msg.sender, kind, gems[kind].gemsPerMine, '');\r\n  }\r\n\r\n  /// @dev Updates gem mining entropy. Can be called by gem manager or crafter.\r\n  function updateEntropy(uint kind, bytes32 entropy) external {\r\n    require(kind < gemCount, 'gem kind not exist');\r\n    require(gems[kind].manager == msg.sender || gems[kind].crafter == msg.sender, 'unauthorized');\r\n    gems[kind].entropy = entropy;\r\n  }\r\n\r\n  /// @dev Updates gem metadata info. Must only be called by the gem manager.\r\n  function updateGemInfo(\r\n    uint kind,\r\n    string calldata name,\r\n    string calldata color\r\n  ) external {\r\n    require(kind < gemCount, 'gem kind not exist');\r\n    require(gems[kind].manager == msg.sender, 'not gem manager');\r\n    gems[kind].name = name;\r\n    gems[kind].color = color;\r\n  }\r\n\r\n  /// @dev Updates gem mining information. Must only be called by the gem manager.\r\n  function updateMiningData(\r\n    uint kind,\r\n    uint difficulty,\r\n    uint multiplier,\r\n    uint gemsPerMine\r\n  ) external {\r\n    require(kind < gemCount, 'gem kind not exist');\r\n    require(gems[kind].manager == msg.sender, 'not gem manager');\r\n    require(difficulty > 0 && difficulty <= 2**128, 'bad difficulty');\r\n    require(multiplier >= 1e4 && multiplier <= 1e10, 'bad multiplier');\r\n    require(gemsPerMine > 0 && gemsPerMine <= 1e6, 'bad gems per mine');\r\n    gems[kind].difficulty = difficulty;\r\n    gems[kind].multiplier = multiplier;\r\n    gems[kind].gemsPerMine = gemsPerMine;\r\n  }\r\n\r\n  /// @dev Renounce management ownership for the given gem kinds.\r\n  function renounceManager(uint[] calldata kinds) external {\r\n    for (uint idx = 0; idx < kinds.length; idx++) {\r\n      uint kind = kinds[idx];\r\n      require(kind < gemCount, 'gem kind not exist');\r\n      require(gems[kind].manager == msg.sender, 'not gem manager');\r\n      gems[kind].manager = address(0);\r\n      gems[kind].pendingManager = address(0);\r\n    }\r\n  }\r\n\r\n  /// @dev Updates gem crafter. Must only be called by the gem manager.\r\n  function updateCrafter(uint[] calldata kinds, address crafter) external {\r\n    for (uint idx = 0; idx < kinds.length; idx++) {\r\n      uint kind = kinds[idx];\r\n      require(kind < gemCount, 'gem kind not exist');\r\n      require(gems[kind].manager == msg.sender, 'not gem manager');\r\n      gems[kind].crafter = crafter;\r\n    }\r\n  }\r\n\r\n  /// @dev Transfers management ownership for the given gem kinds to another address.\r\n  function transferManager(uint[] calldata kinds, address to) external {\r\n    for (uint idx = 0; idx < kinds.length; idx++) {\r\n      uint kind = kinds[idx];\r\n      require(kind < gemCount, 'gem kind not exist');\r\n      require(gems[kind].manager == msg.sender, 'not gem manager');\r\n      gems[kind].pendingManager = to;\r\n    }\r\n  }\r\n\r\n  /// @dev Accepts management position for the given gem kinds.\r\n  function acceptManager(uint[] calldata kinds) external {\r\n    for (uint idx = 0; idx < kinds.length; idx++) {\r\n      uint kind = kinds[idx];\r\n      require(kind < gemCount, 'gem kind not exist');\r\n      require(gems[kind].pendingManager == msg.sender, 'not pending manager');\r\n      gems[kind].pendingManager = address(0);\r\n      gems[kind].manager = msg.sender;\r\n    }\r\n  }\r\n\r\n  /// @dev Mints gems by crafter. Hopefully, crafter is a good guy. Craft gemsPerMine if amount = 0.\r\n  function craft(\r\n    uint kind,\r\n    uint amount,\r\n    address to\r\n  ) external nonReentrant {\r\n    require(kind < gemCount, 'gem kind not exist');\r\n    require(gems[kind].crafter == msg.sender, 'not gem crafter');\r\n    uint realAmount = amount == 0 ? gems[kind].gemsPerMine : amount;\r\n    _mint(to, kind, realAmount, '');\r\n  }\r\n\r\n  /// @dev Returns your luck given salt and gem kind. The smaller the value, the more success chance.\r\n  function luck(uint kind, uint salt) public view returns (uint) {\r\n    require(kind < gemCount, 'gem kind not exist');\r\n    bytes32 entropy = gems[kind].entropy;\r\n    require(entropy != bytes32(0), 'no entropy');\r\n    bytes memory data = abi.encodePacked(\r\n      block.chainid,\r\n      entropy,\r\n      address(this),\r\n      msg.sender,\r\n      kind,\r\n      nonce[msg.sender],\r\n      salt\r\n    );\r\n    return uint(keccak256(data));\r\n  }\r\n\r\n  /// @dev Internal function for creating a new gem kind\r\n  function _create(\r\n    string memory name,\r\n    string memory color,\r\n    uint difficulty,\r\n    uint gemsPerMine,\r\n    uint multiplier,\r\n    address crafter,\r\n    address manager\r\n  ) internal returns (uint) {\r\n    uint kind = gemCount++;\r\n    gems[kind] = Gem({\r\n      name: name,\r\n      color: color,\r\n      entropy: bytes32(0),\r\n      difficulty: difficulty,\r\n      gemsPerMine: gemsPerMine,\r\n      multiplier: multiplier,\r\n      crafter: crafter,\r\n      manager: manager,\r\n      pendingManager: address(0)\r\n    });\r\n    emit Create(kind);\r\n    return kind;\r\n  }\r\n\r\n  // prettier-ignore\r\n  function uri(uint kind) public view override returns (string memory) {\r\n    require(kind < gemCount, 'gem kind not exist');\r\n    string memory output = string(abi.encodePacked(\r\n        '<svg xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 350 350\"><style>.base { fill: ',\r\n        gems[kind].color,\r\n        '; font-family: serif; font-size: 14px; }</style><rect width=\"100%\" height=\"100%\" fill=\"white\" /><text x=\"10\" y=\"20\" class=\"base\">',\r\n        gems[kind].name,\r\n        '</text><text x=\"10\" y=\"40\" class=\"base\">',\r\n        '</text></svg>'\r\n    ));\r\n    string memory json = Base64.encode(bytes(string(abi.encodePacked(\r\n      '{ \"name\": \"',\r\n      gems[kind].name,\r\n      '\", ',\r\n      '\"description\" : ',\r\n      '\"Provably Rare Gems\", ',\r\n      '\"image\": \"data:image/svg+xml;base64,',\r\n      Base64.encode(bytes(output)),\r\n      '\"}'\r\n    ))));\r\n    return string(abi.encodePacked('data:application/json;base64,', json));\r\n  }\r\n}\r\n\r\n// Part: ProvablyRareGemV2\r\n\r\n/// @title Provably Rare Gems\r\n/// @author Sorawit Suriyakarn (swit.eth / https://twitter.com/nomorebear)\r\ncontract ProvablyRareGemV2 is Initializable, ERC1155Supply {\r\n  event Create(uint indexed kind);\r\n  event Mine(address indexed miner, uint indexed kind);\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  string public name;\r\n\r\n  struct Gem {\r\n    string name; // Gem name\r\n    string color; // Gem color\r\n    bytes32 entropy; // Additional mining entropy. bytes32(0) means can't mine.\r\n    uint difficulty; // Current difficulity level. Must be non decreasing\r\n    uint gemsPerMine; // Amount of gems to distribute per mine\r\n    uint multiplier; // Difficulty multiplier times 1e4. Must be between 1e4 and 1e10\r\n    address crafter; // Address that can craft gems\r\n    address manager; // Current gem manager\r\n    address pendingManager; // Pending gem manager to be transferred to\r\n  }\r\n\r\n  uint private lock;\r\n  address public owner;\r\n  mapping(uint => Gem) public gems;\r\n  mapping(address => uint) public nonce;\r\n  uint public gemCount;\r\n\r\n  constructor() ERC1155('GEM') {}\r\n\r\n  modifier nonReentrant() {\r\n    require(lock == 1, '!lock');\r\n    lock = 2;\r\n    _;\r\n    lock = 1;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(owner == msg.sender, '!owner');\r\n    _;\r\n  }\r\n\r\n  /// @dev Initializes the contract.\r\n  function initialize() external initializer {\r\n    name = 'Provably Rare Gem';\r\n    lock = 1;\r\n    owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), msg.sender);\r\n  }\r\n\r\n  /// @dev Transfers owner.\r\n  /// @param _owner The new owner.\r\n  function transferOwnership(address _owner) external onlyOwner {\r\n    owner = _owner;\r\n    emit OwnershipTransferred(msg.sender, _owner);\r\n  }\r\n\r\n  /// @dev Creates a new gem type. The manager can craft a portion of gems + can premine\r\n  function create(\r\n    string calldata name,\r\n    string calldata color,\r\n    uint difficulty,\r\n    uint gemsPerMine,\r\n    uint multiplier,\r\n    address crafter,\r\n    address manager\r\n  ) external returns (uint) {\r\n    require(difficulty > 0 && difficulty <= 2**128, 'bad difficulty');\r\n    require(gemsPerMine > 0 && gemsPerMine <= 1e6, 'bad gems per mine');\r\n    require(multiplier >= 1e4 && multiplier <= 1e10, 'bad multiplier');\r\n    require(manager != address(0), 'bad manager');\r\n    return _create(name, color, difficulty, gemsPerMine, multiplier, crafter, manager);\r\n  }\r\n\r\n  /// @dev Mines new gemstones. Puts kind you want to mine + your salt and tests your luck!\r\n  function mine(uint kind, uint salt) external nonReentrant {\r\n    uint val = luck(kind, salt);\r\n    nonce[msg.sender]++;\r\n    require(kind < gemCount, 'gem kind not exist');\r\n    uint diff = gems[kind].difficulty;\r\n    require(val <= type(uint).max / diff, 'salt not good enough');\r\n    gems[kind].difficulty = (diff * gems[kind].multiplier) / 10000 + 1;\r\n    _mint(msg.sender, kind, gems[kind].gemsPerMine, '');\r\n  }\r\n\r\n  /// @dev Updates gem mining entropy. Can be called by gem manager or crafter.\r\n  function updateEntropy(uint kind, bytes32 entropy) external {\r\n    require(kind < gemCount, 'gem kind not exist');\r\n    require(gems[kind].manager == msg.sender || gems[kind].crafter == msg.sender, 'unauthorized');\r\n    gems[kind].entropy = entropy;\r\n  }\r\n\r\n  /// @dev Updates gem metadata info. Must only be called by the gem manager.\r\n  function updateGemInfo(\r\n    uint kind,\r\n    string calldata name,\r\n    string calldata color\r\n  ) external {\r\n    require(kind < gemCount, 'gem kind not exist');\r\n    require(gems[kind].manager == msg.sender, 'not gem manager');\r\n    gems[kind].name = name;\r\n    gems[kind].color = color;\r\n  }\r\n\r\n  /// @dev Updates gem mining information. Must only be called by the gem manager.\r\n  function updateMiningData(\r\n    uint kind,\r\n    uint difficulty,\r\n    uint multiplier,\r\n    uint gemsPerMine\r\n  ) external {\r\n    require(kind < gemCount, 'gem kind not exist');\r\n    require(gems[kind].manager == msg.sender, 'not gem manager');\r\n    require(difficulty > 0 && difficulty <= 2**128, 'bad difficulty');\r\n    require(multiplier >= 1e4 && multiplier <= 1e10, 'bad multiplier');\r\n    require(gemsPerMine > 0 && gemsPerMine <= 1e6, 'bad gems per mine');\r\n    gems[kind].difficulty = difficulty;\r\n    gems[kind].multiplier = multiplier;\r\n    gems[kind].gemsPerMine = gemsPerMine;\r\n  }\r\n\r\n  /// @dev Renounce management ownership for the given gem kinds.\r\n  function renounceManager(uint[] calldata kinds) external {\r\n    for (uint idx = 0; idx < kinds.length; idx++) {\r\n      uint kind = kinds[idx];\r\n      require(kind < gemCount, 'gem kind not exist');\r\n      require(gems[kind].manager == msg.sender, 'not gem manager');\r\n      gems[kind].manager = address(0);\r\n      gems[kind].pendingManager = address(0);\r\n    }\r\n  }\r\n\r\n  /// @dev Updates gem crafter. Must only be called by the gem manager.\r\n  function updateCrafter(uint[] calldata kinds, address crafter) external {\r\n    for (uint idx = 0; idx < kinds.length; idx++) {\r\n      uint kind = kinds[idx];\r\n      require(kind < gemCount, 'gem kind not exist');\r\n      require(gems[kind].manager == msg.sender, 'not gem manager');\r\n      gems[kind].crafter = crafter;\r\n    }\r\n  }\r\n\r\n  /// @dev Transfers management ownership for the given gem kinds to another address.\r\n  function transferManager(uint[] calldata kinds, address to) external {\r\n    for (uint idx = 0; idx < kinds.length; idx++) {\r\n      uint kind = kinds[idx];\r\n      require(kind < gemCount, 'gem kind not exist');\r\n      require(gems[kind].manager == msg.sender, 'not gem manager');\r\n      gems[kind].pendingManager = to;\r\n    }\r\n  }\r\n\r\n  /// @dev Accepts management position for the given gem kinds.\r\n  function acceptManager(uint[] calldata kinds) external {\r\n    for (uint idx = 0; idx < kinds.length; idx++) {\r\n      uint kind = kinds[idx];\r\n      require(kind < gemCount, 'gem kind not exist');\r\n      require(gems[kind].pendingManager == msg.sender, 'not pending manager');\r\n      gems[kind].pendingManager = address(0);\r\n      gems[kind].manager = msg.sender;\r\n    }\r\n  }\r\n\r\n  /// @dev Mints gems by crafter. Hopefully, crafter is a good guy. Craft gemsPerMine if amount = 0.\r\n  function craft(\r\n    uint kind,\r\n    uint amount,\r\n    address to\r\n  ) external nonReentrant {\r\n    require(kind < gemCount, 'gem kind not exist');\r\n    require(gems[kind].crafter == msg.sender, 'not gem crafter');\r\n    uint realAmount = amount == 0 ? gems[kind].gemsPerMine : amount;\r\n    _mint(to, kind, realAmount, '');\r\n  }\r\n\r\n  /// @dev Returns your luck given salt and gem kind. The smaller the value, the more success chance.\r\n  function luck(uint kind, uint salt) public view returns (uint) {\r\n    require(kind < gemCount, 'gem kind not exist');\r\n    bytes32 entropy = gems[kind].entropy;\r\n    require(entropy != bytes32(0), 'no entropy');\r\n    bytes memory data = abi.encodePacked(\r\n      block.chainid,\r\n      entropy,\r\n      address(this),\r\n      msg.sender,\r\n      kind,\r\n      nonce[msg.sender],\r\n      salt\r\n    );\r\n    return uint(keccak256(data));\r\n  }\r\n\r\n  /// @dev Internal function for creating a new gem kind\r\n  function _create(\r\n    string memory gemName,\r\n    string memory color,\r\n    uint difficulty,\r\n    uint gemsPerMine,\r\n    uint multiplier,\r\n    address crafter,\r\n    address manager\r\n  ) internal returns (uint) {\r\n    uint kind = gemCount++;\r\n    gems[kind] = Gem({\r\n      name: gemName,\r\n      color: color,\r\n      entropy: bytes32(0),\r\n      difficulty: difficulty,\r\n      gemsPerMine: gemsPerMine,\r\n      multiplier: multiplier,\r\n      crafter: crafter,\r\n      manager: manager,\r\n      pendingManager: address(0)\r\n    });\r\n    emit Create(kind);\r\n    return kind;\r\n  }\r\n\r\n  // prettier-ignore\r\n  function uri(uint kind) public view override returns (string memory) {\r\n    require(kind < gemCount, 'gem kind not exist');\r\n    string memory gemName = string(abi.encodePacked(gems[kind].name, ' #', Strings.toString(kind)));\r\n    string memory color = gems[kind].color;\r\n    string memory output = string(abi.encodePacked(\r\n      '<svg id=\"Layer_1\" x=\"0px\" y=\"0px\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1080 1080\" width=\"350\" height=\"400\"><rect x=\"0\" y=\"0\" width=\"1080\" height=\"1080\" fill=\"#1a1a1a\"/><svg id=\"Layer_1\" x=\"350\" y=\"350\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1080 1080\" width=\"350\" height=\"400\"><g transform=\"translate(0 -25)\"><g><polygon class=\"st0\" fill=\"',\r\n      color,\r\n      '\" points=\"679.25,58.27 400.75,58.27 203.82,255.2 203.82,824.8 400.75,1021.73 679.25,1021.73 876.18,824.8 876.18,255.2\"></polygon><g class=\"st1\" opacity=\"0.3\"><path d=\"M679.25,58.27h-278.5L203.82,255.2v569.6l196.93,196.93h278.5L876.18,824.8V255.2L679.25,58.27z M739.56,709.06 l-116.9,116.9H457.34l-116.9-116.9V370.94l116.9-116.9h165.32l116.9,116.9V709.06z\"></path></g><g><g><polygon class=\"st2\" fill=\"none\" stroke-width=\"10\" stroke-miterlimit=\"10\" stroke=\"#ffffff\" points=\"679.25,58.27 400.75,58.27 203.82,255.2 203.82,824.8 400.75,1021.73 679.25,1021.73 876.18,824.8  876.18,255.2\"></polygon><polygon fill=\"',\r\n      color,\r\n      '\" class=\"st2\" stroke-width=\"10\" stroke-miterlimit=\"10\" stroke=\"#ffffff\" points=\"622.66,254.04 457.34,254.04 340.44,370.94 340.44,709.06 457.34,825.96 622.66,825.96  739.56,709.06 739.56,370.94\"></polygon><line class=\"st2\" stroke-width=\"10\" stroke-miterlimit=\"10\" stroke=\"#ffffff\" x1=\"400.75\" y1=\"58.27\" x2=\"457.34\" y2=\"254.04\"></line><line class=\"st2\" stroke-width=\"10\" stroke-miterlimit=\"10\" stroke=\"#ffffff\" x1=\"679.25\" y1=\"58.27\" x2=\"622.66\" y2=\"254.04\"></line><line class=\"st2\" stroke-width=\"10\" stroke-miterlimit=\"10\" stroke=\"#ffffff\" x1=\"203.82\" y1=\"255.2\" x2=\"340.44\" y2=\"370.94\"></line><line class=\"st2\" stroke-width=\"10\" stroke-miterlimit=\"10\" stroke=\"#ffffff\" x1=\"739.56\" y1=\"370.94\" x2=\"876.18\" y2=\"255.2\"></line><line class=\"st2\" stroke-width=\"10\" stroke-miterlimit=\"10\" stroke=\"#ffffff\" x1=\"739.56\" y1=\"709.06\" x2=\"876.18\" y2=\"824.8\"></line><line class=\"st2\" stroke-width=\"10\" stroke-miterlimit=\"10\" stroke=\"#ffffff\" x1=\"622.66\" y1=\"825.96\" x2=\"679.25\" y2=\"1021.73\"></line><line class=\"st2\" stroke-width=\"10\" stroke-miterlimit=\"10\" stroke=\"#ffffff\" x1=\"457.34\" y1=\"825.96\" x2=\"400.75\" y2=\"1021.73\"></line><line class=\"st2\" stroke-width=\"10\" stroke-miterlimit=\"10\" stroke=\"#ffffff\" x1=\"340.44\" y1=\"709.06\" x2=\"203.82\" y2=\"824.8\"></line></g></g></g></g></svg><text x=\"50%\" y=\"95%\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-size=\"2.5em\" fill=\"#FFFFFF\">',\r\n      gemName,\r\n      '</text></svg>'\r\n    ));\r\n    string memory json = Base64.encode(bytes(string(abi.encodePacked(\r\n      '{ \"name\": \"',\r\n      gemName,\r\n      '\", ',\r\n      '\"description\" : ',\r\n      '\"Provably Rare Gem is a permissionless on-chain asset for hardcore collectors to mine and collect. Gems must be mined with off-chain Proof-of-Work. The higher the gem rarity, the more difficult it is to be found. Stats and other functionalities are intentionally omitted for others to interpret.\", ',\r\n      '\"image\": \"data:image/svg+xml;base64,',\r\n      Base64.encode(bytes(output)),\r\n      '\"}'\r\n    ))));\r\n    return string(abi.encodePacked('data:application/json;base64,', json));\r\n  }\r\n}\r\n\r\n// Part: LOOTGemCrafter\r\n\r\n/// @title LOOT GEM Crafter\r\n/// @author Sorawit Suriyakarn (swit.eth / https://twitter.com/nomorebear)\r\ncontract LOOTGemCrafter is Ownable, ReentrancyGuard {\r\n  IERC721 public immutable NFT;\r\n  ProvablyRareGem public immutable GEM;\r\n  uint public immutable FIRST_KIND;\r\n\r\n  event Start(bytes32 hashseed);\r\n  event Craft(uint indexed kind, uint amount);\r\n  event Claim(uint indexed id, address indexed claimer);\r\n\r\n  bytes32 public hashseed;\r\n  mapping(uint => uint) public crafted;\r\n  mapping(uint => bool) public claimed;\r\n\r\n  constructor(IERC721 _nft, ProvablyRareGem _gem) {\r\n    NFT = _nft;\r\n    GEM = _gem;\r\n    FIRST_KIND = _gem.gemCount();\r\n    _gem.create('Amethyst', '#9966CC', 8**2, 64, 10000, address(this), msg.sender);\r\n    _gem.create('Topaz', '#FFC87C', 8**3, 32, 10001, address(this), msg.sender);\r\n    _gem.create('Opal', '#A8C3BC', 8**4, 16, 10005, address(this), msg.sender);\r\n    _gem.create('Sapphire', '#0F52BA', 8**5, 8, 10010, address(this), msg.sender);\r\n    _gem.create('Ruby', '#E0115F', 8**6, 4, 10030, address(this), msg.sender);\r\n    _gem.create('Emerald', '#50C878', 8**7, 2, 10100, address(this), msg.sender);\r\n    _gem.create('Pink Diamond', '#FC74E4', 8**8, 1, 10300, address(this), msg.sender);\r\n    _gem.create('The Dragon Jade', '#00A36C', 8**9, 1, 11000, address(this), msg.sender);\r\n    _gem.create('Azure Skystone', '#348CFC', 8**10, 1, 20000, address(this), msg.sender);\r\n    _gem.create('Scarlet Bloodstone', '#BC1C2C', 8**11, 1, 50000, address(this), msg.sender);\r\n  }\r\n\r\n  /// @dev Called once to start the claim and generate hash seed.\r\n  function start() external onlyOwner {\r\n    require(hashseed == bytes32(0), 'already started');\r\n    hashseed = blockhash(block.number - 1);\r\n    for (uint offset = 0; offset < 10; offset++) {\r\n      GEM.updateEntropy(FIRST_KIND + offset, hashseed);\r\n    }\r\n  }\r\n\r\n  /// @dev Called by gem manager to craft gems. Can't craft more than 10% of supply.\r\n  function craft(uint kind, uint amount) external nonReentrant onlyOwner {\r\n    require(amount != 0, 'zero amount craft');\r\n    crafted[kind] += amount;\r\n    GEM.craft(kind, amount, msg.sender);\r\n    emit Craft(kind, amount);\r\n    require(crafted[kind] <= GEM.totalSupply(kind) / 10, 'too many crafts');\r\n  }\r\n\r\n  /// @dev Returns the list of initial GEM distribution for the given NFT ID.\r\n  function airdrop(uint id) public view returns (uint[4] memory kinds) {\r\n    require(hashseed != bytes32(0), 'not yet started');\r\n    uint[10] memory chances = [uint(1), 1, 3, 6, 10, 20, 30, 100, 300, 1000];\r\n    uint count = 0;\r\n    for (uint idx = 0; idx < 4; idx++) {\r\n      kinds[idx] = FIRST_KIND;\r\n    }\r\n    for (uint offset = 9; offset > 0; offset--) {\r\n      uint seed = uint(keccak256(abi.encodePacked(hashseed, offset, id)));\r\n      if (seed % chances[offset] == 0) {\r\n        kinds[count++] = FIRST_KIND + offset;\r\n      }\r\n      if (count == 4) break;\r\n    }\r\n  }\r\n\r\n  /// @dev Called by NFT owners to get a welcome pack of gems. Each NFT ID can claim once.\r\n  function claim(uint id) external nonReentrant {\r\n    _claim(id);\r\n  }\r\n\r\n  /// @dev Called by NFT owners to get a welcome pack of gems for multiple NFTs.\r\n  function multiClaim(uint[] calldata ids) external nonReentrant {\r\n    for (uint idx = 0; idx < ids.length; idx++) {\r\n      _claim(ids[idx]);\r\n    }\r\n  }\r\n\r\n  function _claim(uint id) internal {\r\n    require(msg.sender == NFT.ownerOf(id), 'not nft owner');\r\n    require(!claimed[id], 'already claimed');\r\n    claimed[id] = true;\r\n    uint[4] memory kinds = airdrop(id);\r\n    for (uint idx = 0; idx < 4; idx++) {\r\n      GEM.craft(kinds[idx], 0, msg.sender);\r\n    }\r\n    emit Claim(id, msg.sender);\r\n  }\r\n}\r\n\r\n// File: LOOTGemCrafterV2.sol\r\n\r\n/// @title LOOT GEM Crafter\r\n/// @author Sorawit Suriyakarn (swit.eth / https://twitter.com/nomorebear)\r\ncontract LOOTGemCrafterV2 is Ownable, ERC1155Receiver, ReentrancyGuard, Pausable {\r\n  IERC721 public immutable NFT;\r\n  ProvablyRareGemV2 public immutable GEM;\r\n  uint public immutable FIRST_KIND;\r\n  bytes32 public immutable hashseed;\r\n  LOOTGemCrafter public immutable old;\r\n\r\n  event Craft(uint indexed kind, uint amount);\r\n  event Claim(uint indexed id, address indexed claimer);\r\n\r\n  mapping(uint => uint) public crafted;\r\n  mapping(uint => bool) public newClaimed;\r\n\r\n  constructor(\r\n    IERC721 _nft,\r\n    ProvablyRareGemV2 _gem,\r\n    LOOTGemCrafter _old\r\n  ) {\r\n    NFT = _nft;\r\n    GEM = _gem;\r\n    old = _old;\r\n    hashseed = _old.hashseed();\r\n    FIRST_KIND = _gem.gemCount();\r\n    ProvablyRareGem oldGem = _old.GEM();\r\n    uint diff;\r\n    (, , , diff, , , , , ) = oldGem.gems(0);\r\n    _gem.create('Amethyst', '#9966CC', diff, 64, 10000, address(this), msg.sender);\r\n    (, , , diff, , , , , ) = oldGem.gems(1);\r\n    _gem.create('Topaz', '#FFC87C', diff, 32, 10001, address(this), msg.sender);\r\n    (, , , diff, , , , , ) = oldGem.gems(2);\r\n    _gem.create('Opal', '#A8C3BC', diff, 16, 10005, address(this), msg.sender);\r\n    (, , , diff, , , , , ) = oldGem.gems(3);\r\n    _gem.create('Sapphire', '#0F52BA', diff, 8, 10010, address(this), msg.sender);\r\n    (, , , diff, , , , , ) = oldGem.gems(4);\r\n    _gem.create('Ruby', '#E0115F', diff, 4, 10030, address(this), msg.sender);\r\n    (, , , diff, , , , , ) = oldGem.gems(5);\r\n    _gem.create('Emerald', '#50C878', diff, 2, 10100, address(this), msg.sender);\r\n    (, , , diff, , , , , ) = oldGem.gems(6);\r\n    _gem.create('Pink Diamond', '#FC74E4', diff, 1, 10300, address(this), msg.sender);\r\n    (, , , diff, , , , , ) = oldGem.gems(7);\r\n    _gem.create('The Dragon Jade', '#00A36C', diff, 1, 11000, address(this), msg.sender);\r\n    (, , , diff, , , , , ) = oldGem.gems(8);\r\n    _gem.create('Azure Skystone', '#348CFC', diff, 1, 20000, address(this), msg.sender);\r\n    (, , , diff, , , , , ) = oldGem.gems(9);\r\n    _gem.create('Scarlet Bloodstone', '#BC1C2C', diff, 1, 50000, address(this), msg.sender);\r\n  }\r\n\r\n  /// @dev Pause crafter. Can only be called by owner.\r\n  function pause() external onlyOwner {\r\n    _pause();\r\n  }\r\n\r\n  /// @dev Unpause crafter. Can only be called by owner.\r\n  function unpause() external onlyOwner {\r\n    _unpause();\r\n  }\r\n\r\n  /// @dev Called once to start the claim and generate hash seed.\r\n  function start() external onlyOwner whenNotPaused {\r\n    for (uint offset = 0; offset < 10; offset++) {\r\n      GEM.updateEntropy(FIRST_KIND + offset, hashseed);\r\n    }\r\n  }\r\n\r\n  /// @dev Called by gem manager to craft gems. Can't craft more than 10% of supply.\r\n  function craft(uint kind, uint amount) external nonReentrant onlyOwner whenNotPaused {\r\n    require(amount != 0, 'zero amount craft');\r\n    crafted[kind] += amount;\r\n    GEM.craft(kind, amount, msg.sender);\r\n    emit Craft(kind, amount);\r\n    require(crafted[kind] <= GEM.totalSupply(kind) / 10, 'too many crafts');\r\n  }\r\n\r\n  /// @dev Returns the list of initial GEM distribution for the given NFT ID.\r\n  function airdrop(uint id) public view returns (uint[4] memory kinds) {\r\n    require(hashseed != bytes32(0), 'not yet started');\r\n    uint[10] memory chances = [uint(1), 1, 3, 6, 10, 20, 30, 100, 300, 1000];\r\n    uint count = 0;\r\n    for (uint idx = 0; idx < 4; idx++) {\r\n      kinds[idx] = FIRST_KIND;\r\n    }\r\n    for (uint offset = 9; offset > 0; offset--) {\r\n      uint seed = uint(keccak256(abi.encodePacked(hashseed, offset, id)));\r\n      if (seed % chances[offset] == 0) {\r\n        kinds[count++] = FIRST_KIND + offset;\r\n      }\r\n      if (count == 4) break;\r\n    }\r\n  }\r\n\r\n  /// @dev Called by NFT owners to get a welcome pack of gems. Each NFT ID can claim once.\r\n  function claim(uint id) external nonReentrant whenNotPaused {\r\n    _claim(id);\r\n  }\r\n\r\n  /// @dev Called by NFT owners to get a welcome pack of gems for multiple NFTs.\r\n  function multiClaim(uint[] calldata ids) external nonReentrant whenNotPaused {\r\n    for (uint idx = 0; idx < ids.length; idx++) {\r\n      _claim(ids[idx]);\r\n    }\r\n  }\r\n\r\n  /// @dev Returns whether the given NFT ID has already claimed GEMs.\r\n  function claimed(uint id) public view returns (bool) {\r\n    return old.claimed(id) || newClaimed[id];\r\n  }\r\n\r\n  function _claim(uint id) internal {\r\n    require(msg.sender == NFT.ownerOf(id), 'not nft owner');\r\n    require(!claimed(id), 'already claimed');\r\n    newClaimed[id] = true;\r\n    uint[4] memory kinds = airdrop(id);\r\n    for (uint idx = 0; idx < 4; idx++) {\r\n      GEM.craft(kinds[idx], 0, msg.sender);\r\n    }\r\n    emit Claim(id, msg.sender);\r\n  }\r\n\r\n  function onERC1155Received(\r\n    address operator,\r\n    address from,\r\n    uint id,\r\n    uint value,\r\n    bytes calldata data\r\n  ) external override returns (bytes4) {\r\n    revert('unsupported');\r\n  }\r\n\r\n  function onERC1155BatchReceived(\r\n    address operator,\r\n    address from,\r\n    uint[] calldata ids,\r\n    uint[] calldata values,\r\n    bytes calldata data\r\n  ) external override nonReentrant whenNotPaused returns (bytes4) {\r\n    require(msg.sender == address(old.GEM()), 'bad token');\r\n    for (uint idx = 0; idx < ids.length; idx++) {\r\n      uint kind = ids[idx];\r\n      require(kind >= FIRST_KIND && kind < FIRST_KIND + 10, 'bad kind');\r\n      require(values[idx] > 0, 'no value');\r\n      GEM.craft(kind, values[idx], from);\r\n    }\r\n    return this.onERC1155BatchReceived.selector;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"contract ProvablyRareGemV2\",\"name\":\"_gem\",\"type\":\"address\"},{\"internalType\":\"contract LOOTGemCrafter\",\"name\":\"_old\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"kind\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Craft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FIRST_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GEM\",\"outputs\":[{\"internalType\":\"contract ProvablyRareGemV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFT\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"kinds\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"kind\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"craft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"crafted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashseed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"multiClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"newClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"old\",\"outputs\":[{\"internalType\":\"contract LOOTGemCrafter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LOOTGemCrafterV2","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ff9c1b15b16263c61d017ee9f65c50e4ae0113d7000000000000000000000000c67ded0ec78b849e17771b2e8a7e303b4dad6dd4000000000000000000000000094048819a6172a189122d2f5d35ffa1d70a81a3","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://33e55847240971019affe6f6929a382219f9c85b6ee0aa4707cfcc233ee9f047"}]}