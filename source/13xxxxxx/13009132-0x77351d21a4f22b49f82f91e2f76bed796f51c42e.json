{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/Ownable.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/Halt.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\ncontract Halt is Ownable {\r\n    \r\n    bool private halted = false; \r\n    \r\n    modifier notHalted() {\r\n        require(!halted,\"This contract is halted\");\r\n        _;\r\n    }\r\n\r\n    modifier isHalted() {\r\n        require(halted,\"This contract is not halted\");\r\n        _;\r\n    }\r\n    \r\n    /// @notice function Emergency situation that requires \r\n    /// @notice contribution period to stop or not.\r\n    function setHalt(bool halt) \r\n        public \r\n        onlyOwner\r\n    {\r\n        halted = halt;\r\n    }\r\n}\r\n\r\n// File: contracts/whiteList.sol\r\n\r\npragma solidity >=0.5.16;\r\n/**\r\n * SPDX-License-Identifier: GPL-3.0-or-later\r\n * FinNexus\r\n * Copyright (C) 2020 FinNexus Options Protocol\r\n */\r\n    /**\r\n     * @dev Implementation of a whitelist which filters a eligible uint32.\r\n     */\r\nlibrary whiteListUint32 {\r\n    /**\r\n     * @dev add uint32 into white list.\r\n     * @param whiteList the storage whiteList.\r\n     * @param temp input value\r\n     */\r\n\r\n    function addWhiteListUint32(uint32[] storage whiteList,uint32 temp) internal{\r\n        if (!isEligibleUint32(whiteList,temp)){\r\n            whiteList.push(temp);\r\n        }\r\n    }\r\n    /**\r\n     * @dev remove uint32 from whitelist.\r\n     */\r\n    function removeWhiteListUint32(uint32[] storage whiteList,uint32 temp)internal returns (bool) {\r\n        uint256 len = whiteList.length;\r\n        uint256 i=0;\r\n        for (;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                break;\r\n        }\r\n        if (i<len){\r\n            if (i!=len-1) {\r\n                whiteList[i] = whiteList[len-1];\r\n            }\r\n            whiteList.length--;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function isEligibleUint32(uint32[] memory whiteList,uint32 temp) internal pure returns (bool){\r\n        uint256 len = whiteList.length;\r\n        for (uint256 i=0;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    function _getEligibleIndexUint32(uint32[] memory whiteList,uint32 temp) internal pure returns (uint256){\r\n        uint256 len = whiteList.length;\r\n        uint256 i=0;\r\n        for (;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                break;\r\n        }\r\n        return i;\r\n    }\r\n}\r\n    /**\r\n     * @dev Implementation of a whitelist which filters a eligible uint256.\r\n     */\r\nlibrary whiteListUint256 {\r\n    // add whiteList\r\n    function addWhiteListUint256(uint256[] storage whiteList,uint256 temp) internal{\r\n        if (!isEligibleUint256(whiteList,temp)){\r\n            whiteList.push(temp);\r\n        }\r\n    }\r\n    function removeWhiteListUint256(uint256[] storage whiteList,uint256 temp)internal returns (bool) {\r\n        uint256 len = whiteList.length;\r\n        uint256 i=0;\r\n        for (;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                break;\r\n        }\r\n        if (i<len){\r\n            if (i!=len-1) {\r\n                whiteList[i] = whiteList[len-1];\r\n            }\r\n            whiteList.length--;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function isEligibleUint256(uint256[] memory whiteList,uint256 temp) internal pure returns (bool){\r\n        uint256 len = whiteList.length;\r\n        for (uint256 i=0;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    function _getEligibleIndexUint256(uint256[] memory whiteList,uint256 temp) internal pure returns (uint256){\r\n        uint256 len = whiteList.length;\r\n        uint256 i=0;\r\n        for (;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                break;\r\n        }\r\n        return i;\r\n    }\r\n}\r\n    /**\r\n     * @dev Implementation of a whitelist which filters a eligible address.\r\n     */\r\nlibrary whiteListAddress {\r\n    // add whiteList\r\n    function addWhiteListAddress(address[] storage whiteList,address temp) internal{\r\n        if (!isEligibleAddress(whiteList,temp)){\r\n            whiteList.push(temp);\r\n        }\r\n    }\r\n    function removeWhiteListAddress(address[] storage whiteList,address temp)internal returns (bool) {\r\n        uint256 len = whiteList.length;\r\n        uint256 i=0;\r\n        for (;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                break;\r\n        }\r\n        if (i<len){\r\n            if (i!=len-1) {\r\n                whiteList[i] = whiteList[len-1];\r\n            }\r\n            whiteList.length--;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function isEligibleAddress(address[] memory whiteList,address temp) internal pure returns (bool){\r\n        uint256 len = whiteList.length;\r\n        for (uint256 i=0;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    function _getEligibleIndexAddress(address[] memory whiteList,address temp) internal pure returns (uint256){\r\n        uint256 len = whiteList.length;\r\n        uint256 i=0;\r\n        for (;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                break;\r\n        }\r\n        return i;\r\n    }\r\n}\r\n\r\n// File: contracts/Operator.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * each operator can be granted exclusive access to specific functions.\r\n *\r\n */\r\ncontract Operator is Ownable {\r\n    mapping(uint256=>address) private _operators;\r\n    /**\r\n     * @dev modifier, Only indexed operator can be granted exclusive access to specific functions. \r\n     *\r\n     */\r\n    modifier onlyOperator(uint256 index) {\r\n        require(_operators[index] == msg.sender,\"Operator: caller is not the eligible Operator\");\r\n        _;\r\n    }\r\n    /**\r\n     * @dev modify indexed operator by owner. \r\n     *\r\n     */\r\n    function setOperator(uint256 index,address addAddress)public onlyOwner{\r\n        _operators[index] = addAddress;\r\n    }\r\n    function getOperator(uint256 index)public view returns (address) {\r\n        return _operators[index];\r\n    }\r\n}\r\n\r\n// File: contracts/multiSignatureClient.sol\r\n\r\npragma solidity =0.5.16;\r\ninterface IMultiSignature{\r\n    function getValidSignature(bytes32 msghash,uint256 lastIndex) external view returns(uint256);\r\n}\r\ncontract multiSignatureClient{\r\n    bytes32 private constant multiSignaturePositon = keccak256(\"org.Finnexus.multiSignature.storage\");\r\n    constructor(address multiSignature) public {\r\n        require(multiSignature != address(0),\"multiSignatureClient : Multiple signature contract address is zero!\");\r\n        saveValue(multiSignaturePositon,uint256(multiSignature));\r\n    }    \r\n    function getMultiSignatureAddress()public view returns (address){\r\n        return address(getValue(multiSignaturePositon));\r\n    }\r\n    modifier validCall(){\r\n        checkMultiSignature();\r\n        _;\r\n    }\r\n    function checkMultiSignature() internal {\r\n        uint256 value;\r\n        assembly {\r\n            value := callvalue()\r\n        }\r\n        bytes32 msgHash = keccak256(abi.encodePacked(msg.sender, address(this),value,msg.data));\r\n        address multiSign = getMultiSignatureAddress();\r\n        uint256 index = getValue(msgHash);\r\n        uint256 newIndex = IMultiSignature(multiSign).getValidSignature(msgHash,index);\r\n        require(newIndex > 0, \"multiSignatureClient : This tx is not aprroved\");\r\n        saveValue(msgHash,newIndex);\r\n    }\r\n    function saveValue(bytes32 position,uint256 value) internal \r\n    {\r\n        assembly {\r\n            sstore(position, value)\r\n        }\r\n    }\r\n    function getValue(bytes32 position) internal view returns (uint256 value) {\r\n        assembly {\r\n            value := sload(position)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/TokenUnlockData.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n\r\ncontract TokenUnlockData is multiSignatureClient,Operator,Halt {\r\n    //the locjed reward info\r\n\r\n    struct lockedItem {\r\n        uint256 startTime; //this tx startTime for locking\r\n        uint256 endTime;   //record input amount in each lock tx\r\n        uint256 amount;\r\n    }\r\n\r\n    struct lockedInfo {\r\n        uint256 wholeAmount;\r\n        uint256 pendingAmount;     //record input amount in each lock tx\r\n        uint256 totalItem;\r\n        bool    disable;\r\n        mapping (uint256 => lockedItem) alloc;//the allocation table\r\n    }\r\n\r\n    address public phxAddress;  //fnx token address\r\n\r\n    mapping (address => lockedInfo) public allLockedPhx;//converting tx record for each user\r\n\r\n    event SetUserPhxAlloc(address indexed owner, uint256 indexed amount,uint256 indexed worth);\r\n\r\n    event ClaimPhx(address indexed owner, uint256 indexed amount,uint256 indexed worth);\r\n\r\n}\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/IERC20.sol\r\n\r\npragma solidity =0.5.16;\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/TokenUnlock.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title FPTCoin is finnexus collateral Pool token, implement ERC20 interface.\r\n * @dev ERC20 token. Its inside value is collatral pool net worth.\r\n *\r\n */\r\ncontract TokenUnlock is TokenUnlockData {\r\n    using SafeMath for uint256;\r\n    modifier inited (){\r\n    \t  require(phxAddress !=address(0));\r\n    \t  _;\r\n    }\r\n\r\n    constructor(address _phxAddress,address _multiSignature)\r\n        multiSignatureClient(_multiSignature)\r\n        public\r\n    {\r\n        phxAddress = _phxAddress;\r\n    }\r\n\r\n\r\n\r\n    function update() public onlyOperator(0) {\r\n    }\r\n\r\n    /**\r\n     * @dev getting back the left mine token\r\n     * @param reciever the reciever for getting back mine token\r\n     */\r\n    function getbackLeftPhx(address reciever)  public onlyOperator(0) validCall {\r\n        uint256 bal =  IERC20(phxAddress).balanceOf(address(this));\r\n        IERC20(phxAddress).transfer(reciever,bal);\r\n    }  \r\n\r\n    function lockedBalanceOf(address user) public view returns (uint256) {\r\n        lockedInfo storage lr = allLockedPhx[user];\r\n        return lr.pendingAmount;\r\n    }\r\n\r\n    function getUserLockedItemInfo(address user,uint256 alloxidx) public view returns (uint256,uint256,uint256,bool) {\r\n        lockedItem storage lralloc = allLockedPhx[user].alloc[alloxidx];\r\n        return (lralloc.startTime,lralloc.endTime,lralloc.amount,allLockedPhx[user].disable);\r\n    }\r\n\r\n    function setMultiUsersPhxUnlockInfo( address[] memory users,\r\n                                      uint256[] memory amounts,\r\n                                      uint256[] memory startTimes,\r\n                                      uint256[] memory timeIntervals,\r\n                                      uint256[] memory allocTimes)\r\n        public\r\n        inited\r\n        onlyOperator(0)\r\n    {\r\n        require(users.length==amounts.length);\r\n        require(users.length==startTimes.length);\r\n        require(users.length==timeIntervals.length);\r\n        require(users.length==allocTimes.length);\r\n        uint256 i=0;\r\n        for(;i<users.length;i++){\r\n            _setUserPhxUnlockInfo(users[i],amounts[i],startTimes[i],timeIntervals[i],allocTimes[i]);\r\n        }\r\n    }\r\n\r\n\r\n    function setUserPhxUnlockInfo(address user,uint256 amount,uint256 startTime,uint256 timeInterval,uint256 allocTimes)\r\n        public\r\n        inited\r\n        onlyOperator(0)\r\n    {\r\n        _setUserPhxUnlockInfo(user,amount,startTime,timeInterval,allocTimes);\r\n    }\r\n\r\n    function _setUserPhxUnlockInfo(address user,uint256 amount,uint256 startTime,uint256 timeInterval,uint256 allocTimes)\r\n        internal\r\n    {\r\n        require(user!=address(0),\"user address is 0\");\r\n        require(amount>0,\"amount should be bigger than 0\");\r\n        require(timeInterval>0,\"time interval is 0\");\r\n        require(allocTimes>0,\"alloc times is 0\");\r\n        require(!allLockedPhx[user].disable,\"user is diabled already\");\r\n\r\n        uint256 lastIndex = allLockedPhx[user].totalItem;\r\n        if(lastIndex>0) {\r\n            require(startTime>= allLockedPhx[user].alloc[lastIndex-1].endTime,\"starttime is earlier than last set\");\r\n        }\r\n\r\n        uint256 divAmount = amount.div(allocTimes);\r\n        uint256 startIdx = allLockedPhx[user].totalItem;\r\n        uint256 i;\r\n        for (i=0;i<allocTimes;i++) {\r\n            allLockedPhx[user].alloc[startIdx+i] = lockedItem( startTime.add(i*timeInterval),\r\n                startTime.add((i+1)*timeInterval),\r\n                divAmount);\r\n        }\r\n\r\n        allLockedPhx[user].wholeAmount = allLockedPhx[user].wholeAmount.add(amount);\r\n        allLockedPhx[user].pendingAmount = allLockedPhx[user].pendingAmount.add(amount);\r\n        allLockedPhx[user].totalItem = allLockedPhx[user].totalItem.add(allocTimes);\r\n\r\n        emit SetUserPhxAlloc(user,amount,divAmount);\r\n    }\r\n\r\n\r\n    function resetUserPhxUnlockInfo(address user,uint256 roundidx,uint256 amount,uint256 startTime,uint256 endTime)\r\n            public\r\n            inited\r\n            onlyOwner\r\n            \r\n    {\r\n        require(startTime<endTime,\"startTime is later than endTime\");\r\n        require(now< allLockedPhx[user].alloc[roundidx].endTime,\"this alloc is expired already\");\r\n        //reset do not need to check because, possible enabled after reset\r\n       // require(!allLockedPhx[user].disable,\"user is diabled already\");\r\n\r\n        allLockedPhx[user].alloc[roundidx].startTime = startTime;\r\n        allLockedPhx[user].alloc[roundidx].startTime = endTime;\r\n\r\n        //sub alloc amount\r\n        allLockedPhx[user].pendingAmount =  allLockedPhx[user].pendingAmount.sub(allLockedPhx[user].alloc[roundidx].amount);\r\n        allLockedPhx[user].wholeAmount =  allLockedPhx[user].wholeAmount.sub(allLockedPhx[user].alloc[roundidx].amount);\r\n\r\n        allLockedPhx[user].alloc[roundidx].amount = amount;\r\n\r\n        allLockedPhx[user].pendingAmount =  allLockedPhx[user].pendingAmount.add(amount);\r\n        allLockedPhx[user].wholeAmount =  allLockedPhx[user].wholeAmount.add(amount);\r\n    }\r\n\r\n    function claimExpiredPhx() public inited notHalted {\r\n        require(!allLockedPhx[msg.sender].disable,\"user is diabled already\");\r\n        uint256 i = 0;\r\n        uint256 endIdx = allLockedPhx[msg.sender].totalItem ;\r\n        uint256 totalRet=0;\r\n        for(;i<endIdx;i++) {\r\n           //only count the rewards over at least one timeSpan\r\n           if (now >= allLockedPhx[msg.sender].alloc[i].endTime) {\r\n               if (allLockedPhx[msg.sender].alloc[i].amount > 0) {\r\n                   totalRet = totalRet.add(allLockedPhx[msg.sender].alloc[i].amount);\r\n                   allLockedPhx[msg.sender].alloc[i].amount = 0;\r\n               }\r\n           }\r\n        }\r\n        allLockedPhx[msg.sender].pendingAmount = allLockedPhx[msg.sender].pendingAmount.sub(totalRet);\r\n\r\n        //transfer back to user\r\n        uint256 balbefore = IERC20(phxAddress).balanceOf(msg.sender);\r\n        IERC20(phxAddress).transfer(msg.sender,totalRet);\r\n        uint256 balafter = IERC20(phxAddress).balanceOf(msg.sender);\r\n        require((balafter-balbefore)==totalRet,\"error transfer phx,balance check failed\");\r\n        \r\n        emit ClaimPhx(msg.sender,totalRet, allLockedPhx[msg.sender].pendingAmount);\r\n    }\r\n    \r\n    function getClaimAbleBalance(address user) public view returns (uint256) {\r\n        uint256 i = 0;\r\n        uint256 endIdx = allLockedPhx[user].totalItem ;\r\n        uint256 totalRet=0;\r\n        for(;i<endIdx;i++) {\r\n            //only count the rewards over at least one timeSpan\r\n            if (now >= allLockedPhx[user].alloc[i].endTime) {\r\n                if (allLockedPhx[user].alloc[i].amount > 0) {\r\n                    totalRet = totalRet.add(allLockedPhx[user].alloc[i].amount);\r\n                }\r\n            }\r\n        }\r\n        return totalRet;\r\n    }\r\n\r\n    function setUserStatus(address user,bool disable)\r\n        public\r\n        inited\r\n        onlyOperator(0)\r\n        validCall\r\n    {\r\n        require(user != address(0));\r\n        allLockedPhx[user].disable = disable;\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_phxAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multiSignature\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"worth\",\"type\":\"uint256\"}],\"name\":\"ClaimPhx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"worth\",\"type\":\"uint256\"}],\"name\":\"SetUserPhxAlloc\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allLockedPhx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wholeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalItem\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"disable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimExpiredPhx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimAbleBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMultiSignatureAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"alloxidx\",\"type\":\"uint256\"}],\"name\":\"getUserLockedItemInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"reciever\",\"type\":\"address\"}],\"name\":\"getbackLeftPhx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phxAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roundidx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"resetUserPhxUnlockInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"halt\",\"type\":\"bool\"}],\"name\":\"setHalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"startTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"timeIntervals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"allocTimes\",\"type\":\"uint256[]\"}],\"name\":\"setMultiUsersPhxUnlockInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addAddress\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocTimes\",\"type\":\"uint256\"}],\"name\":\"setUserPhxUnlockInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"disable\",\"type\":\"bool\"}],\"name\":\"setUserStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenUnlock","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000aec65404ddc3af3c897ad89571d5772c1a695f2200000000000000000000000074a6ad894f276ec5fd894621a37e733e2276faa4","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://db608b72a5ac4e0169130d75dcb94e00c0cf97ba4a80634457b83f6b527fe5dc"}]}