{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Terminator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\nimport {Constants} from \\\"./Constants.sol\\\";\\r\\nimport {IUniswapV2Router02} from \\\"./integrations/IUniswapV2Router02.sol\\\";\\r\\nimport {IYVault} from \\\"./integrations/IYVault.sol\\\";\\r\\n\\r\\nimport {ICreditManager} from \\\"./interfaces/ICreditManager.sol\\\";\\r\\nimport {ICreditFilter} from \\\"./interfaces/ICreditFilter.sol\\\";\\r\\n\\r\\n/// @dev Terminator is an example of smartcontract which is used for liquidation bots\\r\\n/// Current version gets information from the bot, withdraw all YEARN tokens and then\\r\\n/// convert everything on Uniswap V2 protocol into underlying asset.\\r\\n///\\r\\n/// This is just an example contract, do not use it in productuion.\\r\\n/// This constract is not audited, use it on your own risk.\\r\\n\\r\\ncontract Terminator is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // List of yearn vaults connected\\r\\n    address[] public yearn;\\r\\n\\r\\n    // WETH token address\\r\\n    address public wethToken;\\r\\n\\r\\n    // Set or executros. Executors could call liquidate function.\\r\\n    // This role is design to make parallel liquidations from different liquidaiton\\r\\n    // without waiting confirmations for your address\\r\\n    mapping(address => bool) public executors;\\r\\n\\r\\n    // Parameters for Uniswap V2 which provides information\\r\\n    struct UniV2Params {\\r\\n        uint256 amountIn;\\r\\n        address[] path;\\r\\n        uint256 amountOutMin;\\r\\n    }\\r\\n\\r\\n    modifier executorOnly() {\\r\\n        require(executors[msg.sender], \\\"For executors only\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _wethToken) {\\r\\n        wethToken = _wethToken;\\r\\n    }\\r\\n\\r\\n    // Adds an executor to the set\\r\\n    function allowExecutor(address _executor) external onlyOwner {\\r\\n        executors[_executor] = true;\\r\\n    }\\r\\n\\r\\n    // Removes executor from the set\\r\\n    function forbidExecutor(address _executor) external onlyOwner {\\r\\n        executors[_executor] = false;\\r\\n    }\\r\\n\\r\\n    // Adds yVault to the list\\r\\n    function addYearn(address _yearn) external onlyOwner {\\r\\n        yearn.push(_yearn);\\r\\n    }\\r\\n\\r\\n    /// @dev Liquidates account and sell all assets in Uniswap V2\\r\\n    /// @param _creditManager address of credit manager\\r\\n    /// @param _borrower address of borrower\\r\\n    /// (the system finds credit account by these 2 params)\\r\\n    /// @param _router Address of UniV2 router\\r\\n    /// @param _paths Data for uniswap - how to swap all assets into underlying one\\r\\n    function liquidateAndSellOnV2(\\r\\n        address _creditManager,\\r\\n        address _borrower,\\r\\n        address _router,\\r\\n        UniV2Params[] calldata _paths\\r\\n    ) external executorOnly {\\r\\n        // Getting creditManager, creditFilter and underlyingToken\\r\\n        ICreditManager creditManager = ICreditManager(_creditManager);\\r\\n        ICreditFilter creditFilter = ICreditFilter(\\r\\n            creditManager.creditFilter()\\r\\n        );\\r\\n\\r\\n        // Provides address of credit account of reverts. It'll revert if someone already liquidate it\\r\\n        address creditAccount = creditManager.getCreditAccountOrRevert(\\r\\n            _borrower\\r\\n        );\\r\\n\\r\\n        // Gets the quantity of allowed tokens\\r\\n        uint256 allowedTokenQty = creditFilter.allowedTokensCount();\\r\\n\\r\\n        // Storing balances, they will not be available after liquidation\\r\\n        uint256[] memory balancesBefore = new uint256[](allowedTokenQty);\\r\\n\\r\\n        // Getting enabledTokens - token mask which represents non-zero balances\\r\\n        uint256 enabledTokens = creditFilter.enabledTokens(creditAccount);\\r\\n\\r\\n        uint256 tokenMask;\\r\\n\\r\\n        // Checks that parameters array which provide params for swaping assets has the same size\\r\\n        require(_paths.length == allowedTokenQty, \\\"Incorrect path length\\\");\\r\\n\\r\\n        // Before executing liquidation method, we keep all balances of this smart contract to be able to\\r\\n        // compute how many tokens of each asset we get during liquidation.\\r\\n        // Terminator keeps different tokens to be able to liquidate different pools, it's why\\r\\n        // it's crucial to distinguish balance we've already have and how many tokens we get.\\r\\n        for (uint256 i = 1; i < allowedTokenQty; i++) {\\r\\n            // Tokenmaks is a but mask which is used for gas saving during iteration for allowed tokens list\\r\\n            tokenMask = 1 << i;\\r\\n            if (enabledTokens & tokenMask > 0) {\\r\\n                address token = creditFilter.allowedTokens(i);\\r\\n                balancesBefore[i] = IERC20(token).balanceOf(address(this));\\r\\n            }\\r\\n        }\\r\\n        // Providing allowance for creditManager to withdraw liquidation amount\\r\\n        _provideAllowance(\\r\\n            address(creditManager),\\r\\n            creditManager.underlyingToken()\\r\\n        );\\r\\n\\r\\n        /**\\r\\n         * @dev Liquidates credit account\\r\\n         * - Transfers discounted total credit account value from liquidators account\\r\\n         * - Pays borrowed funds + interest + fees back to pool, than transfers remaining funds to credit account owner\\r\\n         * - Transfer all assets from credit account to liquidator (\\\"to\\\") account\\r\\n         * - Returns credit account to factory\\r\\n         * - Emits LiquidateCreditAccount event\\r\\n         *\\r\\n         * More info: https://dev.gearbox.fi/developers/credit/credit_manager#liquidate-credit-account\\r\\n         *\\r\\n         * @param borrower Borrower address\\r\\n         * @param to Address to transfer all assets from credit account\\r\\n         * @oaram force For force liquidation (ignore reverts for token transfers)\\r\\n         */\\r\\n        creditManager.liquidateCreditAccount(_borrower, address(this), false);\\r\\n\\r\\n        // At first stage, we just withdraw all yearn assets we got during liquidation\\r\\n        for (uint256 i = 0; i < yearn.length; i++) {\\r\\n            if (IERC20(yearn[i]).balanceOf(address(this)) > 1) {\\r\\n                IYVault(yearn[i]).withdraw();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // The last thing is to swap all assets into underlying one\\r\\n        // We compare current balace with stored one, and if it has difference\\r\\n        // swap it into underlying account\\r\\n        for (uint256 i = 1; i < allowedTokenQty; i++) {\\r\\n            tokenMask = 1 << i;\\r\\n            if (enabledTokens & tokenMask > 0) {\\r\\n                address token = creditFilter.allowedTokens(i);\\r\\n                uint256 balance = IERC20(token).balanceOf(address(this));\\r\\n\\r\\n                if (balance > balancesBefore[i] + 1) {\\r\\n                    balance = balance - balancesBefore[i] - 1;\\r\\n                    require(token == _paths[i].path[0], \\\"incorrect path\\\");\\r\\n                    sellTokensOnV2(_router, balance, _paths[i]);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Internal function which facilitate swap assets on Uniswap V2\\r\\n    function sellTokensOnV2(\\r\\n        address _router,\\r\\n        uint256 amount,\\r\\n        UniV2Params calldata paths\\r\\n    ) internal {\\r\\n        _provideAllowance(_router, paths.path[0]);\\r\\n\\r\\n        // Computes amountOut based on rate provided as parameter\\r\\n        uint256 amountOut = paths.amountOutMin.mul(amount).div(paths.amountIn);\\r\\n\\r\\n        // By design, gearbox transfers eth if credit account has WETH position\\r\\n        // So, we swap ETH using swapExactETHForTokens\\r\\n        if (paths.path[0] == wethToken) {\\r\\n            IUniswapV2Router02(_router).swapExactETHForTokens{value: amount}(\\r\\n                amountOut,\\r\\n                paths.path,\\r\\n                address(this),\\r\\n                block.timestamp\\r\\n            );\\r\\n        } else {\\r\\n            IUniswapV2Router02(_router).swapExactTokensForTokens(\\r\\n                amount,\\r\\n                amountOut,\\r\\n                paths.path,\\r\\n                address(this),\\r\\n                block.timestamp\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Sends tokens back to owner. Helps to take the profits back\\r\\n    function transferToOwner(address token, uint256 amount) external onlyOwner {\\r\\n        IERC20(token).safeTransfer(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Provides needed allowance\\r\\n    function _provideAllowance(address externalContract, address token)\\r\\n        internal\\r\\n    {\\r\\n        if (\\r\\n            ERC20(token).allowance(address(this), externalContract) <\\r\\n            Constants.MAX_INT_4\\r\\n        ) {\\r\\n            ERC20(token).approve(externalContract, Constants.MAX_INT);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Allows contract to get ETH during liquidation\\r\\n    receive() external payable {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nlibrary Constants {\\r\\n    uint256 constant MAX_INT =\\r\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\r\\n\\r\\n    // 25% of MAX_INT\\r\\n    uint256 constant MAX_INT_4 =\\r\\n        0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/integrations/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\nimport './IUniswapV2Router01.sol';\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external  returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external  returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external  payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function factory() external override pure returns (address);\\r\\n    function WETH() external override pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external override returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external override payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external override returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external override returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external override returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external override returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external override returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external override returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    external override\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n    external override\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    external override\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n    external override\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external override pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external override pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external override pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external override view returns (uint[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external override view returns (uint[] memory amounts);\\r\\n\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/integrations/IYVault.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.4;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IYVault is IERC20 {\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    function deposit() external returns (uint256);\\r\\n\\r\\n    function deposit(uint256 _amount) external returns (uint256);\\r\\n\\r\\n    function deposit(uint256 _amount, address recipient)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    function withdraw() external returns (uint256);\\r\\n\\r\\n    function withdraw(uint256 maxShares) external returns (uint256);\\r\\n\\r\\n    function withdraw(uint256 maxShares, address recipient)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    function withdraw(\\r\\n        uint256 maxShares,\\r\\n        address recipient,\\r\\n        uint256 maxLoss\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function pricePerShare() external view  returns (uint256);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ICreditManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSL-1.1\\r\\n// Gearbox. Generalized leverage protocol that allows to take leverage and then use it across other DeFi protocols and platforms in a composable way.\\r\\n// (c) Gearbox.fi, 2021\\r\\npragma solidity ^0.7.4;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport {ICreditFilter} from \\\"../interfaces/ICreditFilter.sol\\\";\\r\\nimport {IAppCreditManager} from \\\"./app/IAppCreditManager.sol\\\";\\r\\nimport {DataTypes} from \\\"../libraries/Types.sol\\\";\\r\\n\\r\\n/// @title Credit Manager interface\\r\\n/// @notice It encapsulates business logic for managing credit accounts\\r\\n///\\r\\n/// More info: https://dev.gearbox.fi/developers/credit/credit_manager\\r\\n\\r\\ninterface ICreditManager is IAppCreditManager {\\r\\n    // Emits each time when the credit account is opened\\r\\n    event OpenCreditAccount(\\r\\n        address indexed sender,\\r\\n        address indexed onBehalfOf,\\r\\n        address indexed creditAccount,\\r\\n        uint256 amount,\\r\\n        uint256 borrowAmount,\\r\\n        uint256 referralCode\\r\\n    );\\r\\n\\r\\n    // Emits each time when the credit account is closed\\r\\n    event CloseCreditAccount(\\r\\n        address indexed owner,\\r\\n        address indexed to,\\r\\n        uint256 remainingFunds\\r\\n    );\\r\\n\\r\\n    // Emits each time when the credit account is liquidated\\r\\n    event LiquidateCreditAccount(\\r\\n        address indexed owner,\\r\\n        address indexed liquidator,\\r\\n        uint256 remainingFunds\\r\\n    );\\r\\n\\r\\n    // Emits each time when borrower increases borrowed amount\\r\\n    event IncreaseBorrowedAmount(address indexed borrower, uint256 amount);\\r\\n\\r\\n    // Emits each time when borrower adds collateral\\r\\n    event AddCollateral(\\r\\n        address indexed onBehalfOf,\\r\\n        address indexed token,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    // Emits each time when the credit account is repaid\\r\\n    event RepayCreditAccount(address indexed owner, address indexed to);\\r\\n\\r\\n    // Emit each time when financial order is executed\\r\\n    event ExecuteOrder(address indexed borrower, address indexed target);\\r\\n\\r\\n    // Emits each time when new fees are set\\r\\n    event NewParameters(\\r\\n        uint256 minAmount,\\r\\n        uint256 maxAmount,\\r\\n        uint256 maxLeverage,\\r\\n        uint256 feeSuccess,\\r\\n        uint256 feeInterest,\\r\\n        uint256 feeLiquidation,\\r\\n        uint256 liquidationDiscount\\r\\n    );\\r\\n\\r\\n    event TransferAccount(address oldOwner, address newOwner);\\r\\n\\r\\n    //\\r\\n    // CREDIT ACCOUNT MANAGEMENT\\r\\n    //\\r\\n\\r\\n    /**\\r\\n     * @dev Opens credit account and provides credit funds.\\r\\n     * - Opens credit account (take it from account factory)\\r\\n     * - Transfers trader /farmers initial funds to credit account\\r\\n     * - Transfers borrowed leveraged amount from pool (= amount x leverageFactor) calling lendCreditAccount() on connected Pool contract.\\r\\n     * - Emits OpenCreditAccount event\\r\\n     * Function reverts if user has already opened position\\r\\n     *\\r\\n     * More info: https://dev.gearbox.fi/developers/credit/credit_manager#open-credit-account\\r\\n     *\\r\\n     * @param amount Borrowers own funds\\r\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\r\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\r\\n     *   is a different wallet\\r\\n     * @param leverageFactor Multiplier to borrowers own funds\\r\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     */\\r\\n    function openCreditAccount(\\r\\n        uint256 amount,\\r\\n        address onBehalfOf,\\r\\n        uint256 leverageFactor,\\r\\n        uint256 referralCode\\r\\n    ) external override;\\r\\n\\r\\n    /**\\r\\n     * @dev Closes credit account\\r\\n     * - Swaps all assets to underlying one using default swap protocol\\r\\n     * - Pays borrowed amount + interest accrued + fees back to the pool by calling repayCreditAccount\\r\\n     * - Transfers remaining funds to the trader / farmer\\r\\n     * - Closes the credit account and return it to account factory\\r\\n     * - Emits CloseCreditAccount event\\r\\n     *\\r\\n     * More info: https://dev.gearbox.fi/developers/credit/credit_manager#close-credit-account\\r\\n     *\\r\\n     * @param to Address to send remaining funds\\r\\n     * @param paths Exchange type data which provides paths + amountMinOut\\r\\n     */\\r\\n    function closeCreditAccount(address to, DataTypes.Exchange[] calldata paths)\\r\\n        external\\r\\n        override;\\r\\n\\r\\n    /**\\r\\n     * @dev Liquidates credit account\\r\\n     * - Transfers discounted total credit account value from liquidators account\\r\\n     * - Pays borrowed funds + interest + fees back to pool, than transfers remaining funds to credit account owner\\r\\n     * - Transfer all assets from credit account to liquidator (\\\"to\\\") account\\r\\n     * - Returns credit account to factory\\r\\n     * - Emits LiquidateCreditAccount event\\r\\n     *\\r\\n     * More info: https://dev.gearbox.fi/developers/credit/credit_manager#liquidate-credit-account\\r\\n     *\\r\\n     * @param borrower Borrower address\\r\\n     * @param to Address to transfer all assets from credit account\\r\\n     * @param force If true, use transfer function for transferring tokens instead of safeTransfer\\r\\n     */\\r\\n    function liquidateCreditAccount(\\r\\n        address borrower,\\r\\n        address to,\\r\\n        bool force\\r\\n    ) external;\\r\\n\\r\\n    /// @dev Repays credit account\\r\\n    /// More info: https://dev.gearbox.fi/developers/credit/credit_manager#repay-credit-account\\r\\n    ///\\r\\n    /// @param to Address to send credit account assets\\r\\n    function repayCreditAccount(address to) external override;\\r\\n\\r\\n    /// @dev Repays credit account with ETH. Restricted to be called by WETH Gateway only\\r\\n    ///\\r\\n    /// @param borrower Address of borrower\\r\\n    /// @param to Address to send credit account assets\\r\\n    function repayCreditAccountETH(address borrower, address to)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @dev Increases borrowed amount by transferring additional funds from\\r\\n    /// the pool if after that HealthFactor > minHealth\\r\\n    /// More info: https://dev.gearbox.fi/developers/credit/credit_manager#increase-borrowed-amount\\r\\n    ///\\r\\n    /// @param amount Amount to increase borrowed amount\\r\\n    function increaseBorrowedAmount(uint256 amount) external override;\\r\\n\\r\\n    /// @dev Adds collateral to borrower's credit account\\r\\n    /// @param onBehalfOf Address of borrower to add funds\\r\\n    /// @param token Token address\\r\\n    /// @param amount Amount to add\\r\\n    function addCollateral(\\r\\n        address onBehalfOf,\\r\\n        address token,\\r\\n        uint256 amount\\r\\n    ) external override;\\r\\n\\r\\n    /// @dev Returns true if the borrower has opened a credit account\\r\\n    /// @param borrower Borrower account\\r\\n    function hasOpenedCreditAccount(address borrower)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bool);\\r\\n\\r\\n    /// @dev Calculates Repay amount = borrow amount + interest accrued + fee\\r\\n    ///\\r\\n    /// More info: https://dev.gearbox.fi/developers/credit/economy#repay\\r\\n    ///           https://dev.gearbox.fi/developers/credit/economy#liquidate\\r\\n    ///\\r\\n    /// @param borrower Borrower address\\r\\n    /// @param isLiquidated True if calculated repay amount for liquidator\\r\\n    function calcRepayAmount(address borrower, bool isLiquidated)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @dev Returns minimal amount for open credit account\\r\\n    function minAmount() external view returns (uint256);\\r\\n\\r\\n    /// @dev Returns maximum amount for open credit account\\r\\n    function maxAmount() external view returns (uint256);\\r\\n\\r\\n    /// @dev Returns maximum leveraged factor allowed for this pool\\r\\n    function maxLeverageFactor() external view returns (uint256);\\r\\n\\r\\n    /// @dev Returns underlying token address\\r\\n    function underlyingToken() external view returns (address);\\r\\n\\r\\n    /// @dev Returns address of connected pool\\r\\n    function poolService() external view returns (address);\\r\\n\\r\\n    /// @dev Returns address of CreditFilter\\r\\n    function creditFilter() external view returns (ICreditFilter);\\r\\n\\r\\n    /// @dev Returns address of CreditFilter\\r\\n    function creditAccounts(address borrower) external view returns (address);\\r\\n\\r\\n    /// @dev Executes filtered order on credit account which is connected with particular borrowers\\r\\n    /// @param borrower Borrower address\\r\\n    /// @param target Target smart-contract\\r\\n    /// @param data Call data for call\\r\\n    function executeOrder(\\r\\n        address borrower,\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) external returns (bytes memory);\\r\\n\\r\\n    /// @dev Approves token for msg.sender's credit account\\r\\n    function approve(address targetContract, address token) external;\\r\\n\\r\\n    /// @dev Approve tokens for credit accounts. Restricted for adapters only\\r\\n    function provideCreditAccountAllowance(\\r\\n        address creditAccount,\\r\\n        address toContract,\\r\\n        address token\\r\\n    ) external;\\r\\n\\r\\n    function transferAccountOwnership(address newOwner) external;\\r\\n\\r\\n    /// @dev Returns address of borrower's credit account and reverts of borrower has no one.\\r\\n    /// @param borrower Borrower address\\r\\n    function getCreditAccountOrRevert(address borrower)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (address);\\r\\n\\r\\n    function feeSuccess() external view returns (uint256);\\r\\n\\r\\n    function feeInterest() external view returns (uint256);\\r\\n\\r\\n    function feeLiquidation() external view returns (uint256);\\r\\n\\r\\n    function liquidationDiscount() external view returns (uint256);\\r\\n\\r\\n    function minHealthFactor() external view returns (uint256);\\r\\n\\r\\n    function defaultSwapContract() external view override returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ICreditFilter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSL-1.1\\r\\n// Gearbox. Generalized leverage protocol that allows to take leverage and then use it across other DeFi protocols and platforms in a composable way.\\r\\n// (c) Gearbox.fi, 2021\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IPriceOracle.sol\\\";\\r\\n\\r\\ninterface ICreditFilter {\\r\\n    // Emits each time token is allowed or liquidtion threshold changed\\r\\n    event TokenAllowed(address indexed token, uint256 liquidityThreshold);\\r\\n\\r\\n    // Emits each time contract is allowed or adapter changed\\r\\n    event ContractAllowed(address indexed protocol, address indexed adapter);\\r\\n\\r\\n    // Emits each time contract is forbidden\\r\\n    event ContractForbidden(address indexed protocol);\\r\\n\\r\\n    // Emits each time when fast check parameters are updated\\r\\n    event NewFastCheckParameters(uint256 chiThreshold, uint256 fastCheckDelay);\\r\\n\\r\\n    //\\r\\n    // STATE-CHANGING FUNCTIONS\\r\\n    //\\r\\n\\r\\n    /// @dev Adds token to the list of allowed tokens\\r\\n    /// @param token Address of allowed token\\r\\n    /// @param liquidationThreshold The constant showing the maximum allowable ratio of Loan-To-Value for the i-th asset.\\r\\n    function allowToken(address token, uint256 liquidationThreshold) external;\\r\\n\\r\\n    /// @dev Adds contract to the list of allowed contracts\\r\\n    /// @param targetContract Address of contract to be allowed\\r\\n    /// @param adapter Adapter contract address\\r\\n    function allowContract(address targetContract, address adapter) external;\\r\\n\\r\\n    /// @dev Forbids contract and removes it from the list of allowed contracts\\r\\n    /// @param targetContract Address of allowed contract\\r\\n    function forbidContract(address targetContract) external;\\r\\n\\r\\n    /// @dev Checks financial order and reverts if tokens aren't in list or collateral protection alerts\\r\\n    /// @param creditAccount Address of credit account\\r\\n    /// @param tokenIn Address of token In in swap operation\\r\\n    /// @param tokenOut Address of token Out in swap operation\\r\\n    /// @param amountIn Amount of tokens in\\r\\n    /// @param amountOut Amount of tokens out\\r\\n    function checkCollateralChange(\\r\\n        address creditAccount,\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOut\\r\\n    ) external;\\r\\n\\r\\n    function checkMultiTokenCollateral(\\r\\n        address creditAccount,\\r\\n        uint256[] memory amountIn,\\r\\n        uint256[] memory amountOut,\\r\\n        address[] memory tokenIn,\\r\\n        address[] memory tokenOut\\r\\n    ) external;\\r\\n\\r\\n    /// @dev Connects credit managaer, hecks that all needed price feeds exists and finalize config\\r\\n    function connectCreditManager(address poolService) external;\\r\\n\\r\\n    /// @dev Sets collateral protection for new credit accounts\\r\\n    function initEnabledTokens(address creditAccount) external;\\r\\n\\r\\n    function checkAndEnableToken(address creditAccount, address token) external;\\r\\n\\r\\n    //\\r\\n    // GETTERS\\r\\n    //\\r\\n\\r\\n    /// @dev Returns quantity of contracts in allowed list\\r\\n    function allowedContractsCount() external view returns (uint256);\\r\\n\\r\\n    /// @dev Returns of contract address from the allowed list by its id\\r\\n    function allowedContracts(uint256 id) external view returns (address);\\r\\n\\r\\n    /// @dev Reverts if token isn't in token allowed list\\r\\n    function revertIfTokenNotAllowed(address token) external view;\\r\\n\\r\\n    /// @dev Returns true if token is in allowed list otherwise false\\r\\n    function isTokenAllowed(address token) external view returns (bool);\\r\\n\\r\\n    /// @dev Returns quantity of tokens in allowed list\\r\\n    function allowedTokensCount() external view returns (uint256);\\r\\n\\r\\n    /// @dev Returns of token address from allowed list by its id\\r\\n    function allowedTokens(uint256 id) external view returns (address);\\r\\n\\r\\n    /// @dev Calculates total value for provided address\\r\\n    /// More: https://dev.gearbox.fi/developers/credit/economy#total-value\\r\\n    ///\\r\\n    /// @param creditAccount Token creditAccount address\\r\\n    function calcTotalValue(address creditAccount)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 total);\\r\\n\\r\\n    /// @dev Calculates Threshold Weighted Total Value\\r\\n    /// More: https://dev.gearbox.fi/developers/credit/economy#threshold-weighted-value\\r\\n    ///\\r\\n    ///@param creditAccount Credit account address\\r\\n    function calcThresholdWeightedValue(address creditAccount)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 total);\\r\\n\\r\\n    function contractToAdapter(address allowedContract)\\r\\n        external\\r\\n        view\\r\\n        returns (address);\\r\\n\\r\\n    /// @dev Returns address of underlying token\\r\\n    function underlyingToken() external view returns (address);\\r\\n\\r\\n    /// @dev Returns address & balance of token by the id of allowed token in the list\\r\\n    /// @param creditAccount Credit account address\\r\\n    /// @param id Id of token in allowed list\\r\\n    /// @return token Address of token\\r\\n    /// @return balance Token balance\\r\\n    function getCreditAccountTokenById(address creditAccount, uint256 id)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address token,\\r\\n            uint256 balance,\\r\\n            uint256 tv,\\r\\n            uint256 twv\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @dev Calculates health factor for the credit account\\r\\n     *\\r\\n     *         sum(asset[i] * liquidation threshold[i])\\r\\n     *   Hf = --------------------------------------------\\r\\n     *             borrowed amount + interest accrued\\r\\n     *\\r\\n     *\\r\\n     * More info: https://dev.gearbox.fi/developers/credit/economy#health-factor\\r\\n     *\\r\\n     * @param creditAccount Credit account address\\r\\n     * @return Health factor in percents (see PERCENTAGE FACTOR in PercentageMath.sol)\\r\\n     */\\r\\n    function calcCreditAccountHealthFactor(address creditAccount)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @dev Calculates credit account interest accrued\\r\\n    /// More: https://dev.gearbox.fi/developers/credit/economy#interest-rate-accrued\\r\\n    ///\\r\\n    /// @param creditAccount Credit account address\\r\\n    function calcCreditAccountAccruedInterest(address creditAccount)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @dev Return enabled tokens - token masks where each bit is \\\"1\\\" is token is enabled\\r\\n    function enabledTokens(address creditAccount)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function liquidationThresholds(address token)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function priceOracle() external view returns (address);\\r\\n\\r\\n    function updateUnderlyingTokenLiquidationThreshold() external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/integrations/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/app/IAppCreditManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSL-1.1\\r\\n// Gearbox. Generalized leverage protocol that allows to take leverage and then use it across other DeFi protocols and platforms in a composable way.\\r\\n// (c) Gearbox.fi, 2021\\r\\npragma solidity ^0.7.4;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport {DataTypes} from \\\"../../libraries/Types.sol\\\";\\r\\n\\r\\n/// @title Optimised for front-end credit Manager interface\\r\\n/// @notice It's optimised for light-weight abi\\r\\ninterface IAppCreditManager {\\r\\n    function openCreditAccount(\\r\\n        uint256 amount,\\r\\n        address onBehalfOf,\\r\\n        uint256 leverageFactor,\\r\\n        uint256 referralCode\\r\\n    ) external;\\r\\n\\r\\n    function closeCreditAccount(address to, DataTypes.Exchange[] calldata paths)\\r\\n        external;\\r\\n\\r\\n    function repayCreditAccount(address to) external;\\r\\n\\r\\n    function increaseBorrowedAmount(uint256 amount) external;\\r\\n\\r\\n    function addCollateral(\\r\\n        address onBehalfOf,\\r\\n        address token,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function calcRepayAmount(address borrower, bool isLiquidated)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function getCreditAccountOrRevert(address borrower)\\r\\n        external\\r\\n        view\\r\\n        returns (address);\\r\\n\\r\\n    function hasOpenedCreditAccount(address borrower)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    function defaultSwapContract() external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/Types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Gearbox. Generalized protocol that allows to get leverage and use it across various DeFi protocols\\r\\n// (c) Gearbox.fi, 2021\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/// @title DataType library\\r\\n/// @notice Contains data types used in data compressor.\\r\\nlibrary DataTypes {\\r\\n    struct Exchange {\\r\\n        address[] path;\\r\\n        uint256 amountOutMin;\\r\\n    }\\r\\n\\r\\n    struct TokenBalance {\\r\\n        address token;\\r\\n        uint256 balance;\\r\\n    }\\r\\n\\r\\n    struct ContractAdapter {\\r\\n        address allowedContract;\\r\\n        address adapter;\\r\\n    }\\r\\n\\r\\n    struct CreditAccountData {\\r\\n        address addr;\\r\\n        address borrower;\\r\\n        bool inUse;\\r\\n        address creditManager;\\r\\n        address underlyingToken;\\r\\n        uint256 borrowedAmountPlusInterest;\\r\\n        uint256 totalValue;\\r\\n        uint256 healthFactor;\\r\\n        uint256 borrowRate;\\r\\n        TokenBalance[] balances;\\r\\n    }\\r\\n\\r\\n    struct CreditAccountDataExtended {\\r\\n        address addr;\\r\\n        address borrower;\\r\\n        bool inUse;\\r\\n        address creditManager;\\r\\n        address underlyingToken;\\r\\n        uint256 borrowedAmountPlusInterest;\\r\\n        uint256 totalValue;\\r\\n        uint256 healthFactor;\\r\\n        uint256 borrowRate;\\r\\n        TokenBalance[] balances;\\r\\n        uint256 repayAmount;\\r\\n        uint256 liquidationAmount;\\r\\n        bool canBeClosed;\\r\\n        uint256 borrowedAmount;\\r\\n        uint256 cumulativeIndexAtOpen;\\r\\n        uint256 since;\\r\\n    }\\r\\n\\r\\n    struct CreditManagerData {\\r\\n        address addr;\\r\\n        bool hasAccount;\\r\\n        address underlyingToken;\\r\\n        bool isWETH;\\r\\n        bool canBorrow;\\r\\n        uint256 borrowRate;\\r\\n        uint256 minAmount;\\r\\n        uint256 maxAmount;\\r\\n        uint256 maxLeverageFactor;\\r\\n        uint256 availableLiquidity;\\r\\n        address[] allowedTokens;\\r\\n        ContractAdapter[] adapters;\\r\\n    }\\r\\n\\r\\n    struct PoolData {\\r\\n        address addr;\\r\\n        bool isWETH;\\r\\n        address underlyingToken;\\r\\n        address dieselToken;\\r\\n        uint256 linearCumulativeIndex;\\r\\n        uint256 availableLiquidity;\\r\\n        uint256 expectedLiquidity;\\r\\n        uint256 expectedLiquidityLimit;\\r\\n        uint256 totalBorrowed;\\r\\n        uint256 depositAPY_RAY;\\r\\n        uint256 borrowAPY_RAY;\\r\\n        uint256 dieselRate_RAY;\\r\\n        uint256 withdrawFee;\\r\\n        uint256 cumulativeIndex_RAY;\\r\\n        uint256 timestampLU;\\r\\n    }\\r\\n\\r\\n    struct TokenInfo {\\r\\n        address addr;\\r\\n        string symbol;\\r\\n        uint8 decimals;\\r\\n    }\\r\\n\\r\\n    struct AddressProviderData {\\r\\n        address contractRegister;\\r\\n        address acl;\\r\\n        address priceOracle;\\r\\n        address traderAccountFactory;\\r\\n        address dataCompressor;\\r\\n        address farmingFactory;\\r\\n        address accountMiner;\\r\\n        address treasuryContract;\\r\\n        address gearToken;\\r\\n        address wethToken;\\r\\n        address wethGateway;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSL-1.1\\r\\n// Gearbox. Generalized leverage protocol that allows to take leverage and then use it across other DeFi protocols and platforms in a composable way.\\r\\n// (c) Gearbox.fi, 2021\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/// @title Price oracle interface\\r\\ninterface IPriceOracle {\\r\\n\\r\\n    // Emits each time new configurator is set up\\r\\n    event NewPriceFeed(address indexed token, address indexed priceFeed);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets price feed if it doesn't exists\\r\\n     * If pricefeed exists, it changes nothing\\r\\n     * This logic is done to protect Gearbox from priceOracle attack\\r\\n     * when potential attacker can get access to price oracle, change them to fraud ones\\r\\n     * and then liquidate all funds\\r\\n     * @param token Address of token\\r\\n     * @param priceFeedToken Address of chainlink price feed token => Eth\\r\\n     */\\r\\n    function addPriceFeed(address token, address priceFeedToken) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Converts one asset into another using rate. Reverts if price feed doesn't exist\\r\\n     *\\r\\n     * @param amount Amount to convert\\r\\n     * @param tokenFrom Token address converts from\\r\\n     * @param tokenTo Token address - converts to\\r\\n     * @return Amount converted to tokenTo asset\\r\\n     */\\r\\n    function convert(\\r\\n        uint256 amount,\\r\\n        address tokenFrom,\\r\\n        address tokenTo\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Gets token rate with 18 decimals. Reverts if priceFeed doesn't exist\\r\\n     *\\r\\n     * @param tokenFrom Converts from token address\\r\\n     * @param tokenTo Converts to token address\\r\\n     * @return Rate in WAD format\\r\\n     */\\r\\n    function getLastPrice(address tokenFrom, address tokenTo)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wethToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yearn\",\"type\":\"address\"}],\"name\":\"addYearn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"allowExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"forbidExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creditManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct Terminator.UniV2Params[]\",\"name\":\"_paths\",\"type\":\"tuple[]\"}],\"name\":\"liquidateAndSellOnV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferToOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yearn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Terminator","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}