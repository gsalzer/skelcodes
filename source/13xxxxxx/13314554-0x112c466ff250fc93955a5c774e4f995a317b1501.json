{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ERC721MinterWithWhitelist.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ninterface ERC721BaseLayer {\\r\\n  function mintTo(address recipient, uint256 tokenId, string memory uri) external;\\r\\n  function ownerOf(uint256 tokenId) external returns (address owner);\\r\\n}\\r\\n\\r\\ncontract ERC721MinterWithWhitelist is Ownable {\\r\\n  using Strings for *;\\r\\n\\r\\n  address public erc721BaseContract;\\r\\n  mapping(address => uint256) public whiteList;\\r\\n  uint256 public maxSupply;\\r\\n  uint256 public reservedSupply;\\r\\n  uint256 public price;\\r\\n  uint256 public minted;\\r\\n  uint256 public reserveMinted;\\r\\n  uint256 public startId;\\r\\n  uint256 public saleStartTime;\\r\\n  uint256 public presaleStartTime;\\r\\n  uint256 public buyLimit;\\r\\n  uint256 public presaleBuyLimitPerRegistrant;\\r\\n  string public subCollectionURI;\\r\\n\\r\\n  constructor(\\r\\n    address erc721BaseContract_, \\r\\n    uint256 maxSupply_,\\r\\n    uint256 reservedSupply_,\\r\\n    uint256 price_,\\r\\n    uint256 minted_, \\r\\n    uint256 startId_, \\r\\n    uint256 saleStartTime_,\\r\\n    uint256 presaleStartTime_,\\r\\n    uint256 buyLimit_,\\r\\n    uint256 presaleBuyLimitPerRegistrant_,\\r\\n    string memory subCollectionURI_\\r\\n  ) {\\r\\n    erc721BaseContract = erc721BaseContract_;\\r\\n    maxSupply = maxSupply_;\\r\\n    reservedSupply = reservedSupply_;\\r\\n    price = price_;\\r\\n    minted = minted_;\\r\\n    startId = startId_;\\r\\n    saleStartTime = saleStartTime_;\\r\\n    presaleStartTime = presaleStartTime_;\\r\\n    buyLimit = buyLimit_;\\r\\n    presaleBuyLimitPerRegistrant = presaleBuyLimitPerRegistrant_;\\r\\n    subCollectionURI = subCollectionURI_;\\r\\n  }\\r\\n\\r\\n  function updateWhitelist(address[] memory registrants, uint256[] memory amount) public onlyOwner {\\r\\n      for(uint256 i; i < registrants.length; i++) {\\r\\n          require(amount[i] <= presaleBuyLimitPerRegistrant, \\\"Too many requested\\\");\\r\\n          whiteList[registrants[i]] = amount[i];\\r\\n      }\\r\\n  }\\r\\n\\r\\n  function mintWhitelist(uint256 amount) public payable {\\r\\n    require(msg.value == amount * price, \\\"Invalid payment amount\\\");\\r\\n    require(reserveMinted + amount <= reservedSupply, \\\"Purchase exceeds reserve supply limit\\\");\\r\\n    require(minted + amount <= maxSupply - (reservedSupply - reserveMinted), \\\"Purchase exceeds max supply limit\\\");\\r\\n    require(block.timestamp >= presaleStartTime, \\\"Presale has not started\\\");\\r\\n    require(amount <= whiteList[msg.sender], \\\"Sender not whitelisted or amount exceeds reservation\\\");\\r\\n    whiteList[msg.sender] -= amount;\\r\\n\\r\\n    ERC721BaseLayer erc721 = ERC721BaseLayer(erc721BaseContract);\\r\\n\\r\\n    uint256 tokenId = startId + minted; \\r\\n    minted += amount;\\r\\n    reserveMinted += amount;\\r\\n    for(uint256 i; i < amount; i++) {\\r\\n        erc721.mintTo(msg.sender, tokenId, string(abi.encodePacked(subCollectionURI, tokenId.toString(), '.json')));\\r\\n        tokenId++;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function mint(uint256 amount) public payable {\\r\\n    require(msg.value == amount * price, \\\"Invalid payment amount\\\");\\r\\n    require(amount <= buyLimit, \\\"Too many requested\\\");\\r\\n    require(minted + amount <= maxSupply - (reservedSupply - reserveMinted), \\\"Purchase exceeds max supply limit\\\");\\r\\n    require(msg.sender == tx.origin, \\\"Purchase request must come directly from an EOA\\\");\\r\\n    require(block.timestamp >= saleStartTime, \\\"Sale has not started\\\");\\r\\n\\r\\n    ERC721BaseLayer erc721 = ERC721BaseLayer(erc721BaseContract);\\r\\n\\r\\n    uint256 tokenId = startId + minted;\\r\\n    minted += amount;\\r\\n    for(uint256 i; i < amount; i++) {\\r\\n        erc721.mintTo(msg.sender, tokenId, string(abi.encodePacked(subCollectionURI, tokenId.toString(), '.json')));\\r\\n        tokenId++;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function withdraw() public onlyOwner {\\r\\n    payable(msg.sender).transfer(address(this).balance);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721BaseContract_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservedSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minted_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleStartTime_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presaleStartTime_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyLimit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presaleBuyLimitPerRegistrant_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"subCollectionURI_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"buyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721BaseContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintWhitelist\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleBuyLimitPerRegistrant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subCollectionURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"registrants\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ERC721MinterWithWhitelist","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009f2862f5d5f878a56ad8bc81605f8e44ac2415a40000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000061532df00000000000000000000000000000000000000000000000000000000061532df00000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000036697066733a2f2f516d614d465a52716f56316a38506a57525179716576745143707351736853783851715562334e71426366766d572f00000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}