{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.7;\r\n\r\nabstract contract StabilityFeeTreasuryLike {\r\n    function getAllowance(address) virtual public view returns (uint256, uint256);\r\n    function setPerBlockAllowance(address, uint256) virtual external;\r\n}\r\nabstract contract TreasuryFundableLike {\r\n    function authorizedAccounts(address) virtual public view returns (uint256);\r\n    function baseUpdateCallerReward() virtual public view returns (uint256);\r\n    function maxUpdateCallerReward() virtual public view returns (uint256);\r\n    function modifyParameters(bytes32, uint256) virtual external;\r\n}\r\nabstract contract TreasuryParamAdjusterLike {\r\n    function adjustMaxReward(address receiver, bytes4 targetFunctionSignature, uint256 newMaxReward) virtual external;\r\n}\r\nabstract contract OracleLike {\r\n    function read() virtual external view returns (uint256);\r\n}\r\nabstract contract OracleRelayerLike {\r\n    function redemptionPrice() virtual public returns (uint256);\r\n}\r\n\r\ncontract MinMaxRewardsAdjuster {\r\n    // --- Auth ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"MinMaxRewardsAdjuster/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Structs ---\r\n    struct FundingReceiver {\r\n        // Last timestamp when the funding receiver data was updated\r\n        uint256 lastUpdateTime;           // [unix timestamp]\r\n        // Gas amount used to execute this funded function\r\n        uint256 gasAmountForExecution;    // [gas amount]\r\n        // Delay between two calls to recompute the fees for this funded function\r\n        uint256 updateDelay;              // [seconds]\r\n        // Multiplier applied to the computed base reward\r\n        uint256 baseRewardMultiplier;     // [hundred]\r\n        // Multiplied applied to the computed max reward\r\n        uint256 maxRewardMultiplier;      // [hundred]\r\n    }\r\n\r\n    // --- Variables ---\r\n    // Data about funding receivers\r\n    mapping(address => mapping(bytes4 => FundingReceiver)) public fundingReceivers;\r\n\r\n    // The gas price oracle\r\n    OracleLike                public gasPriceOracle;\r\n    // The ETH oracle\r\n    OracleLike                public ethPriceOracle;\r\n    // The contract that adjusts SF treasury parameters and needs to be updated with max rewards for each funding receiver\r\n    TreasuryParamAdjusterLike public treasuryParamAdjuster;\r\n    // The oracle relayer contract\r\n    OracleRelayerLike         public oracleRelayer;\r\n    // The SF treasury contract\r\n    StabilityFeeTreasuryLike  public treasury;\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n    event ModifyParameters(bytes32 parameter, address addr);\r\n    event ModifyParameters(address receiver, bytes4 targetFunction, bytes32 parameter, uint256 val);\r\n    event AddFundingReceiver(\r\n        address indexed receiver,\r\n        bytes4  targetFunctionSignature,\r\n        uint256 updateDelay,\r\n        uint256 gasAmountForExecution,\r\n        uint256 baseRewardMultiplier,\r\n        uint256 maxRewardMultiplier\r\n    );\r\n    event RemoveFundingReceiver(address indexed receiver, bytes4 targetFunctionSignature);\r\n    event RecomputedRewards(address receiver, uint256 newBaseReward, uint256 newMaxReward);\r\n\r\n    constructor(\r\n        address oracleRelayer_,\r\n        address treasury_,\r\n        address gasPriceOracle_,\r\n        address ethPriceOracle_,\r\n        address treasuryParamAdjuster_\r\n    ) public {\r\n        // Checks\r\n        require(oracleRelayer_ != address(0), \"MinMaxRewardsAdjuster/null-oracle-relayer\");\r\n        require(treasury_ != address(0), \"MinMaxRewardsAdjuster/null-treasury\");\r\n        require(gasPriceOracle_ != address(0), \"MinMaxRewardsAdjuster/null-gas-oracle\");\r\n        require(ethPriceOracle_ != address(0), \"MinMaxRewardsAdjuster/null-eth-oracle\");\r\n        require(treasuryParamAdjuster_ != address(0), \"MinMaxRewardsAdjuster/null-treasury-adjuster\");\r\n\r\n\t      authorizedAccounts[msg.sender]   = 1;\r\n\r\n        // Store\r\n        oracleRelayer         = OracleRelayerLike(oracleRelayer_);\r\n        treasury              = StabilityFeeTreasuryLike(treasury_);\r\n        gasPriceOracle        = OracleLike(gasPriceOracle_);\r\n        ethPriceOracle        = OracleLike(ethPriceOracle_);\r\n        treasuryParamAdjuster = TreasuryParamAdjusterLike(treasuryParamAdjuster_);\r\n\r\n        // Check that the oracle relayer has a redemption price stored\r\n        oracleRelayer.redemptionPrice();\r\n\r\n        // Emit events\r\n        emit ModifyParameters(\"treasury\", treasury_);\r\n        emit ModifyParameters(\"oracleRelayer\", oracleRelayer_);\r\n        emit ModifyParameters(\"gasPriceOracle\", gasPriceOracle_);\r\n        emit ModifyParameters(\"ethPriceOracle\", ethPriceOracle_);\r\n        emit ModifyParameters(\"treasuryParamAdjuster\", treasuryParamAdjuster_);\r\n    }\r\n\r\n    // --- Boolean Logic ---\r\n    function both(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := and(x, y)}\r\n    }\r\n\r\n    // --- Math ---\r\n    uint256 public constant WAD            = 10**18;\r\n    uint256 public constant RAY            = 10**27;\r\n    uint256 public constant HUNDRED        = 100;\r\n    uint256 public constant THOUSAND       = 1000;\r\n\r\n    function addition(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"MinMaxRewardsAdjuster/add-uint-uint-overflow\");\r\n    }\r\n    function subtract(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"MinMaxRewardsAdjuster/sub-uint-uint-underflow\");\r\n    }\r\n    function multiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"MinMaxRewardsAdjuster/multiply-uint-uint-overflow\");\r\n    }\r\n    function divide(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y > 0, \"MinMaxRewardsAdjuster/div-y-null\");\r\n        z = x / y;\r\n        require(z <= x, \"MinMaxRewardsAdjuster/div-invalid\");\r\n    }\r\n\r\n    // --- Administration ---\r\n    /*\r\n    * @notify Update the address of a contract that this adjuster is connected to\r\n    * @param parameter The name of the contract to update the address for\r\n    * @param addr The new contract address\r\n    */\r\n    function modifyParameters(bytes32 parameter, address addr) external isAuthorized {\r\n        require(addr != address(0), \"MinMaxRewardsAdjuster/null-address\");\r\n        if (parameter == \"oracleRelayer\") {\r\n            oracleRelayer = OracleRelayerLike(addr);\r\n            oracleRelayer.redemptionPrice();\r\n        }\r\n        else if (parameter == \"treasury\") {\r\n            treasury = StabilityFeeTreasuryLike(addr);\r\n        }\r\n        else if (parameter == \"gasPriceOracle\") {\r\n            gasPriceOracle = OracleLike(addr);\r\n        }\r\n        else if (parameter == \"ethPriceOracle\") {\r\n            ethPriceOracle = OracleLike(addr);\r\n        }\r\n        else if (parameter == \"treasuryParamAdjuster\") {\r\n            treasuryParamAdjuster = TreasuryParamAdjusterLike(addr);\r\n        }\r\n        else revert(\"MinMaxRewardsAdjuster/modify-unrecognized-params\");\r\n        emit ModifyParameters(parameter, addr);\r\n    }\r\n    /*\r\n    * @notify Change a parameter for a funding receiver\r\n    * @param receiver The address of the funding receiver\r\n    * @param targetFunction The function whose callers receive funding for calling\r\n    * @param parameter The name of the parameter to change\r\n    * @param val The new parameter value\r\n    */\r\n    function modifyParameters(address receiver, bytes4 targetFunction, bytes32 parameter, uint256 val) external isAuthorized {\r\n        require(val > 0, \"MinMaxRewardsAdjuster/null-value\");\r\n        FundingReceiver storage fundingReceiver = fundingReceivers[receiver][targetFunction];\r\n        require(fundingReceiver.lastUpdateTime > 0, \"MinMaxRewardsAdjuster/non-existent-receiver\");\r\n\r\n        if (parameter == \"gasAmountForExecution\") {\r\n            require(val < block.gaslimit, \"MinMaxRewardsAdjuster/invalid-gas-amount-for-exec\");\r\n            fundingReceiver.gasAmountForExecution = val;\r\n        }\r\n        else if (parameter == \"updateDelay\") {\r\n            fundingReceiver.updateDelay = val;\r\n        }\r\n        else if (parameter == \"baseRewardMultiplier\") {\r\n            require(both(val >= HUNDRED, val <= THOUSAND), \"MinMaxRewardsAdjuster/invalid-base-reward-multiplier\");\r\n            require(val <= fundingReceiver.maxRewardMultiplier, \"MinMaxRewardsAdjuster/max-mul-smaller-than-min-mul\");\r\n            fundingReceiver.baseRewardMultiplier = val;\r\n        }\r\n        else if (parameter == \"maxRewardMultiplier\") {\r\n            require(both(val >= HUNDRED, val <= THOUSAND), \"MinMaxRewardsAdjuster/invalid-max-reward-multiplier\");\r\n            require(val >= fundingReceiver.baseRewardMultiplier, \"MinMaxRewardsAdjuster/max-mul-smaller-than-min-mul\");\r\n            fundingReceiver.maxRewardMultiplier = val;\r\n        }\r\n        else revert(\"MinMaxRewardsAdjuster/modify-unrecognized-params\");\r\n        emit ModifyParameters(receiver, targetFunction, parameter, val);\r\n    }\r\n\r\n    /*\r\n    * @notify Add a new funding receiver\r\n    * @param receiver The funding receiver address\r\n    * @param targetFunctionSignature The signature of the function whose callers get funding\r\n    * @param updateDelay The update delay between two consecutive calls that update the base and max rewards for this receiver\r\n    * @param gasAmountForExecution The gas amount spent calling the function with signature targetFunctionSignature\r\n    * @param baseRewardMultiplier Multiplier applied to the computed base reward\r\n    * @param maxRewardMultiplier Multiplied applied to the computed max reward\r\n    */\r\n    function addFundingReceiver(\r\n        address receiver,\r\n        bytes4  targetFunctionSignature,\r\n        uint256 updateDelay,\r\n        uint256 gasAmountForExecution,\r\n        uint256 baseRewardMultiplier,\r\n        uint256 maxRewardMultiplier\r\n    ) external isAuthorized {\r\n        // Checks\r\n        require(receiver != address(0), \"MinMaxRewardsAdjuster/null-receiver\");\r\n        require(updateDelay > 0, \"MinMaxRewardsAdjuster/null-update-delay\");\r\n        require(both(baseRewardMultiplier >= HUNDRED, baseRewardMultiplier <= THOUSAND), \"MinMaxRewardsAdjuster/invalid-base-reward-multiplier\");\r\n        require(both(maxRewardMultiplier >= HUNDRED, maxRewardMultiplier <= THOUSAND), \"MinMaxRewardsAdjuster/invalid-max-reward-multiplier\");\r\n        require(maxRewardMultiplier >= baseRewardMultiplier, \"MinMaxRewardsAdjuster/max-mul-smaller-than-min-mul\");\r\n        require(gasAmountForExecution > 0, \"MinMaxRewardsAdjuster/null-gas-amount\");\r\n        require(gasAmountForExecution < block.gaslimit, \"MinMaxRewardsAdjuster/large-gas-amount-for-exec\");\r\n\r\n        // Check that the receiver hasn't been already added\r\n        FundingReceiver storage newReceiver = fundingReceivers[receiver][targetFunctionSignature];\r\n        require(newReceiver.lastUpdateTime == 0, \"MinMaxRewardsAdjuster/receiver-already-added\");\r\n\r\n        // Add the receiver's data\r\n        newReceiver.lastUpdateTime        = now;\r\n        newReceiver.updateDelay           = updateDelay;\r\n        newReceiver.gasAmountForExecution = gasAmountForExecution;\r\n        newReceiver.baseRewardMultiplier  = baseRewardMultiplier;\r\n        newReceiver.maxRewardMultiplier   = maxRewardMultiplier;\r\n\r\n        emit AddFundingReceiver(\r\n          receiver,\r\n          targetFunctionSignature,\r\n          updateDelay,\r\n          gasAmountForExecution,\r\n          baseRewardMultiplier,\r\n          maxRewardMultiplier\r\n        );\r\n    }\r\n    /*\r\n    * @notify Remove an already added funding receiver\r\n    * @param receiver The funding receiver address\r\n    * @param targetFunctionSignature The signature of the function whose callers get funding\r\n    */\r\n    function removeFundingReceiver(address receiver, bytes4 targetFunctionSignature) external isAuthorized {\r\n        // Check that the receiver is still stored and then delete it\r\n        require(fundingReceivers[receiver][targetFunctionSignature].lastUpdateTime > 0, \"MinMaxRewardsAdjuster/non-existent-receiver\");\r\n        delete(fundingReceivers[receiver][targetFunctionSignature]);\r\n        emit RemoveFundingReceiver(receiver, targetFunctionSignature);\r\n    }\r\n\r\n    // --- Core Logic ---\r\n    /*\r\n    * @notify Recompute the base and max rewards for a specific funding receiver with a specific function offering funding\r\n    * @param receiver The funding receiver address\r\n    * @param targetFunctionSignature The signature of the function whose callers get funding\r\n    */\r\n    function recomputeRewards(address receiver, bytes4 targetFunctionSignature) external {\r\n        FundingReceiver storage targetReceiver = fundingReceivers[receiver][targetFunctionSignature];\r\n        require(both(targetReceiver.lastUpdateTime > 0, addition(targetReceiver.lastUpdateTime, targetReceiver.updateDelay) <= now), \"MinMaxRewardsAdjuster/wait-more\");\r\n\r\n        // Update last time\r\n        targetReceiver.lastUpdateTime = now;\r\n\r\n        // Read the gas and the ETH prices\r\n        uint256 gasPrice = gasPriceOracle.read();\r\n        uint256 ethPrice = ethPriceOracle.read();\r\n\r\n        // Calculate the base fiat value\r\n        uint256 baseRewardFiatValue = divide(multiply(multiply(gasPrice, targetReceiver.gasAmountForExecution), WAD), ethPrice);\r\n\r\n        // Calculate the base reward expressed in system coins\r\n        uint256 newBaseReward = divide(multiply(baseRewardFiatValue, RAY), oracleRelayer.redemptionPrice());\r\n        newBaseReward         = divide(multiply(newBaseReward, targetReceiver.baseRewardMultiplier), HUNDRED);\r\n\r\n        // Compute the new max reward and check both rewards\r\n        uint256 newMaxReward = divide(multiply(newBaseReward, targetReceiver.maxRewardMultiplier), HUNDRED);\r\n        require(both(newBaseReward > 0, newMaxReward > 0), \"MinMaxRewardsAdjuster/null-new-rewards\");\r\n\r\n        // Notify the treasury param adjuster about the new max reward\r\n        treasuryParamAdjuster.adjustMaxReward(receiver, targetFunctionSignature, newMaxReward);\r\n\r\n        // Approve the max reward in the treasury\r\n        treasury.setPerBlockAllowance(receiver, multiply(newMaxReward, RAY));\r\n\r\n        // Set the new rewards inside the receiver contract\r\n        TreasuryFundableLike(receiver).modifyParameters(\"maxUpdateCallerReward\", newMaxReward);\r\n        TreasuryFundableLike(receiver).modifyParameters(\"baseUpdateCallerReward\", newBaseReward);\r\n\r\n        emit RecomputedRewards(receiver, newBaseReward, newMaxReward);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleRelayer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gasPriceOracle_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethPriceOracle_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasuryParamAdjuster_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"targetFunctionSignature\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updateDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasAmountForExecution\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseRewardMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxRewardMultiplier\",\"type\":\"uint256\"}],\"name\":\"AddFundingReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"targetFunction\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBaseReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxReward\",\"type\":\"uint256\"}],\"name\":\"RecomputedRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"targetFunctionSignature\",\"type\":\"bytes4\"}],\"name\":\"RemoveFundingReceiver\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HUNDRED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THOUSAND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"targetFunctionSignature\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"updateDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasAmountForExecution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseRewardMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRewardMultiplier\",\"type\":\"uint256\"}],\"name\":\"addFundingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethPriceOracle\",\"outputs\":[{\"internalType\":\"contract OracleLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"fundingReceivers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasAmountForExecution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updateDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseRewardMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRewardMultiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasPriceOracle\",\"outputs\":[{\"internalType\":\"contract OracleLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"targetFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRelayer\",\"outputs\":[{\"internalType\":\"contract OracleRelayerLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"targetFunctionSignature\",\"type\":\"bytes4\"}],\"name\":\"recomputeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"targetFunctionSignature\",\"type\":\"bytes4\"}],\"name\":\"removeFundingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract StabilityFeeTreasuryLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryParamAdjuster\",\"outputs\":[{\"internalType\":\"contract TreasuryParamAdjusterLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MinMaxRewardsAdjuster","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004ed9c0dca0479bc64d8f4eb3007126d5791f785100000000000000000000000083533fdd3285f48204215e9cf38c785371258e760000000000000000000000003a3e9d4d1afc6f9d7e0e9a4032a7ddbc1500d7a5000000000000000000000000b825e25856bd98b3f2faf2aeb6cb8742b38c402500000000000000000000000073feb3c2dbb87c8e0d040a7cd708f7497853b787","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d2a7575114401a91b4b089aea236a037c0658bd6036ee60459f9efcf93b36e8d"}]}