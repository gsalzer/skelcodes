{"status":"1","message":"OK","result":[{"SourceCode":"{\"AscendingStepModel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n  ∩~~~~∩ \\n  ξ ･×･ ξ \\n  ξ　~　ξ \\n  ξ　　 ξ \\n  ξ　　 “~～~～〇 \\n  ξ　　　　　　 ξ \\n  ξ ξ ξ~～~ξ ξ ξ \\n　 ξ_ξξ_ξ　ξ_ξξ_ξ\\nAlpaca Fin Corporation\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./SafeToken.sol\\\";\\nimport \\\"./IPriceModel.sol\\\";\\n\\ncontract AscendingStepModel is IPriceModel {\\n  using SafeMath for uint256;\\n\\n  /// @dev states\\n  uint256 public immutable override startBlock;\\n  uint256 public immutable override endBlock;\\n  uint256 public immutable blockPerStep;\\n  uint256 public immutable priceStep;\\n\\n  uint256 public immutable startPrice;\\n  uint256 public immutable priceCeiling;\\n\\n  constructor(\\n    uint256 _startBlock,\\n    uint256 _endBlock,\\n    uint256 _blockPerStep,\\n    uint256 _priceStep,\\n    uint256 _startPrice,\\n    uint256 _priceCeiling\\n  ) public {\\n    require(_endBlock \\u003e _startBlock, \\\"AscendingStepModel::constructor:: end block \\u003c start block\\\");\\n    require(_startPrice \\u003c _priceCeiling, \\\"AscendingStepModel::constructor:: floor price \\u003e start price\\\");\\n\\n    startBlock = _startBlock;\\n    endBlock = _endBlock;\\n    blockPerStep = _blockPerStep;\\n    priceStep = _priceStep;\\n    startPrice = _startPrice;\\n    priceCeiling = _priceCeiling;\\n  }\\n\\n  /// @dev Get current price per token\\n  function price() external view override returns (uint256) {\\n    if (block.number \\u003c= startBlock) return startPrice;\\n    // This should prevent overflow\\n    if (block.number \\u003e= endBlock) return priceCeiling;\\n\\n    uint256 _priceDelta = ((block.number.sub(startBlock)).div(blockPerStep)).mul(priceStep);\\n\\n    uint256 _updatedPrice = startPrice.add(_priceDelta);\\n\\n    if (_updatedPrice \\u003e= priceCeiling) return priceCeiling;\\n\\n    return _updatedPrice;\\n  }\\n}\\n\\n\"},\"IPriceModel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n  ∩~~~~∩ \\n  ξ ･×･ ξ \\n  ξ　~　ξ \\n  ξ　　 ξ \\n  ξ　　 “~～~～〇 \\n  ξ　　　　　　 ξ \\n  ξ ξ ξ~～~ξ ξ ξ \\n　 ξ_ξξ_ξ　ξ_ξξ_ξ\\nAlpaca Fin Corporation\\n*/\\n\\npragma solidity 0.6.12;\\n\\ninterface IPriceModel {  \\n  /// @dev Get current price per token\\n  function price() external view returns (uint256);\\n\\n  /// @dev Get startBlock from price model\\n  function startBlock() external view returns (uint256);\\n\\n  /// @dev Get endBlock from price model\\n  function endBlock() external view returns (uint256);\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n  ∩~~~~∩ \\n  ξ ･×･ ξ \\n  ξ　~　ξ \\n  ξ　　 ξ \\n  ξ　　 “~～~～〇 \\n  ξ　　　　　　 ξ \\n  ξ ξ ξ~～~ξ ξ ξ \\n　 ξ_ξξ_ξ　ξ_ξξ_ξ\\nAlpaca Fin Corporation\\n*/\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c \\u003c a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b \\u003e a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"SafeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n  ∩~~~~∩ \\n  ξ ･×･ ξ \\n  ξ　~　ξ \\n  ξ　　 ξ \\n  ξ　　 “~～~～〇 \\n  ξ　　　　　　 ξ \\n  ξ ξ ξ~～~ξ ξ ξ \\n　 ξ_ξξ_ξ　ξ_ξξ_ξ\\nAlpaca Fin Corporation\\n*/\\n\\npragma solidity 0.6.12;\\n\\ninterface ERC20Interface {\\n  function balanceOf(address user) external view returns (uint256);\\n}\\n\\nlibrary SafeToken {\\n  function myBalance(address token) internal view returns (uint256) {\\n    return ERC20Interface(token).balanceOf(address(this));\\n  }\\n\\n  function balanceOf(address token, address user) internal view returns (uint256) {\\n    return ERC20Interface(token).balanceOf(user);\\n  }\\n\\n  function safeApprove(\\n    address token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    // bytes4(keccak256(bytes(\\u0027approve(address,uint256)\\u0027)));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n    require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\\"!safeApprove\\\");\\n  }\\n\\n  function safeTransfer(\\n    address token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    // bytes4(keccak256(bytes(\\u0027transfer(address,uint256)\\u0027)));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n    require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\\"!safeTransfer\\\");\\n  }\\n\\n  function safeTransferFrom(\\n    address token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    // bytes4(keccak256(bytes(\\u0027transferFrom(address,address,uint256)\\u0027)));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n    require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\\"!safeTransferFrom\\\");\\n  }\\n\\n  function safeTransferETH(address to, uint256 value) internal {\\n    // solhint-disable-next-line no-call-value\\n    (bool success, ) = to.call{ value: value }(new bytes(0));\\n    require(success, \\\"!safeTransferETH\\\");\\n  }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockPerStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceCeiling\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"blockPerStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AscendingStepModel","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"168","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000ce92d00000000000000000000000000000000000000000000000000000000000cf305000000000000000000000000000000000000000000000000000000000000000780000000000000000000000000000000000000000000000000011c37937e08000000000000000000000000000000000000000000000000000030d98d59a96000000000000000000000000000000000000000000000000000003782dace9d90000","EVMVersion":"istanbul","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bc846270488a4548b5c765e518869ab7401397876d4e549353412d1321d4fe2e"}]}