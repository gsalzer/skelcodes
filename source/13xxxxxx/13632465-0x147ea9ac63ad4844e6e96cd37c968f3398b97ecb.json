{"status":"1","message":"OK","result":[{"SourceCode":"{\"Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - \\u003cbrecht@loopring.org\\u003e\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                dataPtr := add(dataPtr, 3)\\n\\n                // read 3 bytes\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with \\u0027=\\u0027\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"},\"EIPRender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Base64.sol\\\";\\nimport \\\"./Strings.sol\\\";\\n\\n/*\\n *\\n *  ______ _____ _____    _   _ ______ _______\\n * |  ____|_   _|  __ \\\\  | \\\\ | |  ____|__   __|\\n * | |__    | | | |__) | |  \\\\| | |__     | |\\n * |  __|   | | |  ___/  | . ` |  __|    | |\\n * | |____ _| |_| |      | |\\\\  | |       | |\\n * |______|_____|_|      |_| \\\\_|_|       |_|\\n * created by @aka_labs_, 2021\\n *\\n */\\n\\nlibrary EIPRender {\\n    using Strings for uint160;\\n\\n    function generateMetadata(\\n        string memory name,\\n        string memory collectionInfo,\\n        address currentOwner,\\n        string memory dateCreated,\\n        string memory eipDescription\\n    ) public pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                \\u0027{\\\"name\\\":\\\"\\u0027,\\n                                name,\\n                                \\u0027\\\", \\\"description\\\": \\\"\\u0027,\\n                                eipDescription,\\n                                \\u0027\\\", \\\"image\\\": \\\"\\u0027,\\n                                \\\"data:image/svg+xml;base64,\\\",\\n                                generateImage(name, collectionInfo, currentOwner, dateCreated),\\n                                \\u0027\\\"}\\u0027\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _getBorderFade(address currentOwner) internal pure returns (string memory) {\\n        string memory bottomRight = \\\"#81A7F8\\\";\\n        string memory topLeft = \\\"#CBAEFD\\\";\\n        string memory xTop = \\\"88\\\";\\n        string memory xBottom = \\\"202\\\";\\n        if (uint160(currentOwner) % 2 == 0) {\\n            (bottomRight, topLeft) = (topLeft, bottomRight);\\n            (xTop, xBottom) = (xBottom, xTop);\\n        }\\n        return\\n            Base64.encode(\\n                bytes(\\n                    abi.encodePacked(\\n                        \\u0027\\u003csvg width=\\\"290\\\" height=\\\"500\\\" viewBox=\\\"0 0 290 500\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"\\u003e\\u003ccircle cx=\\\"\\u0027,\\n                        xBottom,\\n                        \\u0027\\\" cy=\\\"434\\\" r=\\\"150px\\\" fill=\\\"\\u0027,\\n                        bottomRight,\\n                        \\u0027\\\"/\\u003e\\u003ccircle cx=\\\"\\u0027,\\n                        xTop,\\n                        \\u0027\\\" cy=\\\"66\\\" r=\\\"150px\\\" fill=\\\"\\u0027,\\n                        topLeft,\\n                        \\u0027\\\"/\\u003e\\u003c/svg\\u003e\\u0027\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _getPolygon(address currentOwner) internal pure returns (string memory) {\\n        string memory fourthAndSixth = \\\"#81A7F8\\\";\\n        string memory thirdAndFifth = \\\"#CBAEFD\\\";\\n        string memory second = \\\"#CEC0F9\\\";\\n        string memory first = \\\"#A6FBF7\\\";\\n        if (uint160(currentOwner) % 2 == 0) {\\n            (first, second) = (second, first);\\n            (thirdAndFifth, fourthAndSixth) = (fourthAndSixth, thirdAndFifth);\\n        }\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\u0027\\u003cpolygon points=\\\"392.07,0 383.5,29.11 383.5,873.74 392.07,882.29 784.13,650.54\\\" fill=\\\"\\u0027,\\n                    first,\\n                    \\u0027\\\" stroke=\\\"rgb(0,0,0)\\\" stroke-width=\\\"6\\\"/\\u003e\\u003cpolygon points=\\\"392.07,0 0,650.54 392.07,882.29 392.07,472.33\\\" fill=\\\"\\u0027,\\n                    second,\\n                    \\u0027\\\" stroke=\\\"rgb(0,0,0)\\\" stroke-width=\\\"6\\\"/\\u003e\\u003cpolygon points=\\\"392.07,956.52 387.24,962.41 387.24,1263.3 392.07,1277.4 784.37,724.89\\\" fill=\\\"\\u0027,\\n                    thirdAndFifth,\\n                    \\u0027\\\" stroke=\\\"rgb(0,0,0)\\\" stroke-width=\\\"6\\\"/\\u003e\\u003cpolygon points=\\\"392.07,1277.4 392.07,956.52 0,724.89\\\" fill=\\\"\\u0027,\\n                    fourthAndSixth,\\n                    \\u0027\\\" stroke=\\\"rgb(0,0,0)\\\" stroke-width=\\\"6\\\"/\\u003e\\u003cpolygon points=\\\"392.07,882.29 784.13,650.54 392.07,472.33\\\" fill=\\\"\\u0027,\\n                    thirdAndFifth,\\n                    \\u0027\\\" stroke=\\\"rgb(0,0,0)\\\" stroke-width=\\\"6\\\"/\\u003e\\u003cpolygon points=\\\"0,650.54 392.07,882.29 392.07,472.33\\\" fill=\\\"\\u0027,\\n                    fourthAndSixth,\\n                    \\u0027\\\" stroke=\\\"rgb(0,0,0)\\\" stroke-width=\\\"6\\\"/\\u003e\\u0027\\n                )\\n            );\\n    }\\n\\n    function generateImage(\\n        string memory name,\\n        string memory collectionInfo,\\n        address currentOwner,\\n        string memory dateCreated\\n    ) public pure returns (string memory) {\\n        string\\n            memory description = \\\"Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.\\\";\\n        return\\n            Base64.encode(\\n                bytes(\\n                    string(\\n                        abi.encodePacked(\\n                            \\u0027\\u003csvg width=\\\"290\\\" height=\\\"500\\\" viewBox=\\\"0 0 290 500\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\u003e\\u0027,\\n                            \\u0027\\u003cdefs\\u003e\\u003cfilter id=\\\"f1\\\"\\u003e\\u003cfeImage result=\\\"p3\\\" xlink:href=\\\"data:image/svg+xml;base64,\\u0027,\\n                            _getBorderFade(currentOwner),\\n                            \\u0027\\\"/\\u003e\\u0027\\n                            \\u0027\\u003cfeGaussianBlur stdDeviation=\\\"42\\\"/\\u003e\\u003c/filter\\u003e\\u003cclipPath id=\\\"corners\\\"\\u003e\\u003crect width=\\\"290\\\" height=\\\"500\\\" rx=\\\"42\\\" ry=\\\"42\\\"/\\u003e\\u003c/clipPath\\u003e\\u003cpath id=\\\"dpath\\\" d=\\\"M40 12 H250 A28 28 0 0 1 278 40 V460 A28 28 0 0 1 250 488 H40 A28 28 0 0 1 12 460 V40 A28 28 0 0 1 40 12 z\\\"/\\u003e\\u003c/defs\\u003e\\u0027\\n                            \\u0027\\u003cg clip-path=\\\"url(#corners)\\\"\\u003e\\u003crect style=\\\"filter: url(#f1)\\\" x=\\\"0px\\\" y=\\\"0px\\\" width=\\\"290px\\\" height=\\\"500px\\\"/\\u003e\\u003c/g\\u003e\\u0027\\n                            \\u0027\\u003ctext text-rendering=\\\"optimizeSpeed\\\"\\u003e\\u003ctextPath startOffset=\\\"-100%\\\" font-family=\\\"Courier New\\\" font-size=\\\"10px\\\" xlink:href=\\\"#dpath\\\"\\u003e\\u0027,\\n                            description,\\n                            \\u0027\\u003canimate additive=\\\"sum\\\" attributeName=\\\"startOffset\\\" from=\\\"0%\\\" to=\\\"100%\\\" begin=\\\"0s\\\" dur=\\\"30s\\\" repeatCount=\\\"indefinite\\\"/\\u003e\\u003c/textPath\\u003e\\u003ctextPath startOffset=\\\"0%\\\" fill=\\\"#000\\\" font-family=\\\"Courier New\\\" font-size=\\\"10px\\\" xlink:href=\\\"#dpath\\\"\\u003e\\u0027,\\n                            description,\\n                            \\u0027\\u003canimate additive=\\\"sum\\\" attributeName=\\\"startOffset\\\" from=\\\"0%\\\" to=\\\"100%\\\" begin=\\\"0s\\\" dur=\\\"30s\\\" repeatCount=\\\"indefinite\\\"/\\u003e\\u003c/textPath\\u003e\\u003c/text\\u003e\\u0027\\n                            \\u0027\\u003crect x=\\\"20\\\" y=\\\"25\\\" width=\\\"250\\\" height=\\\"450\\\" rx=\\\"26\\\" ry=\\\"26\\\" fill=\\\"#f2f2f9\\\" stroke=\\\"#000\\\"/\\u003e\\u0027,\\n                            \\u0027\\u003ctext y=\\\"65px\\\" x=\\\"50%\\\" font-family=\\\"Courier New\\\" font-weight=\\\"200\\\" font-size=\\\"36px\\\" dominant-baseline=\\\"middle\\\" text-anchor=\\\"middle\\\"\\u003e\\u0027,\\n                            name,\\n                            \\\"\\u003c/text\\u003e\\\"\\n                            \\u0027\\u003cg transform=\\\"matrix(0.13 0 0 0.13 94.015951 143)\\\"\\u003e\\u0027,\\n                            _getPolygon(currentOwner),\\n                            \\\"\\u003c/g\\u003e\\\",\\n                            \\u0027\\u003cg style=\\\"transform:translate(65px, 95px)\\\"\\u003e\\u0027,\\n                            \\u0027\\u003crect width=\\\"160px\\\" height=\\\"26px\\\" rx=\\\"8px\\\" ry=\\\"8px\\\" fill=\\\"#fff\\\" stroke=\\\"#000\\\"/\\u003e\\u0027,\\n                            \\u0027\\u003ctext x=\\\"12px\\\" y=\\\"17px\\\" font-family=\\\"Courier New\\\" font-size=\\\"12px\\\"\\u003eCreated: \\u0027,\\n                            dateCreated,\\n                            \\\"\\u003c/text\\u003e\\u003c/g\\u003e\\\",\\n                            \\u0027\\u003cg style=\\\"transform:translate(65px, 335px)\\\"\\u003e\\u0027,\\n                            \\u0027\\u003crect width=\\\"160px\\\" height=\\\"50px\\\" rx=\\\"8px\\\" ry=\\\"8px\\\" fill=\\\"#fff\\\" stroke=\\\"#000\\\"/\\u003e\\u003ctext x=\\\"30px\\\" y=\\\"18px\\\" font-family=\\\"Courier New\\\" font-size=\\\"12px\\\"\\u003eEdition: \\u0027,\\n                            collectionInfo,\\n                            \\\"\\u003c/text\\u003e\\\",\\n                            \\u0027\\u003ctext x=\\\"30px\\\" y=\\\"38px\\\" font-family=\\\"Courier New\\\" font-size=\\\"12px\\\"\\u003eStatus: FINAL\\u003c/text\\u003e\\u003c/g\\u003e\\u003cg style=\\\"transform:translate(29px, 395px)\\\"\\u003e\\u003crect width=\\\"232px\\\" height=\\\"55px\\\" rx=\\\"8px\\\" ry=\\\"8px\\\" fill=\\\"#fff\\\" stroke=\\\"#000\\\"/\\u003e\\u0027,\\n                            \\u0027\\u003ctext x=\\\"90px\\\" y=\\\"22px\\\" font-family=\\\"Courier New\\\" font-size=\\\"12px\\\"\\u003eMinted:\\u003c/text\\u003e\\u003ctext x=\\\"12px\\\" y=\\\"36px\\\" font-family=\\\"Courier New\\\" font-size=\\\"8.3px\\\"\\u003e\\u0027,\\n                            uint160(currentOwner).toHexString(20),\\n                            \\\"\\u003c/text\\u003e\\u003c/g\\u003e\\u003c/svg\\u003e\\\"\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n}\\n\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value \\u0026 0xf];\\n            value \\u003e\\u003e= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collectionInfo\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"dateCreated\",\"type\":\"string\"}],\"name\":\"generateImage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collectionInfo\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"dateCreated\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"eipDescription\",\"type\":\"string\"}],\"name\":\"generateMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"EIPRender","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a5799119baf4b742a8c846409a04be71a5cb196b937c95ebd66d9ec5ed080abd"}]}