{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Wrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@airswap/light/contracts/interfaces/ILight.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\n\\n/**\\n * @title Light: Simple atomic swap\\n * @notice https://www.airswap.io/\\n */\\ncontract Wrapper {\\n  ILight public lightContract;\\n  IWETH public wethContract;\\n\\n  /**\\n   * @notice Constructor\\n   * @param _lightContract address\\n   * @param _wethContract address\\n   */\\n  constructor(address _lightContract, address _wethContract) {\\n    lightContract = ILight(_lightContract);\\n    wethContract = IWETH(_wethContract);\\n  }\\n\\n  /**\\n   * @notice Required when withdrawing from WETH\\n   * @dev During unwraps, WETH.withdraw transfers ether to msg.sender (this contract)\\n   */\\n  receive() external payable {\\n    // Ensure the message sender is the WETH contract.\\n    if (msg.sender != address(wethContract)) {\\n      revert(\\\"DO_NOT_SEND_ETHER\\\");\\n    }\\n  }\\n\\n  /**\\n   * @notice Atomic ERC20 Swap\\n   * @param nonce uint256 Unique and should be sequential\\n   * @param expiry uint256 Expiry in seconds since 1 January 1970\\n   * @param signerWallet address Wallet of the signer\\n   * @param signerToken address ERC20 token transferred from the signer\\n   * @param signerAmount uint256 Amount transferred from the signer\\n   * @param senderToken address ERC20 token transferred from the sender\\n   * @param senderAmount uint256 Amount transferred from the sender\\n   * @param v uint8 \\\"v\\\" value of the ECDSA signature\\n   * @param r bytes32 \\\"r\\\" value of the ECDSA signature\\n   * @param s bytes32 \\\"s\\\" value of the ECDSA signature\\n   */\\n  function swap(\\n    uint256 nonce,\\n    uint256 expiry,\\n    address signerWallet,\\n    address signerToken,\\n    uint256 signerAmount,\\n    address senderToken,\\n    uint256 senderAmount,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public payable {\\n    if (senderToken == address(wethContract)) {\\n      // Ensure message value is param\\n      require(senderAmount == msg.value, \\\"VALUE_MUST_BE_SENT\\\");\\n      // Wrap (deposit) the ether\\n      wethContract.deposit{value: msg.value}();\\n    }\\n\\n    lightContract.swapWithRecipient(\\n      msg.sender,\\n      nonce,\\n      expiry,\\n      signerWallet,\\n      signerToken,\\n      signerAmount,\\n      senderToken,\\n      senderAmount,\\n      v,\\n      r,\\n      s\\n    );\\n\\n    if (signerToken == address(wethContract)) {\\n      // Unwrap (withdraw) the ether\\n      wethContract.withdraw(signerAmount);\\n      // Transfer ether to the recipient\\n      (bool success, ) = msg.sender.call{value: signerAmount}(\\\"\\\");\\n      require(success, \\\"ETH_RETURN_FAILED\\\");\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@airswap/light/contracts/interfaces/ILight.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ILight {\\n  event Swap(\\n    uint256 indexed nonce,\\n    uint256 timestamp,\\n    address indexed signerWallet,\\n    address signerToken,\\n    uint256 signerAmount,\\n    uint256 signerFee,\\n    address indexed senderWallet,\\n    address senderToken,\\n    uint256 senderAmount\\n  );\\n\\n  event Cancel(uint256 indexed nonce, address indexed signerWallet);\\n\\n  event Authorize(address indexed signer, address indexed signerWallet);\\n\\n  event Revoke(address indexed signer, address indexed signerWallet);\\n\\n  event SetFee(uint256 indexed signerFee);\\n\\n  event SetFeeWallet(address indexed feeWallet);\\n\\n  function swap(\\n    uint256 nonce,\\n    uint256 expiry,\\n    address signerWallet,\\n    address signerToken,\\n    uint256 signerAmount,\\n    address senderToken,\\n    uint256 senderAmount,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  function swapWithRecipient(\\n    address recipient,\\n    uint256 nonce,\\n    uint256 expiry,\\n    address signerWallet,\\n    address signerToken,\\n    uint256 signerAmount,\\n    address senderToken,\\n    uint256 senderAmount,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  function authorize(address sender) external;\\n\\n  function revoke() external;\\n\\n  function cancel(uint256[] calldata nonces) external;\\n\\n  function nonceUsed(address, uint256) external view returns (bool);\\n\\n  function authorized(address) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lightContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"lightContract\",\"outputs\":[{\"internalType\":\"contract ILight\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signerWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signerToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"signerAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"senderToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethContract\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Wrapper","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"000000000000000000000000c549a5c701cb6e6cbc091007a80c089c49595468000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}