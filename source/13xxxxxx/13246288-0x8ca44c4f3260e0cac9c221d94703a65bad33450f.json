{"status":"1","message":"OK","result":[{"SourceCode":"// hevm: flattened sources of src/DssSpell.sol\r\n// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity =0.6.12 >=0.6.12 <0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n////// lib/dss-exec-lib/src/CollateralOpts.sol\r\n/* pragma solidity ^0.6.12; */\r\n\r\nstruct CollateralOpts {\r\n    bytes32 ilk;\r\n    address gem;\r\n    address join;\r\n    address clip;\r\n    address calc;\r\n    address pip;\r\n    bool    isLiquidatable;\r\n    bool    isOSM;\r\n    bool    whitelistOSM;\r\n    uint256 ilkDebtCeiling;\r\n    uint256 minVaultAmount;\r\n    uint256 maxLiquidationAmount;\r\n    uint256 liquidationPenalty;\r\n    uint256 ilkStabilityFee;\r\n    uint256 startingPriceFactor;\r\n    uint256 breakerTolerance;\r\n    uint256 auctionDuration;\r\n    uint256 permittedDrop;\r\n    uint256 liquidationRatio;\r\n    uint256 kprFlatReward;\r\n    uint256 kprPctReward;\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssExecLib.sol\r\n//\r\n// DssExecLib.sol -- MakerDAO Executive Spellcrafting Library\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n/* pragma solidity ^0.6.12; */\r\n/* pragma experimental ABIEncoderV2; */\r\n\r\n/* import { CollateralOpts } from \"./CollateralOpts.sol\"; */\r\n\r\ninterface Initializable {\r\n    function init(bytes32) external;\r\n}\r\n\r\ninterface Authorizable {\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n}\r\n\r\ninterface Fileable {\r\n    function file(bytes32, address) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, bytes32, address) external;\r\n}\r\n\r\ninterface Drippable {\r\n    function drip() external returns (uint256);\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\ninterface Pricing {\r\n    function poke(bytes32) external;\r\n}\r\n\r\ninterface ERC20 {\r\n    function decimals() external returns (uint8);\r\n}\r\n\r\ninterface DssVat {\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function ilks(bytes32) external returns (uint256 Art, uint256 rate, uint256 spot, uint256 line, uint256 dust);\r\n    function Line() external view returns (uint256);\r\n    function suck(address, address, uint) external;\r\n}\r\n\r\ninterface ClipLike {\r\n    function vat() external returns (address);\r\n    function dog() external returns (address);\r\n    function spotter() external view returns (address);\r\n    function calc() external view returns (address);\r\n    function ilk() external returns (bytes32);\r\n}\r\n\r\ninterface JoinLike {\r\n    function vat() external returns (address);\r\n    function ilk() external returns (bytes32);\r\n    function gem() external returns (address);\r\n    function dec() external returns (uint256);\r\n    function join(address, uint) external;\r\n    function exit(address, uint) external;\r\n}\r\n\r\n// Includes Median and OSM functions\r\ninterface OracleLike_2 {\r\n    function src() external view returns (address);\r\n    function lift(address[] calldata) external;\r\n    function drop(address[] calldata) external;\r\n    function setBar(uint256) external;\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n    function orb0() external view returns (address);\r\n    function orb1() external view returns (address);\r\n}\r\n\r\ninterface MomLike {\r\n    function setOsm(bytes32, address) external;\r\n    function setPriceTolerance(address, uint256) external;\r\n}\r\n\r\ninterface RegistryLike {\r\n    function add(address) external;\r\n    function xlip(bytes32) external view returns (address);\r\n}\r\n\r\n// https://github.com/makerdao/dss-chain-log\r\ninterface ChainlogLike {\r\n    function setVersion(string calldata) external;\r\n    function setIPFS(string calldata) external;\r\n    function setSha256sum(string calldata) external;\r\n    function getAddress(bytes32) external view returns (address);\r\n    function setAddress(bytes32, address) external;\r\n    function removeAddress(bytes32) external;\r\n}\r\n\r\ninterface IAMLike {\r\n    function ilks(bytes32) external view returns (uint256,uint256,uint48,uint48,uint48);\r\n    function setIlk(bytes32,uint256,uint256,uint256) external;\r\n    function remIlk(bytes32) external;\r\n    function exec(bytes32) external returns (uint256);\r\n}\r\n\r\ninterface LerpFactoryLike {\r\n    function newLerp(bytes32 name_, address target_, bytes32 what_, uint256 startTime_, uint256 start_, uint256 end_, uint256 duration_) external returns (address);\r\n    function newIlkLerp(bytes32 name_, address target_, bytes32 ilk_, bytes32 what_, uint256 startTime_, uint256 start_, uint256 end_, uint256 duration_) external returns (address);\r\n}\r\n\r\ninterface LerpLike {\r\n    function tick() external;\r\n}\r\n\r\n\r\nlibrary DssExecLib {\r\n\r\n    /* WARNING\r\n\r\nThe following library code acts as an interface to the actual DssExecLib\r\nlibrary, which can be found in its own deployed contract. Only trust the actual\r\nlibrary's implementation.\r\n\r\n    */\r\n\r\n    address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\r\n    uint256 constant internal WAD      = 10 ** 18;\r\n    uint256 constant internal RAY      = 10 ** 27;\r\n    uint256 constant internal RAD      = 10 ** 45;\r\n    uint256 constant internal THOUSAND = 10 ** 3;\r\n    uint256 constant internal MILLION  = 10 ** 6;\r\n    uint256 constant internal BPS_ONE_PCT             = 100;\r\n    uint256 constant internal BPS_ONE_HUNDRED_PCT     = 100 * BPS_ONE_PCT;\r\n    uint256 constant internal RATES_ONE_HUNDRED_PCT   = 1000000021979553151239153027;\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {}\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {}\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {}\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {}\r\n    function vat()        public view returns (address) { return getChangelogAddress(\"MCD_VAT\"); }\r\n    function cat()        public view returns (address) { return getChangelogAddress(\"MCD_CAT\"); }\r\n    function dog()        public view returns (address) { return getChangelogAddress(\"MCD_DOG\"); }\r\n    function jug()        public view returns (address) { return getChangelogAddress(\"MCD_JUG\"); }\r\n    function pot()        public view returns (address) { return getChangelogAddress(\"MCD_POT\"); }\r\n    function vow()        public view returns (address) { return getChangelogAddress(\"MCD_VOW\"); }\r\n    function end()        public view returns (address) { return getChangelogAddress(\"MCD_END\"); }\r\n    function esm()        public view returns (address) { return getChangelogAddress(\"MCD_ESM\"); }\r\n    function reg()        public view returns (address) { return getChangelogAddress(\"ILK_REGISTRY\"); }\r\n    function spotter()    public view returns (address) { return getChangelogAddress(\"MCD_SPOT\"); }\r\n    function osmMom()     public view returns (address) { return getChangelogAddress(\"OSM_MOM\"); }\r\n    function clipperMom() public view returns (address) { return getChangelogAddress(\"CLIPPER_MOM\"); }\r\n    function autoLine()   public view returns (address) { return getChangelogAddress(\"MCD_IAM_AUTO_LINE\"); }\r\n    function lerpFab()    public view returns (address) { return getChangelogAddress(\"LERP_FAB\"); }\r\n    function clip(bytes32 _ilk) public view returns (address _clip) {}\r\n    function flip(bytes32 _ilk) public view returns (address _flip) {}\r\n    function calc(bytes32 _ilk) public view returns (address _calc) {}\r\n    function getChangelogAddress(bytes32 _key) public view returns (address) {}\r\n    function setChangelogAddress(bytes32 _key, address _val) public {}\r\n    function setChangelogVersion(string memory _version) public {}\r\n    function authorize(address _base, address _ward) public {}\r\n    function canCast(uint40 _ts, bool _officeHours) public pure returns (bool) {}\r\n    function nextCastTime(uint40 _eta, uint40 _ts, bool _officeHours) public pure returns (uint256 castTime) {}\r\n    function updateCollateralPrice(bytes32 _ilk) public {}\r\n    function setContract(address _base, bytes32 _what, address _addr) public {}\r\n    function setContract(address _base, bytes32 _ilk, bytes32 _what, address _addr) public {}\r\n    function setValue(address _base, bytes32 _what, uint256 _amt) public {}\r\n    function setValue(address _base, bytes32 _ilk, bytes32 _what, uint256 _amt) public {}\r\n    function increaseGlobalDebtCeiling(uint256 _amount) public {}\r\n    function setIlkDebtCeiling(bytes32 _ilk, uint256 _amount) public {}\r\n    function setIlkAutoLineParameters(bytes32 _ilk, uint256 _amount, uint256 _gap, uint256 _ttl) public {}\r\n    function setIlkMinVaultAmount(bytes32 _ilk, uint256 _amount) public {}\r\n    function setIlkLiquidationPenalty(bytes32 _ilk, uint256 _pct_bps) public {}\r\n    function setIlkMaxLiquidationAmount(bytes32 _ilk, uint256 _amount) public {}\r\n    function setIlkLiquidationRatio(bytes32 _ilk, uint256 _pct_bps) public {}\r\n    function setStartingPriceMultiplicativeFactor(bytes32 _ilk, uint256 _pct_bps) public {}\r\n    function setAuctionTimeBeforeReset(bytes32 _ilk, uint256 _duration) public {}\r\n    function setAuctionPermittedDrop(bytes32 _ilk, uint256 _pct_bps) public {}\r\n    function setKeeperIncentivePercent(bytes32 _ilk, uint256 _pct_bps) public {}\r\n    function setKeeperIncentiveFlatRate(bytes32 _ilk, uint256 _amount) public {}\r\n    function setLiquidationBreakerPriceTolerance(address _clip, uint256 _pct_bps) public {}\r\n    function setIlkStabilityFee(bytes32 _ilk, uint256 _rate, bool _doDrip) public {}\r\n    function setStairstepExponentialDecrease(address _calc, uint256 _duration, uint256 _pct_bps) public {}\r\n    function whitelistOracleMedians(address _oracle) public {}\r\n    function addReaderToWhitelist(address _oracle, address _reader) public {}\r\n    function addReaderToWhitelistCall(address _oracle, address _reader) public {}\r\n    function allowOSMFreeze(address _osm, bytes32 _ilk) public {}\r\n    function addCollateralBase(\r\n        bytes32 _ilk,\r\n        address _gem,\r\n        address _join,\r\n        address _clip,\r\n        address _calc,\r\n        address _pip\r\n    ) public {}\r\n    function addNewCollateral(CollateralOpts memory co) public {}\r\n    function linearInterpolation(bytes32 _name, address _target, bytes32 _what, uint256 _startTime, uint256 _start, uint256 _end, uint256 _duration) public returns (address) {}\r\n    function linearInterpolation(bytes32 _name, address _target, bytes32 _ilk, bytes32 _what, uint256 _startTime, uint256 _start, uint256 _end, uint256 _duration) public returns (address) {}\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssAction.sol\r\n//\r\n// DssAction.sol -- DSS Executive Spell Actions\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.6.12; */\r\n\r\n/* import { DssExecLib } from \"./DssExecLib.sol\"; */\r\n/* import { CollateralOpts } from \"./CollateralOpts.sol\"; */\r\n\r\ninterface OracleLike_1 {\r\n    function src() external view returns (address);\r\n}\r\n\r\nabstract contract DssAction {\r\n\r\n    using DssExecLib for *;\r\n\r\n    // Modifier used to limit execution time when office hours is enabled\r\n    modifier limited {\r\n        require(DssExecLib.canCast(uint40(block.timestamp), officeHours()), \"Outside office hours\");\r\n        _;\r\n    }\r\n\r\n    // Office Hours defaults to true by default.\r\n    //   To disable office hours, override this function and\r\n    //    return false in the inherited action.\r\n    function officeHours() public virtual returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    // DssExec calls execute. We limit this function subject to officeHours modifier.\r\n    function execute() external limited {\r\n        actions();\r\n    }\r\n\r\n    // DssAction developer must override `actions()` and place all actions to be called inside.\r\n    //   The DssExec function will call this subject to the officeHours limiter\r\n    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\r\n    function actions() public virtual;\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\r\n    function description() external virtual view returns (string memory);\r\n\r\n    // Returns the next available cast time\r\n    function nextCastTime(uint256 eta) external returns (uint256 castTime) {\r\n        require(eta <= uint40(-1));\r\n        castTime = DssExecLib.nextCastTime(uint40(eta), uint40(block.timestamp), officeHours());\r\n    }\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssExec.sol\r\n//\r\n// DssExec.sol -- MakerDAO Executive Spell Template\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.6.12; */\r\n\r\ninterface PauseAbstract {\r\n    function delay() external view returns (uint256);\r\n    function plot(address, bytes32, bytes calldata, uint256) external;\r\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\r\n}\r\n\r\ninterface Changelog {\r\n    function getAddress(bytes32) external view returns (address);\r\n}\r\n\r\ninterface SpellAction {\r\n    function officeHours() external view returns (bool);\r\n    function description() external view returns (string memory);\r\n    function nextCastTime(uint256) external view returns (uint256);\r\n}\r\n\r\ncontract DssExec {\r\n\r\n    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\r\n    uint256                 public eta;\r\n    bytes                   public sig;\r\n    bool                    public done;\r\n    bytes32       immutable public tag;\r\n    address       immutable public action;\r\n    uint256       immutable public expiration;\r\n    PauseAbstract immutable public pause;\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\r\n    function description() external view returns (string memory) {\r\n        return SpellAction(action).description();\r\n    }\r\n\r\n    function officeHours() external view returns (bool) {\r\n        return SpellAction(action).officeHours();\r\n    }\r\n\r\n    function nextCastTime() external view returns (uint256 castTime) {\r\n        return SpellAction(action).nextCastTime(eta);\r\n    }\r\n\r\n    // @param _description  A string description of the spell\r\n    // @param _expiration   The timestamp this spell will expire. (Ex. now + 30 days)\r\n    // @param _spellAction  The address of the spell action\r\n    constructor(uint256 _expiration, address _spellAction) public {\r\n        pause       = PauseAbstract(log.getAddress(\"MCD_PAUSE\"));\r\n        expiration  = _expiration;\r\n        action      = _spellAction;\r\n\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        bytes32 _tag;                    // Required for assembly access\r\n        address _action = _spellAction;  // Required for assembly access\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n    }\r\n\r\n    function schedule() public {\r\n        require(now <= expiration, \"This contract has expired\");\r\n        require(eta == 0, \"This spell has already been scheduled\");\r\n        eta = now + PauseAbstract(pause).delay();\r\n        pause.plot(action, tag, sig, eta);\r\n    }\r\n\r\n    function cast() public {\r\n        require(!done, \"spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}\r\n\r\n////// src/DssSpell.sol\r\n// \r\n// Copyright (C) 2021 Dai Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity 0.6.12; */\r\n/* pragma experimental ABIEncoderV2; */\r\n\r\n/* import \"dss-exec-lib/DssExec.sol\"; */\r\n/* import \"dss-exec-lib/DssAction.sol\"; */\r\n\r\ncontract DssSpellAction is DssAction {\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/community/6d18889e1ebcc2f024c377e106682493ce399beb/governance/votes/Executive%20vote%20-%20September%2017%2C%202021.md -q -O - 2>/dev/null)\"\r\n    string public constant override description =\r\n        \"2021-09-17 MakerDAO Executive Spell | Hash: 0x613a50aee82adca6f6f32a4f7298c70b1c9d061648e786c84b3872ffc5963e3e\";\r\n\r\n    string public constant in_memory_of = \"Jeffrey Blechschmidt\";\r\n    \r\n    // Many of the settings that change weekly rely on the rate accumulator\r\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n    // To check this yourself, use the following rate calculation (example 8%):\r\n    //\r\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n    //\r\n    // A table of rates can be found at\r\n    //    https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\r\n    //\r\n    uint256 constant ONE_PCT_RATE = 1000000000315522921573372069;\r\n\r\n    // Math\r\n    uint256 constant THOUSAND = 10 ** 3;\r\n    uint256 constant MILLION  = 10 ** 6;\r\n    uint256 constant BILLION  = 10 ** 9;\r\n    uint256 constant RAY      = 10 ** 27;\r\n\r\n    address constant GUNIV3DAIUSDC1                 = 0xAbDDAfB225e10B90D798bB8A886238Fb835e2053;\r\n    address constant MCD_JOIN_GUNIV3DAIUSDC1_A      = 0xbFD445A97e7459b0eBb34cfbd3245750Dba4d7a4;\r\n    address constant MCD_CLIP_GUNIV3DAIUSDC1_A      = 0x5048c5Cd3102026472f8914557A1FD35c8Dc6c9e;\r\n    address constant MCD_CLIP_CALC_GUNIV3DAIUSDC1_A = 0x25B17065b94e3fDcD97d94A2DA29E7F77105aDd7;\r\n    address constant PIP_GUNIV3DAIUSDC1             = 0x7F6d78CC0040c87943a0e0c140De3F77a273bd58;\r\n\r\n    // Turn on office hours\r\n    function officeHours() public override returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function actions() public override {\r\n\r\n        // Offboard KNC Legacy Token\r\n        // https://vote.makerdao.com/polling/QmQ4Jotm?network=mainnet#poll-detail\r\n        DssExecLib.setIlkLiquidationPenalty(\"KNC-A\", 0);\r\n        DssExecLib.linearInterpolation({\r\n            _name:      \"KNC Offboarding\",\r\n            _target:    DssExecLib.spotter(),\r\n            _ilk:       \"KNC-A\",\r\n            _what:      \"mat\",\r\n            _startTime: block.timestamp,\r\n            _start:       175 * RAY / 100,\r\n            _end:       5_000 * RAY / 100,\r\n            _duration:  60 days\r\n        });\r\n\r\n        // Adopt the Debt Ceiling Instant Access Module (DC-IAM) for PSM-PAX-A\r\n        // https://vote.makerdao.com/polling/QmbGPgxo?network=mainnet#poll-detail\r\n        DssExecLib.setIlkAutoLineParameters({\r\n            _ilk:    \"PSM-PAX-A\",\r\n            _amount: 500 * MILLION,\r\n            _gap:     50 * MILLION,\r\n            _ttl:    24 hours\r\n        });\r\n        DssExecLib.setIlkAutoLineParameters({\r\n            _ilk:    \"PSM-USDC-A\",\r\n            _amount:  10 * BILLION,\r\n            _gap:    950 * MILLION,\r\n            _ttl:    24 hours\r\n        });\r\n\r\n        // G-UNI DAI/USDC\r\n        DssExecLib.setStairstepExponentialDecrease(MCD_CLIP_CALC_GUNIV3DAIUSDC1_A, 120 seconds, 9990);\r\n\r\n        CollateralOpts memory GUNIV3DAIUSDC1_A = CollateralOpts({\r\n            ilk:                   \"GUNIV3DAIUSDC1-A\",\r\n            gem:                   GUNIV3DAIUSDC1,\r\n            join:                  MCD_JOIN_GUNIV3DAIUSDC1_A,\r\n            clip:                  MCD_CLIP_GUNIV3DAIUSDC1_A,\r\n            calc:                  MCD_CLIP_CALC_GUNIV3DAIUSDC1_A,\r\n            pip:                   PIP_GUNIV3DAIUSDC1,\r\n            isLiquidatable:        false,\r\n            isOSM:                 true,\r\n            whitelistOSM:          false,\r\n            ilkDebtCeiling:        10 * MILLION,\r\n            minVaultAmount:        10 * THOUSAND,\r\n            maxLiquidationAmount:  5 * MILLION,\r\n            liquidationPenalty:    1300,\r\n            ilkStabilityFee:       ONE_PCT_RATE,\r\n            startingPriceFactor:   10500,\r\n            breakerTolerance:      9500, // Allows for a 5% hourly price drop before disabling liquidations\r\n            auctionDuration:       220 minutes,\r\n            permittedDrop:         9000,\r\n            liquidationRatio:      10500,\r\n            kprFlatReward:         300,\r\n            kprPctReward:          10 // 0.1%\r\n        });\r\n\r\n        DssExecLib.addNewCollateral(GUNIV3DAIUSDC1_A);\r\n        DssExecLib.setIlkAutoLineParameters(\"GUNIV3DAIUSDC1-A\", 10 * MILLION, 10 * MILLION, 8 hours);\r\n\r\n        DssExecLib.setChangelogAddress(\"GUNIV3DAIUSDC1\", GUNIV3DAIUSDC1);\r\n        DssExecLib.setChangelogAddress(\"MCD_JOIN_GUNIV3DAIUSDC1_A\", MCD_JOIN_GUNIV3DAIUSDC1_A);\r\n        DssExecLib.setChangelogAddress(\"MCD_CLIP_GUNIV3DAIUSDC1_A\", MCD_CLIP_GUNIV3DAIUSDC1_A);\r\n        DssExecLib.setChangelogAddress(\"MCD_CLIP_CALC_GUNIV3DAIUSDC1_A\", MCD_CLIP_CALC_GUNIV3DAIUSDC1_A);\r\n        DssExecLib.setChangelogAddress(\"PIP_GUNIV3DAIUSDC1\", PIP_GUNIV3DAIUSDC1);\r\n        DssExecLib.setChangelogVersion(\"1.9.6\");\r\n    }\r\n}\r\n\r\ncontract DssSpell is DssExec {\r\n    constructor() DssExec(block.timestamp + 30 days, address(new DssSpellAction())) public {}\r\n}","ABI":"[{\"inputs\":[],\"name\":\"actions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"in_memory_of\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"nextCastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"castTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"officeHours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DssSpellAction","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"","EVMVersion":"Default","Library":"DssExecLib:fd88cee74f7d78697775abdae53f9da1559728e4","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://acde2ef81825af4b7d3260dc6af9b712bc34a789e0059495c86ce3e3d82b55b2"}]}