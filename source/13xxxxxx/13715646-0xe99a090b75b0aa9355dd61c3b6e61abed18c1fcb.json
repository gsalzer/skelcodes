{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SymbiosisTokenVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title SymbiosisTokenVesting\\n *\\n * @dev A token holder contract that can release its token balance gradually like a\\n * typical vesting scheme, with a cliff and vesting period.\\n * There are 3 types of vesting schedule: CONTINUOUS, MONTHLY (every 30 days), QUARTERLY (every 90 days).\\n */\\ncontract SymbiosisTokenVesting is Ownable {\\n    // The vesting schedule is time-based (i.e. using block timestamps as opposed to e.g. block numbers), and is\\n    // therefore sensitive to timestamp manipulation (which is something miners can do, to a certain degree). Therefore,\\n    // it is recommended to avoid using short time durations (less than a minute). Typical vesting schemes, with a\\n    // cliff period of a year and a duration of four years, are safe to use.\\n    // solhint-disable not-rely-on-time\\n\\n    using SafeERC20 for IERC20;\\n\\n    event ReservedAdded(address indexed beneficiary, uint256 reserved);\\n    event TokensReleased(\\n        address indexed beneficiary,\\n        address indexed transferredTo,\\n        uint256 amount\\n    );\\n    event TokensWithdrawnByOwner(address indexed token, uint256 amount);\\n\\n    // 100% in basis points\\n    uint256 public constant MAX_BPS = 10000;\\n\\n    // private VestingSchedule time constants\\n    uint256 private constant MONTHLY_TIME = 30 days;\\n    uint256 private constant QUARTERLY_TIME = 90 days;\\n\\n    // SymbiosisTokenVesting name\\n    string public name;\\n\\n    // ERC20 token which is being vested\\n    IERC20 public token;\\n\\n    // staking contract address\\n    address public stakingAddress;\\n\\n    // Durations and timestamps are expressed in UNIX time, the same units as block.timestamp.\\n    uint256 public cliff; // the cliff time of the token vesting\\n    uint256 public start; // the start time of the token vesting\\n    uint256 public duration; // the duration of the token vesting\\n\\n    // type of the token vesting\\n    enum VestingSchedule {\\n        CONTINUOUS,\\n        MONTHLY,\\n        QUARTERLY\\n    }\\n    VestingSchedule public immutable schedule;\\n\\n    // basis points of the initial unlock – after the start and before the end of the cliff period\\n    uint256 public immutable cliffUnlockedBP;\\n\\n    // total reserved tokens for beneficiaries\\n    uint256 public reserved;\\n\\n    // reserved tokens to beneficiary\\n    mapping(address => uint256) public reservedForBeneficiary;\\n\\n    // frozen amount for staking\\n    mapping(address => uint256) public frozenForStakeAmount;\\n\\n    // total released (transferred) tokens\\n    uint256 public released;\\n\\n    // released (transferred) tokens to beneficiary\\n    mapping(address => uint256) public releasedToBeneficiary;\\n\\n    // array of beneficiaries for getters\\n    address[] internal beneficiaries;\\n\\n    /**\\n     * @dev Creates a vesting contract that vests its balance of specific ERC20 token to the\\n     * beneficiaries, gradually in a linear fashion until start + duration. By then all\\n     * of the balance will have vested.\\n     * @param _token ERC20 token which is being vested\\n     * @param _cliffDuration duration in seconds of the cliff in which tokens will begin to vest\\n     * @param _cliffUnlockedBP basis points of initial unlock – after the start and before the end of the cliff period\\n     * @param _start the time (as Unix time) at which point vesting starts\\n     * @param _duration duration in seconds of the period in which the tokens will vest\\n     * @param _schedule type of the token vesting: CONTINUOUS, MONTHLY, QUARTERLY\\n     * @param _name SymbiosisTokenVesting name\\n     */\\n    constructor(\\n        IERC20 _token,\\n        uint256 _start,\\n        uint256 _cliffDuration,\\n        uint256 _cliffUnlockedBP,\\n        uint256 _duration,\\n        VestingSchedule _schedule,\\n        string memory _name\\n    ) {\\n        require(\\n            address(_token) != address(0),\\n            \\\"SymbiosisTokenVesting: token is the zero address\\\"\\n        );\\n        require(_duration > 0, \\\"SymbiosisTokenVesting: duration is 0\\\");\\n\\n        require(\\n            _cliffDuration <= _duration,\\n            \\\"SymbiosisTokenVesting: cliff is longer than duration\\\"\\n        );\\n\\n        require(\\n            _start + _duration > block.timestamp,\\n            \\\"SymbiosisTokenVesting: final time is before current time\\\"\\n        );\\n\\n        require(\\n            _cliffUnlockedBP <= MAX_BPS,\\n            \\\"SymbiosisTokenVesting: invalid cliff unlocked BP\\\"\\n        );\\n\\n        token = _token;\\n        duration = _duration;\\n        cliff = _start + _cliffDuration;\\n        start = _start;\\n        schedule = _schedule;\\n        name = _name;\\n\\n        cliffUnlockedBP = _cliffUnlockedBP;\\n    }\\n\\n    modifier onlyStaking() {\\n        require(\\n            msg.sender == stakingAddress,\\n            \\\"SymbiosisTokenVesting: caller is not the staking address\\\"\\n        );\\n        _;\\n    }\\n\\n    function setStakingAddress(address _stakingAddress) external onlyOwner {\\n        stakingAddress = _stakingAddress;\\n    }\\n\\n    /**\\n     * @notice Calculates the total amount of vested tokens.\\n     */\\n    function totalVested() public view returns (uint256) {\\n        uint256 currentBalance = token.balanceOf(address(this));\\n        return currentBalance + released;\\n    }\\n\\n    /**\\n     * @notice Calculates the amount that has already vested but hasn't been released yet.\\n     * @param _beneficiary Address of vested tokens beneficiary\\n     */\\n    function releasableAmount(address _beneficiary)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 releasable = _vestedAmount(_beneficiary) - releasedToBeneficiary[_beneficiary];\\n        uint256 frozen = frozenForStakeAmount[_beneficiary];\\n        return (releasable > frozen) ? (releasable - frozen) : 0;\\n    }\\n\\n    /**\\n     * @notice Get a beneficiary address with current index.\\n     */\\n    function getBeneficiary(uint256 index) external view returns (address) {\\n        return beneficiaries[index];\\n    }\\n\\n    /**\\n     * @notice Get an array of beneficiary addresses.\\n     */\\n    function getBeneficiaries() external view returns (address[] memory) {\\n        return beneficiaries;\\n    }\\n\\n    /**\\n     * @notice Adds beneficiaries to SymbiosisTokenVesting by owner.\\n     *\\n     * Requirements:\\n     * - can only be called by owner.\\n     *\\n     * @param _beneficiaries Addresses of beneficiaries\\n     * @param _amounts Amounts of tokens reserved for beneficiaries\\n     */\\n    function addBeneficiaries(\\n        address[] memory _beneficiaries,\\n        uint256[] memory _amounts\\n    ) external onlyOwner {\\n        uint256 len = _beneficiaries.length;\\n        require(len == _amounts.length, \\\"SymbiosisTokenVesting: Array lengths do not match\\\");\\n\\n        uint256 amountToBeneficiaries = 0;\\n        for (uint256 i = 0; i < len; i++) {\\n            amountToBeneficiaries = amountToBeneficiaries + _amounts[i];\\n\\n            // add new beneficiary to array\\n            if (reservedForBeneficiary[_beneficiaries[i]] == 0) {\\n                beneficiaries.push(_beneficiaries[i]);\\n            }\\n\\n            reservedForBeneficiary[_beneficiaries[i]] =\\n                reservedForBeneficiary[_beneficiaries[i]] +\\n                _amounts[i];\\n\\n            emit ReservedAdded(_beneficiaries[i], _amounts[i]);\\n        }\\n\\n        reserved = reserved + amountToBeneficiaries;\\n\\n        // check reserved condition\\n        require(\\n            reserved <= totalVested(),\\n            \\\"SymbiosisTokenVesting: reserved exceeds totalVested\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Withdraws ERC20 token funds by owner (except vested token).\\n     *\\n     * Requirements:\\n     * - can only be called by owner.\\n     *\\n     * @param _token Token address (except vested token)\\n     * @param _amount The amount of token to withdraw\\n     **/\\n    function withdrawFunds(IERC20 _token, uint256 _amount) external onlyOwner {\\n        require(\\n            _token != token,\\n            \\\"SymbiosisTokenVesting: vested token is not available for withdrawal\\\"\\n        );\\n        _token.safeTransfer(msg.sender, _amount);\\n        emit TokensWithdrawnByOwner(address(_token), _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws ERC20 vested token by owner.\\n     *\\n     * Requirements:\\n     * - can only be called by owner.\\n     *\\n     * @param _amount The amount of token to withdraw\\n     **/\\n    function emergencyWithdraw(uint256 _amount) external onlyOwner {\\n        require(\\n            block.timestamp < start,\\n            \\\"SymbiosisTokenVesting: vesting has already started\\\"\\n        );\\n        token.safeTransfer(msg.sender, _amount);\\n        emit TokensWithdrawnByOwner(address(token), _amount);\\n    }\\n\\n    /**\\n     * @notice Transfers vested tokens to beneficiary.\\n     * @param _beneficiary Address of vested tokens beneficiary\\n     */\\n    function release(address _beneficiary) external {\\n        _release(_beneficiary, _beneficiary);\\n    }\\n\\n    /**\\n     * @notice Transfers vested tokens of sender to specified address.\\n     * @param _transferTo Address to which tokens are transferred\\n     */\\n    function releaseToAddress(address _transferTo) external {\\n        _release(msg.sender, _transferTo);\\n    }\\n\\n    function allocateStake(address _beneficiary, uint256 _amount)\\n        external\\n        onlyStaking\\n        returns (bool)\\n    {\\n        require(\\n            reservedForBeneficiary[_beneficiary] - releasedToBeneficiary[_beneficiary] >= _amount,\\n            \\\"SymbiosisTokenVesting: allocation amount exceeds balance\\\"\\n        );\\n        frozenForStakeAmount[_beneficiary] += _amount;\\n\\n        return true;\\n    }\\n\\n    function unlockStake(address _beneficiary, uint256 _amount)\\n        external\\n        onlyStaking\\n        returns (bool)\\n    {\\n        require(\\n            _amount <= frozenForStakeAmount[_beneficiary],\\n            \\\"SymbiosisTokenVesting: amount exceeds frozen amount for this beneficiary\\\"\\n        );\\n        frozenForStakeAmount[_beneficiary] -= _amount;\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Calculates the amount that has already vested.\\n     * @param _beneficiary Address of vested tokens beneficiary\\n     */\\n    function _vestedAmount(address _beneficiary)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        uint256 curTimestamp = block.timestamp;\\n\\n        if (curTimestamp < start) {\\n            return 0;\\n        } else if (curTimestamp < cliff) {\\n            return reservedForBeneficiary[_beneficiary] * cliffUnlockedBP / MAX_BPS;\\n        } else if (curTimestamp >= start + duration) {\\n            return reservedForBeneficiary[_beneficiary];\\n        } else {\\n            return\\n                reservedForBeneficiary[_beneficiary] * cliffUnlockedBP / MAX_BPS +\\n                reservedForBeneficiary[_beneficiary] * (MAX_BPS - cliffUnlockedBP) * _vestedPeriod() / (duration - (cliff - start)) / MAX_BPS;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the duration of period that is already unlocked according to VestingSchedule type.\\n     */\\n    function _vestedPeriod() private view returns (uint256 period) {\\n        period = block.timestamp - cliff; // CONTINUOUS from cliff\\n\\n        if (schedule == VestingSchedule.MONTHLY) {\\n            period = period - (period % MONTHLY_TIME);\\n        } else if (schedule == VestingSchedule.QUARTERLY) {\\n            period = period - (period % QUARTERLY_TIME);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers vested tokens.\\n     * @param _beneficiary Address of vested tokens beneficiary\\n     * @param _transferTo Address to which tokens are transferred\\n     */\\n    function _release(address _beneficiary, address _transferTo) private {\\n        uint256 unreleased = releasableAmount(_beneficiary);\\n\\n        require(unreleased > 0, \\\"SymbiosisTokenVesting: no tokens are due\\\");\\n\\n        releasedToBeneficiary[_beneficiary] =\\n            releasedToBeneficiary[_beneficiary] +\\n            unreleased;\\n        released = released + unreleased;\\n\\n        token.safeTransfer(_transferTo, unreleased);\\n\\n        emit TokensReleased(_beneficiary, _transferTo, unreleased);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffUnlockedBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"enum SymbiosisTokenVesting.VestingSchedule\",\"name\":\"_schedule\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserved\",\"type\":\"uint256\"}],\"name\":\"ReservedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transferredTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawnByOwner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"addBeneficiaries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"allocateStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cliff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cliffUnlockedBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenForStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeneficiaries\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"releasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transferTo\",\"type\":\"address\"}],\"name\":\"releaseToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"releasedToBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reservedForBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schedule\",\"outputs\":[{\"internalType\":\"enum SymbiosisTokenVesting.VestingSchedule\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"}],\"name\":\"setStakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlockStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SymbiosisTokenVesting","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"000000000000000000000000d38bb40815d2b0c2d2c866e0c72c5728ffc76dd90000000000000000000000000000000000000000000000000000000061a6bb0000000000000000000000000000000000000000000000000000000000009e340000000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000004ca1300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000001653796d62696f73697320536565642056657374696e6700000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}