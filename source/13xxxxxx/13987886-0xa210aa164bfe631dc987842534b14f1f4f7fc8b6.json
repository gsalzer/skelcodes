{"status":"1","message":"OK","result":[{"SourceCode":"// File: TestContracts/ProxyTarget.sol\r\n\r\npragma solidity 0.8.7;\r\n\r\n/// @dev Proxy for NFT Factory\r\ncontract ProxyTarget {\r\n\r\n    // Storage for this proxy\r\n    bytes32 internal constant IMPLEMENTATION_SLOT = bytes32(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc);\r\n    bytes32 internal constant ADMIN_SLOT          = bytes32(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103);\r\n\r\n    function _getAddress(bytes32 key) internal view returns (address add) {\r\n        add = address(uint160(uint256(_getSlotValue(key))));\r\n    }\r\n\r\n    function _getSlotValue(bytes32 slot_) internal view returns (bytes32 value_) {\r\n        assembly {\r\n            value_ := sload(slot_)\r\n        }\r\n    }\r\n\r\n    function _setSlotValue(bytes32 slot_, bytes32 value_) internal {\r\n        assembly {\r\n            sstore(slot_, value_)\r\n        }\r\n    }\r\n\r\n}\r\n// File: base/IMetadata.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IMetadata{\r\n\r\n    function addMetadata(uint8 tokenType,uint8 level,uint tokenID) external;\r\n    function createRandomZombie(uint8 level) external returns(uint8[] memory traits);\r\n    function createRandomSurvivor(uint8 level) external returns(uint8[] memory traits);\r\n    function getTokenURI(uint tokenId) external view returns (string memory);\r\n    function changeNft(uint tokenID, uint8 nftType, uint8 level, bool canClaim, uint stakedTime, uint lastClaimTime) external;\r\n    function getToken(uint256 _tokenId) external view returns(uint8, uint8, bool, uint,uint);\r\n}\r\n// File: base/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n// File: base/IVRF.sol\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IVRF{\r\n\r\n    function initiateRandomness(uint _tokenId,uint _timestamp) external view returns(uint);\r\n    function stealRandomness() external view returns(uint);\r\n    function getCurrentIndex() external view returns(uint);\r\n}\r\n// File: base/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\n\r\ncontract Context {\r\n\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor ()  {}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable (msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n// File: base/Ownable.sol\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n    constructor ()  {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n   */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n   */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: base/IERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n// File: base/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n// File: base/INFTFactory.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface INFTFactory is IERC721{\r\n\r\n    function restrictedChangeNft(uint tokenID, uint8 nftType, uint8 level, bool canClaim, uint stakedTime, uint lastClaimTime) external;\r\n    function tokenOwnerCall(uint tokenId) external view  returns (address);\r\n    function burnNFT(uint tokenId) external ;\r\n    function tokenOwnerSetter(uint tokenId, address _owner) external;\r\n    function setTimeStamp(uint tokenId) external;\r\n    function actionTimestamp(uint tokenId) external returns(uint);\r\n\r\n}\r\n// File: base/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function burn(uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n// File: base/ISUPFactory.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ISUP is IERC20{\r\n    function mintFromEngine(address _receiver, uint _amount) external;\r\n}\r\n\r\n\r\n// File: TestContracts/testGameEngine.sol\r\n\r\n\r\n/**\r\n * Author : Lil Ye, Ace, Anyx\r\n */\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract testGameEngine is Ownable, ReentrancyGuard, ProxyTarget {\r\n\r\n    mapping (uint => uint) public firstStakeLockPeriod;\r\n    mapping (uint => bool) public stakeConfirmation;\r\n    mapping (uint => bool) public isStaked;\r\n    mapping (uint => uint) public stakeTime;\r\n    mapping (uint => uint) public lastClaim;\r\n    mapping (uint8 => mapping(uint8 =>uint[])) public pool; //0 zombie 1 survivor (1-5) levels\r\n    mapping (uint => uint) public levelOfToken;\r\n    mapping (uint => uint) public tokenToArrayPosition;\r\n    mapping (uint => uint) public tokenToRandomHourInStake;\r\n    mapping (uint => bool) public wasUnstakedRecently;\r\n\r\n    ISUP token;\r\n    INFTFactory nftToken;\r\n    IVRF randomNumberGenerated;\r\n    IMetadata metadataHandler;\r\n\r\n    bool public frenzyStarted;\r\n\r\n    function initialize(address _randomEngineAddress, address _nftAddress, address _tokenAddress,address _metadata) external {\r\n        require(msg.sender == _getAddress(ADMIN_SLOT), \"not admin\");\r\n\r\n        _owner = msg.sender;\r\n\r\n        token = ISUP(_tokenAddress);\r\n        nftToken = INFTFactory(_nftAddress);\r\n        randomNumberGenerated = IVRF(_randomEngineAddress);\r\n        metadataHandler = IMetadata(_metadata);\r\n        for(uint8 i=0;i<2;i++){\r\n            for(uint8 j=1;j<6;j++){\r\n                pool[i][j].push(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) public pure returns (bytes4) {\r\n        return 0x150b7a02;\r\n    }\r\n\r\n    function alertStake (uint tokenId) external {\r\n        require (isStaked[tokenId] == false);\r\n        require (nftToken.ownerOf(tokenId)==address(this));\r\n        uint randomNo = 2 + randomNumberGenerated.initiateRandomness(tokenId,nftToken.actionTimestamp(tokenId))%5;\r\n        nftToken.setTimeStamp(tokenId);\r\n        firstStakeLockPeriod[tokenId] = block.timestamp + randomNo*1 hours; //convert randomNo from hours to sec\r\n        isStaked[tokenId] = true;\r\n        stakeTime[tokenId] = block.timestamp;\r\n        tokenToRandomHourInStake[tokenId]= randomNo*1 hours; //conversion required\r\n        levelOfToken[tokenId] = 1;\r\n        determineAndPush(tokenId);\r\n    }\r\n\r\n    function stake (uint[] memory tokenId) external {\r\n        for (uint i;i<tokenId.length;i++) {\r\n        require (isStaked[tokenId[i]] == false);\r\n        if ( stakeConfirmation [tokenId[i]] == true ){\r\n            nftToken.safeTransferFrom(msg.sender, address(this), tokenId[i]);\r\n            stakeTime[tokenId[i]] = block.timestamp;\r\n            isStaked[tokenId[i]] = true;\r\n            nftToken.setTimeStamp(tokenId[i]);\r\n            determineAndPush(tokenId[i]);\r\n        } else   {\r\n            require(firstStakeLockPeriod[tokenId[i]]==0,\"AlreadyStaked\");\r\n            uint randomNo =  2 + randomNumberGenerated.initiateRandomness(tokenId[i],nftToken.actionTimestamp(tokenId[i])) % 5;\r\n            nftToken.setTimeStamp(tokenId[i]);\r\n            firstStakeLockPeriod[tokenId[i]] = block.timestamp + randomNo*1 hours; //convert randomNo from hours to sec\r\n            nftToken.safeTransferFrom(msg.sender, address (this), tokenId[i]);\r\n            stakeTime[tokenId[i]] = block.timestamp;\r\n            isStaked[tokenId[i]] = true;\r\n            tokenToRandomHourInStake[tokenId[i]]= randomNo * 1 hours; //conversion required\r\n            levelOfToken[tokenId[i]] = 1;\r\n            determineAndPush(tokenId[i]);\r\n          }\r\n        }\r\n    }\r\n\r\n    function moveToLast(uint _tokenId) internal {\r\n        (uint8 tokenType,,,,) = metadataHandler.getToken(_tokenId);\r\n        uint8 level = uint8(levelOfToken[_tokenId]);\r\n        uint position = tokenToArrayPosition[_tokenId];\r\n        uint[] storage currentPool = pool[tokenType][level];\r\n        uint length = currentPool.length;\r\n        uint lastToken = currentPool[length-1];\r\n        currentPool[position] = lastToken;\r\n        tokenToArrayPosition[lastToken] = position;\r\n        currentPool[length-1] = _tokenId;\r\n        currentPool.pop();\r\n    }\r\n\r\n    function determineAndPush(uint tokenId) internal {\r\n        uint8 tokenLevel = uint8(levelOfToken[tokenId]);\r\n        (uint8 tokenType,,,,) = metadataHandler.getToken(tokenId);\r\n        pool[tokenType][tokenLevel].push(tokenId);\r\n        tokenToArrayPosition[tokenId] = pool[tokenType][tokenLevel].length-1;\r\n    }\r\n\r\n    function unstakeBurnCalculator(uint8 tokenLevel) internal returns(uint){\r\n        if(isFrenzy()){\r\n            return 50-5*tokenLevel;\r\n        }\r\n        else if(isAggression()){\r\n            uint val = whichAggression();\r\n            return (25+5*val)-(5*tokenLevel);\r\n        }\r\n        else{\r\n            return 25-5*tokenLevel;\r\n        }\r\n    }\r\n\r\n    function isFrenzy() public returns (bool){\r\n        uint totalPoolStrength;\r\n        for(uint8 i=0;i<2;i++){\r\n            for(uint8 j=1;j<6;j++){\r\n                totalPoolStrength += pool[i][j].length;\r\n            }\r\n        }\r\n        if(totalPoolStrength<10000 && frenzyStarted == true){\r\n            frenzyStarted = false;\r\n            return false;\r\n        }\r\n        else if(totalPoolStrength >= 20000){\r\n            frenzyStarted = true;\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function isAggression() view public returns(bool){\r\n        uint totalPoolStrength;\r\n        for(uint8 i=0;i<2;i++){\r\n            for(uint8 j=1;j<6;j++){\r\n                totalPoolStrength += pool[i][j].length;\r\n            }\r\n        }\r\n        if(totalPoolStrength >= 12000) return true;\r\n        else return false;\r\n    }\r\n\r\n    function whichAggression() view internal returns(uint){\r\n        uint totalPoolStrength;\r\n        for(uint8 i=0;i<2;i++){\r\n            for(uint8 j=1;j<6;j++){\r\n                totalPoolStrength += pool[i][j].length;\r\n            }\r\n        }\r\n        if(totalPoolStrength>=12000 && totalPoolStrength<14000) return 1;\r\n        else if(totalPoolStrength<16000) return 2;\r\n        else if(totalPoolStrength<18000) return 3;\r\n        else if(totalPoolStrength<20000) return 4;\r\n        else return 0;\r\n    }\r\n\r\n    function steal(uint8 tokenType,uint nonce) internal view returns (uint) {\r\n        uint randomNumber = randomNumberGenerated.stealRandomness();\r\n        randomNumber = uint(keccak256(abi.encodePacked(randomNumber,nonce)));\r\n        uint8 level = whichLevelToChoose(tokenType, randomNumber);\r\n        uint tokenToGet = randomNumber % pool[tokenType][level].length;\r\n        return pool[tokenType][level][tokenToGet];\r\n    }\r\n\r\n    function whichLevelToChoose(uint8 tokenType, uint randomNumber) internal view returns(uint8) {\r\n        uint16[5] memory x = [1000,875,750,625,500];\r\n        uint denom;\r\n        for(uint8 level=1;level<6;level++){\r\n            denom += pool[tokenType][level].length*x[level-1];\r\n        }\r\n        uint[5] memory stealing;\r\n        for(uint8 level=1;level<6;level++){\r\n            stealing[level-1] = (pool[tokenType][level].length*x[level-1]*1000000)/denom;\r\n        }\r\n        uint8 levelToReturn;\r\n        randomNumber = randomNumber %1000000;\r\n        if (randomNumber < stealing[0]) {\r\n            levelToReturn = 1;\r\n        } else if (randomNumber < stealing[0]+stealing[1]) {\r\n            levelToReturn = 2;\r\n        } else if (randomNumber < stealing[0]+stealing[1]+stealing[2]) {\r\n            levelToReturn = 3;\r\n        } else if (randomNumber < stealing[0]+stealing[1]+stealing[2]+stealing[3]) {\r\n            levelToReturn = 4;\r\n        } else {\r\n            levelToReturn = 5;\r\n        }\r\n        return levelToReturn;\r\n    }\r\n\r\n    function howManyTokensCanSteal(uint8 tokenType) view internal returns (uint) {\r\n        uint[2] memory totalStaked;\r\n\r\n        for(uint8 i =0;i<2;i++){\r\n            totalStaked[i] = totalStakedOfType(i);\r\n        }\r\n        for(uint i = 0;i<5;i++) {\r\n            if((totalStaked[tokenType]*100)/(totalStaked[0]+totalStaked[1])<=10+10*i){\r\n                if(totalStaked[1-tokenType] >= 5-i){\r\n                    return 5-i;\r\n                }\r\n                return totalStaked[1-tokenType];\r\n            }\r\n        }\r\n        if(totalStaked[1-tokenType] > 0) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function calculateSUP (uint tokenId) internal returns (uint) {\r\n        uint calculatedDuration;\r\n        uint stakedTime = stakeTime[tokenId];\r\n        uint lastClaimTime = lastClaim[tokenId];\r\n        if (lastClaimTime == 0) {\r\n            calculatedDuration = (block.timestamp - (stakedTime+tokenToRandomHourInStake[tokenId]))/1 hours;//todo /60*60\r\n            if (calculatedDuration >= tokenToRandomHourInStake[tokenId]/1 hours) {\r\n            return 250 ether;\r\n            } else {\r\n                return 0;\r\n            }\r\n        } else {\r\n            if (wasUnstakedRecently[tokenId] == true) {\r\n                calculatedDuration = (block.timestamp - stakedTime);\r\n                wasUnstakedRecently[tokenId] = false;\r\n            }\r\n            else {\r\n            calculatedDuration = (block.timestamp - lastClaimTime)/1 hours;//(60*60);\r\n            }\r\n            if (calculatedDuration >= 12) {\r\n            calculatedDuration = calculatedDuration / 12; //todo 12\r\n            uint toReturn = calculateFinalAmountInDays (calculatedDuration);\r\n            return toReturn;\r\n            } else {\r\n                return 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function calculateFinalAmountInDays (uint _calculatedHour)internal pure returns (uint) {\r\n        return _calculatedHour * 250 ether;\r\n    }\r\n\r\n    function executeClaims (uint randomNumber, uint tokenId, uint firstHold, uint secondHold) internal returns (bool) {\r\n        if (randomNumber >=0 && randomNumber < firstHold) {\r\n            bool query = onSuccess(tokenId);\r\n            return query;\r\n        }\r\n        else if (randomNumber >= firstHold && randomNumber < secondHold) {\r\n            bool query = onCriticalSuccess(tokenId);\r\n            return query;\r\n        }\r\n        else {\r\n            bool query = onCriticalFail(tokenId);\r\n            return query;\r\n        }\r\n    }\r\n\r\n    function onSuccess (uint tokenId) internal returns (bool) {\r\n        (uint8 nftType,,,,) = metadataHandler.getToken(tokenId);\r\n        require (lastClaim[tokenId] + 12 hours <= block.timestamp, \"Claiming before 12 hours\");\r\n        uint calculatedValue = calculateSUP(tokenId);\r\n        token.mintFromEngine(msg.sender, calculatedValue);\r\n        lastClaim[tokenId] = block.timestamp;\r\n        uint randomNumber = randomNumberGenerated.initiateRandomness(tokenId,nftToken.actionTimestamp(tokenId));\r\n        randomNumber = uint(keccak256(abi.encodePacked(randomNumber,\"1\")))%100;\r\n        if(randomNumber<32 && levelOfToken[tokenId] < 5){\r\n            moveToLast(tokenId);\r\n            levelOfToken[tokenId]++;\r\n            determineAndPush(tokenId);\r\n            nftToken.restrictedChangeNft(tokenId, nftType, uint8(levelOfToken[tokenId]), false, stakeTime[tokenId],lastClaim[tokenId]);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function onCriticalSuccess (uint tokenId) internal returns (bool) {\r\n        (uint8 nftType,,,,) = metadataHandler.getToken(tokenId);\r\n        require (lastClaim[tokenId] + 12 hours <= block.timestamp, \"Claiming before 12 hours\");\r\n        token.mintFromEngine(msg.sender, calculateSUP(tokenId));\r\n        lastClaim[tokenId] = block.timestamp;\r\n        if (uint(keccak256(abi.encodePacked(randomNumberGenerated.initiateRandomness(tokenId,nftToken.actionTimestamp(tokenId)),\"1\")))%100 < 40 \r\n        && levelOfToken[tokenId]<5) {\r\n            moveToLast (tokenId);\r\n            levelOfToken[tokenId]++;\r\n            determineAndPush(tokenId);\r\n            nftToken.restrictedChangeNft(tokenId, nftType, uint8(levelOfToken[tokenId]), false, stakeTime[tokenId],lastClaim[tokenId]);\r\n        }\r\n        uint value = howManyTokensCanSteal(nftType);\r\n\r\n        uint stolenTokenId;\r\n\r\n        for (uint i=0;i < value;i++) {\r\n            stolenTokenId = steal(1-nftType,i+1);\r\n            moveToLast(stolenTokenId);\r\n            nftToken.restrictedChangeNft(stolenTokenId, nftType, uint8(levelOfToken[stolenTokenId]), false, stakeTime[tokenId],lastClaim[tokenId]);//s->1\r\n            pool[nftType][uint8(levelOfToken[tokenId])].push(stolenTokenId);\r\n            nftToken.tokenOwnerSetter(stolenTokenId, msg.sender);\r\n\r\n        }\r\n        return false;\r\n        }\r\n\r\n    function onCriticalFail(uint tokenId) internal returns (bool) {\r\n            nftToken.burnNFT(tokenId);\r\n            isStaked[tokenId] = false;\r\n            moveToLast(tokenId);\r\n            return true;\r\n     }\r\n\r\n\r\n//VITAL INTERNAL FUNCITONS\r\n    function claimStake ( uint tokenId ) internal returns (bool){\r\n        uint randomNumber = randomNumberGenerated.initiateRandomness(tokenId,nftToken.actionTimestamp(tokenId))%100;\r\n        (,uint8 level,,,) =\r\n        metadataHandler.getToken(tokenId);\r\n    \r\n        if (stakeConfirmation[tokenId] == false) {\r\n            require (block.timestamp >= firstStakeLockPeriod[tokenId],\"lock not over\");\r\n            stakeConfirmation[tokenId] = true;\r\n            if(isFrenzy()) {\r\n                bool query =  executeClaims(randomNumber, tokenId, 55, 63+2*(level));\r\n                return query;\r\n            }\r\n            else if(isAggression()){\r\n                uint aggKicker = whichAggression();\r\n                bool query = executeClaims(randomNumber, tokenId, 80-3*aggKicker, 85+2*(level));\r\n                return query;\r\n            }\r\n            else {\r\n                bool query =  executeClaims(randomNumber, tokenId, 80, 88+2*(level));\r\n                return query;\r\n            }\r\n        }\r\n        else {\r\n            if(isFrenzy()){\r\n                bool query = executeClaims(randomNumber, tokenId, 55, 63+2*(level));\r\n                return query;\r\n            }\r\n            else if(isAggression()){\r\n                uint aggKicker = whichAggression();\r\n                bool query = executeClaims(randomNumber, tokenId, 80-3*aggKicker, 85+2*(level));\r\n                return query;\r\n            }\r\n            else{\r\n                bool query = executeClaims(randomNumber, tokenId, 80, 88+2*(level));\r\n                return query;\r\n            }\r\n        }\r\n    }\r\n\r\n    function unstakeNFT ( uint tokenId ) internal {\r\n        uint randomNumber = randomNumberGenerated.initiateRandomness(tokenId,nftToken.actionTimestamp(tokenId));\r\n        if (stakeConfirmation[tokenId] == true) {\r\n            uint level = levelOfToken[tokenId];\r\n            uint burnPercent = unstakeBurnCalculator(uint8(level));\r\n            if(randomNumber%100 <= burnPercent){\r\n                nftToken.burnNFT(tokenId);\r\n            }\r\n            else {\r\n                nftToken.safeTransferFrom(address(this), msg.sender, tokenId);\r\n                wasUnstakedRecently[tokenId] = true;\r\n            }\r\n            moveToLast(tokenId);\r\n        }\r\n        else {\r\n            uint burnPercent = unstakeBurnCalculator(1);\r\n            if(randomNumber%100 <= burnPercent){\r\n                nftToken.burnNFT(tokenId);\r\n                \r\n            }\r\n            else{\r\n                nftToken.safeTransferFrom(address(this), msg.sender, tokenId);\r\n                wasUnstakedRecently[tokenId] = true;\r\n            }\r\n            moveToLast(tokenId);\r\n        }\r\n    }\r\n\r\n    function claimAndUnstake (bool claim,uint[] memory tokenAmount) external nonReentrant{\r\n\r\n        for (uint i=0;i<tokenAmount.length;i++) {\r\n            require(nftToken.tokenOwnerCall(tokenAmount[i]) == msg.sender, \"Caller not the owner\");\r\n            require(nftToken.ownerOf(tokenAmount[i]) == address(this),\"Contract not the owner\");\r\n            require(isStaked[tokenAmount[i]] = true, \"Not Staked\");\r\n            require (stakeTime[tokenAmount[i]]+ tokenToRandomHourInStake[tokenAmount[i]]<= block.timestamp,\"Be Patient\");\r\n            if (claim == true) {\r\n                claimStake(tokenAmount[i]);\r\n            }\r\n            else {\r\n                bool isBurnt = claimStake(tokenAmount[i]);\r\n                if (isBurnt == false)\r\n                {\r\n                    unstakeNFT(tokenAmount[i]);\r\n                    isStaked[tokenAmount[i]] = false;\r\n                }\r\n\r\n            }\r\n            nftToken.setTimeStamp(tokenAmount[i]);\r\n        }\r\n    }\r\n\r\n    function totalStakedOfType(uint8 tokenType) public view returns(uint){       \r\n        uint totalStaked; \r\n        for(uint8 j=1;j<6;j++){\r\n                totalStaked += pool[tokenType][j].length;\r\n        }\r\n        return totalStaked;\r\n        \r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"alertStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"claim\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmount\",\"type\":\"uint256[]\"}],\"name\":\"claimAndUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"firstStakeLockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frenzyStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_randomEngineAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_metadata\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAggression\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFrenzy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeConfirmation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenToArrayPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenToRandomHourInStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenType\",\"type\":\"uint8\"}],\"name\":\"totalStakedOfType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wasUnstakedRecently\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"testGameEngine","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e26c6858bed54c6b334c6a120d1638e03ef04950f3df69d31346b3b70ef73ad7"}]}