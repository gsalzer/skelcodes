{"status":"1","message":"OK","result":[{"SourceCode":"{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.7.4;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.7.4;\\n\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.4;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function isOwner(address userAddress) public view returns (bool) {\\n        return _owner == userAddress;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"presale-eth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n *\\r\\n *\\r\\n *    tudaBirds NFT9k Presale Contract\\r\\n *    auto-generate NFT and transfer to buyers   \\r\\n *\\r\\n *\\r\\n **/\\r\\n\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\nabstract contract DateTimeAPI {\\r\\n    /*\\r\\n     *  Abstract contract for interfacing with the DateTime contract.\\r\\n     *\\r\\n     */\\r\\n    function isLeapYear(uint16 year) public pure virtual returns (bool);\\r\\n\\r\\n    function toTimestamp(\\r\\n        uint16 year,\\r\\n        uint8 month,\\r\\n        uint8 day\\r\\n    ) public pure virtual returns (uint256 timestamp);\\r\\n\\r\\n    function toTimestamp(\\r\\n        uint16 year,\\r\\n        uint8 month,\\r\\n        uint8 day,\\r\\n        uint8 hour,\\r\\n        uint8 minute,\\r\\n        uint8 second\\r\\n    ) public pure virtual returns (uint256 timestamp);\\r\\n}\\r\\n\\r\\ncontract NFBPresale is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 public presaleStartTime = 1633975200;\\r\\n    uint256 public presaleEndTime = 1634061600;\\r\\n\\r\\n    uint256 public presaleCap = 900; //10% of total supply\\r\\n    uint256 public mintPrice = 81e15; // 0.09 ether, 10% discount\\r\\n    uint256 public presaleMinLimitPrice = 81e16; //mintPrice * 10\\r\\n\\r\\n    uint256 public mintLimit = 10; //10 NFT, bonus 1\\r\\n    \\r\\n\\r\\n    bool public endedPresale = false;\\r\\n\\r\\n    struct User {\\r\\n        uint256 ethAmount;\\r\\n        uint256 nftAmount;\\r\\n        address polygonWalletAddress;\\r\\n    }\\r\\n\\r\\n    mapping(address =\\u003e User) users;\\r\\n    mapping(uint256 =\\u003e address) userIDs;\\r\\n    uint256 public userCount = 0;\\r\\n    uint256 public totalPurchased = 0;\\r\\n    uint256 public soldNFTAmount = 0;\\r\\n    \\r\\n\\r\\n    address serviceWallet;\\r\\n\\r\\n    constructor() {\\r\\n        serviceWallet = msg.sender;\\r\\n    }\\r\\n\\r\\n    //auto claiming, system will mint NFT and send them to users.\\r\\n    function reserveNFTs(address polygonWalletAddress) external payable {\\r\\n        require(checkStartedPresale(), \\\"Not started yet\\\");\\r\\n        require(checkEndedPresale() == false, \\\"Ended Presale\\\");\\r\\n\\r\\n        uint256 ethAmount = msg.value;\\r\\n        require(ethAmount \\u003e= presaleMinLimitPrice, \\\"Less than minimun limit\\\");\\r\\n\\r\\n        soldNFTAmount = soldNFTAmount.add(mintLimit);\\r\\n        require(\\r\\n            soldNFTAmount \\u003c= presaleCap,\\r\\n            \\\"Sold out\\\"\\r\\n        );\\r\\n\\r\\n        if (userExists(msg.sender)) {\\r\\n            User storage user = users[msg.sender];\\r\\n            user.ethAmount = user.ethAmount.add(ethAmount);\\r\\n            user.nftAmount = user.nftAmount.add(mintLimit + 1);\\r\\n            user.polygonWalletAddress = polygonWalletAddress;\\r\\n        } else {\\r\\n            users[msg.sender] = User({\\r\\n                ethAmount: ethAmount,\\r\\n                nftAmount: mintLimit + 1,\\r\\n                polygonWalletAddress: polygonWalletAddress\\r\\n            });\\r\\n            userIDs[userCount] = msg.sender;\\r\\n            userCount++;\\r\\n        }\\r\\n\\r\\n        totalPurchased = totalPurchased.add(ethAmount);\\r\\n    }\\r\\n\\r\\n    function userExists(address userAddress) public view returns (bool) {\\r\\n        return (users[userAddress].ethAmount != 0);\\r\\n    }\\r\\n\\r\\n    function userInfo(uint256 index)\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256 ethAmount,\\r\\n            uint256 nftAmount,\\r\\n            address polygonWalletAddress\\r\\n        )\\r\\n    {\\r\\n        require(index \\u003c userCount, \\\"Invalid index\\\");\\r\\n\\r\\n        return userInfoFromAddress(userIDs[index]);\\r\\n    }\\r\\n\\r\\n    function userInfoFromAddress(address userAddress)\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256 ethAmount,\\r\\n            uint256 nftAmount,\\r\\n            address polygonWalletAddress\\r\\n        )\\r\\n    {\\r\\n        require(userExists(userAddress), \\\"Not exists\\\");\\r\\n\\r\\n        User memory user = users[userAddress];\\r\\n\\r\\n        ethAmount = user.ethAmount;\\r\\n        nftAmount = user.nftAmount;\\r\\n        polygonWalletAddress = user.polygonWalletAddress;\\r\\n    }\\r\\n\\r\\n    function checkEndedPresale() public view returns(bool) {\\r\\n      return endedPresale || block.timestamp \\u003e presaleEndTime;\\r\\n    }\\r\\n\\r\\n    function checkStartedPresale() public view returns(bool) {\\r\\n      return presaleStartTime \\u003c= block.timestamp;\\r\\n    }\\r\\n\\r\\n    function setTime(\\r\\n        uint16 year,\\r\\n        uint8 month,\\r\\n        uint8 day,\\r\\n        uint8 hour,\\r\\n        uint8 minute,\\r\\n        uint8 second,\\r\\n        uint8 flag\\r\\n    ) public onlyOwner {\\r\\n        uint256 timestamp = toTimestamp(year, month, day, hour, minute, second);\\r\\n\\r\\n         if (flag == 0) presaleStartTime = timestamp;\\r\\n        else if (flag == 1) presaleEndTime = timestamp;\\r\\n    }\\r\\n\\r\\n    function setPresaleCap(uint256 cap) public onlyOwner {\\r\\n        presaleCap = cap;\\r\\n    }\\r\\n\\r\\n    function setMintPrice(uint256 price) public onlyOwner {\\r\\n        mintPrice = price;\\r\\n        presaleMinLimitPrice = price.mul(10);\\r\\n    }\\r\\n\\r\\n    function setEndPresale(bool ended) public onlyOwner {\\r\\n        endedPresale = ended;\\r\\n    }\\r\\n\\r\\n    function setServiceWallet(address _serviceWallet) public onlyOwner {\\r\\n        serviceWallet = _serviceWallet;\\r\\n    }\\r\\n\\r\\n    function withdraw() public payable onlyOwner {\\r\\n        address payable wallet = address(uint160(serviceWallet));\\r\\n        uint256 amount = address(this).balance;\\r\\n        wallet.transfer(amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Utils\\r\\n     */\\r\\n    //////////////////////////////////////////////////////////////////\\r\\n\\r\\n    function isLeapYear(uint16 year) private pure returns (bool) {\\r\\n        if (year % 4 != 0) {\\r\\n            return false;\\r\\n        }\\r\\n        if (year % 100 != 0) {\\r\\n            return true;\\r\\n        }\\r\\n        if (year % 400 != 0) {\\r\\n            return false;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function toTimestamp(\\r\\n        uint16 year,\\r\\n        uint8 month,\\r\\n        uint8 day\\r\\n    ) private pure returns (uint256 timestamp) {\\r\\n        return toTimestamp(year, month, day, 0, 0, 0);\\r\\n    }\\r\\n\\r\\n    function toTimestamp(\\r\\n        uint16 year,\\r\\n        uint8 month,\\r\\n        uint8 day,\\r\\n        uint8 hour,\\r\\n        uint8 minute,\\r\\n        uint8 second\\r\\n    ) private pure returns (uint256 timestamp) {\\r\\n        uint32 DAY_IN_SECONDS = 86400;\\r\\n        uint32 YEAR_IN_SECONDS = 31536000;\\r\\n        uint32 LEAP_YEAR_IN_SECONDS = 31622400;\\r\\n\\r\\n        uint32 HOUR_IN_SECONDS = 3600;\\r\\n        uint32 MINUTE_IN_SECONDS = 60;\\r\\n\\r\\n        uint16 ORIGIN_YEAR = 1970;\\r\\n\\r\\n        uint16 i;\\r\\n\\r\\n        // Year\\r\\n        for (i = ORIGIN_YEAR; i \\u003c year; i++) {\\r\\n            if (isLeapYear(i)) {\\r\\n                timestamp += LEAP_YEAR_IN_SECONDS;\\r\\n            } else {\\r\\n                timestamp += YEAR_IN_SECONDS;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Month\\r\\n        uint8[12] memory monthDayCounts;\\r\\n        monthDayCounts[0] = 31;\\r\\n        if (isLeapYear(year)) {\\r\\n            monthDayCounts[1] = 29;\\r\\n        } else {\\r\\n            monthDayCounts[1] = 28;\\r\\n        }\\r\\n        monthDayCounts[2] = 31;\\r\\n        monthDayCounts[3] = 30;\\r\\n        monthDayCounts[4] = 31;\\r\\n        monthDayCounts[5] = 30;\\r\\n        monthDayCounts[6] = 31;\\r\\n        monthDayCounts[7] = 31;\\r\\n        monthDayCounts[8] = 30;\\r\\n        monthDayCounts[9] = 31;\\r\\n        monthDayCounts[10] = 30;\\r\\n        monthDayCounts[11] = 31;\\r\\n\\r\\n        for (i = 1; i \\u003c month; i++) {\\r\\n            timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\\r\\n        }\\r\\n\\r\\n        // Day\\r\\n        timestamp += DAY_IN_SECONDS * (day - 1);\\r\\n\\r\\n        // Hour\\r\\n        timestamp += HOUR_IN_SECONDS * (hour);\\r\\n\\r\\n        // Minute\\r\\n        timestamp += MINUTE_IN_SECONDS * (minute);\\r\\n\\r\\n        // Second\\r\\n        timestamp += second;\\r\\n\\r\\n        return timestamp;\\r\\n    }\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.7.4;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"checkEndedPresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkStartedPresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endedPresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleMinLimitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"polygonWalletAddress\",\"type\":\"address\"}],\"name\":\"reserveNFTs\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"}],\"name\":\"setEndPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"setPresaleCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_serviceWallet\",\"type\":\"address\"}],\"name\":\"setServiceWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"month\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"day\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"hour\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"minute\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"second\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"flag\",\"type\":\"uint8\"}],\"name\":\"setTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soldNFTAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPurchased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"polygonWalletAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userInfoFromAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"polygonWalletAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"NFBPresale","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://239ba9e3fc94247922ad5be1c0196736b9d6643d054041917a5b792400af75b5"}]}