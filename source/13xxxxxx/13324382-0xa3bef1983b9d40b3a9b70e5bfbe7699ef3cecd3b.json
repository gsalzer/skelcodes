{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable {\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n        __AccessControlEnumerable_init_unchained();\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal initializer {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping (bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                StringsUpgradeable.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                StringsUpgradeable.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/Kernel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../interfaces/IKernel.sol\\\";\\nimport \\\"../interfaces/IIntegrationMap.sol\\\";\\nimport \\\"../interfaces/IUserPositions.sol\\\";\\nimport \\\"../interfaces/IYieldManager.sol\\\";\\nimport \\\"../interfaces/IWeth9.sol\\\";\\nimport \\\"../interfaces/IUniswapTrader.sol\\\";\\nimport \\\"../interfaces/ISushiSwapTrader.sol\\\";\\nimport \\\"../interfaces/IStrategyMap.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\n\\n/// @title Kernel\\n/// @notice Allows users to deposit/withdraw erc20 tokens\\n/// @notice Allows a system admin to control which tokens are depositable\\ncontract Kernel is\\n  Initializable,\\n  AccessControlEnumerableUpgradeable,\\n  ModuleMapConsumer,\\n  IKernel\\n{\\n  using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\\n\\n  bytes32 public constant OWNER_ROLE = keccak256(\\\"owner_role\\\");\\n  bytes32 public constant MANAGER_ROLE = keccak256(\\\"manager_role\\\");\\n\\n  uint256 private lastDeployTimestamp;\\n  uint256 private lastHarvestYieldTimestamp;\\n  uint256 private lastProcessYieldTimestamp;\\n  uint256 private lastDistributeEthTimestamp;\\n  uint256 private lastLastDistributeEthTimestamp;\\n  uint256 private lastBiosBuyBackTimestamp;\\n  uint256 private initializationTimestamp;\\n\\n  event Deposit(\\n    address indexed user,\\n    address[] tokens,\\n    uint256[] tokenAmounts,\\n    uint256 ethAmount\\n  );\\n  event Withdraw(\\n    address indexed user,\\n    address[] tokens,\\n    uint256[] tokenAmounts,\\n    uint256 ethAmount\\n  );\\n  event ClaimEthRewards(address indexed user, uint256 ethRewards);\\n  event ClaimBiosRewards(address indexed user, uint256 biosRewards);\\n  event WithdrawAllAndClaim(\\n    address indexed user,\\n    address[] tokens,\\n    bool withdrawWethAsEth,\\n    uint256[] tokenAmounts,\\n    uint256 ethWithdrawn,\\n    uint256 ethRewards,\\n    uint256 biosRewards\\n  );\\n  event TokenAdded(\\n    address indexed token,\\n    bool acceptingDeposits,\\n    bool acceptingWithdrawals,\\n    uint256 biosRewardWeight,\\n    uint256 reserveRatioNumerator\\n  );\\n  event TokenDepositsEnabled(address indexed token);\\n  event TokenDepositsDisabled(address indexed token);\\n  event TokenWithdrawalsEnabled(address indexed token);\\n  event TokenWithdrawalsDisabled(address indexed token);\\n  event TokenRewardWeightUpdated(\\n    address indexed token,\\n    uint256 biosRewardWeight\\n  );\\n  event TokenReserveRatioNumeratorUpdated(\\n    address indexed token,\\n    uint256 reserveRatioNumerator,\\n    bool rebalance\\n  );\\n  event TokenIntegrationWeightUpdated(\\n    address indexed token,\\n    address indexed integration,\\n    uint256 weight,\\n    bool rebalance\\n  );\\n  event GasAccountUpdated(address gasAccount);\\n  event TreasuryAccountUpdated(address treasuryAccount);\\n  event IntegrationAdded(address indexed contractAddress, string name);\\n  event SetBiosRewardsDuration(uint32 biosRewardsDuration);\\n  event SeedBiosRewards(uint256 biosAmount);\\n  event Deploy();\\n  event HarvestYield();\\n  event ProcessYield();\\n  event DistributeEth();\\n  event BiosBuyBack();\\n  event EthDistributionWeightsUpdated(\\n    uint32 biosBuyBackEthWeight,\\n    uint32 treasuryEthWeight,\\n    uint32 protocolFeeEthWeight,\\n    uint32 rewardsEthWeight\\n  );\\n  event GasAccountTargetEthBalanceUpdated(uint256 gasAccountTargetEthBalance);\\n\\n  modifier onlyGasAccount() {\\n    require(\\n      msg.sender ==\\n        IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager))\\n          .getGasAccount(),\\n      \\\"Caller is not gas account\\\"\\n    );\\n    _;\\n  }\\n\\n  receive() external payable {}\\n\\n  /// @notice Initializes contract - used as a replacement for a constructor\\n  /// @param admin_ default administrator, a cold storage address\\n  /// @param owner_ single owner account, used to manage the managers\\n  /// @param moduleMap_ Module Map address\\n  function initialize(\\n    address admin_,\\n    address owner_,\\n    address moduleMap_\\n  ) external initializer {\\n    __ModuleMapConsumer_init(moduleMap_);\\n    __AccessControl_init();\\n\\n    // make the \\\"admin_\\\" address the default admin role\\n    _setupRole(DEFAULT_ADMIN_ROLE, admin_);\\n\\n    // make the \\\"owner_\\\" address the owner of the system\\n    _setupRole(OWNER_ROLE, owner_);\\n\\n    // give the \\\"owner_\\\" address the manager role, too\\n    _setupRole(MANAGER_ROLE, owner_);\\n\\n    // owners are admins of managers\\n    _setRoleAdmin(MANAGER_ROLE, OWNER_ROLE);\\n\\n    initializationTimestamp = block.timestamp;\\n  }\\n\\n  /// @param biosRewardsDuration The duration in seconds for a BIOS rewards period to last\\n  function setBiosRewardsDuration(uint32 biosRewardsDuration)\\n    external\\n    onlyRole(MANAGER_ROLE)\\n  {\\n    IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions))\\n      .setBiosRewardsDuration(biosRewardsDuration);\\n\\n    emit SetBiosRewardsDuration(biosRewardsDuration);\\n  }\\n\\n  /// @param biosAmount The amount of BIOS to add to the rewards\\n  function seedBiosRewards(uint256 biosAmount) external onlyRole(MANAGER_ROLE) {\\n    IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions))\\n      .seedBiosRewards(msg.sender, biosAmount);\\n\\n    emit SeedBiosRewards(biosAmount);\\n  }\\n\\n  /// @notice This function is used after tokens have been added, and a weight array should be included\\n  /// @param contractAddress The address of the integration contract\\n  /// @param name The name of the protocol being integrated to\\n  function addIntegration(address contractAddress, string memory name)\\n    external\\n    onlyRole(MANAGER_ROLE)\\n  {\\n    IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\\n      .addIntegration(contractAddress, name);\\n\\n    emit IntegrationAdded(contractAddress, name);\\n  }\\n\\n  /// @param tokenAddress The address of the ERC20 token contract\\n  /// @param acceptingDeposits Whether token deposits are enabled\\n  /// @param acceptingWithdrawals Whether token withdrawals are enabled\\n  /// @param biosRewardWeight Token weight for BIOS rewards\\n  /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n  function addToken(\\n    address tokenAddress,\\n    bool acceptingDeposits,\\n    bool acceptingWithdrawals,\\n    uint256 biosRewardWeight,\\n    uint256 reserveRatioNumerator\\n  ) external onlyRole(MANAGER_ROLE) {\\n    IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\\n      .addToken(\\n        tokenAddress,\\n        acceptingDeposits,\\n        acceptingWithdrawals,\\n        biosRewardWeight,\\n        reserveRatioNumerator\\n      );\\n\\n    if (\\n      IERC20MetadataUpgradeable(tokenAddress).allowance(\\n        moduleMap.getModuleAddress(Modules.Kernel),\\n        moduleMap.getModuleAddress(Modules.YieldManager)\\n      ) == 0\\n    ) {\\n      IERC20MetadataUpgradeable(tokenAddress).safeApprove(\\n        moduleMap.getModuleAddress(Modules.YieldManager),\\n        type(uint256).max\\n      );\\n    }\\n\\n    if (\\n      IERC20MetadataUpgradeable(tokenAddress).allowance(\\n        moduleMap.getModuleAddress(Modules.Kernel),\\n        moduleMap.getModuleAddress(Modules.UserPositions)\\n      ) == 0\\n    ) {\\n      IERC20MetadataUpgradeable(tokenAddress).safeApprove(\\n        moduleMap.getModuleAddress(Modules.UserPositions),\\n        type(uint256).max\\n      );\\n    }\\n\\n    emit TokenAdded(\\n      tokenAddress,\\n      acceptingDeposits,\\n      acceptingWithdrawals,\\n      biosRewardWeight,\\n      reserveRatioNumerator\\n    );\\n  }\\n\\n  /// @param biosBuyBackEthWeight The relative weight of ETH to send to BIOS buy back\\n  /// @param treasuryEthWeight The relative weight of ETH to send to the treasury\\n  /// @param protocolFeeEthWeight The relative weight of ETH to send to protocol fee accrual\\n  /// @param rewardsEthWeight The relative weight of ETH to send to user rewards\\n  function updateEthDistributionWeights(\\n    uint32 biosBuyBackEthWeight,\\n    uint32 treasuryEthWeight,\\n    uint32 protocolFeeEthWeight,\\n    uint32 rewardsEthWeight\\n  ) external onlyRole(MANAGER_ROLE) {\\n    IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager))\\n      .updateEthDistributionWeights(\\n        biosBuyBackEthWeight,\\n        treasuryEthWeight,\\n        protocolFeeEthWeight,\\n        rewardsEthWeight\\n      );\\n\\n    emit EthDistributionWeightsUpdated(\\n      biosBuyBackEthWeight,\\n      treasuryEthWeight,\\n      protocolFeeEthWeight,\\n      rewardsEthWeight\\n    );\\n  }\\n\\n  /// @notice Gives the UserPositions contract approval to transfer BIOS from Kernel\\n  function tokenApprovals() external onlyRole(MANAGER_ROLE) {\\n    IIntegrationMap integrationMap = IIntegrationMap(\\n      moduleMap.getModuleAddress(Modules.IntegrationMap)\\n    );\\n    IERC20MetadataUpgradeable bios = IERC20MetadataUpgradeable(\\n      integrationMap.getBiosTokenAddress()\\n    );\\n    IERC20MetadataUpgradeable weth = IERC20MetadataUpgradeable(\\n      integrationMap.getWethTokenAddress()\\n    );\\n\\n    if (\\n      bios.allowance(\\n        address(this),\\n        moduleMap.getModuleAddress(Modules.UserPositions)\\n      ) == 0\\n    ) {\\n      bios.safeApprove(\\n        moduleMap.getModuleAddress(Modules.UserPositions),\\n        type(uint256).max\\n      );\\n    }\\n    if (\\n      bios.allowance(\\n        address(this),\\n        moduleMap.getModuleAddress(Modules.YieldManager)\\n      ) == 0\\n    ) {\\n      bios.safeApprove(\\n        moduleMap.getModuleAddress(Modules.YieldManager),\\n        type(uint256).max\\n      );\\n    }\\n\\n    if (\\n      weth.allowance(\\n        address(this),\\n        moduleMap.getModuleAddress(Modules.UserPositions)\\n      ) == 0\\n    ) {\\n      weth.safeApprove(\\n        moduleMap.getModuleAddress(Modules.UserPositions),\\n        type(uint256).max\\n      );\\n    }\\n\\n    if (\\n      weth.allowance(\\n        address(this),\\n        moduleMap.getModuleAddress(Modules.YieldManager)\\n      ) == 0\\n    ) {\\n      weth.safeApprove(\\n        moduleMap.getModuleAddress(Modules.YieldManager),\\n        type(uint256).max\\n      );\\n    }\\n  }\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  function enableTokenDeposits(address tokenAddress)\\n    external\\n    onlyRole(MANAGER_ROLE)\\n  {\\n    IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\\n      .enableTokenDeposits(tokenAddress);\\n\\n    emit TokenDepositsEnabled(tokenAddress);\\n  }\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  function disableTokenDeposits(address tokenAddress)\\n    external\\n    onlyRole(MANAGER_ROLE)\\n  {\\n    IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\\n      .disableTokenDeposits(tokenAddress);\\n\\n    emit TokenDepositsDisabled(tokenAddress);\\n  }\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  function enableTokenWithdrawals(address tokenAddress)\\n    external\\n    onlyRole(MANAGER_ROLE)\\n  {\\n    IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\\n      .enableTokenWithdrawals(tokenAddress);\\n\\n    emit TokenWithdrawalsEnabled(tokenAddress);\\n  }\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  function disableTokenWithdrawals(address tokenAddress)\\n    external\\n    onlyRole(MANAGER_ROLE)\\n  {\\n    IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\\n      .disableTokenWithdrawals(tokenAddress);\\n\\n    emit TokenWithdrawalsDisabled(tokenAddress);\\n  }\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @param updatedWeight The updated token BIOS reward weight\\n  function updateTokenRewardWeight(address tokenAddress, uint256 updatedWeight)\\n    external\\n    onlyRole(MANAGER_ROLE)\\n  {\\n    IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\\n      .updateTokenRewardWeight(tokenAddress, updatedWeight);\\n\\n    emit TokenRewardWeightUpdated(tokenAddress, updatedWeight);\\n  }\\n\\n  /// @param tokenAddress the address of the token ERC20 contract\\n  /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n  /// @param rebalance Boolean indicating whether rebalance should be triggered\\n  function updateTokenReserveRatioNumerator(\\n    address tokenAddress,\\n    uint256 reserveRatioNumerator,\\n    bool rebalance\\n  ) external onlyRole(MANAGER_ROLE) {\\n    IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\\n      .updateTokenReserveRatioNumerator(tokenAddress, reserveRatioNumerator);\\n\\n    if (rebalance) {\\n      IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager))\\n        .rebalance();\\n    }\\n\\n    emit TokenReserveRatioNumeratorUpdated(\\n      tokenAddress,\\n      reserveRatioNumerator,\\n      rebalance\\n    );\\n  }\\n\\n  /// @param gasAccount The address of the account to send ETH to gas for executing bulk system functions\\n  function updateGasAccount(address payable gasAccount)\\n    external\\n    onlyRole(MANAGER_ROLE)\\n  {\\n    IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager))\\n      .updateGasAccount(gasAccount);\\n\\n    emit GasAccountUpdated(gasAccount);\\n  }\\n\\n  /// @param treasuryAccount The address of the system treasury account\\n  function updateTreasuryAccount(address payable treasuryAccount)\\n    external\\n    onlyRole(MANAGER_ROLE)\\n  {\\n    IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager))\\n      .updateTreasuryAccount(treasuryAccount);\\n\\n    emit TreasuryAccountUpdated(treasuryAccount);\\n  }\\n\\n  /// @param gasAccountTargetEthBalance The target ETH balance of the gas account\\n  function updateGasAccountTargetEthBalance(uint256 gasAccountTargetEthBalance)\\n    external\\n    onlyRole(MANAGER_ROLE)\\n  {\\n    IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager))\\n      .updateGasAccountTargetEthBalance(gasAccountTargetEthBalance);\\n\\n    emit GasAccountTargetEthBalanceUpdated(gasAccountTargetEthBalance);\\n  }\\n\\n  /// @notice User is allowed to deposit whitelisted tokens\\n  /// @param tokens Array of token the token addresses\\n  /// @param amounts Array of token amounts\\n  function deposit(address[] memory tokens, uint256[] memory amounts)\\n    external\\n    payable\\n  {\\n    if (msg.value > 0) {\\n      // Convert ETH to WETH\\n      address wethAddress = IIntegrationMap(\\n        moduleMap.getModuleAddress(Modules.IntegrationMap)\\n      ).getWethTokenAddress();\\n      IWeth9(wethAddress).deposit{ value: msg.value }();\\n    }\\n\\n    IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions)).deposit(\\n      msg.sender,\\n      tokens,\\n      amounts,\\n      msg.value\\n    );\\n\\n    emit Deposit(msg.sender, tokens, amounts, msg.value);\\n  }\\n\\n  /// @notice User is allowed to withdraw tokens\\n  /// @param tokens Array of token the token addresses\\n  /// @param amounts Array of token amounts\\n  /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\\n  function withdraw(\\n    address[] memory tokens,\\n    uint256[] memory amounts,\\n    bool withdrawWethAsEth\\n  ) external {\\n    uint256 ethWithdrawn = IUserPositions(\\n      moduleMap.getModuleAddress(Modules.UserPositions)\\n    ).withdraw(msg.sender, tokens, amounts, withdrawWethAsEth);\\n\\n    if (ethWithdrawn > 0) {\\n      IWeth9(\\n        IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\\n          .getWethTokenAddress()\\n      ).withdraw(ethWithdrawn);\\n\\n      payable(msg.sender).transfer(ethWithdrawn);\\n    }\\n\\n    emit Withdraw(msg.sender, tokens, amounts, ethWithdrawn);\\n  }\\n\\n  /// @notice Allows a user to withdraw entire balances of the specified tokens and claim rewards\\n  /// @param tokens Array of token address that user is exiting positions from\\n  /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\\n  /// @return tokenAmounts The amounts of each token being withdrawn\\n  /// @return ethWithdrawn The amount of WETH balance being withdrawn as ETH\\n  /// @return ethClaimed The amount of ETH being claimed from rewards\\n  /// @return biosClaimed The amount of BIOS being claimed from rewards\\n  function withdrawAllAndClaim(address[] memory tokens, bool withdrawWethAsEth)\\n    external\\n    returns (\\n      uint256[] memory tokenAmounts,\\n      uint256 ethWithdrawn,\\n      uint256 ethClaimed,\\n      uint256 biosClaimed\\n    )\\n  {\\n    (tokenAmounts, ethWithdrawn, ethClaimed, biosClaimed) = IUserPositions(\\n      moduleMap.getModuleAddress(Modules.UserPositions)\\n    ).withdrawAllAndClaim(msg.sender, tokens, withdrawWethAsEth);\\n\\n    if (ethWithdrawn > 0) {\\n      IWeth9(\\n        IIntegrationMap(moduleMap.getModuleAddress(Modules.IntegrationMap))\\n          .getWethTokenAddress()\\n      ).withdraw(ethWithdrawn);\\n    }\\n\\n    if (ethWithdrawn + ethClaimed > 0) {\\n      payable(msg.sender).transfer(ethWithdrawn + ethClaimed);\\n    }\\n\\n    emit WithdrawAllAndClaim(\\n      msg.sender,\\n      tokens,\\n      withdrawWethAsEth,\\n      tokenAmounts,\\n      ethWithdrawn,\\n      ethClaimed,\\n      biosClaimed\\n    );\\n  }\\n\\n  /// @notice Allows user to claim their BIOS rewards\\n  /// @return ethClaimed The amount of ETH claimed by the user\\n  function claimEthRewards() public returns (uint256 ethClaimed) {\\n    ethClaimed = IUserPositions(\\n      moduleMap.getModuleAddress(Modules.UserPositions)\\n    ).claimEthRewards(msg.sender);\\n\\n    payable(msg.sender).transfer(ethClaimed);\\n\\n    emit ClaimEthRewards(msg.sender, ethClaimed);\\n  }\\n\\n  /// @notice Allows user to claim their BIOS rewards\\n  /// @return biosClaimed The amount of BIOS claimed by the user\\n  function claimBiosRewards() public returns (uint256 biosClaimed) {\\n    biosClaimed = IUserPositions(\\n      moduleMap.getModuleAddress(Modules.UserPositions)\\n    ).claimBiosRewards(msg.sender);\\n\\n    emit ClaimBiosRewards(msg.sender, biosClaimed);\\n  }\\n\\n  /// @notice Allows user to claim their ETH and BIOS rewards\\n  /// @return ethClaimed The amount of ETH claimed by the user\\n  /// @return biosClaimed The amount of BIOS claimed by the user\\n  function claimAllRewards()\\n    external\\n    returns (uint256 ethClaimed, uint256 biosClaimed)\\n  {\\n    ethClaimed = claimEthRewards();\\n    biosClaimed = claimBiosRewards();\\n  }\\n\\n  /// @notice Deploys all tokens to all integrations according to configured weights\\n  function deploy() external onlyGasAccount {\\n    IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager)).deploy();\\n    lastDeployTimestamp = block.timestamp;\\n    emit Deploy();\\n  }\\n\\n  /// @notice Harvests available yield from all tokens and integrations\\n  function harvestYield() external onlyGasAccount {\\n    IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager))\\n      .harvestYield();\\n    lastHarvestYieldTimestamp = block.timestamp;\\n    emit HarvestYield();\\n  }\\n\\n  /// @notice Swaps all harvested yield tokens for WETH\\n  function processYield() external onlyGasAccount {\\n    IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager))\\n      .processYield();\\n    lastProcessYieldTimestamp = block.timestamp;\\n    emit ProcessYield();\\n  }\\n\\n  /// @notice Distributes WETH to the gas account, BIOS buy back, treasury, protocol fee accrual, and user rewards\\n  function distributeEth() external onlyGasAccount {\\n    IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager))\\n      .distributeEth();\\n    lastLastDistributeEthTimestamp = lastDistributeEthTimestamp;\\n    lastDistributeEthTimestamp = block.timestamp;\\n    emit DistributeEth();\\n  }\\n\\n  /// @notice Uses any WETH held in the SushiSwap integration to buy back BIOS which is sent to the Kernel\\n  function biosBuyBack() external onlyGasAccount {\\n    IYieldManager(moduleMap.getModuleAddress(Modules.YieldManager))\\n      .biosBuyBack();\\n    lastBiosBuyBackTimestamp = block.timestamp;\\n    emit BiosBuyBack();\\n  }\\n\\n  /// @param account The address of the account to check if they are a manager\\n  /// @return Bool indicating whether the account is a manger\\n  function isManager(address account) public view override returns (bool) {\\n    return hasRole(MANAGER_ROLE, account);\\n  }\\n\\n  /// @param account The address of the account to check if they are an owner\\n  /// @return Bool indicating whether the account is an owner\\n  function isOwner(address account) public view override returns (bool) {\\n    return hasRole(OWNER_ROLE, account);\\n  }\\n\\n  /// @return The timestamp the deploy function was last called\\n  function getLastDeployTimestamp() external view returns (uint256) {\\n    return lastDeployTimestamp;\\n  }\\n\\n  /// @return The timestamp the harvestYield function was last called\\n  function getLastHarvestYieldTimestamp() external view returns (uint256) {\\n    return lastHarvestYieldTimestamp;\\n  }\\n\\n  /// @return The timestamp the processYield function was last called\\n  function getLastProcessYieldTimestamp() external view returns (uint256) {\\n    return lastProcessYieldTimestamp;\\n  }\\n\\n  /// @return The timestamp the distributeEth function was last called\\n  function getLastDistributeEthTimestamp() external view returns (uint256) {\\n    return lastDistributeEthTimestamp;\\n  }\\n\\n  /// @return The timestamp the biosBuyBack function was last called\\n  function getLastBiosBuyBackTimestamp() external view returns (uint256) {\\n    return lastBiosBuyBackTimestamp;\\n  }\\n\\n  /// @return ethRewardsTimePeriod The number of seconds between the last two ETH payouts\\n  function getEthRewardsTimePeriod()\\n    external\\n    view\\n    returns (uint256 ethRewardsTimePeriod)\\n  {\\n    if (lastDistributeEthTimestamp > 0) {\\n      if (lastLastDistributeEthTimestamp > 0) {\\n        ethRewardsTimePeriod =\\n          lastDistributeEthTimestamp -\\n          lastLastDistributeEthTimestamp;\\n      } else {\\n        ethRewardsTimePeriod =\\n          lastDistributeEthTimestamp -\\n          initializationTimestamp;\\n      }\\n    } else {\\n      ethRewardsTimePeriod = 0;\\n    }\\n  }\\n\\n  /// @notice User can enter a strategy with the funds they have on deposit\\n  /// @param strategyID  The strategy to deposit the tokens into\\n  /// @param tokens  the tokens to be enter the strategy with\\n  /// @param amounts  the amount of tokens to use\\n  function enterStrategy(\\n    uint256 strategyID,\\n    address[] memory tokens,\\n    uint256[] memory amounts\\n  ) external {\\n    IStrategyMap(moduleMap.getModuleAddress(Modules.StrategyMap)).enterStrategy(\\n        strategyID,\\n        msg.sender,\\n        tokens,\\n        amounts\\n      );\\n    IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions))\\n      .transferToStrategy(msg.sender, tokens, amounts);\\n  }\\n\\n  /// @notice User can exit a strategy\\n  /// @param strategyID  the strategy to exit\\n  /// @param tokens  the tokens to withdraw\\n  /// @param amounts  the amounts to withdraw\\n  function exitStrategy(\\n    uint256 strategyID,\\n    address[] memory tokens,\\n    uint256[] memory amounts\\n  ) external {\\n    IStrategyMap(moduleMap.getModuleAddress(Modules.StrategyMap)).exitStrategy(\\n      strategyID,\\n      msg.sender,\\n      tokens,\\n      amounts\\n    );\\n    IUserPositions(moduleMap.getModuleAddress(Modules.UserPositions))\\n      .transferFromStrategy(msg.sender, tokens, amounts);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/core/ModuleMapConsumer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IModuleMap.sol\\\";\\n\\nabstract contract ModuleMapConsumer is Initializable {\\n  IModuleMap public moduleMap;\\n\\n  function __ModuleMapConsumer_init(address moduleMap_) internal initializer {\\n    moduleMap = IModuleMap(moduleMap_);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIntegration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IIntegration {\\n  /// @param tokenAddress The address of the deposited token\\n  /// @param amount The amount of the token being deposited\\n  function deposit(address tokenAddress, uint256 amount) external;\\n\\n  /// @param tokenAddress The address of the withdrawal token\\n  /// @param amount The amount of the token to withdraw\\n  function withdraw(address tokenAddress, uint256 amount) external;\\n\\n  /// @dev Deploys all tokens held in the integration contract to the integrated protocol\\n  function deploy() external;\\n\\n  /// @dev Harvests token yield from the Aave lending pool\\n  function harvestYield() external;\\n\\n  /// @dev This returns the total amount of the underlying token that\\n  /// @dev has been deposited to the integration contract\\n  /// @param tokenAddress The address of the deployed token\\n  /// @return The amount of the underlying token that can be withdrawn\\n  function getBalance(address tokenAddress) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIntegrationMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IIntegrationMap {\\n  struct Integration {\\n    bool added;\\n    string name;\\n  }\\n\\n  struct Token {\\n    uint256 id;\\n    bool added;\\n    bool acceptingDeposits;\\n    bool acceptingWithdrawals;\\n    uint256 biosRewardWeight;\\n    uint256 reserveRatioNumerator;\\n  }\\n\\n  /// @param contractAddress The address of the integration contract\\n  /// @param name The name of the protocol being integrated to\\n  function addIntegration(address contractAddress, string memory name) external;\\n\\n  /// @param tokenAddress The address of the ERC20 token contract\\n  /// @param acceptingDeposits Whether token deposits are enabled\\n  /// @param acceptingWithdrawals Whether token withdrawals are enabled\\n  /// @param biosRewardWeight Token weight for BIOS rewards\\n  /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n  function addToken(\\n    address tokenAddress,\\n    bool acceptingDeposits,\\n    bool acceptingWithdrawals,\\n    uint256 biosRewardWeight,\\n    uint256 reserveRatioNumerator\\n  ) external;\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  function enableTokenDeposits(address tokenAddress) external;\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  function disableTokenDeposits(address tokenAddress) external;\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  function enableTokenWithdrawals(address tokenAddress) external;\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  function disableTokenWithdrawals(address tokenAddress) external;\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @param rewardWeight The updated token BIOS reward weight\\n  function updateTokenRewardWeight(address tokenAddress, uint256 rewardWeight)\\n    external;\\n\\n  /// @param tokenAddress the address of the token ERC20 contract\\n  /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n  function updateTokenReserveRatioNumerator(\\n    address tokenAddress,\\n    uint256 reserveRatioNumerator\\n  ) external;\\n\\n  /// @param integrationId The ID of the integration\\n  /// @return The address of the integration contract\\n  function getIntegrationAddress(uint256 integrationId)\\n    external\\n    view\\n    returns (address);\\n\\n  /// @param integrationAddress The address of the integration contract\\n  /// @return The name of the of the protocol being integrated to\\n  function getIntegrationName(address integrationAddress)\\n    external\\n    view\\n    returns (string memory);\\n\\n  /// @return The address of the WETH token\\n  function getWethTokenAddress() external view returns (address);\\n\\n  /// @return The address of the BIOS token\\n  function getBiosTokenAddress() external view returns (address);\\n\\n  /// @param tokenId The ID of the token\\n  /// @return The address of the token ERC20 contract\\n  function getTokenAddress(uint256 tokenId) external view returns (address);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return The index of the token in the tokens array\\n  function getTokenId(address tokenAddress) external view returns (uint256);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return The token BIOS reward weight\\n  function getTokenBiosRewardWeight(address tokenAddress)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /// @return rewardWeightSum reward weight of depositable tokens\\n  function getBiosRewardWeightSum()\\n    external\\n    view\\n    returns (uint256 rewardWeightSum);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return bool indicating whether depositing this token is currently enabled\\n  function getTokenAcceptingDeposits(address tokenAddress)\\n    external\\n    view\\n    returns (bool);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return bool indicating whether withdrawing this token is currently enabled\\n  function getTokenAcceptingWithdrawals(address tokenAddress)\\n    external\\n    view\\n    returns (bool);\\n\\n  // @param tokenAddress The address of the token ERC20 contract\\n  // @return bool indicating whether the token has been added\\n  function getIsTokenAdded(address tokenAddress) external view returns (bool);\\n\\n  // @param integrationAddress The address of the integration contract\\n  // @return bool indicating whether the integration has been added\\n  function getIsIntegrationAdded(address tokenAddress)\\n    external\\n    view\\n    returns (bool);\\n\\n  /// @notice get the length of supported tokens\\n  /// @return The quantity of tokens added\\n  function getTokenAddressesLength() external view returns (uint256);\\n\\n  /// @notice get the length of supported integrations\\n  /// @return The quantity of integrations added\\n  function getIntegrationAddressesLength() external view returns (uint256);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return The value that gets divided by the reserve ratio denominator\\n  function getTokenReserveRatioNumerator(address tokenAddress)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /// @return The token reserve ratio denominator\\n  function getReserveRatioDenominator() external view returns (uint32);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IKernel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IKernel {\\n  /// @param account The address of the account to check if they are a manager\\n  /// @return Bool indicating whether the account is a manger\\n  function isManager(address account) external view returns (bool);\\n\\n  /// @param account The address of the account to check if they are an owner\\n  /// @return Bool indicating whether the account is an owner\\n  function isOwner(address account) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IModuleMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\nenum Modules {\\n  Kernel, // 0\\n  UserPositions, // 1\\n  YieldManager, // 2\\n  IntegrationMap, // 3\\n  BiosRewards, // 4\\n  EtherRewards, // 5\\n  SushiSwapTrader, // 6\\n  UniswapTrader, // 7\\n  StrategyMap, // 8\\n  StrategyManager // 9\\n}\\n\\ninterface IModuleMap {\\n  function getModuleAddress(Modules key) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStrategyMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\nimport \\\"../interfaces/IIntegration.sol\\\";\\n\\ninterface IStrategyMap {\\n  // #### Structs\\n  struct WeightedIntegration {\\n    address integration;\\n    uint256 weight;\\n  }\\n\\n  struct Strategy {\\n    string name;\\n    uint256 totalStrategyWeight;\\n    mapping(address => bool) enabledTokens;\\n    address[] tokens;\\n    WeightedIntegration[] integrations;\\n  }\\n\\n  struct StrategySummary {\\n    string name;\\n    uint256 totalStrategyWeight;\\n    address[] tokens;\\n    WeightedIntegration[] integrations;\\n  }\\n\\n  struct StrategyTransaction {\\n    uint256 amount;\\n    address token;\\n  }\\n\\n  // #### Events\\n  event NewStrategy(\\n    uint256 indexed id,\\n    string name,\\n    WeightedIntegration[] integrations,\\n    address[] tokens\\n  );\\n  event UpdateName(uint256 indexed id, string name);\\n  event UpdateIntegrations(\\n    uint256 indexed id,\\n    WeightedIntegration[] integrations\\n  );\\n  event UpdateTokens(uint256 indexed id, address[] tokens);\\n  event DeleteStrategy(\\n    uint256 indexed id,\\n    string name,\\n    address[] tokens,\\n    WeightedIntegration[] integrations\\n  );\\n\\n  event EnterStrategy(\\n    uint256 indexed id,\\n    address indexed user,\\n    address[] tokens,\\n    uint256[] amounts\\n  );\\n  event ExitStrategy(\\n    uint256 indexed id,\\n    address indexed user,\\n    address[] tokens,\\n    uint256[] amounts\\n  );\\n\\n  // #### Functions\\n  /**\\n     @notice Adds a new strategy to the list of available strategies\\n     @param name  the name of the new strategy\\n     @param integrations  the integrations and weights that form the strategy\\n     */\\n  function addStrategy(\\n    string calldata name,\\n    WeightedIntegration[] memory integrations,\\n    address[] calldata tokens\\n  ) external;\\n\\n  /**\\n    @notice Updates the strategy name\\n    @param name  the new name\\n     */\\n  function updateName(uint256 id, string calldata name) external;\\n\\n  /**\\n  @notice Updates a strategy's accepted tokens\\n  @param id  The strategy ID\\n  @param tokens  The new tokens to allow\\n  */\\n  function updateTokens(uint256 id, address[] calldata tokens) external;\\n\\n  /**\\n    @notice Updates the strategy integrations \\n    @param integrations  the new integrations\\n     */\\n  function updateIntegrations(\\n    uint256 id,\\n    WeightedIntegration[] memory integrations\\n  ) external;\\n\\n  /**\\n    @notice Deletes a strategy\\n    @dev This can only be called successfully if the strategy being deleted doesn't have any assets invested in it\\n    @param id  the strategy to delete\\n     */\\n  function deleteStrategy(uint256 id) external;\\n\\n  /**\\n    @notice Increases the amount of a set of tokens in a strategy\\n    @param id  the strategy to deposit into\\n    @param tokens  the tokens to deposit\\n    @param amounts  The amounts to be deposited\\n     */\\n  function enterStrategy(\\n    uint256 id,\\n    address user,\\n    address[] calldata tokens,\\n    uint256[] calldata amounts\\n  ) external;\\n\\n  /**\\n    @notice Decreases the amount of a set of tokens invested in a strategy\\n    @param id  the strategy to withdraw assets from\\n    @param tokens  the tokens to withdraw\\n    @param amounts  The amounts to be withdrawn\\n     */\\n  function exitStrategy(\\n    uint256 id,\\n    address user,\\n    address[] calldata tokens,\\n    uint256[] calldata amounts\\n  ) external;\\n\\n  /**\\n    @notice Getter function to return the nested arrays as well as the name\\n    @param id  the strategy to return\\n     */\\n  function getStrategy(uint256 id)\\n    external\\n    view\\n    returns (StrategySummary memory);\\n\\n  /**\\n    @notice Returns the expected balance of a given token in a given integration\\n    @param integration  the integration the amount should be invested in\\n    @param token  the token that is being invested\\n    @return balance  the balance of the token that should be currently invested in the integration \\n     */\\n  function getExpectedBalance(address integration, address token)\\n    external\\n    view\\n    returns (uint256 balance);\\n\\n  /**\\n    @notice Returns the amount of a given token currently invested in a strategy\\n    @param id  the strategy id to check\\n    @param token  The token to retrieve the balance for\\n    @return amount  the amount of token that is invested in the strategy\\n     */\\n  function getStrategyTokenBalance(uint256 id, address token)\\n    external\\n    view\\n    returns (uint256 amount);\\n\\n  /**\\n    @notice returns the amount of a given token a user has invested in a given strategy\\n    @param id  the strategy id\\n    @param token  the token address\\n    @param user  the user who holds the funds\\n    @return amount  the amount of token that the user has invested in the strategy \\n     */\\n  function getUserStrategyBalanceByToken(\\n    uint256 id,\\n    address token,\\n    address user\\n  ) external view returns (uint256 amount);\\n\\n  /**\\n    @notice Returns the amount of a given token that a user has invested across all strategies\\n    @param token  the token address\\n    @param user  the user holding the funds\\n    @return amount  the amount of tokens the user has invested across all strategies\\n     */\\n  function getUserInvestedAmountByToken(address token, address user)\\n    external\\n    view\\n    returns (uint256 amount);\\n\\n  /**\\n    @notice Returns the total amount of a token invested across all strategies\\n    @param token  the token to fetch the balance for\\n    @return amount  the amount of the token currently invested\\n    */\\n  function getTokenTotalBalance(address token)\\n    external\\n    view\\n    returns (uint256 amount);\\n\\n  /**\\n  @notice Returns the weight of an individual integration within the system\\n  @param integration  the integration to look up\\n  @return The weight of the integration\\n   */\\n  function getIntegrationWeight(address integration)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n  @notice Returns the sum of all weights in the system.\\n  @return The sum of all integration weights within the system\\n   */\\n  function getIntegrationWeightSum() external view returns (uint256);\\n\\n  /// @notice autogenerated getter definition\\n  function idCounter() external view returns(uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISushiSwapTrader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface ISushiSwapTrader {\\n  /// @param slippageNumerator_ The number divided by the slippage denominator to get the slippage percentage\\n  function updateSlippageNumerator(uint24 slippageNumerator_) external;\\n\\n  /// @notice Swaps all WETH held in this contract for BIOS and sends to the kernel\\n  /// @return Bool indicating whether the trade succeeded\\n  function biosBuyBack() external returns (bool);\\n\\n  /// @param tokenIn The address of the input token\\n  /// @param tokenOut The address of the output token\\n  /// @param recipient The address of the token out recipient\\n  /// @param amountIn The exact amount of the input to swap\\n  /// @param amountOutMin The minimum amount of tokenOut to receive from the swap\\n  /// @return bool Indicates whether the swap succeeded\\n  function swapExactInput(\\n    address tokenIn,\\n    address tokenOut,\\n    address recipient,\\n    uint256 amountIn,\\n    uint256 amountOutMin\\n  ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapTrader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IUniswapTrader {\\n  struct Path {\\n    address tokenOut;\\n    uint256 firstPoolFee;\\n    address tokenInTokenOut;\\n    uint256 secondPoolFee;\\n    address tokenIn;\\n  }\\n\\n  /// @param tokenA The address of tokenA ERC20 contract\\n  /// @param tokenB The address of tokenB ERC20 contract\\n  /// @param fee The Uniswap pool fee\\n  /// @param slippageNumerator The value divided by the slippage denominator\\n  /// to calculate the allowable slippage\\n  function addPool(\\n    address tokenA,\\n    address tokenB,\\n    uint24 fee,\\n    uint24 slippageNumerator\\n  ) external;\\n\\n  /// @param tokenA The address of tokenA of the pool\\n  /// @param tokenB The address of tokenB of the pool\\n  /// @param poolIndex The index of the pool for the specified token pair\\n  /// @param slippageNumerator The new slippage numerator to update the pool\\n  function updatePoolSlippageNumerator(\\n    address tokenA,\\n    address tokenB,\\n    uint256 poolIndex,\\n    uint24 slippageNumerator\\n  ) external;\\n\\n  /// @notice Changes which Uniswap pool to use as the default pool\\n  /// @notice when swapping between token0 and token1\\n  /// @param tokenA The address of tokenA of the pool\\n  /// @param tokenB The address of tokenB of the pool\\n  /// @param primaryPoolIndex The index of the Uniswap pool to make the new primary pool\\n  function updatePairPrimaryPool(\\n    address tokenA,\\n    address tokenB,\\n    uint256 primaryPoolIndex\\n  ) external;\\n\\n  /// @param tokenIn The address of the input token\\n  /// @param tokenOut The address of the output token\\n  /// @param recipient The address to receive the tokens\\n  /// @param amountIn The exact amount of the input to swap\\n  /// @return tradeSuccess Indicates whether the trade succeeded\\n  function swapExactInput(\\n    address tokenIn,\\n    address tokenOut,\\n    address recipient,\\n    uint256 amountIn\\n  ) external returns (bool tradeSuccess);\\n\\n  /// @param tokenIn The address of the input token\\n  /// @param tokenOut The address of the output token\\n  /// @param recipient The address to receive the tokens\\n  /// @param amountOut The exact amount of the output token to receive\\n  /// @return tradeSuccess Indicates whether the trade succeeded\\n  function swapExactOutput(\\n    address tokenIn,\\n    address tokenOut,\\n    address recipient,\\n    uint256 amountOut\\n  ) external returns (bool tradeSuccess);\\n\\n  /// @param tokenIn The address of the input token\\n  /// @param tokenOut The address of the output token\\n  /// @param amountOut The exact amount of token being swapped for\\n  /// @return amountInMaximum The maximum amount of tokenIn to spend, factoring in allowable slippage\\n  function getAmountInMaximum(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountOut\\n  ) external view returns (uint256 amountInMaximum);\\n\\n  /// @param tokenIn The address of the input token\\n  /// @param tokenOut The address of the output token\\n  /// @param amountIn The exact amount of the input to swap\\n  /// @return amountOut The estimated amount of tokenOut to receive\\n  function getEstimatedTokenOut(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn\\n  ) external view returns (uint256 amountOut);\\n\\n  function getPathFor(address tokenOut, address tokenIn)\\n    external\\n    view\\n    returns (Path memory);\\n\\n  function setPathFor(\\n    address tokenOut,\\n    address tokenIn,\\n    uint256 firstPoolFee,\\n    address tokenInTokenOut,\\n    uint256 secondPoolFee\\n  ) external;\\n\\n  /// @param tokenA The address of tokenA\\n  /// @param tokenB The address of tokenB\\n  /// @return token0 The address of the sorted token0\\n  /// @return token1 The address of the sorted token1\\n  function getTokensSorted(address tokenA, address tokenB)\\n    external\\n    pure\\n    returns (address token0, address token1);\\n\\n  /// @return The number of token pairs configured\\n  function getTokenPairsLength() external view returns (uint256);\\n\\n  /// @param tokenA The address of tokenA\\n  /// @param tokenB The address of tokenB\\n  /// @return The quantity of pools configured for the specified token pair\\n  function getTokenPairPoolsLength(address tokenA, address tokenB)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /// @param tokenA The address of tokenA\\n  /// @param tokenB The address of tokenB\\n  /// @param poolId The index of the pool in the pools mapping\\n  /// @return feeNumerator The numerator that gets divided by the fee denominator\\n  function getPoolFeeNumerator(\\n    address tokenA,\\n    address tokenB,\\n    uint256 poolId\\n  ) external view returns (uint24 feeNumerator);\\n\\n  function getPoolAddress(address tokenA, address tokenB)\\n    external\\n    view\\n    returns (address pool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUserPositions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IUserPositions {\\n  /// @param biosRewardsDuration_ The duration in seconds for a BIOS rewards period to last\\n  function setBiosRewardsDuration(uint32 biosRewardsDuration_) external;\\n\\n  /// @param sender The account seeding BIOS rewards\\n  /// @param biosAmount The amount of BIOS to add to rewards\\n  function seedBiosRewards(address sender, uint256 biosAmount) external;\\n\\n  /// @notice Sends all BIOS available in the Kernel to each token BIOS rewards pool based up configured weights\\n  function increaseBiosRewards() external;\\n\\n  /// @notice User is allowed to deposit whitelisted tokens\\n  /// @param depositor Address of the account depositing\\n  /// @param tokens Array of token the token addresses\\n  /// @param amounts Array of token amounts\\n  /// @param ethAmount The amount of ETH sent with the deposit\\n  function deposit(\\n    address depositor,\\n    address[] memory tokens,\\n    uint256[] memory amounts,\\n    uint256 ethAmount\\n  ) external;\\n\\n  /// @notice User is allowed to withdraw tokens\\n  /// @param recipient The address of the user withdrawing\\n  /// @param tokens Array of token the token addresses\\n  /// @param amounts Array of token amounts\\n  /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\\n  function withdraw(\\n    address recipient,\\n    address[] memory tokens,\\n    uint256[] memory amounts,\\n    bool withdrawWethAsEth\\n  ) external returns (uint256 ethWithdrawn);\\n\\n  /// @notice Allows a user to withdraw entire balances of the specified tokens and claim rewards\\n  /// @param recipient The address of the user withdrawing tokens\\n  /// @param tokens Array of token address that user is exiting positions from\\n  /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\\n  /// @return tokenAmounts The amounts of each token being withdrawn\\n  /// @return ethWithdrawn The amount of ETH being withdrawn\\n  /// @return ethClaimed The amount of ETH being claimed from rewards\\n  /// @return biosClaimed The amount of BIOS being claimed from rewards\\n  function withdrawAllAndClaim(\\n    address recipient,\\n    address[] memory tokens,\\n    bool withdrawWethAsEth\\n  )\\n    external\\n    returns (\\n      uint256[] memory tokenAmounts,\\n      uint256 ethWithdrawn,\\n      uint256 ethClaimed,\\n      uint256 biosClaimed\\n    );\\n\\n  /// @param user The address of the user claiming ETH rewards\\n  function claimEthRewards(address user) external returns (uint256 ethClaimed);\\n\\n  /// @notice Allows users to claim their BIOS rewards for each token\\n  /// @param recipient The address of the usuer claiming BIOS rewards\\n  function claimBiosRewards(address recipient)\\n    external\\n    returns (uint256 biosClaimed);\\n\\n  /// @param asset Address of the ERC20 token contract\\n  /// @return The total balance of the asset deposited in the system\\n  function totalTokenBalance(address asset) external view returns (uint256);\\n\\n  /// @param asset Address of the ERC20 token contract\\n  /// @param account Address of the user account\\n  function userTokenBalance(address asset, address account)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /// @return The Bios Rewards Duration\\n  function getBiosRewardsDuration() external view returns (uint32);\\n\\n  /// @notice Transfers tokens to the StrategyMap\\n  /// @dev This is a ledger adjustment. The tokens remain in the kernel.\\n  /// @param recipient  The user to transfer funds for\\n  /// @param tokens  the tokens to be moved\\n  /// @param amounts  the amounts of each token to move\\n  function transferToStrategy(\\n    address recipient,\\n    address[] memory tokens,\\n    uint256[] memory amounts\\n  ) external;\\n\\n  /// @notice Transfers tokens from the StrategyMap\\n  /// @dev This is a ledger adjustment. The tokens remain in the kernel.\\n  /// @param recipient  The user to transfer funds for\\n  /// @param tokens  the tokens to be moved\\n  /// @param amounts  the amounts of each token to move\\n  function transferFromStrategy(\\n    address recipient,\\n    address[] memory tokens,\\n    uint256[] memory amounts\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWeth9.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IWeth9 {\\n  event Deposit(address indexed dst, uint256 wad);\\n  event Withdrawal(address indexed src, uint256 wad);\\n\\n  function deposit() external payable;\\n\\n  /// @param wad The amount of wETH to withdraw into ETH\\n  function withdraw(uint256 wad) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IYieldManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IYieldManager {\\n  /// @param gasAccountTargetEthBalance_ The target ETH balance of the gas account\\n  function updateGasAccountTargetEthBalance(uint256 gasAccountTargetEthBalance_)\\n    external;\\n\\n  /// @param biosBuyBackEthWeight_ The relative weight of ETH to send to BIOS buy back\\n  /// @param treasuryEthWeight_ The relative weight of ETH to send to the treasury\\n  /// @param protocolFeeEthWeight_ The relative weight of ETH to send to protocol fee accrual\\n  /// @param rewardsEthWeight_ The relative weight of ETH to send to user rewards\\n  function updateEthDistributionWeights(\\n    uint32 biosBuyBackEthWeight_,\\n    uint32 treasuryEthWeight_,\\n    uint32 protocolFeeEthWeight_,\\n    uint32 rewardsEthWeight_\\n  ) external;\\n\\n  /// @param gasAccount_ The address of the account to send ETH to gas for executing bulk system functions\\n  function updateGasAccount(address payable gasAccount_) external;\\n\\n  /// @param treasuryAccount_ The address of the system treasury account\\n  function updateTreasuryAccount(address payable treasuryAccount_) external;\\n\\n  /// @notice Withdraws and then re-deploys tokens to integrations according to configured weights\\n  function rebalance() external;\\n\\n  /// @notice Deploys all tokens to all integrations according to configured weights\\n  function deploy() external;\\n\\n  /// @notice Harvests available yield from all tokens and integrations\\n  function harvestYield() external;\\n\\n  /// @notice Swaps harvested yield for all tokens for ETH\\n  function processYield() external;\\n\\n  /// @notice Distributes ETH to the gas account, BIOS buy back, treasury, protocol fee accrual, and user rewards\\n  function distributeEth() external;\\n\\n  /// @notice Uses WETH to buy back BIOS which is sent to the Kernel\\n  function biosBuyBack() external;\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return harvestedTokenBalance The amount of the token yield harvested held in the Kernel\\n  function getHarvestedTokenBalance(address tokenAddress)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return The amount of the token held in the Kernel as reserves\\n  function getReserveTokenBalance(address tokenAddress)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return The desired amount of the token to hold in the Kernel as reserves\\n  function getDesiredReserveTokenBalance(address tokenAddress)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /// @return ethWeightSum The sum of ETH distribution weights\\n  function getEthWeightSum() external view returns (uint32 ethWeightSum);\\n\\n  /// @return processedWethSum The sum of yields processed into WETH\\n  function getProcessedWethSum()\\n    external\\n    view\\n    returns (uint256 processedWethSum);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return The amount of WETH received from token yield processing\\n  function getProcessedWethByToken(address tokenAddress)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /// @return processedWethByTokenSum The sum of processed WETH\\n  function getProcessedWethByTokenSum()\\n    external\\n    view\\n    returns (uint256 processedWethByTokenSum);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return tokenTotalIntegrationBalance The total amount of the token that can be withdrawn from integrations\\n  function getTokenTotalIntegrationBalance(address tokenAddress)\\n    external\\n    view\\n    returns (uint256 tokenTotalIntegrationBalance);\\n\\n  /// @return The address of the gas account\\n  function getGasAccount() external view returns (address);\\n\\n  /// @return The address of the treasury account\\n  function getTreasuryAccount() external view returns (address);\\n\\n  /// @return The last amount of ETH distributed to rewards\\n  function getLastEthRewardsAmount() external view returns (uint256);\\n\\n  /// @return The target ETH balance of the gas account\\n  function getGasAccountTargetEthBalance() external view returns (uint256);\\n\\n  /// @return The BIOS buyback ETH weight\\n  /// @return The Treasury ETH weight\\n  /// @return The Protocol fee ETH weight\\n  /// @return The rewards ETH weight\\n  function getEthDistributionWeights()\\n    external\\n    view\\n    returns (\\n      uint32,\\n      uint32,\\n      uint32,\\n      uint32\\n    );\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[],\"name\":\"BiosBuyBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"biosRewards\",\"type\":\"uint256\"}],\"name\":\"ClaimBiosRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethRewards\",\"type\":\"uint256\"}],\"name\":\"ClaimEthRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Deploy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistributeEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"biosBuyBackEthWeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"treasuryEthWeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"protocolFeeEthWeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"rewardsEthWeight\",\"type\":\"uint32\"}],\"name\":\"EthDistributionWeightsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasAccountTargetEthBalance\",\"type\":\"uint256\"}],\"name\":\"GasAccountTargetEthBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gasAccount\",\"type\":\"address\"}],\"name\":\"GasAccountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"HarvestYield\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"IntegrationAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ProcessYield\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"biosAmount\",\"type\":\"uint256\"}],\"name\":\"SeedBiosRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"biosRewardsDuration\",\"type\":\"uint32\"}],\"name\":\"SetBiosRewardsDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"acceptingDeposits\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"acceptingWithdrawals\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"biosRewardWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveRatioNumerator\",\"type\":\"uint256\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenDepositsDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenDepositsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"rebalance\",\"type\":\"bool\"}],\"name\":\"TokenIntegrationWeightUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveRatioNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"rebalance\",\"type\":\"bool\"}],\"name\":\"TokenReserveRatioNumeratorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"biosRewardWeight\",\"type\":\"uint256\"}],\"name\":\"TokenRewardWeightUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenWithdrawalsDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenWithdrawalsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasuryAccount\",\"type\":\"address\"}],\"name\":\"TreasuryAccountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"withdrawWethAsEth\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"biosRewards\",\"type\":\"uint256\"}],\"name\":\"WithdrawAllAndClaim\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"addIntegration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"acceptingDeposits\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"acceptingWithdrawals\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"biosRewardWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveRatioNumerator\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"biosBuyBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAllRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"biosClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBiosRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"biosClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEthRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"disableTokenDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"disableTokenWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"enableTokenDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"enableTokenWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyID\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"enterStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyID\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"exitStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthRewardsTimePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethRewardsTimePeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBiosBuyBackTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastDeployTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastDistributeEthTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastHarvestYieldTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastProcessYieldTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleMap\",\"outputs\":[{\"internalType\":\"contract IModuleMap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"biosAmount\",\"type\":\"uint256\"}],\"name\":\"seedBiosRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"biosRewardsDuration\",\"type\":\"uint32\"}],\"name\":\"setBiosRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenApprovals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"biosBuyBackEthWeight\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"treasuryEthWeight\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"protocolFeeEthWeight\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rewardsEthWeight\",\"type\":\"uint32\"}],\"name\":\"updateEthDistributionWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"gasAccount\",\"type\":\"address\"}],\"name\":\"updateGasAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasAccountTargetEthBalance\",\"type\":\"uint256\"}],\"name\":\"updateGasAccountTargetEthBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveRatioNumerator\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"rebalance\",\"type\":\"bool\"}],\"name\":\"updateTokenReserveRatioNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"updatedWeight\",\"type\":\"uint256\"}],\"name\":\"updateTokenRewardWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"treasuryAccount\",\"type\":\"address\"}],\"name\":\"updateTreasuryAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"withdrawWethAsEth\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"withdrawWethAsEth\",\"type\":\"bool\"}],\"name\":\"withdrawAllAndClaim\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"ethWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"biosClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Kernel","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":""}]}