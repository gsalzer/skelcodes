{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/Controlled.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\nimport \\\"../interfaces/IKernel.sol\\\";\\n\\nabstract contract Controlled is Initializable, ModuleMapConsumer {\\n  // controller address => is a controller\\n  mapping(address => bool) internal _controllers;\\n  address[] public controllers;\\n\\n  function __Controlled_init(address[] memory controllers_, address moduleMap_)\\n    public\\n    initializer\\n  {\\n    for (uint256 i; i < controllers_.length; i++) {\\n      _controllers[controllers_[i]] = true;\\n    }\\n    controllers = controllers_;\\n    __ModuleMapConsumer_init(moduleMap_);\\n  }\\n\\n  function addController(address controller) external onlyOwner {\\n    _controllers[controller] = true;\\n    bool added;\\n    for (uint256 i; i < controllers.length; i++) {\\n      if (controller == controllers[i]) {\\n        added = true;\\n      }\\n    }\\n    if (!added) {\\n      controllers.push(controller);\\n    }\\n  }\\n\\n  modifier onlyOwner() {\\n    require(\\n      IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isOwner(msg.sender),\\n      \\\"Controlled::onlyOwner: Caller is not owner\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier onlyManager() {\\n    require(\\n      IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isManager(msg.sender),\\n      \\\"Controlled::onlyManager: Caller is not manager\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier onlyController() {\\n    require(\\n      _controllers[msg.sender],\\n      \\\"Controlled::onlyController: Caller is not controller\\\"\\n    );\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/core/ModuleMapConsumer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IModuleMap.sol\\\";\\n\\nabstract contract ModuleMapConsumer is Initializable {\\n  IModuleMap public moduleMap;\\n\\n  function __ModuleMapConsumer_init(address moduleMap_) internal initializer {\\n    moduleMap = IModuleMap(moduleMap_);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/core/SushiSwapTrader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./Controlled.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\nimport \\\"../interfaces/ISushiSwapTrader.sol\\\";\\nimport \\\"../interfaces/ISushiSwapFactory.sol\\\";\\nimport \\\"../interfaces/ISushiSwapRouter.sol\\\";\\nimport \\\"../interfaces/ISushiSwapPair.sol\\\";\\nimport \\\"../interfaces/IIntegrationMap.sol\\\";\\n\\n/// @notice Integrates 0x Nodes to SushiSwap\\ncontract SushiSwapTrader is\\n  Initializable,\\n  ModuleMapConsumer,\\n  Controlled,\\n  ISushiSwapTrader\\n{\\n  using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\\n\\n  uint24 private constant SLIPPAGE_DENOMINATOR = 1_000_000;\\n  uint24 private slippageNumerator;\\n  address private factoryAddress;\\n  address private swapRouterAddress;\\n\\n  event ExecutedSwapExactInput(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    uint256 amountOut\\n  );\\n\\n  event FailedSwapExactInput(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    uint256 amountOutMin\\n  );\\n\\n  event SushiSwapSlippageNumeratorUpdated(uint24 slippageNumerator);\\n\\n  /// @param controllers_ The addresses of the controlling contracts\\n  /// @param moduleMap_ The address of the module map contract\\n  /// @param factoryAddress_ The address of the SushiSwap factory contract\\n  /// @param swapRouterAddress_ The address of the SushiSwap swap router contract\\n  /// @param slippageNumerator_ The number divided by the slippage denominator to get the slippage percentage\\n  function initialize(\\n    address[] memory controllers_,\\n    address moduleMap_,\\n    address factoryAddress_,\\n    address swapRouterAddress_,\\n    uint24 slippageNumerator_\\n  ) public initializer {\\n    require(\\n      slippageNumerator <= SLIPPAGE_DENOMINATOR,\\n      \\\"SushiSwapTrader::initialize: Slippage Numerator must be less than or equal to slippage denominator\\\"\\n    );\\n    __Controlled_init(controllers_, moduleMap_);\\n    __ModuleMapConsumer_init(moduleMap_);\\n    factoryAddress = factoryAddress_;\\n    swapRouterAddress = swapRouterAddress_;\\n    slippageNumerator = slippageNumerator_;\\n  }\\n\\n  /// @param slippageNumerator_ The number divided by the slippage denominator to get the slippage percentage\\n  function updateSlippageNumerator(uint24 slippageNumerator_)\\n    external\\n    override\\n    onlyManager\\n  {\\n    require(\\n      slippageNumerator_ != slippageNumerator,\\n      \\\"SushiSwapTrader::setSlippageNumerator: Slippage numerator must be set to a new value\\\"\\n    );\\n    require(\\n      slippageNumerator <= SLIPPAGE_DENOMINATOR,\\n      \\\"SushiSwapTrader::setSlippageNumerator: Slippage Numerator must be less than or equal to slippage denominator\\\"\\n    );\\n\\n    slippageNumerator = slippageNumerator_;\\n\\n    emit SushiSwapSlippageNumeratorUpdated(slippageNumerator_);\\n  }\\n\\n  /// @notice Swaps all WETH held in this contract for BIOS and sends to the kernel\\n  /// @return Bool indicating whether the trade succeeded\\n  function biosBuyBack() external override onlyController returns (bool) {\\n    IIntegrationMap integrationMap = IIntegrationMap(\\n      moduleMap.getModuleAddress(Modules.IntegrationMap)\\n    );\\n    address wethAddress = integrationMap.getWethTokenAddress();\\n    address biosAddress = integrationMap.getBiosTokenAddress();\\n    uint256 wethAmountIn = IERC20MetadataUpgradeable(wethAddress).balanceOf(\\n      address(this)\\n    );\\n\\n    uint256 biosAmountOutMin = getAmountOutMinimum(\\n      wethAddress,\\n      biosAddress,\\n      wethAmountIn\\n    );\\n\\n    return\\n      swapExactInput(\\n        wethAddress,\\n        integrationMap.getBiosTokenAddress(),\\n        moduleMap.getModuleAddress(Modules.Kernel),\\n        wethAmountIn,\\n        biosAmountOutMin\\n      );\\n  }\\n\\n  /// @param tokenIn The address of the input token\\n  /// @param tokenOut The address of the output token\\n  /// @param recipient The address of the token out recipient\\n  /// @param amountIn The exact amount of the input to swap\\n  /// @param amountOutMin The minimum amount of tokenOut to receive from the swap\\n  /// @return bool Indicates whether the swap succeeded\\n  function swapExactInput(\\n    address tokenIn,\\n    address tokenOut,\\n    address recipient,\\n    uint256 amountIn,\\n    uint256 amountOutMin\\n  ) public override onlyController returns (bool) {\\n    require(\\n      IERC20MetadataUpgradeable(tokenIn).balanceOf(address(this)) >= amountIn,\\n      \\\"SushiSwapTrader::swapExactInput: Balance is less than trade amount\\\"\\n    );\\n\\n    address[] memory path = new address[](2);\\n    path[0] = tokenIn;\\n    path[1] = tokenOut;\\n    uint256 deadline = block.timestamp;\\n\\n    if (\\n      IERC20MetadataUpgradeable(tokenIn).allowance(\\n        address(this),\\n        swapRouterAddress\\n      ) == 0\\n    ) {\\n      IERC20MetadataUpgradeable(tokenIn).safeApprove(\\n        swapRouterAddress,\\n        type(uint256).max\\n      );\\n    }\\n\\n    uint256 tokenOutBalanceBefore = IERC20MetadataUpgradeable(tokenOut)\\n      .balanceOf(recipient);\\n\\n    try\\n      ISushiSwapRouter(swapRouterAddress).swapExactTokensForTokens(\\n        amountIn,\\n        amountOutMin,\\n        path,\\n        recipient,\\n        deadline\\n      )\\n    {\\n      emit ExecutedSwapExactInput(\\n        tokenIn,\\n        tokenOut,\\n        amountIn,\\n        amountOutMin,\\n        IERC20MetadataUpgradeable(tokenOut).balanceOf(recipient) -\\n          tokenOutBalanceBefore\\n      );\\n      return true;\\n    } catch {\\n      emit FailedSwapExactInput(tokenIn, tokenOut, amountIn, amountOutMin);\\n      return false;\\n    }\\n  }\\n\\n  /// @param tokenIn The address of the input token\\n  /// @param tokenOut The address of the output token\\n  /// @param amountIn The exact amount of the input to swap\\n  /// @return amountOutMinimum The minimum amount of tokenOut to receive, factoring in allowable slippage\\n  function getAmountOutMinimum(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn\\n  ) public view returns (uint256 amountOutMinimum) {\\n    amountOutMinimum =\\n      (getAmountOut(tokenIn, tokenOut, amountIn) *\\n        (SLIPPAGE_DENOMINATOR - slippageNumerator)) /\\n      SLIPPAGE_DENOMINATOR;\\n  }\\n\\n  /// @param tokenIn The address of the input token\\n  /// @param tokenOut The address of the output token\\n  /// @param amountIn The exact amount of the input to swap\\n  /// @return amountOut The estimated amount of tokenOut to receive\\n  function getAmountOut(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn\\n  ) public view returns (uint256 amountOut) {\\n    require(\\n      amountIn > 0,\\n      \\\"SushiSwapTrader::getAmountOut: amountIn must be greater than zero\\\"\\n    );\\n    (uint256 reserveIn, uint256 reserveOut) = getReserves(tokenIn, tokenOut);\\n    require(\\n      reserveIn > 0 && reserveOut > 0,\\n      \\\"SushiSwapTrader::getAmountOut: No liquidity in pool reserves\\\"\\n    );\\n    uint256 amountInWithFee = amountIn * 997;\\n    uint256 numerator = amountInWithFee * (reserveOut);\\n    uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n    amountOut = numerator / denominator;\\n  }\\n\\n  /// @param tokenA The address of tokenA\\n  /// @param tokenB The address of tokenB\\n  /// @return reserveA The reserve balance of tokenA in the pool\\n  /// @return reserveB The reserve balance of tokenB in the pool\\n  function getReserves(address tokenA, address tokenB)\\n    internal\\n    view\\n    returns (uint256 reserveA, uint256 reserveB)\\n  {\\n    (address token0, ) = getTokensSorted(tokenA, tokenB);\\n    (uint256 reserve0, uint256 reserve1, ) = ISushiSwapPair(\\n      getPairFor(tokenA, tokenB)\\n    ).getReserves();\\n    (reserveA, reserveB) = tokenA == token0\\n      ? (reserve0, reserve1)\\n      : (reserve1, reserve0);\\n  }\\n\\n  /// @param tokenA The address of tokenA\\n  /// @param tokenB The address of tokenB\\n  /// @return token0 The address of sorted token0\\n  /// @return token1 The address of sorted token1\\n  function getTokensSorted(address tokenA, address tokenB)\\n    internal\\n    pure\\n    returns (address token0, address token1)\\n  {\\n    require(\\n      tokenA != tokenB,\\n      \\\"SushiSwapTrader::sortToken: Identical token addresses\\\"\\n    );\\n    (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    require(token0 != address(0), \\\"SushiSwapTrader::sortToken: Zero address\\\");\\n  }\\n\\n  /// @param tokenA The address of tokenA\\n  /// @param tokenB The address of tokenB\\n  /// @return pair The address of the SushiSwap pool contract\\n  function getPairFor(address tokenA, address tokenB)\\n    internal\\n    view\\n    returns (address pair)\\n  {\\n    pair = ISushiSwapFactory(factoryAddress).getPair(tokenA, tokenB);\\n  }\\n\\n  /// @return SushiSwap Factory address\\n  function getFactoryAddress() public view returns (address) {\\n    return factoryAddress;\\n  }\\n\\n  /// @return The slippage numerator\\n  function getSlippageNumerator() public view returns (uint24) {\\n    return slippageNumerator;\\n  }\\n\\n  /// @return The slippage denominator\\n  function getSlippageDenominator() public pure returns (uint24) {\\n    return SLIPPAGE_DENOMINATOR;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIntegrationMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IIntegrationMap {\\n  struct Integration {\\n    bool added;\\n    string name;\\n  }\\n\\n  struct Token {\\n    uint256 id;\\n    bool added;\\n    bool acceptingDeposits;\\n    bool acceptingWithdrawals;\\n    uint256 biosRewardWeight;\\n    uint256 reserveRatioNumerator;\\n  }\\n\\n  /// @param contractAddress The address of the integration contract\\n  /// @param name The name of the protocol being integrated to\\n  function addIntegration(address contractAddress, string memory name) external;\\n\\n  /// @param tokenAddress The address of the ERC20 token contract\\n  /// @param acceptingDeposits Whether token deposits are enabled\\n  /// @param acceptingWithdrawals Whether token withdrawals are enabled\\n  /// @param biosRewardWeight Token weight for BIOS rewards\\n  /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n  function addToken(\\n    address tokenAddress,\\n    bool acceptingDeposits,\\n    bool acceptingWithdrawals,\\n    uint256 biosRewardWeight,\\n    uint256 reserveRatioNumerator\\n  ) external;\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  function enableTokenDeposits(address tokenAddress) external;\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  function disableTokenDeposits(address tokenAddress) external;\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  function enableTokenWithdrawals(address tokenAddress) external;\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  function disableTokenWithdrawals(address tokenAddress) external;\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @param rewardWeight The updated token BIOS reward weight\\n  function updateTokenRewardWeight(address tokenAddress, uint256 rewardWeight)\\n    external;\\n\\n  /// @param tokenAddress the address of the token ERC20 contract\\n  /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n  function updateTokenReserveRatioNumerator(\\n    address tokenAddress,\\n    uint256 reserveRatioNumerator\\n  ) external;\\n\\n  /// @param integrationId The ID of the integration\\n  /// @return The address of the integration contract\\n  function getIntegrationAddress(uint256 integrationId)\\n    external\\n    view\\n    returns (address);\\n\\n  /// @param integrationAddress The address of the integration contract\\n  /// @return The name of the of the protocol being integrated to\\n  function getIntegrationName(address integrationAddress)\\n    external\\n    view\\n    returns (string memory);\\n\\n  /// @return The address of the WETH token\\n  function getWethTokenAddress() external view returns (address);\\n\\n  /// @return The address of the BIOS token\\n  function getBiosTokenAddress() external view returns (address);\\n\\n  /// @param tokenId The ID of the token\\n  /// @return The address of the token ERC20 contract\\n  function getTokenAddress(uint256 tokenId) external view returns (address);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return The index of the token in the tokens array\\n  function getTokenId(address tokenAddress) external view returns (uint256);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return The token BIOS reward weight\\n  function getTokenBiosRewardWeight(address tokenAddress)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /// @return rewardWeightSum reward weight of depositable tokens\\n  function getBiosRewardWeightSum()\\n    external\\n    view\\n    returns (uint256 rewardWeightSum);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return bool indicating whether depositing this token is currently enabled\\n  function getTokenAcceptingDeposits(address tokenAddress)\\n    external\\n    view\\n    returns (bool);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return bool indicating whether withdrawing this token is currently enabled\\n  function getTokenAcceptingWithdrawals(address tokenAddress)\\n    external\\n    view\\n    returns (bool);\\n\\n  // @param tokenAddress The address of the token ERC20 contract\\n  // @return bool indicating whether the token has been added\\n  function getIsTokenAdded(address tokenAddress) external view returns (bool);\\n\\n  // @param integrationAddress The address of the integration contract\\n  // @return bool indicating whether the integration has been added\\n  function getIsIntegrationAdded(address tokenAddress)\\n    external\\n    view\\n    returns (bool);\\n\\n  /// @notice get the length of supported tokens\\n  /// @return The quantity of tokens added\\n  function getTokenAddressesLength() external view returns (uint256);\\n\\n  /// @notice get the length of supported integrations\\n  /// @return The quantity of integrations added\\n  function getIntegrationAddressesLength() external view returns (uint256);\\n\\n  /// @param tokenAddress The address of the token ERC20 contract\\n  /// @return The value that gets divided by the reserve ratio denominator\\n  function getTokenReserveRatioNumerator(address tokenAddress)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /// @return The token reserve ratio denominator\\n  function getReserveRatioDenominator() external view returns (uint32);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IKernel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IKernel {\\n  /// @param account The address of the account to check if they are a manager\\n  /// @return Bool indicating whether the account is a manger\\n  function isManager(address account) external view returns (bool);\\n\\n  /// @param account The address of the account to check if they are an owner\\n  /// @return Bool indicating whether the account is an owner\\n  function isOwner(address account) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IModuleMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\nenum Modules {\\n  Kernel, // 0\\n  UserPositions, // 1\\n  YieldManager, // 2\\n  IntegrationMap, // 3\\n  BiosRewards, // 4\\n  EtherRewards, // 5\\n  SushiSwapTrader, // 6\\n  UniswapTrader, // 7\\n  StrategyMap, // 8\\n  StrategyManager // 9\\n}\\n\\ninterface IModuleMap {\\n  function getModuleAddress(Modules key) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISushiSwapFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface ISushiSwapFactory {\\n  function getPair(address tokenA, address tokenB)\\n    external\\n    view\\n    returns (address pair);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISushiSwapPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface ISushiSwapPair {\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISushiSwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface ISushiSwapRouter {\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function swapETHForExactTokens(\\n        uint amountOut, \\n        address[] calldata path, \\n        address to, \\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint amountOut, \\n        address[] calldata path, \\n        address to, \\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function WETH() external pure returns (address);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ISushiSwapTrader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface ISushiSwapTrader {\\n  /// @param slippageNumerator_ The number divided by the slippage denominator to get the slippage percentage\\n  function updateSlippageNumerator(uint24 slippageNumerator_) external;\\n\\n  /// @notice Swaps all WETH held in this contract for BIOS and sends to the kernel\\n  /// @return Bool indicating whether the trade succeeded\\n  function biosBuyBack() external returns (bool);\\n\\n  /// @param tokenIn The address of the input token\\n  /// @param tokenOut The address of the output token\\n  /// @param recipient The address of the token out recipient\\n  /// @param amountIn The exact amount of the input to swap\\n  /// @param amountOutMin The minimum amount of tokenOut to receive from the swap\\n  /// @return bool Indicates whether the swap succeeded\\n  function swapExactInput(\\n    address tokenIn,\\n    address tokenOut,\\n    address recipient,\\n    uint256 amountIn,\\n    uint256 amountOutMin\\n  ) external returns (bool);\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"ExecutedSwapExactInput\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"FailedSwapExactInput\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"slippageNumerator\",\"type\":\"uint24\"}],\"name\":\"SushiSwapSlippageNumeratorUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"controllers_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"}],\"name\":\"__Controlled_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"biosBuyBack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOutMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSlippageDenominator\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSlippageNumerator\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"controllers_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factoryAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapRouterAddress_\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"slippageNumerator_\",\"type\":\"uint24\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleMap\",\"outputs\":[{\"internalType\":\"contract IModuleMap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"swapExactInput\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"slippageNumerator_\",\"type\":\"uint24\"}],\"name\":\"updateSlippageNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SushiSwapTrader","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":""}]}