{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/PhoenixModules/multiSignature/multiSignatureClient.sol\r\n\r\npragma solidity =0.5.16;\r\n/**\r\n * SPDX-License-Identifier: GPL-3.0-or-later\r\n * Phoenix\r\n * Copyright (C) 2020 Phoenix Options Protocol\r\n */\r\ninterface IMultiSignature{\r\n    function getValidSignature(bytes32 msghash,uint256 lastIndex) external view returns(uint256);\r\n}\r\ncontract multiSignatureClient{\r\n    uint256 private constant multiSignaturePositon = uint256(keccak256(\"org.Phoenix.multiSignature.storage\"));\r\n    event DebugEvent(address indexed from,bytes32 msgHash,uint256 value,uint256 value1);\r\n    constructor(address multiSignature) public {\r\n        require(multiSignature != address(0),\"multiSignatureClient : Multiple signature contract address is zero!\");\r\n        saveValue(multiSignaturePositon,uint256(multiSignature));\r\n    }    \r\n    function getMultiSignatureAddress()public view returns (address){\r\n        return address(getValue(multiSignaturePositon));\r\n    }\r\n    modifier validCall(){\r\n        checkMultiSignature();\r\n        _;\r\n    }\r\n    function checkMultiSignature() internal {\r\n        uint256 value;\r\n        assembly {\r\n            value := callvalue()\r\n        }\r\n        bytes32 msgHash = keccak256(abi.encodePacked(msg.sender, address(this),value,msg.data));\r\n        address multiSign = getMultiSignatureAddress();\r\n        uint256 index = getValue(uint256(msgHash));\r\n        uint256 newIndex = IMultiSignature(multiSign).getValidSignature(msgHash,index);\r\n        require(newIndex > index, \"multiSignatureClient : This tx is not aprroved\");\r\n        saveValue(uint256(msgHash),newIndex);\r\n    }\r\n    function saveValue(uint256 position,uint256 value) internal \r\n    {\r\n        assembly {\r\n            sstore(position, value)\r\n        }\r\n    }\r\n    function getValue(uint256 position) internal view returns (uint256 value) {\r\n        assembly {\r\n            value := sload(position)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/PhoenixModules/proxyModules/proxyOwner.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n/**\r\n * @title  proxyOwner Contract\r\n\r\n */\r\n\r\ncontract proxyOwner is multiSignatureClient{\r\n    bytes32 private constant ownerExpiredPosition = keccak256(\"org.Phoenix.ownerExpired.storage\");\r\n    bytes32 private constant versionPositon = keccak256(\"org.Phoenix.version.storage\");\r\n    bytes32 private constant proxyOwnerPosition  = keccak256(\"org.Phoenix.Owner.storage\");\r\n    bytes32 private constant proxyOriginPosition  = keccak256(\"org.Phoenix.Origin.storage\");\r\n    uint256 private constant oncePosition  = uint256(keccak256(\"org.Phoenix.Once.storage\"));\r\n    uint256 private constant ownerExpired =  90 days;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event OriginTransferred(address indexed previousOrigin, address indexed newOrigin);\r\n    constructor(address multiSignature) multiSignatureClient(multiSignature) public{\r\n        _setProxyOwner(msg.sender);\r\n        _setProxyOrigin(tx.origin);\r\n    }\r\n    /**\r\n     * @dev Allows the current owner to transfer ownership\r\n     * @param _newOwner The address to transfer ownership to\r\n     */\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner\r\n    {\r\n        _setProxyOwner(_newOwner);\r\n    }\r\n    function _setProxyOwner(address _newOwner) internal \r\n    {\r\n        emit OwnershipTransferred(owner(),_newOwner);\r\n        bytes32 position = proxyOwnerPosition;\r\n        assembly {\r\n            sstore(position, _newOwner)\r\n        }\r\n        position = ownerExpiredPosition;\r\n        uint256 expired = now+ownerExpired;\r\n        assembly {\r\n            sstore(position, expired)\r\n        }\r\n    }\r\n    function owner() public view returns (address _owner) {\r\n        bytes32 position = proxyOwnerPosition;\r\n        assembly {\r\n            _owner := sload(position)\r\n        }\r\n    }\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require (isOwner(),\"proxyOwner: caller must be the proxy owner and a contract and not expired\");\r\n        _;\r\n    }\r\n    function transferOrigin(address _newOrigin) public onlyOrigin\r\n    {\r\n        _setProxyOrigin(_newOrigin);\r\n    }\r\n    function _setProxyOrigin(address _newOrigin) internal \r\n    {\r\n        emit OriginTransferred(txOrigin(),_newOrigin);\r\n        bytes32 position = proxyOriginPosition;\r\n        assembly {\r\n            sstore(position, _newOrigin)\r\n        }\r\n    }\r\n    function txOrigin() public view returns (address _origin) {\r\n        bytes32 position = proxyOriginPosition;\r\n        assembly {\r\n            _origin := sload(position)\r\n        }\r\n    }\r\n    function ownerExpiredTime() public view returns (uint256 _expired) {\r\n        bytes32 position = ownerExpiredPosition;\r\n        assembly {\r\n            _expired := sload(position)\r\n        }\r\n    }\r\n    modifier originOnce() {\r\n        require (msg.sender == txOrigin(),\"proxyOwner: caller is not the tx origin!\");\r\n        uint256 key = oncePosition+uint32(msg.sig);\r\n        require (getValue(key)==0, \"proxyOwner : This function must be invoked only once!\");\r\n        saveValue(key,1);\r\n        _;\r\n    }\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == owner() && isContract(msg.sender);\r\n    }\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOrigin() {\r\n        require (msg.sender == txOrigin(),\"proxyOwner: caller is not the tx origin!\");\r\n        checkMultiSignature();\r\n        _;\r\n    }\r\n    modifier OwnerOrOrigin(){\r\n        if (isOwner()){\r\n        }else if(msg.sender == txOrigin()){\r\n            checkMultiSignature();\r\n        }else{\r\n            require(false,\"proxyOwner: caller is not owner or origin\");\r\n        }\r\n        _;\r\n    }\r\n    function _setVersion(uint256 version_) internal \r\n    {\r\n        bytes32 position = versionPositon;\r\n        assembly {\r\n            sstore(position, version_)\r\n        }\r\n    }\r\n    function version() public view returns(uint256 version_){\r\n        bytes32 position = versionPositon;\r\n        assembly {\r\n            version_ := sload(position)\r\n        }\r\n    }\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: contracts/PhoenixModules/proxyModules/initializable.sol\r\n\r\npragma solidity =0.5.16;\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract initializable {\r\n\r\n    /**\r\n    * @dev Indicates that the contract has been initialized.\r\n    */\r\n    bool private initialized;\r\n\r\n    /**\r\n    * @dev Indicates that the contract is in the process of being initialized.\r\n    */\r\n    bool private initializing;\r\n\r\n    /**\r\n    * @dev Modifier to use in the initializer function of a contract.\r\n    */\r\n    modifier initializer() {\r\n        require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n        bool wasInitializing = initializing;\r\n        initializing = true;\r\n        initialized = true;\r\n\r\n        _;\r\n        initializing = wasInitializing;\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        uint256 cs;\r\n        assembly { cs := extcodesize(address) }\r\n        return cs == 0;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/PhoenixModules/proxyModules/versionUpdater.sol\r\n\r\npragma solidity =0.5.16;\r\n/**\r\n * SPDX-License-Identifier: GPL-3.0-or-later\r\n * Phoenix\r\n * Copyright (C) 2020 Phoenix Options Protocol\r\n */\r\n\r\n\r\ncontract versionUpdater is proxyOwner,initializable {\r\n    function implementationVersion() public pure returns (uint256);\r\n    function initialize() public initializer versionUpdate {\r\n\r\n    }\r\n    modifier versionUpdate(){\r\n        require(implementationVersion() > version() &&  ownerExpiredTime()>now,\"New version implementation is already updated!\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/PhoenixModules/proxyModules/Halt.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\ncontract Halt is proxyOwner {\r\n    bool private halted = false; \r\n    \r\n    modifier notHalted() {\r\n        require(!halted,\"This contract is halted\");\r\n        _;\r\n    }\r\n\r\n    modifier isHalted() {\r\n        require(halted,\"This contract is not halted\");\r\n        _;\r\n    }\r\n    \r\n    /// @notice function Emergency situation that requires \r\n    /// @notice contribution period to stop or not.\r\n    function setHalt(bool halt) \r\n        public \r\n        onlyOrigin\r\n    {\r\n        halted = halt;\r\n    }\r\n}\r\n\r\n// File: contracts/PhoenixModules/TokenConverter/TokenConverterData.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n\r\ncontract TokenConverterData is versionUpdater,Halt {\r\n    uint256 constant internal currentVersion = 2;\r\n    function implementationVersion() public pure returns (uint256) \r\n    {\r\n        return currentVersion;\r\n    }\r\n    //the locjed reward info\r\n    struct lockedReward {\r\n        uint256 startTime; //this tx startTime for locking\r\n        uint256 total;     //record input amount in each lock tx    \r\n        mapping (uint256 => uint256) alloc;//the allocation table\r\n    }\r\n    \r\n    struct lockedIdx {\r\n        uint256 beginIdx;//the first index for user converting input claimable tx index \r\n        uint256 totalIdx;//the total number for converting tx\r\n    }\r\n    \r\n    address public cphxAddress; //cphx token address\r\n    address public phxAddress;  //phx token address\r\n    uint256 public timeSpan = 30*24*3600;//time interval span time ,default one month\r\n    uint256 public dispatchTimes = 6;    //allocation times,default 6 times\r\n    uint256 public txNum = 100; //100 times transfer tx \r\n    uint256 public lockPeriod = dispatchTimes*timeSpan;\r\n    \r\n    //the user's locked total balance\r\n    mapping (address => uint256) public lockedBalances;//locked balance for each user\r\n    \r\n    mapping (address =>  mapping (uint256 => lockedReward)) public lockedAllRewards;//converting tx record for each user\r\n    \r\n    mapping (address => lockedIdx) public lockedIndexs;//the converting tx index info\r\n\r\n    mapping (address => uint256[]) public userTxIdxs;//address idx number\r\n    /**\r\n     * @dev Emitted when `owner` locked  `amount` FPT, which net worth is  `worth` in USD. \r\n     */\r\n    event InputCphx(address indexed owner, uint256 indexed amount,uint256 indexed worth);\r\n    /**\r\n     * @dev Emitted when `owner` burned locked  `amount` FPT, which net worth is  `worth` in USD.\r\n     */\r\n    event Claimphx(address indexed owner, uint256 indexed amount,uint256 indexed worth);\r\n\r\n}\r\n\r\n// File: contracts/PhoenixModules/modules/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    uint256 constant internal calDecimal = 1e18; \r\n    function mulPrice(uint256 value,uint256[2] memory prices,uint8 id)internal pure returns(uint256){\r\n        return id == 0 ? div(mul(mul(prices[1],value),calDecimal),prices[0]) :\r\n            div(mul(mul(prices[0],value),calDecimal),prices[1]);\r\n    }\r\n    function divPrice(uint256 value,uint256[2] memory prices,uint8 id)internal pure returns(uint256){\r\n        return id == 0 ? div(div(mul(prices[0],value),calDecimal),prices[1]) :\r\n            div(div(mul(prices[1],value),calDecimal),prices[0]);\r\n    }\r\n}\r\n\r\n// File: contracts/PhoenixModules/ERC20/IERC20.sol\r\n\r\npragma solidity =0.5.16;\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n      /**\r\n     * EXTERNAL FUNCTION\r\n     *\r\n     * @dev change token name\r\n     * @param _name token name\r\n     * @param _symbol token symbol\r\n     *\r\n     */\r\n    function changeTokenName(string calldata _name, string calldata _symbol)external;\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/PhoenixModules/TokenConverter/TokenConverter.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title FPTCoin is finnexus collateral Pool token, implement ERC20 interface.\r\n * @dev ERC20 token. Its inside value is collatral pool net worth.\r\n *\r\n */\r\ncontract TokenConverter is TokenConverterData {\r\n    using SafeMath for uint256;\r\n    constructor (address multiSignature) proxyOwner(multiSignature) public{\r\n    }\r\n    modifier inited (){\r\n    \t  require(cphxAddress!=address(0));\r\n    \t  require(phxAddress!=address(0));\r\n    \t  _;\r\n    } \r\n\r\n\r\n    function update() versionUpdate public{\r\n    }\r\n    \r\n    /**\r\n     * @dev constructor function. set phx minePool contract address. \r\n     */ \r\n    function setParameter(address _cphxAddress,address _phxAddress,uint256 _timeSpan,uint256 _dispatchTimes,uint256 _txNum) originOnce public{\r\n        if (_cphxAddress != address(0))\r\n            cphxAddress = _cphxAddress;\r\n            \r\n        if (_phxAddress != address(0))\r\n            phxAddress = _phxAddress;\r\n            \r\n        if (_timeSpan != 0) \r\n            timeSpan = _timeSpan;\r\n            \r\n        if (_dispatchTimes != 0) \r\n            dispatchTimes = _dispatchTimes;\r\n        \r\n        if (_txNum != 0) \r\n            txNum = _txNum;   \r\n        lockPeriod = dispatchTimes*timeSpan;\r\n    }\r\n    \r\n    /**\r\n     * @dev getting back the left mine token\r\n     * @param reciever the reciever for getting back mine token\r\n     */\r\n    function getbackLeftphx(address reciever)  public onlyOrigin {\r\n        uint256 bal =  IERC20(phxAddress).balanceOf(address(this));\r\n        IERC20(phxAddress).transfer(reciever,bal);\r\n    }  \r\n\r\n    /**\r\n     * @dev Retrieve user's locked balance. \r\n     * @param account user's account.\r\n     */ \r\n    function lockedBalanceOf(address account) public view returns (uint256) {\r\n        return lockedBalances[account];\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev user input cnfx to get phx\r\n     * @param amount phx amount\r\n     */ \r\n    function inputCphxForInstallmentPay(uint256 amount) external inited {\r\n        require(amount>0,\"amount should be bigger than 0\");\r\n        \r\n        IERC20(cphxAddress).transferFrom(msg.sender,address(this),amount);\r\n        uint256 idx = now.div(24*3600);//lockedIndexs[msg.sender].totalIdx;\r\n\r\n        uint256 latest = userTxIdxs[msg.sender].length;\r\n        if(latest == 0 || userTxIdxs[msg.sender][latest-1]!=idx){\r\n            userTxIdxs[msg.sender].push(idx);\r\n        }\r\n\r\n        uint256 divAmount = amount.div(dispatchTimes);\r\n\r\n        if( lockedAllRewards[msg.sender][idx].total==0) {\r\n            lockedAllRewards[msg.sender][idx] = lockedReward(now,amount);\r\n        } else {\r\n            lockedAllRewards[msg.sender][idx].startTime = now;\r\n            lockedAllRewards[msg.sender][idx].total = lockedAllRewards[msg.sender][idx].total.add(amount);\r\n        }\r\n        \r\n        //index 0 to save the left token num\r\n        lockedAllRewards[msg.sender][idx].alloc[0] = lockedAllRewards[msg.sender][idx].alloc[0].add(amount.sub(divAmount));\r\n        uint256 i=2;\r\n        //idx = 1, the reward give user immediately\r\n        for(;i<dispatchTimes;i++){\r\n            lockedAllRewards[msg.sender][idx].alloc[i] = lockedAllRewards[msg.sender][idx].alloc[i].add(divAmount);\r\n        }\r\n        lockedAllRewards[msg.sender][idx].alloc[i] = lockedAllRewards[msg.sender][idx].alloc[i].add(amount.sub(divAmount.mul(dispatchTimes-1)));\r\n\r\n        lockedBalances[msg.sender] = lockedBalances[msg.sender].add(amount.sub(divAmount));\r\n\r\n        IERC20(phxAddress).transfer(msg.sender,divAmount);\r\n\r\n        emit InputCphx(msg.sender,amount,divAmount);\r\n    }\r\n    \r\n      /**\r\n     * @dev user user claim expired reward\r\n     */ \r\n    function claimphxExpiredReward() external inited {\r\n        require(phxAddress!=address(0),\"phx token should be set\");\r\n        \r\n        uint256 txcnt = 0;\r\n        uint256 idx = lockedIndexs[msg.sender].beginIdx;\r\n        uint256 endIdx = userTxIdxs[msg.sender].length;\r\n        uint256 totalRet = 0;\r\n\r\n        uint256 pretxid = 0;\r\n        for(;idx<endIdx && txcnt<txNum;idx++) {\r\n           //i used for the user input cphx tx idx,too much i used before,no changed now\r\n           uint256 i = userTxIdxs[msg.sender][idx];\r\n           if(i!=pretxid){\r\n                pretxid = i;\r\n            } else {\r\n                continue;\r\n           }\r\n\r\n           if (now >= lockedAllRewards[msg.sender][i].startTime + timeSpan) {\r\n               if (lockedAllRewards[msg.sender][i].alloc[0] > 0) {\r\n                    if (now >= lockedAllRewards[msg.sender][i].startTime + lockPeriod) {\r\n                        totalRet = totalRet.add(lockedAllRewards[msg.sender][i].alloc[0]);\r\n                        lockedAllRewards[msg.sender][i].alloc[0] = 0;\r\n                        //updated last expired idx\r\n                        lockedIndexs[msg.sender].beginIdx = idx;\r\n                    } else {\r\n                      \r\n                        uint256 timeIdx = (now - lockedAllRewards[msg.sender][i].startTime).div(timeSpan) + 1;\r\n                        uint256 j = 2;\r\n                        uint256 subtotal = 0;\r\n                        for(;j<timeIdx+1;j++) {\r\n                            subtotal = subtotal.add(lockedAllRewards[msg.sender][i].alloc[j]);\r\n                            lockedAllRewards[msg.sender][i].alloc[j] = 0;\r\n                        }\r\n                        \r\n                        //updated left locked balance,possible?\r\n                        if(subtotal<=lockedAllRewards[msg.sender][i].alloc[0]){\r\n                            lockedAllRewards[msg.sender][i].alloc[0] = lockedAllRewards[msg.sender][i].alloc[0].sub(subtotal);\r\n                        } else {\r\n                            subtotal = lockedAllRewards[msg.sender][i].alloc[0];\r\n                            lockedAllRewards[msg.sender][i].alloc[0] = 0;\r\n                        }\r\n                        \r\n                        totalRet = totalRet.add(subtotal);\r\n                    }\r\n                    \r\n                    txcnt = txcnt + 1;\r\n               }\r\n                \r\n           } else {\r\n               //the item after this one is pushed behind this,not needed to caculate\r\n               break;\r\n           }\r\n        }\r\n        \r\n        lockedBalances[msg.sender] = lockedBalances[msg.sender].sub(totalRet);\r\n        //transfer back to user\r\n        IERC20(phxAddress).transfer(msg.sender,totalRet);\r\n        \r\n        emit Claimphx(msg.sender,totalRet,txcnt);\r\n    }\r\n    \r\n      /**\r\n     * @dev get user claimable balance\r\n     * @param _user the user address\r\n     */ \r\n    function getClaimAbleBalance(address _user) public view returns (uint256) {\r\n        require(phxAddress!=address(0),\"phx token should be set\");\r\n        \r\n        uint256 txcnt = 0;\r\n        uint256 idx = lockedIndexs[_user].beginIdx;\r\n       //uint256 endIdx = lockedIndexs[_user].totalIdx;\r\n        uint256 endIdx = userTxIdxs[_user].length;\r\n        uint256 totalRet = 0;\r\n        uint256 pretxid = 0;\r\n\r\n        for(;idx<endIdx && txcnt<txNum;idx++) {\r\n            uint256 i = userTxIdxs[_user][idx];\r\n            if(i!=pretxid){\r\n                pretxid = i;\r\n            } else {\r\n                continue;\r\n            }\r\n           //only count the rewards over at least one timeSpan\r\n           if (now >= lockedAllRewards[_user][i].startTime + timeSpan) {\r\n               \r\n               if (lockedAllRewards[_user][i].alloc[0] > 0) {\r\n                    if (now >= lockedAllRewards[_user][i].startTime + lockPeriod) {\r\n                        totalRet = totalRet.add(lockedAllRewards[_user][i].alloc[0]);\r\n                    } else {\r\n                        uint256 timeIdx = (now - lockedAllRewards[_user][i].startTime).div(timeSpan) + 1;\r\n                        uint256 j = 2;\r\n                        uint256 subtotal = 0;\r\n                        for(;j<timeIdx+1;j++) {\r\n                            subtotal = subtotal.add(lockedAllRewards[_user][i].alloc[j]);\r\n                        }\r\n                        \r\n                        //updated left locked balance,possible?\r\n                        if(subtotal>lockedAllRewards[_user][i].alloc[0]){\r\n                            subtotal = lockedAllRewards[_user][i].alloc[0];\r\n                        }\r\n                        \r\n                        totalRet = totalRet.add(subtotal);\r\n                    }\r\n                    \r\n                    txcnt = txcnt + 1;\r\n               }\r\n                \r\n           } else {\r\n               //the item after this one is pushed behind this,not needed to caculate\r\n               break;\r\n           }\r\n        }\r\n        \r\n        return totalRet;\r\n    }\r\n\r\n\r\n    function getUserConvertRecords(address _user)\r\n            public\r\n            view\r\n            returns\r\n    (uint256,uint256[] memory,uint256[] memory) {\r\n        uint256 idx = lockedIndexs[_user].beginIdx;\r\n        //uint256 endIdx = userTxIdxs[_user].length;\r\n        uint256 len = (userTxIdxs[_user].length - idx);\r\n        uint256 retidx = 0;\r\n        uint256 pretxid = 0;\r\n\r\n        uint256[] memory retStArr = new uint256[]((dispatchTimes+1)*len);\r\n        uint256[] memory retAllocArr = new uint256[]((dispatchTimes+1)*len);\r\n\r\n        for(;idx<userTxIdxs[_user].length;idx++) {\r\n            uint256 i = userTxIdxs[_user][idx];\r\n\r\n            if(i!=pretxid){\r\n                pretxid = i;\r\n            } else {\r\n                continue;\r\n            }\r\n\r\n            for(uint256 j=0;j<=dispatchTimes;j++) {\r\n                retAllocArr[retidx*(dispatchTimes+1)+j] = lockedAllRewards[_user][i].alloc[j];\r\n                if(j==0) {\r\n                    retStArr[retidx*(dispatchTimes+1)+j] = 0;\r\n                } else {\r\n                    retStArr[retidx*(dispatchTimes+1)+j] = lockedAllRewards[_user][i].startTime.add(timeSpan*(j-1));\r\n                }\r\n            }\r\n            retidx++;\r\n        }\r\n\r\n        return (dispatchTimes+1,retStArr,retAllocArr);\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"multiSignature\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"worth\",\"type\":\"uint256\"}],\"name\":\"Claimphx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value1\",\"type\":\"uint256\"}],\"name\":\"DebugEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"worth\",\"type\":\"uint256\"}],\"name\":\"InputCphx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOrigin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOrigin\",\"type\":\"address\"}],\"name\":\"OriginTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimphxExpiredReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cphxAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dispatchTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getClaimAbleBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMultiSignatureAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserConvertRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"reciever\",\"type\":\"address\"}],\"name\":\"getbackLeftphx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementationVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"inputCphxForInstallmentPay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedAllRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedIndexs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beginIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalIdx\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerExpiredTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_expired\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phxAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"halt\",\"type\":\"bool\"}],\"name\":\"setHalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cphxAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_phxAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timeSpan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dispatchTimes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_txNum\",\"type\":\"uint256\"}],\"name\":\"setParameter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeSpan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOrigin\",\"type\":\"address\"}],\"name\":\"transferOrigin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"txNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"txOrigin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_origin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userTxIdxs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"version_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TokenConverter","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000994a8c8d38718dc67fa2514cfcfeb16f96b2a144","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://1e7dcac8a6bdb75af1bfd0d3e4f3e99309fbb7bfdc9c124de88adba91b08921a"}]}