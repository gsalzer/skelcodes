{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/price/PriceModuleV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.7.0;\\nimport \\\"./ChainlinkService.sol\\\";\\nimport \\\"../interfaces/IAddressProvider.sol\\\";\\nimport \\\"../interfaces/IRegistry.sol\\\";\\nimport \\\"../interfaces/yearn/IVault.sol\\\";\\nimport \\\"../interfaces/IYieldsterVault.sol\\\";\\nimport \\\"../interfaces/IYieldsterStrategy.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/upgrades-core/contracts/Initializable.sol\\\";\\n\\ncontract PriceModuleV3 is ChainlinkService, Initializable {\\n    using SafeMath for uint256;\\n\\n    address public priceModuleManager;\\n\\n    address public curveAddressProvider;\\n\\n    struct Token {\\n        address feedAddress;\\n        uint256 tokenType;\\n        bool created;\\n    }\\n\\n    mapping(address => Token) tokens;\\n\\n    function initialize() public {\\n        priceModuleManager = msg.sender;\\n        curveAddressProvider = 0x0000000022D53366457F9d5E68Ec105046FC4383;\\n    }\\n\\n    function changeCurveAddressProvider(address _crvAddressProvider) external {\\n        require(msg.sender == priceModuleManager, \\\"Not Authorized\\\");\\n        curveAddressProvider = _crvAddressProvider;\\n    }\\n\\n    function setManager(address _manager) external {\\n        require(msg.sender == priceModuleManager, \\\"Not Authorized\\\");\\n        priceModuleManager = _manager;\\n    }\\n\\n    function addToken(\\n        address _tokenAddress,\\n        address _feedAddress,\\n        uint256 _tokenType\\n    ) external {\\n        require(msg.sender == priceModuleManager, \\\"Not Authorized\\\");\\n        Token memory newToken = Token({\\n            feedAddress: _feedAddress,\\n            tokenType: _tokenType,\\n            created: true\\n        });\\n        tokens[_tokenAddress] = newToken;\\n    }\\n\\n    function addTokenInBatches(\\n        address[] memory _tokenAddress,\\n        address[] memory _feedAddress,\\n        uint256[] memory _tokenType\\n    ) external {\\n        require(msg.sender == priceModuleManager, \\\"Not Authorized\\\");\\n        for (uint256 i = 0; i < _tokenAddress.length; i++) {\\n            Token memory newToken = Token({\\n                feedAddress: address(_feedAddress[i]),\\n                tokenType: _tokenType[i],\\n                created: true\\n            });\\n            tokens[address(_tokenAddress[i])] = newToken;\\n        }\\n    }\\n\\n    function getPriceFromChainlink(address _feedAddress)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (int256 price, , uint8 decimals) = getLatestPrice(_feedAddress);\\n        if (decimals < 18) {\\n            return (uint256(price)).mul(10**uint256(18 - decimals));\\n        } else if (decimals > 18) {\\n            return (uint256(price)).div(uint256(decimals - 18));\\n        } else {\\n            return uint256(price);\\n        }\\n    }\\n\\n    function getUSDPrice(address _tokenAddress) public view returns (uint256) {\\n        require(tokens[_tokenAddress].created, \\\"Token not present\\\");\\n\\n        if (tokens[_tokenAddress].tokenType == 1) {\\n            return getPriceFromChainlink(tokens[_tokenAddress].feedAddress);\\n        } else if (tokens[_tokenAddress].tokenType == 2) {\\n            return\\n                IRegistry(IAddressProvider(curveAddressProvider).get_registry())\\n                    .get_virtual_price_from_lp_token(_tokenAddress);\\n        } else if (tokens[_tokenAddress].tokenType == 3) {\\n            address token = IVault(_tokenAddress).token();\\n            uint256 tokenPrice = getUSDPrice(token);\\n            return\\n                (tokenPrice.mul(IVault(_tokenAddress).pricePerShare())).div(\\n                    1e18\\n                );\\n        } else if (tokens[_tokenAddress].tokenType == 4) {\\n            return IYieldsterStrategy(_tokenAddress).tokenValueInUSD();\\n        } else if (tokens[_tokenAddress].tokenType == 5) {\\n            return IYieldsterVault(_tokenAddress).tokenValueInUSD();\\n        } else if (tokens[_tokenAddress].tokenType == 6) {\\n            uint256 priceInEther = getPriceFromChainlink(\\n                tokens[_tokenAddress].feedAddress\\n            );\\n            uint256 etherToUSD = getUSDPrice(address(0));\\n            return (priceInEther.mul(etherToUSD)).div(1e18);\\n        } else if (tokens[_tokenAddress].tokenType == 7) {\\n            uint256 lpPriceEuro = IRegistry(\\n                IAddressProvider(curveAddressProvider).get_registry()\\n            ).get_virtual_price_from_lp_token(_tokenAddress);\\n            uint256 euroToUSD = getUSDPrice(\\n                address(0xb49f677943BC038e9857d61E7d053CaA2C1734C1)\\n            );\\n            return (lpPriceEuro.mul(euroToUSD)).div(1e18);\\n        }\\n        else if (tokens[_tokenAddress].tokenType ==8) {\\n            uint256 lpPriceBTC = IRegistry(\\n                IAddressProvider(curveAddressProvider).get_registry()\\n            ).get_virtual_price_from_lp_token(_tokenAddress);\\n            uint256 btcToUSD = getUSDPrice(\\n                address(0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c)\\n            );\\n            return (lpPriceBTC.mul(btcToUSD)).div(1e18);\\n        } else revert(\\\"Token not present\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/price/ChainlinkService.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0 <0.7.0;\\nimport \\\"@chainlink/contracts/src/v0.5/interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract ChainlinkService {  \\n  \\n    function getLatestPrice(address feedAddress) \\n        public \\n        view \\n        returns (int, uint, uint8) \\n    {\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(feedAddress);\\n        ( ,int price, ,uint timeStamp, ) = priceFeed.latestRoundData();\\n        uint8 decimal = priceFeed.decimals();\\n        return (price, timeStamp, decimal);\\n    }\\n}\"\r\n    },\r\n    \"./contracts/interfaces/IAddressProvider.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0 <0.7.0;\\n\\ninterface IAddressProvider {\\n    function get_registry() external view returns (address);\\n\\n    function get_address(uint256) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"./contracts/interfaces/IRegistry.sol\": {\r\n      \"content\": \"\\npragma solidity >=0.5.0 <0.7.0;\\n\\ninterface IRegistry {\\n    \\n    function get_virtual_price_from_lp_token(address) external view returns(uint256);\\n\\n}\\n\"\r\n    },\r\n    \"./contracts/interfaces/yearn/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0 <0.7.0;\\n\\ninterface IVault {\\n    function token() external view returns (address);\\n\\n    function underlying() external view returns (address);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function controller() external view returns (address);\\n\\n    function governance() external view returns (address);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function deposit(uint256) external;\\n\\n    function depositAll() external;\\n\\n    function withdraw(uint256) external;\\n\\n    function withdrawAll() external;\\n}\\n\"\r\n    },\r\n    \"./contracts/interfaces/IYieldsterVault.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0 <0.7.0;\\n\\ninterface IYieldsterVault {\\n    \\n    function tokenValueInUSD() external view returns(uint256);\\n\\n}\\n\"\r\n    },\r\n    \"./contracts/interfaces/IYieldsterStrategy.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0 <0.7.0;\\n\\ninterface IYieldsterStrategy {\\n    \\n    function tokenValueInUSD() external view returns(uint256);\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades-core/contracts/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.5/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenType\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenAddress\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_feedAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenType\",\"type\":\"uint256[]\"}],\"name\":\"addTokenInBatches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_crvAddressProvider\",\"type\":\"address\"}],\"name\":\"changeCurveAddressProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveAddressProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feedAddress\",\"type\":\"address\"}],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getUSDPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceModuleManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PriceModuleV3","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://818ebffb19ab57d99b578ed01f6e2db5a84c6f43f296a2ec57f6a55d0a5733a2"}]}