{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n// File: contracts\\interfaces\\IWitnetRequestBoardEvents.sol\r\n/// @title Witnet Request Board emitting events interface.\r\n/// @author The Witnet Foundation.\r\ninterface IWitnetRequestBoardEvents {\r\n    /// Emitted when a Witnet Data Request is posted to the WRB.\r\n    event PostedRequest(uint256 queryId, address from);\r\n\r\n    /// Emitted when a Witnet-solved result is reported to the WRB.\r\n    event PostedResult(uint256 queryId, address from);\r\n\r\n    /// Emitted when all data related to given query is deleted from the WRB.\r\n    event DeletedQuery(uint256 queryId, address from);\r\n}\r\n// File: contracts\\interfaces\\IWitnetRequestBoardReporter.sol\r\n/// @title The Witnet Request Board Reporter interface.\r\n/// @author The Witnet Foundation.\r\ninterface IWitnetRequestBoardReporter {\r\n    /// Reports the Witnet-provided result to a previously posted request. \r\n    /// @dev Will assume `block.timestamp` as the timestamp at which the request was solved.\r\n    /// @dev Fails if:\r\n    /// @dev - the `_queryId` is not in 'Posted' status.\r\n    /// @dev - provided `_drTxHash` is zero;\r\n    /// @dev - length of provided `_result` is zero.\r\n    /// @param _queryId The unique identifier of the data request.\r\n    /// @param _drTxHash The hash of the solving tally transaction in Witnet.\r\n    /// @param _result The result itself as bytes.\r\n    function reportResult(uint256 _queryId, bytes32 _drTxHash, bytes calldata _result) external;\r\n\r\n    /// Reports the Witnet-provided result to a previously posted request.\r\n    /// @dev Fails if:\r\n    /// @dev - called from unauthorized address;\r\n    /// @dev - the `_queryId` is not in 'Posted' status.\r\n    /// @dev - provided `_drTxHash` is zero;\r\n    /// @dev - length of provided `_result` is zero.\r\n    /// @param _queryId The unique query identifier\r\n    /// @param _timestamp The timestamp of the solving tally transaction in Witnet.\r\n    /// @param _drTxHash The hash of the solving tally transaction in Witnet.\r\n    /// @param _result The result itself as bytes.\r\n    function reportResult(uint256 _queryId, uint256 _timestamp, bytes32 _drTxHash, bytes calldata _result) external;\r\n}\r\n// File: contracts\\interfaces\\IWitnetRequest.sol\r\n/// @title The Witnet Data Request basic interface.\r\n/// @author The Witnet Foundation.\r\ninterface IWitnetRequest {\r\n    /// A `IWitnetRequest` is constructed around a `bytes` value containing \r\n    /// a well-formed Witnet Data Request using Protocol Buffers.\r\n    function bytecode() external view returns (bytes memory);\r\n\r\n    /// Returns SHA256 hash of Witnet Data Request as CBOR-encoded bytes.\r\n    function hash() external view returns (bytes32);\r\n}\r\n// File: contracts\\libs\\Witnet.sol\r\nlibrary Witnet {\r\n\r\n    /// @notice Witnet function that computes the hash of a CBOR-encoded Data Request.\r\n    /// @param _bytecode CBOR-encoded RADON.\r\n    function hash(bytes memory _bytecode) internal pure returns (bytes32) {\r\n        return sha256(_bytecode);\r\n    }\r\n\r\n    /// Struct containing both request and response data related to every query posted to the Witnet Request Board\r\n    struct Query {\r\n        Request request;\r\n        Response response;\r\n    }\r\n\r\n    /// Possible status of a Witnet query.\r\n    enum QueryStatus {\r\n        Unknown,\r\n        Posted,\r\n        Reported,\r\n        Deleted\r\n    }\r\n\r\n    /// Data kept in EVM-storage for every Request posted to the Witnet Request Board.\r\n    struct Request {\r\n        IWitnetRequest addr;    // The contract containing the Data Request which execution has been requested.\r\n        address requester;      // Address from which the request was posted.\r\n        bytes32 hash;           // Hash of the Data Request whose execution has been requested.\r\n        uint256 gasprice;       // Minimum gas price the DR resolver should pay on the solving tx.\r\n        uint256 reward;         // Escrowed reward to be paid to the DR resolver.\r\n    }\r\n\r\n    /// Data kept in EVM-storage containing Witnet-provided response metadata and result.\r\n    struct Response {\r\n        address reporter;       // Address from which the result was reported.\r\n        uint256 timestamp;      // Timestamp of the Witnet-provided result.\r\n        bytes32 drTxHash;       // Hash of the Witnet transaction that solved the queried Data Request.\r\n        bytes   cborBytes;      // Witnet-provided result CBOR-bytes to the queried Data Request.\r\n    }\r\n\r\n    /// Data struct containing the Witnet-provided result to a Data Request.\r\n    struct Result {\r\n        bool success;           // Flag stating whether the request could get solved successfully, or not.\r\n        CBOR value;             // Resulting value, in CBOR-serialized bytes.\r\n    }\r\n\r\n    /// Data struct following the RFC-7049 standard: Concise Binary Object Representation.\r\n    struct CBOR {\r\n        Buffer buffer;\r\n        uint8 initialByte;\r\n        uint8 majorType;\r\n        uint8 additionalInformation;\r\n        uint64 len;\r\n        uint64 tag;\r\n    }\r\n\r\n    /// Iterable bytes buffer.\r\n    struct Buffer {\r\n        bytes data;\r\n        uint32 cursor;\r\n    }\r\n\r\n    /// Witnet error codes table.\r\n    enum ErrorCodes {\r\n        // 0x00: Unknown error. Something went really bad!\r\n        Unknown,\r\n        // Script format errors\r\n        /// 0x01: At least one of the source scripts is not a valid CBOR-encoded value.\r\n        SourceScriptNotCBOR,\r\n        /// 0x02: The CBOR value decoded from a source script is not an Array.\r\n        SourceScriptNotArray,\r\n        /// 0x03: The Array value decoded form a source script is not a valid Data Request.\r\n        SourceScriptNotRADON,\r\n        /// Unallocated\r\n        ScriptFormat0x04,\r\n        ScriptFormat0x05,\r\n        ScriptFormat0x06,\r\n        ScriptFormat0x07,\r\n        ScriptFormat0x08,\r\n        ScriptFormat0x09,\r\n        ScriptFormat0x0A,\r\n        ScriptFormat0x0B,\r\n        ScriptFormat0x0C,\r\n        ScriptFormat0x0D,\r\n        ScriptFormat0x0E,\r\n        ScriptFormat0x0F,\r\n        // Complexity errors\r\n        /// 0x10: The request contains too many sources.\r\n        RequestTooManySources,\r\n        /// 0x11: The script contains too many calls.\r\n        ScriptTooManyCalls,\r\n        /// Unallocated\r\n        Complexity0x12,\r\n        Complexity0x13,\r\n        Complexity0x14,\r\n        Complexity0x15,\r\n        Complexity0x16,\r\n        Complexity0x17,\r\n        Complexity0x18,\r\n        Complexity0x19,\r\n        Complexity0x1A,\r\n        Complexity0x1B,\r\n        Complexity0x1C,\r\n        Complexity0x1D,\r\n        Complexity0x1E,\r\n        Complexity0x1F,\r\n        // Operator errors\r\n        /// 0x20: The operator does not exist.\r\n        UnsupportedOperator,\r\n        /// Unallocated\r\n        Operator0x21,\r\n        Operator0x22,\r\n        Operator0x23,\r\n        Operator0x24,\r\n        Operator0x25,\r\n        Operator0x26,\r\n        Operator0x27,\r\n        Operator0x28,\r\n        Operator0x29,\r\n        Operator0x2A,\r\n        Operator0x2B,\r\n        Operator0x2C,\r\n        Operator0x2D,\r\n        Operator0x2E,\r\n        Operator0x2F,\r\n        // Retrieval-specific errors\r\n        /// 0x30: At least one of the sources could not be retrieved, but returned HTTP error.\r\n        HTTP,\r\n        /// 0x31: Retrieval of at least one of the sources timed out.\r\n        RetrievalTimeout,\r\n        /// Unallocated\r\n        Retrieval0x32,\r\n        Retrieval0x33,\r\n        Retrieval0x34,\r\n        Retrieval0x35,\r\n        Retrieval0x36,\r\n        Retrieval0x37,\r\n        Retrieval0x38,\r\n        Retrieval0x39,\r\n        Retrieval0x3A,\r\n        Retrieval0x3B,\r\n        Retrieval0x3C,\r\n        Retrieval0x3D,\r\n        Retrieval0x3E,\r\n        Retrieval0x3F,\r\n        // Math errors\r\n        /// 0x40: Math operator caused an underflow.\r\n        Underflow,\r\n        /// 0x41: Math operator caused an overflow.\r\n        Overflow,\r\n        /// 0x42: Tried to divide by zero.\r\n        DivisionByZero,\r\n        /// Unallocated\r\n        Math0x43,\r\n        Math0x44,\r\n        Math0x45,\r\n        Math0x46,\r\n        Math0x47,\r\n        Math0x48,\r\n        Math0x49,\r\n        Math0x4A,\r\n        Math0x4B,\r\n        Math0x4C,\r\n        Math0x4D,\r\n        Math0x4E,\r\n        Math0x4F,\r\n        // Other errors\r\n        /// 0x50: Received zero reveals\r\n        NoReveals,\r\n        /// 0x51: Insufficient consensus in tally precondition clause\r\n        InsufficientConsensus,\r\n        /// 0x52: Received zero commits\r\n        InsufficientCommits,\r\n        /// 0x53: Generic error during tally execution\r\n        TallyExecution,\r\n        /// Unallocated\r\n        OtherError0x54,\r\n        OtherError0x55,\r\n        OtherError0x56,\r\n        OtherError0x57,\r\n        OtherError0x58,\r\n        OtherError0x59,\r\n        OtherError0x5A,\r\n        OtherError0x5B,\r\n        OtherError0x5C,\r\n        OtherError0x5D,\r\n        OtherError0x5E,\r\n        OtherError0x5F,\r\n        /// 0x60: Invalid reveal serialization (malformed reveals are converted to this value)\r\n        MalformedReveal,\r\n        /// Unallocated\r\n        OtherError0x61,\r\n        OtherError0x62,\r\n        OtherError0x63,\r\n        OtherError0x64,\r\n        OtherError0x65,\r\n        OtherError0x66,\r\n        OtherError0x67,\r\n        OtherError0x68,\r\n        OtherError0x69,\r\n        OtherError0x6A,\r\n        OtherError0x6B,\r\n        OtherError0x6C,\r\n        OtherError0x6D,\r\n        OtherError0x6E,\r\n        OtherError0x6F,\r\n        // Access errors\r\n        /// 0x70: Tried to access a value from an index using an index that is out of bounds\r\n        ArrayIndexOutOfBounds,\r\n        /// 0x71: Tried to access a value from a map using a key that does not exist\r\n        MapKeyNotFound,\r\n        /// Unallocated\r\n        OtherError0x72,\r\n        OtherError0x73,\r\n        OtherError0x74,\r\n        OtherError0x75,\r\n        OtherError0x76,\r\n        OtherError0x77,\r\n        OtherError0x78,\r\n        OtherError0x79,\r\n        OtherError0x7A,\r\n        OtherError0x7B,\r\n        OtherError0x7C,\r\n        OtherError0x7D,\r\n        OtherError0x7E,\r\n        OtherError0x7F,\r\n        OtherError0x80,\r\n        OtherError0x81,\r\n        OtherError0x82,\r\n        OtherError0x83,\r\n        OtherError0x84,\r\n        OtherError0x85,\r\n        OtherError0x86,\r\n        OtherError0x87,\r\n        OtherError0x88,\r\n        OtherError0x89,\r\n        OtherError0x8A,\r\n        OtherError0x8B,\r\n        OtherError0x8C,\r\n        OtherError0x8D,\r\n        OtherError0x8E,\r\n        OtherError0x8F,\r\n        OtherError0x90,\r\n        OtherError0x91,\r\n        OtherError0x92,\r\n        OtherError0x93,\r\n        OtherError0x94,\r\n        OtherError0x95,\r\n        OtherError0x96,\r\n        OtherError0x97,\r\n        OtherError0x98,\r\n        OtherError0x99,\r\n        OtherError0x9A,\r\n        OtherError0x9B,\r\n        OtherError0x9C,\r\n        OtherError0x9D,\r\n        OtherError0x9E,\r\n        OtherError0x9F,\r\n        OtherError0xA0,\r\n        OtherError0xA1,\r\n        OtherError0xA2,\r\n        OtherError0xA3,\r\n        OtherError0xA4,\r\n        OtherError0xA5,\r\n        OtherError0xA6,\r\n        OtherError0xA7,\r\n        OtherError0xA8,\r\n        OtherError0xA9,\r\n        OtherError0xAA,\r\n        OtherError0xAB,\r\n        OtherError0xAC,\r\n        OtherError0xAD,\r\n        OtherError0xAE,\r\n        OtherError0xAF,\r\n        OtherError0xB0,\r\n        OtherError0xB1,\r\n        OtherError0xB2,\r\n        OtherError0xB3,\r\n        OtherError0xB4,\r\n        OtherError0xB5,\r\n        OtherError0xB6,\r\n        OtherError0xB7,\r\n        OtherError0xB8,\r\n        OtherError0xB9,\r\n        OtherError0xBA,\r\n        OtherError0xBB,\r\n        OtherError0xBC,\r\n        OtherError0xBD,\r\n        OtherError0xBE,\r\n        OtherError0xBF,\r\n        OtherError0xC0,\r\n        OtherError0xC1,\r\n        OtherError0xC2,\r\n        OtherError0xC3,\r\n        OtherError0xC4,\r\n        OtherError0xC5,\r\n        OtherError0xC6,\r\n        OtherError0xC7,\r\n        OtherError0xC8,\r\n        OtherError0xC9,\r\n        OtherError0xCA,\r\n        OtherError0xCB,\r\n        OtherError0xCC,\r\n        OtherError0xCD,\r\n        OtherError0xCE,\r\n        OtherError0xCF,\r\n        OtherError0xD0,\r\n        OtherError0xD1,\r\n        OtherError0xD2,\r\n        OtherError0xD3,\r\n        OtherError0xD4,\r\n        OtherError0xD5,\r\n        OtherError0xD6,\r\n        OtherError0xD7,\r\n        OtherError0xD8,\r\n        OtherError0xD9,\r\n        OtherError0xDA,\r\n        OtherError0xDB,\r\n        OtherError0xDC,\r\n        OtherError0xDD,\r\n        OtherError0xDE,\r\n        OtherError0xDF,\r\n        // Bridge errors: errors that only belong in inter-client communication\r\n        /// 0xE0: Requests that cannot be parsed must always get this error as their result.\r\n        /// However, this is not a valid result in a Tally transaction, because invalid requests\r\n        /// are never included into blocks and therefore never get a Tally in response.\r\n        BridgeMalformedRequest,\r\n        /// 0xE1: Witnesses exceeds 100\r\n        BridgePoorIncentives,\r\n        /// 0xE2: The request is rejected on the grounds that it may cause the submitter to spend or stake an\r\n        /// amount of value that is unjustifiably high when compared with the reward they will be getting\r\n        BridgeOversizedResult,\r\n        /// Unallocated\r\n        OtherError0xE3,\r\n        OtherError0xE4,\r\n        OtherError0xE5,\r\n        OtherError0xE6,\r\n        OtherError0xE7,\r\n        OtherError0xE8,\r\n        OtherError0xE9,\r\n        OtherError0xEA,\r\n        OtherError0xEB,\r\n        OtherError0xEC,\r\n        OtherError0xED,\r\n        OtherError0xEE,\r\n        OtherError0xEF,\r\n        OtherError0xF0,\r\n        OtherError0xF1,\r\n        OtherError0xF2,\r\n        OtherError0xF3,\r\n        OtherError0xF4,\r\n        OtherError0xF5,\r\n        OtherError0xF6,\r\n        OtherError0xF7,\r\n        OtherError0xF8,\r\n        OtherError0xF9,\r\n        OtherError0xFA,\r\n        OtherError0xFB,\r\n        OtherError0xFC,\r\n        OtherError0xFD,\r\n        OtherError0xFE,\r\n        // This should not exist:\r\n        /// 0xFF: Some tally error is not intercepted but should\r\n        UnhandledIntercept\r\n    }\r\n}\r\n// File: contracts\\interfaces\\IWitnetRequestBoardRequestor.sol\r\n/// @title Witnet Requestor Interface\r\n/// @notice It defines how to interact with the Witnet Request Board in order to:\r\n///   - request the execution of Witnet Radon scripts (data request);\r\n///   - upgrade the resolution reward of any previously posted request, in case gas price raises in mainnet;\r\n///   - read the result of any previously posted request, eventually reported by the Witnet DON.\r\n///   - remove from storage all data related to past and solved data requests, and results.\r\n/// @author The Witnet Foundation.\r\ninterface IWitnetRequestBoardRequestor {\r\n    /// Retrieves a copy of all Witnet-provided data related to a previously posted request, removing the whole query from the WRB storage.\r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status, or called from an address different to\r\n    /// @dev the one that actually posted the given request.\r\n    /// @param _queryId The unique query identifier.\r\n    function deleteQuery(uint256 _queryId) external returns (Witnet.Response memory);\r\n\r\n    /// Requests the execution of the given Witnet Data Request in expectation that it will be relayed and solved by the Witnet DON.\r\n    /// A reward amount is escrowed by the Witnet Request Board that will be transferred to the reporter who relays back the Witnet-provided \r\n    /// result to this request.\r\n    /// @dev Fails if:\r\n    /// @dev - provided reward is too low.\r\n    /// @dev - provided script is zero address.\r\n    /// @dev - provided script bytecode is empty.\r\n    /// @param _addr The address of the IWitnetRequest contract that can provide the actual Data Request bytecode.\r\n    /// @return _queryId An unique query identifier.\r\n    function postRequest(IWitnetRequest _addr) external payable returns (uint256 _queryId);\r\n\r\n    /// Increments the reward of a previously posted request by adding the transaction value to it.\r\n    /// @dev Updates request `gasPrice` in case this method is called with a higher \r\n    /// @dev gas price value than the one used in previous calls to `postRequest` or\r\n    /// @dev `upgradeReward`. \r\n    /// @dev Fails if the `_queryId` is not in 'Posted' status.\r\n    /// @dev Fails also in case the request `gasPrice` is increased, and the new \r\n    /// @dev reward value gets below new recalculated threshold. \r\n    /// @param _queryId The unique query identifier.\r\n    function upgradeReward(uint256 _queryId) external payable;\r\n}\r\n// File: contracts\\interfaces\\IWitnetRequestBoardView.sol\r\n/// @title Witnet Request Board info interface.\r\n/// @author The Witnet Foundation.\r\ninterface IWitnetRequestBoardView {\r\n    /// Estimates the amount of reward we need to insert for a given gas price.\r\n    /// @param _gasPrice The gas price for which we need to calculate the rewards.\r\n    function estimateReward(uint256 _gasPrice) external view returns (uint256);\r\n\r\n    /// Returns next query id to be generated by the Witnet Request Board.\r\n    function getNextQueryId() external view returns (uint256);\r\n\r\n    /// Gets the whole Query data contents, if any, no matter its current status.\r\n    function getQueryData(uint256 _queryId) external view returns (Witnet.Query memory);\r\n\r\n    /// Gets current status of given query.\r\n    function getQueryStatus(uint256 _queryId) external view returns (Witnet.QueryStatus);\r\n\r\n    /// Retrieves the whole `Witnet.Request` record referred to a previously posted Witnet Data Request.\r\n    /// @dev Fails if the `_queryId` is not valid or, if it has been deleted,\r\n    /// @dev or if the related script bytecode got changed after being posted.\r\n    /// @param _queryId The unique query identifier.\r\n    function readRequest(uint256 _queryId) external view returns (Witnet.Request memory);\r\n\r\n    /// Retrieves the serialized bytecode of a previously posted Witnet Data Request.\r\n    /// @dev Fails if the `_queryId` is not valid or, if it has been deleted,\r\n    /// @dev or if the related script bytecode got changed after being posted.\r\n    /// @param _queryId The unique query identifier.\r\n    function readRequestBytecode(uint256 _queryId) external view returns (bytes memory);\r\n\r\n    /// Retrieves the gas price that any assigned reporter will have to pay when reporting result \r\n    /// to the referred query.\r\n    /// @dev Fails if the `_queryId` is not valid or, if it has been deleted,\r\n    /// @dev or if the related script bytecode got changed after being posted.\r\n    /// @param _queryId The unique query identifier.\r\n    function readRequestGasPrice(uint256 _queryId) external view returns (uint256);\r\n\r\n    /// Retrieves the reward currently set for the referred query.\r\n    /// @dev Fails if the `_queryId` is not valid or, if it has been deleted,\r\n    /// @dev or if the related script bytecode got changed after being posted.\r\n    /// @param _queryId The unique query identifier.\r\n    function readRequestReward(uint256 _queryId) external view returns (uint256);\r\n\r\n    /// Retrieves the whole `Witnet.Response` record referred to a previously posted Witnet Data Request.\r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\r\n    /// @param _queryId The unique query identifier.\r\n    function readResponse(uint256 _queryId) external view returns (Witnet.Response memory);\r\n\r\n    /// Retrieves the hash of the Witnet transaction hash that actually solved the referred query.\r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\r\n    /// @param _queryId The unique query identifier.\r\n    function readResponseDrTxHash(uint256 _queryId) external view returns (bytes32);    \r\n\r\n    /// Retrieves the address that reported the result to a previously-posted request.\r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\r\n    /// @param _queryId The unique query identifier.\r\n    function readResponseReporter(uint256 _queryId) external view returns (address);\r\n\r\n    /// Retrieves the Witnet-provided CBOR-bytes result of a previously posted request.\r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\r\n    /// @param _queryId The unique query identifier.\r\n    function readResponseResult(uint256 _queryId) external view returns (Witnet.Result memory);\r\n\r\n    /// Retrieves the timestamp in which the result to the referred query was solved by the Witnet DON.\r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\r\n    /// @param _queryId The unique query identifier.\r\n    function readResponseTimestamp(uint256 _queryId) external view returns (uint256);\r\n}\r\n// File: contracts\\interfaces\\IWitnetRequestParser.sol\r\n/// @title The Witnet interface for decoding Witnet-provided request to Data Requests.\r\n/// This interface exposes functions to check for the success/failure of\r\n/// a Witnet-provided result, as well as to parse and convert result into\r\n/// Solidity types suitable to the application level. \r\n/// @author The Witnet Foundation.\r\ninterface IWitnetRequestParser {\r\n\r\n    /// Decode raw CBOR bytes into a Witnet.Result instance.\r\n    /// @param _cborBytes Raw bytes representing a CBOR-encoded value.\r\n    /// @return A `Witnet.Result` instance.\r\n    function resultFromCborBytes(bytes memory _cborBytes) external pure returns (Witnet.Result memory);\r\n\r\n    /// Decode a CBOR value into a Witnet.Result instance.\r\n    /// @param _cborValue An instance of `Witnet.CBOR`.\r\n    /// @return A `Witnet.Result` instance.\r\n    function resultFromCborValue(Witnet.CBOR memory _cborValue) external pure returns (Witnet.Result memory);\r\n\r\n    /// Tell if a Witnet.Result is successful.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return `true` if successful, `false` if errored.\r\n    function isOk(Witnet.Result memory _result) external pure returns (bool);\r\n\r\n    /// Tell if a Witnet.Result is errored.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return `true` if errored, `false` if successful.\r\n    function isError(Witnet.Result memory _result) external pure returns (bool);\r\n\r\n    /// Decode a bytes value from a Witnet.Result as a `bytes` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `bytes` decoded from the Witnet.Result.\r\n    function asBytes(Witnet.Result memory _result) external pure returns (bytes memory);\r\n\r\n    /// Decode an error code from a Witnet.Result as a member of `Witnet.ErrorCodes`.\r\n    /// @param _result An instance of `Witnet.Result`.\r\n    /// @return The `CBORValue.Error memory` decoded from the Witnet.Result.\r\n    function asErrorCode(Witnet.Result memory _result) external pure returns (Witnet.ErrorCodes);\r\n\r\n\r\n    /// Generate a suitable error message for a member of `Witnet.ErrorCodes` and its corresponding arguments.\r\n    /// @dev WARN: Note that client contracts should wrap this function into a try-catch foreseing potential errors generated in this function\r\n    /// @param _result An instance of `Witnet.Result`.\r\n    /// @return A tuple containing the `CBORValue.Error memory` decoded from the `Witnet.Result`, plus a loggable error message.\r\n    function asErrorMessage(Witnet.Result memory _result) external pure returns (Witnet.ErrorCodes, string memory);\r\n\r\n    /// Decode a raw error from a `Witnet.Result` as a `uint64[]`.\r\n    /// @param _result An instance of `Witnet.Result`.\r\n    /// @return The `uint64[]` raw error as decoded from the `Witnet.Result`.\r\n    function asRawError(Witnet.Result memory _result) external pure returns(uint64[] memory);\r\n\r\n    /// Decode a boolean value from a Witnet.Result as an `bool` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `bool` decoded from the Witnet.Result.\r\n    function asBool(Witnet.Result memory _result) external pure returns (bool);\r\n\r\n    /// Decode a fixed16 (half-precision) numeric value from a Witnet.Result as an `int32` value.\r\n    /// @dev Due to the lack of support for floating or fixed point arithmetic in the EVM, this method offsets all values.\r\n    /// by 5 decimal orders so as to get a fixed precision of 5 decimal positions, which should be OK for most `fixed16`.\r\n    /// use cases. In other words, the output of this method is 10,000 times the actual value, encoded into an `int32`.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `int128` decoded from the Witnet.Result.\r\n    function asFixed16(Witnet.Result memory _result) external pure returns (int32);\r\n\r\n    /// Decode an array of fixed16 values from a Witnet.Result as an `int128[]` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `int128[]` decoded from the Witnet.Result.\r\n    function asFixed16Array(Witnet.Result memory _result) external pure returns (int32[] memory);\r\n\r\n    /// Decode a integer numeric value from a Witnet.Result as an `int128` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `int128` decoded from the Witnet.Result.\r\n    function asInt128(Witnet.Result memory _result) external pure returns (int128);\r\n\r\n    /// Decode an array of integer numeric values from a Witnet.Result as an `int128[]` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `int128[]` decoded from the Witnet.Result.\r\n    function asInt128Array(Witnet.Result memory _result) external pure returns (int128[] memory);\r\n\r\n    /// Decode a string value from a Witnet.Result as a `string` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `string` decoded from the Witnet.Result.\r\n    function asString(Witnet.Result memory _result) external pure returns (string memory);\r\n\r\n    /// Decode an array of string values from a Witnet.Result as a `string[]` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `string[]` decoded from the Witnet.Result.\r\n    function asStringArray(Witnet.Result memory _result) external pure returns (string[] memory);\r\n\r\n    /// Decode a natural numeric value from a Witnet.Result as a `uint64` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `uint64` decoded from the Witnet.Result.\r\n    function asUint64(Witnet.Result memory _result) external pure returns(uint64);\r\n\r\n    /// Decode an array of natural numeric values from a Witnet.Result as a `uint64[]` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `uint64[]` decoded from the Witnet.Result.\r\n    function asUint64Array(Witnet.Result memory _result) external pure returns (uint64[] memory);\r\n\r\n}\r\n// File: contracts\\WitnetRequestBoard.sol\r\n/// @title Witnet Request Board functionality base contract.\r\n/// @author The Witnet Foundation.\r\nabstract contract WitnetRequestBoard is\r\n    IWitnetRequestBoardEvents,\r\n    IWitnetRequestBoardReporter,\r\n    IWitnetRequestBoardRequestor,\r\n    IWitnetRequestBoardView,\r\n    IWitnetRequestParser\r\n{\r\n    receive() external payable {\r\n        revert(\"WitnetRequestBoard: no transfers accepted\");\r\n    }\r\n}\r\n// File: contracts\\patterns\\Proxiable.sol\r\ninterface Proxiable {\r\n    /// @dev Complying with EIP-1822: Universal Upgradable Proxy Standard (UUPS)\r\n    /// @dev See https://eips.ethereum.org/EIPS/eip-1822.\r\n    function proxiableUUID() external pure returns (bytes32);\r\n}\r\n// File: contracts\\patterns\\Initializable.sol\r\ninterface Initializable {\r\n    /// @dev Initialize contract's storage context.\r\n    function initialize(bytes calldata) external;\r\n}\r\n// File: contracts\\patterns\\Upgradable.sol\r\n/* solhint-disable var-name-mixedcase */\r\n\r\n\r\n\r\n\r\nabstract contract Upgradable is Initializable, Proxiable {\r\n\r\n    address internal immutable _BASE;\r\n    bytes32 internal immutable _CODEHASH;\r\n    bool internal immutable _UPGRADABLE;\r\n\r\n    /// Emitted every time the contract gets upgraded.\r\n    /// @param from The address who ordered the upgrading. Namely, the WRB operator in \"trustable\" implementations.\r\n    /// @param baseAddr The address of the new implementation contract.\r\n    /// @param baseCodehash The EVM-codehash of the new implementation contract.\r\n    /// @param versionTag Ascii-encoded version literal with which the implementation deployer decided to tag it.\r\n    event Upgraded(\r\n        address indexed from,\r\n        address indexed baseAddr,\r\n        bytes32 indexed baseCodehash,\r\n        bytes32 versionTag\r\n    );\r\n\r\n    constructor (bool _isUpgradable) {\r\n        address _base = address(this);\r\n        bytes32 _codehash;        \r\n        assembly {\r\n            _codehash := extcodehash(_base)\r\n        }\r\n        _BASE = _base;\r\n        _CODEHASH = _codehash;        \r\n        _UPGRADABLE = _isUpgradable;\r\n    }\r\n\r\n    /// @dev Tells whether provided address could eventually upgrade the contract.\r\n    function isUpgradableFrom(address from) virtual external view returns (bool);\r\n\r\n\r\n    /// TODO: the following methods should be all declared as pure \r\n    ///       whenever this Solidity's PR gets merged and released: \r\n    ///       https://github.com/ethereum/solidity/pull/10240\r\n\r\n    /// @dev Retrieves base contract. Differs from address(this) when via delegate-proxy pattern.\r\n    function base() public view returns (address) {\r\n        return _BASE;\r\n    }\r\n\r\n    /// @dev Retrieves the immutable codehash of this contract, even if invoked as delegatecall.\r\n    /// @return _codehash This contracts immutable codehash.\r\n    function codehash() public view returns (bytes32 _codehash) {\r\n        return _CODEHASH;\r\n    }\r\n    \r\n    /// @dev Determines whether current instance allows being upgraded.\r\n    /// @dev Returned value should be invariant from whoever is calling.\r\n    function isUpgradable() public view returns (bool) {        \r\n        return _UPGRADABLE;\r\n    }\r\n\r\n    /// @dev Retrieves human-redable named version of current implementation.\r\n    function version() virtual public view returns (bytes32); \r\n}\r\n// File: contracts\\impls\\WitnetProxy.sol\r\n/// @title WitnetProxy: upgradable delegate-proxy contract that routes Witnet data requests coming from a \r\n/// `UsingWitnet`-inheriting contract to a currently active `WitnetRequestBoard` implementation. \r\n/// @author The Witnet Foundation.\r\ncontract WitnetProxy {\r\n\r\n    struct WitnetProxySlot {\r\n        address implementation;\r\n    }\r\n\r\n    /// Event emitted every time the implementation gets updated.\r\n    event Upgraded(address indexed implementation);  \r\n\r\n    /// Constructor with no params as to ease eventual support of Singleton pattern (i.e. ERC-2470).\r\n    constructor () {}\r\n\r\n    /// WitnetProxies will never accept direct transfer of ETHs.\r\n    receive() external payable {\r\n        revert(\"WitnetProxy: no transfers accepted\");\r\n    }\r\n\r\n    /// Payable fallback accepts delegating calls to payable functions.  \r\n    fallback() external payable { /* solhint-disable no-complex-fallback */\r\n        address _implementation = implementation();\r\n\r\n        assembly { /* solhint-disable avoid-low-level-calls */\r\n            // Gas optimized delegate call to 'implementation' contract.\r\n            // Note: `msg.data`, `msg.sender` and `msg.value` will be passed over \r\n            //       to actual implementation of `msg.sig` within `implementation` contract.\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, 0, calldatasize())\r\n            let result := delegatecall(gas(), _implementation, ptr, calldatasize(), 0, 0)\r\n            let size := returndatasize()\r\n            returndatacopy(ptr, 0, size)\r\n            switch result\r\n                case 0  { \r\n                    // pass back revert message:\r\n                    revert(ptr, size) \r\n                }\r\n                default {\r\n                  // pass back same data as returned by 'implementation' contract:\r\n                  return(ptr, size) \r\n                }\r\n        }\r\n    }\r\n\r\n    /// Returns proxy's current implementation address.\r\n    function implementation() public view returns (address) {\r\n        return _proxySlot().implementation;\r\n    }\r\n\r\n    /// Upgrades the `implementation` address.\r\n    /// @param _newImplementation New implementation address.\r\n    /// @param _initData Raw data with which new implementation will be initialized.\r\n    /// @return Returns whether new implementation would be further upgradable, or not.\r\n    function upgradeTo(address _newImplementation, bytes memory _initData)\r\n        public returns (bool)\r\n    {\r\n        // New implementation cannot be null:\r\n        require(_newImplementation != address(0), \"WitnetProxy: null implementation\");\r\n\r\n        address _oldImplementation = implementation();\r\n        if (_oldImplementation != address(0)) {\r\n            // New implementation address must differ from current one:\r\n            require(_newImplementation != _oldImplementation, \"WitnetProxy: nothing to upgrade\");\r\n\r\n            // Assert whether current implementation is intrinsically upgradable:\r\n            try Upgradable(_oldImplementation).isUpgradable() returns (bool _isUpgradable) {\r\n                require(_isUpgradable, \"WitnetProxy: not upgradable\");\r\n            } catch {\r\n                revert(\"WitnetProxy: unable to check upgradability\");\r\n            }\r\n\r\n            // Assert whether current implementation allows `msg.sender` to upgrade the proxy:\r\n            (bool _wasCalled, bytes memory _result) = _oldImplementation.delegatecall(\r\n                abi.encodeWithSignature(\r\n                    \"isUpgradableFrom(address)\",\r\n                    msg.sender\r\n                )\r\n            );\r\n            require(_wasCalled, \"WitnetProxy: not compliant\");\r\n            require(abi.decode(_result, (bool)), \"WitnetProxy: not authorized\");\r\n            require(\r\n                Upgradable(_oldImplementation).proxiableUUID() == Upgradable(_newImplementation).proxiableUUID(),\r\n                \"WitnetProxy: proxiableUUIDs mismatch\"\r\n            );\r\n        }\r\n\r\n        // Initialize new implementation within proxy-context storage:\r\n        (bool _wasInitialized,) = _newImplementation.delegatecall(\r\n            abi.encodeWithSignature(\r\n                \"initialize(bytes)\",\r\n                _initData\r\n            )\r\n        );\r\n        require(_wasInitialized, \"WitnetProxy: unable to initialize\");\r\n\r\n        // If all checks and initialization pass, update implementation address:\r\n        _proxySlot().implementation = _newImplementation;\r\n        emit Upgraded(_newImplementation);\r\n\r\n        // Asserts new implementation complies w/ minimal implementation of Upgradable interface:\r\n        try Upgradable(_newImplementation).isUpgradable() returns (bool _isUpgradable) {\r\n            return _isUpgradable;\r\n        }\r\n        catch {\r\n            revert (\"WitnetProxy: not compliant\");\r\n        }\r\n    }\r\n\r\n    /// @dev Complying with EIP-1967, retrieves storage struct containing proxy's current implementation address.\r\n    function _proxySlot() private pure returns (WitnetProxySlot storage _slot) {\r\n        assembly {\r\n            // bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)\r\n            _slot.slot := 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\r\n        }\r\n    }\r\n\r\n}\r\n// File: contracts\\impls\\WitnetRequestBoardUpgradableBase.sol\r\n/* solhint-disable var-name-mixedcase */\r\n\r\n// Inherits from:\r\n\r\n\r\n\r\n\r\n// Eventual deployment dependencies:\r\n\r\n\r\n/// @title Witnet Request Board base contract, with an Upgradable (and Destructible) touch.\r\n/// @author The Witnet Foundation.\r\nabstract contract WitnetRequestBoardUpgradableBase\r\n    is\r\n        Proxiable,\r\n        Upgradable,\r\n        WitnetRequestBoard\r\n{\r\n    bytes32 internal immutable _VERSION;\r\n\r\n    constructor(\r\n            bool _upgradable,\r\n            bytes32 _versionTag\r\n        )\r\n        Upgradable(_upgradable)\r\n    {\r\n        _VERSION = _versionTag;\r\n    }\r\n\r\n    /// @dev Reverts if proxy delegatecalls to unexistent method.\r\n    fallback() external payable {\r\n        revert(\"WitnetRequestBoardUpgradableBase: not implemented\");\r\n    }\r\n\r\n    // ================================================================================================================\r\n    // --- Overrides 'Proxiable' --------------------------------------------------------------------------------------\r\n\r\n    /// @dev Gets immutable \"heritage blood line\" (ie. genotype) as a Proxiable, and eventually Upgradable, contract.\r\n    ///      If implemented as an Upgradable touch, upgrading this contract to another one with a different \r\n    ///      `proxiableUUID()` value should fail.\r\n    function proxiableUUID() external pure override returns (bytes32) {\r\n        return (\r\n            /* keccak256(\"io.witnet.proxiable.board\") */\r\n            0x9969c6aff411c5e5f0807500693e8f819ce88529615cfa6cab569b24788a1018\r\n        );\r\n    }   \r\n\r\n    // ================================================================================================================\r\n    // --- Overrides 'Upgradable' --------------------------------------------------------------------------------------\r\n\r\n    /// Retrieves human-readable version tag of current implementation.\r\n    function version() public view override returns (bytes32) {\r\n        return _VERSION;\r\n    }\r\n\r\n}\r\n// File: contracts\\data\\WitnetBoardData.sol\r\n/// @title Witnet Request Board base data model. \r\n/// @author The Witnet Foundation.\r\nabstract contract WitnetBoardData {  \r\n\r\n    bytes32 internal constant _WITNET_BOARD_DATA_SLOTHASH =\r\n        /* keccak256(\"io.witnet.boards.data\") */\r\n        0xf595240b351bc8f951c2f53b26f4e78c32cb62122cf76c19b7fdda7d4968e183;\r\n\r\n    struct WitnetBoardState {\r\n        address base;\r\n        address owner;    \r\n        uint256 numQueries;\r\n        mapping (uint => Witnet.Query) queries;\r\n    }\r\n\r\n    constructor() {\r\n        _state().owner = msg.sender;\r\n    }\r\n\r\n    /// Asserts the given query is currently in the given status.\r\n    modifier inStatus(uint256 _queryId, Witnet.QueryStatus _status) {\r\n      require(\r\n          _getQueryStatus(_queryId) == _status,\r\n          _getQueryStatusRevertMessage(_status)\r\n        );\r\n      _;\r\n    }\r\n\r\n    /// Asserts the given query was previously posted and that it was not yet deleted.\r\n    modifier notDeleted(uint256 _queryId) {\r\n        require(_queryId > 0 && _queryId <= _state().numQueries, \"WitnetBoardData: not yet posted\");\r\n        require(_getRequestData(_queryId).requester != address(0), \"WitnetBoardData: deleted\");\r\n        _;\r\n    }\r\n\r\n    /// Asserts caller corresponds to the current owner. \r\n    modifier onlyOwner {\r\n        require(msg.sender == _state().owner, \"WitnetBoardData: only owner\");\r\n        _;    \r\n    }\r\n\r\n    /// Asserts the give query was actually posted before calling this method.\r\n    modifier wasPosted(uint256 _queryId) {\r\n        require(_queryId > 0 && _queryId <= _state().numQueries, \"WitnetBoardData: not yet posted\");\r\n        _;\r\n    }\r\n\r\n    // ================================================================================================================\r\n    // --- Internal functions -----------------------------------------------------------------------------------------\r\n\r\n    /// Gets current status of given query.\r\n    function _getQueryStatus(uint256 _queryId)\r\n      internal view\r\n      returns (Witnet.QueryStatus)\r\n    {\r\n      if (_queryId == 0 || _queryId > _state().numQueries)\r\n        return Witnet.QueryStatus.Unknown;\r\n      else {\r\n        Witnet.Query storage _query = _state().queries[_queryId];\r\n        if (_query.request.requester == address(0))\r\n          return Witnet.QueryStatus.Deleted;\r\n        else if (_query.response.drTxHash != 0) \r\n          return Witnet.QueryStatus.Reported;\r\n        else\r\n          return Witnet.QueryStatus.Posted;\r\n      }\r\n    }\r\n\r\n    function _getQueryStatusRevertMessage(Witnet.QueryStatus _status)\r\n      internal pure\r\n      returns (string memory)\r\n    {\r\n      if (_status == Witnet.QueryStatus.Posted) {\r\n        return \"WitnetBoardData: not in Posted status\";\r\n      } else if (_status == Witnet.QueryStatus.Reported) {\r\n        return \"WitnetBoardData: not in Reported status\";\r\n      } else if (_status == Witnet.QueryStatus.Deleted) {\r\n        return \"WitnetBoardData: not in Deleted status\";\r\n      } else {\r\n        return \"WitnetBoardData: bad mood\";\r\n      }\r\n    }\r\n\r\n    /// Gets the Witnet.Request part of a given query.\r\n    function _getRequestData(uint256 _queryId)\r\n      internal view\r\n      returns (Witnet.Request storage)\r\n    {\r\n        return _state().queries[_queryId].request;\r\n    }\r\n\r\n    /// Gets the Witnet.Result part of a given query.\r\n    function _getResponseData(uint256 _queryId)\r\n      internal view\r\n      returns (Witnet.Response storage)\r\n    {\r\n        return _state().queries[_queryId].response;\r\n    }\r\n\r\n    /// Returns storage pointer to contents of 'WitnetBoardState' struct.\r\n    function _state()\r\n      internal pure\r\n      returns (WitnetBoardState storage _ptr)\r\n    {\r\n        assembly {\r\n            _ptr.slot := _WITNET_BOARD_DATA_SLOTHASH\r\n        }\r\n    }\r\n\r\n}\r\n// File: contracts\\data\\WitnetBoardDataACLs.sol\r\n/// @title Witnet Access Control Lists storage layout, for Witnet-trusted request boards.\r\n/// @author The Witnet Foundation.\r\nabstract contract WitnetBoardDataACLs\r\n    is\r\n        WitnetBoardData\r\n{\r\n    bytes32 internal constant _WITNET_BOARD_ACLS_SLOTHASH =\r\n        /* keccak256(\"io.witnet.boards.data.acls\") */\r\n        0xa6db7263983f337bae2c9fb315730227961d1c1153ae1e10a56b5791465dd6fd;\r\n\r\n    struct WitnetBoardACLs {\r\n        mapping (address => bool) isReporter_;\r\n    }\r\n\r\n    constructor() {\r\n        _acls().isReporter_[msg.sender] = true;\r\n    }\r\n\r\n    modifier onlyReporters {\r\n        require(\r\n            _acls().isReporter_[msg.sender],\r\n            \"WitnetBoardDataACLs: unauthorized reporter\"\r\n        );\r\n        _;\r\n    } \r\n\r\n    // ================================================================================================================\r\n    // --- Internal functions -----------------------------------------------------------------------------------------\r\n\r\n    function _acls() internal pure returns (WitnetBoardACLs storage _struct) {\r\n        assembly {\r\n            _struct.slot := _WITNET_BOARD_ACLS_SLOTHASH\r\n        }\r\n    }\r\n}\r\n// File: contracts\\interfaces\\IWitnetRequestBoardAdmin.sol\r\n/// @title Witnet Request Board basic administration interface.\r\n/// @author The Witnet Foundation.\r\ninterface IWitnetRequestBoardAdmin {\r\n    event OwnershipTransferred(address indexed from, address indexed to);\r\n\r\n    /// Gets admin/owner address.\r\n    function owner() external view returns (address);\r\n\r\n    /// Transfers ownership.\r\n    function transferOwnership(address) external;\r\n}\r\n// File: contracts\\interfaces\\IWitnetRequestBoardAdminACLs.sol\r\n/// @title Witnet Request Board ACLs administration interface.\r\n/// @author The Witnet Foundation.\r\ninterface IWitnetRequestBoardAdminACLs {\r\n    event ReportersSet(address[] reporters);\r\n    event ReportersUnset(address[] reporters);\r\n\r\n    /// Tells whether given address is included in the active reporters control list.\r\n    function isReporter(address) external view returns (bool);\r\n\r\n    /// Adds given addresses to the active reporters control list.\r\n    /// @dev Can only be called from the owner address.\r\n    /// @dev Emits the `ReportersSet` event. \r\n    function setReporters(address[] calldata reporters) external;\r\n\r\n    /// Removes given addresses from the active reporters control list.\r\n    /// @dev Can only be called from the owner address.\r\n    /// @dev Emits the `ReportersUnset` event. \r\n    function unsetReporters(address[] calldata reporters) external;\r\n}\r\n// File: contracts\\libs\\WitnetBuffer.sol\r\n/// @title A convenient wrapper around the `bytes memory` type that exposes a buffer-like interface\r\n/// @notice The buffer has an inner cursor that tracks the final offset of every read, i.e. any subsequent read will\r\n/// start with the byte that goes right after the last one in the previous read.\r\n/// @dev `uint32` is used here for `cursor` because `uint16` would only enable seeking up to 8KB, which could in some\r\n/// theoretical use cases be exceeded. Conversely, `uint32` supports up to 512MB, which cannot credibly be exceeded.\r\n/// @author The Witnet Foundation.\r\nlibrary WitnetBuffer {\r\n\r\n  // Ensures we access an existing index in an array\r\n  modifier notOutOfBounds(uint32 index, uint256 length) {\r\n    require(index < length, \"Tried to read from a consumed Buffer (must rewind it first)\");\r\n    _;\r\n  }\r\n\r\n  /// @notice Read and consume a certain amount of bytes from the buffer.\r\n  /// @param _buffer An instance of `Witnet.Buffer`.\r\n  /// @param _length How many bytes to read and consume from the buffer.\r\n  /// @return A `bytes memory` containing the first `_length` bytes from the buffer, counting from the cursor position.\r\n  function read(Witnet.Buffer memory _buffer, uint32 _length) internal pure returns (bytes memory) {\r\n    // Make sure not to read out of the bounds of the original bytes\r\n    require(_buffer.cursor + _length <= _buffer.data.length, \"Not enough bytes in buffer when reading\");\r\n\r\n    // Create a new `bytes memory destination` value\r\n    bytes memory destination = new bytes(_length);\r\n\r\n    // Early return in case that bytes length is 0\r\n    if (_length != 0) {\r\n      bytes memory source = _buffer.data;\r\n      uint32 offset = _buffer.cursor;\r\n\r\n      // Get raw pointers for source and destination\r\n      uint sourcePointer;\r\n      uint destinationPointer;\r\n      assembly {\r\n        sourcePointer := add(add(source, 32), offset)\r\n        destinationPointer := add(destination, 32)\r\n      }\r\n      // Copy `_length` bytes from source to destination\r\n      memcpy(destinationPointer, sourcePointer, uint(_length));\r\n\r\n      // Move the cursor forward by `_length` bytes\r\n      seek(_buffer, _length, true);\r\n    }\r\n    return destination;\r\n  }\r\n\r\n  /// @notice Read and consume the next byte from the buffer.\r\n  /// @param _buffer An instance of `Witnet.Buffer`.\r\n  /// @return The next byte in the buffer counting from the cursor position.\r\n  function next(Witnet.Buffer memory _buffer) internal pure notOutOfBounds(_buffer.cursor, _buffer.data.length) returns (bytes1) {\r\n    // Return the byte at the position marked by the cursor and advance the cursor all at once\r\n    return _buffer.data[_buffer.cursor++];\r\n  }\r\n\r\n  /// @notice Move the inner cursor of the buffer to a relative or absolute position.\r\n  /// @param _buffer An instance of `Witnet.Buffer`.\r\n  /// @param _offset How many bytes to move the cursor forward.\r\n  /// @param _relative Whether to count `_offset` from the last position of the cursor (`true`) or the beginning of the\r\n  /// buffer (`true`).\r\n  /// @return The final position of the cursor (will equal `_offset` if `_relative` is `false`).\r\n  // solium-disable-next-line security/no-assign-params\r\n  function seek(Witnet.Buffer memory _buffer, uint32 _offset, bool _relative) internal pure returns (uint32) {\r\n    // Deal with relative offsets\r\n    if (_relative) {\r\n      require(_offset + _buffer.cursor > _offset, \"Integer overflow when seeking\");\r\n      _offset += _buffer.cursor;\r\n    }\r\n    // Make sure not to read out of the bounds of the original bytes\r\n    require(_offset <= _buffer.data.length, \"Not enough bytes in buffer when seeking\");\r\n    _buffer.cursor = _offset;\r\n    return _buffer.cursor;\r\n  }\r\n\r\n  /// @notice Move the inner cursor a number of bytes forward.\r\n  /// @dev This is a simple wrapper around the relative offset case of `seek()`.\r\n  /// @param _buffer An instance of `Witnet.Buffer`.\r\n  /// @param _relativeOffset How many bytes to move the cursor forward.\r\n  /// @return The final position of the cursor.\r\n  function seek(Witnet.Buffer memory _buffer, uint32 _relativeOffset) internal pure returns (uint32) {\r\n    return seek(_buffer, _relativeOffset, true);\r\n  }\r\n\r\n  /// @notice Move the inner cursor back to the first byte in the buffer.\r\n  /// @param _buffer An instance of `Witnet.Buffer`.\r\n  function rewind(Witnet.Buffer memory _buffer) internal pure {\r\n    _buffer.cursor = 0;\r\n  }\r\n\r\n  /// @notice Read and consume the next byte from the buffer as an `uint8`.\r\n  /// @param _buffer An instance of `Witnet.Buffer`.\r\n  /// @return The `uint8` value of the next byte in the buffer counting from the cursor position.\r\n  function readUint8(Witnet.Buffer memory _buffer) internal pure notOutOfBounds(_buffer.cursor, _buffer.data.length) returns (uint8) {\r\n    bytes memory bytesValue = _buffer.data;\r\n    uint32 offset = _buffer.cursor;\r\n    uint8 value;\r\n    assembly {\r\n      value := mload(add(add(bytesValue, 1), offset))\r\n    }\r\n    _buffer.cursor++;\r\n\r\n    return value;\r\n  }\r\n\r\n  /// @notice Read and consume the next 2 bytes from the buffer as an `uint16`.\r\n  /// @param _buffer An instance of `Witnet.Buffer`.\r\n  /// @return The `uint16` value of the next 2 bytes in the buffer counting from the cursor position.\r\n  function readUint16(Witnet.Buffer memory _buffer) internal pure notOutOfBounds(_buffer.cursor + 1, _buffer.data.length) returns (uint16) {\r\n    bytes memory bytesValue = _buffer.data;\r\n    uint32 offset = _buffer.cursor;\r\n    uint16 value;\r\n    assembly {\r\n      value := mload(add(add(bytesValue, 2), offset))\r\n    }\r\n    _buffer.cursor += 2;\r\n\r\n    return value;\r\n  }\r\n\r\n  /// @notice Read and consume the next 4 bytes from the buffer as an `uint32`.\r\n  /// @param _buffer An instance of `Witnet.Buffer`.\r\n  /// @return The `uint32` value of the next 4 bytes in the buffer counting from the cursor position.\r\n  function readUint32(Witnet.Buffer memory _buffer) internal pure notOutOfBounds(_buffer.cursor + 3, _buffer.data.length) returns (uint32) {\r\n    bytes memory bytesValue = _buffer.data;\r\n    uint32 offset = _buffer.cursor;\r\n    uint32 value;\r\n    assembly {\r\n      value := mload(add(add(bytesValue, 4), offset))\r\n    }\r\n    _buffer.cursor += 4;\r\n\r\n    return value;\r\n  }\r\n\r\n  /// @notice Read and consume the next 8 bytes from the buffer as an `uint64`.\r\n  /// @param _buffer An instance of `Witnet.Buffer`.\r\n  /// @return The `uint64` value of the next 8 bytes in the buffer counting from the cursor position.\r\n  function readUint64(Witnet.Buffer memory _buffer) internal pure notOutOfBounds(_buffer.cursor + 7, _buffer.data.length) returns (uint64) {\r\n    bytes memory bytesValue = _buffer.data;\r\n    uint32 offset = _buffer.cursor;\r\n    uint64 value;\r\n    assembly {\r\n      value := mload(add(add(bytesValue, 8), offset))\r\n    }\r\n    _buffer.cursor += 8;\r\n\r\n    return value;\r\n  }\r\n\r\n  /// @notice Read and consume the next 16 bytes from the buffer as an `uint128`.\r\n  /// @param _buffer An instance of `Witnet.Buffer`.\r\n  /// @return The `uint128` value of the next 16 bytes in the buffer counting from the cursor position.\r\n  function readUint128(Witnet.Buffer memory _buffer) internal pure notOutOfBounds(_buffer.cursor + 15, _buffer.data.length) returns (uint128) {\r\n    bytes memory bytesValue = _buffer.data;\r\n    uint32 offset = _buffer.cursor;\r\n    uint128 value;\r\n    assembly {\r\n      value := mload(add(add(bytesValue, 16), offset))\r\n    }\r\n    _buffer.cursor += 16;\r\n\r\n    return value;\r\n  }\r\n\r\n  /// @notice Read and consume the next 32 bytes from the buffer as an `uint256`.\r\n  /// @return The `uint256` value of the next 32 bytes in the buffer counting from the cursor position.\r\n  /// @param _buffer An instance of `Witnet.Buffer`.\r\n  function readUint256(Witnet.Buffer memory _buffer) internal pure notOutOfBounds(_buffer.cursor + 31, _buffer.data.length) returns (uint256) {\r\n    bytes memory bytesValue = _buffer.data;\r\n    uint32 offset = _buffer.cursor;\r\n    uint256 value;\r\n    assembly {\r\n      value := mload(add(add(bytesValue, 32), offset))\r\n    }\r\n    _buffer.cursor += 32;\r\n\r\n    return value;\r\n  }\r\n\r\n  /// @notice Read and consume the next 2 bytes from the buffer as an IEEE 754-2008 floating point number enclosed in an\r\n  /// `int32`.\r\n  /// @dev Due to the lack of support for floating or fixed point arithmetic in the EVM, this method offsets all values\r\n  /// by 5 decimal orders so as to get a fixed precision of 5 decimal positions, which should be OK for most `float16`\r\n  /// use cases. In other words, the integer output of this method is 10,000 times the actual value. The input bytes are\r\n  /// expected to follow the 16-bit base-2 format (a.k.a. `binary16`) in the IEEE 754-2008 standard.\r\n  /// @param _buffer An instance of `Witnet.Buffer`.\r\n  /// @return The `uint32` value of the next 4 bytes in the buffer counting from the cursor position.\r\n  function readFloat16(Witnet.Buffer memory _buffer) internal pure returns (int32) {\r\n    uint32 bytesValue = readUint16(_buffer);\r\n    // Get bit at position 0\r\n    uint32 sign = bytesValue & 0x8000;\r\n    // Get bits 1 to 5, then normalize to the [-14, 15] range so as to counterweight the IEEE 754 exponent bias\r\n    int32 exponent = (int32(bytesValue & 0x7c00) >> 10) - 15;\r\n    // Get bits 6 to 15\r\n    int32 significand = int32(bytesValue & 0x03ff);\r\n\r\n    // Add 1024 to the fraction if the exponent is 0\r\n    if (exponent == 15) {\r\n      significand |= 0x400;\r\n    }\r\n\r\n    // Compute `2 ^ exponent · (1 + fraction / 1024)`\r\n    int32 result = 0;\r\n    if (exponent >= 0) {\r\n      result = int32((int256(1 << uint256(int256(exponent))) * 10000 * int256(uint256(int256(significand)) | 0x400)) >> 10);\r\n    } else {\r\n      result = int32(((int256(uint256(int256(significand)) | 0x400) * 10000) / int256(1 << uint256(int256(- exponent)))) >> 10);\r\n    }\r\n\r\n    // Make the result negative if the sign bit is not 0\r\n    if (sign != 0) {\r\n      result *= - 1;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /// @notice Copy bytes from one memory address into another.\r\n  /// @dev This function was borrowed from Nick Johnson's `solidity-stringutils` lib, and reproduced here under the terms\r\n  /// of [Apache License 2.0](https://github.com/Arachnid/solidity-stringutils/blob/master/LICENSE).\r\n  /// @param _dest Address of the destination memory.\r\n  /// @param _src Address to the source memory.\r\n  /// @param _len How many bytes to copy.\r\n  // solium-disable-next-line security/no-assign-params\r\n  function memcpy(uint _dest, uint _src, uint _len) private pure {\r\n    require(_len > 0, \"Cannot copy 0 bytes\");\r\n\r\n    // Copy word-length chunks while possible\r\n    for (; _len >= 32; _len -= 32) {\r\n      assembly {\r\n        mstore(_dest, mload(_src))\r\n      }\r\n      _dest += 32;\r\n      _src += 32;\r\n    }\r\n    if (_len > 0) {\r\n      // Copy remaining bytes\r\n      uint mask = 256 ** (32 - _len) - 1;\r\n      assembly {\r\n        let srcpart := and(mload(_src), not(mask))\r\n        let destpart := and(mload(_dest), mask)\r\n        mstore(_dest, or(destpart, srcpart))\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n// File: contracts\\libs\\WitnetDecoderLib.sol\r\n/// @title A minimalistic implementation of “RFC 7049 Concise Binary Object Representation”\r\n/// @notice This library leverages a buffer-like structure for step-by-step decoding of bytes so as to minimize\r\n/// the gas cost of decoding them into a useful native type.\r\n/// @dev Most of the logic has been borrowed from Patrick Gansterer’s cbor.js library: https://github.com/paroga/cbor-js\r\n/// @author The Witnet Foundation.\r\n/// \r\n/// TODO: add support for Array (majorType = 4)\r\n/// TODO: add support for Map (majorType = 5)\r\n/// TODO: add support for Float32 (majorType = 7, additionalInformation = 26)\r\n/// TODO: add support for Float64 (majorType = 7, additionalInformation = 27) \r\n\r\nlibrary WitnetDecoderLib {\r\n\r\n  using WitnetBuffer for Witnet.Buffer;\r\n\r\n  uint32 constant internal _UINT32_MAX = type(uint32).max;\r\n  uint64 constant internal _UINT64_MAX = type(uint64).max;\r\n\r\n  /// @notice Decode a `Witnet.CBOR` structure into a native `bool` value.\r\n  /// @param _cborValue An instance of `Witnet.CBOR`.\r\n  /// @return The value represented by the input, as a `bool` value.\r\n  function decodeBool(Witnet.CBOR memory _cborValue) public pure returns(bool) {\r\n    _cborValue.len = readLength(_cborValue.buffer, _cborValue.additionalInformation);\r\n    require(_cborValue.majorType == 7, \"Tried to read a `bool` value from a `Witnet.CBOR` with majorType != 7\");\r\n    if (_cborValue.len == 20) {\r\n      return false;\r\n    } else if (_cborValue.len == 21) {\r\n      return true;\r\n    } else {\r\n      revert(\"Tried to read `bool` from a `Witnet.CBOR` with len different than 20 or 21\");\r\n    }\r\n  }\r\n\r\n  /// @notice Decode a `Witnet.CBOR` structure into a native `bytes` value.\r\n  /// @param _cborValue An instance of `Witnet.CBOR`.\r\n  /// @return The value represented by the input, as a `bytes` value.   \r\n  function decodeBytes(Witnet.CBOR memory _cborValue) public pure returns(bytes memory) {\r\n    _cborValue.len = readLength(_cborValue.buffer, _cborValue.additionalInformation);\r\n    if (_cborValue.len == _UINT32_MAX) {\r\n      bytes memory bytesData;\r\n\r\n      // These checks look repetitive but the equivalent loop would be more expensive.\r\n      uint32 itemLength = uint32(readIndefiniteStringLength(_cborValue.buffer, _cborValue.majorType));\r\n      if (itemLength < _UINT32_MAX) {\r\n        bytesData = abi.encodePacked(bytesData, _cborValue.buffer.read(itemLength));\r\n        itemLength = uint32(readIndefiniteStringLength(_cborValue.buffer, _cborValue.majorType));\r\n        if (itemLength < _UINT32_MAX) {\r\n          bytesData = abi.encodePacked(bytesData, _cborValue.buffer.read(itemLength));\r\n        }\r\n      }\r\n      return bytesData;\r\n    } else {\r\n      return _cborValue.buffer.read(uint32(_cborValue.len));\r\n    }\r\n  }\r\n\r\n  /// @notice Decode a `Witnet.CBOR` structure into a `fixed16` value.\r\n  /// @dev Due to the lack of support for floating or fixed point arithmetic in the EVM, this method offsets all values\r\n  /// by 5 decimal orders so as to get a fixed precision of 5 decimal positions, which should be OK for most `fixed16`\r\n  /// use cases. In other words, the output of this method is 10,000 times the actual value, encoded into an `int32`.\r\n  /// @param _cborValue An instance of `Witnet.CBOR`.\r\n  /// @return The value represented by the input, as an `int128` value.\r\n  function decodeFixed16(Witnet.CBOR memory _cborValue) public pure returns(int32) {\r\n    require(_cborValue.majorType == 7, \"Tried to read a `fixed` value from a `WT.CBOR` with majorType != 7\");\r\n    require(_cborValue.additionalInformation == 25, \"Tried to read `fixed16` from a `WT.CBOR` with additionalInformation != 25\");\r\n    return _cborValue.buffer.readFloat16();\r\n  }\r\n\r\n  /// @notice Decode a `Witnet.CBOR` structure into a native `int128[]` value whose inner values follow the same convention.\r\n  /// as explained in `decodeFixed16`.\r\n  /// @param _cborValue An instance of `Witnet.CBOR`.\r\n  /// @return The value represented by the input, as an `int128[]` value.\r\n  function decodeFixed16Array(Witnet.CBOR memory _cborValue) external pure returns(int32[] memory) {\r\n    require(_cborValue.majorType == 4, \"Tried to read `int128[]` from a `Witnet.CBOR` with majorType != 4\");\r\n\r\n    uint64 length = readLength(_cborValue.buffer, _cborValue.additionalInformation);\r\n    require(length < _UINT64_MAX, \"Indefinite-length CBOR arrays are not supported\");\r\n\r\n    int32[] memory array = new int32[](length);\r\n    for (uint64 i = 0; i < length; i++) {\r\n      Witnet.CBOR memory item = valueFromBuffer(_cborValue.buffer);\r\n      array[i] = decodeFixed16(item);\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  /// @notice Decode a `Witnet.CBOR` structure into a native `int128` value.\r\n  /// @param _cborValue An instance of `Witnet.CBOR`.\r\n  /// @return The value represented by the input, as an `int128` value.\r\n  function decodeInt128(Witnet.CBOR memory _cborValue) public pure returns(int128) {\r\n    if (_cborValue.majorType == 1) {\r\n      uint64 length = readLength(_cborValue.buffer, _cborValue.additionalInformation);\r\n      return int128(-1) - int128(uint128(length));\r\n    } else if (_cborValue.majorType == 0) {\r\n      // Any `uint64` can be safely casted to `int128`, so this method supports majorType 1 as well so as to have offer\r\n      // a uniform API for positive and negative numbers\r\n      return int128(uint128(decodeUint64(_cborValue)));\r\n    }\r\n    revert(\"Tried to read `int128` from a `Witnet.CBOR` with majorType not 0 or 1\");\r\n  }\r\n\r\n  /// @notice Decode a `Witnet.CBOR` structure into a native `int128[]` value.\r\n  /// @param _cborValue An instance of `Witnet.CBOR`.\r\n  /// @return The value represented by the input, as an `int128[]` value.\r\n  function decodeInt128Array(Witnet.CBOR memory _cborValue) external pure returns(int128[] memory) {\r\n    require(_cborValue.majorType == 4, \"Tried to read `int128[]` from a `Witnet.CBOR` with majorType != 4\");\r\n\r\n    uint64 length = readLength(_cborValue.buffer, _cborValue.additionalInformation);\r\n    require(length < _UINT64_MAX, \"Indefinite-length CBOR arrays are not supported\");\r\n\r\n    int128[] memory array = new int128[](length);\r\n    for (uint64 i = 0; i < length; i++) {\r\n      Witnet.CBOR memory item = valueFromBuffer(_cborValue.buffer);\r\n      array[i] = decodeInt128(item);\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  /// @notice Decode a `Witnet.CBOR` structure into a native `string` value.\r\n  /// @param _cborValue An instance of `Witnet.CBOR`.\r\n  /// @return The value represented by the input, as a `string` value.\r\n  function decodeString(Witnet.CBOR memory _cborValue) public pure returns(string memory) {\r\n    _cborValue.len = readLength(_cborValue.buffer, _cborValue.additionalInformation);\r\n    if (_cborValue.len == _UINT64_MAX) {\r\n      bytes memory textData;\r\n      bool done;\r\n      while (!done) {\r\n        uint64 itemLength = readIndefiniteStringLength(_cborValue.buffer, _cborValue.majorType);\r\n        if (itemLength < _UINT64_MAX) {\r\n          textData = abi.encodePacked(textData, readText(_cborValue.buffer, itemLength / 4));\r\n        } else {\r\n          done = true;\r\n        }\r\n      }\r\n      return string(textData);\r\n    } else {\r\n      return string(readText(_cborValue.buffer, _cborValue.len));\r\n    }\r\n  }\r\n\r\n  /// @notice Decode a `Witnet.CBOR` structure into a native `string[]` value.\r\n  /// @param _cborValue An instance of `Witnet.CBOR`.\r\n  /// @return The value represented by the input, as an `string[]` value.\r\n  function decodeStringArray(Witnet.CBOR memory _cborValue) external pure returns(string[] memory) {\r\n    require(_cborValue.majorType == 4, \"Tried to read `string[]` from a `Witnet.CBOR` with majorType != 4\");\r\n\r\n    uint64 length = readLength(_cborValue.buffer, _cborValue.additionalInformation);\r\n    require(length < _UINT64_MAX, \"Indefinite-length CBOR arrays are not supported\");\r\n\r\n    string[] memory array = new string[](length);\r\n    for (uint64 i = 0; i < length; i++) {\r\n      Witnet.CBOR memory item = valueFromBuffer(_cborValue.buffer);\r\n      array[i] = decodeString(item);\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  /// @notice Decode a `Witnet.CBOR` structure into a native `uint64` value.\r\n  /// @param _cborValue An instance of `Witnet.CBOR`.\r\n  /// @return The value represented by the input, as an `uint64` value.\r\n  function decodeUint64(Witnet.CBOR memory _cborValue) public pure returns(uint64) {\r\n    require(_cborValue.majorType == 0, \"Tried to read `uint64` from a `Witnet.CBOR` with majorType != 0\");\r\n    return readLength(_cborValue.buffer, _cborValue.additionalInformation);\r\n  }\r\n\r\n  /// @notice Decode a `Witnet.CBOR` structure into a native `uint64[]` value.\r\n  /// @param _cborValue An instance of `Witnet.CBOR`.\r\n  /// @return The value represented by the input, as an `uint64[]` value.\r\n  function decodeUint64Array(Witnet.CBOR memory _cborValue) external pure returns(uint64[] memory) {\r\n    require(_cborValue.majorType == 4, \"Tried to read `uint64[]` from a `Witnet.CBOR` with majorType != 4\");\r\n\r\n    uint64 length = readLength(_cborValue.buffer, _cborValue.additionalInformation);\r\n    require(length < _UINT64_MAX, \"Indefinite-length CBOR arrays are not supported\");\r\n\r\n    uint64[] memory array = new uint64[](length);\r\n    for (uint64 i = 0; i < length; i++) {\r\n      Witnet.CBOR memory item = valueFromBuffer(_cborValue.buffer);\r\n      array[i] = decodeUint64(item);\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  /// @notice Decode a Witnet.CBOR structure from raw bytes.\r\n  /// @dev This is the main factory for Witnet.CBOR instances, which can be later decoded into native EVM types.\r\n  /// @param _cborBytes Raw bytes representing a CBOR-encoded value.\r\n  /// @return A `Witnet.CBOR` instance containing a partially decoded value.\r\n  function valueFromBytes(bytes memory _cborBytes) external pure returns(Witnet.CBOR memory) {\r\n    Witnet.Buffer memory buffer = Witnet.Buffer(_cborBytes, 0);\r\n\r\n    return valueFromBuffer(buffer);\r\n  }\r\n\r\n  /// @notice Decode a Witnet.CBOR structure from raw bytes.\r\n  /// @dev This is an alternate factory for Witnet.CBOR instances, which can be later decoded into native EVM types.\r\n  /// @param _buffer A Buffer structure representing a CBOR-encoded value.\r\n  /// @return A `Witnet.CBOR` instance containing a partially decoded value.\r\n  function valueFromBuffer(Witnet.Buffer memory _buffer) public pure returns(Witnet.CBOR memory) {\r\n    require(_buffer.data.length > 0, \"Found empty buffer when parsing CBOR value\");\r\n\r\n    uint8 initialByte;\r\n    uint8 majorType = 255;\r\n    uint8 additionalInformation;\r\n    uint64 tag = _UINT64_MAX;\r\n\r\n    bool isTagged = true;\r\n    while (isTagged) {\r\n      // Extract basic CBOR properties from input bytes\r\n      initialByte = _buffer.readUint8();\r\n      majorType = initialByte >> 5;\r\n      additionalInformation = initialByte & 0x1f;\r\n\r\n      // Early CBOR tag parsing.\r\n      if (majorType == 6) {\r\n        tag = readLength(_buffer, additionalInformation);\r\n      } else {\r\n        isTagged = false;\r\n      }\r\n    }\r\n\r\n    require(majorType <= 7, \"Invalid CBOR major type\");\r\n\r\n    return Witnet.CBOR(\r\n      _buffer,\r\n      initialByte,\r\n      majorType,\r\n      additionalInformation,\r\n      0,\r\n      tag);\r\n  }\r\n\r\n  /// Reads the length of the next CBOR item from a buffer, consuming a different number of bytes depending on the\r\n  /// value of the `additionalInformation` argument.\r\n  function readLength(Witnet.Buffer memory _buffer, uint8 additionalInformation) private pure returns(uint64) {\r\n    if (additionalInformation < 24) {\r\n      return additionalInformation;\r\n    }\r\n    if (additionalInformation == 24) {\r\n      return _buffer.readUint8();\r\n    }\r\n    if (additionalInformation == 25) {\r\n      return _buffer.readUint16();\r\n    }\r\n    if (additionalInformation == 26) {\r\n      return _buffer.readUint32();\r\n    }\r\n    if (additionalInformation == 27) {\r\n      return _buffer.readUint64();\r\n    }\r\n    if (additionalInformation == 31) {\r\n      return _UINT64_MAX;\r\n    }\r\n    revert(\"Invalid length encoding (non-existent additionalInformation value)\");\r\n  }\r\n\r\n  /// Read the length of a CBOR indifinite-length item (arrays, maps, byte strings and text) from a buffer, consuming\r\n  /// as many bytes as specified by the first byte.\r\n  function readIndefiniteStringLength(Witnet.Buffer memory _buffer, uint8 majorType) private pure returns(uint64) {\r\n    uint8 initialByte = _buffer.readUint8();\r\n    if (initialByte == 0xff) {\r\n      return _UINT64_MAX;\r\n    }\r\n    uint64 length = readLength(_buffer, initialByte & 0x1f);\r\n    require(length < _UINT64_MAX && (initialByte >> 5) == majorType, \"Invalid indefinite length\");\r\n    return length;\r\n  }\r\n\r\n  /// Read a text string of a given length from a buffer. Returns a `bytes memory` value for the sake of genericness,\r\n  /// but it can be easily casted into a string with `string(result)`.\r\n  // solium-disable-next-line security/no-assign-params\r\n  function readText(Witnet.Buffer memory _buffer, uint64 _length) private pure returns(bytes memory) {\r\n    bytes memory result;\r\n    for (uint64 index = 0; index < _length; index++) {\r\n      uint8 value = _buffer.readUint8();\r\n      if (value & 0x80 != 0) {\r\n        if (value < 0xe0) {\r\n          value = (value & 0x1f) << 6 |\r\n            (_buffer.readUint8() & 0x3f);\r\n          _length -= 1;\r\n        } else if (value < 0xf0) {\r\n          value = (value & 0x0f) << 12 |\r\n            (_buffer.readUint8() & 0x3f) << 6 |\r\n            (_buffer.readUint8() & 0x3f);\r\n          _length -= 2;\r\n        } else {\r\n          value = (value & 0x0f) << 18 |\r\n            (_buffer.readUint8() & 0x3f) << 12 |\r\n            (_buffer.readUint8() & 0x3f) << 6  |\r\n            (_buffer.readUint8() & 0x3f);\r\n          _length -= 3;\r\n        }\r\n      }\r\n      result = abi.encodePacked(result, value);\r\n    }\r\n    return result;\r\n  }\r\n}\r\n// File: contracts\\libs\\WitnetParserLib.sol\r\n/// @title A library for decoding Witnet request results\r\n/// @notice The library exposes functions to check the Witnet request success.\r\n/// and retrieve Witnet results from CBOR values into solidity types.\r\n/// @author The Witnet Foundation.\r\nlibrary WitnetParserLib {\r\n\r\n    using WitnetDecoderLib for bytes;\r\n    using WitnetDecoderLib for Witnet.CBOR;\r\n\r\n    /// @notice Decode raw CBOR bytes into a Witnet.Result instance.\r\n    /// @param _cborBytes Raw bytes representing a CBOR-encoded value.\r\n    /// @return A `Witnet.Result` instance.\r\n    function resultFromCborBytes(bytes calldata _cborBytes)\r\n        external pure\r\n        returns (Witnet.Result memory)\r\n    {\r\n        Witnet.CBOR memory cborValue = _cborBytes.valueFromBytes();\r\n        return resultFromCborValue(cborValue);\r\n    }\r\n\r\n    /// @notice Decode a CBOR value into a Witnet.Result instance.\r\n    /// @param _cborValue An instance of `Witnet.Value`.\r\n    /// @return A `Witnet.Result` instance.\r\n    function resultFromCborValue(Witnet.CBOR memory _cborValue)\r\n        public pure\r\n        returns (Witnet.Result memory)    \r\n    {\r\n        // Witnet uses CBOR tag 39 to represent RADON error code identifiers.\r\n        // [CBOR tag 39] Identifiers for CBOR: https://github.com/lucas-clemente/cbor-specs/blob/master/id.md\r\n        bool success = _cborValue.tag != 39;\r\n        return Witnet.Result(success, _cborValue);\r\n    }\r\n\r\n    /// @notice Tell if a Witnet.Result is successful.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return `true` if successful, `false` if errored.\r\n    function isOk(Witnet.Result memory _result)\r\n        external pure\r\n        returns (bool)\r\n    {\r\n        return _result.success;\r\n    }\r\n\r\n    /// @notice Tell if a Witnet.Result is errored.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return `true` if errored, `false` if successful.\r\n    function isError(Witnet.Result memory _result)\r\n      external pure\r\n      returns (bool)\r\n    {\r\n        return !_result.success;\r\n    }\r\n\r\n    /// @notice Decode a bytes value from a Witnet.Result as a `bytes` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `bytes` decoded from the Witnet.Result.\r\n    function asBytes(Witnet.Result memory _result)\r\n        external pure\r\n        returns(bytes memory)\r\n    {\r\n        require(_result.success, \"WitnetParserLib: tried to read bytes value from errored Witnet.Result\");\r\n        return _result.value.decodeBytes();\r\n    }\r\n\r\n    /// @notice Decode an error code from a Witnet.Result as a member of `Witnet.ErrorCodes`.\r\n    /// @param _result An instance of `Witnet.Result`.\r\n    /// @return The `CBORValue.Error memory` decoded from the Witnet.Result.\r\n    function asErrorCode(Witnet.Result memory _result)\r\n        external pure\r\n        returns (Witnet.ErrorCodes)\r\n    {\r\n        uint64[] memory error = asRawError(_result);\r\n        if (error.length == 0) {\r\n            return Witnet.ErrorCodes.Unknown;\r\n        }\r\n        return _supportedErrorOrElseUnknown(error[0]);\r\n    }\r\n\r\n    /// @notice Generate a suitable error message for a member of `Witnet.ErrorCodes` and its corresponding arguments.\r\n    /// @dev WARN: Note that client contracts should wrap this function into a try-catch foreseing potential errors generated in this function\r\n    /// @param _result An instance of `Witnet.Result`.\r\n    /// @return A tuple containing the `CBORValue.Error memory` decoded from the `Witnet.Result`, plus a loggable error message.\r\n    function asErrorMessage(Witnet.Result memory _result)\r\n      public pure\r\n      returns (Witnet.ErrorCodes, string memory)\r\n    {\r\n        uint64[] memory error = asRawError(_result);\r\n        if (error.length == 0) {\r\n            return (Witnet.ErrorCodes.Unknown, \"Unknown error (no error code)\");\r\n        }\r\n        Witnet.ErrorCodes errorCode = _supportedErrorOrElseUnknown(error[0]);\r\n        bytes memory errorMessage;\r\n\r\n        if (errorCode == Witnet.ErrorCodes.SourceScriptNotCBOR && error.length >= 2) {\r\n            errorMessage = abi.encodePacked(\"Source script #\", _utoa(error[1]), \" was not a valid CBOR value\");\r\n        } else if (errorCode == Witnet.ErrorCodes.SourceScriptNotArray && error.length >= 2) {\r\n            errorMessage = abi.encodePacked(\"The CBOR value in script #\", _utoa(error[1]), \" was not an Array of calls\");\r\n        } else if (errorCode == Witnet.ErrorCodes.SourceScriptNotRADON && error.length >= 2) {\r\n            errorMessage = abi.encodePacked(\"The CBOR value in script #\", _utoa(error[1]), \" was not a valid Data Request\");\r\n        } else if (errorCode == Witnet.ErrorCodes.RequestTooManySources && error.length >= 2) {\r\n            errorMessage = abi.encodePacked(\"The request contained too many sources (\", _utoa(error[1]), \")\");\r\n        } else if (errorCode == Witnet.ErrorCodes.ScriptTooManyCalls && error.length >= 4) {\r\n            errorMessage = abi.encodePacked(\r\n                \"Script #\",\r\n                _utoa(error[2]),\r\n                \" from the \",\r\n                stageName(error[1]),\r\n                \" stage contained too many calls (\",\r\n                _utoa(error[3]),\r\n                \")\"\r\n            );\r\n        } else if (errorCode == Witnet.ErrorCodes.UnsupportedOperator && error.length >= 5) {\r\n            errorMessage = abi.encodePacked(\r\n                \"Operator code 0x\",\r\n                utohex(error[4]),\r\n                \" found at call #\",\r\n                _utoa(error[3]),\r\n                \" in script #\",\r\n                _utoa(error[2]),\r\n                \" from \",\r\n                stageName(error[1]),\r\n                \" stage is not supported\"\r\n            );\r\n        } else if (errorCode == Witnet.ErrorCodes.HTTP && error.length >= 3) {\r\n            errorMessage = abi.encodePacked(\r\n                \"Source #\",\r\n                _utoa(error[1]),\r\n                \" could not be retrieved. Failed with HTTP error code: \",\r\n                _utoa(error[2] / 100),\r\n                _utoa(error[2] % 100 / 10),\r\n                _utoa(error[2] % 10)\r\n            );\r\n        } else if (errorCode == Witnet.ErrorCodes.RetrievalTimeout && error.length >= 2) {\r\n            errorMessage = abi.encodePacked(\r\n                \"Source #\",\r\n                _utoa(error[1]),\r\n                \" could not be retrieved because of a timeout\"\r\n            );\r\n        } else if (errorCode == Witnet.ErrorCodes.Underflow && error.length >= 5) {\r\n              errorMessage = abi.encodePacked(\r\n                \"Underflow at operator code 0x\",\r\n                utohex(error[4]),\r\n                \" found at call #\",\r\n                _utoa(error[3]),\r\n                \" in script #\",\r\n                _utoa(error[2]),\r\n                \" from \",\r\n                stageName(error[1]),\r\n                \" stage\"\r\n            );\r\n        } else if (errorCode == Witnet.ErrorCodes.Overflow && error.length >= 5) {\r\n            errorMessage = abi.encodePacked(\r\n                \"Overflow at operator code 0x\",\r\n                utohex(error[4]),\r\n                \" found at call #\",\r\n                _utoa(error[3]),\r\n                \" in script #\",\r\n                _utoa(error[2]),\r\n                \" from \",\r\n                stageName(error[1]),\r\n                \" stage\"\r\n            );\r\n        } else if (errorCode == Witnet.ErrorCodes.DivisionByZero && error.length >= 5) {\r\n            errorMessage = abi.encodePacked(\r\n                \"Division by zero at operator code 0x\",\r\n                utohex(error[4]),\r\n                \" found at call #\",\r\n                _utoa(error[3]),\r\n                \" in script #\",\r\n                _utoa(error[2]),\r\n                \" from \",\r\n                stageName(error[1]),\r\n                \" stage\"\r\n            );\r\n        } else if (errorCode == Witnet.ErrorCodes.BridgeMalformedRequest) {\r\n            errorMessage = \"The structure of the request is invalid and it cannot be parsed\";\r\n        } else if (errorCode == Witnet.ErrorCodes.BridgePoorIncentives) {\r\n            errorMessage = \"The request has been rejected by the bridge node due to poor incentives\";\r\n        } else if (errorCode == Witnet.ErrorCodes.BridgeOversizedResult) {\r\n            errorMessage = \"The request result length exceeds a bridge contract defined limit\";\r\n        } else {\r\n            errorMessage = abi.encodePacked(\"Unknown error (0x\", utohex(error[0]), \")\");\r\n        }\r\n        return (errorCode, string(errorMessage));\r\n    }\r\n\r\n    /// @notice Decode a raw error from a `Witnet.Result` as a `uint64[]`.\r\n    /// @param _result An instance of `Witnet.Result`.\r\n    /// @return The `uint64[]` raw error as decoded from the `Witnet.Result`.\r\n    function asRawError(Witnet.Result memory _result)\r\n        public pure\r\n        returns(uint64[] memory)\r\n    {\r\n        require(!_result.success, \"WitnetParserLib: Tried to read error code from successful Witnet.Result\");\r\n        return _result.value.decodeUint64Array();\r\n    }\r\n\r\n    /// @notice Decode a boolean value from a Witnet.Result as an `bool` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `bool` decoded from the Witnet.Result.\r\n    function asBool(Witnet.Result memory _result)\r\n        external pure\r\n        returns (bool)\r\n    {\r\n        require(_result.success, \"WitnetParserLib: Tried to read `bool` value from errored Witnet.Result\");\r\n        return _result.value.decodeBool();\r\n    }\r\n\r\n    /// @notice Decode a fixed16 (half-precision) numeric value from a Witnet.Result as an `int32` value.\r\n    /// @dev Due to the lack of support for floating or fixed point arithmetic in the EVM, this method offsets all values.\r\n    /// by 5 decimal orders so as to get a fixed precision of 5 decimal positions, which should be OK for most `fixed16`.\r\n    /// use cases. In other words, the output of this method is 10,000 times the actual value, encoded into an `int32`.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `int128` decoded from the Witnet.Result.\r\n    function asFixed16(Witnet.Result memory _result)\r\n        external pure\r\n        returns (int32)\r\n    {\r\n        require(_result.success, \"WitnetParserLib: Tried to read `fixed16` value from errored Witnet.Result\");\r\n        return _result.value.decodeFixed16();\r\n    }\r\n\r\n    /// @notice Decode an array of fixed16 values from a Witnet.Result as an `int128[]` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `int128[]` decoded from the Witnet.Result.\r\n    function asFixed16Array(Witnet.Result memory _result)\r\n        external pure\r\n        returns (int32[] memory)\r\n    {\r\n        require(_result.success, \"WitnetParserLib: Tried to read `fixed16[]` value from errored Witnet.Result\");\r\n        return _result.value.decodeFixed16Array();\r\n    }\r\n\r\n    /// @notice Decode a integer numeric value from a Witnet.Result as an `int128` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `int128` decoded from the Witnet.Result.\r\n    function asInt128(Witnet.Result memory _result)\r\n      external pure\r\n      returns (int128)\r\n    {\r\n        require(_result.success, \"WitnetParserLib: Tried to read `int128` value from errored Witnet.Result\");\r\n        return _result.value.decodeInt128();\r\n    }\r\n\r\n    /// @notice Decode an array of integer numeric values from a Witnet.Result as an `int128[]` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `int128[]` decoded from the Witnet.Result.\r\n    function asInt128Array(Witnet.Result memory _result)\r\n        external pure\r\n        returns (int128[] memory)\r\n    {\r\n        require(_result.success, \"WitnetParserLib: Tried to read `int128[]` value from errored Witnet.Result\");\r\n        return _result.value.decodeInt128Array();\r\n    }\r\n\r\n    /// @notice Decode a string value from a Witnet.Result as a `string` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `string` decoded from the Witnet.Result.\r\n    function asString(Witnet.Result memory _result)\r\n        external pure\r\n        returns(string memory)\r\n    {\r\n        require(_result.success, \"WitnetParserLib: Tried to read `string` value from errored Witnet.Result\");\r\n        return _result.value.decodeString();\r\n    }\r\n\r\n    /// @notice Decode an array of string values from a Witnet.Result as a `string[]` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `string[]` decoded from the Witnet.Result.\r\n    function asStringArray(Witnet.Result memory _result)\r\n        external pure\r\n        returns (string[] memory)\r\n    {\r\n        require(_result.success, \"WitnetParserLib: Tried to read `string[]` value from errored Witnet.Result\");\r\n        return _result.value.decodeStringArray();\r\n    }\r\n\r\n    /// @notice Decode a natural numeric value from a Witnet.Result as a `uint64` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `uint64` decoded from the Witnet.Result.\r\n    function asUint64(Witnet.Result memory _result)\r\n        external pure\r\n        returns(uint64)\r\n    {\r\n        require(_result.success, \"WitnetParserLib: Tried to read `uint64` value from errored Witnet.Result\");\r\n        return _result.value.decodeUint64();\r\n    }\r\n\r\n    /// @notice Decode an array of natural numeric values from a Witnet.Result as a `uint64[]` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `uint64[]` decoded from the Witnet.Result.\r\n    function asUint64Array(Witnet.Result memory _result)\r\n        external pure\r\n        returns (uint64[] memory)\r\n    {\r\n        require(_result.success, \"WitnetParserLib: Tried to read `uint64[]` value from errored Witnet.Result\");\r\n        return _result.value.decodeUint64Array();\r\n    }\r\n\r\n    /// @notice Convert a stage index number into the name of the matching Witnet request stage.\r\n    /// @param _stageIndex A `uint64` identifying the index of one of the Witnet request stages.\r\n    /// @return The name of the matching stage.\r\n    function stageName(uint64 _stageIndex)\r\n        public pure\r\n        returns (string memory)\r\n    {\r\n        if (_stageIndex == 0) {\r\n            return \"retrieval\";\r\n        } else if (_stageIndex == 1) {\r\n            return \"aggregation\";\r\n        } else if (_stageIndex == 2) {\r\n            return \"tally\";\r\n        } else {\r\n            return \"unknown\";\r\n        }\r\n    }\r\n\r\n    /// @notice Get an `Witnet.ErrorCodes` item from its `uint64` discriminant.\r\n    /// @param _discriminant The numeric identifier of an error.\r\n    /// @return A member of `Witnet.ErrorCodes`.\r\n    function _supportedErrorOrElseUnknown(uint64 _discriminant)\r\n        private pure\r\n        returns (Witnet.ErrorCodes)\r\n    {\r\n        return Witnet.ErrorCodes(_discriminant);\r\n    }\r\n\r\n    /// @notice Convert a `uint64` into a 1, 2 or 3 characters long `string` representing its.\r\n    /// three less significant decimal values.\r\n    /// @param _u A `uint64` value.\r\n    /// @return The `string` representing its decimal value.\r\n    function _utoa(uint64 _u)\r\n        private pure\r\n        returns (string memory)\r\n    {\r\n        if (_u < 10) {\r\n            bytes memory b1 = new bytes(1);\r\n            b1[0] = bytes1(uint8(_u) + 48);\r\n            return string(b1);\r\n        } else if (_u < 100) {\r\n            bytes memory b2 = new bytes(2);\r\n            b2[0] = bytes1(uint8(_u / 10) + 48);\r\n            b2[1] = bytes1(uint8(_u % 10) + 48);\r\n            return string(b2);\r\n        } else {\r\n            bytes memory b3 = new bytes(3);\r\n            b3[0] = bytes1(uint8(_u / 100) + 48);\r\n            b3[1] = bytes1(uint8(_u % 100 / 10) + 48);\r\n            b3[2] = bytes1(uint8(_u % 10) + 48);\r\n            return string(b3);\r\n        }\r\n    }\r\n\r\n    /// @notice Convert a `uint64` into a 2 characters long `string` representing its two less significant hexadecimal values.\r\n    /// @param _u A `uint64` value.\r\n    /// @return The `string` representing its hexadecimal value.\r\n    function utohex(uint64 _u)\r\n        private pure\r\n        returns (string memory)\r\n    {\r\n        bytes memory b2 = new bytes(2);\r\n        uint8 d0 = uint8(_u / 16) + 48;\r\n        uint8 d1 = uint8(_u % 16) + 48;\r\n        if (d0 > 57)\r\n            d0 += 7;\r\n        if (d1 > 57)\r\n            d1 += 7;\r\n        b2[0] = bytes1(d0);\r\n        b2[1] = bytes1(d1);\r\n        return string(b2);\r\n    }\r\n}\r\n// File: contracts\\interfaces\\IERC20.sol\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /// Returns the amount of tokens in existence.\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /// Returns the amount of tokens owned by `_account`.\r\n    function balanceOf(address _account) external view returns (uint256);\r\n\r\n    /// Moves `_amount` tokens from the caller's account to `_recipient`.\r\n    /// Returns a boolean value indicating whether the operation succeeded.\r\n    /// Emits a {Transfer} event.\r\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\r\n\r\n    /// Returns the remaining number of tokens that `_spender` will be\r\n    /// allowed to spend on behalf of `_owner` through {transferFrom}. This is\r\n    /// zero by default.\r\n    /// This value changes when {approve} or {transferFrom} are called.\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n\r\n    /// Sets `_amount` as the allowance of `_spender` over the caller's tokens.\r\n    /// Returns a boolean value indicating whether the operation succeeded.\r\n    /// \r\n    /// IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n    /// that someone may use both the old and the new allowance by unfortunate\r\n    /// transaction ordering. One possible solution to mitigate this race\r\n    /// condition is to first reduce the spender's allowance to 0 and set the\r\n    /// desired value afterwards:\r\n    /// https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    ///\r\n    /// Emits an {Approval} event.     \r\n    function approve(address _spender, uint256 _amount) external returns (bool);\r\n\r\n    /// Moves `amount` tokens from `_sender` to `_recipient` using the\r\n    /// allowance mechanism. `amount` is then deducted from the caller's\r\n    /// allowance.\r\n    /// Returns a boolean value indicating whether the operation succeeded.\r\n    /// Emits a {Transfer} event. \r\n    function transferFrom(\r\n        address _sender,\r\n        address _recipient,\r\n        uint256 _amount\r\n    ) external returns (bool);\r\n\r\n    /// Emitted when `value` tokens are moved from one account (`from`) to\r\n    /// another (`to`).\r\n    /// Note that `:value` may be zero.\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /// Emitted when the allowance of a `spender` for an `owner` is set by\r\n    /// a call to {approve}. `value` is the new allowance.\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// File: contracts\\patterns\\Payable.sol\r\nabstract contract Payable {\r\n    IERC20 public immutable currency;\r\n\r\n    event Received(address from, uint256 amount);\r\n    event Transfer(address to, uint256 amount);\r\n\r\n    constructor(address _currency) {\r\n        currency = IERC20(_currency);\r\n    }\r\n\r\n    /// Gets current transaction price.\r\n    function _getGasPrice() internal view virtual returns (uint256);\r\n\r\n    /// Gets current payment value.\r\n    function _getMsgValue() internal view virtual returns (uint256);\r\n\r\n    /// Perform safe transfer or whatever token is used for paying rewards.\r\n    function _safeTransferTo(address payable, uint256) internal virtual;\r\n}\r\n// File: contracts\\impls\\trustable\\WitnetRequestBoardTrustableBase.sol\r\n/// @title Witnet Request Board \"trustable\" base implementation contract.\r\n/// @notice Contract to bridge requests to Witnet Decentralized Oracle Network.\r\n/// @dev This contract enables posting requests that Witnet bridges will insert into the Witnet network.\r\n/// The result of the requests will be posted back to this contract by the bridge nodes too.\r\n/// @author The Witnet Foundation\r\nabstract contract WitnetRequestBoardTrustableBase\r\n    is \r\n        Payable,\r\n        IWitnetRequestBoardAdmin,\r\n        IWitnetRequestBoardAdminACLs,        \r\n        WitnetBoardDataACLs,\r\n        WitnetRequestBoardUpgradableBase        \r\n{\r\n    using Witnet for bytes;\r\n    using WitnetParserLib for Witnet.Result;\r\n    \r\n    constructor(bool _upgradable, bytes32 _versionTag, address _currency)\r\n        Payable(_currency)\r\n        WitnetRequestBoardUpgradableBase(_upgradable, _versionTag)\r\n    {}\r\n\r\n\r\n    // ================================================================================================================\r\n    // --- Overrides 'Upgradable' -------------------------------------------------------------------------------------\r\n\r\n    /// Initialize storage-context when invoked as delegatecall. \r\n    /// @dev Must fail when trying to initialize same instance more than once.\r\n    function initialize(bytes memory _initData) virtual external override {\r\n        address _owner = _state().owner;\r\n        if (_owner == address(0)) {\r\n            // set owner if none set yet\r\n            _owner = msg.sender;\r\n            _state().owner = _owner;\r\n        } else {\r\n            // only owner can initialize:\r\n            require(msg.sender == _owner, \"WitnetRequestBoardTrustableBase: only owner\");\r\n        }        \r\n\r\n        if (_state().base != address(0)) {\r\n            // current implementation cannot be initialized more than once:\r\n            require(_state().base != base(), \"WitnetRequestBoardTrustableBase: already initialized\");\r\n        }        \r\n        _state().base = base();\r\n\r\n        emit Upgraded(msg.sender, base(), codehash(), version());\r\n\r\n        // Do actual base initialization:\r\n        setReporters(abi.decode(_initData, (address[])));\r\n    }\r\n\r\n    /// Tells whether provided address could eventually upgrade the contract.\r\n    function isUpgradableFrom(address _from) external view override returns (bool) {\r\n        address _owner = _state().owner;\r\n        return (\r\n            // false if the WRB is intrinsically not upgradable, or `_from` is no owner\r\n            isUpgradable()\r\n                && _owner == _from\r\n        );\r\n    }\r\n\r\n\r\n    // ================================================================================================================\r\n    // --- Full implementation of 'IWitnetRequestBoardAdmin' ----------------------------------------------------------\r\n\r\n    /// Gets admin/owner address.\r\n    function owner()\r\n        public view\r\n        override\r\n        returns (address)\r\n    {\r\n        return _state().owner;\r\n    }\r\n\r\n    /// Transfers ownership.\r\n    function transferOwnership(address _newOwner)\r\n        external\r\n        virtual override\r\n        onlyOwner\r\n    {\r\n        address _owner = _state().owner;\r\n        if (_newOwner != _owner) {\r\n            _state().owner = _newOwner;\r\n            emit OwnershipTransferred(_owner, _newOwner);\r\n        }\r\n    }\r\n\r\n\r\n    // ================================================================================================================\r\n    // --- Full implementation of 'IWitnetRequestBoardAdminACLs' ------------------------------------------------------\r\n\r\n    /// Tells whether given address is included in the active reporters control list.\r\n    /// @param _reporter The address to be checked.\r\n    function isReporter(address _reporter) public view override returns (bool) {\r\n        return _acls().isReporter_[_reporter];\r\n    }\r\n\r\n    /// Adds given addresses to the active reporters control list.\r\n    /// @dev Can only be called from the owner address.\r\n    /// @dev Emits the `ReportersSet` event. \r\n    /// @param _reporters List of addresses to be added to the active reporters control list.\r\n    function setReporters(address[] memory _reporters)\r\n        public\r\n        override\r\n        onlyOwner\r\n    {\r\n        for (uint ix = 0; ix < _reporters.length; ix ++) {\r\n            address _reporter = _reporters[ix];\r\n            _acls().isReporter_[_reporter] = true;\r\n        }\r\n        emit ReportersSet(_reporters);\r\n    }\r\n\r\n    /// Removes given addresses from the active reporters control list.\r\n    /// @dev Can only be called from the owner address.\r\n    /// @dev Emits the `ReportersUnset` event. \r\n    /// @param _exReporters List of addresses to be added to the active reporters control list.\r\n    function unsetReporters(address[] memory _exReporters)\r\n        public\r\n        override\r\n        onlyOwner\r\n    {\r\n        for (uint ix = 0; ix < _exReporters.length; ix ++) {\r\n            address _reporter = _exReporters[ix];\r\n            _acls().isReporter_[_reporter] = false;\r\n        }\r\n        emit ReportersUnset(_exReporters);\r\n    }\r\n\r\n\r\n    // ================================================================================================================\r\n    // --- Full implementation of 'IWitnetRequestBoardReporter' -------------------------------------------------------\r\n\r\n    /// Reports the Witnet-provided result to a previously posted request. \r\n    /// @dev Will assume `block.timestamp` as the timestamp at which the request was solved.\r\n    /// @dev Fails if:\r\n    /// @dev - the `_queryId` is not in 'Posted' status.\r\n    /// @dev - provided `_drTxHash` is zero;\r\n    /// @dev - length of provided `_result` is zero.\r\n    /// @param _queryId The unique identifier of the data request.\r\n    /// @param _drTxHash The hash of the solving tally transaction in Witnet.\r\n    /// @param _cborBytes The result itself as bytes.\r\n    function reportResult(\r\n            uint256 _queryId,\r\n            bytes32 _drTxHash,\r\n            bytes calldata _cborBytes\r\n        )\r\n        external\r\n        override\r\n        onlyReporters\r\n        inStatus(_queryId, Witnet.QueryStatus.Posted)\r\n    {\r\n        // solhint-disable not-rely-on-time\r\n        _reportResult(_queryId, block.timestamp, _drTxHash, _cborBytes);\r\n    }\r\n\r\n    /// Reports the Witnet-provided result to a previously posted request.\r\n    /// @dev Fails if:\r\n    /// @dev - called from unauthorized address;\r\n    /// @dev - the `_queryId` is not in 'Posted' status.\r\n    /// @dev - provided `_drTxHash` is zero;\r\n    /// @dev - length of provided `_result` is zero.\r\n    /// @param _queryId The unique query identifier\r\n    /// @param _timestamp The timestamp of the solving tally transaction in Witnet.\r\n    /// @param _drTxHash The hash of the solving tally transaction in Witnet.\r\n    /// @param _cborBytes The result itself as bytes.\r\n    function reportResult(\r\n            uint256 _queryId,\r\n            uint256 _timestamp,\r\n            bytes32 _drTxHash,\r\n            bytes calldata _cborBytes\r\n        )\r\n        external\r\n        override\r\n        onlyReporters\r\n        inStatus(_queryId, Witnet.QueryStatus.Posted)\r\n    {\r\n        _reportResult(_queryId, _timestamp, _drTxHash, _cborBytes);\r\n    }\r\n    \r\n\r\n    // ================================================================================================================\r\n    // --- Full implementation of 'IWitnetRequestBoardRequestor' ------------------------------------------------------\r\n\r\n    /// Retrieves copy of all response data related to a previously posted request, removing the whole query from storage.\r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status, or called from an address different to\r\n    /// @dev the one that actually posted the given request.\r\n    /// @param _queryId The unique query identifier.\r\n    function deleteQuery(uint256 _queryId)\r\n        public\r\n        virtual override\r\n        inStatus(_queryId, Witnet.QueryStatus.Reported)\r\n        returns (Witnet.Response memory _response)\r\n    {\r\n        Witnet.Query storage _query = _state().queries[_queryId];\r\n        require(\r\n            msg.sender == _query.request.requester,\r\n            \"WitnetRequestBoardTrustableBase: only requester\"\r\n        );\r\n        _response = _query.response;\r\n        delete _state().queries[_queryId];\r\n        emit DeletedQuery(_queryId, msg.sender);\r\n    }\r\n\r\n    /// Requests the execution of the given Witnet Data Request in expectation that it will be relayed and solved by the Witnet DON.\r\n    /// A reward amount is escrowed by the Witnet Request Board that will be transferred to the reporter who relays back the Witnet-provided \r\n    /// result to this request.\r\n    /// @dev Fails if:\r\n    /// @dev - provided reward is too low.\r\n    /// @dev - provided script is zero address.\r\n    /// @dev - provided script bytecode is empty.\r\n    /// @param _addr The address of a IWitnetRequest contract, containing the actual Data Request seralized bytecode.\r\n    /// @return _queryId An unique query identifier.\r\n    function postRequest(IWitnetRequest _addr)\r\n        public payable\r\n        virtual override\r\n        returns (uint256 _queryId)\r\n    {\r\n        uint256 _value = _getMsgValue();\r\n        uint256 _gasPrice = _getGasPrice();\r\n\r\n        // Checks the tally reward is covering gas cost\r\n        uint256 minResultReward = estimateReward(_gasPrice);\r\n        require(_value >= minResultReward, \"WitnetRequestBoardTrustableBase: reward too low\");\r\n\r\n        // Validates provided script:\r\n        require(address(_addr) != address(0), \"WitnetRequestBoardTrustableBase: null script\");\r\n        bytes memory _bytecode = _addr.bytecode();\r\n        require(_bytecode.length > 0, \"WitnetRequestBoardTrustableBase: empty script\");\r\n\r\n        _queryId = ++ _state().numQueries;\r\n\r\n        Witnet.Request storage _request = _getRequestData(_queryId);\r\n        _request.requester = msg.sender;\r\n        _request.addr = _addr;\r\n        _request.hash = _bytecode.hash();\r\n        _request.gasprice = _gasPrice;\r\n        _request.reward = _value;\r\n\r\n        // Let observers know that a new request has been posted\r\n        emit PostedRequest(_queryId, msg.sender);\r\n    }\r\n    \r\n    /// Increments the reward of a previously posted request by adding the transaction value to it.\r\n    /// @dev Updates request `gasPrice` in case this method is called with a higher \r\n    /// @dev gas price value than the one used in previous calls to `postRequest` or\r\n    /// @dev `upgradeReward`. \r\n    /// @dev Fails if the `_queryId` is not in 'Posted' status.\r\n    /// @dev Fails also in case the request `gasPrice` is increased, and the new \r\n    /// @dev reward value gets below new recalculated threshold. \r\n    /// @param _queryId The unique query identifier.\r\n    function upgradeReward(uint256 _queryId)\r\n        public payable\r\n        virtual override      \r\n        inStatus(_queryId, Witnet.QueryStatus.Posted)\r\n    {\r\n        Witnet.Request storage _request = _getRequestData(_queryId);\r\n\r\n        uint256 _newReward = _request.reward + _getMsgValue();\r\n        uint256 _newGasPrice = _getGasPrice();\r\n\r\n        // If gas price is increased, then check if new rewards cover gas costs\r\n        if (_newGasPrice > _request.gasprice) {\r\n            // Checks the reward is covering gas cost\r\n            uint256 _minResultReward = estimateReward(_newGasPrice);\r\n            require(\r\n                _newReward >= _minResultReward,\r\n                \"WitnetRequestBoardTrustableBase: reward too low\"\r\n            );\r\n            _request.gasprice = _newGasPrice;\r\n        }\r\n        _request.reward = _newReward;\r\n    }\r\n\r\n\r\n    // ================================================================================================================\r\n    // --- Full implementation of 'IWitnetRequestBoardView' -----------------------------------------------------------\r\n\r\n    /// Estimates the amount of reward we need to insert for a given gas price.\r\n    /// @param _gasPrice The gas price for which we need to calculate the rewards.\r\n    function estimateReward(uint256 _gasPrice)\r\n        public view\r\n        virtual override\r\n        returns (uint256);\r\n\r\n    /// Returns next request id to be generated by the Witnet Request Board.\r\n    function getNextQueryId()\r\n        external view \r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _state().numQueries + 1;\r\n    }\r\n\r\n    /// Gets the whole Query data contents, if any, no matter its current status.\r\n    function getQueryData(uint256 _queryId)\r\n      external view\r\n      override\r\n      returns (Witnet.Query memory)\r\n    {\r\n        return _state().queries[_queryId];\r\n    }\r\n\r\n    /// Gets current status of given query.\r\n    function getQueryStatus(uint256 _queryId)\r\n        external view\r\n        override\r\n        returns (Witnet.QueryStatus)\r\n    {\r\n        return _getQueryStatus(_queryId);\r\n\r\n    }\r\n\r\n    /// Retrieves the whole Request record posted to the Witnet Request Board.\r\n    /// @dev Fails if the `_queryId` is not valid or, if it has been deleted,\r\n    /// @dev or if the related script bytecode got changed after being posted.\r\n    /// @param _queryId The unique identifier of a previously posted query.\r\n    function readRequest(uint256 _queryId)\r\n        external view\r\n        override\r\n        notDeleted(_queryId)\r\n        returns (Witnet.Request memory)\r\n    {\r\n        return _checkRequest(_queryId);\r\n    }\r\n    \r\n    /// Retrieves the Witnet data request actual bytecode of a previously posted request.\r\n    /// @dev Fails if the `_queryId` is not valid or, if it has been deleted,\r\n    /// @dev or if the related script bytecode got changed after being posted.\r\n    /// @param _queryId The unique identifier of the request query.\r\n    function readRequestBytecode(uint256 _queryId)\r\n        external view\r\n        override\r\n        notDeleted(_queryId)\r\n        returns (bytes memory _bytecode)\r\n    {\r\n        Witnet.Request storage _request = _getRequestData(_queryId);\r\n        if (address(_request.addr) != address(0)) {\r\n            // if DR's request contract address is not zero,\r\n            // we assume the DR has not been deleted, so\r\n            // DR's bytecode can still be fetched:\r\n            _bytecode = _request.addr.bytecode();\r\n            require(\r\n                _bytecode.hash() == _request.hash,\r\n                \"WitnetRequestBoardTrustableBase: bytecode changed after posting\"\r\n            );\r\n        } \r\n    }\r\n\r\n    /// Retrieves the gas price that any assigned reporter will have to pay when reporting \r\n    /// result to a previously posted Witnet data request.\r\n    /// @dev Fails if the `_queryId` is not valid or, if it has been deleted,\r\n    /// @dev or if the related script bytecode got changed after being posted.\r\n    /// @param _queryId The unique query identifier\r\n    function readRequestGasPrice(uint256 _queryId)\r\n        external view\r\n        override\r\n        notDeleted(_queryId)\r\n        returns (uint256)\r\n    {\r\n        return _checkRequest(_queryId).gasprice;\r\n    }\r\n\r\n    /// Retrieves the reward currently set for a previously posted request.\r\n    /// @dev Fails if the `_queryId` is not valid or, if it has been deleted,\r\n    /// @dev or if the related script bytecode got changed after being posted.\r\n    /// @param _queryId The unique query identifier\r\n    function readRequestReward(uint256 _queryId)\r\n        external view\r\n        override\r\n        notDeleted(_queryId)\r\n        returns (uint256)\r\n    {\r\n        return _checkRequest(_queryId).reward;\r\n    }\r\n\r\n    /// Retrieves the Witnet-provided result, and metadata, to a previously posted request.    \r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\r\n    /// @param _queryId The unique query identifier\r\n    function readResponse(uint256 _queryId)\r\n        external view\r\n        override\r\n        inStatus(_queryId, Witnet.QueryStatus.Reported)\r\n        returns (Witnet.Response memory _response)\r\n    {\r\n        return _getResponseData(_queryId);\r\n    }\r\n\r\n    /// Retrieves the hash of the Witnet transaction that actually solved the referred query.\r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\r\n    /// @param _queryId The unique query identifier.\r\n    function readResponseDrTxHash(uint256 _queryId)\r\n        external view        \r\n        override\r\n        inStatus(_queryId, Witnet.QueryStatus.Reported)\r\n        returns (bytes32)\r\n    {\r\n        return _getResponseData(_queryId).drTxHash;\r\n    }\r\n\r\n    /// Retrieves the address that reported the result to a previously-posted request.\r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\r\n    /// @param _queryId The unique query identifier\r\n    function readResponseReporter(uint256 _queryId)\r\n        external view\r\n        override\r\n        inStatus(_queryId, Witnet.QueryStatus.Reported)\r\n        returns (address)\r\n    {\r\n        return _getResponseData(_queryId).reporter;\r\n    }\r\n\r\n    /// Retrieves the Witnet-provided CBOR-bytes result of a previously posted request.\r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\r\n    /// @param _queryId The unique query identifier\r\n    function readResponseResult(uint256 _queryId)\r\n        external view\r\n        override\r\n        inStatus(_queryId, Witnet.QueryStatus.Reported)\r\n        returns (Witnet.Result memory)\r\n    {\r\n        Witnet.Response storage _response = _getResponseData(_queryId);\r\n        return WitnetParserLib.resultFromCborBytes(_response.cborBytes);\r\n    }\r\n\r\n    /// Retrieves the timestamp in which the result to the referred query was solved by the Witnet DON.\r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\r\n    /// @param _queryId The unique query identifier.\r\n    function readResponseTimestamp(uint256 _queryId)\r\n        external view\r\n        override\r\n        inStatus(_queryId, Witnet.QueryStatus.Reported)\r\n        returns (uint256)\r\n    {\r\n        return _getResponseData(_queryId).timestamp;\r\n    }\r\n\r\n\r\n    // ================================================================================================================\r\n    // --- Full implementation of 'IWitnetRequestParser' interface ----------------------------------------------------\r\n\r\n    /// Decode raw CBOR bytes into a Witnet.Result instance.\r\n    /// @param _cborBytes Raw bytes representing a CBOR-encoded value.\r\n    /// @return A `Witnet.Result` instance.\r\n    function resultFromCborBytes(bytes memory _cborBytes)\r\n        external pure\r\n        override\r\n        returns (Witnet.Result memory)\r\n    {\r\n        return WitnetParserLib.resultFromCborBytes(_cborBytes);\r\n    }\r\n\r\n    /// Decode a CBOR value into a Witnet.Result instance.\r\n    /// @param _cborValue An instance of `Witnet.CBOR`.\r\n    /// @return A `Witnet.Result` instance.\r\n    function resultFromCborValue(Witnet.CBOR memory _cborValue)\r\n        external pure\r\n        override\r\n        returns (Witnet.Result memory)\r\n    {\r\n        return WitnetParserLib.resultFromCborValue(_cborValue);\r\n    }\r\n\r\n    /// Tell if a Witnet.Result is successful.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return `true` if successful, `false` if errored.\r\n    function isOk(Witnet.Result memory _result)\r\n        external pure\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _result.isOk();\r\n    }\r\n\r\n    /// Tell if a Witnet.Result is errored.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return `true` if errored, `false` if successful.\r\n    function isError(Witnet.Result memory _result)\r\n        external pure\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _result.isError();\r\n    }\r\n\r\n    /// Decode a bytes value from a Witnet.Result as a `bytes` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `bytes` decoded from the Witnet.Result.\r\n    function asBytes(Witnet.Result memory _result)\r\n        external pure\r\n        override returns (bytes memory)\r\n    {\r\n        return _result.asBytes();\r\n    }\r\n\r\n    /// Decode an error code from a Witnet.Result as a member of `Witnet.ErrorCodes`.\r\n    /// @param _result An instance of `Witnet.Result`.\r\n    /// @return The `CBORValue.Error memory` decoded from the Witnet.Result.\r\n    function asErrorCode(Witnet.Result memory _result)\r\n        external pure\r\n        override\r\n        returns (Witnet.ErrorCodes)\r\n    {\r\n        return _result.asErrorCode();\r\n    }\r\n\r\n    /// Generate a suitable error message for a member of `Witnet.ErrorCodes` and its corresponding arguments.\r\n    /// @dev WARN: Note that client contracts should wrap this function into a try-catch foreseing potential errors generated in this function\r\n    /// @param _result An instance of `Witnet.Result`.\r\n    /// @return A tuple containing the `CBORValue.Error memory` decoded from the `Witnet.Result`, plus a loggable error message.\r\n    function asErrorMessage(Witnet.Result memory _result)\r\n        external pure\r\n        override\r\n        returns (Witnet.ErrorCodes, string memory)\r\n    {\r\n        return _result.asErrorMessage();\r\n    }\r\n\r\n    /// Decode a raw error from a `Witnet.Result` as a `uint64[]`.\r\n    /// @param _result An instance of `Witnet.Result`.\r\n    /// @return The `uint64[]` raw error as decoded from the `Witnet.Result`.\r\n    function asRawError(Witnet.Result memory _result)\r\n        external pure\r\n        override\r\n        returns(uint64[] memory)\r\n    {\r\n        return _result.asRawError();\r\n    }\r\n\r\n    /// Decode a boolean value from a Witnet.Result as an `bool` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `bool` decoded from the Witnet.Result.\r\n    function asBool(Witnet.Result memory _result)\r\n        external pure\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _result.asBool();\r\n    }\r\n\r\n    /// Decode a fixed16 (half-precision) numeric value from a Witnet.Result as an `int32` value.\r\n    /// @dev Due to the lack of support for floating or fixed point arithmetic in the EVM, this method offsets all values.\r\n    /// by 5 decimal orders so as to get a fixed precision of 5 decimal positions, which should be OK for most `fixed16`.\r\n    /// use cases. In other words, the output of this method is 10,000 times the actual value, encoded into an `int32`.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `int128` decoded from the Witnet.Result.\r\n    function asFixed16(Witnet.Result memory _result)\r\n        external pure\r\n        override\r\n        returns (int32)\r\n    {\r\n        return _result.asFixed16();\r\n    }\r\n\r\n    /// Decode an array of fixed16 values from a Witnet.Result as an `int128[]` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `int128[]` decoded from the Witnet.Result.\r\n    function asFixed16Array(Witnet.Result memory _result)\r\n        external pure\r\n        override\r\n        returns (int32[] memory)\r\n    {\r\n        return _result.asFixed16Array();\r\n    }\r\n\r\n    /// Decode a integer numeric value from a Witnet.Result as an `int128` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `int128` decoded from the Witnet.Result.\r\n    function asInt128(Witnet.Result memory _result)\r\n        external pure\r\n        override\r\n        returns (int128)\r\n    {\r\n        return _result.asInt128();\r\n    }\r\n\r\n    /// Decode an array of integer numeric values from a Witnet.Result as an `int128[]` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `int128[]` decoded from the Witnet.Result.\r\n    function asInt128Array(Witnet.Result memory _result)\r\n        external pure\r\n        override\r\n        returns (int128[] memory)\r\n    {\r\n        return _result.asInt128Array();\r\n    }\r\n\r\n    /// Decode a string value from a Witnet.Result as a `string` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `string` decoded from the Witnet.Result.\r\n    function asString(Witnet.Result memory _result)\r\n        external pure\r\n        override\r\n        returns (string memory)\r\n    {\r\n        return _result.asString();\r\n    }\r\n\r\n    /// Decode an array of string values from a Witnet.Result as a `string[]` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `string[]` decoded from the Witnet.Result.\r\n    function asStringArray(Witnet.Result memory _result)\r\n        external pure\r\n        override\r\n        returns (string[] memory)\r\n    {\r\n        return _result.asStringArray();\r\n    }\r\n\r\n    /// Decode a natural numeric value from a Witnet.Result as a `uint64` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `uint64` decoded from the Witnet.Result.\r\n    function asUint64(Witnet.Result memory _result)\r\n        external pure \r\n        override\r\n        returns(uint64)\r\n    {\r\n        return _result.asUint64();\r\n    }\r\n\r\n    /// Decode an array of natural numeric values from a Witnet.Result as a `uint64[]` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `uint64[]` decoded from the Witnet.Result.\r\n    function asUint64Array(Witnet.Result memory _result)\r\n        external pure\r\n        override\r\n        returns (uint64[] memory)\r\n    {\r\n        return _result.asUint64Array();\r\n    }\r\n\r\n\r\n    // ================================================================================================================\r\n    // --- Internal functions -----------------------------------------------------------------------------------------\r\n\r\n    function _checkRequest(uint256 _queryId)\r\n        internal view\r\n        returns (Witnet.Request storage _request)\r\n    {\r\n        _request = _getRequestData(_queryId);\r\n        if (address(_request.addr) != address(0)) {\r\n            // if the script contract address is not zero,\r\n            // we assume the query has not been deleted, so\r\n            // the request script bytecode can still be fetched:\r\n            bytes memory _bytecode = _request.addr.bytecode();\r\n            require(\r\n                _bytecode.hash() == _request.hash,\r\n                \"WitnetRequestBoardTrustableBase: bytecode changed after posting\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function _reportResult(\r\n            uint256 _queryId,\r\n            uint256 _timestamp,\r\n            bytes32 _drTxHash,\r\n            bytes memory _cborBytes\r\n        )\r\n        internal\r\n    {\r\n        require(_drTxHash != 0, \"WitnetRequestBoardTrustableDefault: Witnet drTxHash cannot be zero\");\r\n        // Ensures the result byes do not have zero length\r\n        // This would not be a valid encoding with CBOR and could trigger a reentrancy attack\r\n        require(_cborBytes.length != 0, \"WitnetRequestBoardTrustableDefault: result cannot be empty\");\r\n\r\n        Witnet.Query storage _query = _state().queries[_queryId];\r\n        Witnet.Response storage _response = _query.response;\r\n\r\n        // solhint-disable not-rely-on-time\r\n        _response.timestamp = _timestamp;\r\n        _response.drTxHash = _drTxHash;\r\n        _response.reporter = msg.sender;\r\n        _response.cborBytes = _cborBytes;\r\n\r\n        _safeTransferTo(payable(msg.sender), _query.request.reward);\r\n        emit PostedResult(_queryId, msg.sender);\r\n    }\r\n}\r\n// File: contracts\\patterns\\Destructible.sol\r\ninterface Destructible {\r\n    /// @dev Self-destruct the whole contract.\r\n    function destruct() external;\r\n}\r\n// File: contracts\\impls\\trustable\\WitnetRequestBoardTrustableDefault.sol\r\n/* solhint-disable var-name-mixedcase */\r\n\r\n\r\n\r\n\r\n/// @title Witnet Request Board \"trustable\" implementation contract.\r\n/// @notice Contract to bridge requests to Witnet Decentralized Oracle Network.\r\n/// @dev This contract enables posting requests that Witnet bridges will insert into the Witnet network.\r\n/// The result of the requests will be posted back to this contract by the bridge nodes too.\r\n/// @author The Witnet Foundation\r\ncontract WitnetRequestBoardTrustableDefault\r\n    is \r\n        Destructible,\r\n        WitnetRequestBoardTrustableBase\r\n{  \r\n    uint256 internal immutable _ESTIMATED_REPORT_RESULT_GAS;\r\n\r\n    constructor(\r\n        bool _upgradable,\r\n        bytes32 _versionTag,\r\n        uint256 _reportResultGasLimit\r\n    )\r\n        WitnetRequestBoardTrustableBase(_upgradable, _versionTag, address(0))\r\n    {\r\n        _ESTIMATED_REPORT_RESULT_GAS = _reportResultGasLimit;\r\n    }\r\n\r\n\r\n    // ================================================================================================================\r\n    // --- Overrides implementation of 'IWitnetRequestBoardView' ------------------------------------------------------\r\n\r\n    /// Estimates the amount of reward we need to insert for a given gas price.\r\n    /// @param _gasPrice The gas price for which we need to calculate the rewards.\r\n    function estimateReward(uint256 _gasPrice)\r\n        public view\r\n        virtual override\r\n        returns (uint256)\r\n    {\r\n        return _gasPrice * _ESTIMATED_REPORT_RESULT_GAS;\r\n    }\r\n\r\n\r\n    // ================================================================================================================\r\n    // --- Overrides 'Destructible' -----------------------------------------------------------------------------------\r\n\r\n    /// Destroys current instance. Only callable by the owner.\r\n    function destruct() external override onlyOwner {\r\n        selfdestruct(payable(msg.sender));\r\n    }\r\n\r\n\r\n    // ================================================================================================================\r\n    // --- Overrides 'Payable' ----------------------------------------------------------------------------------------\r\n\r\n    /// Gets current transaction price.\r\n    function _getGasPrice()\r\n        internal view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return tx.gasprice;\r\n    }\r\n\r\n    /// Gets current payment value.\r\n    function _getMsgValue()\r\n        internal view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return msg.value;\r\n    }\r\n\r\n    /// Transfers ETHs to given address.\r\n    /// @param _to Recipient address.\r\n    /// @param _amount Amount of ETHs to transfer.\r\n    function _safeTransferTo(address payable _to, uint256 _amount)\r\n        internal\r\n        override\r\n    {\r\n        payable(_to).transfer(_amount);\r\n    }   \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_upgradable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"_versionTag\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_reportResultGasLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"queryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"DeletedQuery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"queryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"PostedRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"queryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"PostedResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"reporters\",\"type\":\"address[]\"}],\"name\":\"ReportersSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"reporters\",\"type\":\"address[]\"}],\"name\":\"ReportersUnset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"baseCodehash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"versionTag\",\"type\":\"bytes32\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"value\",\"type\":\"tuple\"}],\"internalType\":\"struct Witnet.Result\",\"name\":\"_result\",\"type\":\"tuple\"}],\"name\":\"asBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"value\",\"type\":\"tuple\"}],\"internalType\":\"struct Witnet.Result\",\"name\":\"_result\",\"type\":\"tuple\"}],\"name\":\"asBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"value\",\"type\":\"tuple\"}],\"internalType\":\"struct Witnet.Result\",\"name\":\"_result\",\"type\":\"tuple\"}],\"name\":\"asErrorCode\",\"outputs\":[{\"internalType\":\"enum Witnet.ErrorCodes\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"value\",\"type\":\"tuple\"}],\"internalType\":\"struct Witnet.Result\",\"name\":\"_result\",\"type\":\"tuple\"}],\"name\":\"asErrorMessage\",\"outputs\":[{\"internalType\":\"enum Witnet.ErrorCodes\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"value\",\"type\":\"tuple\"}],\"internalType\":\"struct Witnet.Result\",\"name\":\"_result\",\"type\":\"tuple\"}],\"name\":\"asFixed16\",\"outputs\":[{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"value\",\"type\":\"tuple\"}],\"internalType\":\"struct Witnet.Result\",\"name\":\"_result\",\"type\":\"tuple\"}],\"name\":\"asFixed16Array\",\"outputs\":[{\"internalType\":\"int32[]\",\"name\":\"\",\"type\":\"int32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"value\",\"type\":\"tuple\"}],\"internalType\":\"struct Witnet.Result\",\"name\":\"_result\",\"type\":\"tuple\"}],\"name\":\"asInt128\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"value\",\"type\":\"tuple\"}],\"internalType\":\"struct Witnet.Result\",\"name\":\"_result\",\"type\":\"tuple\"}],\"name\":\"asInt128Array\",\"outputs\":[{\"internalType\":\"int128[]\",\"name\":\"\",\"type\":\"int128[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"value\",\"type\":\"tuple\"}],\"internalType\":\"struct Witnet.Result\",\"name\":\"_result\",\"type\":\"tuple\"}],\"name\":\"asRawError\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"value\",\"type\":\"tuple\"}],\"internalType\":\"struct Witnet.Result\",\"name\":\"_result\",\"type\":\"tuple\"}],\"name\":\"asString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"value\",\"type\":\"tuple\"}],\"internalType\":\"struct Witnet.Result\",\"name\":\"_result\",\"type\":\"tuple\"}],\"name\":\"asStringArray\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"value\",\"type\":\"tuple\"}],\"internalType\":\"struct Witnet.Result\",\"name\":\"_result\",\"type\":\"tuple\"}],\"name\":\"asUint64\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"value\",\"type\":\"tuple\"}],\"internalType\":\"struct Witnet.Result\",\"name\":\"_result\",\"type\":\"tuple\"}],\"name\":\"asUint64Array\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"codehash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_codehash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_queryId\",\"type\":\"uint256\"}],\"name\":\"deleteQuery\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"drTxHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"cborBytes\",\"type\":\"bytes\"}],\"internalType\":\"struct Witnet.Response\",\"name\":\"_response\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"estimateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextQueryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_queryId\",\"type\":\"uint256\"}],\"name\":\"getQueryData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"contract IWitnetRequest\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"gasprice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"internalType\":\"struct Witnet.Request\",\"name\":\"request\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"drTxHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"cborBytes\",\"type\":\"bytes\"}],\"internalType\":\"struct Witnet.Response\",\"name\":\"response\",\"type\":\"tuple\"}],\"internalType\":\"struct Witnet.Query\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_queryId\",\"type\":\"uint256\"}],\"name\":\"getQueryStatus\",\"outputs\":[{\"internalType\":\"enum Witnet.QueryStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_initData\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"value\",\"type\":\"tuple\"}],\"internalType\":\"struct Witnet.Result\",\"name\":\"_result\",\"type\":\"tuple\"}],\"name\":\"isError\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"value\",\"type\":\"tuple\"}],\"internalType\":\"struct Witnet.Result\",\"name\":\"_result\",\"type\":\"tuple\"}],\"name\":\"isOk\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reporter\",\"type\":\"address\"}],\"name\":\"isReporter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUpgradable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"isUpgradableFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWitnetRequest\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"postRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_queryId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_queryId\",\"type\":\"uint256\"}],\"name\":\"readRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IWitnetRequest\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"gasprice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"internalType\":\"struct Witnet.Request\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_queryId\",\"type\":\"uint256\"}],\"name\":\"readRequestBytecode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytecode\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_queryId\",\"type\":\"uint256\"}],\"name\":\"readRequestGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_queryId\",\"type\":\"uint256\"}],\"name\":\"readRequestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_queryId\",\"type\":\"uint256\"}],\"name\":\"readResponse\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"drTxHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"cborBytes\",\"type\":\"bytes\"}],\"internalType\":\"struct Witnet.Response\",\"name\":\"_response\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_queryId\",\"type\":\"uint256\"}],\"name\":\"readResponseDrTxHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_queryId\",\"type\":\"uint256\"}],\"name\":\"readResponseReporter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_queryId\",\"type\":\"uint256\"}],\"name\":\"readResponseResult\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"value\",\"type\":\"tuple\"}],\"internalType\":\"struct Witnet.Result\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_queryId\",\"type\":\"uint256\"}],\"name\":\"readResponseTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_queryId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_drTxHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_cborBytes\",\"type\":\"bytes\"}],\"name\":\"reportResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_queryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_drTxHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_cborBytes\",\"type\":\"bytes\"}],\"name\":\"reportResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_cborBytes\",\"type\":\"bytes\"}],\"name\":\"resultFromCborBytes\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"value\",\"type\":\"tuple\"}],\"internalType\":\"struct Witnet.Result\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"_cborValue\",\"type\":\"tuple\"}],\"name\":\"resultFromCborValue\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"cursor\",\"type\":\"uint32\"}],\"internalType\":\"struct Witnet.Buffer\",\"name\":\"buffer\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"initialByte\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"majorType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalInformation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"len\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tag\",\"type\":\"uint64\"}],\"internalType\":\"struct Witnet.CBOR\",\"name\":\"value\",\"type\":\"tuple\"}],\"internalType\":\"struct Witnet.Result\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_reporters\",\"type\":\"address[]\"}],\"name\":\"setReporters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_exReporters\",\"type\":\"address[]\"}],\"name\":\"unsetReporters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_queryId\",\"type\":\"uint256\"}],\"name\":\"upgradeReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"WitnetRequestBoardTrustableDefault","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000001302e352e312d747275737461626c650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d6e3","EVMVersion":"Default","Library":"WitnetParserLib:fab822ecfedc440d505f731e78786c4a6b39b553","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d448fedd11cd9a03a9b9579f25824967d2a8b51399772f506caf211780135972"}]}