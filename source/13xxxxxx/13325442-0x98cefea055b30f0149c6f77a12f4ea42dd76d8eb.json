{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/examples/AntePoolTest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// ┏━━━┓━━━━━┏┓━━━━━━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━━━━━\\n// ┃┏━┓┃━━━━┏┛┗┓━━━━━━━━┃┏━━┛━━━━━━━━━━━━━━━━━━━━━━━\\n// ┃┗━┛┃┏━┓━┗┓┏┛┏━━┓━━━━┃┗━━┓┏┓┏━┓━┏━━┓━┏━┓━┏━━┓┏━━┓\\n// ┃┏━┓┃┃┏┓┓━┃┃━┃┏┓┃━━━━┃┏━━┛┣┫┃┏┓┓┗━┓┃━┃┏┓┓┃┏━┛┃┏┓┃\\n// ┃┃ ┃┃┃┃┃┃━┃┗┓┃┃━┫━┏┓━┃┃━━━┃┃┃┃┃┃┃┗┛┗┓┃┃┃┃┃┗━┓┃┃━┫\\n// ┗┛ ┗┛┗┛┗┛━┗━┛┗━━┛━┗┛━┗┛━━━┗┛┗┛┗┛┗━━━┛┗┛┗┛┗━━┛┗━━┛\\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/IAntePool.sol\\\";\\nimport \\\"../AnteTest.sol\\\";\\n\\n/// @title Ante Pool contract states matches their ETH balance\\n/// @notice Connects to already deployed Ante Pools to check them\\ncontract AntePoolTest is AnteTest(\\\"Ante Pool contract state matches eth balance\\\") {\\n    using SafeMath for uint256;\\n\\n    /// @param antePoolContracts array of Ante Pools to check against\\n    constructor(address[] memory antePoolContracts) {\\n        testedContracts = antePoolContracts;\\n        protocolName = \\\"Ante\\\";\\n    }\\n\\n    /// @notice test checks if any Ante Pool's balance is less than supposed store values\\n    /// @return true if contract balance is greater than or equal to stored Ante Pool values\\n    function checkTestPasses() public view override returns (bool) {\\n        for (uint256 i = 0; i < testedContracts.length; i++) {\\n            IAntePool antePool = IAntePool(testedContracts[i]);\\n            // totalPaidOut should be 0 before test fails\\n            if (\\n                testedContracts[i].balance <\\n                (\\n                    antePool\\n                        .getTotalChallengerStaked()\\n                        .add(antePool.getTotalStaked())\\n                        .add(antePool.getTotalPendingWithdraw())\\n                        .sub(antePool.totalPaidOut())\\n                )\\n            ) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAntePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// ┏━━━┓━━━━━┏┓━━━━━━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━━━━━\\n// ┃┏━┓┃━━━━┏┛┗┓━━━━━━━━┃┏━━┛━━━━━━━━━━━━━━━━━━━━━━━\\n// ┃┗━┛┃┏━┓━┗┓┏┛┏━━┓━━━━┃┗━━┓┏┓┏━┓━┏━━┓━┏━┓━┏━━┓┏━━┓\\n// ┃┏━┓┃┃┏┓┓━┃┃━┃┏┓┃━━━━┃┏━━┛┣┫┃┏┓┓┗━┓┃━┃┏┓┓┃┏━┛┃┏┓┃\\n// ┃┃ ┃┃┃┃┃┃━┃┗┓┃┃━┫━┏┓━┃┃━━━┃┃┃┃┃┃┃┗┛┗┓┃┃┃┃┃┗━┓┃┃━┫\\n// ┗┛ ┗┛┗┛┗┛━┗━┛┗━━┛━┗┛━┗┛━━━┗┛┗┛┗┛┗━━━┛┗┛┗┛┗━━┛┗━━┛\\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IAnteTest.sol\\\";\\n\\n/// @title The interface for Ante V0.5 Ante Pool\\n/// @notice The Ante Pool handles interactions with connected Ante Test\\ninterface IAntePool {\\n    /// @notice Emitted when a user adds to the stake or challenge pool\\n    /// @param staker The address of user\\n    /// @param amount Amount being added in wei\\n    /// @param isChallenger Whether or not this is added to the challenger pool\\n    event Stake(address indexed staker, uint256 amount, bool indexed isChallenger);\\n\\n    /// @notice Emitted when a user removes from the stake or challenge pool\\n    /// @param staker The address of user\\n    /// @param amount Amount being removed in wei\\n    /// @param isChallenger Whether or not this is removed from the challenger pool\\n    event Unstake(address indexed staker, uint256 amount, bool indexed isChallenger);\\n\\n    /// @notice Emitted when the connected Ante Test's invariant gets verified\\n    /// @param checker The address of challenger who called the verification\\n    event TestChecked(address indexed checker);\\n\\n    /// @notice Emitted when the connected Ante Test has failed test verification\\n    /// @param checker The address of challenger who called the verification\\n    event FailureOccurred(address indexed checker);\\n\\n    /// @notice Emitted when a challenger claims their payout for a failed test\\n    /// @param claimer The address of challenger claiming their payout\\n    /// @param amount Amount being claimed in wei\\n    event ClaimPaid(address indexed claimer, uint256 amount);\\n\\n    /// @notice Emitted when a staker has withdrawn their stake after the 24 hour wait period\\n    /// @param staker The address of the staker removing their stake\\n    /// @param amount Amount withdrawn in wei\\n    event WithdrawStake(address indexed staker, uint256 amount);\\n\\n    /// @notice Emitted when a staker cancels their withdraw action before the 24 hour wait period\\n    /// @param staker The address of the staker cancelling their withdraw\\n    /// @param amount Amount cancelled in wei\\n    event CancelWithdraw(address indexed staker, uint256 amount);\\n\\n    /// @notice Initializes Ante Pool with the connected Ante Test\\n    /// @param _anteTest The Ante Test that will be connected to the Ante Pool\\n    /// @dev This function requires that the Ante Test address is valid and that\\n    /// the invariant validation currently passes\\n    function initialize(IAnteTest _anteTest) external;\\n\\n    /// @notice Cancels a withdraw action of a staker before the 24 hour wait period expires\\n    /// @dev This is called when a staker has initiated a withdraw stake action but\\n    /// then decides to cancel that withdraw before the 24 hour wait period is over\\n    function cancelPendingWithdraw() external;\\n\\n    /// @notice Runs the verification of the invariant of the connected Ante Test\\n    /// @dev Can only be called by a challenger who has challenged the Ante Test\\n    function checkTest() external;\\n\\n    /// @notice Claims the payout of a failed Ante Test\\n    /// @dev To prevent double claiming, the challenger balance is checked before\\n    /// claiming and that balance is zeroed out once the claim is done\\n    function claim() external;\\n\\n    /// @notice Adds a users's stake or challenge to the staker or challenger pool\\n    /// @param isChallenger Flag for if this is a challenger\\n    function stake(bool isChallenger) external payable;\\n\\n    /// @notice Removes a user's stake or challenge from the staker or challenger pool\\n    /// @param amount Amount being removed in wei\\n    /// @param isChallenger Flag for if this is a challenger\\n    function unstake(uint256 amount, bool isChallenger) external;\\n\\n    /// @notice Removes all of a user's stake or challenge from the respective pool\\n    /// @param isChallenger Flag for if this is a challenger\\n    function unstakeAll(bool isChallenger) external;\\n\\n    /// @notice Updates the decay multipliers and amounts for the total staked and challenged pools\\n    /// @dev This function is called in most other functions as well to keep the\\n    /// decay amounts and pools accurate\\n    function updateDecay() external;\\n\\n    /// @notice Initiates the withdraw process for a staker, starting the 24 hour waiting period\\n    /// @dev During the 24 hour waiting period, the value is locked to prevent\\n    /// users from removing their stake when a challenger is going to verify test\\n    function withdrawStake() external;\\n\\n    /// @notice Returns the Ante Test connected to this Ante Pool\\n    /// @return IAnteTest The Ante Test interface\\n    function anteTest() external view returns (IAnteTest);\\n\\n    /// @notice Get the info for the challenger pool\\n    /// @return numUsers The total number of challengers in the challenger pool\\n    ///         totalAmount The total value locked in the challenger pool in wei\\n    ///         decayMultiplier The current multiplier for decay\\n    function challengerInfo()\\n        external\\n        view\\n        returns (\\n            uint256 numUsers,\\n            uint256 totalAmount,\\n            uint256 decayMultiplier\\n        );\\n\\n    /// @notice Get the info for the staker pool\\n    /// @return numUsers The total number of stakers in the staker pool\\n    ///         totalAmount The total value locked in the staker pool in wei\\n    ///         decayMultiplier The current multiplier for decay\\n    function stakingInfo()\\n        external\\n        view\\n        returns (\\n            uint256 numUsers,\\n            uint256 totalAmount,\\n            uint256 decayMultiplier\\n        );\\n\\n    /// @notice Get the total value eligible for payout\\n    /// @dev This is used so that challengers must have challenged for at least\\n    /// 12 blocks to receive payout, this is to mitigate other challengers\\n    /// from trying to stick in a challenge right before the verification\\n    /// @return eligibleAmount Total value eligible for payout in wei\\n    function eligibilityInfo() external view returns (uint256 eligibleAmount);\\n\\n    /// @notice Returns the Ante Pool factory address that created this Ante Pool\\n    /// @return Address of Ante Pool factory\\n    function factory() external view returns (address);\\n\\n    /// @notice Returns the block at which the connected Ante Test failed\\n    /// @dev This is only set when a verify test action is taken, so the test could\\n    /// have logically failed beforehand, but without having a user initiating\\n    /// the verify test action\\n    /// @return Block number where Ante Test failed\\n    function failedBlock() external view returns (uint256);\\n\\n    /// @notice Returns the payout amount for a specific challenger\\n    /// @param challenger Address of challenger\\n    /// @dev If this is called before an Ante Test has failed, then it's return\\n    /// value is an estimate\\n    /// @return Amount that could be claimed by challenger in wei\\n    function getChallengerPayout(address challenger) external view returns (uint256);\\n\\n    /// @notice Returns the timestamp for when the staker's 24 hour wait period is over\\n    /// @param _user Address of withdrawing staker\\n    /// @dev This is timestamp is 24 hours after the time when the staker initaited the\\n    /// withdraw process\\n    /// @return Timestamp for when the value is no longer locked and can be removed\\n    function getPendingWithdrawAllowedTime(address _user) external view returns (uint256);\\n\\n    /// @notice Returns the amount a staker is attempting to withdraw\\n    /// @param _user Address of withdrawing staker\\n    /// @return Amount which is being withdrawn in wei\\n    function getPendingWithdrawAmount(address _user) external view returns (uint256);\\n\\n    /// @notice Returns the stored balance of a user in their respective pool\\n    /// @param _user Address of user\\n    /// @param isChallenger Flag if user is a challenger\\n    /// @dev This function calculates decay and returns the stored value after the\\n    /// decay has been either added (staker) or subtracted (challenger)\\n    /// @return Balance that the user has currently in wei\\n    function getStoredBalance(address _user, bool isChallenger) external view returns (uint256);\\n\\n    /// @notice Returns total value of eligible payout for challengers\\n    /// @return Amount eligible for payout in wei\\n    function getTotalChallengerEligibleBalance() external view returns (uint256);\\n\\n    /// @notice Returns total value locked of all challengers\\n    /// @return Total amount challenged in wei\\n    function getTotalChallengerStaked() external view returns (uint256);\\n\\n    /// @notice Returns total value of all stakers who are withdrawing their stake\\n    /// @return Total amount waiting for withdraw in wei\\n    function getTotalPendingWithdraw() external view returns (uint256);\\n\\n    /// @notice Returns total value locked of all stakers\\n    /// @return Total amount staked in wei\\n    function getTotalStaked() external view returns (uint256);\\n\\n    /// @notice Returns a user's starting amount added in their respective pool\\n    /// @param _user Address of user\\n    /// @param isChallenger Flag if user is a challenger\\n    /// @dev This value is updated as decay is caluclated or additional value\\n    /// added to respective side\\n    /// @return User's starting amount in wei\\n    function getUserStartAmount(address _user, bool isChallenger) external view returns (uint256);\\n\\n    /// @notice Returns the verifier bounty amount\\n    /// @dev Currently this is 5% of the total staked amount\\n    /// @return Bounty amount rewarded to challenger who verifies test in wei\\n    function getVerifierBounty() external view returns (uint256);\\n\\n    /// @notice Returns the cutoff block when challenger can call verify test\\n    /// @dev This is currently 12 blocks after a challenger has challenged the test\\n    /// @return Block number of when verify test can be called by challenger\\n    function getCheckTestAllowedBlock(address _user) external view returns (uint256);\\n\\n    /// @notice Returns the most recent block number where decay was updated\\n    /// @dev This is generally updated on most actions that interact with the Ante\\n    /// Pool contract\\n    /// @return Block number of when contract was last updated\\n    function lastUpdateBlock() external view returns (uint256);\\n\\n    /// @notice Returns the most recent block number where a challenger verified test\\n    /// @dev This is updated whenever the verify test is activated, whether or not\\n    /// the Ante Test fails\\n    /// @return Block number of last verification attempt\\n    function lastVerifiedBlock() external view returns (uint256);\\n\\n    /// @notice Returns the number of challengers that have claimed their payout\\n    /// @return Number of challengers\\n    function numPaidOut() external view returns (uint256);\\n\\n    /// @notice Returns the number of times that the Ante Test has been verified\\n    /// @return Number of verifications\\n    function numTimesVerified() external view returns (uint256);\\n\\n    /// @notice Returns if the connected Ante Test has failed\\n    /// @return True if the connected Ante Test has failed, False if not\\n    function pendingFailure() external view returns (bool);\\n\\n    /// @notice Returns the total value of payout to challengers that have been claimed\\n    /// @return Value of claimed payouts in wei\\n    function totalPaidOut() external view returns (uint256);\\n\\n    /// @notice Returns the address of verifier who successfully activated verify test\\n    /// @dev This is the user who will receive the verifier bounty\\n    /// @return Address of verifier challenger\\n    function verifier() external view returns (address);\\n\\n    /// @notice Returns the total value of stakers who are withdrawing\\n    /// @return totalAmount total amount pending to be withdrawn in wei\\n    function withdrawInfo() external view returns (uint256 totalAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/AnteTest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// ┏━━━┓━━━━━┏┓━━━━━━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━━━━━\\n// ┃┏━┓┃━━━━┏┛┗┓━━━━━━━━┃┏━━┛━━━━━━━━━━━━━━━━━━━━━━━\\n// ┃┗━┛┃┏━┓━┗┓┏┛┏━━┓━━━━┃┗━━┓┏┓┏━┓━┏━━┓━┏━┓━┏━━┓┏━━┓\\n// ┃┏━┓┃┃┏┓┓━┃┃━┃┏┓┃━━━━┃┏━━┛┣┫┃┏┓┓┗━┓┃━┃┏┓┓┃┏━┛┃┏┓┃\\n// ┃┃ ┃┃┃┃┃┃━┃┗┓┃┃━┫━┏┓━┃┃━━━┃┃┃┃┃┃┃┗┛┗┓┃┃┃┃┃┗━┓┃┃━┫\\n// ┗┛ ┗┛┗┛┗┛━┗━┛┗━━┛━┗┛━┗┛━━━┗┛┗┛┗┛┗━━━┛┗┛┗┛┗━━┛┗━━┛\\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./interfaces/IAnteTest.sol\\\";\\n\\n/// @title Ante V0.5 Ante Test smart contract\\n/// @notice Abstract inheritable contract that supplies syntactic sugar for writing Ante Tests\\n/// @dev Usage: contract YourAnteTest is AnteTest(\\\"String descriptor of test\\\") { ... }\\nabstract contract AnteTest is IAnteTest {\\n    /// @inheritdoc IAnteTest\\n    address public override testAuthor;\\n    /// @inheritdoc IAnteTest\\n    string public override testName;\\n    /// @inheritdoc IAnteTest\\n    string public override protocolName;\\n    /// @inheritdoc IAnteTest\\n    address[] public override testedContracts;\\n\\n    /// @dev testedContracts and protocolName are optional parameters which should\\n    /// be set in the constructor of your AnteTest\\n    /// @param _testName The name of the Ante Test\\n    constructor(string memory _testName) {\\n        testAuthor = msg.sender;\\n        testName = _testName;\\n    }\\n\\n    /// @notice Returns the testedContracts array of addresses\\n    /// @return The list of tested contracts as an array of addresses\\n    function getTestedContracts() external view returns (address[] memory) {\\n        return testedContracts;\\n    }\\n\\n    /// @inheritdoc IAnteTest\\n    function checkTestPasses() external virtual override returns (bool) {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAnteTest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// ┏━━━┓━━━━━┏┓━━━━━━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━━━━━\\n// ┃┏━┓┃━━━━┏┛┗┓━━━━━━━━┃┏━━┛━━━━━━━━━━━━━━━━━━━━━━━\\n// ┃┗━┛┃┏━┓━┗┓┏┛┏━━┓━━━━┃┗━━┓┏┓┏━┓━┏━━┓━┏━┓━┏━━┓┏━━┓\\n// ┃┏━┓┃┃┏┓┓━┃┃━┃┏┓┃━━━━┃┏━━┛┣┫┃┏┓┓┗━┓┃━┃┏┓┓┃┏━┛┃┏┓┃\\n// ┃┃ ┃┃┃┃┃┃━┃┗┓┃┃━┫━┏┓━┃┃━━━┃┃┃┃┃┃┃┗┛┗┓┃┃┃┃┃┗━┓┃┃━┫\\n// ┗┛ ┗┛┗┛┗┛━┗━┛┗━━┛━┗┛━┗┛━━━┗┛┗┛┗┛┗━━━┛┗┛┗┛┗━━┛┗━━┛\\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n\\npragma solidity ^0.7.0;\\n\\n/// @title The interface for the Ante V0.5 Ante Test\\n/// @notice The Ante V0.5 Ante Test wraps test logic for verifying fundamental invariants of a protocol\\ninterface IAnteTest {\\n    /// @notice Returns the author of the Ante Test\\n    /// @dev This overrides the auto-generated getter for testAuthor as a public var\\n    /// @return The address of the test author\\n    function testAuthor() external view returns (address);\\n\\n    /// @notice Returns the name of the protocol the Ante Test is testing\\n    /// @dev This overrides the auto-generated getter for protocolName as a public var\\n    /// @return The name of the protocol in string format\\n    function protocolName() external view returns (string memory);\\n\\n    /// @notice Returns a single address in the testedContracts array\\n    /// @dev This overrides the auto-generated getter for testedContracts [] as a public var\\n    /// @param i The array index of the address to return\\n    /// @return The address of the i-th element in the list of tested contracts\\n    function testedContracts(uint256 i) external view returns (address);\\n\\n    /// @notice Returns the name of the Ante Test\\n    /// @dev This overrides the auto-generated getter for testName as a public var\\n    /// @return The name of the Ante Test in string format\\n    function testName() external view returns (string memory);\\n\\n    /// @notice Function containing test logic to inspect the protocol invariant\\n    /// @dev This should usually return True\\n    /// @return A single bool indicating if the Ante Test passes/fails\\n    function checkTestPasses() external returns (bool);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"antePoolContracts\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"checkTestPasses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTestedContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testAuthor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"testedContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AntePoolTest","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000006000000000000000000000000e48f6a36f3712e389ce666bcecd88ba60c30ae500000000000000000000000005f3555febf9bf4930ad581db008f8b0f6239c6fc000000000000000000000000fc2bd420ae071a812ea238c5916198024e00fe3300000000000000000000000028b549845b6fe1939783ba0bdb3ba1a598da03940000000000000000000000006e1000a6088eb3dd1493492626e556f6d9a17bd100000000000000000000000022075f4cd76299822eb8d1546f5dcf775c90aa87","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}