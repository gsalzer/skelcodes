{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\ninterface Unitroller {\r\n    function admin() external view returns (address);\r\n    function _acceptImplementation() external returns (uint);\r\n}\r\n\r\n/**\r\n * @title Comptroller\r\n * @notice Built solely to toggle admin rights on old Unitrollers.\r\n */\r\ncontract Comptroller {\r\n    /**\r\n     * @notice Administrator for Fuse\r\n     */\r\n    address internal constant fuseAdmin = 0xa731585ab05fC9f83555cf9Bff8F58ee94e18F85;\r\n\r\n    /**\r\n    * @notice Administrator for this contract\r\n    */\r\n    address internal admin;\r\n\r\n    /**\r\n    * @notice Pending administrator for this contract\r\n    */\r\n    address internal pendingAdmin;\r\n\r\n    /**\r\n     * @notice Whether or not the Fuse admin has admin rights\r\n     */\r\n    bool internal fuseAdminHasRights;\r\n\r\n    /**\r\n     * @notice Whether or not the admin has admin rights\r\n     */\r\n    bool internal adminHasRights;\r\n\r\n    /**\r\n      * @notice Event emitted when the admin rights are changed\r\n      */\r\n    event AdminRightsToggled(bool hasRights);\r\n\r\n    /**\r\n      * @notice Toggles admin rights.\r\n      * @param hasRights Boolean indicating if the admin is to have rights.\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n    function _toggleAdminRights(bool hasRights) external returns (uint) {\r\n        // Check sender is Fuse admin\r\n        require(msg.sender == fuseAdmin, \"Sender not Fuse admin.\");\r\n\r\n        // Check that rights have not already been set to the desired value\r\n        if (adminHasRights == hasRights) return 0;\r\n\r\n        // Set adminHasRights\r\n        adminHasRights = hasRights;\r\n\r\n        // Emit AdminRightsToggled()\r\n        emit AdminRightsToggled(hasRights);\r\n\r\n        // Return no error\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Called on the Comptroller to accept the new implementation on the Unitroller.\r\n     */\r\n    function _become(Unitroller unitroller) public {\r\n        require(msg.sender == unitroller.admin(), \"only unitroller admin can change brains\");\r\n        require(unitroller._acceptImplementation() == 0, \"change not authorized\");\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hasRights\",\"type\":\"bool\"}],\"name\":\"AdminRightsToggled\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract Unitroller\",\"name\":\"unitroller\",\"type\":\"address\"}],\"name\":\"_become\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"hasRights\",\"type\":\"bool\"}],\"name\":\"_toggleAdminRights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Comptroller","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"BSD-3-Clause","Proxy":"0","Implementation":"","SwarmSource":"bzzr://723bdf5dcc3cb46c2fef0ab8e854ca2b833be3bf85df92c7047990dcf6156929"}]}