{"status":"1","message":"OK","result":[{"SourceCode":"{\"CarefulMath.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\n/**\\r\\n  * @title Careful Math\\r\\n  * @author Compound\\r\\n  * @notice Derived from OpenZeppelin\\u0027s SafeMath library\\r\\n  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\r\\n  */\\r\\ncontract CarefulMath {\\r\\n\\r\\n    /**\\r\\n     * @dev Possible error codes that we can return\\r\\n     */\\r\\n    enum MathError {\\r\\n        NO_ERROR,\\r\\n        DIVISION_BY_ZERO,\\r\\n        INTEGER_OVERFLOW,\\r\\n        INTEGER_UNDERFLOW\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Multiplies two numbers, returns an error on overflow.\\r\\n    */\\r\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\r\\n        if (a == 0) {\\r\\n            return (MathError.NO_ERROR, 0);\\r\\n        }\\r\\n\\r\\n        uint c = a * b;\\r\\n\\r\\n        if (c / a != b) {\\r\\n            return (MathError.INTEGER_OVERFLOW, 0);\\r\\n        } else {\\r\\n            return (MathError.NO_ERROR, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Integer division of two numbers, truncating the quotient.\\r\\n    */\\r\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\r\\n        if (b == 0) {\\r\\n            return (MathError.DIVISION_BY_ZERO, 0);\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, a / b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\r\\n    */\\r\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\r\\n        if (b \\u003c= a) {\\r\\n            return (MathError.NO_ERROR, a - b);\\r\\n        } else {\\r\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Adds two numbers, returns an error on overflow.\\r\\n    */\\r\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\r\\n        uint c = a + b;\\r\\n\\r\\n        if (c \\u003e= a) {\\r\\n            return (MathError.NO_ERROR, c);\\r\\n        } else {\\r\\n            return (MathError.INTEGER_OVERFLOW, 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev add a and b and then subtract c\\r\\n    */\\r\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\r\\n        (MathError err0, uint sum) = addUInt(a, b);\\r\\n\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, 0);\\r\\n        }\\r\\n\\r\\n        return subUInt(sum, c);\\r\\n    }\\r\\n}\\r\\n\"},\"CErc20.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./CToken.sol\\\";\\r\\n\\r\\ninterface CompLike {\\r\\n  function delegate(address delegatee) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Compound\\u0027s CErc20 Contract\\r\\n * @notice CTokens which wrap an EIP-20 underlying\\r\\n * @dev This contract should not to be deployed on its own; instead, deploy `CErc20Delegator` (proxy contract) and `CErc20Delegate` (logic/implementation contract).\\r\\n * @author Compound\\r\\n */\\r\\ncontract CErc20 is CToken, CErc20Interface {\\r\\n    /**\\r\\n     * @notice Initialize the new money market\\r\\n     * @param underlying_ The address of the underlying asset\\r\\n     * @param comptroller_ The address of the Comptroller\\r\\n     * @param interestRateModel_ The address of the interest rate model\\r\\n     * @param name_ ERC-20 name of this token\\r\\n     * @param symbol_ ERC-20 symbol of this token\\r\\n     */\\r\\n    function initialize(address underlying_,\\r\\n                        ComptrollerInterface comptroller_,\\r\\n                        InterestRateModel interestRateModel_,\\r\\n                        string memory name_,\\r\\n                        string memory symbol_,\\r\\n                        uint256 reserveFactorMantissa_,\\r\\n                        uint256 adminFeeMantissa_) public {\\r\\n        // CToken initialize does the bulk of the work\\r\\n        uint256 initialExchangeRateMantissa_ = 0.2e18;\\r\\n        uint8 decimals_ = EIP20Interface(underlying_).decimals();\\r\\n        super.initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_, reserveFactorMantissa_, adminFeeMantissa_);\\r\\n\\r\\n        // Set underlying and sanity check it\\r\\n        underlying = underlying_;\\r\\n        EIP20Interface(underlying).totalSupply();\\r\\n    }\\r\\n\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param mintAmount The amount of the underlying asset to supply\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function mint(uint mintAmount) external returns (uint) {\\r\\n        (uint err,) = mintInternal(mintAmount);\\r\\n        return err;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function redeem(uint redeemTokens) external returns (uint) {\\r\\n        return redeemInternal(redeemTokens);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param redeemAmount The amount of underlying to redeem\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function redeemUnderlying(uint redeemAmount) external returns (uint) {\\r\\n        return redeemUnderlyingInternal(redeemAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sender borrows assets from the protocol to their own address\\r\\n      * @param borrowAmount The amount of the underlying asset to borrow\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function borrow(uint borrowAmount) external returns (uint) {\\r\\n        return borrowInternal(borrowAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender repays their own borrow\\r\\n     * @param repayAmount The amount to repay\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function repayBorrow(uint repayAmount) external returns (uint) {\\r\\n        (uint err,) = repayBorrowInternal(repayAmount);\\r\\n        return err;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender repays a borrow belonging to borrower\\r\\n     * @param borrower the account with the debt being payed off\\r\\n     * @param repayAmount The amount to repay\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint) {\\r\\n        (uint err,) = repayBorrowBehalfInternal(borrower, repayAmount);\\r\\n        return err;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The sender liquidates the borrowers collateral.\\r\\n     *  The collateral seized is transferred to the liquidator.\\r\\n     * @param borrower The borrower of this cToken to be liquidated\\r\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\r\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint) {\\r\\n        (uint err,) = liquidateBorrowInternal(borrower, repayAmount, cTokenCollateral);\\r\\n        return err;\\r\\n    }\\r\\n\\r\\n    /*** Safe Token ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Gets balance of this contract in terms of the underlying\\r\\n     * @dev This excludes the value of the current message, if any\\r\\n     * @return The quantity of underlying tokens owned by this contract\\r\\n     */\\r\\n    function getCashPrior() internal view returns (uint) {\\r\\n        EIP20Interface token = EIP20Interface(underlying);\\r\\n        return token.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\\r\\n     *      This will revert due to insufficient balance or insufficient allowance.\\r\\n     *      This function returns the actual amount received,\\r\\n     *      which may be less than `amount` if there is a fee attached to the transfer.\\r\\n     *\\r\\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\r\\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\r\\n     */\\r\\n    function doTransferIn(address from, uint amount) internal returns (uint) {\\r\\n        uint balanceBefore = EIP20Interface(underlying).balanceOf(address(this));\\r\\n        _callOptionalReturn(abi.encodeWithSelector(EIP20NonStandardInterface(underlying).transferFrom.selector, from, address(this), amount), \\\"TOKEN_TRANSFER_IN_FAILED\\\");\\r\\n\\r\\n        // Calculate the amount that was *actually* transferred\\r\\n        uint balanceAfter = EIP20Interface(underlying).balanceOf(address(this));\\r\\n        require(balanceAfter \\u003e= balanceBefore, \\\"TOKEN_TRANSFER_IN_OVERFLOW\\\");\\r\\n        return balanceAfter - balanceBefore;   // underflow already checked above, just subtract\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\\r\\n     *      error code rather than reverting. If caller has not called checked protocol\\u0027s balance, this may revert due to\\r\\n     *      insufficient cash held in this contract. If caller has checked protocol\\u0027s balance prior to this call, and verified\\r\\n     *      it is \\u003e= amount, this should not revert in normal conditions.\\r\\n     *\\r\\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\r\\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\r\\n     */\\r\\n    function doTransferOut(address payable to, uint amount) internal {\\r\\n        _callOptionalReturn(abi.encodeWithSelector(EIP20NonStandardInterface(underlying).transfer.selector, to, amount), \\\"TOKEN_TRANSFER_OUT_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     * @param errorMessage The revert string to return on failure.\\r\\n     */\\r\\n    function _callOptionalReturn(bytes memory data, string memory errorMessage) internal {\\r\\n        bytes memory returndata = _functionCall(underlying, data, errorMessage);\\r\\n        if (returndata.length \\u003e 0) require(abi.decode(returndata, (bool)), errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Admin call to delegate the votes of the COMP-like underlying\\r\\n    * @param compLikeDelegatee The address to delegate votes to\\r\\n    * @dev CTokens whose underlying are not CompLike should revert here\\r\\n    */\\r\\n    function _delegateCompLikeTo(address compLikeDelegatee) external {\\r\\n        require(hasAdminRights(), \\\"only the admin may set the comp-like delegate\\\");\\r\\n        CompLike(underlying).delegate(compLikeDelegatee);\\r\\n    }\\r\\n}\\r\\n\"},\"Comptroller.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./CToken.sol\\\";\\r\\nimport \\\"./CErc20.sol\\\";\\r\\nimport \\\"./ErrorReporter.sol\\\";\\r\\nimport \\\"./Exponential.sol\\\";\\r\\nimport \\\"./PriceOracle.sol\\\";\\r\\nimport \\\"./ComptrollerInterface.sol\\\";\\r\\nimport \\\"./ComptrollerStorage.sol\\\";\\r\\nimport \\\"./Unitroller.sol\\\";\\r\\nimport \\\"./RewardsDistributorDelegate.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Compound\\u0027s Comptroller Contract\\r\\n * @author Compound\\r\\n * @dev This contract should not to be deployed alone; instead, deploy `Unitroller` (proxy contract) on top of this `Comptroller` (logic/implementation contract).\\r\\n */\\r\\ncontract Comptroller is ComptrollerV3Storage, ComptrollerInterface, ComptrollerErrorReporter, Exponential {\\r\\n    /// @notice Emitted when an admin supports a market\\r\\n    event MarketListed(CToken cToken);\\r\\n\\r\\n    /// @notice Emitted when an admin unsupports a market\\r\\n    event MarketUnlisted(CToken cToken);\\r\\n\\r\\n    /// @notice Emitted when an account enters a market\\r\\n    event MarketEntered(CToken cToken, address account);\\r\\n\\r\\n    /// @notice Emitted when an account exits a market\\r\\n    event MarketExited(CToken cToken, address account);\\r\\n\\r\\n    /// @notice Emitted when close factor is changed by admin\\r\\n    event NewCloseFactor(uint oldCloseFactorMantissa, uint newCloseFactorMantissa);\\r\\n\\r\\n    /// @notice Emitted when a collateral factor is changed by admin\\r\\n    event NewCollateralFactor(CToken cToken, uint oldCollateralFactorMantissa, uint newCollateralFactorMantissa);\\r\\n\\r\\n    /// @notice Emitted when liquidation incentive is changed by admin\\r\\n    event NewLiquidationIncentive(uint oldLiquidationIncentiveMantissa, uint newLiquidationIncentiveMantissa);\\r\\n\\r\\n    /// @notice Emitted when price oracle is changed\\r\\n    event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);\\r\\n\\r\\n    /// @notice Emitted when pause guardian is changed\\r\\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\\r\\n\\r\\n    /// @notice Emitted when an action is paused globally\\r\\n    event ActionPaused(string action, bool pauseState);\\r\\n\\r\\n    /// @notice Emitted when an action is paused on a market\\r\\n    event ActionPaused(CToken cToken, string action, bool pauseState);\\r\\n\\r\\n    /// @notice Emitted when the whitelist enforcement is changed\\r\\n    event WhitelistEnforcementChanged(bool enforce);\\r\\n\\r\\n    /// @notice Emitted when auto implementations are toggled\\r\\n    event AutoImplementationsToggled(bool enabled);\\r\\n\\r\\n    /// @notice Emitted when supply cap for a cToken is changed\\r\\n    event NewSupplyCap(CToken indexed cToken, uint newSupplyCap);\\r\\n\\r\\n    /// @notice Emitted when borrow cap for a cToken is changed\\r\\n    event NewBorrowCap(CToken indexed cToken, uint newBorrowCap);\\r\\n\\r\\n    /// @notice Emitted when borrow cap guardian is changed\\r\\n    event NewBorrowCapGuardian(address oldBorrowCapGuardian, address newBorrowCapGuardian);\\r\\n\\r\\n    /// @notice Emitted when a new RewardsDistributor contract is added to hooks\\r\\n    event AddedRewardsDistributor(address rewardsDistributor);\\r\\n\\r\\n    // closeFactorMantissa must be strictly greater than this value\\r\\n    uint internal constant closeFactorMinMantissa = 0.05e18; // 0.05\\r\\n\\r\\n    // closeFactorMantissa must not exceed this value\\r\\n    uint internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\\r\\n\\r\\n    // No collateralFactorMantissa may exceed this value\\r\\n    uint internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\\r\\n\\r\\n    // liquidationIncentiveMantissa must be no less than this value\\r\\n    uint internal constant liquidationIncentiveMinMantissa = 1.0e18; // 1.0\\r\\n\\r\\n    // liquidationIncentiveMantissa must be no greater than this value\\r\\n    uint internal constant liquidationIncentiveMaxMantissa = 1.5e18; // 1.5\\r\\n\\r\\n    /*** Assets You Are In ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the assets an account has entered\\r\\n     * @param account The address of the account to pull assets for\\r\\n     * @return A dynamic list with the assets the account has entered\\r\\n     */\\r\\n    function getAssetsIn(address account) external view returns (CToken[] memory) {\\r\\n        CToken[] memory assetsIn = accountAssets[account];\\r\\n\\r\\n        return assetsIn;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns whether the given account is entered in the given asset\\r\\n     * @param account The address of the account to check\\r\\n     * @param cToken The cToken to check\\r\\n     * @return True if the account is in the asset, otherwise false.\\r\\n     */\\r\\n    function checkMembership(address account, CToken cToken) external view returns (bool) {\\r\\n        return markets[address(cToken)].accountMembership[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add assets to be included in account liquidity calculation\\r\\n     * @param cTokens The list of addresses of the cToken markets to be enabled\\r\\n     * @return Success indicator for whether each corresponding market was entered\\r\\n     */\\r\\n    function enterMarkets(address[] memory cTokens) public returns (uint[] memory) {\\r\\n        uint len = cTokens.length;\\r\\n\\r\\n        uint[] memory results = new uint[](len);\\r\\n        for (uint i = 0; i \\u003c len; i++) {\\r\\n            CToken cToken = CToken(cTokens[i]);\\r\\n\\r\\n            results[i] = uint(addToMarketInternal(cToken, msg.sender));\\r\\n        }\\r\\n\\r\\n        return results;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add the market to the borrower\\u0027s \\\"assets in\\\" for liquidity calculations\\r\\n     * @param cToken The market to enter\\r\\n     * @param borrower The address of the account to modify\\r\\n     * @return Success indicator for whether the market was entered\\r\\n     */\\r\\n    function addToMarketInternal(CToken cToken, address borrower) internal returns (Error) {\\r\\n        Market storage marketToJoin = markets[address(cToken)];\\r\\n\\r\\n        if (!marketToJoin.isListed) {\\r\\n            // market is not listed, cannot join\\r\\n            return Error.MARKET_NOT_LISTED;\\r\\n        }\\r\\n\\r\\n        if (marketToJoin.accountMembership[borrower] == true) {\\r\\n            // already joined\\r\\n            return Error.NO_ERROR;\\r\\n        }\\r\\n\\r\\n        // survived the gauntlet, add to list\\r\\n        // NOTE: we store these somewhat redundantly as a significant optimization\\r\\n        //  this avoids having to iterate through the list for the most common use cases\\r\\n        //  that is, only when we need to perform liquidity checks\\r\\n        //  and not whenever we want to check if an account is in a particular market\\r\\n        marketToJoin.accountMembership[borrower] = true;\\r\\n        accountAssets[borrower].push(cToken);\\r\\n        \\r\\n        // Add to allBorrowers\\r\\n        if (!borrowers[borrower]) {\\r\\n            allBorrowers.push(borrower);\\r\\n            borrowers[borrower] = true;\\r\\n            borrowerIndexes[borrower] = allBorrowers.length - 1;\\r\\n        }\\r\\n\\r\\n        emit MarketEntered(cToken, borrower);\\r\\n\\r\\n        return Error.NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes asset from sender\\u0027s account liquidity calculation\\r\\n     * @dev Sender must not have an outstanding borrow balance in the asset,\\r\\n     *  or be providing neccessary collateral for an outstanding borrow.\\r\\n     * @param cTokenAddress The address of the asset to be removed\\r\\n     * @return Whether or not the account successfully exited the market\\r\\n     */\\r\\n    function exitMarket(address cTokenAddress) external returns (uint) {\\r\\n        CToken cToken = CToken(cTokenAddress);\\r\\n        /* Get sender tokensHeld and amountOwed underlying from the cToken */\\r\\n        (uint oErr, uint tokensHeld, uint amountOwed, ) = cToken.getAccountSnapshot(msg.sender);\\r\\n        require(oErr == 0, \\\"exitMarket: getAccountSnapshot failed\\\"); // semi-opaque error code\\r\\n\\r\\n        /* Fail if the sender has a borrow balance */\\r\\n        if (amountOwed != 0) {\\r\\n            return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);\\r\\n        }\\r\\n\\r\\n        /* Fail if the sender is not permitted to redeem all of their tokens */\\r\\n        uint allowed = redeemAllowedInternal(cTokenAddress, msg.sender, tokensHeld);\\r\\n        if (allowed != 0) {\\r\\n            return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);\\r\\n        }\\r\\n\\r\\n        Market storage marketToExit = markets[address(cToken)];\\r\\n\\r\\n        /* Return true if the sender is not already ‘in’ the market */\\r\\n        if (!marketToExit.accountMembership[msg.sender]) {\\r\\n            return uint(Error.NO_ERROR);\\r\\n        }\\r\\n\\r\\n        /* Set cToken account membership to false */\\r\\n        delete marketToExit.accountMembership[msg.sender];\\r\\n\\r\\n        /* Delete cToken from the account’s list of assets */\\r\\n        // load into memory for faster iteration\\r\\n        CToken[] memory userAssetList = accountAssets[msg.sender];\\r\\n        uint len = userAssetList.length;\\r\\n        uint assetIndex = len;\\r\\n        for (uint i = 0; i \\u003c len; i++) {\\r\\n            if (userAssetList[i] == cToken) {\\r\\n                assetIndex = i;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // We *must* have found the asset in the list or our redundant data structure is broken\\r\\n        assert(assetIndex \\u003c len);\\r\\n\\r\\n        // copy last item in list to location of item to be removed, reduce length by 1\\r\\n        CToken[] storage storedList = accountAssets[msg.sender];\\r\\n        storedList[assetIndex] = storedList[storedList.length - 1];\\r\\n        storedList.length--;\\r\\n\\r\\n        // If the user has exited all markets, remove them from the `allBorrowers` array\\r\\n        if (storedList.length == 0) {\\r\\n            allBorrowers[borrowerIndexes[msg.sender]] = allBorrowers[allBorrowers.length - 1]; // Copy last item in list to location of item to be removed\\r\\n            allBorrowers.length--; // Reduce length by 1\\r\\n            borrowerIndexes[allBorrowers[borrowerIndexes[msg.sender]]] = borrowerIndexes[msg.sender]; // Set borrower index of moved item to correct index\\r\\n            borrowerIndexes[msg.sender] = 0; // Reset sender borrower index to 0 for a gas refund\\r\\n            borrowers[msg.sender] = false; // Tell the contract that the sender is no longer a borrower (so it knows to add the borrower back if they enter a market in the future)\\r\\n        }\\r\\n\\r\\n        emit MarketExited(cToken, msg.sender);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /*** Policy Hooks ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the account should be allowed to mint tokens in the given market\\r\\n     * @param cToken The market to verify the mint against\\r\\n     * @param minter The account which would get the minted tokens\\r\\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\\r\\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\r\\n     */\\r\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint) {\\r\\n        // Pausing is a very serious situation - we revert to sound the alarms\\r\\n        require(!mintGuardianPaused[cToken], \\\"mint is paused\\\");\\r\\n\\r\\n        // Shh - currently unused\\r\\n        minter;\\r\\n        mintAmount;\\r\\n\\r\\n        // Make sure market is listed\\r\\n        if (!markets[cToken].isListed) {\\r\\n            return uint(Error.MARKET_NOT_LISTED);\\r\\n        }\\r\\n        \\r\\n        // Make sure minter is whitelisted\\r\\n        if (enforceWhitelist \\u0026\\u0026 !whitelist[minter]) {\\r\\n            return uint(Error.SUPPLIER_NOT_WHITELISTED);\\r\\n        }\\r\\n\\r\\n        // Check supply cap\\r\\n        uint supplyCap = supplyCaps[cToken];\\r\\n        // Supply cap of 0 corresponds to unlimited supplying\\r\\n        if (supplyCap != 0) {\\r\\n            uint totalCash = CToken(cToken).getCash();\\r\\n            uint totalBorrows = CToken(cToken).totalBorrows();\\r\\n            uint totalReserves = CToken(cToken).totalReserves();\\r\\n            uint totalFuseFees = CToken(cToken).totalFuseFees();\\r\\n            uint totalAdminFees = CToken(cToken).totalAdminFees();\\r\\n\\r\\n            // totalUnderlyingSupply = totalCash + totalBorrows - (totalReserves + totalFuseFees + totalAdminFees)\\r\\n            (MathError mathErr, uint totalUnderlyingSupply) = addThenSubUInt(totalCash, totalBorrows, add_(add_(totalReserves, totalFuseFees), totalAdminFees));\\r\\n            if (mathErr != MathError.NO_ERROR) return uint(Error.MATH_ERROR);\\r\\n\\r\\n            uint nextTotalUnderlyingSupply;\\r\\n            (mathErr, nextTotalUnderlyingSupply) = addUInt(totalUnderlyingSupply, mintAmount);\\r\\n            if (mathErr != MathError.NO_ERROR) return uint(Error.MATH_ERROR);\\r\\n\\r\\n            require(nextTotalUnderlyingSupply \\u003c supplyCap, \\\"market supply cap reached\\\");\\r\\n        }\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        flywheelPreSupplierAction(cToken, minter);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates mint and reverts on rejection. May emit logs.\\r\\n     * @param cToken Asset being minted\\r\\n     * @param minter The address minting the tokens\\r\\n     * @param actualMintAmount The amount of the underlying asset being minted\\r\\n     * @param mintTokens The number of tokens being minted\\r\\n     */\\r\\n    function mintVerify(address cToken, address minter, uint actualMintAmount, uint mintTokens) external {\\r\\n        // Shh - currently unused\\r\\n        cToken;\\r\\n        minter;\\r\\n        actualMintAmount;\\r\\n        mintTokens;\\r\\n\\r\\n        // Shh - we don\\u0027t ever want this hook to be marked pure\\r\\n        if (false) {\\r\\n            maxAssets = maxAssets;\\r\\n        }\\r\\n\\r\\n        // Add minter to suppliers mapping\\r\\n        suppliers[minter] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\\r\\n     * @param cToken The market to verify the redeem against\\r\\n     * @param redeemer The account which would redeem the tokens\\r\\n     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\\r\\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\r\\n     */\\r\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint) {\\r\\n        uint allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);\\r\\n        if (allowed != uint(Error.NO_ERROR)) {\\r\\n            return allowed;\\r\\n        }\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        flywheelPreSupplierAction(cToken, redeemer);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    function redeemAllowedInternal(address cToken, address redeemer, uint redeemTokens) internal view returns (uint) {\\r\\n        if (!markets[cToken].isListed) {\\r\\n            return uint(Error.MARKET_NOT_LISTED);\\r\\n        }\\r\\n\\r\\n        /* If the redeemer is not \\u0027in\\u0027 the market, then we can bypass the liquidity check */\\r\\n        if (!markets[cToken].accountMembership[redeemer]) {\\r\\n            return uint(Error.NO_ERROR);\\r\\n        }\\r\\n\\r\\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\\r\\n        (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(redeemer, CToken(cToken), redeemTokens, 0);\\r\\n        if (err != Error.NO_ERROR) {\\r\\n            return uint(err);\\r\\n        }\\r\\n        if (shortfall \\u003e 0) {\\r\\n            return uint(Error.INSUFFICIENT_LIQUIDITY);\\r\\n        }\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates redeem and reverts on rejection. May emit logs.\\r\\n     * @param cToken Asset being redeemed\\r\\n     * @param redeemer The address redeeming the tokens\\r\\n     * @param redeemAmount The amount of the underlying asset being redeemed\\r\\n     * @param redeemTokens The number of tokens being redeemed\\r\\n     */\\r\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external {\\r\\n        // Shh - currently unused\\r\\n        cToken;\\r\\n        redeemer;\\r\\n\\r\\n        // Require tokens is zero or amount is also zero\\r\\n        if (redeemTokens == 0 \\u0026\\u0026 redeemAmount \\u003e 0) {\\r\\n            revert(\\\"redeemTokens zero\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\r\\n     * @param cToken The market to verify the borrow against\\r\\n     * @param borrower The account which would borrow the asset\\r\\n     * @param borrowAmount The amount of underlying the account would borrow\\r\\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\r\\n     */\\r\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint) {\\r\\n        // Pausing is a very serious situation - we revert to sound the alarms\\r\\n        require(!borrowGuardianPaused[cToken], \\\"borrow is paused\\\");\\r\\n\\r\\n        // Make sure market is listed\\r\\n        if (!markets[cToken].isListed) {\\r\\n            return uint(Error.MARKET_NOT_LISTED);\\r\\n        }\\r\\n\\r\\n        if (!markets[cToken].accountMembership[borrower]) {\\r\\n            // only cTokens may call borrowAllowed if borrower not in market\\r\\n            require(msg.sender == cToken, \\\"sender must be cToken\\\");\\r\\n\\r\\n            // attempt to add borrower to the market\\r\\n            Error err = addToMarketInternal(CToken(msg.sender), borrower);\\r\\n            if (err != Error.NO_ERROR) {\\r\\n                return uint(err);\\r\\n            }\\r\\n\\r\\n            // it should be impossible to break the important invariant\\r\\n            assert(markets[cToken].accountMembership[borrower]);\\r\\n        }\\r\\n\\r\\n        // Make sure oracle price is available\\r\\n        if (oracle.getUnderlyingPrice(CToken(cToken)) == 0) {\\r\\n            return uint(Error.PRICE_ERROR);\\r\\n        }\\r\\n        \\r\\n        // Make sure borrower is whitelisted\\r\\n        if (enforceWhitelist \\u0026\\u0026 !whitelist[borrower]) {\\r\\n            return uint(Error.SUPPLIER_NOT_WHITELISTED);\\r\\n        }\\r\\n\\r\\n        // Check borrow cap\\r\\n        uint borrowCap = borrowCaps[cToken];\\r\\n        // Borrow cap of 0 corresponds to unlimited borrowing\\r\\n        if (borrowCap != 0) {\\r\\n            uint totalBorrows = CToken(cToken).totalBorrows();\\r\\n            (MathError mathErr, uint nextTotalBorrows) = addUInt(totalBorrows, borrowAmount);\\r\\n            if (mathErr != MathError.NO_ERROR) return uint(Error.MATH_ERROR);\\r\\n            require(nextTotalBorrows \\u003c borrowCap, \\\"market borrow cap reached\\\");\\r\\n        }\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        flywheelPreBorrowerAction(cToken, borrower);\\r\\n\\r\\n        // Perform a hypothetical liquidity check to guard against shortfall\\r\\n        (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(borrower, CToken(cToken), 0, borrowAmount);\\r\\n        if (err != Error.NO_ERROR) {\\r\\n            return uint(err);\\r\\n        }\\r\\n        if (shortfall \\u003e 0) {\\r\\n            return uint(Error.INSUFFICIENT_LIQUIDITY);\\r\\n        }\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\r\\n     * @param cToken Asset whose underlying is being borrowed\\r\\n     * @param accountBorrowsNew The user\\u0027s new borrow balance of the underlying asset\\r\\n     */\\r\\n    function borrowWithinLimits(address cToken, uint accountBorrowsNew) external returns (uint) {\\r\\n        // Check if min borrow exists\\r\\n        uint minBorrowEth = fuseAdmin.minBorrowEth();\\r\\n\\r\\n        if (minBorrowEth \\u003e 0) {\\r\\n            // Get new underlying borrow balance of account for this cToken\\r\\n            uint oraclePriceMantissa = oracle.getUnderlyingPrice(CToken(cToken));\\r\\n            if (oraclePriceMantissa == 0) return uint(Error.PRICE_ERROR);\\r\\n            (MathError mathErr, uint borrowBalanceEth) = mulScalarTruncate(Exp({mantissa: oraclePriceMantissa}), accountBorrowsNew);\\r\\n            if (mathErr != MathError.NO_ERROR) return uint(Error.MATH_ERROR);\\r\\n\\r\\n            // Check against min borrow\\r\\n            if (borrowBalanceEth \\u003c minBorrowEth) return uint(Error.BORROW_BELOW_MIN);\\r\\n        }\\r\\n\\r\\n        // Return no error\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\r\\n     * @param cToken Asset whose underlying is being borrowed\\r\\n     * @param exchangeRateMantissa Underlying/cToken exchange rate\\r\\n     * @param accountTokens Initial account cToken balance\\r\\n     * @param accountTokens Underlying amount to mint\\r\\n     */\\r\\n    function mintWithinLimits(address cToken, uint exchangeRateMantissa, uint accountTokens, uint mintAmount) external returns (uint) {\\r\\n        // Return no error\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates borrow and reverts on rejection. May emit logs.\\r\\n     * @param cToken Asset whose underlying is being borrowed\\r\\n     * @param borrower The address borrowing the underlying\\r\\n     * @param borrowAmount The amount of the underlying asset requested to borrow\\r\\n     */\\r\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external {\\r\\n        // Shh - currently unused\\r\\n        cToken;\\r\\n        borrower;\\r\\n        borrowAmount;\\r\\n\\r\\n        // Shh - we don\\u0027t ever want this hook to be marked pure\\r\\n        if (false) {\\r\\n            maxAssets = maxAssets;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\\r\\n     * @param cToken The market to verify the repay against\\r\\n     * @param payer The account which would repay the asset\\r\\n     * @param borrower The account which would borrowed the asset\\r\\n     * @param repayAmount The amount of the underlying asset the account would repay\\r\\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\r\\n     */\\r\\n    function repayBorrowAllowed(\\r\\n        address cToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount) external returns (uint) {\\r\\n        // Shh - currently unused\\r\\n        payer;\\r\\n        borrower;\\r\\n        repayAmount;\\r\\n\\r\\n        // Make sure market is listed\\r\\n        if (!markets[cToken].isListed) {\\r\\n            return uint(Error.MARKET_NOT_LISTED);\\r\\n        }\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        flywheelPreBorrowerAction(cToken, borrower);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates repayBorrow and reverts on rejection. May emit logs.\\r\\n     * @param cToken Asset being repaid\\r\\n     * @param payer The address repaying the borrow\\r\\n     * @param borrower The address of the borrower\\r\\n     * @param actualRepayAmount The amount of underlying being repaid\\r\\n     */\\r\\n    function repayBorrowVerify(\\r\\n        address cToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint actualRepayAmount,\\r\\n        uint borrowerIndex) external {\\r\\n        // Shh - currently unused\\r\\n        cToken;\\r\\n        payer;\\r\\n        borrower;\\r\\n        actualRepayAmount;\\r\\n        borrowerIndex;\\r\\n\\r\\n        // Shh - we don\\u0027t ever want this hook to be marked pure\\r\\n        if (false) {\\r\\n            maxAssets = maxAssets;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the liquidation should be allowed to occur\\r\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\r\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\r\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\r\\n     * @param borrower The address of the borrower\\r\\n     * @param repayAmount The amount of underlying being repaid\\r\\n     */\\r\\n    function liquidateBorrowAllowed(\\r\\n        address cTokenBorrowed,\\r\\n        address cTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount) external returns (uint) {\\r\\n        // Shh - currently unused\\r\\n        liquidator;\\r\\n\\r\\n        // Make sure markets are listed\\r\\n        if (!markets[cTokenBorrowed].isListed || !markets[cTokenCollateral].isListed) {\\r\\n            return uint(Error.MARKET_NOT_LISTED);\\r\\n        }\\r\\n\\r\\n        // Get borrowers\\u0027s underlying borrow balance\\r\\n        uint borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(borrower);\\r\\n\\r\\n        /* allow accounts to be liquidated if the market is deprecated */\\r\\n        if (isDeprecated(CToken(cTokenBorrowed))) {\\r\\n            require(borrowBalance \\u003e= repayAmount, \\\"Can not repay more than the total borrow\\\");\\r\\n        } else {\\r\\n            /* The borrower must have shortfall in order to be liquidatable */\\r\\n            (Error err, , uint shortfall) = getAccountLiquidityInternal(borrower);\\r\\n            if (err != Error.NO_ERROR) {\\r\\n                return uint(err);\\r\\n            }\\r\\n\\r\\n            if (shortfall == 0) {\\r\\n                return uint(Error.INSUFFICIENT_SHORTFALL);\\r\\n            }\\r\\n\\r\\n            /* The liquidator may not repay more than what is allowed by the closeFactor */\\r\\n            uint maxClose = mul_ScalarTruncate(Exp({mantissa: closeFactorMantissa}), borrowBalance);\\r\\n            if (repayAmount \\u003e maxClose) {\\r\\n                return uint(Error.TOO_MUCH_REPAY);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\\r\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\r\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\r\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\r\\n     * @param borrower The address of the borrower\\r\\n     * @param actualRepayAmount The amount of underlying being repaid\\r\\n     */\\r\\n    function liquidateBorrowVerify(\\r\\n        address cTokenBorrowed,\\r\\n        address cTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint actualRepayAmount,\\r\\n        uint seizeTokens) external {\\r\\n        // Shh - currently unused\\r\\n        cTokenBorrowed;\\r\\n        cTokenCollateral;\\r\\n        liquidator;\\r\\n        borrower;\\r\\n        actualRepayAmount;\\r\\n        seizeTokens;\\r\\n\\r\\n        // Shh - we don\\u0027t ever want this hook to be marked pure\\r\\n        if (false) {\\r\\n            maxAssets = maxAssets;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the seizing of assets should be allowed to occur\\r\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\r\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\r\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\r\\n     * @param borrower The address of the borrower\\r\\n     * @param seizeTokens The number of collateral tokens to seize\\r\\n     */\\r\\n    function seizeAllowed(\\r\\n        address cTokenCollateral,\\r\\n        address cTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens) external returns (uint) {\\r\\n        // Pausing is a very serious situation - we revert to sound the alarms\\r\\n        require(!seizeGuardianPaused, \\\"seize is paused\\\");\\r\\n\\r\\n        // Shh - currently unused\\r\\n        liquidator;\\r\\n        borrower;\\r\\n        seizeTokens;\\r\\n\\r\\n        // Make sure markets are listed\\r\\n        if (!markets[cTokenCollateral].isListed || !markets[cTokenBorrowed].isListed) {\\r\\n            return uint(Error.MARKET_NOT_LISTED);\\r\\n        }\\r\\n\\r\\n        // Make sure cToken Comptrollers are identical\\r\\n        if (CToken(cTokenCollateral).comptroller() != CToken(cTokenBorrowed).comptroller()) {\\r\\n            return uint(Error.COMPTROLLER_MISMATCH);\\r\\n        }\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        flywheelPreTransferAction(cTokenCollateral, borrower, liquidator);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates seize and reverts on rejection. May emit logs.\\r\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\r\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\r\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\r\\n     * @param borrower The address of the borrower\\r\\n     * @param seizeTokens The number of collateral tokens to seize\\r\\n     */\\r\\n    function seizeVerify(\\r\\n        address cTokenCollateral,\\r\\n        address cTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens) external {\\r\\n        // Shh - currently unused\\r\\n        cTokenCollateral;\\r\\n        cTokenBorrowed;\\r\\n        liquidator;\\r\\n        borrower;\\r\\n        seizeTokens;\\r\\n\\r\\n        // Shh - we don\\u0027t ever want this hook to be marked pure\\r\\n        if (false) {\\r\\n            maxAssets = maxAssets;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\\r\\n     * @param cToken The market to verify the transfer against\\r\\n     * @param src The account which sources the tokens\\r\\n     * @param dst The account which receives the tokens\\r\\n     * @param transferTokens The number of cTokens to transfer\\r\\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\r\\n     */\\r\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint) {\\r\\n        // Pausing is a very serious situation - we revert to sound the alarms\\r\\n        require(!transferGuardianPaused, \\\"transfer is paused\\\");\\r\\n\\r\\n        // Currently the only consideration is whether or not\\r\\n        //  the src is allowed to redeem this many tokens\\r\\n        uint allowed = redeemAllowedInternal(cToken, src, transferTokens);\\r\\n        if (allowed != uint(Error.NO_ERROR)) {\\r\\n            return allowed;\\r\\n        }\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        flywheelPreTransferAction(cToken, src, dst);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates transfer and reverts on rejection. May emit logs.\\r\\n     * @param cToken Asset being transferred\\r\\n     * @param src The account which sources the tokens\\r\\n     * @param dst The account which receives the tokens\\r\\n     * @param transferTokens The number of cTokens to transfer\\r\\n     */\\r\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external {\\r\\n        // Shh - currently unused\\r\\n        cToken;\\r\\n        src;\\r\\n        dst;\\r\\n        transferTokens;\\r\\n\\r\\n        // Shh - we don\\u0027t ever want this hook to be marked pure\\r\\n        if (false) {\\r\\n            maxAssets = maxAssets;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*** Flywheel Hooks ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Keeps the flywheel moving pre-mint and pre-redeem\\r\\n     * @param cToken The relevant market\\r\\n     * @param supplier The minter/redeemer\\r\\n     */\\r\\n    function flywheelPreSupplierAction(address cToken, address supplier) internal {\\r\\n        for (uint256 i = 0; i \\u003c rewardsDistributors.length; i++) RewardsDistributorDelegate(rewardsDistributors[i]).flywheelPreSupplierAction(cToken, supplier);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Keeps the flywheel moving pre-borrow and pre-repay\\r\\n     * @param cToken The relevant market\\r\\n     * @param borrower The borrower\\r\\n     */\\r\\n    function flywheelPreBorrowerAction(address cToken, address borrower) internal {\\r\\n        for (uint256 i = 0; i \\u003c rewardsDistributors.length; i++) RewardsDistributorDelegate(rewardsDistributors[i]).flywheelPreBorrowerAction(cToken, borrower);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Keeps the flywheel moving pre-transfer and pre-seize\\r\\n     * @param cToken The relevant market\\r\\n     * @param src The account which sources the tokens\\r\\n     * @param dst The account which receives the tokens\\r\\n     */\\r\\n    function flywheelPreTransferAction(address cToken, address src, address dst) internal {\\r\\n        for (uint256 i = 0; i \\u003c rewardsDistributors.length; i++) RewardsDistributorDelegate(rewardsDistributors[i]).flywheelPreTransferAction(cToken, src, dst);\\r\\n    }\\r\\n\\r\\n    /*** Liquidity/Liquidation Calculations ***/\\r\\n\\r\\n    /**\\r\\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\\r\\n     *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\\r\\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\\r\\n     */\\r\\n    struct AccountLiquidityLocalVars {\\r\\n        uint sumCollateral;\\r\\n        uint sumBorrowPlusEffects;\\r\\n        uint cTokenBalance;\\r\\n        uint borrowBalance;\\r\\n        uint exchangeRateMantissa;\\r\\n        uint oraclePriceMantissa;\\r\\n        Exp collateralFactor;\\r\\n        Exp exchangeRate;\\r\\n        Exp oraclePrice;\\r\\n        Exp tokensToDenom;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine the current account liquidity wrt collateral requirements\\r\\n     * @return (possible error code (semi-opaque),\\r\\n                account liquidity in excess of collateral requirements,\\r\\n     *          account shortfall below collateral requirements)\\r\\n     */\\r\\n    function getAccountLiquidity(address account) public view returns (uint, uint, uint) {\\r\\n        (Error err, uint liquidity, uint shortfall) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0);\\r\\n\\r\\n        return (uint(err), liquidity, shortfall);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine the current account liquidity wrt collateral requirements\\r\\n     * @return (possible error code,\\r\\n                account liquidity in excess of collateral requirements,\\r\\n     *          account shortfall below collateral requirements)\\r\\n     */\\r\\n    function getAccountLiquidityInternal(address account) internal view returns (Error, uint, uint) {\\r\\n        return getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\r\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\r\\n     * @param account The account to determine liquidity for\\r\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\r\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\r\\n     * @return (possible error code (semi-opaque),\\r\\n                hypothetical account liquidity in excess of collateral requirements,\\r\\n     *          hypothetical account shortfall below collateral requirements)\\r\\n     */\\r\\n    function getHypotheticalAccountLiquidity(\\r\\n        address account,\\r\\n        address cTokenModify,\\r\\n        uint redeemTokens,\\r\\n        uint borrowAmount) public view returns (uint, uint, uint) {\\r\\n        (Error err, uint liquidity, uint shortfall) = getHypotheticalAccountLiquidityInternal(account, CToken(cTokenModify), redeemTokens, borrowAmount);\\r\\n        return (uint(err), liquidity, shortfall);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\r\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\r\\n     * @param account The account to determine liquidity for\\r\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\r\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\r\\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\\r\\n     *  without calculating accumulated interest.\\r\\n     * @return (possible error code,\\r\\n                hypothetical account liquidity in excess of collateral requirements,\\r\\n     *          hypothetical account shortfall below collateral requirements)\\r\\n     */\\r\\n    function getHypotheticalAccountLiquidityInternal(\\r\\n        address account,\\r\\n        CToken cTokenModify,\\r\\n        uint redeemTokens,\\r\\n        uint borrowAmount) internal view returns (Error, uint, uint) {\\r\\n\\r\\n        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\\r\\n        uint oErr;\\r\\n\\r\\n        // For each asset the account is in\\r\\n        CToken[] memory assets = accountAssets[account];\\r\\n        for (uint i = 0; i \\u003c assets.length; i++) {\\r\\n            CToken asset = assets[i];\\r\\n\\r\\n            // Read the balances and exchange rate from the cToken\\r\\n            (oErr, vars.cTokenBalance, vars.borrowBalance, vars.exchangeRateMantissa) = asset.getAccountSnapshot(account);\\r\\n            if (oErr != 0) { // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\\r\\n                return (Error.SNAPSHOT_ERROR, 0, 0);\\r\\n            }\\r\\n            vars.collateralFactor = Exp({mantissa: markets[address(asset)].collateralFactorMantissa});\\r\\n            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\\r\\n\\r\\n            // Get the normalized price of the asset\\r\\n            vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\\r\\n            if (vars.oraclePriceMantissa == 0) {\\r\\n                return (Error.PRICE_ERROR, 0, 0);\\r\\n            }\\r\\n            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\\r\\n\\r\\n            // Pre-compute a conversion factor from tokens -\\u003e ether (normalized price value)\\r\\n            vars.tokensToDenom = mul_(mul_(vars.collateralFactor, vars.exchangeRate), vars.oraclePrice);\\r\\n\\r\\n            // sumCollateral += tokensToDenom * cTokenBalance\\r\\n            vars.sumCollateral = mul_ScalarTruncateAddUInt(vars.tokensToDenom, vars.cTokenBalance, vars.sumCollateral);\\r\\n\\r\\n            // sumBorrowPlusEffects += oraclePrice * borrowBalance\\r\\n            vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.oraclePrice, vars.borrowBalance, vars.sumBorrowPlusEffects);\\r\\n\\r\\n            // Calculate effects of interacting with cTokenModify\\r\\n            if (asset == cTokenModify) {\\r\\n                // redeem effect\\r\\n                // sumBorrowPlusEffects += tokensToDenom * redeemTokens\\r\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.tokensToDenom, redeemTokens, vars.sumBorrowPlusEffects);\\r\\n\\r\\n                // borrow effect\\r\\n                // sumBorrowPlusEffects += oraclePrice * borrowAmount\\r\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.oraclePrice, borrowAmount, vars.sumBorrowPlusEffects);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // These are safe, as the underflow condition is checked first\\r\\n        if (vars.sumCollateral \\u003e vars.sumBorrowPlusEffects) {\\r\\n            return (Error.NO_ERROR, vars.sumCollateral - vars.sumBorrowPlusEffects, 0);\\r\\n        } else {\\r\\n            return (Error.NO_ERROR, 0, vars.sumBorrowPlusEffects - vars.sumCollateral);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\\r\\n     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\\r\\n     * @param cTokenBorrowed The address of the borrowed cToken\\r\\n     * @param cTokenCollateral The address of the collateral cToken\\r\\n     * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\\r\\n     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\\r\\n     */\\r\\n    function liquidateCalculateSeizeTokens(address cTokenBorrowed, address cTokenCollateral, uint actualRepayAmount) external view returns (uint, uint) {\\r\\n        /* Read oracle prices for borrowed and collateral markets */\\r\\n        uint priceBorrowedMantissa = oracle.getUnderlyingPrice(CToken(cTokenBorrowed));\\r\\n        uint priceCollateralMantissa = oracle.getUnderlyingPrice(CToken(cTokenCollateral));\\r\\n        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\\r\\n            return (uint(Error.PRICE_ERROR), 0);\\r\\n        }\\r\\n\\r\\n        /*\\r\\n         * Get the exchange rate and calculate the number of collateral tokens to seize:\\r\\n         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\\r\\n         *  seizeTokens = seizeAmount / exchangeRate\\r\\n         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\\r\\n         */\\r\\n        uint exchangeRateMantissa = CToken(cTokenCollateral).exchangeRateStored(); // Note: reverts on error\\r\\n        uint seizeTokens;\\r\\n        Exp memory numerator;\\r\\n        Exp memory denominator;\\r\\n        Exp memory ratio;\\r\\n\\r\\n        numerator = mul_(Exp({mantissa: liquidationIncentiveMantissa}), Exp({mantissa: priceBorrowedMantissa}));\\r\\n        denominator = mul_(Exp({mantissa: priceCollateralMantissa}), Exp({mantissa: exchangeRateMantissa}));\\r\\n        ratio = div_(numerator, denominator);\\r\\n\\r\\n        seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\\r\\n\\r\\n        return (uint(Error.NO_ERROR), seizeTokens);\\r\\n    }\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    /**\\r\\n      * @notice Add a RewardsDistributor contracts.\\r\\n      * @dev Admin function to add a RewardsDistributor contract\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _addRewardsDistributor(address distributor) external returns (uint) {\\r\\n        // Check caller is admin\\r\\n        if (!hasAdminRights()) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ADD_REWARDS_DISTRIBUTOR_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        // Check marker method\\r\\n        require(RewardsDistributorDelegate(distributor).isRewardsDistributor(), \\\"marker method returned false\\\");\\r\\n\\r\\n        // Check for existing RewardsDistributor\\r\\n        for (uint i = 0; i \\u003c rewardsDistributors.length; i++) require(distributor != rewardsDistributors[i], \\\"RewardsDistributor contract already added\\\");\\r\\n\\r\\n        // Add RewardsDistributor to array\\r\\n        rewardsDistributors.push(distributor);\\r\\n        emit AddedRewardsDistributor(distributor);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sets the whitelist enforcement for the comptroller\\r\\n      * @dev Admin function to set a new whitelist enforcement boolean\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setWhitelistEnforcement(bool enforce) external returns (uint) {\\r\\n        // Check caller is admin\\r\\n        if (!hasAdminRights()) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_WHITELIST_ENFORCEMENT_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        // Check if `enforceWhitelist` already equals `enforce`\\r\\n        if (enforceWhitelist == enforce) {\\r\\n            return uint(Error.NO_ERROR);\\r\\n        }\\r\\n\\r\\n        // Set comptroller\\u0027s `enforceWhitelist` to `enforce`\\r\\n        enforceWhitelist = enforce;\\r\\n\\r\\n        // Emit WhitelistEnforcementChanged(bool enforce);\\r\\n        emit WhitelistEnforcementChanged(enforce);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sets the whitelist `statuses` for `suppliers`\\r\\n      * @dev Admin function to set the whitelist `statuses` for `suppliers`\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setWhitelistStatuses(address[] calldata suppliers, bool[] calldata statuses) external returns (uint) {\\r\\n        // Check caller is admin\\r\\n        if (!hasAdminRights()) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_WHITELIST_STATUS_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        // Set whitelist statuses for suppliers\\r\\n        for (uint i = 0; i \\u003c suppliers.length; i++) {\\r\\n            address supplier = suppliers[i];\\r\\n\\r\\n            if (statuses[i]) {\\r\\n                // If not already whitelisted, add to whitelist\\r\\n                if (!whitelist[supplier]) {\\r\\n                    whitelist[supplier] = true;\\r\\n                    whitelistArray.push(supplier);\\r\\n                    whitelistIndexes[supplier] = whitelistArray.length - 1;\\r\\n                }\\r\\n            } else {\\r\\n                // If whitelisted, remove from whitelist\\r\\n                if (whitelist[supplier]) {\\r\\n                    whitelistArray[whitelistIndexes[supplier]] = whitelistArray[whitelistArray.length - 1]; // Copy last item in list to location of item to be removed\\r\\n                    whitelistArray.length--; // Reduce length by 1\\r\\n                    whitelistIndexes[whitelistArray[whitelistIndexes[supplier]]] = whitelistIndexes[supplier]; // Set whitelist index of moved item to correct index\\r\\n                    whitelistIndexes[supplier] = 0; // Reset supplier whitelist index to 0 for a gas refund\\r\\n                    whitelist[supplier] = false; // Tell the contract that the supplier is no longer whitelisted\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sets a new price oracle for the comptroller\\r\\n      * @dev Admin function to set a new price oracle\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setPriceOracle(PriceOracle newOracle) public returns (uint) {\\r\\n        // Check caller is admin\\r\\n        if (!hasAdminRights()) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        // Track the old oracle for the comptroller\\r\\n        PriceOracle oldOracle = oracle;\\r\\n\\r\\n        // Set comptroller\\u0027s oracle to newOracle\\r\\n        oracle = newOracle;\\r\\n\\r\\n        // Emit NewPriceOracle(oldOracle, newOracle)\\r\\n        emit NewPriceOracle(oldOracle, newOracle);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sets the closeFactor used when liquidating borrows\\r\\n      * @dev Admin function to set closeFactor\\r\\n      * @param newCloseFactorMantissa New close factor, scaled by 1e18\\r\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\r\\n      */\\r\\n    function _setCloseFactor(uint newCloseFactorMantissa) external returns (uint256) {\\r\\n        // Check caller is admin\\r\\n        if (!hasAdminRights()) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_CLOSE_FACTOR_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        // Check limits\\r\\n        Exp memory newCloseFactorExp = Exp({mantissa: newCloseFactorMantissa});\\r\\n        Exp memory lowLimit = Exp({mantissa: closeFactorMinMantissa});\\r\\n        if (lessThanOrEqualExp(newCloseFactorExp, lowLimit)) {\\r\\n            return fail(Error.INVALID_CLOSE_FACTOR, FailureInfo.SET_CLOSE_FACTOR_VALIDATION);\\r\\n        }\\r\\n\\r\\n        Exp memory highLimit = Exp({mantissa: closeFactorMaxMantissa});\\r\\n        if (lessThanExp(highLimit, newCloseFactorExp)) {\\r\\n            return fail(Error.INVALID_CLOSE_FACTOR, FailureInfo.SET_CLOSE_FACTOR_VALIDATION);\\r\\n        }\\r\\n\\r\\n        // Set pool close factor to new close factor, remember old value\\r\\n        uint oldCloseFactorMantissa = closeFactorMantissa;\\r\\n        closeFactorMantissa = newCloseFactorMantissa;\\r\\n\\r\\n        // Emit event\\r\\n        emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sets the collateralFactor for a market\\r\\n      * @dev Admin function to set per-market collateralFactor\\r\\n      * @param cToken The market to set the factor on\\r\\n      * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\\r\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\r\\n      */\\r\\n    function _setCollateralFactor(CToken cToken, uint newCollateralFactorMantissa) public returns (uint256) {\\r\\n        // Check caller is admin\\r\\n        if (!hasAdminRights()) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        // Verify market is listed\\r\\n        Market storage market = markets[address(cToken)];\\r\\n        if (!market.isListed) {\\r\\n            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);\\r\\n        }\\r\\n\\r\\n        Exp memory newCollateralFactorExp = Exp({mantissa: newCollateralFactorMantissa});\\r\\n\\r\\n        // Check collateral factor \\u003c= 0.9\\r\\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\\r\\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\\r\\n            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);\\r\\n        }\\r\\n\\r\\n        // If collateral factor != 0, fail if price == 0\\r\\n        if (newCollateralFactorMantissa != 0 \\u0026\\u0026 oracle.getUnderlyingPrice(cToken) == 0) {\\r\\n            return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\\r\\n        }\\r\\n\\r\\n        // Set market\\u0027s collateral factor to new collateral factor, remember old value\\r\\n        uint oldCollateralFactorMantissa = market.collateralFactorMantissa;\\r\\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\\r\\n\\r\\n        // Emit event with asset, old collateral factor, and new collateral factor\\r\\n        emit NewCollateralFactor(cToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sets liquidationIncentive\\r\\n      * @dev Admin function to set liquidationIncentive\\r\\n      * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\\r\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\r\\n      */\\r\\n    function _setLiquidationIncentive(uint newLiquidationIncentiveMantissa) external returns (uint) {\\r\\n        // Check caller is admin\\r\\n        if (!hasAdminRights()) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        // Check de-scaled min \\u003c= newLiquidationIncentive \\u003c= max\\r\\n        Exp memory newLiquidationIncentive = Exp({mantissa: newLiquidationIncentiveMantissa});\\r\\n        Exp memory minLiquidationIncentive = Exp({mantissa: liquidationIncentiveMinMantissa});\\r\\n        if (lessThanExp(newLiquidationIncentive, minLiquidationIncentive)) {\\r\\n            return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);\\r\\n        }\\r\\n\\r\\n        Exp memory maxLiquidationIncentive = Exp({mantissa: liquidationIncentiveMaxMantissa});\\r\\n        if (lessThanExp(maxLiquidationIncentive, newLiquidationIncentive)) {\\r\\n            return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);\\r\\n        }\\r\\n\\r\\n        // Save current value for use in log\\r\\n        uint oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\\r\\n\\r\\n        // Set liquidation incentive to new incentive\\r\\n        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\\r\\n\\r\\n        // Emit event with old incentive, new incentive\\r\\n        emit NewLiquidationIncentive(oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Add the market to the markets mapping and set it as listed\\r\\n      * @dev Admin function to set isListed and add support for the market\\r\\n      * @param cToken The address of the market (token) to list\\r\\n      * @return uint 0=success, otherwise a failure. (See enum Error for details)\\r\\n      */\\r\\n    function _supportMarket(CToken cToken) internal returns (uint) {\\r\\n        // Check caller is admin\\r\\n        if (!hasAdminRights()) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        // Is market already listed?\\r\\n        if (markets[address(cToken)].isListed) {\\r\\n            return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\\r\\n        }\\r\\n\\r\\n        // Sanity check to make sure its really a CToken\\r\\n        require(cToken.isCToken(), \\\"marker method returned false\\\");\\r\\n\\r\\n        // Check cToken.comptroller == this\\r\\n        require(address(cToken.comptroller()) == address(this), \\\"Cannot support a market with a different Comptroller.\\\");\\r\\n\\r\\n        // Make sure market is not already listed\\r\\n        address underlying = cToken.isCEther() ? address(0) : CErc20(address(cToken)).underlying();\\r\\n\\r\\n        if (address(cTokensByUnderlying[underlying]) != address(0)) {\\r\\n            return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\\r\\n        }\\r\\n\\r\\n        // List market and emit event\\r\\n        markets[address(cToken)] = Market({isListed: true, collateralFactorMantissa: 0});\\r\\n        allMarkets.push(cToken);\\r\\n        cTokensByUnderlying[underlying] = cToken;\\r\\n        emit MarketListed(cToken);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Deploy cToken, add the market to the markets mapping, and set it as listed and set the collateral factor\\r\\n      * @dev Admin function to deploy cToken, set isListed, and add support for the market and set the collateral factor\\r\\n      * @return uint 0=success, otherwise a failure. (See enum Error for details)\\r\\n      */\\r\\n    function _deployMarket(\\r\\n        bool isCEther,\\r\\n        bytes calldata constructorData,\\r\\n        uint collateralFactorMantissa\\r\\n    ) external returns (uint) {\\r\\n        // Check caller is admin\\r\\n        if (!hasAdminRights()) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        // Temporarily enable Fuse admin rights for asset deployment (storing the original value)\\r\\n        bool oldFuseAdminHasRights = fuseAdminHasRights;\\r\\n        fuseAdminHasRights = true;\\r\\n\\r\\n        // Deploy via Fuse admin\\r\\n        CToken cToken = CToken(isCEther ? fuseAdmin.deployCEther(constructorData) : fuseAdmin.deployCErc20(constructorData));\\r\\n\\r\\n        // Reset Fuse admin rights to the original value\\r\\n        fuseAdminHasRights = oldFuseAdminHasRights;\\r\\n\\r\\n        // Support market here in the Comptroller\\r\\n        uint256 err = _supportMarket(cToken);\\r\\n\\r\\n        // Set collateral factor\\r\\n        return err == uint(Error.NO_ERROR) ? _setCollateralFactor(cToken, collateralFactorMantissa) : err;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Removed a market from the markets mapping and sets it as unlisted\\r\\n      * @dev Admin function unset isListed and collateralFactorMantissa and unadd support for the market\\r\\n      * @param cToken The address of the market (token) to unlist\\r\\n      * @return uint 0=success, otherwise a failure. (See enum Error for details)\\r\\n      */\\r\\n    function _unsupportMarket(CToken cToken) external returns (uint) {\\r\\n        // Check admin rights\\r\\n        if (!hasAdminRights()) return fail(Error.UNAUTHORIZED, FailureInfo.UNSUPPORT_MARKET_OWNER_CHECK);\\r\\n\\r\\n        // Check if market is already unlisted\\r\\n        if (!markets[address(cToken)].isListed) return fail(Error.MARKET_NOT_LISTED, FailureInfo.UNSUPPORT_MARKET_DOES_NOT_EXIST);\\r\\n\\r\\n        // Check if market is in use\\r\\n        if (cToken.totalSupply() \\u003e 0) return fail(Error.NONZERO_TOTAL_SUPPLY, FailureInfo.UNSUPPORT_MARKET_IN_USE);\\r\\n\\r\\n        // Unlist market\\r\\n        delete markets[address(cToken)];\\r\\n        \\r\\n        /* Delete cToken from allMarkets */\\r\\n        // load into memory for faster iteration\\r\\n        CToken[] memory _allMarkets = allMarkets;\\r\\n        uint len = _allMarkets.length;\\r\\n        uint assetIndex = len;\\r\\n        for (uint i = 0; i \\u003c len; i++) {\\r\\n            if (_allMarkets[i] == cToken) {\\r\\n                assetIndex = i;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // We *must* have found the asset in the list or our redundant data structure is broken\\r\\n        assert(assetIndex \\u003c len);\\r\\n\\r\\n        // copy last item in list to location of item to be removed, reduce length by 1\\r\\n        allMarkets[assetIndex] = allMarkets[allMarkets.length - 1];\\r\\n        allMarkets.length--;\\r\\n\\r\\n        cTokensByUnderlying[cToken.isCEther() ? address(0) : CErc20(address(cToken)).underlying()] = CToken(address(0));\\r\\n        emit MarketUnlisted(cToken);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Toggles the auto-implementation feature\\r\\n     * @param enabled If the feature is to be enabled\\r\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\r\\n     */\\r\\n    function _toggleAutoImplementations(bool enabled) public returns (uint) {\\r\\n        if (!hasAdminRights()) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.TOGGLE_AUTO_IMPLEMENTATIONS_ENABLED_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        // Return no error if already set to the desired value\\r\\n        if (autoImplementation == enabled) return uint(Error.NO_ERROR);\\r\\n\\r\\n        // Store autoImplementation with value enabled\\r\\n        autoImplementation = enabled;\\r\\n\\r\\n        // Emit AutoImplementationsToggled(enabled)\\r\\n        emit AutoImplementationsToggled(enabled);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Set the given supply caps for the given cToken markets. Supplying that brings total underlying supply to or above supply cap will revert.\\r\\n      * @dev Admin or borrowCapGuardian function to set the supply caps. A supply cap of 0 corresponds to unlimited supplying.\\r\\n      * @param cTokens The addresses of the markets (tokens) to change the supply caps for\\r\\n      * @param newSupplyCaps The new supply cap values in underlying to be set. A value of 0 corresponds to unlimited supplying.\\r\\n      */\\r\\n    function _setMarketSupplyCaps(CToken[] calldata cTokens, uint[] calldata newSupplyCaps) external {\\r\\n    \\trequire(msg.sender == admin || msg.sender == borrowCapGuardian, \\\"only admin or borrow cap guardian can set supply caps\\\"); \\r\\n\\r\\n        uint numMarkets = cTokens.length;\\r\\n        uint numSupplyCaps = newSupplyCaps.length;\\r\\n\\r\\n        require(numMarkets != 0 \\u0026\\u0026 numMarkets == numSupplyCaps, \\\"invalid input\\\");\\r\\n\\r\\n        for(uint i = 0; i \\u003c numMarkets; i++) {\\r\\n            supplyCaps[address(cTokens[i])] = newSupplyCaps[i];\\r\\n            emit NewSupplyCap(cTokens[i], newSupplyCaps[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\\r\\n      * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\\r\\n      * @param cTokens The addresses of the markets (tokens) to change the borrow caps for\\r\\n      * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\\r\\n      */\\r\\n    function _setMarketBorrowCaps(CToken[] calldata cTokens, uint[] calldata newBorrowCaps) external {\\r\\n    \\trequire(msg.sender == admin || msg.sender == borrowCapGuardian, \\\"only admin or borrow cap guardian can set borrow caps\\\"); \\r\\n\\r\\n        uint numMarkets = cTokens.length;\\r\\n        uint numBorrowCaps = newBorrowCaps.length;\\r\\n\\r\\n        require(numMarkets != 0 \\u0026\\u0026 numMarkets == numBorrowCaps, \\\"invalid input\\\");\\r\\n\\r\\n        for(uint i = 0; i \\u003c numMarkets; i++) {\\r\\n            borrowCaps[address(cTokens[i])] = newBorrowCaps[i];\\r\\n            emit NewBorrowCap(cTokens[i], newBorrowCaps[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Admin function to change the Borrow Cap Guardian\\r\\n     * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\\r\\n     */\\r\\n    function _setBorrowCapGuardian(address newBorrowCapGuardian) external {\\r\\n        require(msg.sender == admin, \\\"only admin can set borrow cap guardian\\\");\\r\\n\\r\\n        // Save current value for inclusion in log\\r\\n        address oldBorrowCapGuardian = borrowCapGuardian;\\r\\n\\r\\n        // Store borrowCapGuardian with value newBorrowCapGuardian\\r\\n        borrowCapGuardian = newBorrowCapGuardian;\\r\\n\\r\\n        // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\\r\\n        emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Admin function to change the Pause Guardian\\r\\n     * @param newPauseGuardian The address of the new Pause Guardian\\r\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\r\\n     */\\r\\n    function _setPauseGuardian(address newPauseGuardian) public returns (uint) {\\r\\n        if (!hasAdminRights()) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        // Save current value for inclusion in log\\r\\n        address oldPauseGuardian = pauseGuardian;\\r\\n\\r\\n        // Store pauseGuardian with value newPauseGuardian\\r\\n        pauseGuardian = newPauseGuardian;\\r\\n\\r\\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\\r\\n        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    function _setMintPaused(CToken cToken, bool state) public returns (bool) {\\r\\n        require(markets[address(cToken)].isListed, \\\"cannot pause a market that is not listed\\\");\\r\\n        require(msg.sender == pauseGuardian || hasAdminRights(), \\\"only pause guardian and admin can pause\\\");\\r\\n        require(hasAdminRights() || state == true, \\\"only admin can unpause\\\");\\r\\n\\r\\n        mintGuardianPaused[address(cToken)] = state;\\r\\n        emit ActionPaused(cToken, \\\"Mint\\\", state);\\r\\n        return state;\\r\\n    }\\r\\n\\r\\n    function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {\\r\\n        require(markets[address(cToken)].isListed, \\\"cannot pause a market that is not listed\\\");\\r\\n        require(msg.sender == pauseGuardian || hasAdminRights(), \\\"only pause guardian and admin can pause\\\");\\r\\n        require(hasAdminRights() || state == true, \\\"only admin can unpause\\\");\\r\\n\\r\\n        borrowGuardianPaused[address(cToken)] = state;\\r\\n        emit ActionPaused(cToken, \\\"Borrow\\\", state);\\r\\n        return state;\\r\\n    }\\r\\n\\r\\n    function _setTransferPaused(bool state) public returns (bool) {\\r\\n        require(msg.sender == pauseGuardian || hasAdminRights(), \\\"only pause guardian and admin can pause\\\");\\r\\n        require(hasAdminRights() || state == true, \\\"only admin can unpause\\\");\\r\\n\\r\\n        transferGuardianPaused = state;\\r\\n        emit ActionPaused(\\\"Transfer\\\", state);\\r\\n        return state;\\r\\n    }\\r\\n\\r\\n    function _setSeizePaused(bool state) public returns (bool) {\\r\\n        require(msg.sender == pauseGuardian || hasAdminRights(), \\\"only pause guardian and admin can pause\\\");\\r\\n        require(hasAdminRights() || state == true, \\\"only admin can unpause\\\");\\r\\n\\r\\n        seizeGuardianPaused = state;\\r\\n        emit ActionPaused(\\\"Seize\\\", state);\\r\\n        return state;\\r\\n    }\\r\\n\\r\\n    function _become(Unitroller unitroller) public {\\r\\n        require((msg.sender == address(fuseAdmin) \\u0026\\u0026 unitroller.fuseAdminHasRights()) || (msg.sender == unitroller.admin() \\u0026\\u0026 unitroller.adminHasRights()), \\\"only unitroller admin can change brains\\\");\\r\\n\\r\\n        uint changeStatus = unitroller._acceptImplementation();\\r\\n        require(changeStatus == 0, \\\"change not authorized\\\");\\r\\n\\r\\n        Comptroller(address(unitroller))._becomeImplementation();\\r\\n    }\\r\\n\\r\\n    function _becomeImplementation() external {\\r\\n        require(msg.sender == comptrollerImplementation, \\\"only implementation may call _becomeImplementation\\\");\\r\\n\\r\\n        if (!_notEnteredInitialized) {\\r\\n            _notEntered = true;\\r\\n            _notEnteredInitialized = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*** Helper Functions ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Return all of the markets\\r\\n     * @dev The automatic getter may be used to access an individual market.\\r\\n     * @return The list of market addresses\\r\\n     */\\r\\n    function getAllMarkets() public view returns (CToken[] memory) {\\r\\n        return allMarkets;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return all of the borrowers\\r\\n     * @dev The automatic getter may be used to access an individual borrower.\\r\\n     * @return The list of borrower account addresses\\r\\n     */\\r\\n    function getAllBorrowers() public view returns (address[] memory) {\\r\\n        return allBorrowers;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return all of the whitelist\\r\\n     * @dev The automatic getter may be used to access an individual whitelist status.\\r\\n     * @return The list of borrower account addresses\\r\\n     */\\r\\n    function getWhitelist() external view returns (address[] memory) {\\r\\n        return whitelistArray;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns an array of all RewardsDistributors\\r\\n     */\\r\\n    function getRewardsDistributors() external view returns (address[] memory) {\\r\\n        return rewardsDistributors;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns true if the given cToken market has been deprecated\\r\\n     * @dev All borrows in a deprecated cToken market can be immediately liquidated\\r\\n     * @param cToken The market to check if deprecated\\r\\n     */\\r\\n    function isDeprecated(CToken cToken) public view returns (bool) {\\r\\n        return\\r\\n            markets[address(cToken)].collateralFactorMantissa == 0 \\u0026\\u0026 \\r\\n            borrowGuardianPaused[address(cToken)] == true \\u0026\\u0026 \\r\\n            add_(add_(cToken.reserveFactorMantissa(), cToken.adminFeeMantissa()), cToken.fuseFeeMantissa()) == 1e18\\r\\n        ;\\r\\n    }\\r\\n\\r\\n    /*** Pool-Wide/Cross-Asset Reentrancy Prevention ***/\\r\\n\\r\\n    /**\\r\\n     * @dev Called by cTokens before a non-reentrant function for pool-wide reentrancy prevention.\\r\\n     * Prevents pool-wide/cross-asset reentrancy exploits like AMP on Cream.\\r\\n     */\\r\\n    function _beforeNonReentrant() external {\\r\\n        require(markets[msg.sender].isListed, \\\"Comptroller:_beforeNonReentrant: caller not listed as market\\\");\\r\\n        require(_notEntered, \\\"re-entered across assets\\\");\\r\\n        _notEntered = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Called by cTokens after a non-reentrant function for pool-wide reentrancy prevention.\\r\\n     * Prevents pool-wide/cross-asset reentrancy exploits like AMP on Cream.\\r\\n     */\\r\\n    function _afterNonReentrant() external {\\r\\n        require(markets[msg.sender].isListed, \\\"Comptroller:_afterNonReentrant: caller not listed as market\\\");\\r\\n        _notEntered = true; // get a gas-refund post-Istanbul\\r\\n    }\\r\\n}\\r\\n\"},\"ComptrollerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\ncontract ComptrollerInterface {\\r\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\r\\n    bool public constant isComptroller = true;\\r\\n\\r\\n    /*** Assets You Are In ***/\\r\\n\\r\\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\\r\\n    function exitMarket(address cToken) external returns (uint);\\r\\n\\r\\n    /*** Policy Hooks ***/\\r\\n\\r\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint);\\r\\n    function mintWithinLimits(address cToken, uint exchangeRateMantissa, uint accountTokens, uint mintAmount) external returns (uint);\\r\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external;\\r\\n\\r\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint);\\r\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\r\\n\\r\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint);\\r\\n    function borrowWithinLimits(address cToken, uint accountBorrowsNew) external returns (uint);\\r\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external;\\r\\n\\r\\n    function repayBorrowAllowed(\\r\\n        address cToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount) external returns (uint);\\r\\n    function repayBorrowVerify(\\r\\n        address cToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        uint borrowerIndex) external;\\r\\n\\r\\n    function liquidateBorrowAllowed(\\r\\n        address cTokenBorrowed,\\r\\n        address cTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount) external returns (uint);\\r\\n    function liquidateBorrowVerify(\\r\\n        address cTokenBorrowed,\\r\\n        address cTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        uint seizeTokens) external;\\r\\n\\r\\n    function seizeAllowed(\\r\\n        address cTokenCollateral,\\r\\n        address cTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens) external returns (uint);\\r\\n    function seizeVerify(\\r\\n        address cTokenCollateral,\\r\\n        address cTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens) external;\\r\\n\\r\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint);\\r\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external;\\r\\n\\r\\n    /*** Liquidity/Liquidation Calculations ***/\\r\\n\\r\\n    function liquidateCalculateSeizeTokens(\\r\\n        address cTokenBorrowed,\\r\\n        address cTokenCollateral,\\r\\n        uint repayAmount) external view returns (uint, uint);\\r\\n    \\r\\n    /*** Pool-Wide/Cross-Asset Reentrancy Prevention ***/\\r\\n\\r\\n    function _beforeNonReentrant() external;\\r\\n    function _afterNonReentrant() external;\\r\\n}\\r\\n\"},\"ComptrollerStorage.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./IFuseFeeDistributor.sol\\\";\\r\\nimport \\\"./CToken.sol\\\";\\r\\nimport \\\"./PriceOracle.sol\\\";\\r\\n\\r\\ncontract UnitrollerAdminStorage {\\r\\n    /**\\r\\n     * @notice Administrator for Fuse\\r\\n     */\\r\\n    IFuseFeeDistributor internal constant fuseAdmin = IFuseFeeDistributor(0xa731585ab05fC9f83555cf9Bff8F58ee94e18F85);\\r\\n\\r\\n    /**\\r\\n    * @notice Administrator for this contract\\r\\n    */\\r\\n    address public admin;\\r\\n\\r\\n    /**\\r\\n    * @notice Pending administrator for this contract\\r\\n    */\\r\\n    address public pendingAdmin;\\r\\n\\r\\n    /**\\r\\n     * @notice Whether or not the Fuse admin has admin rights\\r\\n     */\\r\\n    bool public fuseAdminHasRights = true;\\r\\n\\r\\n    /**\\r\\n     * @notice Whether or not the admin has admin rights\\r\\n     */\\r\\n    bool public adminHasRights = true;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a boolean indicating if the sender has admin rights\\r\\n     */\\r\\n    function hasAdminRights() internal view returns (bool) {\\r\\n        return (msg.sender == admin \\u0026\\u0026 adminHasRights) || (msg.sender == address(fuseAdmin) \\u0026\\u0026 fuseAdminHasRights);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Active brains of Unitroller\\r\\n    */\\r\\n    address public comptrollerImplementation;\\r\\n\\r\\n    /**\\r\\n    * @notice Pending brains of Unitroller\\r\\n    */\\r\\n    address public pendingComptrollerImplementation;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\r\\n    /**\\r\\n     * @notice Oracle which gives the price of any given asset\\r\\n     */\\r\\n    PriceOracle public oracle;\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\r\\n     */\\r\\n    uint public closeFactorMantissa;\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\\r\\n     */\\r\\n    uint public liquidationIncentiveMantissa;\\r\\n\\r\\n    /**\\r\\n     * @notice UNUSED AFTER UPGRADE: Max number of assets a single account can participate in (borrow or use as collateral)\\r\\n     */\\r\\n    uint internal maxAssets;\\r\\n\\r\\n    /**\\r\\n     * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\r\\n     */\\r\\n    mapping(address =\\u003e CToken[]) public accountAssets;\\r\\n\\r\\n}\\r\\n\\r\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\r\\n    struct Market {\\r\\n        /**\\r\\n         * @notice Whether or not this market is listed\\r\\n         */\\r\\n        bool isListed;\\r\\n\\r\\n        /**\\r\\n         * @notice Multiplier representing the most one can borrow against their collateral in this market.\\r\\n         *  For instance, 0.9 to allow borrowing 90% of collateral value.\\r\\n         *  Must be between 0 and 1, and stored as a mantissa.\\r\\n         */\\r\\n        uint collateralFactorMantissa;\\r\\n\\r\\n        /**\\r\\n         * @notice Per-market mapping of \\\"accounts in this asset\\\"\\r\\n         */\\r\\n        mapping(address =\\u003e bool) accountMembership;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Official mapping of cTokens -\\u003e Market metadata\\r\\n     * @dev Used e.g. to determine if a market is supported\\r\\n     */\\r\\n    mapping(address =\\u003e Market) public markets;\\r\\n\\r\\n    /// @notice A list of all markets\\r\\n    CToken[] public allMarkets;\\r\\n\\r\\n    /**\\r\\n     * @dev Maps borrowers to booleans indicating if they have entered any markets\\r\\n     */\\r\\n    mapping(address =\\u003e bool) internal borrowers;\\r\\n\\r\\n    /// @notice A list of all borrowers who have entered markets\\r\\n    address[] public allBorrowers;\\r\\n\\r\\n    /// @notice Indexes of borrower account addresses in the `allBorrowers` array\\r\\n    mapping(address =\\u003e uint256) internal borrowerIndexes;\\r\\n\\r\\n    /**\\r\\n     * @dev Maps suppliers to booleans indicating if they have ever supplied to any markets\\r\\n     */\\r\\n    mapping(address =\\u003e bool) public suppliers;\\r\\n\\r\\n    /// @notice All cTokens addresses mapped by their underlying token addresses\\r\\n    mapping(address =\\u003e CToken) public cTokensByUnderlying;\\r\\n\\r\\n    /// @notice Whether or not the supplier whitelist is enforced\\r\\n    bool public enforceWhitelist;\\r\\n\\r\\n    /// @notice Maps addresses to booleans indicating if they are allowed to supply assets (i.e., mint cTokens)\\r\\n    mapping(address =\\u003e bool) public whitelist;\\r\\n\\r\\n    /// @notice An array of all whitelisted accounts\\r\\n    address[] public whitelistArray;\\r\\n\\r\\n    /// @notice Indexes of account addresses in the `whitelistArray` array\\r\\n    mapping(address =\\u003e uint256) internal whitelistIndexes;\\r\\n\\r\\n    /**\\r\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\r\\n     *  Actions which allow users to remove their own assets cannot be paused.\\r\\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\\r\\n     */\\r\\n    address public pauseGuardian;\\r\\n    bool public _mintGuardianPaused;\\r\\n    bool public _borrowGuardianPaused;\\r\\n    bool public transferGuardianPaused;\\r\\n    bool public seizeGuardianPaused;\\r\\n    mapping(address =\\u003e bool) public mintGuardianPaused;\\r\\n    mapping(address =\\u003e bool) public borrowGuardianPaused;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\r\\n    /**\\r\\n     * @dev Whether or not the implementation should be auto-upgraded.\\r\\n     */\\r\\n    bool public autoImplementation;\\r\\n\\r\\n    /// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\r\\n    address public borrowCapGuardian;\\r\\n\\r\\n    /// @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\\r\\n    mapping(address =\\u003e uint) public borrowCaps;\\r\\n\\r\\n    /// @notice Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\\r\\n    mapping(address =\\u003e uint) public supplyCaps;\\r\\n\\r\\n    /// @notice RewardsDistributor contracts to notify of flywheel changes.\\r\\n    address[] public rewardsDistributors;\\r\\n\\r\\n    /// @dev Guard variable for pool-wide/cross-asset re-entrancy checks\\r\\n    bool internal _notEntered;\\r\\n\\r\\n    /// @dev Whether or not _notEntered has been initialized\\r\\n    bool internal _notEnteredInitialized;\\r\\n}\\r\\n\"},\"CToken.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./ComptrollerInterface.sol\\\";\\r\\nimport \\\"./CTokenInterfaces.sol\\\";\\r\\nimport \\\"./ErrorReporter.sol\\\";\\r\\nimport \\\"./Exponential.sol\\\";\\r\\nimport \\\"./EIP20Interface.sol\\\";\\r\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\r\\nimport \\\"./InterestRateModel.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Compound\\u0027s CToken Contract\\r\\n * @notice Abstract base for CTokens\\r\\n * @author Compound\\r\\n */\\r\\ncontract CToken is CTokenInterface, Exponential, TokenErrorReporter {\\r\\n    /**\\r\\n     * @notice Returns a boolean indicating if the sender has admin rights\\r\\n     */\\r\\n    function hasAdminRights() internal view returns (bool) {\\r\\n        ComptrollerV3Storage comptrollerStorage = ComptrollerV3Storage(address(comptroller));\\r\\n        return (msg.sender == comptrollerStorage.admin() \\u0026\\u0026 comptrollerStorage.adminHasRights()) || (msg.sender == address(fuseAdmin) \\u0026\\u0026 comptrollerStorage.fuseAdminHasRights());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Initialize the money market\\r\\n     * @param comptroller_ The address of the Comptroller\\r\\n     * @param interestRateModel_ The address of the interest rate model\\r\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\r\\n     * @param name_ EIP-20 name of this token\\r\\n     * @param symbol_ EIP-20 symbol of this token\\r\\n     * @param decimals_ EIP-20 decimal precision of this token\\r\\n     */\\r\\n    function initialize(ComptrollerInterface comptroller_,\\r\\n                        InterestRateModel interestRateModel_,\\r\\n                        uint initialExchangeRateMantissa_,\\r\\n                        string memory name_,\\r\\n                        string memory symbol_,\\r\\n                        uint8 decimals_,\\r\\n                        uint256 reserveFactorMantissa_,\\r\\n                        uint256 adminFeeMantissa_) public {\\r\\n        require(msg.sender == address(fuseAdmin), \\\"only Fuse admin may initialize the market\\\");\\r\\n        require(accrualBlockNumber == 0 \\u0026\\u0026 borrowIndex == 0, \\\"market may only be initialized once\\\");\\r\\n\\r\\n        // Set initial exchange rate\\r\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\r\\n        require(initialExchangeRateMantissa \\u003e 0, \\\"initial exchange rate must be greater than zero.\\\");\\r\\n\\r\\n        // Set the comptroller\\r\\n        uint err = _setComptroller(comptroller_);\\r\\n        require(err == uint(Error.NO_ERROR), \\\"setting comptroller failed\\\");\\r\\n\\r\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\r\\n        accrualBlockNumber = getBlockNumber();\\r\\n        borrowIndex = mantissaOne;\\r\\n\\r\\n        // Set the interest rate model (depends on block number / borrow index)\\r\\n        err = _setInterestRateModelFresh(interestRateModel_);\\r\\n        require(err == uint(Error.NO_ERROR), \\\"setting interest rate model failed\\\");\\r\\n\\r\\n        name = name_;\\r\\n        symbol = symbol_;\\r\\n        decimals = decimals_;\\r\\n\\r\\n        // Set reserve factor\\r\\n        err = _setReserveFactorFresh(reserveFactorMantissa_);\\r\\n        require(err == uint(Error.NO_ERROR), \\\"setting reserve factor failed\\\");\\r\\n\\r\\n        // Set admin fee\\r\\n        err = _setAdminFeeFresh(adminFeeMantissa_);\\r\\n        require(err == uint(Error.NO_ERROR), \\\"setting admin fee failed\\\");\\r\\n\\r\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\r\\n        _notEntered = true;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Returns latest pending Fuse fee (to be set with `_setFuseFeeFresh`)\\r\\n     */\\r\\n    function getPendingFuseFeeFromAdmin() internal view returns (uint) {\\r\\n        return fuseAdmin.interestFeeRate();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\r\\n     * @dev Called by both `transfer` and `transferFrom` internally\\r\\n     * @param spender The address of the account performing the transfer\\r\\n     * @param src The address of the source account\\r\\n     * @param dst The address of the destination account\\r\\n     * @param tokens The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\\r\\n        /* Fail if transfer not allowed */\\r\\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\r\\n        if (allowed != 0) {\\r\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\\r\\n        }\\r\\n\\r\\n        /* Do not allow self-transfers */\\r\\n        if (src == dst) {\\r\\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\r\\n        }\\r\\n\\r\\n        /* Get the allowance, infinite for the account owner */\\r\\n        uint startingAllowance = 0;\\r\\n        if (spender == src) {\\r\\n            startingAllowance = uint(-1);\\r\\n        } else {\\r\\n            startingAllowance = transferAllowances[src][spender];\\r\\n        }\\r\\n\\r\\n        /* Do the calculations, checking for {under,over}flow */\\r\\n        MathError mathErr;\\r\\n        uint allowanceNew;\\r\\n        uint srcTokensNew;\\r\\n        uint dstTokensNew;\\r\\n\\r\\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\r\\n        }\\r\\n\\r\\n        (mathErr, srcTokensNew) = subUInt(accountTokens[src], tokens);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\r\\n        }\\r\\n\\r\\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS \\u0026 INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        accountTokens[src] = srcTokensNew;\\r\\n        accountTokens[dst] = dstTokensNew;\\r\\n\\r\\n        /* Eat some of the allowance (if necessary) */\\r\\n        if (startingAllowance != uint(-1)) {\\r\\n            transferAllowances[src][spender] = allowanceNew;\\r\\n        }\\r\\n\\r\\n        /* We emit a Transfer event */\\r\\n        emit Transfer(src, dst, tokens);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        // unused function\\r\\n        // comptroller.transferVerify(address(this), src, dst, tokens);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\r\\n     * @param dst The address of the destination account\\r\\n     * @param amount The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transfer(address dst, uint256 amount) external nonReentrant(false) returns (bool) {\\r\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\r\\n     * @param src The address of the source account\\r\\n     * @param dst The address of the destination account\\r\\n     * @param amount The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transferFrom(address src, address dst, uint256 amount) external nonReentrant(false) returns (bool) {\\r\\n        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\r\\n     * @dev This will overwrite the approval amount for `spender`\\r\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\r\\n     * @param spender The address of the account which may transfer tokens\\r\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\r\\n     * @return Whether or not the approval succeeded\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool) {\\r\\n        address src = msg.sender;\\r\\n        transferAllowances[src][spender] = amount;\\r\\n        emit Approval(src, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the current allowance from `owner` for `spender`\\r\\n     * @param owner The address of the account which owns the tokens to be spent\\r\\n     * @param spender The address of the account which may transfer tokens\\r\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256) {\\r\\n        return transferAllowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the token balance of the `owner`\\r\\n     * @param owner The address of the account to query\\r\\n     * @return The number of tokens owned by `owner`\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256) {\\r\\n        return accountTokens[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the underlying balance of the `owner`\\r\\n     * @dev This also accrues interest in a transaction\\r\\n     * @param owner The address of the account to query\\r\\n     * @return The amount of underlying owned by `owner`\\r\\n     */\\r\\n    function balanceOfUnderlying(address owner) external returns (uint) {\\r\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\r\\n        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\\r\\n        require(mErr == MathError.NO_ERROR, \\\"balance could not be calculated\\\");\\r\\n        return balance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get a snapshot of the account\\u0027s balances, and the cached exchange rate\\r\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\r\\n     * @param account Address of the account to snapshot\\r\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\r\\n     */\\r\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {\\r\\n        uint cTokenBalance = accountTokens[account];\\r\\n        uint borrowBalance;\\r\\n        uint exchangeRateMantissa;\\r\\n\\r\\n        MathError mErr;\\r\\n\\r\\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\r\\n        if (mErr != MathError.NO_ERROR) {\\r\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\r\\n        }\\r\\n\\r\\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\r\\n        if (mErr != MathError.NO_ERROR) {\\r\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\r\\n        }\\r\\n\\r\\n        return (uint(Error.NO_ERROR), cTokenBalance, borrowBalance, exchangeRateMantissa);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to simply retrieve block number\\r\\n     *  This exists mainly for inheriting test contracts to stub this result.\\r\\n     */\\r\\n    function getBlockNumber() internal view returns (uint) {\\r\\n        return block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\r\\n     * @return The borrow interest rate per block, scaled by 1e18\\r\\n     */\\r\\n    function borrowRatePerBlock() external view returns (uint) {\\r\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, add_(totalReserves, add_(totalAdminFees, totalFuseFees)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current per-block supply interest rate for this cToken\\r\\n     * @return The supply interest rate per block, scaled by 1e18\\r\\n     */\\r\\n    function supplyRatePerBlock() external view returns (uint) {\\r\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, add_(totalReserves, add_(totalAdminFees, totalFuseFees)), reserveFactorMantissa + fuseFeeMantissa + adminFeeMantissa);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current total borrows plus accrued interest\\r\\n     * @return The total borrows with interest\\r\\n     */\\r\\n    function totalBorrowsCurrent() external nonReentrant(false) returns (uint) {\\r\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\r\\n        return totalBorrows;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrue interest to updated borrowIndex and then calculate account\\u0027s borrow balance using the updated borrowIndex\\r\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\r\\n     * @return The calculated balance\\r\\n     */\\r\\n    function borrowBalanceCurrent(address account) external nonReentrant(false) returns (uint) {\\r\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\r\\n        return borrowBalanceStored(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return the borrow balance of account based on stored data\\r\\n     * @param account The address whose balance should be calculated\\r\\n     * @return The calculated balance\\r\\n     */\\r\\n    function borrowBalanceStored(address account) public view returns (uint) {\\r\\n        (MathError err, uint result) = borrowBalanceStoredInternal(account);\\r\\n        require(err == MathError.NO_ERROR, \\\"borrowBalanceStored: borrowBalanceStoredInternal failed\\\");\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return the borrow balance of account based on stored data\\r\\n     * @param account The address whose balance should be calculated\\r\\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\\r\\n     */\\r\\n    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\\r\\n        /* Note: we do not assert that the market is up to date */\\r\\n        MathError mathErr;\\r\\n        uint principalTimesIndex;\\r\\n        uint result;\\r\\n\\r\\n        /* Get borrowBalance and borrowIndex */\\r\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\r\\n\\r\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\r\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\r\\n         */\\r\\n        if (borrowSnapshot.principal == 0) {\\r\\n            return (MathError.NO_ERROR, 0);\\r\\n        }\\r\\n\\r\\n        /* Calculate new borrow balance using the interest index:\\r\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\r\\n         */\\r\\n        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return (mathErr, 0);\\r\\n        }\\r\\n\\r\\n        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return (mathErr, 0);\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, result);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrue interest then return the up-to-date exchange rate\\r\\n     * @return Calculated exchange rate scaled by 1e18\\r\\n     */\\r\\n    function exchangeRateCurrent() public nonReentrant(false) returns (uint) {\\r\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\r\\n        return exchangeRateStored();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\r\\n     * @dev This function does not accrue interest before calculating the exchange rate\\r\\n     * @return Calculated exchange rate scaled by 1e18\\r\\n     */\\r\\n    function exchangeRateStored() public view returns (uint) {\\r\\n        (MathError err, uint result) = exchangeRateStoredInternal();\\r\\n        require(err == MathError.NO_ERROR, \\\"exchangeRateStored: exchangeRateStoredInternal failed\\\");\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\r\\n     * @dev This function does not accrue interest before calculating the exchange rate\\r\\n     * @return (error code, calculated exchange rate scaled by 1e18)\\r\\n     */\\r\\n    function exchangeRateStoredInternal() internal view returns (MathError, uint) {\\r\\n        uint _totalSupply = totalSupply;\\r\\n        if (_totalSupply == 0) {\\r\\n            /*\\r\\n             * If there are no tokens minted:\\r\\n             *  exchangeRate = initialExchangeRate\\r\\n             */\\r\\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\\r\\n        } else {\\r\\n            /*\\r\\n             * Otherwise:\\r\\n             *  exchangeRate = (totalCash + totalBorrows - (totalReserves + totalFuseFees + totalAdminFees)) / totalSupply\\r\\n             */\\r\\n            uint totalCash = getCashPrior();\\r\\n            uint cashPlusBorrowsMinusReserves;\\r\\n            Exp memory exchangeRate;\\r\\n            MathError mathErr;\\r\\n\\r\\n            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(totalCash, totalBorrows, add_(totalReserves, add_(totalAdminFees, totalFuseFees)));\\r\\n            if (mathErr != MathError.NO_ERROR) {\\r\\n                return (mathErr, 0);\\r\\n            }\\r\\n\\r\\n            (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\\r\\n            if (mathErr != MathError.NO_ERROR) {\\r\\n                return (mathErr, 0);\\r\\n            }\\r\\n\\r\\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get cash balance of this cToken in the underlying asset\\r\\n     * @return The quantity of underlying asset owned by this contract\\r\\n     */\\r\\n    function getCash() external view returns (uint) {\\r\\n        return getCashPrior();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Applies accrued interest to total borrows and reserves\\r\\n     * @dev This calculates interest accrued from the last checkpointed block\\r\\n     *   up to the current block and writes new checkpoint to storage.\\r\\n     */\\r\\n    function accrueInterest() public returns (uint) {\\r\\n        /* Remember the initial block number */\\r\\n        uint currentBlockNumber = getBlockNumber();\\r\\n\\r\\n        /* Short-circuit accumulating 0 interest */\\r\\n        if (accrualBlockNumber == currentBlockNumber) {\\r\\n            return uint(Error.NO_ERROR);\\r\\n        }\\r\\n\\r\\n        /* Read the previous values out of storage */\\r\\n        uint cashPrior = getCashPrior();\\r\\n\\r\\n        /* Calculate the current borrow interest rate */\\r\\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, totalBorrows, add_(totalReserves, add_(totalAdminFees, totalFuseFees)));\\r\\n        require(borrowRateMantissa \\u003c= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\r\\n\\r\\n        /* Calculate the number of blocks elapsed since the last accrual */\\r\\n        (MathError mathErr, uint blockDelta) = subUInt(currentBlockNumber, accrualBlockNumber);\\r\\n        require(mathErr == MathError.NO_ERROR, \\\"could not calculate block delta\\\");\\r\\n\\r\\n        return finishInterestAccrual(currentBlockNumber, cashPrior, borrowRateMantissa, blockDelta);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Split off from `accrueInterest` to avoid \\\"stack too deep\\\" error\\\".\\r\\n     */\\r\\n    function finishInterestAccrual(uint currentBlockNumber, uint cashPrior, uint borrowRateMantissa, uint blockDelta) private returns (uint) {\\r\\n        /*\\r\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\r\\n         *  simpleInterestFactor = borrowRate * blockDelta\\r\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\r\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\r\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\r\\n         *  totalFuseFeesNew = interestAccumulated * fuseFee + totalFuseFees\\r\\n         *  totalAdminFeesNew = interestAccumulated * adminFee + totalAdminFees\\r\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\r\\n         */\\r\\n\\r\\n        Exp memory simpleInterestFactor = mul_(Exp({mantissa: borrowRateMantissa}), blockDelta);\\r\\n        uint interestAccumulated = mul_ScalarTruncate(simpleInterestFactor, totalBorrows);\\r\\n        uint totalBorrowsNew = add_(interestAccumulated, totalBorrows);\\r\\n        uint totalReservesNew = mul_ScalarTruncateAddUInt(Exp({mantissa: reserveFactorMantissa}), interestAccumulated, totalReserves);\\r\\n        uint totalFuseFeesNew = mul_ScalarTruncateAddUInt(Exp({mantissa: fuseFeeMantissa}), interestAccumulated, totalFuseFees);\\r\\n        uint totalAdminFeesNew = mul_ScalarTruncateAddUInt(Exp({mantissa: adminFeeMantissa}), interestAccumulated, totalAdminFees);\\r\\n        uint borrowIndexNew = mul_ScalarTruncateAddUInt(simpleInterestFactor, borrowIndex, borrowIndex);\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS \\u0026 INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /* We write the previously calculated values into storage */\\r\\n        accrualBlockNumber = currentBlockNumber;\\r\\n        borrowIndex = borrowIndexNew;\\r\\n        totalBorrows = totalBorrowsNew;\\r\\n        totalReserves = totalReservesNew;\\r\\n        totalFuseFees = totalFuseFeesNew;\\r\\n        totalAdminFees = totalAdminFeesNew;\\r\\n\\r\\n        /* We emit an AccrueInterest event */\\r\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\r\\n\\r\\n        // Attempt to add interest checkpoint\\r\\n        address(interestRateModel).call(abi.encodeWithSignature(\\\"checkpointInterest(uint256)\\\", borrowRateMantissa));\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param mintAmount The amount of the underlying asset to supply\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\r\\n     */\\r\\n    function mintInternal(uint mintAmount) internal nonReentrant(false) returns (uint, uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\r\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\r\\n        }\\r\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don\\u0027t need to\\r\\n        return mintFresh(msg.sender, mintAmount);\\r\\n    }\\r\\n\\r\\n    struct MintLocalVars {\\r\\n        Error err;\\r\\n        MathError mathErr;\\r\\n        uint exchangeRateMantissa;\\r\\n        uint mintTokens;\\r\\n        uint totalSupplyNew;\\r\\n        uint accountTokensNew;\\r\\n        uint actualMintAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\r\\n     * @dev Assumes interest has already been accrued up to the current block\\r\\n     * @param minter The address of the account which is supplying the assets\\r\\n     * @param mintAmount The amount of the underlying asset to supply\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\r\\n     */\\r\\n    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\\r\\n        /* Fail if mint not allowed */\\r\\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\r\\n        if (allowed != 0) {\\r\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\r\\n        }\\r\\n\\r\\n        /* Verify market\\u0027s block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\r\\n        }\\r\\n\\r\\n        MintLocalVars memory vars;\\r\\n\\r\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\r\\n        }\\r\\n\\r\\n        // Check max supply\\r\\n        // unused function\\r\\n        /* allowed = comptroller.mintWithinLimits(address(this), vars.exchangeRateMantissa, accountTokens[minter], mintAmount);\\r\\n        if (allowed != 0) {\\r\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\r\\n        } */\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS \\u0026 INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\r\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\r\\n         *  `doTransferIn` reverts if anything goes wrong, since we can\\u0027t be sure if\\r\\n         *  side-effects occurred. The function returns the amount actually transferred,\\r\\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\r\\n         *  of cash.\\r\\n         */\\r\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\\r\\n\\r\\n        /*\\r\\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\\r\\n         *  mintTokens = actualMintAmount / exchangeRate\\r\\n         */\\r\\n\\r\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));\\r\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_EXCHANGE_CALCULATION_FAILED\\\");\\r\\n\\r\\n        /*\\r\\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\r\\n         *  totalSupplyNew = totalSupply + mintTokens\\r\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\r\\n         */\\r\\n        vars.totalSupplyNew = add_(totalSupply, vars.mintTokens);\\r\\n\\r\\n        vars.accountTokensNew = add_(accountTokens[minter], vars.mintTokens);\\r\\n\\r\\n        /* We write previously calculated values into storage */\\r\\n        totalSupply = vars.totalSupplyNew;\\r\\n        accountTokens[minter] = vars.accountTokensNew;\\r\\n\\r\\n        /* We emit a Mint event, and a Transfer event */\\r\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\\r\\n        emit Transfer(address(this), minter, vars.mintTokens);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\r\\n\\r\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function redeemInternal(uint redeemTokens) internal nonReentrant(false) returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\r\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n        // redeemFresh emits redeem-specific logs on errors, so we don\\u0027t need to\\r\\n        return redeemFresh(msg.sender, redeemTokens, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant(false) returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\r\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n        // redeemFresh emits redeem-specific logs on errors, so we don\\u0027t need to\\r\\n        return redeemFresh(msg.sender, 0, redeemAmount);\\r\\n    }\\r\\n\\r\\n    struct RedeemLocalVars {\\r\\n        Error err;\\r\\n        MathError mathErr;\\r\\n        uint exchangeRateMantissa;\\r\\n        uint redeemTokens;\\r\\n        uint redeemAmount;\\r\\n        uint totalSupplyNew;\\r\\n        uint accountTokensNew;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice User redeems cTokens in exchange for the underlying asset\\r\\n     * @dev Assumes interest has already been accrued up to the current block\\r\\n     * @param redeemer The address of the account which is redeeming the tokens\\r\\n     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\r\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\\r\\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\r\\n\\r\\n        RedeemLocalVars memory vars;\\r\\n\\r\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\r\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\\r\\n        }\\r\\n\\r\\n        /* If redeemTokensIn \\u003e 0: */\\r\\n        if (redeemTokensIn \\u003e 0) {\\r\\n            /*\\r\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\r\\n             *  redeemTokens = redeemTokensIn\\r\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\r\\n             */\\r\\n            vars.redeemTokens = redeemTokensIn;\\r\\n\\r\\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);\\r\\n            if (vars.mathErr != MathError.NO_ERROR) {\\r\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n            }\\r\\n        } else {\\r\\n            /*\\r\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\r\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\r\\n             *  redeemAmount = redeemAmountIn\\r\\n             */\\r\\n\\r\\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));\\r\\n            if (vars.mathErr != MathError.NO_ERROR) {\\r\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n            }\\r\\n\\r\\n            vars.redeemAmount = redeemAmountIn;\\r\\n        }\\r\\n\\r\\n        /* Fail if redeem not allowed */\\r\\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\\r\\n        if (allowed != 0) {\\r\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\\r\\n        }\\r\\n\\r\\n        /* Verify market\\u0027s block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\\r\\n        }\\r\\n\\r\\n        /*\\r\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\r\\n         *  totalSupplyNew = totalSupply - redeemTokens\\r\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\r\\n         */\\r\\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n        }\\r\\n\\r\\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n        }\\r\\n\\r\\n        /* Fail gracefully if protocol has insufficient cash */\\r\\n        if (getCashPrior() \\u003c vars.redeemAmount) {\\r\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS \\u0026 INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\r\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\r\\n         *  On success, the cToken has redeemAmount less of cash.\\r\\n         *  doTransferOut reverts if anything goes wrong, since we can\\u0027t be sure if side effects occurred.\\r\\n         */\\r\\n        doTransferOut(redeemer, vars.redeemAmount);\\r\\n\\r\\n        /* We write previously calculated values into storage */\\r\\n        totalSupply = vars.totalSupplyNew;\\r\\n        accountTokens[redeemer] = vars.accountTokensNew;\\r\\n\\r\\n        /* We emit a Transfer event, and a Redeem event */\\r\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\r\\n        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sender borrows assets from the protocol to their own address\\r\\n      * @param borrowAmount The amount of the underlying asset to borrow\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function borrowInternal(uint borrowAmount) internal nonReentrant(false) returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\r\\n            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n        // borrowFresh emits borrow-specific logs on errors, so we don\\u0027t need to\\r\\n        return borrowFresh(msg.sender, borrowAmount);\\r\\n    }\\r\\n\\r\\n    struct BorrowLocalVars {\\r\\n        MathError mathErr;\\r\\n        uint accountBorrows;\\r\\n        uint accountBorrowsNew;\\r\\n        uint totalBorrowsNew;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Users borrow assets from the protocol to their own address\\r\\n      * @param borrowAmount The amount of the underlying asset to borrow\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function borrowFresh(address payable borrower, uint borrowAmount) internal returns (uint) {\\r\\n        /* Fail if borrow not allowed */\\r\\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\r\\n        if (allowed != 0) {\\r\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\r\\n        }\\r\\n\\r\\n        /* Verify market\\u0027s block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\\r\\n        }\\r\\n\\r\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\r\\n        uint cashPrior = getCashPrior();\\r\\n\\r\\n        if (cashPrior \\u003c borrowAmount) {\\r\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\\r\\n        }\\r\\n\\r\\n        BorrowLocalVars memory vars;\\r\\n\\r\\n        /*\\r\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\r\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\r\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\r\\n         */\\r\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n        }\\r\\n\\r\\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n        }\\r\\n\\r\\n        // Check min borrow for this user for this asset\\r\\n        allowed = comptroller.borrowWithinLimits(address(this), vars.accountBorrowsNew);\\r\\n        if (allowed != 0) {\\r\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\r\\n        }\\r\\n\\r\\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS \\u0026 INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\r\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\r\\n         *  On success, the cToken borrowAmount less of cash.\\r\\n         *  doTransferOut reverts if anything goes wrong, since we can\\u0027t be sure if side effects occurred.\\r\\n         */\\r\\n        doTransferOut(borrower, borrowAmount);\\r\\n\\r\\n        /* We write the previously calculated values into storage */\\r\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\r\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\r\\n        totalBorrows = vars.totalBorrowsNew;\\r\\n\\r\\n        /* We emit a Borrow event */\\r\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        // unused function\\r\\n        // comptroller.borrowVerify(address(this), borrower, borrowAmount);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender repays their own borrow\\r\\n     * @param repayAmount The amount to repay\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\r\\n     */\\r\\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant(false) returns (uint, uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\r\\n            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\\r\\n        }\\r\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don\\u0027t need to\\r\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender repays a borrow belonging to borrower\\r\\n     * @param borrower the account with the debt being payed off\\r\\n     * @param repayAmount The amount to repay\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\r\\n     */\\r\\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant(false) returns (uint, uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\r\\n            return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\\r\\n        }\\r\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don\\u0027t need to\\r\\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\\r\\n    }\\r\\n\\r\\n    struct RepayBorrowLocalVars {\\r\\n        Error err;\\r\\n        MathError mathErr;\\r\\n        uint repayAmount;\\r\\n        uint borrowerIndex;\\r\\n        uint accountBorrows;\\r\\n        uint accountBorrowsNew;\\r\\n        uint totalBorrowsNew;\\r\\n        uint actualRepayAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\r\\n     * @param payer the account paying off the borrow\\r\\n     * @param borrower the account with the debt being payed off\\r\\n     * @param repayAmount the amount of undelrying tokens being returned\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\r\\n     */\\r\\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\\r\\n        /* Fail if repayBorrow not allowed */\\r\\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\r\\n        if (allowed != 0) {\\r\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);\\r\\n        }\\r\\n\\r\\n        /* Verify market\\u0027s block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\r\\n        }\\r\\n\\r\\n        RepayBorrowLocalVars memory vars;\\r\\n\\r\\n        /* We remember the original borrowerIndex for verification purposes */\\r\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\r\\n\\r\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\r\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr)), 0);\\r\\n        }\\r\\n\\r\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\r\\n        if (repayAmount == uint(-1)) {\\r\\n            vars.repayAmount = vars.accountBorrows;\\r\\n        } else {\\r\\n            vars.repayAmount = repayAmount;\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS \\u0026 INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         * We call doTransferIn for the payer and the repayAmount\\r\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\r\\n         *  On success, the cToken holds an additional repayAmount of cash.\\r\\n         *  doTransferIn reverts if anything goes wrong, since we can\\u0027t be sure if side effects occurred.\\r\\n         *   it returns the amount actually transferred, in case of a fee.\\r\\n         */\\r\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\r\\n\\r\\n        /*\\r\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\r\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\r\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\r\\n         */\\r\\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\\r\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\\\");\\r\\n\\r\\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\\r\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\\\");\\r\\n\\r\\n        /* We write the previously calculated values into storage */\\r\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\r\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\r\\n        totalBorrows = vars.totalBorrowsNew;\\r\\n\\r\\n        /* We emit a RepayBorrow event */\\r\\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        // unused function\\r\\n        // comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\r\\n\\r\\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The sender liquidates the borrowers collateral.\\r\\n     *  The collateral seized is transferred to the liquidator.\\r\\n     * @param borrower The borrower of this cToken to be liquidated\\r\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\r\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\r\\n     */\\r\\n    function liquidateBorrowInternal(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal nonReentrant(false) returns (uint, uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\r\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\\r\\n        }\\r\\n\\r\\n        error = cTokenCollateral.accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\r\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\\r\\n        }\\r\\n\\r\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don\\u0027t need to\\r\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The liquidator liquidates the borrowers collateral.\\r\\n     *  The collateral seized is transferred to the liquidator.\\r\\n     * @param borrower The borrower of this cToken to be liquidated\\r\\n     * @param liquidator The address repaying the borrow and seizing collateral\\r\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\r\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\r\\n     */\\r\\n    function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal returns (uint, uint) {\\r\\n        /* Fail if liquidate not allowed */\\r\\n        uint allowed = comptroller.liquidateBorrowAllowed(address(this), address(cTokenCollateral), liquidator, borrower, repayAmount);\\r\\n        if (allowed != 0) {\\r\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\\r\\n        }\\r\\n\\r\\n        /* Verify market\\u0027s block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\r\\n        }\\r\\n\\r\\n        /* Verify cTokenCollateral market\\u0027s block number equals current block number */\\r\\n        if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\r\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\r\\n        }\\r\\n\\r\\n        /* Fail if borrower = liquidator */\\r\\n        if (borrower == liquidator) {\\r\\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\r\\n        }\\r\\n\\r\\n        /* Fail if repayAmount = 0 */\\r\\n        if (repayAmount == 0) {\\r\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\r\\n        }\\r\\n\\r\\n        /* Fail if repayAmount = -1 */\\r\\n        if (repayAmount == uint(-1)) {\\r\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\r\\n        }\\r\\n\\r\\n\\r\\n        /* Fail if repayBorrow fails */\\r\\n        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\r\\n        if (repayBorrowError != uint(Error.NO_ERROR)) {\\r\\n            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS \\u0026 INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /* We calculate the number of collateral tokens that will be seized */\\r\\n        (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), address(cTokenCollateral), actualRepayAmount);\\r\\n        require(amountSeizeError == uint(Error.NO_ERROR), \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\r\\n\\r\\n        /* Revert if borrower collateral token balance \\u003c seizeTokens */\\r\\n        require(cTokenCollateral.balanceOf(borrower) \\u003e= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\r\\n\\r\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\r\\n        uint seizeError;\\r\\n        if (address(cTokenCollateral) == address(this)) {\\r\\n            seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\r\\n        } else {\\r\\n            seizeError = cTokenCollateral.seize(liquidator, borrower, seizeTokens);\\r\\n        }\\r\\n\\r\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\r\\n        require(seizeError == uint(Error.NO_ERROR), \\\"token seizure failed\\\");\\r\\n\\r\\n        /* We emit a LiquidateBorrow event */\\r\\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        // unused function\\r\\n        // comptroller.liquidateBorrowVerify(address(this), address(cTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);\\r\\n\\r\\n        return (uint(Error.NO_ERROR), actualRepayAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\r\\n     * @dev Will fail unless called by another cToken during the process of liquidation.\\r\\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\r\\n     * @param liquidator The account receiving seized collateral\\r\\n     * @param borrower The account having collateral seized\\r\\n     * @param seizeTokens The number of cTokens to seize\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function seize(address liquidator, address borrower, uint seizeTokens) external nonReentrant(true) returns (uint) {\\r\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\r\\n    }\\r\\n\\r\\n    struct SeizeInternalLocalVars {\\r\\n        MathError mathErr;\\r\\n        uint borrowerTokensNew;\\r\\n        uint liquidatorTokensNew;\\r\\n        uint liquidatorSeizeTokens;\\r\\n        uint protocolSeizeTokens;\\r\\n        uint protocolSeizeAmount;\\r\\n        uint exchangeRateMantissa;\\r\\n        uint totalReservesNew;\\r\\n        uint totalSupplyNew;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\r\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\r\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\r\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\r\\n     * @param liquidator The account receiving seized collateral\\r\\n     * @param borrower The account having collateral seized\\r\\n     * @param seizeTokens The number of cTokens to seize\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint) {\\r\\n        /* Fail if seize not allowed */\\r\\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\r\\n        if (allowed != 0) {\\r\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\\r\\n        }\\r\\n\\r\\n        /* Fail if borrower = liquidator */\\r\\n        if (borrower == liquidator) {\\r\\n            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\\r\\n        }\\r\\n\\r\\n        SeizeInternalLocalVars memory vars;\\r\\n\\r\\n        /*\\r\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\r\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\r\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\r\\n         */\\r\\n        (vars.mathErr, vars.borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(vars.mathErr));\\r\\n        }\\r\\n\\r\\n        vars.protocolSeizeTokens = mul_(seizeTokens, Exp({mantissa: protocolSeizeShareMantissa}));\\r\\n        vars.liquidatorSeizeTokens = sub_(seizeTokens, vars.protocolSeizeTokens);\\r\\n\\r\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\r\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"exchange rate math error\\\");\\r\\n\\r\\n        vars.protocolSeizeAmount = mul_ScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), vars.protocolSeizeTokens);\\r\\n\\r\\n        vars.totalReservesNew = add_(totalReserves, vars.protocolSeizeAmount);\\r\\n        vars.totalSupplyNew = sub_(totalSupply, vars.protocolSeizeTokens);\\r\\n\\r\\n        (vars.mathErr, vars.liquidatorTokensNew) = addUInt(accountTokens[liquidator], vars.liquidatorSeizeTokens);\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(vars.mathErr));\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS \\u0026 INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /* We write the previously calculated values into storage */\\r\\n        totalReserves = vars.totalReservesNew;\\r\\n        totalSupply = vars.totalSupplyNew;\\r\\n        accountTokens[borrower] = vars.borrowerTokensNew;\\r\\n        accountTokens[liquidator] = vars.liquidatorTokensNew;\\r\\n\\r\\n        /* Emit a Transfer event */\\r\\n        emit Transfer(borrower, liquidator, vars.liquidatorSeizeTokens);\\r\\n        emit Transfer(borrower, address(this), vars.protocolSeizeTokens);\\r\\n        emit ReservesAdded(address(this), vars.protocolSeizeAmount, vars.totalReservesNew);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        // unused function\\r\\n        // comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    /**\\r\\n      * @notice Sets a new comptroller for the market\\r\\n      * @dev Internal function to set a new comptroller\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setComptroller(ComptrollerInterface newComptroller) internal returns (uint) {\\r\\n        ComptrollerInterface oldComptroller = comptroller;\\r\\n        // Ensure invoke comptroller.isComptroller() returns true\\r\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\r\\n\\r\\n        // Set market\\u0027s comptroller to newComptroller\\r\\n        comptroller = newComptroller;\\r\\n\\r\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\r\\n        emit NewComptroller(oldComptroller, newComptroller);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice accrues interest and sets a new admin fee for the protocol using _setAdminFeeFresh\\r\\n      * @dev Admin function to accrue interest and set a new admin fee\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setAdminFee(uint newAdminFeeMantissa) external nonReentrant(false) returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted admin fee change failed.\\r\\n            return fail(Error(error), FailureInfo.SET_ADMIN_FEE_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n        // _setAdminFeeFresh emits reserve-factor-specific logs on errors, so we don\\u0027t need to.\\r\\n        return _setAdminFeeFresh(newAdminFeeMantissa);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sets a new admin fee for the protocol (*requires fresh interest accrual)\\r\\n      * @dev Admin function to set a new admin fee\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setAdminFeeFresh(uint newAdminFeeMantissa) internal returns (uint) {\\r\\n        // Verify market\\u0027s block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_ADMIN_FEE_FRESH_CHECK);\\r\\n        }\\r\\n\\r\\n        // Sanitize newAdminFeeMantissa\\r\\n        if (newAdminFeeMantissa == uint(-1)) newAdminFeeMantissa = adminFeeMantissa;\\r\\n\\r\\n        // Get latest Fuse fee\\r\\n        uint newFuseFeeMantissa = getPendingFuseFeeFromAdmin();\\r\\n\\r\\n        // Check reserveFactorMantissa + newAdminFeeMantissa + newFuseFeeMantissa ≤ reserveFactorPlusFeesMaxMantissa\\r\\n        if (add_(add_(reserveFactorMantissa, newAdminFeeMantissa), newFuseFeeMantissa) \\u003e reserveFactorPlusFeesMaxMantissa) {\\r\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_ADMIN_FEE_BOUNDS_CHECK);\\r\\n        }\\r\\n\\r\\n        // If setting admin fee\\r\\n        if (adminFeeMantissa != newAdminFeeMantissa) {\\r\\n            // Check caller is admin\\r\\n            if (!hasAdminRights()) {\\r\\n                return fail(Error.UNAUTHORIZED, FailureInfo.SET_ADMIN_FEE_ADMIN_CHECK);\\r\\n            }\\r\\n\\r\\n            // Set admin fee\\r\\n            uint oldAdminFeeMantissa = adminFeeMantissa;\\r\\n            adminFeeMantissa = newAdminFeeMantissa;\\r\\n\\r\\n            // Emit event\\r\\n            emit NewAdminFee(oldAdminFeeMantissa, newAdminFeeMantissa);\\r\\n        }\\r\\n\\r\\n        // If setting Fuse fee\\r\\n        if (fuseFeeMantissa != newFuseFeeMantissa) {\\r\\n            // Set Fuse fee\\r\\n            uint oldFuseFeeMantissa = fuseFeeMantissa;\\r\\n            fuseFeeMantissa = newFuseFeeMantissa;\\r\\n\\r\\n            // Emit event\\r\\n            emit NewFuseFee(oldFuseFeeMantissa, newFuseFeeMantissa);\\r\\n        }\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\r\\n      * @dev Admin function to accrue interest and set a new reserve factor\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setReserveFactor(uint newReserveFactorMantissa) external nonReentrant(false) returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\r\\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don\\u0027t need to.\\r\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\r\\n      * @dev Admin function to set a new reserve factor\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\\r\\n        // Check caller is admin\\r\\n        if (!hasAdminRights()) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\\r\\n        }\\r\\n\\r\\n        // Verify market\\u0027s block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\r\\n        }\\r\\n\\r\\n        // Check newReserveFactor ≤ maxReserveFactor\\r\\n        if (add_(add_(newReserveFactorMantissa, adminFeeMantissa), fuseFeeMantissa) \\u003e reserveFactorPlusFeesMaxMantissa) {\\r\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\r\\n        }\\r\\n\\r\\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\\r\\n        reserveFactorMantissa = newReserveFactorMantissa;\\r\\n\\r\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\r\\n     * @param reduceAmount Amount of reduction to reserves\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _reduceReserves(uint reduceAmount) external nonReentrant(false) returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\r\\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don\\u0027t need to.\\r\\n        return _reduceReservesFresh(reduceAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reduces reserves by transferring to admin\\r\\n     * @dev Requires fresh interest accrual\\r\\n     * @param reduceAmount Amount of reduction to reserves\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\\r\\n        // totalReserves - reduceAmount\\r\\n        uint totalReservesNew;\\r\\n\\r\\n        // Check caller is admin\\r\\n        if (!hasAdminRights()) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\\r\\n        }\\r\\n\\r\\n        // We fail gracefully unless market\\u0027s block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\r\\n        }\\r\\n\\r\\n        // Fail gracefully if protocol has insufficient underlying cash\\r\\n        if (getCashPrior() \\u003c reduceAmount) {\\r\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\r\\n        }\\r\\n\\r\\n        // Check reduceAmount ≤ reserves[n] (totalReserves)\\r\\n        if (reduceAmount \\u003e totalReserves) {\\r\\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS \\u0026 INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        // We checked reduceAmount \\u003c= totalReserves above, so this should never revert.\\r\\n        totalReservesNew = sub_(totalReserves, reduceAmount);\\r\\n\\r\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\r\\n        totalReserves = totalReservesNew;\\r\\n\\r\\n        // doTransferOut reverts if anything goes wrong, since we can\\u0027t be sure if side effects occurred.\\r\\n        doTransferOut(msg.sender, reduceAmount);\\r\\n\\r\\n        emit ReservesReduced(msg.sender, reduceAmount, totalReservesNew);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrues interest and reduces Fuse fees by transferring to Fuse\\r\\n     * @param withdrawAmount Amount of fees to withdraw\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _withdrawFuseFees(uint withdrawAmount) external nonReentrant(false) returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted Fuse fee withdrawal failed.\\r\\n            return fail(Error(error), FailureInfo.WITHDRAW_FUSE_FEES_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n        // _withdrawFuseFeesFresh emits reserve-reduction-specific logs on errors, so we don\\u0027t need to.\\r\\n        return _withdrawFuseFeesFresh(withdrawAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reduces Fuse fees by transferring to Fuse\\r\\n     * @dev Requires fresh interest accrual\\r\\n     * @param withdrawAmount Amount of fees to withdraw\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _withdrawFuseFeesFresh(uint withdrawAmount) internal returns (uint) {\\r\\n        // totalFuseFees - reduceAmount\\r\\n        uint totalFuseFeesNew;\\r\\n\\r\\n        // We fail gracefully unless market\\u0027s block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.WITHDRAW_FUSE_FEES_FRESH_CHECK);\\r\\n        }\\r\\n\\r\\n        // Fail gracefully if protocol has insufficient underlying cash\\r\\n        if (getCashPrior() \\u003c withdrawAmount) {\\r\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.WITHDRAW_FUSE_FEES_CASH_NOT_AVAILABLE);\\r\\n        }\\r\\n\\r\\n        // Check withdrawAmount ≤ fuseFees[n] (totalFuseFees)\\r\\n        if (withdrawAmount \\u003e totalFuseFees) {\\r\\n            return fail(Error.BAD_INPUT, FailureInfo.WITHDRAW_FUSE_FEES_VALIDATION);\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS \\u0026 INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        // We checked withdrawAmount \\u003c= totalFuseFees above, so this should never revert.\\r\\n        totalFuseFeesNew = sub_(totalFuseFees, withdrawAmount);\\r\\n\\r\\n        // Store fuseFees[n+1] = fuseFees[n] - withdrawAmount\\r\\n        totalFuseFees = totalFuseFeesNew;\\r\\n\\r\\n        // doTransferOut reverts if anything goes wrong, since we can\\u0027t be sure if side effects occurred.\\r\\n        doTransferOut(address(fuseAdmin), withdrawAmount);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrues interest and reduces admin fees by transferring to admin\\r\\n     * @param withdrawAmount Amount of fees to withdraw\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _withdrawAdminFees(uint withdrawAmount) external nonReentrant(false) returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted admin fee withdrawal failed.\\r\\n            return fail(Error(error), FailureInfo.WITHDRAW_ADMIN_FEES_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n        // _withdrawAdminFeesFresh emits reserve-reduction-specific logs on errors, so we don\\u0027t need to.\\r\\n        return _withdrawAdminFeesFresh(withdrawAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reduces admin fees by transferring to admin\\r\\n     * @dev Requires fresh interest accrual\\r\\n     * @param withdrawAmount Amount of fees to withdraw\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _withdrawAdminFeesFresh(uint withdrawAmount) internal returns (uint) {\\r\\n        // totalAdminFees - reduceAmount\\r\\n        uint totalAdminFeesNew;\\r\\n\\r\\n        // We fail gracefully unless market\\u0027s block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.WITHDRAW_ADMIN_FEES_FRESH_CHECK);\\r\\n        }\\r\\n\\r\\n        // Fail gracefully if protocol has insufficient underlying cash\\r\\n        if (getCashPrior() \\u003c withdrawAmount) {\\r\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.WITHDRAW_ADMIN_FEES_CASH_NOT_AVAILABLE);\\r\\n        }\\r\\n\\r\\n        // Check withdrawAmount ≤ adminFees[n] (totalAdminFees)\\r\\n        if (withdrawAmount \\u003e totalAdminFees) {\\r\\n            return fail(Error.BAD_INPUT, FailureInfo.WITHDRAW_ADMIN_FEES_VALIDATION);\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS \\u0026 INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        // We checked withdrawAmount \\u003c= totalAdminFees above, so this should never revert.\\r\\n        totalAdminFeesNew = sub_(totalAdminFees, withdrawAmount);\\r\\n\\r\\n        // Store adminFees[n+1] = adminFees[n] - withdrawAmount\\r\\n        totalAdminFees = totalAdminFeesNew;\\r\\n\\r\\n        // doTransferOut reverts if anything goes wrong, since we can\\u0027t be sure if side effects occurred.\\r\\n        doTransferOut(address(uint160(UnitrollerAdminStorage(address(comptroller)).admin())), withdrawAmount);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\r\\n     * @dev Admin function to accrue interest and update the interest rate model\\r\\n     * @param newInterestRateModel the new interest rate model to use\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\\r\\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don\\u0027t need to.\\r\\n        return _setInterestRateModelFresh(newInterestRateModel);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\r\\n     * @dev Admin function to update the interest rate model\\r\\n     * @param newInterestRateModel the new interest rate model to use\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\\r\\n        // Used to store old model for use in the event that is emitted on success\\r\\n        InterestRateModel oldInterestRateModel;\\r\\n\\r\\n        // Check caller is admin\\r\\n        if (!hasAdminRights()) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        // We fail gracefully unless market\\u0027s block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\r\\n        }\\r\\n\\r\\n        // Track the market\\u0027s current interest rate model\\r\\n        oldInterestRateModel = interestRateModel;\\r\\n\\r\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\r\\n        require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\r\\n\\r\\n        // Set the interest rate model to newInterestRateModel\\r\\n        interestRateModel = newInterestRateModel;\\r\\n\\r\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\r\\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\r\\n\\r\\n        // Attempt to reset interest checkpoints on old IRM\\r\\n        if (address(oldInterestRateModel) != address(0)) address(oldInterestRateModel).call(abi.encodeWithSignature(\\\"resetInterestCheckpoints()\\\"));\\r\\n\\r\\n        // Attempt to add first interest checkpoint on new IRM\\r\\n        address(newInterestRateModel).call(abi.encodeWithSignature(\\\"checkpointInterest()\\\"));\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice updates the cToken ERC20 name and symbol\\r\\n     * @dev Admin function to update the cToken ERC20 name and symbol\\r\\n     * @param _name the new ERC20 token name to use\\r\\n     * @param _symbol the new ERC20 token symbol to use\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setNameAndSymbol(string calldata _name, string calldata _symbol) external {\\r\\n        // Check caller is admin\\r\\n        require(hasAdminRights(), \\\"caller not admin\\\");\\r\\n\\r\\n        // Set ERC20 name and symbol\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n    }\\r\\n\\r\\n    /*** Safe Token ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Gets balance of this contract in terms of the underlying\\r\\n     * @dev This excludes the value of the current message, if any\\r\\n     * @return The quantity of underlying owned by this contract\\r\\n     */\\r\\n    function getCashPrior() internal view returns (uint);\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\r\\n     *  This may revert due to insufficient balance or insufficient allowance.\\r\\n     */\\r\\n    function doTransferIn(address from, uint amount) internal returns (uint);\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\\r\\n     *  If caller has not called checked protocol\\u0027s balance, may revert due to insufficient cash held in the contract.\\r\\n     *  If caller has checked protocol\\u0027s balance, and verified it is \\u003e= amount, this should not revert in normal conditions.\\r\\n     */\\r\\n    function doTransferOut(address payable to, uint amount) internal;\\r\\n\\r\\n\\r\\n    /*** Reentrancy Guard ***/\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     */\\r\\n    modifier nonReentrant(bool localOnly) {\\r\\n        _beforeNonReentrant(localOnly);\\r\\n        _;\\r\\n        _afterNonReentrant(localOnly);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Split off from `nonReentrant` to keep contract below the 24 KB size limit.\\r\\n     * Saves space because function modifier code is \\\"inlined\\\" into every function with the modifier).\\r\\n     * In this specific case, the optimization saves around 1500 bytes of that valuable 24 KB limit.\\r\\n     */\\r\\n    function _beforeNonReentrant(bool localOnly) private {\\r\\n        require(_notEntered, \\\"re-entered\\\");\\r\\n        if (!localOnly) comptroller._beforeNonReentrant();\\r\\n        _notEntered = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Split off from `nonReentrant` to keep contract below the 24 KB size limit.\\r\\n     * Saves space because function modifier code is \\\"inlined\\\" into every function with the modifier).\\r\\n     * In this specific case, the optimization saves around 150 bytes of that valuable 24 KB limit.\\r\\n     */\\r\\n    function _afterNonReentrant(bool localOnly) private {\\r\\n        _notEntered = true; // get a gas-refund post-Istanbul\\r\\n        if (!localOnly) comptroller._afterNonReentrant();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     * @param errorMessage The revert string to return on failure.\\r\\n     */\\r\\n    function _functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.call(data);\\r\\n\\r\\n        if (!success) {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return returndata;\\r\\n    }\\r\\n}\\r\\n\"},\"CTokenInterfaces.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./IFuseFeeDistributor.sol\\\";\\r\\nimport \\\"./ComptrollerStorage.sol\\\";\\r\\nimport \\\"./ComptrollerInterface.sol\\\";\\r\\nimport \\\"./InterestRateModel.sol\\\";\\r\\n\\r\\ncontract CTokenAdminStorage {\\r\\n    /**\\r\\n     * @notice Administrator for Fuse\\r\\n     */\\r\\n    IFuseFeeDistributor internal constant fuseAdmin = IFuseFeeDistributor(0xa731585ab05fC9f83555cf9Bff8F58ee94e18F85);\\r\\n\\r\\n    /**\\r\\n     * @dev LEGACY USE ONLY: Administrator for this contract\\r\\n     */\\r\\n    address payable internal __admin;\\r\\n\\r\\n    /**\\r\\n     * @dev LEGACY USE ONLY: Whether or not the Fuse admin has admin rights\\r\\n     */\\r\\n    bool internal __fuseAdminHasRights;\\r\\n\\r\\n    /**\\r\\n     * @dev LEGACY USE ONLY: Whether or not the admin has admin rights\\r\\n     */\\r\\n    bool internal __adminHasRights;\\r\\n}\\r\\n\\r\\ncontract CTokenStorage is CTokenAdminStorage {\\r\\n    /**\\r\\n     * @dev Guard variable for re-entrancy checks\\r\\n     */\\r\\n    bool internal _notEntered;\\r\\n\\r\\n    /**\\r\\n     * @notice EIP-20 token name for this token\\r\\n     */\\r\\n    string public name;\\r\\n\\r\\n    /**\\r\\n     * @notice EIP-20 token symbol for this token\\r\\n     */\\r\\n    string public symbol;\\r\\n\\r\\n    /**\\r\\n     * @notice EIP-20 token decimals for this token\\r\\n     */\\r\\n    uint8 public decimals;\\r\\n\\r\\n    /**\\r\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\r\\n     */\\r\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\r\\n\\r\\n    /**\\r\\n     * @notice Maximum fraction of interest that can be set aside for reserves + fees\\r\\n     */\\r\\n    uint internal constant reserveFactorPlusFeesMaxMantissa = 1e18;\\r\\n\\r\\n    /**\\r\\n     * @notice LEGACY USE ONLY: Pending administrator for this contract\\r\\n     */\\r\\n    address payable private __pendingAdmin;\\r\\n\\r\\n    /**\\r\\n     * @notice Contract which oversees inter-cToken operations\\r\\n     */\\r\\n    ComptrollerInterface public comptroller;\\r\\n\\r\\n    /**\\r\\n     * @notice Model which tells what the current interest rate should be\\r\\n     */\\r\\n    InterestRateModel public interestRateModel;\\r\\n\\r\\n    /**\\r\\n     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\r\\n     */\\r\\n    uint internal initialExchangeRateMantissa;\\r\\n\\r\\n    /**\\r\\n     * @notice Fraction of interest currently set aside for admin fees\\r\\n     */\\r\\n    uint public adminFeeMantissa;\\r\\n\\r\\n    /**\\r\\n     * @notice Fraction of interest currently set aside for Fuse fees\\r\\n     */\\r\\n    uint public fuseFeeMantissa;\\r\\n\\r\\n    /**\\r\\n     * @notice Fraction of interest currently set aside for reserves\\r\\n     */\\r\\n    uint public reserveFactorMantissa;\\r\\n\\r\\n    /**\\r\\n     * @notice Block number that interest was last accrued at\\r\\n     */\\r\\n    uint public accrualBlockNumber;\\r\\n\\r\\n    /**\\r\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\r\\n     */\\r\\n    uint public borrowIndex;\\r\\n\\r\\n    /**\\r\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\r\\n     */\\r\\n    uint public totalBorrows;\\r\\n\\r\\n    /**\\r\\n     * @notice Total amount of reserves of the underlying held in this market\\r\\n     */\\r\\n    uint public totalReserves;\\r\\n\\r\\n    /**\\r\\n     * @notice Total amount of admin fees of the underlying held in this market\\r\\n     */\\r\\n    uint public totalAdminFees;\\r\\n\\r\\n    /**\\r\\n     * @notice Total amount of Fuse fees of the underlying held in this market\\r\\n     */\\r\\n    uint public totalFuseFees;\\r\\n\\r\\n    /**\\r\\n     * @notice Total number of tokens in circulation\\r\\n     */\\r\\n    uint public totalSupply;\\r\\n\\r\\n    /**\\r\\n     * @notice Official record of token balances for each account\\r\\n     */\\r\\n    mapping (address =\\u003e uint) internal accountTokens;\\r\\n\\r\\n    /**\\r\\n     * @notice Approved token transfer amounts on behalf of others\\r\\n     */\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint)) internal transferAllowances;\\r\\n\\r\\n    /**\\r\\n     * @notice Container for borrow balance information\\r\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\r\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\r\\n     */\\r\\n    struct BorrowSnapshot {\\r\\n        uint principal;\\r\\n        uint interestIndex;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Mapping of account addresses to outstanding borrow balances\\r\\n     */\\r\\n    mapping(address =\\u003e BorrowSnapshot) internal accountBorrows;\\r\\n\\r\\n    /**\\r\\n     * @notice Share of seized collateral that is added to reserves\\r\\n     */\\r\\n    uint public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\\r\\n}\\r\\n\\r\\ncontract CTokenInterface is CTokenStorage {\\r\\n    /**\\r\\n     * @notice Indicator that this is a CToken contract (for inspection)\\r\\n     */\\r\\n    bool public constant isCToken = true;\\r\\n\\r\\n    /**\\r\\n     * @notice Indicator that this is or is not a CEther contract (for inspection)\\r\\n     */\\r\\n    bool public constant isCEther = false;\\r\\n\\r\\n    /*** Market Events ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when interest is accrued\\r\\n     */\\r\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when tokens are minted\\r\\n     */\\r\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when tokens are redeemed\\r\\n     */\\r\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when underlying is borrowed\\r\\n     */\\r\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when a borrow is repaid\\r\\n     */\\r\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when a borrow is liquidated\\r\\n     */\\r\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\\r\\n\\r\\n\\r\\n    /*** Admin Events ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when comptroller is changed\\r\\n     */\\r\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when interestRateModel is changed\\r\\n     */\\r\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when the reserve factor is changed\\r\\n     */\\r\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when the reserves are added\\r\\n     */\\r\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when the reserves are reduced\\r\\n     */\\r\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when the admin fee is changed\\r\\n     */\\r\\n    event NewAdminFee(uint oldAdminFeeMantissa, uint newAdminFeeMantissa);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when the Fuse fee is changed\\r\\n     */\\r\\n    event NewFuseFee(uint oldFuseFeeMantissa, uint newFuseFeeMantissa);\\r\\n\\r\\n    /**\\r\\n     * @notice EIP20 Transfer event\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint amount);\\r\\n\\r\\n    /**\\r\\n     * @notice EIP20 Approval event\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\r\\n\\r\\n    /**\\r\\n     * @notice Failure event\\r\\n     */\\r\\n    event Failure(uint error, uint info, uint detail);\\r\\n\\r\\n\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    function transfer(address dst, uint amount) external returns (bool);\\r\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function balanceOfUnderlying(address owner) external returns (uint);\\r\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\r\\n    function borrowRatePerBlock() external view returns (uint);\\r\\n    function supplyRatePerBlock() external view returns (uint);\\r\\n    function totalBorrowsCurrent() external returns (uint);\\r\\n    function borrowBalanceCurrent(address account) external returns (uint);\\r\\n    function borrowBalanceStored(address account) public view returns (uint);\\r\\n    function exchangeRateCurrent() public returns (uint);\\r\\n    function exchangeRateStored() public view returns (uint);\\r\\n    function getCash() external view returns (uint);\\r\\n    function accrueInterest() public returns (uint);\\r\\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\\r\\n\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\\r\\n    function _reduceReserves(uint reduceAmount) external returns (uint);\\r\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\\r\\n}\\r\\n\\r\\ncontract CErc20Storage {\\r\\n    /**\\r\\n     * @notice Underlying asset for this CToken\\r\\n     */\\r\\n    address public underlying;\\r\\n}\\r\\n\\r\\ncontract CErc20Interface is CErc20Storage {\\r\\n\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    function mint(uint mintAmount) external returns (uint);\\r\\n    function redeem(uint redeemTokens) external returns (uint);\\r\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\r\\n    function borrow(uint borrowAmount) external returns (uint);\\r\\n    function repayBorrow(uint repayAmount) external returns (uint);\\r\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\r\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint);\\r\\n\\r\\n}\\r\\n\\r\\ncontract CEtherInterface is CErc20Storage {\\r\\n    /**\\r\\n     * @notice Indicator that this is a CEther contract (for inspection)\\r\\n     */\\r\\n    bool public constant isCEther = true;\\r\\n}\\r\\n\\r\\ncontract CDelegationStorage {\\r\\n    /**\\r\\n     * @notice Implementation address for this contract\\r\\n     */\\r\\n    address public implementation;\\r\\n}\\r\\n\\r\\ncontract CDelegateInterface is CDelegationStorage {\\r\\n    /**\\r\\n     * @notice Emitted when implementation is changed\\r\\n     */\\r\\n    event NewImplementation(address oldImplementation, address newImplementation);\\r\\n\\r\\n    /**\\r\\n     * @notice Called by the admin to update the implementation of the delegator\\r\\n     * @param implementation_ The address of the new implementation for delegation\\r\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\r\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\r\\n     */\\r\\n    function _setImplementationSafe(address implementation_, bool allowResign, bytes calldata becomeImplementationData) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\r\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\r\\n     * @param data The encoded bytes data for any initialization\\r\\n     */\\r\\n    function _becomeImplementation(bytes calldata data) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Function called before all delegator functions\\r\\n     * @dev Checks comptroller.autoImplementation and upgrades the implementation if necessary\\r\\n     */\\r\\n    function _prepare() external payable;\\r\\n}\\r\\n\"},\"EIP20Interface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n      * @notice Get the total number of tokens in circulation\\n      * @return The supply of tokens\\n      */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return Whether or not the transfer succeeded\\n      */\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return Whether or not the transfer succeeded\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved (-1 means infinite)\\n      * @return Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return The number of tokens allowed to be spent (-1 means infinite)\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\"},\"EIP20NonStandardInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved\\n      * @return Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return The number of tokens allowed to be spent\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\"},\"ErrorReporter.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\ncontract ComptrollerErrorReporter {\\r\\n    enum Error {\\r\\n        NO_ERROR,\\r\\n        UNAUTHORIZED,\\r\\n        COMPTROLLER_MISMATCH,\\r\\n        INSUFFICIENT_SHORTFALL,\\r\\n        INSUFFICIENT_LIQUIDITY,\\r\\n        INVALID_CLOSE_FACTOR,\\r\\n        INVALID_COLLATERAL_FACTOR,\\r\\n        INVALID_LIQUIDATION_INCENTIVE,\\r\\n        MARKET_NOT_ENTERED, // no longer possible\\r\\n        MARKET_NOT_LISTED,\\r\\n        MARKET_ALREADY_LISTED,\\r\\n        MATH_ERROR,\\r\\n        NONZERO_BORROW_BALANCE,\\r\\n        PRICE_ERROR,\\r\\n        REJECTION,\\r\\n        SNAPSHOT_ERROR,\\r\\n        TOO_MANY_ASSETS,\\r\\n        TOO_MUCH_REPAY,\\r\\n        SUPPLIER_NOT_WHITELISTED,\\r\\n        BORROW_BELOW_MIN,\\r\\n        SUPPLY_ABOVE_MAX,\\r\\n        NONZERO_TOTAL_SUPPLY\\r\\n    }\\r\\n\\r\\n    enum FailureInfo {\\r\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\r\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\r\\n        ADD_REWARDS_DISTRIBUTOR_OWNER_CHECK,\\r\\n        EXIT_MARKET_BALANCE_OWED,\\r\\n        EXIT_MARKET_REJECTION,\\r\\n        TOGGLE_ADMIN_RIGHTS_OWNER_CHECK,\\r\\n        TOGGLE_AUTO_IMPLEMENTATIONS_ENABLED_OWNER_CHECK,\\r\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\r\\n        SET_CLOSE_FACTOR_VALIDATION,\\r\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\r\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\r\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\r\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\r\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\r\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\r\\n        SET_MAX_ASSETS_OWNER_CHECK,\\r\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\r\\n        SET_PENDING_IMPLEMENTATION_CONTRACT_CHECK,\\r\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\r\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\r\\n        SET_WHITELIST_ENFORCEMENT_OWNER_CHECK,\\r\\n        SET_WHITELIST_STATUS_OWNER_CHECK,\\r\\n        SUPPORT_MARKET_EXISTS,\\r\\n        SUPPORT_MARKET_OWNER_CHECK,\\r\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK,\\r\\n        UNSUPPORT_MARKET_OWNER_CHECK,\\r\\n        UNSUPPORT_MARKET_DOES_NOT_EXIST,\\r\\n        UNSUPPORT_MARKET_IN_USE\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\r\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\r\\n      **/\\r\\n    event Failure(uint error, uint info, uint detail);\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\r\\n      */\\r\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), 0);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\r\\n      */\\r\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), opaqueError);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract TokenErrorReporter {\\r\\n    enum Error {\\r\\n        NO_ERROR,\\r\\n        UNAUTHORIZED,\\r\\n        BAD_INPUT,\\r\\n        COMPTROLLER_REJECTION,\\r\\n        COMPTROLLER_CALCULATION_ERROR,\\r\\n        INTEREST_RATE_MODEL_ERROR,\\r\\n        INVALID_ACCOUNT_PAIR,\\r\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\r\\n        INVALID_COLLATERAL_FACTOR,\\r\\n        MATH_ERROR,\\r\\n        MARKET_NOT_FRESH,\\r\\n        MARKET_NOT_LISTED,\\r\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\r\\n        TOKEN_INSUFFICIENT_BALANCE,\\r\\n        TOKEN_INSUFFICIENT_CASH,\\r\\n        TOKEN_TRANSFER_IN_FAILED,\\r\\n        TOKEN_TRANSFER_OUT_FAILED,\\r\\n        UTILIZATION_ABOVE_MAX\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\r\\n     *       This is because FailureInfo grows significantly faster, and\\r\\n     *       the order of Error has some meaning, while the order of FailureInfo\\r\\n     *       is entirely arbitrary.\\r\\n     */\\r\\n    enum FailureInfo {\\r\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\r\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_NEW_TOTAL_FUSE_FEES_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_NEW_TOTAL_ADMIN_FEES_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\r\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\r\\n        BORROW_ACCRUE_INTEREST_FAILED,\\r\\n        BORROW_CASH_NOT_AVAILABLE,\\r\\n        BORROW_FRESHNESS_CHECK,\\r\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\r\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\r\\n        BORROW_MARKET_NOT_LISTED,\\r\\n        BORROW_COMPTROLLER_REJECTION,\\r\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\r\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\r\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\r\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\r\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\r\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\r\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\r\\n        LIQUIDATE_FRESHNESS_CHECK,\\r\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\r\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\r\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\r\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\r\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\r\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\r\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\r\\n        MINT_ACCRUE_INTEREST_FAILED,\\r\\n        MINT_COMPTROLLER_REJECTION,\\r\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\r\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\r\\n        MINT_FRESHNESS_CHECK,\\r\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\r\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\r\\n        MINT_TRANSFER_IN_FAILED,\\r\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\r\\n        NEW_UTILIZATION_RATE_ABOVE_MAX,\\r\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\r\\n        REDEEM_COMPTROLLER_REJECTION,\\r\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\r\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\r\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\r\\n        REDEEM_FRESHNESS_CHECK,\\r\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\r\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\r\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\r\\n        WITHDRAW_FUSE_FEES_ACCRUE_INTEREST_FAILED,\\r\\n        WITHDRAW_FUSE_FEES_CASH_NOT_AVAILABLE,\\r\\n        WITHDRAW_FUSE_FEES_FRESH_CHECK,\\r\\n        WITHDRAW_FUSE_FEES_VALIDATION,\\r\\n        WITHDRAW_ADMIN_FEES_ACCRUE_INTEREST_FAILED,\\r\\n        WITHDRAW_ADMIN_FEES_CASH_NOT_AVAILABLE,\\r\\n        WITHDRAW_ADMIN_FEES_FRESH_CHECK,\\r\\n        WITHDRAW_ADMIN_FEES_VALIDATION,\\r\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\r\\n        REDUCE_RESERVES_ADMIN_CHECK,\\r\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\r\\n        REDUCE_RESERVES_FRESH_CHECK,\\r\\n        REDUCE_RESERVES_VALIDATION,\\r\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\r\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\r\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\r\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\r\\n        REPAY_BORROW_FRESHNESS_CHECK,\\r\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\r\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\r\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\r\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\r\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\r\\n        SET_COMPTROLLER_OWNER_CHECK,\\r\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\r\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\r\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\r\\n        SET_MAX_ASSETS_OWNER_CHECK,\\r\\n        SET_ORACLE_MARKET_NOT_LISTED,\\r\\n        TOGGLE_ADMIN_RIGHTS_OWNER_CHECK,\\r\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\r\\n        SET_ADMIN_FEE_ACCRUE_INTEREST_FAILED,\\r\\n        SET_ADMIN_FEE_ADMIN_CHECK,\\r\\n        SET_ADMIN_FEE_FRESH_CHECK,\\r\\n        SET_ADMIN_FEE_BOUNDS_CHECK,\\r\\n        SET_FUSE_FEE_ACCRUE_INTEREST_FAILED,\\r\\n        SET_FUSE_FEE_FRESH_CHECK,\\r\\n        SET_FUSE_FEE_BOUNDS_CHECK,\\r\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\r\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\r\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\r\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\r\\n        TRANSFER_COMPTROLLER_REJECTION,\\r\\n        TRANSFER_NOT_ALLOWED,\\r\\n        TRANSFER_NOT_ENOUGH,\\r\\n        TRANSFER_TOO_MUCH,\\r\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\r\\n        ADD_RESERVES_FRESH_CHECK,\\r\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\r\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\r\\n      **/\\r\\n    event Failure(uint error, uint info, uint detail);\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\r\\n      */\\r\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), 0);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\r\\n      */\\r\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), opaqueError);\\r\\n\\r\\n        return err == Error.COMPTROLLER_REJECTION ? 1000 + opaqueError : uint(err);\\r\\n    }\\r\\n}\"},\"Exponential.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./CarefulMath.sol\\\";\\r\\nimport \\\"./ExponentialNoError.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Exponential module for storing fixed-precision decimals\\r\\n * @author Compound\\r\\n * @dev Legacy contract for compatibility reasons with existing contracts that still use MathError\\r\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\r\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\r\\n *         `Exp({mantissa: 5100000000000000000})`.\\r\\n */\\r\\ncontract Exponential is CarefulMath, ExponentialNoError {\\r\\n    /**\\r\\n     * @dev Creates an exponential from numerator and denominator values.\\r\\n     *      Note: Returns an error if (`num` * 10e18) \\u003e MAX_INT,\\r\\n     *            or if `denom` is zero.\\r\\n     */\\r\\n    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\\r\\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\\r\\n        if (err1 != MathError.NO_ERROR) {\\r\\n            return (err1, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds two exponentials, returning a new exponential.\\r\\n     */\\r\\n    function addExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\r\\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\\r\\n\\r\\n        return (error, Exp({mantissa: result}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Subtracts two exponentials, returning a new exponential.\\r\\n     */\\r\\n    function subExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\r\\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\\r\\n\\r\\n        return (error, Exp({mantissa: result}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\r\\n     */\\r\\n    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\r\\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\r\\n     */\\r\\n    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\\r\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\r\\n        if (err != MathError.NO_ERROR) {\\r\\n            return (err, 0);\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, truncate(product));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\r\\n     */\\r\\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\\r\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\r\\n        if (err != MathError.NO_ERROR) {\\r\\n            return (err, 0);\\r\\n        }\\r\\n\\r\\n        return addUInt(truncate(product), addend);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\r\\n     */\\r\\n    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\r\\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\r\\n     */\\r\\n    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\\r\\n        /*\\r\\n          We are doing this as:\\r\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\r\\n\\r\\n          How it works:\\r\\n          Exp = a / b;\\r\\n          Scalar = s;\\r\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\r\\n        */\\r\\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, Exp({mantissa: 0}));\\r\\n        }\\r\\n        return getExp(numerator, divisor.mantissa);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\r\\n     */\\r\\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\\r\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\r\\n        if (err != MathError.NO_ERROR) {\\r\\n            return (err, 0);\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, truncate(fraction));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two exponentials, returning a new exponential.\\r\\n     */\\r\\n    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\r\\n\\r\\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\r\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\r\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\r\\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\r\\n        if (err1 != MathError.NO_ERROR) {\\r\\n            return (err1, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\r\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\r\\n        assert(err2 == MathError.NO_ERROR);\\r\\n\\r\\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\r\\n     */\\r\\n    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {\\r\\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies three exponentials, returning a new exponential.\\r\\n     */\\r\\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {\\r\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\r\\n        if (err != MathError.NO_ERROR) {\\r\\n            return (err, ab);\\r\\n        }\\r\\n        return mulExp(ab, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Divides two exponentials, returning a new exponential.\\r\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\r\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\r\\n     */\\r\\n    function divExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\r\\n        return getExp(a.mantissa, b.mantissa);\\r\\n    }\\r\\n}\\r\\n\"},\"ExponentialNoError.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\n/**\\r\\n * @title Exponential module for storing fixed-precision decimals\\r\\n * @author Compound\\r\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\r\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\r\\n *         `Exp({mantissa: 5100000000000000000})`.\\r\\n */\\r\\ncontract ExponentialNoError {\\r\\n    uint constant expScale = 1e18;\\r\\n    uint constant doubleScale = 1e36;\\r\\n    uint constant halfExpScale = expScale/2;\\r\\n    uint constant mantissaOne = expScale;\\r\\n\\r\\n    struct Exp {\\r\\n        uint mantissa;\\r\\n    }\\r\\n\\r\\n    struct Double {\\r\\n        uint mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Truncates the given exp to a whole number value.\\r\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\r\\n     */\\r\\n    function truncate(Exp memory exp) pure internal returns (uint) {\\r\\n        // Note: We are not using careful math here as we\\u0027re performing a division that cannot fail\\r\\n        return exp.mantissa / expScale;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\r\\n     */\\r\\n    function mul_ScalarTruncate(Exp memory a, uint scalar) pure internal returns (uint) {\\r\\n        Exp memory product = mul_(a, scalar);\\r\\n        return truncate(product);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\r\\n     */\\r\\n    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (uint) {\\r\\n        Exp memory product = mul_(a, scalar);\\r\\n        return add_(truncate(product), addend);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if first Exp is less than second Exp.\\r\\n     */\\r\\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\r\\n        return left.mantissa \\u003c right.mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if left Exp \\u003c= right Exp.\\r\\n     */\\r\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\r\\n        return left.mantissa \\u003c= right.mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if left Exp \\u003e right Exp.\\r\\n     */\\r\\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\r\\n        return left.mantissa \\u003e right.mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns true if Exp is exactly zero\\r\\n     */\\r\\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\\r\\n        return value.mantissa == 0;\\r\\n    }\\r\\n\\r\\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\\r\\n        require(n \\u003c 2**224, errorMessage);\\r\\n        return uint224(n);\\r\\n    }\\r\\n\\r\\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\\r\\n        require(n \\u003c 2**32, errorMessage);\\r\\n        return uint32(n);\\r\\n    }\\r\\n\\r\\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function add_(uint a, uint b) pure internal returns (uint) {\\r\\n        return add_(a, b, \\\"addition overflow\\\");\\r\\n    }\\r\\n\\r\\n    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\r\\n        uint c = a + b;\\r\\n        require(c \\u003e= a, errorMessage);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function sub_(uint a, uint b) pure internal returns (uint) {\\r\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\r\\n    }\\r\\n\\r\\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\\r\\n        return mul_(a, b.mantissa) / expScale;\\r\\n    }\\r\\n\\r\\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\r\\n    }\\r\\n\\r\\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: mul_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\\r\\n        return mul_(a, b.mantissa) / doubleScale;\\r\\n    }\\r\\n\\r\\n    function mul_(uint a, uint b) pure internal returns (uint) {\\r\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\r\\n    }\\r\\n\\r\\n    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\r\\n        if (a == 0 || b == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint c = a * b;\\r\\n        require(c / a == b, errorMessage);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: div_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\\r\\n        return div_(mul_(a, expScale), b.mantissa);\\r\\n    }\\r\\n\\r\\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: div_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function div_(uint a, Double memory b) pure internal returns (uint) {\\r\\n        return div_(mul_(a, doubleScale), b.mantissa);\\r\\n    }\\r\\n\\r\\n    function div_(uint a, uint b) pure internal returns (uint) {\\r\\n        return div_(a, b, \\\"divide by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\r\\n    }\\r\\n}\\r\\n\"},\"IFuseFeeDistributor.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\ninterface IFuseFeeDistributor {\\r\\n    function minBorrowEth() external view returns (uint256);\\r\\n    function maxSupplyEth() external view returns (uint256);\\r\\n    function maxUtilizationRate() external view returns (uint256);\\r\\n    function interestFeeRate() external view returns (uint256);\\r\\n    function comptrollerImplementationWhitelist(address oldImplementation, address newImplementation) external view returns (bool);\\r\\n    function cErc20DelegateWhitelist(address oldImplementation, address newImplementation, bool allowResign) external view returns (bool);\\r\\n    function cEtherDelegateWhitelist(address oldImplementation, address newImplementation, bool allowResign) external view returns (bool);\\r\\n    function latestComptrollerImplementation(address oldImplementation) external view returns (address);\\r\\n    function latestCErc20Delegate(address oldImplementation) external view returns (address cErc20Delegate, bool allowResign, bytes memory becomeImplementationData);\\r\\n    function latestCEtherDelegate(address oldImplementation) external view returns (address cEtherDelegate, bool allowResign, bytes memory becomeImplementationData);\\r\\n    function deployCEther(bytes calldata constructorData) external returns (address);\\r\\n    function deployCErc20(bytes calldata constructorData) external returns (address);\\r\\n    function () external payable;\\r\\n}\\r\\n\"},\"InterestRateModel.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\n/**\\r\\n  * @title Compound\\u0027s InterestRateModel Interface\\r\\n  * @author Compound\\r\\n  */\\r\\ncontract InterestRateModel {\\r\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\r\\n    bool public constant isInterestRateModel = true;\\r\\n\\r\\n    /**\\r\\n      * @notice Calculates the current borrow interest rate per block\\r\\n      * @param cash The total amount of cash the market has\\r\\n      * @param borrows The total amount of borrows the market has outstanding\\r\\n      * @param reserves The total amount of reserves the market has\\r\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\r\\n      */\\r\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\\r\\n\\r\\n    /**\\r\\n      * @notice Calculates the current supply interest rate per block\\r\\n      * @param cash The total amount of cash the market has\\r\\n      * @param borrows The total amount of borrows the market has outstanding\\r\\n      * @param reserves The total amount of reserves the market has\\r\\n      * @param reserveFactorMantissa The current reserve factor the market has\\r\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\r\\n      */\\r\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\\r\\n\\r\\n}\\r\\n\"},\"PriceOracle.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CToken.sol\\\";\\n\\ncontract PriceOracle {\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n    bool public constant isPriceOracle = true;\\n\\n    /**\\n      * @notice Get the underlying price of a cToken asset\\n      * @param cToken The cToken to get the underlying price of\\n      * @return The underlying asset price mantissa (scaled by 1e18).\\n      *  Zero means the price is unavailable.\\n      */\\n    function getUnderlyingPrice(CToken cToken) external view returns (uint);\\n}\\n\"},\"RewardsDistributorDelegate.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./CToken.sol\\\";\\r\\nimport \\\"./ExponentialNoError.sol\\\";\\r\\nimport \\\"./Comptroller.sol\\\";\\r\\nimport \\\"./RewardsDistributorStorage.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title RewardsDistributorDelegate (COMP distribution logic extracted from `Comptroller`)\\r\\n * @author Compound\\r\\n */\\r\\ncontract RewardsDistributorDelegate is RewardsDistributorDelegateStorageV1, ExponentialNoError {\\r\\n    /// @dev Notice that this contract is a RewardsDistributor\\r\\n    bool public constant isRewardsDistributor = true;\\r\\n\\r\\n    /// @notice Emitted when pendingAdmin is changed\\r\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\r\\n\\r\\n    /// @notice Emitted when pendingAdmin is accepted, which means admin is updated\\r\\n    event NewAdmin(address oldAdmin, address newAdmin);\\r\\n\\r\\n    /// @notice Emitted when a new COMP speed is calculated for a market\\r\\n    event CompSupplySpeedUpdated(CToken indexed cToken, uint newSpeed);\\r\\n\\r\\n    /// @notice Emitted when a new COMP speed is calculated for a market\\r\\n    event CompBorrowSpeedUpdated(CToken indexed cToken, uint newSpeed);\\r\\n\\r\\n    /// @notice Emitted when a new COMP speed is set for a contributor\\r\\n    event ContributorCompSpeedUpdated(address indexed contributor, uint newSpeed);\\r\\n\\r\\n    /// @notice Emitted when COMP is distributed to a supplier\\r\\n    event DistributedSupplierComp(CToken indexed cToken, address indexed supplier, uint compDelta, uint compSupplyIndex);\\r\\n\\r\\n    /// @notice Emitted when COMP is distributed to a borrower\\r\\n    event DistributedBorrowerComp(CToken indexed cToken, address indexed borrower, uint compDelta, uint compBorrowIndex);\\r\\n\\r\\n    /// @notice Emitted when COMP is granted by admin\\r\\n    event CompGranted(address recipient, uint amount);\\r\\n\\r\\n    /// @notice The initial COMP index for a market\\r\\n    uint224 public constant compInitialIndex = 1e36;\\r\\n\\r\\n    /// @dev Intitializer to set admin to caller and set reward token\\r\\n    function initialize(address _rewardToken) external {\\r\\n        require(msg.sender == admin, \\\"Only admin can initialize.\\\");\\r\\n        require(rewardToken == address(0), \\\"Already initialized.\\\");\\r\\n        require(_rewardToken != address(0), \\\"Cannot initialize reward token to the zero address.\\\");\\r\\n        rewardToken = _rewardToken;\\r\\n    }\\r\\n\\r\\n    /*** Set Admin ***/\\r\\n\\r\\n    /**\\r\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n      * @param newPendingAdmin New pending admin.\\r\\n      */\\r\\n    function _setPendingAdmin(address newPendingAdmin) external {\\r\\n        // Check caller = admin\\r\\n        require(msg.sender == admin, \\\"RewardsDistributor:_setPendingAdmin: admin only\\\");\\r\\n\\r\\n        // Save current value, if any, for inclusion in log\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store pendingAdmin with value newPendingAdmin\\r\\n        pendingAdmin = newPendingAdmin;\\r\\n\\r\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\r\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\r\\n      * @dev Admin function for pending admin to accept role and update admin\\r\\n      */\\r\\n    function _acceptAdmin() external {\\r\\n        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\\r\\n        require(msg.sender == pendingAdmin \\u0026\\u0026 msg.sender != address(0), \\\"RewardsDistributor:_acceptAdmin: pending admin only\\\");\\r\\n\\r\\n        // Save current values for inclusion in log\\r\\n        address oldAdmin = admin;\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store admin with value pendingAdmin\\r\\n        admin = pendingAdmin;\\r\\n\\r\\n        // Clear the pending value\\r\\n        pendingAdmin = address(0);\\r\\n\\r\\n        emit NewAdmin(oldAdmin, admin);\\r\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\r\\n    }\\r\\n\\r\\n    /*** Comp Distribution ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Check the cToken before adding\\r\\n     * @param cToken The market to add\\r\\n     */\\r\\n    function checkCToken(CToken cToken) internal view {\\r\\n        // Make sure cToken is listed\\r\\n        Comptroller comptroller = Comptroller(address(cToken.comptroller()));\\r\\n        (bool isListed, ) = comptroller.markets(address(cToken));\\r\\n        require(isListed == true, \\\"comp market is not listed\\\");\\r\\n\\r\\n        // Make sure distributor is added\\r\\n        bool distributorAdded = false;\\r\\n        address[] memory distributors = comptroller.getRewardsDistributors();\\r\\n        for (uint256 i = 0; i \\u003c distributors.length; i++) if (distributors[i] == address(this)) distributorAdded = true; \\r\\n        require(distributorAdded == true, \\\"distributor not added\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set COMP speed for a single market\\r\\n     * @param cToken The market whose COMP speed to update\\r\\n     * @param compSpeed New COMP speed for market\\r\\n     */\\r\\n    function setCompSupplySpeedInternal(CToken cToken, uint compSpeed) internal {\\r\\n        uint currentCompSpeed = compSupplySpeeds[address(cToken)];\\r\\n        if (currentCompSpeed != 0) {\\r\\n            // note that COMP speed could be set to 0 to halt liquidity rewards for a market\\r\\n            updateCompSupplyIndex(address(cToken));\\r\\n        } else if (compSpeed != 0) {\\r\\n            // Make sure cToken is listed and distributor is added\\r\\n            checkCToken(cToken);\\r\\n\\r\\n            // Add the COMP market\\r\\n            if (compSupplyState[address(cToken)].index == 0) {\\r\\n                compSupplyState[address(cToken)] = CompMarketState({\\r\\n                    index: compInitialIndex,\\r\\n                    block: safe32(getBlockNumber(), \\\"block number exceeds 32 bits\\\")\\r\\n                });\\r\\n\\r\\n                // Add to allMarkets array if not already there\\r\\n                if (compBorrowState[address(cToken)].index == 0) {\\r\\n                    allMarkets.push(cToken);\\r\\n                }\\r\\n            } else {\\r\\n                // Update block number to ensure extra interest is not accrued during the prior period\\r\\n                compSupplyState[address(cToken)].block = safe32(getBlockNumber(), \\\"block number exceeds 32 bits\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (currentCompSpeed != compSpeed) {\\r\\n            compSupplySpeeds[address(cToken)] = compSpeed;\\r\\n            emit CompSupplySpeedUpdated(cToken, compSpeed);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set COMP speed for a single market\\r\\n     * @param cToken The market whose COMP speed to update\\r\\n     * @param compSpeed New COMP speed for market\\r\\n     */\\r\\n    function setCompBorrowSpeedInternal(CToken cToken, uint compSpeed) internal {\\r\\n        uint currentCompSpeed = compBorrowSpeeds[address(cToken)];\\r\\n        if (currentCompSpeed != 0) {\\r\\n            // note that COMP speed could be set to 0 to halt liquidity rewards for a market\\r\\n            Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\\r\\n            updateCompBorrowIndex(address(cToken), borrowIndex);\\r\\n        } else if (compSpeed != 0) {\\r\\n            // Make sure cToken is listed and distributor is added\\r\\n            checkCToken(cToken);\\r\\n\\r\\n            // Add the COMP market\\r\\n            if (compBorrowState[address(cToken)].index == 0) {\\r\\n                compBorrowState[address(cToken)] = CompMarketState({\\r\\n                    index: compInitialIndex,\\r\\n                    block: safe32(getBlockNumber(), \\\"block number exceeds 32 bits\\\")\\r\\n                });\\r\\n\\r\\n                // Add to allMarkets array if not already there\\r\\n                if (compSupplyState[address(cToken)].index == 0) {\\r\\n                    allMarkets.push(cToken);\\r\\n                }\\r\\n            } else {\\r\\n                // Update block number to ensure extra interest is not accrued during the prior period\\r\\n                compBorrowState[address(cToken)].block = safe32(getBlockNumber(), \\\"block number exceeds 32 bits\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (currentCompSpeed != compSpeed) {\\r\\n            compBorrowSpeeds[address(cToken)] = compSpeed;\\r\\n            emit CompBorrowSpeedUpdated(cToken, compSpeed);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrue COMP to the market by updating the supply index\\r\\n     * @param cToken The market whose supply index to update\\r\\n     */\\r\\n    function updateCompSupplyIndex(address cToken) internal {\\r\\n        CompMarketState storage supplyState = compSupplyState[cToken];\\r\\n        uint supplySpeed = compSupplySpeeds[cToken];\\r\\n        uint blockNumber = getBlockNumber();\\r\\n        uint deltaBlocks = sub_(blockNumber, uint(supplyState.block));\\r\\n        if (deltaBlocks \\u003e 0 \\u0026\\u0026 supplySpeed \\u003e 0) {\\r\\n            uint supplyTokens = CToken(cToken).totalSupply();\\r\\n            uint compAccrued_ = mul_(deltaBlocks, supplySpeed);\\r\\n            Double memory ratio = supplyTokens \\u003e 0 ? fraction(compAccrued_, supplyTokens) : Double({mantissa: 0});\\r\\n            Double memory index = add_(Double({mantissa: supplyState.index}), ratio);\\r\\n            compSupplyState[cToken] = CompMarketState({\\r\\n                index: safe224(index.mantissa, \\\"new index exceeds 224 bits\\\"),\\r\\n                block: safe32(blockNumber, \\\"block number exceeds 32 bits\\\")\\r\\n            });\\r\\n        } else if (deltaBlocks \\u003e 0 \\u0026\\u0026 supplyState.index \\u003e 0) {\\r\\n            supplyState.block = safe32(blockNumber, \\\"block number exceeds 32 bits\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrue COMP to the market by updating the borrow index\\r\\n     * @param cToken The market whose borrow index to update\\r\\n     */\\r\\n    function updateCompBorrowIndex(address cToken, Exp memory marketBorrowIndex) internal {\\r\\n        CompMarketState storage borrowState = compBorrowState[cToken];\\r\\n        uint borrowSpeed = compBorrowSpeeds[cToken];\\r\\n        uint blockNumber = getBlockNumber();\\r\\n        uint deltaBlocks = sub_(blockNumber, uint(borrowState.block));\\r\\n        if (deltaBlocks \\u003e 0 \\u0026\\u0026 borrowSpeed \\u003e 0) {\\r\\n            uint borrowAmount = div_(CToken(cToken).totalBorrows(), marketBorrowIndex);\\r\\n            uint compAccrued_ = mul_(deltaBlocks, borrowSpeed);\\r\\n            Double memory ratio = borrowAmount \\u003e 0 ? fraction(compAccrued_, borrowAmount) : Double({mantissa: 0});\\r\\n            Double memory index = add_(Double({mantissa: borrowState.index}), ratio);\\r\\n            compBorrowState[cToken] = CompMarketState({\\r\\n                index: safe224(index.mantissa, \\\"new index exceeds 224 bits\\\"),\\r\\n                block: safe32(blockNumber, \\\"block number exceeds 32 bits\\\")\\r\\n            });\\r\\n        } else if (deltaBlocks \\u003e 0 \\u0026\\u0026 borrowState.index \\u003e 0) {\\r\\n            borrowState.block = safe32(blockNumber, \\\"block number exceeds 32 bits\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate COMP accrued by a supplier and possibly transfer it to them\\r\\n     * @param cToken The market in which the supplier is interacting\\r\\n     * @param supplier The address of the supplier to distribute COMP to\\r\\n     */\\r\\n    function distributeSupplierComp(address cToken, address supplier) internal {\\r\\n        CompMarketState storage supplyState = compSupplyState[cToken];\\r\\n        Double memory supplyIndex = Double({mantissa: supplyState.index});\\r\\n        Double memory supplierIndex = Double({mantissa: compSupplierIndex[cToken][supplier]});\\r\\n        compSupplierIndex[cToken][supplier] = supplyIndex.mantissa;\\r\\n\\r\\n        if (supplierIndex.mantissa == 0 \\u0026\\u0026 supplyIndex.mantissa \\u003e 0) {\\r\\n            supplierIndex.mantissa = compInitialIndex;\\r\\n        }\\r\\n\\r\\n        Double memory deltaIndex = sub_(supplyIndex, supplierIndex);\\r\\n        uint supplierTokens = CToken(cToken).balanceOf(supplier);\\r\\n        uint supplierDelta = mul_(supplierTokens, deltaIndex);\\r\\n        uint supplierAccrued = add_(compAccrued[supplier], supplierDelta);\\r\\n        compAccrued[supplier] = supplierAccrued;\\r\\n        emit DistributedSupplierComp(CToken(cToken), supplier, supplierDelta, supplyIndex.mantissa);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate COMP accrued by a borrower and possibly transfer it to them\\r\\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\\r\\n     * @param cToken The market in which the borrower is interacting\\r\\n     * @param borrower The address of the borrower to distribute COMP to\\r\\n     */\\r\\n    function distributeBorrowerComp(address cToken, address borrower, Exp memory marketBorrowIndex) internal {\\r\\n        CompMarketState storage borrowState = compBorrowState[cToken];\\r\\n        Double memory borrowIndex = Double({mantissa: borrowState.index});\\r\\n        Double memory borrowerIndex = Double({mantissa: compBorrowerIndex[cToken][borrower]});\\r\\n        compBorrowerIndex[cToken][borrower] = borrowIndex.mantissa;\\r\\n\\r\\n        if (borrowerIndex.mantissa \\u003e 0) {\\r\\n            Double memory deltaIndex = sub_(borrowIndex, borrowerIndex);\\r\\n            uint borrowerAmount = div_(CToken(cToken).borrowBalanceStored(borrower), marketBorrowIndex);\\r\\n            uint borrowerDelta = mul_(borrowerAmount, deltaIndex);\\r\\n            uint borrowerAccrued = add_(compAccrued[borrower], borrowerDelta);\\r\\n            compAccrued[borrower] = borrowerAccrued;\\r\\n            emit DistributedBorrowerComp(CToken(cToken), borrower, borrowerDelta, borrowIndex.mantissa);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Keeps the flywheel moving pre-mint and pre-redeem\\r\\n     * @dev Called by the Comptroller\\r\\n     * @param cToken The relevant market\\r\\n     * @param supplier The minter/redeemer\\r\\n     */\\r\\n    function flywheelPreSupplierAction(address cToken, address supplier) external {\\r\\n        if (compSupplyState[cToken].index \\u003e 0) {\\r\\n            updateCompSupplyIndex(cToken);\\r\\n            distributeSupplierComp(cToken, supplier);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Keeps the flywheel moving pre-borrow and pre-repay\\r\\n     * @dev Called by the Comptroller\\r\\n     * @param cToken The relevant market\\r\\n     * @param borrower The borrower\\r\\n     */\\r\\n    function flywheelPreBorrowerAction(address cToken, address borrower) external {\\r\\n        if (compBorrowState[cToken].index \\u003e 0) {\\r\\n            Exp memory borrowIndex = Exp({mantissa: CToken(cToken).borrowIndex()});\\r\\n            updateCompBorrowIndex(cToken, borrowIndex);\\r\\n            distributeBorrowerComp(cToken, borrower, borrowIndex);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Keeps the flywheel moving pre-transfer and pre-seize\\r\\n     * @dev Called by the Comptroller\\r\\n     * @param cToken The relevant market\\r\\n     * @param src The account which sources the tokens\\r\\n     * @param dst The account which receives the tokens\\r\\n     */\\r\\n    function flywheelPreTransferAction(address cToken, address src, address dst) external {\\r\\n        if (compSupplyState[cToken].index \\u003e 0) {\\r\\n            updateCompSupplyIndex(cToken);\\r\\n            distributeSupplierComp(cToken, src);\\r\\n            distributeSupplierComp(cToken, dst);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate additional accrued COMP for a contributor since last accrual\\r\\n     * @param contributor The address to calculate contributor rewards for\\r\\n     */\\r\\n    function updateContributorRewards(address contributor) public {\\r\\n        uint compSpeed = compContributorSpeeds[contributor];\\r\\n        uint blockNumber = getBlockNumber();\\r\\n        uint deltaBlocks = sub_(blockNumber, lastContributorBlock[contributor]);\\r\\n        if (deltaBlocks \\u003e 0 \\u0026\\u0026 compSpeed \\u003e 0) {\\r\\n            uint newAccrued = mul_(deltaBlocks, compSpeed);\\r\\n            uint contributorAccrued = add_(compAccrued[contributor], newAccrued);\\r\\n\\r\\n            compAccrued[contributor] = contributorAccrued;\\r\\n            lastContributorBlock[contributor] = blockNumber;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim all the comp accrued by holder in all markets\\r\\n     * @param holder The address to claim COMP for\\r\\n     */\\r\\n    function claimRewards(address holder) public {\\r\\n        return claimRewards(holder, allMarkets);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim all the comp accrued by holder in the specified markets\\r\\n     * @param holder The address to claim COMP for\\r\\n     * @param cTokens The list of markets to claim COMP in\\r\\n     */\\r\\n    function claimRewards(address holder, CToken[] memory cTokens) public {\\r\\n        address[] memory holders = new address[](1);\\r\\n        holders[0] = holder;\\r\\n        claimRewards(holders, cTokens, true, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim all comp accrued by the holders\\r\\n     * @param holders The addresses to claim COMP for\\r\\n     * @param cTokens The list of markets to claim COMP in\\r\\n     * @param borrowers Whether or not to claim COMP earned by borrowing\\r\\n     * @param suppliers Whether or not to claim COMP earned by supplying\\r\\n     */\\r\\n    function claimRewards(address[] memory holders, CToken[] memory cTokens, bool borrowers, bool suppliers) public {\\r\\n        for (uint i = 0; i \\u003c cTokens.length; i++) {\\r\\n            CToken cToken = cTokens[i];\\r\\n            if (borrowers == true \\u0026\\u0026 compBorrowState[address(cToken)].index \\u003e 0) {\\r\\n                Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\\r\\n                updateCompBorrowIndex(address(cToken), borrowIndex);\\r\\n                for (uint j = 0; j \\u003c holders.length; j++) {\\r\\n                    distributeBorrowerComp(address(cToken), holders[j], borrowIndex);\\r\\n                }\\r\\n            }\\r\\n            if (suppliers == true \\u0026\\u0026 compSupplyState[address(cToken)].index \\u003e 0) {\\r\\n                updateCompSupplyIndex(address(cToken));\\r\\n                for (uint j = 0; j \\u003c holders.length; j++) {\\r\\n                    distributeSupplierComp(address(cToken), holders[j]);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        for (uint j = 0; j \\u003c holders.length; j++) {\\r\\n            compAccrued[holders[j]] = grantCompInternal(holders[j], compAccrued[holders[j]]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer COMP to the user\\r\\n     * @dev Note: If there is not enough COMP, we do not perform the transfer all.\\r\\n     * @param user The address of the user to transfer COMP to\\r\\n     * @param amount The amount of COMP to (possibly) transfer\\r\\n     * @return The amount of COMP which was NOT transferred to the user\\r\\n     */\\r\\n    function grantCompInternal(address user, uint amount) internal returns (uint) {\\r\\n        EIP20NonStandardInterface comp = EIP20NonStandardInterface(rewardToken);\\r\\n        uint compRemaining = comp.balanceOf(address(this));\\r\\n        if (amount \\u003e 0 \\u0026\\u0026 amount \\u003c= compRemaining) {\\r\\n            comp.transfer(user, amount);\\r\\n            return 0;\\r\\n        }\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    /*** Comp Distribution Admin ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer COMP to the recipient\\r\\n     * @dev Note: If there is not enough COMP, we do not perform the transfer all.\\r\\n     * @param recipient The address of the recipient to transfer COMP to\\r\\n     * @param amount The amount of COMP to (possibly) transfer\\r\\n     */\\r\\n    function _grantComp(address recipient, uint amount) public {\\r\\n        require(msg.sender == admin, \\\"only admin can grant comp\\\");\\r\\n        uint amountLeft = grantCompInternal(recipient, amount);\\r\\n        require(amountLeft == 0, \\\"insufficient comp for grant\\\");\\r\\n        emit CompGranted(recipient, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set COMP speed for a single market\\r\\n     * @param cToken The market whose COMP speed to update\\r\\n     * @param compSpeed New COMP speed for market\\r\\n     */\\r\\n    function _setCompSupplySpeed(CToken cToken, uint compSpeed) public {\\r\\n        require(msg.sender == admin, \\\"only admin can set comp speed\\\");\\r\\n        setCompSupplySpeedInternal(cToken, compSpeed);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set COMP speed for a single market\\r\\n     * @param cToken The market whose COMP speed to update\\r\\n     * @param compSpeed New COMP speed for market\\r\\n     */\\r\\n    function _setCompBorrowSpeed(CToken cToken, uint compSpeed) public {\\r\\n        require(msg.sender == admin, \\\"only admin can set comp speed\\\");\\r\\n        setCompBorrowSpeedInternal(cToken, compSpeed);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set COMP borrow and supply speeds for the specified markets.\\r\\n     * @param cTokens The markets whose COMP speed to update.\\r\\n     * @param supplySpeeds New supply-side COMP speed for the corresponding market.\\r\\n     * @param borrowSpeeds New borrow-side COMP speed for the corresponding market.\\r\\n     */\\r\\n    function _setCompSpeeds(CToken[] memory cTokens, uint[] memory supplySpeeds, uint[] memory borrowSpeeds) public {\\r\\n        require(msg.sender == admin, \\\"only admin can set comp speed\\\");\\r\\n\\r\\n        uint numTokens = cTokens.length;\\r\\n        require(numTokens == supplySpeeds.length \\u0026\\u0026 numTokens == borrowSpeeds.length, \\\"RewardsDistributor::_setCompSpeeds invalid input\\\");\\r\\n\\r\\n        for (uint i = 0; i \\u003c numTokens; ++i) {\\r\\n            setCompSupplySpeedInternal(cTokens[i], supplySpeeds[i]);\\r\\n            setCompBorrowSpeedInternal(cTokens[i], borrowSpeeds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set COMP speed for a single contributor\\r\\n     * @param contributor The contributor whose COMP speed to update\\r\\n     * @param compSpeed New COMP speed for contributor\\r\\n     */\\r\\n    function _setContributorCompSpeed(address contributor, uint compSpeed) public {\\r\\n        require(msg.sender == admin, \\\"only admin can set comp speed\\\");\\r\\n\\r\\n        // note that COMP speed could be set to 0 to halt liquidity rewards for a contributor\\r\\n        updateContributorRewards(contributor);\\r\\n        if (compSpeed == 0) {\\r\\n            // release storage\\r\\n            delete lastContributorBlock[contributor];\\r\\n        } else {\\r\\n            lastContributorBlock[contributor] = getBlockNumber();\\r\\n        }\\r\\n        compContributorSpeeds[contributor] = compSpeed;\\r\\n\\r\\n        emit ContributorCompSpeedUpdated(contributor, compSpeed);\\r\\n    }\\r\\n\\r\\n    /*** Helper Functions */\\r\\n\\r\\n    function getBlockNumber() public view returns (uint) {\\r\\n        return block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns an array of all markets.\\r\\n     */\\r\\n    function getAllMarkets() external view returns (CToken[] memory) {\\r\\n        return allMarkets;\\r\\n    }\\r\\n}\\r\\n\"},\"RewardsDistributorStorage.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./CToken.sol\\\";\\r\\n\\r\\ncontract RewardsDistributorDelegatorStorage {\\r\\n    /// @notice Administrator for this contract\\r\\n    address public admin;\\r\\n\\r\\n    /// @notice Pending administrator for this contract\\r\\n    address public pendingAdmin;\\r\\n\\r\\n    /// @notice Active brains of RewardsDistributor\\r\\n    address public implementation;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Storage for RewardsDistributorDelegate\\r\\n * @notice For future upgrades, do not change RewardsDistributorDelegateStorageV1. Create a new\\r\\n * contract which implements RewardsDistributorDelegateStorageV1 and following the naming convention\\r\\n * RewardsDistributorDelegateStorageVX.\\r\\n */\\r\\ncontract RewardsDistributorDelegateStorageV1 is RewardsDistributorDelegatorStorage {\\r\\n    /// @dev The token to reward (i.e., COMP)\\r\\n    address public rewardToken;\\r\\n\\r\\n    struct CompMarketState {\\r\\n        /// @notice The market\\u0027s last updated compBorrowIndex or compSupplyIndex\\r\\n        uint224 index;\\r\\n\\r\\n        /// @notice The block number the index was last updated at\\r\\n        uint32 block;\\r\\n    }\\r\\n\\r\\n    /// @notice A list of all markets\\r\\n    CToken[] public allMarkets;\\r\\n\\r\\n    /// @notice The portion of compRate that each market currently receives\\r\\n    mapping(address =\\u003e uint) public compSupplySpeeds;\\r\\n\\r\\n    /// @notice The portion of compRate that each market currently receives\\r\\n    mapping(address =\\u003e uint) public compBorrowSpeeds;\\r\\n\\r\\n    /// @notice The COMP market supply state for each market\\r\\n    mapping(address =\\u003e CompMarketState) public compSupplyState;\\r\\n\\r\\n    /// @notice The COMP market borrow state for each market\\r\\n    mapping(address =\\u003e CompMarketState) public compBorrowState;\\r\\n\\r\\n    /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint)) public compSupplierIndex;\\r\\n\\r\\n    /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint)) public compBorrowerIndex;\\r\\n\\r\\n    /// @notice The COMP accrued but not yet transferred to each user\\r\\n    mapping(address =\\u003e uint) public compAccrued;\\r\\n\\r\\n    /// @notice The portion of COMP that each contributor receives per block\\r\\n    mapping(address =\\u003e uint) public compContributorSpeeds;\\r\\n\\r\\n    /// @notice Last block at which a contributor\\u0027s COMP rewards have been allocated\\r\\n    mapping(address =\\u003e uint) public lastContributorBlock;\\r\\n}\\r\\n\"},\"Unitroller.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./ErrorReporter.sol\\\";\\r\\nimport \\\"./ComptrollerStorage.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Unitroller\\r\\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\\r\\n * CTokens should reference this contract as their comptroller.\\r\\n */\\r\\ncontract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {\\r\\n    /**\\r\\n      * @notice Emitted when pendingComptrollerImplementation is changed\\r\\n      */\\r\\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\\r\\n\\r\\n    /**\\r\\n      * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\\r\\n      */\\r\\n    event NewImplementation(address oldImplementation, address newImplementation);\\r\\n\\r\\n    /**\\r\\n      * @notice Event emitted when the Fuse admin rights are changed\\r\\n      */\\r\\n    event FuseAdminRightsToggled(bool hasRights);\\r\\n\\r\\n    /**\\r\\n      * @notice Event emitted when the admin rights are changed\\r\\n      */\\r\\n    event AdminRightsToggled(bool hasRights);\\r\\n\\r\\n    /**\\r\\n      * @notice Emitted when pendingAdmin is changed\\r\\n      */\\r\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\r\\n\\r\\n    /**\\r\\n      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\r\\n      */\\r\\n    event NewAdmin(address oldAdmin, address newAdmin);\\r\\n\\r\\n    constructor() public {\\r\\n        // Set admin to caller\\r\\n        admin = msg.sender;\\r\\n    }\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    function _setPendingImplementation(address newPendingImplementation) public returns (uint) {\\r\\n        if (!hasAdminRights()) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        if (!fuseAdmin.comptrollerImplementationWhitelist(comptrollerImplementation, newPendingImplementation)) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_CONTRACT_CHECK);\\r\\n        }\\r\\n\\r\\n        address oldPendingImplementation = pendingComptrollerImplementation;\\r\\n\\r\\n        pendingComptrollerImplementation = newPendingImplementation;\\r\\n\\r\\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\\r\\n    * @dev Admin function for new implementation to accept it\\u0027s role as implementation\\r\\n    * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n    */\\r\\n    function _acceptImplementation() public returns (uint) {\\r\\n        // Check caller is pendingImplementation and pendingImplementation ≠ address(0)\\r\\n        if (msg.sender != pendingComptrollerImplementation || pendingComptrollerImplementation == address(0)) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\\r\\n        }\\r\\n\\r\\n        // Save current values for inclusion in log\\r\\n        address oldImplementation = comptrollerImplementation;\\r\\n        address oldPendingImplementation = pendingComptrollerImplementation;\\r\\n\\r\\n        comptrollerImplementation = pendingComptrollerImplementation;\\r\\n\\r\\n        pendingComptrollerImplementation = address(0);\\r\\n\\r\\n        emit NewImplementation(oldImplementation, comptrollerImplementation);\\r\\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Toggles Fuse admin rights.\\r\\n      * @param hasRights Boolean indicating if the Fuse admin is to have rights.\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _toggleFuseAdminRights(bool hasRights) external returns (uint) {\\r\\n        // Check caller = admin\\r\\n        if (!hasAdminRights()) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.TOGGLE_ADMIN_RIGHTS_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        // Check that rights have not already been set to the desired value\\r\\n        if (fuseAdminHasRights == hasRights) return uint(Error.NO_ERROR);\\r\\n\\r\\n        // Set fuseAdminHasRights\\r\\n        fuseAdminHasRights = hasRights;\\r\\n\\r\\n        // Emit FuseAdminRightsToggled()\\r\\n        emit FuseAdminRightsToggled(fuseAdminHasRights);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Toggles admin rights.\\r\\n      * @param hasRights Boolean indicating if the admin is to have rights.\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _toggleAdminRights(bool hasRights) external returns (uint) {\\r\\n        // Check caller = admin\\r\\n        if (!hasAdminRights()) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.TOGGLE_ADMIN_RIGHTS_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        // Check that rights have not already been set to the desired value\\r\\n        if (adminHasRights == hasRights) return uint(Error.NO_ERROR);\\r\\n\\r\\n        // Set adminHasRights\\r\\n        adminHasRights = hasRights;\\r\\n\\r\\n        // Emit AdminRightsToggled()\\r\\n        emit AdminRightsToggled(hasRights);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n      * @param newPendingAdmin New pending admin.\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\\r\\n        // Check caller = admin\\r\\n        if (!hasAdminRights()) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        // Save current value, if any, for inclusion in log\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store pendingAdmin with value newPendingAdmin\\r\\n        pendingAdmin = newPendingAdmin;\\r\\n\\r\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\r\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\r\\n      * @dev Admin function for pending admin to accept role and update admin\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _acceptAdmin() public returns (uint) {\\r\\n        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\\r\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\r\\n        }\\r\\n\\r\\n        // Save current values for inclusion in log\\r\\n        address oldAdmin = admin;\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store admin with value pendingAdmin\\r\\n        admin = pendingAdmin;\\r\\n\\r\\n        // Clear the pending value\\r\\n        pendingAdmin = address(0);\\r\\n\\r\\n        emit NewAdmin(oldAdmin, admin);\\r\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delegates execution to an implementation contract.\\r\\n     * It returns to the external caller whatever the implementation returns\\r\\n     * or forwards reverts.\\r\\n     */\\r\\n    function () payable external {\\r\\n        // Check for automatic implementation\\r\\n        if (msg.sender != address(this)) {\\r\\n            (bool callSuccess, bytes memory data) = address(this).staticcall(abi.encodeWithSignature(\\\"autoImplementation()\\\"));\\r\\n            bool autoImplementation;\\r\\n            if (callSuccess) (autoImplementation) = abi.decode(data, (bool));\\r\\n\\r\\n            if (autoImplementation) {\\r\\n                address latestComptrollerImplementation = fuseAdmin.latestComptrollerImplementation(comptrollerImplementation);\\r\\n\\r\\n                if (comptrollerImplementation != latestComptrollerImplementation) {\\r\\n                    address oldImplementation = comptrollerImplementation; // Save current value for inclusion in log\\r\\n                    comptrollerImplementation = latestComptrollerImplementation;\\r\\n                    emit NewImplementation(oldImplementation, comptrollerImplementation);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // delegate all other functions to current implementation\\r\\n        (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\\r\\n\\r\\n        assembly {\\r\\n              let free_mem_ptr := mload(0x40)\\r\\n              returndatacopy(free_mem_ptr, 0, returndatasize)\\r\\n\\r\\n              switch success\\r\\n              case 0 { revert(free_mem_ptr, returndatasize) }\\r\\n              default { return(free_mem_ptr, returndatasize) }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"CompBorrowSpeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CompGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"CompSupplySpeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"ContributorCompSpeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compBorrowIndex\",\"type\":\"uint256\"}],\"name\":\"DistributedBorrowerComp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compSupplyIndex\",\"type\":\"uint256\"}],\"name\":\"DistributedSupplierComp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_grantComp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"compSpeed\",\"type\":\"uint256\"}],\"name\":\"_setCompBorrowSpeed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"supplySpeeds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowSpeeds\",\"type\":\"uint256[]\"}],\"name\":\"_setCompSpeeds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"compSpeed\",\"type\":\"uint256\"}],\"name\":\"_setCompSupplySpeed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"compSpeed\",\"type\":\"uint256\"}],\"name\":\"_setContributorCompSpeed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setPendingAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allMarkets\",\"outputs\":[{\"internalType\":\"contract CToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"},{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"borrowers\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"suppliers\",\"type\":\"bool\"}],\"name\":\"claimRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compBorrowSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compBorrowState\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"block\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compBorrowerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compContributorSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"compInitialIndex\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compSupplierIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compSupplySpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compSupplyState\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"block\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"flywheelPreBorrowerAction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"}],\"name\":\"flywheelPreSupplierAction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"flywheelPreTransferAction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllMarkets\",\"outputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRewardsDistributor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastContributorBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"updateContributorRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RewardsDistributorDelegate","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"BSD-3-Clause","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b9407bba61470277bd13480df9f2de9d16bd1f1fc37498f00d805247394e4cdc"}]}