{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/configuration/ConfigurationManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./ModuleStorage.sol\\\";\\nimport \\\"../interfaces/IConfigurationManager.sol\\\";\\n\\n/**\\n * @title ConfigurationManager\\n * @author Pods Finance\\n * @notice Allows contracts to read protocol-wide configuration modules\\n */\\ncontract ConfigurationManager is IConfigurationManager, ModuleStorage, Ownable {\\n    mapping(bytes32 => uint256) private _parameters;\\n\\n    /* solhint-disable private-vars-leading-underscore */\\n    bytes32 private constant EMERGENCY_STOP = \\\"EMERGENCY_STOP\\\";\\n    bytes32 private constant PRICING_METHOD = \\\"PRICING_METHOD\\\";\\n    bytes32 private constant IV_GUESSER = \\\"IV_GUESSER\\\";\\n    bytes32 private constant IV_PROVIDER = \\\"IV_PROVIDER\\\";\\n    bytes32 private constant PRICE_PROVIDER = \\\"PRICE_PROVIDER\\\";\\n    bytes32 private constant CAP_PROVIDER = \\\"CAP_PROVIDER\\\";\\n    bytes32 private constant AMM_FACTORY = \\\"AMM_FACTORY\\\";\\n    bytes32 private constant OPTION_FACTORY = \\\"OPTION_FACTORY\\\";\\n    bytes32 private constant OPTION_HELPER = \\\"OPTION_HELPER\\\";\\n    bytes32 private constant OPTION_POOL_REGISTRY = \\\"OPTION_POOL_REGISTRY\\\";\\n\\n    /* solhint-enable private-vars-leading-underscore */\\n\\n    event ParameterSet(bytes32 name, uint256 value);\\n\\n    constructor() public {\\n        /**\\n         * Minimum price interval to accept a price feed\\n         * Defaulted to 3 hours and 10 minutes\\n         */\\n        _parameters[\\\"MIN_UPDATE_INTERVAL\\\"] = 11100;\\n\\n        /**\\n         * Acceptable range interval on sigma numerical method\\n         */\\n        _parameters[\\\"GUESSER_ACCEPTABLE_RANGE\\\"] = 10;\\n    }\\n\\n    function setParameter(bytes32 name, uint256 value) external override onlyOwner {\\n        _parameters[name] = value;\\n        emit ParameterSet(name, value);\\n    }\\n\\n    function setEmergencyStop(address emergencyStop) external override onlyOwner {\\n        _setModule(EMERGENCY_STOP, emergencyStop);\\n    }\\n\\n    function setPricingMethod(address pricingMethod) external override onlyOwner {\\n        _setModule(PRICING_METHOD, pricingMethod);\\n    }\\n\\n    function setIVGuesser(address ivGuesser) external override onlyOwner {\\n        _setModule(IV_GUESSER, ivGuesser);\\n    }\\n\\n    function setIVProvider(address ivProvider) external override onlyOwner {\\n        _setModule(IV_PROVIDER, ivProvider);\\n    }\\n\\n    function setPriceProvider(address priceProvider) external override onlyOwner {\\n        _setModule(PRICE_PROVIDER, priceProvider);\\n    }\\n\\n    function setCapProvider(address capProvider) external override onlyOwner {\\n        _setModule(CAP_PROVIDER, capProvider);\\n    }\\n\\n    function setAMMFactory(address ammFactory) external override onlyOwner {\\n        _setModule(AMM_FACTORY, ammFactory);\\n    }\\n\\n    function setOptionFactory(address optionFactory) external override onlyOwner {\\n        _setModule(OPTION_FACTORY, optionFactory);\\n    }\\n\\n    function setOptionHelper(address optionHelper) external override onlyOwner {\\n        _setModule(OPTION_HELPER, optionHelper);\\n    }\\n\\n    function setOptionPoolRegistry(address optionPoolRegistry) external override onlyOwner {\\n        _setModule(OPTION_POOL_REGISTRY, optionPoolRegistry);\\n    }\\n\\n    function getParameter(bytes32 name) external override view returns (uint256) {\\n        return _parameters[name];\\n    }\\n\\n    function getEmergencyStop() external override view returns (address) {\\n        return getModule(EMERGENCY_STOP);\\n    }\\n\\n    function getPricingMethod() external override view returns (address) {\\n        return getModule(PRICING_METHOD);\\n    }\\n\\n    function getIVGuesser() external override view returns (address) {\\n        return getModule(IV_GUESSER);\\n    }\\n\\n    function getIVProvider() external override view returns (address) {\\n        return getModule(IV_PROVIDER);\\n    }\\n\\n    function getPriceProvider() external override view returns (address) {\\n        return getModule(PRICE_PROVIDER);\\n    }\\n\\n    function getCapProvider() external override view returns (address) {\\n        return getModule(CAP_PROVIDER);\\n    }\\n\\n    function getAMMFactory() external override view returns (address) {\\n        return getModule(AMM_FACTORY);\\n    }\\n\\n    function getOptionFactory() external override view returns (address) {\\n        return getModule(OPTION_FACTORY);\\n    }\\n\\n    function getOptionHelper() external override view returns (address) {\\n        return getModule(OPTION_HELPER);\\n    }\\n\\n    function getOptionPoolRegistry() external override view returns (address) {\\n        return getModule(OPTION_POOL_REGISTRY);\\n    }\\n\\n    function owner() public override(Ownable, IConfigurationManager) view returns (address) {\\n        return super.owner();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/configuration/ModuleStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @title ModuleStorage\\n * @author Pods Finance\\n * @notice Stores addresses from configuration modules\\n */\\ncontract ModuleStorage {\\n    mapping(bytes32 => address) private _addresses;\\n\\n    event ModuleSet(bytes32 indexed name, address indexed newAddress);\\n\\n    /**\\n     * @dev Get a configuration module address\\n     * @param name The name of a module\\n     */\\n    function getModule(bytes32 name) public view returns (address) {\\n        return _addresses[name];\\n    }\\n\\n    /**\\n     * @dev Set a configuration module address\\n     * @param name The name of a module\\n     * @param module The module address\\n     */\\n    function _setModule(bytes32 name, address module) internal {\\n        require(module != address(0), \\\"ModuleStorage: Invalid module\\\");\\n        _addresses[name] = module;\\n        emit ModuleSet(name, module);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IConfigurationManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity >=0.6.12;\\n\\ninterface IConfigurationManager {\\n    function setParameter(bytes32 name, uint256 value) external;\\n\\n    function setEmergencyStop(address emergencyStop) external;\\n\\n    function setPricingMethod(address pricingMethod) external;\\n\\n    function setIVGuesser(address ivGuesser) external;\\n\\n    function setIVProvider(address ivProvider) external;\\n\\n    function setPriceProvider(address priceProvider) external;\\n\\n    function setCapProvider(address capProvider) external;\\n\\n    function setAMMFactory(address ammFactory) external;\\n\\n    function setOptionFactory(address optionFactory) external;\\n\\n    function setOptionHelper(address optionHelper) external;\\n\\n    function setOptionPoolRegistry(address optionPoolRegistry) external;\\n\\n    function getParameter(bytes32 name) external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function getEmergencyStop() external view returns (address);\\n\\n    function getPricingMethod() external view returns (address);\\n\\n    function getIVGuesser() external view returns (address);\\n\\n    function getIVProvider() external view returns (address);\\n\\n    function getPriceProvider() external view returns (address);\\n\\n    function getCapProvider() external view returns (address);\\n\\n    function getAMMFactory() external view returns (address);\\n\\n    function getOptionFactory() external view returns (address);\\n\\n    function getOptionHelper() external view returns (address);\\n\\n    function getOptionPoolRegistry() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ModuleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ParameterSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getAMMFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCapProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmergencyStop\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIVGuesser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIVProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOptionFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOptionHelper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOptionPoolRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getParameter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricingMethod\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ammFactory\",\"type\":\"address\"}],\"name\":\"setAMMFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"capProvider\",\"type\":\"address\"}],\"name\":\"setCapProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emergencyStop\",\"type\":\"address\"}],\"name\":\"setEmergencyStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ivGuesser\",\"type\":\"address\"}],\"name\":\"setIVGuesser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ivProvider\",\"type\":\"address\"}],\"name\":\"setIVProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"optionFactory\",\"type\":\"address\"}],\"name\":\"setOptionFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"optionHelper\",\"type\":\"address\"}],\"name\":\"setOptionHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"optionPoolRegistry\",\"type\":\"address\"}],\"name\":\"setOptionPoolRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setParameter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceProvider\",\"type\":\"address\"}],\"name\":\"setPriceProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pricingMethod\",\"type\":\"address\"}],\"name\":\"setPricingMethod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ConfigurationManager","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}