{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/token/erc721/DefiPassportClaimer.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport {Address} from \\\"../../lib/Address.sol\\\";\\nimport {Ownable} from \\\"../../lib/Ownable.sol\\\";\\nimport {ISapphireCreditScore} from \\\"../../debt/sapphire/ISapphireCreditScore.sol\\\";\\nimport {SapphireTypes} from \\\"../../debt/sapphire/SapphireTypes.sol\\\";\\nimport {IDefiPassport} from \\\"./IDefiPassport.sol\\\";\\n\\ncontract DefiPassportClaimer is Ownable {\\n\\n    /* ========== Libraries ========== */\\n\\n    using Address for address;\\n\\n    /* ========== Events ========== */\\n\\n    event CreditScoreContractSet(address _newContractAddress);\\n\\n    event DefiPassportContractSet(address _newDefiPassportContract);\\n\\n    /* ========== Public variables ========== */\\n\\n    ISapphireCreditScore public creditScoreContract;\\n\\n    IDefiPassport public defiPassport;\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(\\n        address _creditScoreContract,\\n        address _defiPassportContract\\n    )\\n        public\\n    {\\n        _setCreditScoreContract(_creditScoreContract);\\n        _setDefiPassportContract(_defiPassportContract);\\n    }\\n\\n    /* ========== Restricted functions ========== */\\n\\n    function setCreditScoreContract(\\n        address _creditScoreContract\\n    )\\n        external\\n        onlyOwner\\n    {\\n        _setCreditScoreContract(_creditScoreContract);\\n    }\\n\\n    /* ========== Public functions ========== */\\n\\n    /**\\n     * @notice Mints a passport to the user specified in the score proof\\n     *\\n     * @param _scoreProof The credit score proof of the receiver of the passport\\n     * @param _passportSkin The skin address of the passport\\n     * @param _skinId The ID of the skin NFT\\n     */\\n    function claimPassport(\\n        SapphireTypes.ScoreProof calldata _scoreProof,\\n        address _passportSkin,\\n        uint256 _skinId\\n    )\\n        external\\n    {\\n        creditScoreContract.verifyAndUpdate(_scoreProof);\\n        defiPassport.mint(\\n            _scoreProof.account,\\n            _passportSkin,\\n            _skinId\\n        );\\n    }\\n\\n    /* ========== Private functions ========== */\\n\\n    function _setCreditScoreContract(\\n        address _creditScoreContract\\n    )\\n        private\\n    {\\n        require(\\n            _creditScoreContract.isContract(),\\n            \\\"DefiPassportClaimer: credit score address is not a contract\\\"\\n        );\\n\\n        require(\\n            address(creditScoreContract) != _creditScoreContract,\\n            \\\"DefiPassportClaimer: cannot set the same contract address\\\"\\n        );\\n\\n        creditScoreContract = ISapphireCreditScore(_creditScoreContract);\\n\\n        emit CreditScoreContractSet(_creditScoreContract);\\n    }\\n\\n    function _setDefiPassportContract(\\n        address _defiPassportContract\\n    )\\n        private\\n    {\\n        require(\\n            _defiPassportContract.isContract(),\\n            \\\"DefiPassportClaimer: defi passport address is not a contract\\\"\\n        );\\n\\n        require(\\n            address(defiPassport) != _defiPassportContract,\\n            \\\"DefiPassportClaimer: cannot set the same contract address\\\"\\n        );\\n\\n        defiPassport = IDefiPassport(_defiPassportContract);\\n\\n        emit DefiPassportContractSet(_defiPassportContract);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.5.16;\\n\\n/**\\n * @dev Collection of functions related to the address type.\\n *      Take from OpenZeppelin at\\n *      https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/debt/sapphire/ISapphireCreditScore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport {SapphireTypes} from \\\"./SapphireTypes.sol\\\";\\n\\ninterface ISapphireCreditScore {\\n    function updateMerkleRoot(bytes32 newRoot) external;\\n\\n    function setMerkleRootUpdater(address merkleRootUpdater) external;\\n\\n    function verifyAndUpdate(SapphireTypes.ScoreProof calldata proof) external returns (uint256, uint16);\\n\\n    function getLastScore(address user) external view returns (uint256, uint16, uint256);\\n\\n    function setMerkleRootDelay(uint256 delay) external;\\n\\n    function setPause(bool status) external;\\n}\\n\"\r\n    },\r\n    \"contracts/debt/sapphire/SapphireTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nlibrary SapphireTypes {\\n\\n    struct ScoreProof {\\n        address account;\\n        uint256 score;\\n        bytes32[] merkleProof;\\n    }\\n\\n    struct CreditScore {\\n        uint256 score;\\n        uint256 lastUpdated;\\n    }\\n\\n    struct Vault {\\n        uint256 collateralAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    enum Operation {\\n        Deposit,\\n        Withdraw,\\n        Borrow,\\n        Repay,\\n        Liquidate\\n    }\\n\\n    struct Action {\\n        uint256 amount;\\n        Operation operation;\\n        address userToLiquidate;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/token/erc721/IDefiPassport.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ncontract IDefiPassport {\\n    function mint(\\n        address _to,\\n        address _passportSkin,\\n        uint256 _skinTokenId\\n    )\\n        external\\n        returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creditScoreContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defiPassportContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newContractAddress\",\"type\":\"address\"}],\"name\":\"CreditScoreContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newDefiPassportContract\",\"type\":\"address\"}],\"name\":\"DefiPassportContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct SapphireTypes.ScoreProof\",\"name\":\"_scoreProof\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_passportSkin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_skinId\",\"type\":\"uint256\"}],\"name\":\"claimPassport\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creditScoreContract\",\"outputs\":[{\"internalType\":\"contract ISapphireCreditScore\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defiPassport\",\"outputs\":[{\"internalType\":\"contract IDefiPassport\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creditScoreContract\",\"type\":\"address\"}],\"name\":\"setCreditScoreContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DefiPassportClaimer","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000427d3b028fb15a06c2d75be8e8a2238aad41ed3a000000000000000000000000933492b6b7038a7e4f14b64defe40463f9bc3508","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}