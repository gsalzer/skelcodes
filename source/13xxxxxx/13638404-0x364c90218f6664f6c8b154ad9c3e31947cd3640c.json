{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IERC20Compatible {\r\n    function transfer(address _to, uint _value) external;\r\n    function approve(address _spender, uint _value) external;\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(address _from, address _to, uint _value) external;\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function withdraw(uint wad) external;\r\n    function balanceOf(address guy) external view returns (uint balance);\r\n    function totalSupply() external view returns (uint);\r\n    function approve(address guy, uint wad) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address dst, uint wad) external returns (bool);\r\n    function transferFrom(address src, address dst, uint wad) external returns (bool);\r\n}\r\n\r\ninterface IChiToken is IERC20 {\r\n    function mint(uint256 value) external;\r\n    function free(uint256 value) external returns (uint256);\r\n    function freeUpTo(uint256 value) external returns (uint256);\r\n    function freeFrom(address from, uint256 value) external returns (uint256);\r\n    function freeFromUpTo(address from, uint256 value) external returns (uint256);\r\n}\r\n\r\ncontract TradingVault {\r\n\r\n    IChiToken constant chi = IChiToken(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\r\n    IWETH constant wtok = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n    modifier discountGas(uint8 burn) {\r\n        uint256 gasStart = gasleft();\r\n        _;\r\n        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\r\n        if (burn != 0 && gasSpent > 50000) {\r\n            chi.freeUpTo( (((gasSpent + 14154) / 41947) * uint256(burn)) / 0xFF );\r\n        }\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(0xaaAAAEB932C0527655BaFF3bBbE3264bc61271E8 == msg.sender || 0xAaaaAf4bf78E014Af3a25DBc702e7493FB3b98c8 == msg.sender || 0xaAaAA22233Cf3A2eEfACB085F5E2d828fB47f458 == msg.sender || 0xaaAAa85601E05dfA39cf4A0A037dD371A0db8887 == msg.sender || 0xAAAaA29A382baa888655841a3d9af997044fC8c9 == msg.sender || 0xAAAAA0bfA6A92ad1531B2Aa438BDDdF50DCA7Ee2 == msg.sender || 0xaAAAA319f89a58F7e0CfD2C86F2D7047aa0c32D7 == msg.sender || 0xAaaaADDd3f56601bC5BE6DD1e2655F9029531788 == msg.sender || 0xaaaaA3F91B2D4b714526D0096485fa34B63F8807 == msg.sender || 0xAaaAaf4acD6e97219e35A807Aab2c041283DF5fe == msg.sender || 0xaaAAA6fF8986A294E5A817187921Ae47BddFbFF4 == msg.sender || 0xAAaAa328bd652D0cB9E7A112476FC1AFF458a9C4 == msg.sender || 0xAaAaA2789CDc3c97C1dCe79AC1a1A163f014d882 == msg.sender || 0xAAAaA3A7370D91A983067503573a55A2BC3EC1ca == msg.sender || 0xaaAAab018316f37951E2894585C160514F495582 == msg.sender || 0xAAaaaD2B13Cf538D5295c53c65Acb7185036D0c8 == msg.sender, \"NS\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n    }\r\n\r\n    function withdrawEther(uint256 amount, address payable to) public onlyOwner {\r\n        to.transfer(amount);\r\n    }\r\n\r\n    function depositEther(uint256 amount) public onlyOwner {\r\n        if (amount == 0) {\r\n            wtok.deposit{value: address(this).balance}();\r\n        } else {\r\n            wtok.deposit{value: amount}();\r\n        }\r\n    }\r\n\r\n    function withdrawToken(address token, uint256 amount, address to) public onlyOwner {\r\n        IERC20Compatible erc20token = IERC20Compatible(token);\r\n        erc20token.transfer(to, amount);\r\n    }\r\n\r\n    function refill(uint256 totAmount, uint256[] calldata amounts, address payable[] calldata to, uint8 burn) external onlyOwner discountGas(burn) {\r\n        wtok.withdraw(totAmount);\r\n        for (uint i = 0; i < amounts.length; i++) {\r\n            to[i].transfer(amounts[i]);\r\n        }\r\n    }\r\n\r\n    function multiCall(address[] calldata impls, bytes[] calldata data, uint8 burn) external onlyOwner discountGas(burn) payable {\r\n        for (uint256 i = 0; i < impls.length; i++) {\r\n            (bool success, bytes memory result) = impls[i].delegatecall(data[i]);\r\n            if (!success) {\r\n                revert(_getRevertMsg(result));\r\n            }\r\n        }\r\n    }\r\n\r\n    function singleCall(address impl, bytes calldata data, uint8 burn) external onlyOwner discountGas(burn) payable {\r\n        (bool success, bytes memory result) = impl.delegatecall(data);\r\n        if (!success) {\r\n            revert(_getRevertMsg(result));\r\n        }\r\n    }\r\n\r\n    // https://ethereum.stackexchange.com/a/83577\r\n    function _getRevertMsg(bytes memory _returnData) private pure returns (string memory) {\r\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\r\n        if (_returnData.length < 68) return 'ER';\r\n        assembly {\r\n            // Slice the sighash.\r\n            _returnData := add(_returnData, 0x04)\r\n        }\r\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\r\n    }\r\n\r\n    fallback() external {\r\n        require(false, \"FB\");\r\n    }\r\n\r\n    receive () payable external {\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"impls\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"}],\"name\":\"multiCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address payable[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"}],\"name\":\"refill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"}],\"name\":\"singleCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"TradingVault","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6c1573239d3db93c4466ba3e0d9fa6b34dc6664f25132f7b03f6570055e5aaf5"}]}