{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/rita/Documents/less-contracts/contracts/LessLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./interface.sol\\\";\\n\\ncontract LessLibrary is Ownable {\\n    address public usd;\\n    address[] public factoryAddress = new address[](2);\\n\\n    uint256 private minInvestorBalance = 1000 * 1e18;\\n    uint256 private votingTime = 5 minutes; //three days\\n    uint256 private registrationTime = 5 minutes; // one day\\n    uint256 private minVoterBalance = 500 * 1e18; // minimum number of  tokens to hold to vote\\n    uint256 private minCreatorStakedBalance = 10000 * 1e18; // minimum number of tokens to hold to launch rocket\\n    uint8 private feePercent = 2;\\n    uint256 private usdFee;\\n    address private uniswapRouter; // uniswapV2 Router\\n    address payable private lessVault;\\n    address private devAddress;\\n    PresaleInfo[] private presaleAddresses; // track all presales created\\n\\n    mapping(address=> bool) public stablecoinWhitelist;\\n\\n    mapping(address => bool) private isPresale;\\n    mapping(bytes32 => bool) private usedSignature;\\n    mapping(address => bool) private signers; //adresses that can call sign functions\\n\\n    struct PresaleInfo {\\n        bytes32 title;\\n        address presaleAddress;\\n        string description;\\n        bool isCertified;\\n        uint256 openVotingTime;\\n    }\\n\\n    modifier onlyDev() {\\n        require(owner() == msg.sender || msg.sender == devAddress, \\\"onlyDev\\\");\\n        _;\\n    }\\n\\n    modifier onlyPresale() {\\n        require(isPresale[msg.sender], \\\"Not presale\\\");\\n        _;\\n    }\\n\\n    modifier onlyFactory() {\\n        require(factoryAddress[0] == msg.sender || factoryAddress[1] == msg.sender, \\\"onlyFactory\\\");\\n        _;\\n    }\\n\\n    modifier factoryIndexCheck(uint8 _index){\\n        require(_index == 0 || _index == 1, \\\"Invalid index\\\");\\n        _;\\n    }\\n\\n    constructor(address _dev, address payable _vault, address _uniswapRouter, address _usd, address[] memory _stablecoins, uint8 _usdDecimals) {\\n        require(_dev != address(0) && _vault != address(0) && _usdDecimals > 0, \\\"Wrong params\\\");\\n        devAddress = _dev;\\n        lessVault = _vault;\\n        uniswapRouter = _uniswapRouter;\\n        usd = _usd;\\n        usdFee = 1000 * 10 ** _usdDecimals;\\n        for(uint256 i=0; i <_stablecoins.length; i++){\\n            stablecoinWhitelist[_stablecoins[i]] = true;\\n        }\\n    }\\n\\n    function setFactoryAddress(address _factory, uint8 _index) external onlyDev factoryIndexCheck(_index){\\n        require(_factory != address(0), \\\"not 0\\\");\\n        factoryAddress[_index] = _factory;\\n    }\\n\\n    function setUsdFee(uint256 _newAmount) external onlyDev {\\n        require(_newAmount > 0, \\\"0 amt\\\");\\n        usdFee = _newAmount;\\n    }\\n\\n    function setUsdAddress(address _newAddress) external onlyDev {\\n        require(_newAddress != address(0), \\\"0 addr\\\");\\n        usd = _newAddress;\\n    }\\n\\n    function addPresaleAddress(\\n        address _presale,\\n        bytes32 _title,\\n        string memory _description,\\n        bool _type,\\n        uint256 _openVotingTime\\n    )\\n        external\\n        onlyFactory\\n        returns (uint256)\\n    {\\n        presaleAddresses.push(PresaleInfo(_title, _presale, _description, _type, _openVotingTime));\\n        isPresale[_presale] = true;\\n        return presaleAddresses.length - 1;\\n    }\\n\\n    function addOrRemoveStaiblecoin(address _stablecoin, bool _isValid) external onlyDev {\\n        require(_stablecoin != address(0), \\\"Not 0 addr\\\");\\n        if(_isValid){\\n            require(!stablecoinWhitelist[_stablecoin], \\\"Wrong param\\\");\\n        }\\n        else {\\n            require(stablecoinWhitelist[_stablecoin], \\\"Wrong param\\\");\\n        }\\n        stablecoinWhitelist[_stablecoin] = _isValid;\\n    }\\n\\n    function changeDev(address _newDev) external onlyDev {\\n        require(_newDev != address(0), \\\"Wrong new address\\\");\\n        devAddress = _newDev;\\n    }\\n\\n    function setVotingTime(uint256 _newVotingTime) external onlyDev {\\n        require(_newVotingTime > 0, \\\"Wrong new time\\\");\\n        votingTime = _newVotingTime;\\n    }\\n\\n    function setRegistrationTime(uint256 _newRegistrationTime) external onlyDev {\\n        require(_newRegistrationTime > 0, \\\"Wrong new time\\\");\\n        registrationTime = _newRegistrationTime;\\n    }\\n\\n    function setUniswapRouter(address _uniswapRouter) external onlyDev {\\n        uniswapRouter = _uniswapRouter;\\n    }\\n\\n    function setSingUsed(bytes memory _sign, address _presale) external {\\n        require(isPresale[_presale], \\\"u have no permition\\\");\\n        usedSignature[keccak256(_sign)] = true;\\n    }\\n\\n    function addOrRemoveSigner(address _address, bool _canSign) external onlyDev {\\n        signers[_address] = _canSign;\\n    }\\n\\n    function getPresalesCount() external view returns (uint256) {\\n        return presaleAddresses.length;\\n    }\\n\\n    function getUsdFee() external view returns(uint256, address) {\\n        return (usdFee, usd);\\n    }\\n\\n    function isValidStablecoin(address _stablecoin) external view returns (bool) {\\n        return stablecoinWhitelist[_stablecoin];\\n    }\\n\\n    function getPresaleAddress(uint256 id) external view returns (address) {\\n        return presaleAddresses[id].presaleAddress;\\n    }\\n\\n    function getVotingTime() external view returns(uint256){\\n        return votingTime;\\n    }\\n\\n    function getRegistrationTime() external view returns(uint256){\\n        return registrationTime;\\n    }\\n\\n    function getMinInvestorBalance() external view returns (uint256) {\\n        return minInvestorBalance;\\n    }\\n\\n    function getDev() external view onlyFactory returns (address) {\\n        return devAddress;\\n    }\\n\\n    function getMinVoterBalance() external view returns (uint256) {\\n        return minVoterBalance;\\n    }\\n    //back!!!\\n    function getMinYesVotesThreshold(uint256 totalStakedAmount) external pure returns (uint256) {\\n        uint256 stakedAmount = totalStakedAmount;\\n        return stakedAmount / 10;\\n    }\\n\\n    function getFactoryAddress(uint8 _index) external view factoryIndexCheck(_index) returns (address) {\\n        return factoryAddress[_index];\\n    }\\n\\n    function getMinCreatorStakedBalance() external view returns (uint256) {\\n        return minCreatorStakedBalance;\\n    }\\n\\n    function getUniswapRouter() external view returns (address) {\\n        return uniswapRouter;\\n    }\\n\\n    function calculateFee(uint256 amount) external view onlyPresale returns(uint256){\\n        return amount * feePercent / 100;\\n    }\\n\\n    function getVaultAddress() external view onlyPresale returns(address payable){\\n        return lessVault;\\n    }\\n\\n    function getArrForSearch() external view returns(PresaleInfo[] memory) {\\n        return presaleAddresses;\\n    }\\n    \\n    function _verifySigner(bytes32 data, bytes memory signature, uint8 _index)\\n        public\\n        view\\n        factoryIndexCheck(_index)\\n        returns (bool)\\n    {\\n        address messageSigner =\\n            ECDSA.recover(data, signature);\\n        require(\\n            isSigner(messageSigner),\\n            \\\"Unauthorised signer\\\"\\n        );\\n        return true;\\n    }\\n\\n    function getSignUsed(bytes memory _sign) external view returns(bool) {\\n        return usedSignature[keccak256(_sign)];\\n    }\\n\\n    function isSigner(address _address) internal view returns (bool) {\\n        return signers[_address];\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/rita/Documents/less-contracts/contracts/interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Router02 {\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] memory path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsOut(uint256 amountIn, address[] memory path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n}\\n\\ninterface IUniswapV2Factory02 {\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n}\"\r\n    },\r\n    \"/Users/rita/Documents/less-contracts/contracts/libraries/Calculation1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../LessLibrary.sol\\\";\\n\\nlibrary Calculation1 {\\n\\n    function countAmountOfTokens(\\n        uint256 _hardCap,\\n        uint256 _tokenPrice,\\n        uint256 _liqPrice,\\n        uint256 _liqPerc,\\n        uint8 _decimalsToken,\\n        uint8 _decimalsNativeToken\\n    ) external pure returns (uint256[] memory) {\\n        uint256[] memory tokenAmounts = new uint256[](3);\\n        if (_liqPrice != 0 && _liqPerc != 0) {\\n            uint256 factor;\\n            if(_decimalsNativeToken != 18){\\n                if(_decimalsNativeToken < 18)\\n                    factor = uint256(10)**uint256(18 - _decimalsNativeToken);\\n                else\\n                    factor = uint256(10)**uint256(_decimalsNativeToken - 18);\\n            }\\n            else\\n                factor = 1;\\n            tokenAmounts[0] = ((_hardCap *\\n                _liqPerc *\\n                (uint256(10)**uint256(_decimalsToken)) * factor) / (_liqPrice * 100));\\n            require(tokenAmounts[0] > 0, \\\"Wrokng\\\");\\n        }\\n\\n        tokenAmounts[1] =\\n            (_hardCap * (uint256(10)**uint256(_decimalsToken))) /\\n            _tokenPrice;\\n        tokenAmounts[2] = tokenAmounts[0] + tokenAmounts[1];\\n        require(tokenAmounts[1] > 0, \\\"Wrong parameters\\\");\\n        return tokenAmounts;\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return recover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return recover(hash, r, vs);\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liqPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liqPerc\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_decimalsToken\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_decimalsNativeToken\",\"type\":\"uint8\"}],\"name\":\"countAmountOfTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"Calculation1","CompilerVersion":"v0.8.5+commit.a4f2e591","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}