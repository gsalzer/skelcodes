{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.6.4 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.3.1\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/Pausable.sol@v4.3.1\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.3.1\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.3.1\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.3.1\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.3.1\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721.sol@v4.3.1\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IKoansToken.sol\r\n\r\npragma solidity ^0.8.6;\r\n\r\ninterface IKoansToken is IERC721 {\r\n    event KoanCreated(uint256 indexed tokenId);\r\n\r\n    event KoanBurned(uint256 indexed tokenId);\r\n\r\n    event FoundersDAOUpdated(address koansDAO);\r\n\r\n    event MinterUpdated(address minter);\r\n\r\n    event MinterLocked();\r\n\r\n    function setContractURIHash(string memory newContractURIHash) external;\r\n    \r\n    function setFoundersDAO(address _foundersDAO) external;\r\n\r\n    function setMinter(address _minter) external;\r\n    \r\n    function lockMinter() external;\r\n\r\n    function mintFoundersDAOKoan(string memory _foundersDAOMetadataURI) external;\r\n\r\n    function mint() external returns (uint256);\r\n\r\n    function burn(uint256 tokenId) external;\r\n\r\n    function setMetadataURI(uint256 tokenId, string memory metadataURI) external;\r\n\r\n}\r\n\r\n\r\n// File contracts/interfaces/ISashoToken.sol\r\n\r\npragma solidity ^0.8.6;\r\n\r\ninterface ISashoToken is IERC20 {\r\n\r\n    function mint(address account, uint256 rawAmount) external;\r\n\r\n    function burn(uint256 tokenId) external;\r\n\r\n    function delegate(address delegatee) external;\r\n\r\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    function setMinter(address minter) external;\r\n\r\n    function lockMinter() external;\r\n\r\n    function getCurrentVotes(address account) external view returns (uint96);\r\n\r\n    function getPriorVotes(address account, uint blockNumber) external view returns (uint96);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IKoansAuctionHouse.sol\r\n\r\npragma solidity ^0.8.6;\r\n\r\ninterface IKoansAuctionHouse {\r\n    struct Auction {\r\n        // ID for the Koan (ERC721 token ID)\r\n        uint256 koanId;\r\n        // The current highest bid amount\r\n        uint256 amount;\r\n        // The time that the auction started\r\n        uint256 startTime;\r\n        // The time that the auction is scheduled to end\r\n        uint256 endTime;\r\n        // The address of the current highest bid\r\n        address payable bidder;\r\n        // Whether or not the auction has been settled\r\n        bool settled;\r\n        // The address to payout a portion of the auction's proceeds to.\r\n        address payable payoutAddress;\r\n    }\r\n\r\n    event AuctionCreated(uint256 indexed koanId, uint256 startTime, uint256 endTime);\r\n\r\n    event AuctionBid(uint256 indexed koanId, address sender, uint256 value, bool extended);\r\n\r\n    event AuctionExtended(uint256 indexed koanId, uint256 endTime);\r\n\r\n    event AuctionSettled(uint256 indexed koanId, address winner, uint256 amount);\r\n\r\n    event AuctionTimeBufferUpdated(uint256 timeBuffer);\r\n\r\n    event AuctionReservePriceUpdated(uint256 reservePrice);\r\n\r\n    event AuctionMinBidIncrementPercentageUpdated(uint256 minBidIncrementPercentage);\r\n\r\n    event PayoutRewardBPUpdated(uint256 artistRewardBP);\r\n\r\n    event AuctionDurationUpdated(uint256 duration);\r\n\r\n    function settleCurrentAndCreateNewAuction() external;\r\n\r\n    function settleAuction() external;\r\n\r\n    function createBid(uint256 koanId) external payable;\r\n\r\n    function addOffer(string memory _uri, address _payoutAddress) external;\r\n\r\n    function pause() external;\r\n\r\n    function unpause() external;\r\n\r\n    function setTimeBuffer(uint256 _timeBuffer) external;\r\n\r\n    function setReservePrice(uint256 _reservePrice) external;\r\n\r\n    function setMinBidIncrementPercentage(uint8 _minBidIncrementPercentage) external;\r\n\r\n    function setPayoutRewardBP(uint256 _payoutRewardBP) external;\r\n\r\n    function setDuration(uint256 _duration) external;\r\n\r\n    function setOfferAddress(address _koanOfferAddress) external;\r\n\r\n}\r\n\r\n\r\n// File contracts/interfaces/IWETH.sol\r\n\r\n\r\npragma solidity ^0.8.6;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 wad) external;\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\n// File contracts/KoansAuctionHouse.sol\r\n\r\n\r\n/// @title The Koans auction house.\r\n\r\n// KoansAuctionHouse.sol is a modified version of Nouns's AuctionHouse.sol:\r\n// https://etherscan.io/address/0xf15a943787014461d94da08ad4040f79cd7c124e#code\r\n\r\n\r\npragma solidity ^0.8.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract KoansAuctionHouse is IKoansAuctionHouse, Pausable, ReentrancyGuard, Ownable {\r\n    // The Koans ERC721 token contract\r\n    IKoansToken public koans;\r\n\r\n    // The Sashos ERC20 token contract.\r\n    ISashoToken public sashos;\r\n\r\n    // The address of the WETH contract\r\n    address public weth;\r\n\r\n    // The minimum amount of time left in an auction after a new bid is created\r\n    uint256 public timeBuffer;\r\n\r\n    // The minimum price accepted in an auction\r\n    uint256 public reservePrice;\r\n\r\n    // The minimum percentage difference between the last bid amount and the current bid\r\n    uint8 public minBidIncrementPercentage;\r\n\r\n    // The duration of a single auction\r\n    uint256 public duration;\r\n\r\n    // The active auction\r\n    IKoansAuctionHouse.Auction public auction;\r\n\r\n    // Vector of offered URIs.\r\n    string[] public offerURIs;\r\n\r\n    // Vector of the addresses to payout to for each of the offer URIs.\r\n    address payable[] public offerPayoutAddresses;\r\n\r\n    // The index of the next offer to be auctioned off.\r\n    uint256 public nextOfferURIIndex;\r\n\r\n    // Address of the Koan Offer contract.\r\n    address public koanOfferAddress;\r\n\r\n    // Basis points of the fraction of the auction to be sent to the a\r\n    // payout address of an auction as a reward.\r\n    uint256 public payoutRewardBP;\r\n\r\n    // Address of the Koans founder's wallet.\r\n    address public koansFoundersAddress;\r\n\r\n    // Basis points of the fraction of the auction to be sent to the \r\n\r\n    /**\r\n     * @notice Initialize the auction house and base contracts,\r\n     * populate configuration values, and pause the contract.\r\n     * @dev This function can only be called once.\r\n     */\r\n    constructor(\r\n        IKoansToken _koans,\r\n        ISashoToken _sashos,\r\n        address _weth,\r\n        uint256 _timeBuffer,\r\n        uint256 _reservePrice,\r\n        uint8 _minBidIncrementPercentage,\r\n        uint256 _duration,\r\n        address _koanOfferAddress,\r\n        address _koansFoundersAddress\r\n    ) {\r\n        _pause();\r\n\r\n        koans = _koans;\r\n        sashos = _sashos;\r\n        weth = _weth;\r\n        timeBuffer = _timeBuffer;\r\n        reservePrice = _reservePrice;\r\n        minBidIncrementPercentage = _minBidIncrementPercentage;\r\n        duration = _duration;\r\n        koanOfferAddress = _koanOfferAddress;\r\n        payoutRewardBP = 5000;\r\n        nextOfferURIIndex = 0;\r\n        koansFoundersAddress = _koansFoundersAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Settle the current auction, mint a new Koan, and put it up for auction.\r\n     */\r\n    function settleCurrentAndCreateNewAuction() external override nonReentrant whenNotPaused {\r\n        _settleAuction();\r\n        _createAuction();\r\n    }\r\n\r\n    /**\r\n     * @notice Settle the current auction.\r\n     * @dev This function can only be called when the contract is paused.\r\n     */\r\n    function settleAuction() external override whenPaused nonReentrant {\r\n        _settleAuction();\r\n    }\r\n\r\n    /**\r\n     * @notice Create a bid for a Koan, with a given amount.\r\n     * @dev This contract only accepts payment in ETH.\r\n     */\r\n    function createBid(uint256 koanId) external payable override nonReentrant {\r\n        IKoansAuctionHouse.Auction memory _auction = auction;\r\n\r\n        require(_auction.koanId == koanId, \"Koan not up for auction\");\r\n        require(block.timestamp < _auction.endTime, \"Auction expired\");\r\n        require(msg.value >= reservePrice, \"Must send at least reservePrice\");\r\n        require(\r\n            msg.value >= _auction.amount + ((_auction.amount * minBidIncrementPercentage) / 100),\r\n            \"Insufficient bid.\"\r\n        );\r\n\r\n        address payable lastBidder = _auction.bidder;\r\n\r\n        // Refund the last bidder, if applicable\r\n        if (lastBidder != address(0)) {\r\n            _safeTransferETHWithFallback(lastBidder, _auction.amount);\r\n        }\r\n\r\n        auction.amount = msg.value;\r\n        auction.bidder = payable(msg.sender);\r\n\r\n        // Extend the auction if the bid was received within `timeBuffer` of the auction end time\r\n        bool extended = _auction.endTime - block.timestamp < timeBuffer;\r\n        if (extended) {\r\n            auction.endTime = _auction.endTime = block.timestamp + timeBuffer;\r\n        }\r\n\r\n        emit AuctionBid(_auction.koanId, msg.sender, msg.value, extended);\r\n\r\n        if (extended) {\r\n            emit AuctionExtended(_auction.koanId, _auction.endTime);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Add an offer to the queue of offers to be auctioned.\r\n     */\r\n    function addOffer(string memory _uri, address _payoutAddress) external override nonReentrant {\r\n        require(msg.sender == koanOfferAddress, \"Must be Offer contract\");\r\n        offerURIs.push(_uri);\r\n        offerPayoutAddresses.push(payable(_payoutAddress));\r\n    }  \r\n\r\n    /**\r\n     * @notice Pause the Koans auction house.\r\n     * @dev This function can only be called by the owner when the\r\n     * contract is unpaused. While no new auctions can be started when paused,\r\n     * anyone can settle an ongoing auction.\r\n     */\r\n    function pause() external override onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @notice Unpause the Koans auction house.\r\n     * @dev This function can only be called by the owner when the\r\n     * contract is paused. If required, this function will start a new auction.\r\n     */\r\n    function unpause() external override onlyOwner {\r\n        _unpause();\r\n\r\n        if (auction.startTime == 0 || auction.settled) {\r\n            _createAuction();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Set the auction time buffer.\r\n     * @dev Only callable by the owner.\r\n     */\r\n    function setTimeBuffer(uint256 _timeBuffer) external override onlyOwner {\r\n        timeBuffer = _timeBuffer;\r\n\r\n        emit AuctionTimeBufferUpdated(_timeBuffer);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the auction reserve price.\r\n     * @dev Only callable by the owner.\r\n     */\r\n    function setReservePrice(uint256 _reservePrice) external override onlyOwner {\r\n        reservePrice = _reservePrice;\r\n\r\n        emit AuctionReservePriceUpdated(_reservePrice);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the auction minimum bid increment percentage.\r\n     * @dev Only callable by the owner.\r\n     */\r\n    function setMinBidIncrementPercentage(uint8 _minBidIncrementPercentage) external override onlyOwner {\r\n        minBidIncrementPercentage = _minBidIncrementPercentage;\r\n\r\n        emit AuctionMinBidIncrementPercentageUpdated(_minBidIncrementPercentage);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the percent of the auction proceeds that are sent to the payout address.\r\n     * @dev Only callable by the owner.\r\n     */\r\n    function setPayoutRewardBP(uint256 _payoutRewardBP) external override onlyOwner {\r\n        require(_payoutRewardBP <= 10000, \"BP greater than 10000\");\r\n        if (auction.koanId < 100) {\r\n            require(_payoutRewardBP <= 9000, \"BP greather than 9000\");\r\n        }\r\n        payoutRewardBP = _payoutRewardBP;\r\n\r\n        emit PayoutRewardBPUpdated(_payoutRewardBP);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the duration of the auction in seconds.\r\n     * @dev Only callable by the owner.\r\n     */\r\n    function setDuration(uint256 _duration) external override onlyOwner {\r\n        duration = _duration;\r\n        \r\n        emit AuctionDurationUpdated(_duration);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the address of the offer contract.\r\n     * @dev Only callable by the owner.\r\n     */\r\n    function setOfferAddress(address _koanOfferAddress) external override onlyOwner {\r\n        koanOfferAddress = _koanOfferAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Create an auction.\r\n     * @dev Store the auction details in the `auction` state variable and emit an AuctionCreated event.\r\n     * If the mint reverts, the minter was updated without pausing this contract first. To remedy this,\r\n     * catch the revert and pause this contract.\r\n     */\r\n    function _createAuction() internal {\r\n        require(nextOfferURIIndex < offerURIs.length, \"No proposed URIs ready.\");\r\n        try koans.mint() returns (uint256 koanId) {\r\n            uint256 startTime = block.timestamp;\r\n            uint256 endTime = startTime + duration;\r\n            koans.setMetadataURI(koanId, offerURIs[nextOfferURIIndex]);\r\n            auction = Auction({\r\n                koanId: koanId,\r\n                amount: 0,\r\n                startTime: startTime,\r\n                endTime: endTime,\r\n                bidder: payable(0),\r\n                settled: false,\r\n                payoutAddress: offerPayoutAddresses[nextOfferURIIndex]\r\n            });\r\n\r\n            nextOfferURIIndex += 1;\r\n\r\n            emit AuctionCreated(koanId, startTime, endTime);\r\n        } catch Error(string memory) {\r\n            _pause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Settle an auction, finalizing the bid and paying out to the owner.\r\n     * @dev If there are no bids, the Koan is burned.\r\n     */\r\n    function _settleAuction() internal {\r\n        IKoansAuctionHouse.Auction memory _auction = auction;\r\n\r\n        require(_auction.startTime != 0, \"Auction hasn't begun\");\r\n        require(!_auction.settled, \"Auction has already been settled\");\r\n        require(block.timestamp >= _auction.endTime, \"Auction hasn't completed\");\r\n\r\n        auction.settled = true;\r\n\r\n        if (_auction.bidder == address(0)) {\r\n            koans.burn(_auction.koanId);\r\n        } else {\r\n            koans.transferFrom(address(this), _auction.bidder, _auction.koanId);\r\n        }\r\n\r\n\r\n        if (_auction.amount > 0) {\r\n            uint256 koansFoundersReward = 0;\r\n            if (auction.koanId < 100) {\r\n                koansFoundersReward = _auction.amount * 1000 / 10000;\r\n                _safeTransferETHWithFallback(koansFoundersAddress, koansFoundersReward);\r\n            }\r\n            uint256 payoutReward = _auction.amount * payoutRewardBP / 10000;\r\n            _safeTransferETHWithFallback(_auction.payoutAddress, payoutReward);\r\n            _safeTransferETHWithFallback(owner(), (_auction.amount - koansFoundersReward) - payoutReward);\r\n        }\r\n\r\n        sashos.mint(owner(), 1000000 ether);\r\n\r\n        emit AuctionSettled(_auction.koanId, _auction.bidder, _auction.amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer ETH. If the ETH transfer fails, wrap the ETH and try send it as WETH.\r\n     */\r\n    function _safeTransferETHWithFallback(address to, uint256 amount) internal {\r\n        if (!_safeTransferETH(to, amount)) {\r\n            IWETH(weth).deposit{ value: amount }();\r\n            IERC20(weth).transfer(to, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer ETH and return the success status.\r\n     * @dev This function only forwards 30,000 gas to the callee.\r\n     */\r\n    function _safeTransferETH(address to, uint256 value) internal returns (bool) {\r\n        (bool success, ) = to.call{ value: value, gas: 30_000 }(new bytes(0));\r\n        return success;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IKoansToken\",\"name\":\"_koans\",\"type\":\"address\"},{\"internalType\":\"contract ISashoToken\",\"name\":\"_sashos\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timeBuffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_minBidIncrementPercentage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_koanOfferAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_koansFoundersAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"koanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"extended\",\"type\":\"bool\"}],\"name\":\"AuctionBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"koanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"AuctionDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"koanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"AuctionExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBidIncrementPercentage\",\"type\":\"uint256\"}],\"name\":\"AuctionMinBidIncrementPercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"}],\"name\":\"AuctionReservePriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"koanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuctionSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeBuffer\",\"type\":\"uint256\"}],\"name\":\"AuctionTimeBufferUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"artistRewardBP\",\"type\":\"uint256\"}],\"name\":\"PayoutRewardBPUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_payoutAddress\",\"type\":\"address\"}],\"name\":\"addOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"koanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"payoutAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"koanId\",\"type\":\"uint256\"}],\"name\":\"createBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"koanOfferAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"koans\",\"outputs\":[{\"internalType\":\"contract IKoansToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"koansFoundersAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBidIncrementPercentage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOfferURIIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offerPayoutAddresses\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offerURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutRewardBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sashos\",\"outputs\":[{\"internalType\":\"contract ISashoToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_minBidIncrementPercentage\",\"type\":\"uint8\"}],\"name\":\"setMinBidIncrementPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_koanOfferAddress\",\"type\":\"address\"}],\"name\":\"setOfferAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_payoutRewardBP\",\"type\":\"uint256\"}],\"name\":\"setPayoutRewardBP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"}],\"name\":\"setReservePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeBuffer\",\"type\":\"uint256\"}],\"name\":\"setTimeBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settleAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settleCurrentAndCreateNewAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"KoansAuctionHouse","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000363b936661bd8efb51173680cf5eb66b93a4bafe0000000000000000000000006148529e57e3eab31b2a3cc116144f3f926c3530000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000012c00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000001518000000000000000000000000075d8d565332f062abb48eb10b4d65f1f6ab46eef000000000000000000000000d85f206282906c0fd759649736de0d27e3c25403","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3ad07d1c8d6a3a6564d9763111d3ef6abc33dd9bf6a90fca6806675c7ff04e78"}]}