{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"details\": {\r\n        \"constantOptimizer\": true,\r\n        \"cse\": true,\r\n        \"deduplicate\": true,\r\n        \"jumpdestRemover\": true,\r\n        \"orderLiterals\": true,\r\n        \"peephole\": true,\r\n        \"yul\": false\r\n      },\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/persistent/dispatcher/IDispatcher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IDispatcher Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IDispatcher {\\n    function cancelMigration(address _vaultProxy, bool _bypassFailure) external;\\n\\n    function claimOwnership() external;\\n\\n    function deployVaultProxy(\\n        address _vaultLib,\\n        address _owner,\\n        address _vaultAccessor,\\n        string calldata _fundName\\n    ) external returns (address vaultProxy_);\\n\\n    function executeMigration(address _vaultProxy, bool _bypassFailure) external;\\n\\n    function getCurrentFundDeployer() external view returns (address currentFundDeployer_);\\n\\n    function getFundDeployerForVaultProxy(address _vaultProxy)\\n        external\\n        view\\n        returns (address fundDeployer_);\\n\\n    function getMigrationRequestDetailsForVaultProxy(address _vaultProxy)\\n        external\\n        view\\n        returns (\\n            address nextFundDeployer_,\\n            address nextVaultAccessor_,\\n            address nextVaultLib_,\\n            uint256 executableTimestamp_\\n        );\\n\\n    function getMigrationTimelock() external view returns (uint256 migrationTimelock_);\\n\\n    function getNominatedOwner() external view returns (address nominatedOwner_);\\n\\n    function getOwner() external view returns (address owner_);\\n\\n    function getSharesTokenSymbol() external view returns (string memory sharesTokenSymbol_);\\n\\n    function getTimelockRemainingForMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (uint256 secondsRemaining_);\\n\\n    function hasExecutableMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (bool hasExecutableRequest_);\\n\\n    function hasMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (bool hasMigrationRequest_);\\n\\n    function removeNominatedOwner() external;\\n\\n    function setCurrentFundDeployer(address _nextFundDeployer) external;\\n\\n    function setMigrationTimelock(uint256 _nextTimelock) external;\\n\\n    function setNominatedOwner(address _nextNominatedOwner) external;\\n\\n    function setSharesTokenSymbol(string calldata _nextSymbol) external;\\n\\n    function signalMigration(\\n        address _vaultProxy,\\n        address _nextVaultAccessor,\\n        address _nextVaultLib,\\n        bool _bypassFailure\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/persistent/off-chain/fund-data-provider/FundDataProviderRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../fund-value-calculator/FundValueCalculatorRouter.sol\\\";\\n\\n/// @title FundDataProviderRouter Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A peripheral contract for routing fund data requests\\n/// @dev These are convenience functions intended for off-chain consumption,\\n/// some of which involve potentially expensive state transitions\\ncontract FundDataProviderRouter {\\n    address private immutable FUND_VALUE_CALCULATOR_ROUTER;\\n    address private immutable WETH_TOKEN;\\n\\n    constructor(address _fundValueCalculatorRouter, address _wethToken) public {\\n        FUND_VALUE_CALCULATOR_ROUTER = _fundValueCalculatorRouter;\\n        WETH_TOKEN = _wethToken;\\n    }\\n\\n    /// @notice Gets metrics related to fund value\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @return timestamp_ The current block timestamp\\n    /// @return sharesSupply_ The total supply of shares\\n    /// @return gavInEth_ The GAV quoted in ETH\\n    /// @return gavIsValid_ True if the GAV calc succeeded\\n    /// @return navInEth_ The NAV quoted in ETH\\n    /// @return navIsValid_ True if the NAV calc succeeded\\n    function getFundValueMetrics(address _vaultProxy)\\n        external\\n        returns (\\n            uint256 timestamp_,\\n            uint256 sharesSupply_,\\n            uint256 gavInEth_,\\n            bool gavIsValid_,\\n            uint256 navInEth_,\\n            bool navIsValid_\\n        )\\n    {\\n        timestamp_ = block.timestamp;\\n        sharesSupply_ = ERC20(_vaultProxy).totalSupply();\\n\\n        try\\n            FundValueCalculatorRouter(getFundValueCalculatorRouter()).calcGavInAsset(\\n                _vaultProxy,\\n                getWethToken()\\n            )\\n        returns (uint256 gav) {\\n            gavInEth_ = gav;\\n            gavIsValid_ = true;\\n        } catch {}\\n\\n        try\\n            FundValueCalculatorRouter(getFundValueCalculatorRouter()).calcNavInAsset(\\n                _vaultProxy,\\n                getWethToken()\\n            )\\n        returns (uint256 nav) {\\n            navInEth_ = nav;\\n            navIsValid_ = true;\\n        } catch {}\\n\\n        return (timestamp_, sharesSupply_, gavInEth_, gavIsValid_, navInEth_, navIsValid_);\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `FUND_VALUE_CALCULATOR_ROUTER` variable\\n    /// @return fundValueCalculatorRouter_ The `FUND_VALUE_CALCULATOR_ROUTER` variable value\\n    function getFundValueCalculatorRouter()\\n        public\\n        view\\n        returns (address fundValueCalculatorRouter_)\\n    {\\n        return FUND_VALUE_CALCULATOR_ROUTER;\\n    }\\n\\n    /// @notice Gets the `WETH_TOKEN` variable\\n    /// @return wethToken_ The `WETH_TOKEN` variable value\\n    function getWethToken() public view returns (address wethToken_) {\\n        return WETH_TOKEN;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/persistent/off-chain/fund-value-calculator/FundValueCalculatorRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../dispatcher/IDispatcher.sol\\\";\\nimport \\\"./IFundValueCalculator.sol\\\";\\n\\n/// @title FundValueCalculatorRouter Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A peripheral contract for routing value calculation requests\\n/// to the correct FundValueCalculator instance for a particular release\\n/// @dev These values should generally only be consumed from off-chain,\\n/// unless you understand how each release interprets each calculation\\ncontract FundValueCalculatorRouter {\\n    event FundValueCalculatorUpdated(address indexed fundDeployer, address fundValueCalculator);\\n\\n    address private immutable DISPATCHER;\\n\\n    mapping(address => address) private fundDeployerToFundValueCalculator;\\n\\n    constructor(address _dispatcher) public {\\n        DISPATCHER = _dispatcher;\\n    }\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @notice Calculates the GAV for a given fund\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @return denominationAsset_ The denomination asset of the fund\\n    /// @return gav_ The GAV quoted in the denomination asset\\n    function calcGav(address _vaultProxy)\\n        external\\n        returns (address denominationAsset_, uint256 gav_)\\n    {\\n        return getFundValueCalculatorForVault(_vaultProxy).calcGav(_vaultProxy);\\n    }\\n\\n    /// @notice Calculates the GAV for a given fund, quoted in a given asset\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @param _quoteAsset The quote asset\\n    /// @return gav_ The GAV quoted in _quoteAsset\\n    function calcGavInAsset(address _vaultProxy, address _quoteAsset)\\n        external\\n        returns (uint256 gav_)\\n    {\\n        return\\n            getFundValueCalculatorForVault(_vaultProxy).calcGavInAsset(_vaultProxy, _quoteAsset);\\n    }\\n\\n    /// @notice Calculates the gross value of one shares unit (10 ** 18) for a given fund\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @return denominationAsset_ The denomination asset of the fund\\n    /// @return grossShareValue_ The gross share value quoted in the denomination asset\\n    function calcGrossShareValue(address _vaultProxy)\\n        external\\n        returns (address denominationAsset_, uint256 grossShareValue_)\\n    {\\n        return getFundValueCalculatorForVault(_vaultProxy).calcGrossShareValue(_vaultProxy);\\n    }\\n\\n    /// @notice Calculates the gross value of one shares unit (10 ** 18) for a given fund, quoted in a given asset\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @param _quoteAsset The quote asset\\n    /// @return grossShareValue_ The gross share value quoted in _quoteAsset\\n    function calcGrossShareValueInAsset(address _vaultProxy, address _quoteAsset)\\n        external\\n        returns (uint256 grossShareValue_)\\n    {\\n        return\\n            getFundValueCalculatorForVault(_vaultProxy).calcGrossShareValueInAsset(\\n                _vaultProxy,\\n                _quoteAsset\\n            );\\n    }\\n\\n    /// @notice Calculates the NAV for a given fund\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @return denominationAsset_ The denomination asset of the fund\\n    /// @return nav_ The NAV quoted in the denomination asset\\n    function calcNav(address _vaultProxy)\\n        external\\n        returns (address denominationAsset_, uint256 nav_)\\n    {\\n        return getFundValueCalculatorForVault(_vaultProxy).calcNav(_vaultProxy);\\n    }\\n\\n    /// @notice Calculates the NAV for a given fund, quoted in a given asset\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @param _quoteAsset The quote asset\\n    /// @return nav_ The NAV quoted in _quoteAsset\\n    function calcNavInAsset(address _vaultProxy, address _quoteAsset)\\n        external\\n        returns (uint256 nav_)\\n    {\\n        return\\n            getFundValueCalculatorForVault(_vaultProxy).calcNavInAsset(_vaultProxy, _quoteAsset);\\n    }\\n\\n    /// @notice Calculates the net value of one shares unit (10 ** 18) for a given fund\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @return denominationAsset_ The denomination asset of the fund\\n    /// @return netShareValue_ The net share value quoted in the denomination asset\\n    function calcNetShareValue(address _vaultProxy)\\n        external\\n        returns (address denominationAsset_, uint256 netShareValue_)\\n    {\\n        return getFundValueCalculatorForVault(_vaultProxy).calcNetShareValue(_vaultProxy);\\n    }\\n\\n    /// @notice Calculates the net value of one shares unit (10 ** 18) for a given fund, quoted in a given asset\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @param _quoteAsset The quote asset\\n    /// @return netShareValue_ The net share value quoted in _quoteAsset\\n    function calcNetShareValueInAsset(address _vaultProxy, address _quoteAsset)\\n        external\\n        returns (uint256 netShareValue_)\\n    {\\n        return\\n            getFundValueCalculatorForVault(_vaultProxy).calcNetShareValueInAsset(\\n                _vaultProxy,\\n                _quoteAsset\\n            );\\n    }\\n\\n    /// @notice Calculates the net value of all shares held by a specified account\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @param _sharesHolder The account holding shares\\n    /// @return denominationAsset_ The denomination asset of the fund\\n    /// @return netValue_ The net value of all shares held by _sharesHolder\\n    function calcNetValueForSharesHolder(address _vaultProxy, address _sharesHolder)\\n        external\\n        returns (address denominationAsset_, uint256 netValue_)\\n    {\\n        return\\n            getFundValueCalculatorForVault(_vaultProxy).calcNetValueForSharesHolder(\\n                _vaultProxy,\\n                _sharesHolder\\n            );\\n    }\\n\\n    /// @notice Calculates the net value of all shares held by a specified account, quoted in a given asset\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @param _sharesHolder The account holding shares\\n    /// @param _quoteAsset The quote asset\\n    /// @return netValue_ The net value of all shares held by _sharesHolder quoted in _quoteAsset\\n    function calcNetValueForSharesHolderInAsset(\\n        address _vaultProxy,\\n        address _sharesHolder,\\n        address _quoteAsset\\n    ) external returns (uint256 netValue_) {\\n        return\\n            getFundValueCalculatorForVault(_vaultProxy).calcNetValueForSharesHolderInAsset(\\n                _vaultProxy,\\n                _sharesHolder,\\n                _quoteAsset\\n            );\\n    }\\n\\n    /// @notice Sets FundValueCalculator instances for a list of FundDeployer instances\\n    /// @param _fundDeployers The FundDeployer instances\\n    /// @param _fundValueCalculators The FundValueCalculator instances corresponding\\n    /// to each instance in _fundDeployers\\n    function setFundValueCalculators(\\n        address[] memory _fundDeployers,\\n        address[] memory _fundValueCalculators\\n    ) external {\\n        require(\\n            msg.sender == IDispatcher(getDispatcher()).getOwner(),\\n            \\\"Only the Dispatcher owner can call this function\\\"\\n        );\\n        require(\\n            _fundDeployers.length == _fundValueCalculators.length,\\n            \\\"setFundValueCalculators: Unequal array lengths\\\"\\n        );\\n\\n        for (uint256 i; i < _fundDeployers.length; i++) {\\n            fundDeployerToFundValueCalculator[_fundDeployers[i]] = _fundValueCalculators[i];\\n\\n            emit FundValueCalculatorUpdated(_fundDeployers[i], _fundValueCalculators[i]);\\n        }\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    /// @notice Gets the FundValueCalculator instance to use for a given fund\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @return fundValueCalculatorContract_ The FundValueCalculator instance\\n    function getFundValueCalculatorForVault(address _vaultProxy)\\n        public\\n        view\\n        returns (IFundValueCalculator fundValueCalculatorContract_)\\n    {\\n        address fundDeployer = IDispatcher(DISPATCHER).getFundDeployerForVaultProxy(_vaultProxy);\\n        require(fundDeployer != address(0), \\\"getFundValueCalculatorForVault: Invalid _vaultProxy\\\");\\n\\n        address fundValueCalculator = getFundValueCalculatorForFundDeployer(fundDeployer);\\n        require(\\n            fundValueCalculator != address(0),\\n            \\\"getFundValueCalculatorForVault: No FundValueCalculator set\\\"\\n        );\\n\\n        return IFundValueCalculator(fundValueCalculator);\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `DISPATCHER` variable\\n    /// @return dispatcher_ The `DISPATCHER` variable value\\n    function getDispatcher() public view returns (address dispatcher_) {\\n        return DISPATCHER;\\n    }\\n\\n    /// @notice Gets the FundValueCalculator address for a given FundDeployer\\n    /// @param _fundDeployer The FundDeployer for which to get the FundValueCalculator address\\n    /// @return fundValueCalculator_ The FundValueCalculator address\\n    function getFundValueCalculatorForFundDeployer(address _fundDeployer)\\n        public\\n        view\\n        returns (address fundValueCalculator_)\\n    {\\n        return fundDeployerToFundValueCalculator[_fundDeployer];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/persistent/off-chain/fund-value-calculator/IFundValueCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IFundValueCalculator interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IFundValueCalculator {\\n    function calcGav(address _vaultProxy)\\n        external\\n        returns (address denominationAsset_, uint256 gav_);\\n\\n    function calcGavInAsset(address _vaultProxy, address _quoteAsset)\\n        external\\n        returns (uint256 gav_);\\n\\n    function calcGrossShareValue(address _vaultProxy)\\n        external\\n        returns (address denominationAsset_, uint256 grossShareValue_);\\n\\n    function calcGrossShareValueInAsset(address _vaultProxy, address _quoteAsset)\\n        external\\n        returns (uint256 grossShareValue_);\\n\\n    function calcNav(address _vaultProxy)\\n        external\\n        returns (address denominationAsset_, uint256 nav_);\\n\\n    function calcNavInAsset(address _vaultProxy, address _quoteAsset)\\n        external\\n        returns (uint256 nav_);\\n\\n    function calcNetShareValue(address _vaultProxy)\\n        external\\n        returns (address denominationAsset_, uint256 netShareValue_);\\n\\n    function calcNetShareValueInAsset(address _vaultProxy, address _quoteAsset)\\n        external\\n        returns (uint256 netShareValue_);\\n\\n    function calcNetValueForSharesHolder(address _vaultProxy, address _sharesHolder)\\n        external\\n        returns (address denominationAsset_, uint256 netValue_);\\n\\n    function calcNetValueForSharesHolderInAsset(\\n        address _vaultProxy,\\n        address _sharesHolder,\\n        address _quoteAsset\\n    ) external returns (uint256 netValue_);\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundValueCalculatorRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getFundValueCalculatorRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fundValueCalculatorRouter_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"}],\"name\":\"getFundValueMetrics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gavInEth_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"gavIsValid_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"navInEth_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"navIsValid_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wethToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FundDataProviderRouter","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000007c728cd0cfa92401e01a4849a01b57ee53f5b2b9000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}