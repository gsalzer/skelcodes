{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        // - case 65: r,s,v signature (standard)\r\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return recover(hash, v, r, s);\r\n        } else if (signature.length == 64) {\r\n            bytes32 r;\r\n            bytes32 vs;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                vs := mload(add(signature, 0x40))\r\n            }\r\n            return recover(hash, r, vs);\r\n        } else {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address) {\r\n        bytes32 s;\r\n        uint8 v;\r\n        assembly {\r\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\r\n            v := add(shr(255, vs), 27)\r\n        }\r\n        return recover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        require(\r\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\r\n            \"ECDSA: invalid signature 's' value\"\r\n        );\r\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0), \"ECDSA: invalid signature\");\r\n\r\n        return signer;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\ninterface IUniswapV2Router02 {\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] memory path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] memory path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ninterface IUniswapV2Factory02 {\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n}\r\n\r\ncontract LessLibrary is Ownable {\r\n    address public usd;\r\n    address[] public factoryAddress = new address[](2);\r\n\r\n    uint256 private minInvestorBalance = 1000 * 1e18;\r\n    uint256 private votingTime = 5 minutes; //three days\r\n    uint256 private registrationTime = 5 minutes; // one day\r\n    uint256 private minVoterBalance = 500 * 1e18; // minimum number of  tokens to hold to vote\r\n    uint256 private minCreatorStakedBalance = 10000 * 1e18; // minimum number of tokens to hold to launch rocket\r\n    uint8 private feePercent = 2;\r\n    uint256 private usdFee;\r\n    address private uniswapRouter; // uniswapV2 Router\r\n    address payable private lessVault;\r\n    address private devAddress;\r\n    PresaleInfo[] private presaleAddresses; // track all presales created\r\n\r\n    mapping(address=> bool) public stablecoinWhitelist;\r\n\r\n    mapping(address => bool) private isPresale;\r\n    mapping(bytes32 => bool) private usedSignature;\r\n    mapping(address => bool) private signers; //adresses that can call sign functions\r\n\r\n    struct PresaleInfo {\r\n        bytes32 title;\r\n        address presaleAddress;\r\n        string description;\r\n        bool isCertified;\r\n        uint256 openVotingTime;\r\n    }\r\n\r\n    modifier onlyDev() {\r\n        require(owner() == msg.sender || msg.sender == devAddress, \"onlyDev\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPresale() {\r\n        require(isPresale[msg.sender], \"Not presale\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFactory() {\r\n        require(factoryAddress[0] == msg.sender || factoryAddress[1] == msg.sender, \"onlyFactory\");\r\n        _;\r\n    }\r\n\r\n    modifier factoryIndexCheck(uint8 _index){\r\n        require(_index == 0 || _index == 1, \"Invalid index\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _dev, address payable _vault, address _uniswapRouter, address _usd, address[] memory _stablecoins, uint8 _usdDecimals) {\r\n        require(_dev != address(0) && _vault != address(0) && _usdDecimals > 0, \"Wrong params\");\r\n        devAddress = _dev;\r\n        lessVault = _vault;\r\n        uniswapRouter = _uniswapRouter;\r\n        usd = _usd;\r\n        usdFee = 1000 * 10 ** _usdDecimals;\r\n        for(uint256 i=0; i <_stablecoins.length; i++){\r\n            stablecoinWhitelist[_stablecoins[i]] = true;\r\n        }\r\n    }\r\n\r\n    function setFactoryAddress(address _factory, uint8 _index) external onlyDev factoryIndexCheck(_index){\r\n        require(_factory != address(0), \"not 0\");\r\n        factoryAddress[_index] = _factory;\r\n    }\r\n\r\n    function setUsdFee(uint256 _newAmount) external onlyDev {\r\n        require(_newAmount > 0, \"0 amt\");\r\n        usdFee = _newAmount;\r\n    }\r\n\r\n    function setUsdAddress(address _newAddress) external onlyDev {\r\n        require(_newAddress != address(0), \"0 addr\");\r\n        usd = _newAddress;\r\n    }\r\n\r\n    function addPresaleAddress(\r\n        address _presale,\r\n        bytes32 _title,\r\n        string memory _description,\r\n        bool _type,\r\n        uint256 _openVotingTime\r\n    )\r\n        external\r\n        onlyFactory\r\n        returns (uint256)\r\n    {\r\n        presaleAddresses.push(PresaleInfo(_title, _presale, _description, _type, _openVotingTime));\r\n        isPresale[_presale] = true;\r\n        return presaleAddresses.length - 1;\r\n    }\r\n\r\n    function addOrRemoveStaiblecoin(address _stablecoin, bool _isValid) external onlyDev {\r\n        require(_stablecoin != address(0), \"Not 0 addr\");\r\n        if(_isValid){\r\n            require(!stablecoinWhitelist[_stablecoin], \"Wrong param\");\r\n        }\r\n        else {\r\n            require(stablecoinWhitelist[_stablecoin], \"Wrong param\");\r\n        }\r\n        stablecoinWhitelist[_stablecoin] = _isValid;\r\n    }\r\n\r\n    function changeDev(address _newDev) external onlyDev {\r\n        require(_newDev != address(0), \"Wrong new address\");\r\n        devAddress = _newDev;\r\n    }\r\n\r\n    function setVotingTime(uint256 _newVotingTime) external onlyDev {\r\n        require(_newVotingTime > 0, \"Wrong new time\");\r\n        votingTime = _newVotingTime;\r\n    }\r\n\r\n    function setRegistrationTime(uint256 _newRegistrationTime) external onlyDev {\r\n        require(_newRegistrationTime > 0, \"Wrong new time\");\r\n        registrationTime = _newRegistrationTime;\r\n    }\r\n\r\n    function setUniswapRouter(address _uniswapRouter) external onlyDev {\r\n        uniswapRouter = _uniswapRouter;\r\n    }\r\n\r\n    function setSingUsed(bytes memory _sign, address _presale) external {\r\n        require(isPresale[_presale], \"u have no permition\");\r\n        usedSignature[keccak256(_sign)] = true;\r\n    }\r\n\r\n    function addOrRemoveSigner(address _address, bool _canSign) external onlyDev {\r\n        signers[_address] = _canSign;\r\n    }\r\n\r\n    function getPresalesCount() external view returns (uint256) {\r\n        return presaleAddresses.length;\r\n    }\r\n\r\n    function getUsdFee() external view returns(uint256, address) {\r\n        return (usdFee, usd);\r\n    }\r\n\r\n    function isValidStablecoin(address _stablecoin) external view returns (bool) {\r\n        return stablecoinWhitelist[_stablecoin];\r\n    }\r\n\r\n    function getPresaleAddress(uint256 id) external view returns (address) {\r\n        return presaleAddresses[id].presaleAddress;\r\n    }\r\n\r\n    function getVotingTime() external view returns(uint256){\r\n        return votingTime;\r\n    }\r\n\r\n    function getRegistrationTime() external view returns(uint256){\r\n        return registrationTime;\r\n    }\r\n\r\n    function getMinInvestorBalance() external view returns (uint256) {\r\n        return minInvestorBalance;\r\n    }\r\n\r\n    function getDev() external view onlyFactory returns (address) {\r\n        return devAddress;\r\n    }\r\n\r\n    function getMinVoterBalance() external view returns (uint256) {\r\n        return minVoterBalance;\r\n    }\r\n    //back!!!\r\n    function getMinYesVotesThreshold(uint256 totalStakedAmount) external pure returns (uint256) {\r\n        uint256 stakedAmount = totalStakedAmount;\r\n        return stakedAmount / 10;\r\n    }\r\n\r\n    function getFactoryAddress(uint8 _index) external view factoryIndexCheck(_index) returns (address) {\r\n        return factoryAddress[_index];\r\n    }\r\n\r\n    function getMinCreatorStakedBalance() external view returns (uint256) {\r\n        return minCreatorStakedBalance;\r\n    }\r\n\r\n    function getUniswapRouter() external view returns (address) {\r\n        return uniswapRouter;\r\n    }\r\n\r\n    function calculateFee(uint256 amount) external view onlyPresale returns(uint256){\r\n        return amount * feePercent / 100;\r\n    }\r\n\r\n    function getVaultAddress() external view onlyPresale returns(address payable){\r\n        return lessVault;\r\n    }\r\n\r\n    function getArrForSearch() external view returns(PresaleInfo[] memory) {\r\n        return presaleAddresses;\r\n    }\r\n    \r\n    function _verifySigner(bytes32 data, bytes memory signature, uint8 _index)\r\n        public\r\n        view\r\n        factoryIndexCheck(_index)\r\n        returns (bool)\r\n    {\r\n        address messageSigner =\r\n            ECDSA.recover(data, signature);\r\n        require(\r\n            isSigner(messageSigner),\r\n            \"Unauthorised signer\"\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function getSignUsed(bytes memory _sign) external view returns(bool) {\r\n        return usedSignature[keccak256(_sign)];\r\n    }\r\n\r\n    function isSigner(address _address) internal view returns (bool) {\r\n        return signers[_address];\r\n    }\r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper::safeApprove: approve failed\"\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper::safeTransfer: transfer failed\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper::transferFrom: transferFrom failed\"\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(\r\n            success,\r\n            \"TransferHelper::safeTransferETH: ETH transfer failed\"\r\n        );\r\n    }\r\n}\r\nlibrary Calculations {\r\n    function swapNativeToEth(\r\n        address presale,\r\n        address _library,\r\n        address nativeToken,\r\n        uint256 liqPoolEthAmount\r\n    ) external returns (uint256) {\r\n        LessLibrary safeLibrary = LessLibrary(_library);\r\n        IUniswapV2Router02 uniswap = IUniswapV2Router02(\r\n            safeLibrary.getUniswapRouter()\r\n        );\r\n        address[] memory path = new address[](2);\r\n        path[0] = nativeToken;\r\n        path[1] = uniswap.WETH();\r\n        uint256[] memory amount = uniswap.getAmountsOut(liqPoolEthAmount, path);\r\n        amount = uniswap.swapTokensForExactETH(\r\n            amount[1],\r\n            liqPoolEthAmount,\r\n            path,\r\n            presale,\r\n            block.timestamp + 15 minutes\r\n        );\r\n        return amount[1];\r\n    }\r\n\r\n    function usdtToEthFee(address _library)\r\n        external\r\n        view\r\n        returns (uint256 feeEth)\r\n    {\r\n        LessLibrary safeLibrary = LessLibrary(_library);\r\n        IUniswapV2Router02 uniswap = IUniswapV2Router02(\r\n            safeLibrary.getUniswapRouter()\r\n        );\r\n        (uint256 feeFromLib, address tether) = safeLibrary.getUsdFee();\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswap.WETH();\r\n        path[1] = tether;\r\n\r\n        uint256[] memory amounts = uniswap.getAmountsIn(feeFromLib, path);\r\n        return amounts[0];\r\n    }\r\n\r\n    function countAmountOfTokens(\r\n        uint256 _hardCap,\r\n        uint256 _tokenPrice,\r\n        uint256 _liqPrice,\r\n        uint256 _liqPerc,\r\n        uint8 _decimals\r\n    ) external pure returns (uint256[] memory) {\r\n        uint256[] memory tokenAmounts = new uint256[](3);\r\n        if (_liqPrice != 0 && _liqPerc != 0) {\r\n            tokenAmounts[0] = ((_hardCap *\r\n                _liqPerc *\r\n                (uint256(10)**uint256(_decimals))) / (_liqPrice * 100));\r\n            require(tokenAmounts[0] > 0, \"Wrokng\");\r\n        }\r\n\r\n        tokenAmounts[1] =\r\n            (_hardCap  * (uint256(10)**uint256(_decimals))) / _tokenPrice;\r\n        tokenAmounts[2] = tokenAmounts[0] + tokenAmounts[1];\r\n        require(tokenAmounts[1] > 0, \"Wrong parameters\");\r\n        return tokenAmounts;\r\n    }\r\n\r\n}\r\nlibrary Calculation1 {\r\n\r\n    function countAmountOfTokens(\r\n        uint256 _hardCap,\r\n        uint256 _tokenPrice,\r\n        uint256 _liqPrice,\r\n        uint256 _liqPerc,\r\n        uint8 _decimalsToken,\r\n        uint8 _decimalsNativeToken\r\n    ) external pure returns (uint256[] memory) {\r\n        uint256[] memory tokenAmounts = new uint256[](3);\r\n        if (_liqPrice != 0 && _liqPerc != 0) {\r\n            uint256 factor;\r\n            if(_decimalsNativeToken != 18){\r\n                if(_decimalsNativeToken < 18)\r\n                    factor = uint256(10)**uint256(18 - _decimalsNativeToken);\r\n                else\r\n                    factor = uint256(10)**uint256(_decimalsNativeToken - 18);\r\n            }\r\n            else\r\n                factor = 1;\r\n            tokenAmounts[0] = ((_hardCap *\r\n                _liqPerc *\r\n                (uint256(10)**uint256(_decimalsToken)) * factor) / (_liqPrice * 100));\r\n            require(tokenAmounts[0] > 0, \"Wrokng\");\r\n        }\r\n\r\n        tokenAmounts[1] =\r\n            (_hardCap * (uint256(10)**uint256(_decimalsToken))) /\r\n            _tokenPrice;\r\n        tokenAmounts[2] = tokenAmounts[0] + tokenAmounts[1];\r\n        require(tokenAmounts[1] > 0, \"Wrong parameters\");\r\n        return tokenAmounts;\r\n    }\r\n\r\n}\r\ncontract PresaleCertified is ReentrancyGuard {\r\n    uint256 public id;\r\n    address payable public factoryAddress;\r\n    address public platformOwner;\r\n    LessLibrary public lessLib;\r\n\r\n    PresaleInfo public generalInfo;\r\n    CertifiedAddition public certifiedAddition;\r\n    PresaleUniswapInfo public uniswapInfo;\r\n    PresaleStringInfo public stringInfo;\r\n    IntermediateVariables public intermediate;\r\n\r\n    address private devAddress;\r\n    uint256 private tokenMagnitude;\r\n\r\n    //mapping(address => Claimed) public claimed; // if true, it means investor already claimed the tokens or got a refund\r\n    mapping(address => Investment) public investments; // total wei invested per address\r\n    mapping(address => bool) public whitelistTier;\r\n\r\n    address[][5] public whitelist; //for backend\r\n    uint8[4] public poolPercentages;\r\n    uint256[5] public stakingTiers;\r\n\r\n    uint256[4] private tiersTimes = [6900, 6300, 5400, 3600]; // 1h55m-> 1h45m -> 1h30m -> 1h PROD: [6900, 6300, 5400, 3600]\r\n\r\n    TicketsInfo[] public tickets;\r\n\r\n    struct TicketsInfo {\r\n        address user;\r\n        uint256 ticketAmount;\r\n    }\r\n\r\n    struct PresaleInfo {\r\n        address creator;\r\n        address token;\r\n        uint256 tokenPriceInWei;\r\n        uint256 hardCapInWei;\r\n        uint256 softCapInWei;\r\n        uint256 tokensForSaleLeft;\r\n        uint256 tokensForLiquidityLeft;\r\n        uint256 openTimePresale;\r\n        uint256 closeTimePresale;\r\n        uint256 collectedFee;\r\n    }\r\n\r\n    struct CertifiedAddition {\r\n        bool liquidity;\r\n        bool automatically;\r\n        bool privatePresale;\r\n        uint8 vesting;\r\n        address[] whitelist;\r\n        address nativeToken;\r\n    }\r\n\r\n    struct IntermediateVariables {\r\n        bool initiate;\r\n        bool withdrawedFunds;\r\n        bool approved;\r\n        bool cancelled;\r\n        bool liquidityAdded;\r\n        uint256 beginingAmount;\r\n        uint256 raisedAmount;\r\n        uint256 participants;\r\n    }\r\n\r\n    struct PresaleUniswapInfo {\r\n        uint256 listingPriceInWei;\r\n        uint256 lpTokensLockDurationInDays;\r\n        uint8 liquidityPercentageAllocation;\r\n        uint256 liquidityAllocationTime;\r\n        uint256 unlockTime;\r\n        address lpAddress;\r\n        uint256 lpAmount;\r\n    }\r\n\r\n    struct PresaleStringInfo {\r\n        bytes32 saleTitle;\r\n        bytes32 linkTelegram;\r\n        bytes32 linkGithub;\r\n        bytes32 linkTwitter;\r\n        bytes32 linkWebsite;\r\n        string linkLogo;\r\n        string description;\r\n        string whitepaper;\r\n    }\r\n\r\n    struct Investment {\r\n        uint256 amountEth;\r\n        uint256 amountTokens;\r\n        uint256 amountClaimed;\r\n    }\r\n\r\n    modifier onlyFabric() {\r\n        require(factoryAddress == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPresaleCreator() {\r\n        require(msg.sender == generalInfo.creator);\r\n        _;\r\n    }\r\n\r\n    modifier liquidityAdded() {\r\n        if (certifiedAddition.liquidity) {\r\n            require(intermediate.liquidityAdded, \"A.LIQ\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier presaleIsNotCancelled() {\r\n        require(!intermediate.cancelled);\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address payable _factory,\r\n        address _library,\r\n        address _devAddress\r\n    ) {\r\n        require(\r\n            _factory != address(0) &&\r\n                _library != address(0) &&\r\n                _devAddress != address(0)\r\n        );\r\n        lessLib = LessLibrary(_library);\r\n        factoryAddress = _factory;\r\n        platformOwner = lessLib.owner();\r\n        devAddress = _devAddress;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function init(\r\n        address[2] memory _creatorToken,\r\n        uint256[8] memory _priceTokensForSaleLiquiditySoftHardOpenCloseFee\r\n    ) external onlyFabric {\r\n        require(!intermediate.initiate);\r\n        intermediate.initiate = true;\r\n        require(\r\n            _creatorToken[0] != address(0) && _creatorToken[1] != address(0)\r\n        );\r\n        generalInfo = PresaleInfo(\r\n            payable(_creatorToken[0]),\r\n            _creatorToken[1],\r\n            _priceTokensForSaleLiquiditySoftHardOpenCloseFee[0],\r\n            _priceTokensForSaleLiquiditySoftHardOpenCloseFee[4],\r\n            _priceTokensForSaleLiquiditySoftHardOpenCloseFee[3],\r\n            _priceTokensForSaleLiquiditySoftHardOpenCloseFee[1],\r\n            _priceTokensForSaleLiquiditySoftHardOpenCloseFee[2],\r\n            _priceTokensForSaleLiquiditySoftHardOpenCloseFee[5],\r\n            _priceTokensForSaleLiquiditySoftHardOpenCloseFee[6],\r\n            _priceTokensForSaleLiquiditySoftHardOpenCloseFee[7]\r\n        );\r\n\r\n        uint256 tokenDecimals = ERC20(_creatorToken[1]).decimals();\r\n        tokenMagnitude = uint256(10)**uint256(tokenDecimals);\r\n        intermediate\r\n            .beginingAmount = _priceTokensForSaleLiquiditySoftHardOpenCloseFee[\r\n            1\r\n        ];\r\n    }\r\n\r\n    function setCertifiedAddition(\r\n        bool _liquidity,\r\n        bool _automatically,\r\n        uint8 _vesting,\r\n        address[] memory _whitelist,\r\n        address _nativeToken\r\n    ) external onlyFabric {\r\n        uint256 len = _whitelist.length;\r\n        bool privatePres;\r\n        if (len > 0) {\r\n            privatePres = true;\r\n            for (uint256 i = 0; i < len; i++) {\r\n                if (\r\n                    _whitelist[i] != generalInfo.creator \r\n                ) whitelistTier[_whitelist[i]] = true;\r\n            }\r\n        }\r\n        certifiedAddition = CertifiedAddition(\r\n            _liquidity,\r\n            _automatically,\r\n            privatePres,\r\n            _vesting,\r\n            _whitelist,\r\n            _nativeToken\r\n        );\r\n    }\r\n\r\n    function setUniswapInfo(\r\n        uint256 price,\r\n        uint256 duration,\r\n        uint8 percent,\r\n        uint256 allocationTime\r\n    ) external onlyFabric {\r\n        uniswapInfo = PresaleUniswapInfo(\r\n            price,\r\n            duration,\r\n            percent,\r\n            allocationTime,\r\n            0,\r\n            address(0),\r\n            0\r\n        );\r\n    }\r\n\r\n    function setStringInfo(\r\n        bytes32 _saleTitle,\r\n        bytes32 _linkTelegram,\r\n        bytes32 _linkGithub,\r\n        bytes32 _linkTwitter,\r\n        bytes32 _linkWebsite,\r\n        string calldata _linkLogo,\r\n        string calldata _description,\r\n        string calldata _whitepaper\r\n    ) external onlyFabric {\r\n        stringInfo = PresaleStringInfo(\r\n            _saleTitle,\r\n            _linkTelegram,\r\n            _linkGithub,\r\n            _linkTwitter,\r\n            _linkWebsite,\r\n            _linkLogo,\r\n            _description,\r\n            _whitepaper\r\n        );\r\n    }\r\n\r\n    function setArrays(\r\n        uint8[4] memory _poolPercentages,\r\n        uint256[5] memory _stakingTiers\r\n    ) external onlyFabric {\r\n        poolPercentages = _poolPercentages;\r\n        stakingTiers = _stakingTiers;\r\n    }\r\n\r\n    function setPresaleId(uint256 _id) external onlyFabric {\r\n        if (id != 0) {\r\n            require(id != _id);\r\n        }\r\n        id = _id;\r\n    }\r\n\r\n    function approvePresale() external {\r\n        uint256 regTime;\r\n        if (!certifiedAddition.privatePresale)\r\n            regTime = lessLib.getRegistrationTime();\r\n        require(\r\n            !intermediate.approved &&\r\n                block.timestamp < generalInfo.openTimePresale - regTime &&\r\n                platformOwner == msg.sender\r\n        );\r\n        intermediate.approved = true;\r\n    }\r\n\r\n    function register(\r\n        uint256 _tokenAmount,\r\n        uint256 _tier,\r\n        uint256 _timestamp,\r\n        bytes memory _signature\r\n    ) external presaleIsNotCancelled {\r\n        require(\r\n            block.timestamp >=\r\n                generalInfo.openTimePresale - lessLib.getRegistrationTime() &&\r\n                block.timestamp < generalInfo.openTimePresale &&\r\n                intermediate.approved &&\r\n                certifiedAddition.whitelist.length == 0 &&\r\n                _tier > 0 &&\r\n                _tier < 6 &&\r\n                msg.sender != generalInfo.creator &&\r\n                !lessLib.getSignUsed(_signature) &&\r\n                !whitelistTier[msg.sender] &&\r\n                lessLib._verifySigner(\r\n                    keccak256(\r\n                        abi.encodePacked(\r\n                            _tokenAmount,\r\n                            msg.sender,\r\n                            address(this),\r\n                            _timestamp\r\n                        )\r\n                    ),\r\n                    _signature,\r\n                    1\r\n                ),\r\n            \"W\"\r\n        );\r\n        lessLib.setSingUsed(_signature, address(this));\r\n        whitelistTier[msg.sender] = true;\r\n        if (_tier < 3) {\r\n            tickets.push(\r\n                TicketsInfo(msg.sender, _tokenAmount / (500 * tokenMagnitude))\r\n            );\r\n        }\r\n        whitelist[5 - _tier].push(msg.sender);\r\n    }\r\n\r\n    // _tokenAmount only for non bnb tokens\r\n    // poolPercentages starts from 5th to 2nd teirs\r\n    // Staking tiers also starts from 5th to 2nd tiers\r\n    function invest(\r\n        uint256 _tokenAmount,\r\n        bytes memory _signature,\r\n        uint256 _stakedAmount,\r\n        uint256 _timestamp\r\n    ) public payable presaleIsNotCancelled nonReentrant {\r\n        require(\r\n            block.timestamp >= generalInfo.openTimePresale &&\r\n                block.timestamp <= generalInfo.closeTimePresale &&\r\n                whitelistTier[msg.sender] &&\r\n                !lessLib.getSignUsed(_signature) &&\r\n                intermediate.approved &&\r\n                lessLib._verifySigner(\r\n                    keccak256(\r\n                        abi.encodePacked(\r\n                            _stakedAmount,\r\n                            msg.sender,\r\n                            address(this),\r\n                            _timestamp\r\n                        )\r\n                    ),\r\n                    _signature,\r\n                    1\r\n                ),\r\n            \"S.R.\"\r\n        );\r\n        lessLib.setSingUsed(_signature, address(this));\r\n\r\n        uint256 amount = (address(certifiedAddition.nativeToken) == address(0))\r\n            ? msg.value\r\n            : _tokenAmount;\r\n        require(amount > 0, \"O\");\r\n\r\n        uint256 tokensLeft;\r\n        uint256 tokensSold = intermediate.beginingAmount -\r\n            generalInfo.tokensForSaleLeft;\r\n        uint256 nowTime = block.timestamp;\r\n        uint256[5] memory poolAmounts;\r\n        uint256 prevPoolsTotalAmount;\r\n        for (uint256 i = 0; i < 4; i++) {\r\n            poolAmounts[i] =\r\n                (intermediate.beginingAmount * poolPercentages[i]) /\r\n                100;\r\n        }\r\n        if (certifiedAddition.whitelist.length > 0) {\r\n            require(_stakedAmount >= stakingTiers[1], \"4/5\");\r\n            tokensLeft = generalInfo.tokensForSaleLeft;\r\n        } else {\r\n            if (nowTime < generalInfo.openTimePresale + tiersTimes[3]) {\r\n                require(_stakedAmount >= stakingTiers[0], \"5\");\r\n                tokensLeft = poolAmounts[0] - tokensSold;\r\n            } else if (nowTime < generalInfo.openTimePresale + tiersTimes[2]) {\r\n                require(_stakedAmount >= stakingTiers[1], \"4\");\r\n                prevPoolsTotalAmount = poolAmounts[0];\r\n                tokensLeft = poolAmounts[1] + prevPoolsTotalAmount - tokensSold;\r\n            } else if (nowTime < generalInfo.openTimePresale + tiersTimes[1]) {\r\n                require(_stakedAmount >= stakingTiers[2], \"3\");\r\n                prevPoolsTotalAmount = poolAmounts[0] + poolAmounts[1];\r\n                tokensLeft = poolAmounts[2] + prevPoolsTotalAmount - tokensSold;\r\n            } else if (nowTime < generalInfo.openTimePresale + tiersTimes[0]) {\r\n                require(_stakedAmount >= stakingTiers[3], \"2\");\r\n                prevPoolsTotalAmount =\r\n                    poolAmounts[0] +\r\n                    poolAmounts[1] +\r\n                    poolAmounts[2];\r\n                tokensLeft = poolAmounts[3] + prevPoolsTotalAmount - tokensSold;\r\n            } else {\r\n                require(_stakedAmount >= stakingTiers[4], \"1\");\r\n                tokensLeft = generalInfo.tokensForSaleLeft;\r\n            }\r\n        }\r\n        uint256 reservedTokens = getTokenAmount(amount);\r\n        require(\r\n            intermediate.raisedAmount < generalInfo.hardCapInWei &&\r\n                tokensLeft >= reservedTokens,\r\n            \"N.E.\"\r\n        );\r\n        uint256 totalInvestmentInWei = investments[msg.sender].amountEth +\r\n            amount;\r\n\r\n        if (investments[msg.sender].amountEth == 0) {\r\n            intermediate.participants += 1;\r\n        }\r\n\r\n        intermediate.raisedAmount += amount;\r\n        investments[msg.sender].amountEth = totalInvestmentInWei;\r\n        investments[msg.sender].amountTokens += reservedTokens;\r\n        generalInfo.tokensForSaleLeft -= reservedTokens;\r\n\r\n        if (address(certifiedAddition.nativeToken) != address(0))\r\n            TransferHelper.safeTransferFrom(\r\n                certifiedAddition.nativeToken,\r\n                msg.sender,\r\n                address(this),\r\n                amount\r\n            );\r\n    }\r\n\r\n    function withdrawInvestment(address payable to, uint256 amount)\r\n        external\r\n        nonReentrant\r\n    {\r\n        require(\r\n            to != address(0) &&\r\n                block.timestamp >= generalInfo.openTimePresale &&\r\n                investments[msg.sender].amountEth >= amount &&\r\n                amount > 0,\r\n            \"W\"\r\n        );\r\n        if (!intermediate.cancelled) {\r\n            require(\r\n                intermediate.raisedAmount < generalInfo.softCapInWei &&\r\n                    !intermediate.liquidityAdded,\r\n                \"S.L\"\r\n            );\r\n        }\r\n        if (investments[msg.sender].amountEth - amount == 0) {\r\n            intermediate.participants -= 1;\r\n        }\r\n        uint256 reservedTokens = getTokenAmount(amount);\r\n        intermediate.raisedAmount -= amount;\r\n        investments[msg.sender].amountEth -= amount;\r\n        investments[msg.sender].amountTokens -= reservedTokens;\r\n        generalInfo.tokensForSaleLeft += reservedTokens;\r\n\r\n        if (certifiedAddition.nativeToken == address(0)) {\r\n            to.transfer(amount);\r\n        } else {\r\n            TransferHelper.safeTransfer(\r\n                certifiedAddition.nativeToken,\r\n                to,\r\n                amount\r\n            );\r\n        }\r\n    }\r\n\r\n    function claimTokens()\r\n        external\r\n        nonReentrant\r\n        liquidityAdded\r\n        presaleIsNotCancelled\r\n    {\r\n        require(\r\n            block.timestamp >= generalInfo.closeTimePresale &&\r\n                investments[msg.sender].amountClaimed <\r\n                investments[msg.sender].amountTokens &&\r\n                investments[msg.sender].amountEth > 0,\r\n            \"W\"\r\n        );\r\n        if (certifiedAddition.vesting == 0) {\r\n            investments[msg.sender].amountClaimed = investments[msg.sender]\r\n                .amountTokens; // make sure this goes first before transfer to prevent reentrancy\r\n            require(\r\n                IERC20(generalInfo.token).transfer(\r\n                    msg.sender,\r\n                    investments[msg.sender].amountTokens\r\n                ),\r\n                \"T\"\r\n            );\r\n        } else {\r\n            uint256 beginingTime;\r\n            if (certifiedAddition.liquidity) {\r\n                beginingTime =\r\n                    uniswapInfo.unlockTime -\r\n                    uniswapInfo.lpTokensLockDurationInDays *\r\n                    1 days; //PROD: 24*60*60\r\n            } else {\r\n                beginingTime = generalInfo.closeTimePresale;\r\n            }\r\n            uint256 numOfParts = (block.timestamp - beginingTime) / 2592000; //PROD: 2592000\r\n            uint256 part = (investments[msg.sender].amountTokens *\r\n                certifiedAddition.vesting) / 100;\r\n            uint256 earnedTokens = numOfParts *\r\n                part -\r\n                investments[msg.sender].amountClaimed;\r\n            require(earnedTokens > 0, \"0\");\r\n            if (\r\n                earnedTokens <=\r\n                investments[msg.sender].amountTokens -\r\n                    investments[msg.sender].amountClaimed\r\n            ) {\r\n                investments[msg.sender].amountClaimed += earnedTokens;\r\n            } else {\r\n                earnedTokens =\r\n                    investments[msg.sender].amountTokens -\r\n                    investments[msg.sender].amountClaimed;\r\n                investments[msg.sender].amountClaimed = investments[msg.sender]\r\n                    .amountTokens;\r\n            }\r\n            require(\r\n                IERC20(generalInfo.token).transfer(\r\n                    msg.sender,\r\n                    earnedTokens\r\n                ),\r\n                \"T\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function addLiquidity() external presaleIsNotCancelled nonReentrant {\r\n        require(\r\n            certifiedAddition.liquidity &&\r\n                intermediate.raisedAmount >= generalInfo.softCapInWei &&\r\n                uniswapInfo.liquidityAllocationTime <= block.timestamp &&\r\n                !intermediate.liquidityAdded,\r\n            \"W\"\r\n        );\r\n        if (certifiedAddition.automatically) {\r\n            require(msg.sender == devAddress, \"DEV\");\r\n        } else {\r\n            require(msg.sender == generalInfo.creator, \"CREATOR\");\r\n        }\r\n\r\n        intermediate.liquidityAdded = true;\r\n        uniswapInfo.unlockTime =\r\n            block.timestamp +\r\n            (uniswapInfo.lpTokensLockDurationInDays * 1 days); //PROD: 60*24*60\r\n\r\n        IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(\r\n            address(lessLib.getUniswapRouter())\r\n        );\r\n\r\n        uint256 liqPoolEthAmount = (intermediate.raisedAmount *\r\n            uniswapInfo.liquidityPercentageAllocation) / 100;\r\n\r\n        if (certifiedAddition.nativeToken != address(0)) {\r\n            TransferHelper.safeApprove(\r\n                certifiedAddition.nativeToken,\r\n                address(uniswapRouter),\r\n                liqPoolEthAmount\r\n            );\r\n            liqPoolEthAmount = Calculations.swapNativeToEth(\r\n                address(this),\r\n                address(lessLib),\r\n                certifiedAddition.nativeToken,\r\n                liqPoolEthAmount\r\n            );\r\n        }\r\n\r\n        uint256 liqPoolTokenAmount = (liqPoolEthAmount * tokenMagnitude) /\r\n            uniswapInfo.listingPriceInWei;\r\n\r\n        require(\r\n            generalInfo.tokensForLiquidityLeft >= liqPoolTokenAmount,\r\n            \"N.E.\"\r\n        );\r\n\r\n        generalInfo.tokensForLiquidityLeft -= liqPoolTokenAmount;\r\n\r\n        IERC20 token = IERC20(generalInfo.token);\r\n\r\n        token.approve(address(uniswapRouter), liqPoolTokenAmount);\r\n\r\n        uint256 amountEth;\r\n\r\n        (, amountEth, uniswapInfo.lpAmount) = uniswapRouter.addLiquidityETH{\r\n            value: liqPoolEthAmount\r\n        }(\r\n            address(token),\r\n            liqPoolTokenAmount,\r\n            0,\r\n            0,\r\n            address(this),\r\n            block.timestamp + 15 minutes\r\n        );\r\n\r\n        IUniswapV2Factory02 uniswapFactory = IUniswapV2Factory02(\r\n            uniswapRouter.factory()\r\n        );\r\n        uniswapInfo.lpAddress = uniswapFactory.getPair(\r\n            uniswapRouter.WETH(),\r\n            generalInfo.token\r\n        );\r\n    }\r\n\r\n    function collectFundsRaised()\r\n        external\r\n        presaleIsNotCancelled\r\n        nonReentrant\r\n        onlyPresaleCreator\r\n        liquidityAdded\r\n    {\r\n        require(\r\n            !intermediate.withdrawedFunds &&\r\n                block.timestamp >= generalInfo.closeTimePresale &&\r\n                intermediate.raisedAmount >= generalInfo.softCapInWei,\r\n            \"OTS\"\r\n        );\r\n        intermediate.withdrawedFunds = true;\r\n        uint256 collectedBalance;\r\n        if (address(0) == certifiedAddition.nativeToken) {\r\n            collectedBalance = address(this).balance;\r\n            if(generalInfo.collectedFee > 0){\r\n                collectedBalance -= generalInfo.collectedFee;\r\n            }\r\n            payable(generalInfo.creator).transfer(collectedBalance);\r\n        } else {\r\n            collectedBalance = IERC20(certifiedAddition.nativeToken).balanceOf(\r\n                address(this)\r\n            );\r\n            TransferHelper.safeTransfer(\r\n                certifiedAddition.nativeToken,\r\n                generalInfo.creator,\r\n                collectedBalance\r\n            );\r\n        }\r\n        uint256 unsoldTokensAmount = generalInfo.tokensForSaleLeft +\r\n            generalInfo.tokensForLiquidityLeft;\r\n        if (unsoldTokensAmount > 0) {\r\n            require(\r\n                IERC20(generalInfo.token).transfer(\r\n                    generalInfo.creator,\r\n                    unsoldTokensAmount\r\n                ),\r\n                \"T\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function refundLpTokens()\r\n        external\r\n        presaleIsNotCancelled\r\n        nonReentrant\r\n        onlyPresaleCreator\r\n        liquidityAdded\r\n    {\r\n        require(\r\n            uniswapInfo.lpAmount > 0 &&\r\n                block.timestamp >= uniswapInfo.unlockTime,\r\n            \"EARLY\"\r\n        );\r\n        require(\r\n            IERC20(uniswapInfo.lpAddress).transfer(\r\n                generalInfo.creator,\r\n                uniswapInfo.lpAmount\r\n            ),\r\n            \"LP.T\"\r\n        );\r\n        uniswapInfo.lpAmount = 0;\r\n    }\r\n\r\n    function collectFee() external nonReentrant {\r\n        uint256 collectedFee = generalInfo.collectedFee;\r\n        uint256 openTime = (certifiedAddition.privatePresale) ? generalInfo.openTimePresale : generalInfo.openTimePresale - lessLib.getRegistrationTime();\r\n        require(collectedFee > 0 && openTime <= block.timestamp, \"W\");\r\n        generalInfo.collectedFee = 0;\r\n        if (intermediate.approved /* && !intermediate.cancelled */) {\r\n            require(msg.sender == platformOwner);\r\n            payable(platformOwner).transfer(collectedFee);\r\n        } else {\r\n            require(msg.sender == generalInfo.creator);\r\n            if(!intermediate.cancelled){\r\n                _cancelPresale();\r\n            }\r\n            payable(generalInfo.creator).transfer(collectedFee);\r\n        }\r\n    }\r\n\r\n    function cancelPresale() public {\r\n        if (\r\n            intermediate.raisedAmount < generalInfo.softCapInWei &&\r\n            block.timestamp >= generalInfo.closeTimePresale\r\n        ) {\r\n            require(\r\n                msg.sender == generalInfo.creator ||\r\n                    msg.sender == platformOwner,\r\n                \"OWNERS\"\r\n            );\r\n        } else {\r\n            require(msg.sender == platformOwner, \"P.OWNER\");\r\n        }\r\n        _cancelPresale();\r\n    }\r\n\r\n    function getWhitelist(uint256 _tier)\r\n        external\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        if (certifiedAddition.whitelist.length > 0) {\r\n            return certifiedAddition.whitelist;\r\n        } else {\r\n            return whitelist[5 - _tier];\r\n        }\r\n    }\r\n\r\n    function isWhitelisting() external view returns (bool) {\r\n        return\r\n            block.timestamp <= generalInfo.openTimePresale &&\r\n            block.timestamp >=\r\n            generalInfo.openTimePresale - lessLib.getRegistrationTime();\r\n    }\r\n\r\n    function getTokenAmount(uint256 _weiAmount)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return (_weiAmount * tokenMagnitude) / generalInfo.tokenPriceInWei;\r\n    }\r\n\r\n    function _cancelPresale() private presaleIsNotCancelled {\r\n        intermediate.cancelled = true;\r\n        uint256 bal = IERC20(generalInfo.token).balanceOf(address(this));\r\n        if (bal > 0) {\r\n            require(\r\n                IERC20(generalInfo.token).transfer(generalInfo.creator, bal),\r\n                \"T\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\ncontract PresaleFactoryCertified is ReentrancyGuard {\r\n    LessLibrary public safeLibrary;\r\n    //address public owner;\r\n\r\n    struct PresaleInfo {\r\n        address tokenAddress;\r\n        uint256 tokenPriceInWei;\r\n        uint256 hardCapInWei;\r\n        uint256 softCapInWei;\r\n        uint256 openTime;\r\n        uint256 closeTime;\r\n        uint256 _tokenAmount;\r\n        bytes _signature;\r\n        uint256 _timestamp;\r\n        uint8[4] poolPercentages;\r\n        uint256[5] stakingTiers;\r\n    }\r\n\r\n    struct CertifiedAddition {\r\n        bool liquidity;\r\n        bool automatically;\r\n        uint8 vesting;\r\n        address[] whitelist;\r\n        address nativeToken;\r\n    }\r\n\r\n    struct PresalePancakeSwapInfo {\r\n        uint256 listingPriceInWei;\r\n        uint256 lpTokensLockDurationInDays;\r\n        uint8 liquidityPercentageAllocation;\r\n        uint256 liquidityAllocationTime;\r\n    }\r\n\r\n    struct PresaleStringInfo {\r\n        bytes32 saleTitle;\r\n        bytes32 linkTelegram;\r\n        bytes32 linkGithub;\r\n        bytes32 linkTwitter;\r\n        bytes32 linkWebsite;\r\n        string linkLogo;\r\n        string description;\r\n        string whitepaper;\r\n    }\r\n\r\n    modifier onlyDev() {\r\n        require(msg.sender == safeLibrary.owner() || safeLibrary.getDev() == msg.sender);\r\n        _;\r\n    }\r\n\r\n    event CertifiedAutoPresaleCreated(\r\n        uint256 presaleId,\r\n        address creator,\r\n        address tokenAddress,\r\n        uint256 timeForLiquidity\r\n    );\r\n    event CertifiedPresaleCreated(\r\n        uint256 presaleId,\r\n        address creator,\r\n        address tokenAddress\r\n    );\r\n\r\n    constructor(address _bscsInfoAddress) {\r\n        safeLibrary = LessLibrary(_bscsInfoAddress);\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    function createPresaleCertified(\r\n        PresaleInfo calldata _info,\r\n        CertifiedAddition calldata _addition,\r\n        PresalePancakeSwapInfo calldata _cakeInfo,\r\n        PresaleStringInfo calldata _stringInfo\r\n    ) external payable nonReentrant returns (uint256 presaleId) {\r\n        require(\r\n            safeLibrary.getMinCreatorStakedBalance() <= _info._tokenAmount &&\r\n            !safeLibrary.getSignUsed(_info._signature) &&\r\n                safeLibrary._verifySigner(\r\n                    keccak256(\r\n                        abi.encodePacked(\r\n                            _info.tokenAddress,\r\n                            msg.sender,\r\n                            _info._tokenAmount,\r\n                            _info._timestamp\r\n                        )\r\n                    ),\r\n                    _info._signature,\r\n                    1\r\n                ),\r\n            \"1\"\r\n        );\r\n        if (_addition.liquidity) {\r\n            require(\r\n                _info.closeTime < _cakeInfo.liquidityAllocationTime &&\r\n                    _cakeInfo.liquidityPercentageAllocation > 0 &&\r\n                    _cakeInfo.listingPriceInWei > 0 &&\r\n                    _cakeInfo.lpTokensLockDurationInDays > 29,\r\n                \"2\"\r\n            );\r\n        }\r\n        if (_addition.whitelist.length == 0) {\r\n            require(block.timestamp + safeLibrary.getRegistrationTime() + 86400*3 <= _info.openTime, \"3\"); //PROD: change 60*3 (approval time)\r\n        } else {\r\n            require(block.timestamp + 86400*3 <= _info.openTime, \"4\"); //PROD: change 60*3 (approval time)\r\n        }\r\n        require(\r\n            6900 < _info.closeTime - _info.openTime && //PROD: 6900\r\n                _info.tokenPriceInWei > 0 &&\r\n                _info.softCapInWei > 0 &&\r\n                _info.hardCapInWei > 0 &&\r\n                _info.hardCapInWei >= _info.softCapInWei,\r\n            \"5\"\r\n        );\r\n        if (address(0) != _addition.nativeToken) {\r\n            require(\r\n                safeLibrary.isValidStablecoin(_addition.nativeToken),\r\n                \"6\"\r\n            );\r\n        }\r\n\r\n        ERC20 _token = ERC20(_info.tokenAddress);\r\n\r\n        uint256 feeEth = Calculations.usdtToEthFee(address(safeLibrary)); //PROD\r\n        //uint256 feeEth = 500000000;\r\n        require(msg.value >= feeEth && feeEth > 0, \"7\");\r\n\r\n        // maxLiqPoolTokenAmount, maxTokensToBeSold, requiredTokenAmount\r\n        uint256[] memory tokenAmounts = new uint256[](3);\r\n        tokenAmounts = Calculation1.countAmountOfTokens(\r\n            _info.hardCapInWei,\r\n            _info.tokenPriceInWei,\r\n            _cakeInfo.listingPriceInWei,\r\n            _cakeInfo.liquidityPercentageAllocation,\r\n            _token.decimals(),\r\n            (address(_addition.nativeToken) == address(0)) ? 18 : ERC20(_addition.nativeToken).decimals()\r\n        );\r\n\r\n        PresaleCertified presale = new PresaleCertified(\r\n            payable(address(this)),\r\n            address(safeLibrary),\r\n            safeLibrary.getDev()\r\n        );\r\n        require(\r\n            _token.transferFrom(msg.sender, address(presale), tokenAmounts[2]),\r\n            \"8\"\r\n        );\r\n        payable(address(presale)).transfer(feeEth);\r\n        initializePresaleCertified(\r\n            presale,\r\n            [tokenAmounts[1], tokenAmounts[0], feeEth],\r\n            _info,\r\n            _addition,\r\n            _cakeInfo,\r\n            _stringInfo\r\n        );\r\n        presaleId = safeLibrary.addPresaleAddress(\r\n            address(presale),\r\n            _stringInfo.saleTitle,\r\n            _stringInfo.description,\r\n            true,\r\n            0\r\n        );\r\n        presale.setPresaleId(presaleId);\r\n        safeLibrary.setSingUsed(_info._signature, address(presale));\r\n        if (_addition.liquidity && _addition.automatically) {\r\n            emit CertifiedAutoPresaleCreated(\r\n                presaleId,\r\n                msg.sender,\r\n                _info.tokenAddress,\r\n                _cakeInfo.liquidityAllocationTime\r\n            );\r\n        } else {\r\n            emit CertifiedPresaleCreated(\r\n                presaleId,\r\n                msg.sender,\r\n                _info.tokenAddress\r\n            );\r\n        }\r\n    }\r\n\r\n    function initializePresaleCertified(\r\n        PresaleCertified _presale,\r\n        uint256[3] memory _tokensForSaleLiquidityFee,\r\n        PresaleInfo calldata _info,\r\n        CertifiedAddition calldata _addition,\r\n        PresalePancakeSwapInfo calldata _cakeInfo,\r\n        PresaleStringInfo calldata _stringInfo\r\n    ) internal {\r\n        _presale.init(\r\n            [msg.sender, _info.tokenAddress],\r\n            [\r\n                _info.tokenPriceInWei,\r\n                _tokensForSaleLiquidityFee[0],\r\n                _tokensForSaleLiquidityFee[1],\r\n                _info.softCapInWei,\r\n                _info.hardCapInWei,\r\n                _info.openTime,\r\n                _info.closeTime,\r\n                _tokensForSaleLiquidityFee[2]\r\n            ]\r\n        );\r\n\r\n        _presale.setCertifiedAddition(\r\n            _addition.liquidity,\r\n            _addition.automatically,\r\n            _addition.vesting,\r\n            _addition.whitelist,\r\n            _addition.nativeToken\r\n        );\r\n\r\n        if (_addition.liquidity) {\r\n            _presale.setUniswapInfo(\r\n                _cakeInfo.listingPriceInWei,\r\n                _cakeInfo.lpTokensLockDurationInDays,\r\n                _cakeInfo.liquidityPercentageAllocation,\r\n                _cakeInfo.liquidityAllocationTime\r\n            );\r\n        }\r\n        _presale.setStringInfo(\r\n            _stringInfo.saleTitle,\r\n            _stringInfo.linkTelegram,\r\n            _stringInfo.linkGithub,\r\n            _stringInfo.linkTwitter,\r\n            _stringInfo.linkWebsite,\r\n            _stringInfo.linkLogo,\r\n            _stringInfo.description,\r\n            _stringInfo.whitepaper\r\n        );\r\n        _presale.setArrays(_info.poolPercentages, _info.stakingTiers);\r\n    }\r\n\r\n    function migrateTo(address payable _newFactory) external onlyDev {\r\n        _newFactory.transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bscsInfoAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeForLiquidity\",\"type\":\"uint256\"}],\"name\":\"CertifiedAutoPresaleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"CertifiedPresaleCreated\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenPriceInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCapInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softCapInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8[4]\",\"name\":\"poolPercentages\",\"type\":\"uint8[4]\"},{\"internalType\":\"uint256[5]\",\"name\":\"stakingTiers\",\"type\":\"uint256[5]\"}],\"internalType\":\"struct PresaleFactoryCertified.PresaleInfo\",\"name\":\"_info\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"liquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"automatically\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"vesting\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"whitelist\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"nativeToken\",\"type\":\"address\"}],\"internalType\":\"struct PresaleFactoryCertified.CertifiedAddition\",\"name\":\"_addition\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"listingPriceInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTokensLockDurationInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"liquidityPercentageAllocation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAllocationTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PresaleFactoryCertified.PresalePancakeSwapInfo\",\"name\":\"_cakeInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"saleTitle\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"linkTelegram\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"linkGithub\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"linkTwitter\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"linkWebsite\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"linkLogo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"whitepaper\",\"type\":\"string\"}],\"internalType\":\"struct PresaleFactoryCertified.PresaleStringInfo\",\"name\":\"_stringInfo\",\"type\":\"tuple\"}],\"name\":\"createPresaleCertified\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newFactory\",\"type\":\"address\"}],\"name\":\"migrateTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeLibrary\",\"outputs\":[{\"internalType\":\"contract LessLibrary\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PresaleFactoryCertified","CompilerVersion":"v0.8.5+commit.a4f2e591","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"0000000000000000000000008ea0a4fc09cb381e18ce58673250ad47b6bed9ca","EVMVersion":"Default","Library":"Calculations:3561a02e1192b89e2415724f43521f898e867013;Calculation1:9db15416434dfdc51eee98693d4937fe1c8d3da3","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7c4364dc872a5f9fed8398463b9fc15ade7b22c0f1f9e9ebd8d4a49344016856"}]}