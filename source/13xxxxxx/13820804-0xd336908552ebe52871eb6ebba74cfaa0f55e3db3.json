{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/Globals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nuint256 constant SECONDS_IN_THE_YEAR = 365 * 24 * 60 * 60; // 365 days * 24 hours * 60 minutes * 60 seconds\\nuint256 constant DAYS_IN_THE_YEAR = 365;\\nuint256 constant MAX_INT = type(uint256).max;\\n\\nuint256 constant DECIMALS18 = 10**18;\\n\\nuint256 constant PRECISION = 10**25;\\nuint256 constant PERCENTAGE_100 = 100 * PRECISION;\\n\\nuint256 constant BLOCKS_PER_DAY = 6450;\\nuint256 constant BLOCKS_PER_YEAR = BLOCKS_PER_DAY * 365;\\n\\nuint256 constant APY_TOKENS = DECIMALS18;\\n\\nuint256 constant PROTOCOL_PERCENTAGE = 20 * PRECISION;\\n\\nuint256 constant DEFAULT_REBALANCING_THRESHOLD = 10**23;\\n\\nuint256 constant EPOCH_DAYS_AMOUNT = 7;\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/PolicyBookAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IClaimingRegistry.sol\\\";\\nimport \\\"./interfaces/IPolicyBookAdmin.sol\\\";\\nimport \\\"./interfaces/IPolicyBookRegistry.sol\\\";\\nimport \\\"./interfaces/IContractsRegistry.sol\\\";\\nimport \\\"./interfaces/IPolicyBook.sol\\\";\\nimport \\\"./interfaces/ILeveragePortfolio.sol\\\";\\nimport \\\"./interfaces/IUserLeveragePool.sol\\\";\\nimport \\\"./interfaces/IPolicyQuote.sol\\\";\\n\\nimport \\\"./abstract/AbstractDependant.sol\\\";\\n\\nimport \\\"./helpers/Upgrader.sol\\\";\\nimport \\\"./Globals.sol\\\";\\n\\ncontract PolicyBookAdmin is IPolicyBookAdmin, OwnableUpgradeable, AbstractDependant {\\n    using Math for uint256;\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    IContractsRegistry public contractsRegistry;\\n    IPolicyBookRegistry public policyBookRegistry;\\n\\n    Upgrader internal upgrader;\\n    address private policyBookImplementationAddress;\\n\\n    // new state variables\\n    address private policyBookFacadeImplementationAddress;\\n    address private userLeverageImplementationAddress;\\n\\n    IClaimingRegistry internal claimingRegistry;\\n    EnumerableSet.AddressSet private _whitelistedDistributors;\\n    mapping(address => uint256) public override distributorFees;\\n\\n    event PolicyBookWhitelisted(address policyBookAddress, bool trigger);\\n    event DistributorWhitelisted(address distributorAddress, uint256 distributorFee);\\n    event DistributorBlacklisted(address distributorAddress);\\n    event UpdatedImageURI(uint256 claimIndex, string oldImageUri, string newImageUri);\\n\\n    uint256 public constant MAX_DISTRIBUTOR_FEE = 20 * PRECISION;\\n\\n    // new state post v2 deployment\\n    IPolicyQuote public policyQuote;\\n\\n    function __PolicyBookAdmin_init(\\n        address _policyBookImplementationAddress,\\n        address _policyBookFacadeImplementationAddress,\\n        address _userLeverageImplementationAddress\\n    ) external initializer {\\n        require(_policyBookImplementationAddress != address(0), \\\"PBA: PB Zero address\\\");\\n        require(_policyBookFacadeImplementationAddress != address(0), \\\"PBA: PBF Zero address\\\");\\n        require(_userLeverageImplementationAddress != address(0), \\\"PBA: PBF Zero address\\\");\\n\\n        __Ownable_init();\\n\\n        upgrader = new Upgrader();\\n\\n        policyBookImplementationAddress = _policyBookImplementationAddress;\\n        policyBookFacadeImplementationAddress = _policyBookFacadeImplementationAddress;\\n        userLeverageImplementationAddress = _userLeverageImplementationAddress;\\n    }\\n\\n    function setDependencies(IContractsRegistry _contractsRegistry)\\n        external\\n        override\\n        onlyInjectorOrZero\\n    {\\n        contractsRegistry = _contractsRegistry;\\n\\n        policyBookRegistry = IPolicyBookRegistry(\\n            _contractsRegistry.getPolicyBookRegistryContract()\\n        );\\n        claimingRegistry = IClaimingRegistry(_contractsRegistry.getClaimingRegistryContract());\\n\\n        policyQuote = IPolicyQuote(_contractsRegistry.getPolicyQuoteContract());\\n    }\\n\\n    function injectDependenciesToExistingPolicies(uint256 offset, uint256 limit)\\n        external\\n        onlyOwner\\n    {\\n        address[] memory _policies = policyBookRegistry.list(offset, limit);\\n        IContractsRegistry _contractsRegistry = contractsRegistry;\\n\\n        uint256 to = (offset.add(limit)).min(_policies.length).max(offset);\\n\\n        for (uint256 i = offset; i < to; i++) {\\n            AbstractDependant dependant = AbstractDependant(_policies[i]);\\n\\n            if (dependant.injector() == address(0)) {\\n                dependant.setInjector(address(this));\\n            }\\n\\n            dependant.setDependencies(_contractsRegistry);\\n        }\\n    }\\n\\n    function getUpgrader() external view override returns (address) {\\n        require(address(upgrader) != address(0), \\\"PolicyBookAdmin: Bad upgrader\\\");\\n\\n        return address(upgrader);\\n    }\\n\\n    function getImplementationOfPolicyBook(address policyBookAddress)\\n        external\\n        override\\n        returns (address)\\n    {\\n        require(\\n            policyBookRegistry.isPolicyBook(policyBookAddress),\\n            \\\"PolicyBookAdmin: Not a PolicyBook\\\"\\n        );\\n\\n        return upgrader.getImplementation(policyBookAddress);\\n    }\\n\\n    function getImplementationOfPolicyBookFacade(address policyBookFacadeAddress)\\n        external\\n        override\\n        returns (address)\\n    {\\n        require(\\n            policyBookRegistry.isPolicyBookFacade(policyBookFacadeAddress),\\n            \\\"PolicyBookAdmin: Not a PolicyBookFacade\\\"\\n        );\\n\\n        return upgrader.getImplementation(policyBookFacadeAddress);\\n    }\\n\\n    function getCurrentPolicyBooksImplementation() external view override returns (address) {\\n        return policyBookImplementationAddress;\\n    }\\n\\n    function getCurrentPolicyBooksFacadeImplementation() external view override returns (address) {\\n        return policyBookFacadeImplementationAddress;\\n    }\\n\\n    function getCurrentUserLeverageImplementation() external view override returns (address) {\\n        return userLeverageImplementationAddress;\\n    }\\n\\n    function _setPolicyBookImplementation(address policyBookImpl) internal {\\n        if (policyBookImplementationAddress != policyBookImpl) {\\n            policyBookImplementationAddress = policyBookImpl;\\n        }\\n    }\\n\\n    function _setPolicyBookFacadeImplementation(address policyBookFacadeImpl) internal {\\n        if (policyBookFacadeImplementationAddress != policyBookFacadeImpl) {\\n            policyBookFacadeImplementationAddress = policyBookFacadeImpl;\\n        }\\n    }\\n\\n    function _setUserLeverageImplementation(address userLeverageImpl) internal {\\n        if (userLeverageImplementationAddress != userLeverageImpl) {\\n            userLeverageImplementationAddress = userLeverageImpl;\\n        }\\n    }\\n\\n    function upgradePolicyBooks(\\n        address policyBookImpl,\\n        uint256 offset,\\n        uint256 limit\\n    ) external onlyOwner {\\n        _upgradePolicyBooks(policyBookImpl, offset, limit, \\\"\\\");\\n    }\\n\\n    /// @notice can only call functions that have no parameters\\n    function upgradePolicyBooksAndCall(\\n        address policyBookImpl,\\n        uint256 offset,\\n        uint256 limit,\\n        string calldata functionSignature\\n    ) external onlyOwner {\\n        _upgradePolicyBooks(policyBookImpl, offset, limit, functionSignature);\\n    }\\n\\n    function _upgradePolicyBooks(\\n        address policyBookImpl,\\n        uint256 offset,\\n        uint256 limit,\\n        string memory functionSignature\\n    ) internal {\\n        require(policyBookImpl != address(0), \\\"PolicyBookAdmin: Zero address\\\");\\n        require(Address.isContract(policyBookImpl), \\\"PolicyBookAdmin: Invalid address\\\");\\n\\n        _setPolicyBookImplementation(policyBookImpl);\\n\\n        address[] memory _policies = policyBookRegistry.list(offset, limit);\\n\\n        for (uint256 i = 0; i < _policies.length; i++) {\\n            if (!policyBookRegistry.isUserLeveragePool(_policies[i])) {\\n                if (bytes(functionSignature).length > 0) {\\n                    upgrader.upgradeAndCall(\\n                        _policies[i],\\n                        policyBookImpl,\\n                        abi.encodeWithSignature(functionSignature)\\n                    );\\n                } else {\\n                    upgrader.upgrade(_policies[i], policyBookImpl);\\n                }\\n            }\\n        }\\n    }\\n\\n    function upgradePolicyBookFacades(\\n        address policyBookFacadeImpl,\\n        uint256 offset,\\n        uint256 limit\\n    ) external onlyOwner {\\n        _upgradePolicyBookFacades(policyBookFacadeImpl, offset, limit, \\\"\\\");\\n    }\\n\\n    /// @notice can only call functions that have no parameters\\n    function upgradePolicyBookFacadesAndCall(\\n        address policyBookFacadeImpl,\\n        uint256 offset,\\n        uint256 limit,\\n        string calldata functionSignature\\n    ) external onlyOwner {\\n        _upgradePolicyBookFacades(policyBookFacadeImpl, offset, limit, functionSignature);\\n    }\\n\\n    function _upgradePolicyBookFacades(\\n        address policyBookFacadeImpl,\\n        uint256 offset,\\n        uint256 limit,\\n        string memory functionSignature\\n    ) internal {\\n        require(policyBookFacadeImpl != address(0), \\\"PolicyBookAdmin: Zero address\\\");\\n        require(Address.isContract(policyBookFacadeImpl), \\\"PolicyBookAdmin: Invalid address\\\");\\n\\n        _setPolicyBookFacadeImplementation(policyBookFacadeImpl);\\n\\n        address[] memory _policies = policyBookRegistry.list(offset, limit);\\n\\n        for (uint256 i = 0; i < _policies.length; i++) {\\n            if (!policyBookRegistry.isUserLeveragePool(_policies[i])) {\\n                IPolicyBook _policyBook = IPolicyBook(_policies[i]);\\n                address policyBookFacade =\\n                    address(IPolicyBookFacade(_policyBook.policyBookFacade()));\\n                if (bytes(functionSignature).length > 0) {\\n                    upgrader.upgradeAndCall(\\n                        policyBookFacade,\\n                        policyBookFacadeImpl,\\n                        abi.encodeWithSignature(functionSignature)\\n                    );\\n                } else {\\n                    upgrader.upgrade(policyBookFacade, policyBookFacadeImpl);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// TODO refactor all upgrades function in one function\\n    function upgradeUserLeveragePools(\\n        address userLeverageImpl,\\n        uint256 offset,\\n        uint256 limit\\n    ) external onlyOwner {\\n        _upgradeUserLeveragePools(userLeverageImpl, offset, limit, \\\"\\\");\\n    }\\n\\n    /// @notice can only call functions that have no parameters\\n    function upgradeUserLeveragePoolsAndCall(\\n        address userLeverageImpl,\\n        uint256 offset,\\n        uint256 limit,\\n        string calldata functionSignature\\n    ) external onlyOwner {\\n        _upgradeUserLeveragePools(userLeverageImpl, offset, limit, functionSignature);\\n    }\\n\\n    function _upgradeUserLeveragePools(\\n        address userLeverageImpl,\\n        uint256 offset,\\n        uint256 limit,\\n        string memory functionSignature\\n    ) internal {\\n        require(userLeverageImpl != address(0), \\\"PolicyBookAdmin: Zero address\\\");\\n        require(Address.isContract(userLeverageImpl), \\\"PolicyBookAdmin: Invalid address\\\");\\n\\n        _setUserLeverageImplementation(userLeverageImpl);\\n\\n        address[] memory _policies =\\n            policyBookRegistry.listByType(IPolicyBookFabric.ContractType.VARIOUS, offset, limit);\\n\\n        for (uint256 i = 0; i < _policies.length; i++) {\\n            if (!policyBookRegistry.isUserLeveragePool(_policies[i])) {\\n                if (bytes(functionSignature).length > 0) {\\n                    upgrader.upgradeAndCall(\\n                        _policies[i],\\n                        userLeverageImpl,\\n                        abi.encodeWithSignature(functionSignature)\\n                    );\\n                } else {\\n                    upgrader.upgrade(_policies[i], userLeverageImpl);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice It blacklists or whitelists a PolicyBook. Only whitelisted PolicyBooks can\\n    ///         receive stakes and funds\\n    /// @param policyBookAddress PolicyBook address that will be whitelisted or blacklisted\\n    /// @param whitelisted true to whitelist or false to blacklist a PolicyBook\\n    function whitelist(address policyBookAddress, bool whitelisted) public override onlyOwner {\\n        require(policyBookRegistry.isPolicyBook(policyBookAddress), \\\"PolicyBookAdmin: Not a PB\\\");\\n\\n        IPolicyBook(policyBookAddress).whitelist(whitelisted);\\n        policyBookRegistry.whitelist(policyBookAddress, whitelisted);\\n\\n        emit PolicyBookWhitelisted(policyBookAddress, whitelisted);\\n    }\\n\\n    /// @notice Whitelist distributor address and respective fees\\n    /// @param _distributor distributor address that will receive funds\\n    /// @param _distributorFee distributor fee amount (passed with its precision : _distributorFee * 10**25)\\n    function whitelistDistributor(address _distributor, uint256 _distributorFee)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(_distributor != address(0), \\\"PBAdmin: Null is forbidden\\\");\\n        require(_distributorFee > 0, \\\"PBAdmin: Fee cannot be 0\\\");\\n\\n        require(_distributorFee <= MAX_DISTRIBUTOR_FEE, \\\"PBAdmin: Fee is over max cap\\\");\\n\\n        _whitelistedDistributors.add(_distributor);\\n        distributorFees[_distributor] = _distributorFee;\\n\\n        emit DistributorWhitelisted(_distributor, _distributorFee);\\n    }\\n\\n    /// @notice Removes a distributor address from the distributor whitelist\\n    /// @param _distributor distributor address that will be blacklist\\n    function blacklistDistributor(address _distributor) external override onlyOwner {\\n        _whitelistedDistributors.remove(_distributor);\\n        delete distributorFees[_distributor];\\n\\n        emit DistributorBlacklisted(_distributor);\\n    }\\n\\n    /// @notice Distributor commission fee is 2-5% of the Premium.\\n    ///         It comes from the Protocol’s fee part\\n    /// @param _distributor address of the distributor\\n    /// @return true if address is a whitelisted distributor\\n    function isWhitelistedDistributor(address _distributor) external view override returns (bool) {\\n        return _whitelistedDistributors.contains(_distributor);\\n    }\\n\\n    function listDistributors(uint256 offset, uint256 limit)\\n        external\\n        view\\n        override\\n        returns (address[] memory _distributors, uint256[] memory _distributorsFees)\\n    {\\n        return _listDistributors(offset, limit, _whitelistedDistributors);\\n    }\\n\\n    /// @notice Used to get a list of whitelisted distributors\\n    /// @return _distributors a list containing distritubors addresses\\n    /// @return _distributorsFees a list containing distritubors fees\\n    function _listDistributors(\\n        uint256 offset,\\n        uint256 limit,\\n        EnumerableSet.AddressSet storage set\\n    ) internal view returns (address[] memory _distributors, uint256[] memory _distributorsFees) {\\n        uint256 to = (offset.add(limit)).min(set.length()).max(offset);\\n\\n        _distributors = new address[](to - offset);\\n        _distributorsFees = new uint256[](to - offset);\\n\\n        for (uint256 i = offset; i < to; i++) {\\n            _distributors[i - offset] = set.at(i);\\n            _distributorsFees[i - offset] = distributorFees[_distributors[i]];\\n        }\\n    }\\n\\n    function countDistributors() external view override returns (uint256) {\\n        return _whitelistedDistributors.length();\\n    }\\n\\n    function whitelistBatch(address[] calldata policyBooksAddresses, bool[] calldata whitelists)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            policyBooksAddresses.length == whitelists.length,\\n            \\\"PolicyBookAdmin: Length mismatch\\\"\\n        );\\n\\n        for (uint256 i = 0; i < policyBooksAddresses.length; i++) {\\n            whitelist(policyBooksAddresses[i], whitelists[i]);\\n        }\\n    }\\n\\n    /// @notice Update Image Uri in case it contains material that is ilegal\\n    ///         or offensive.\\n    /// @dev Only the owner can erase/update evidenceUri.\\n    /// @param _claimIndex Claim Index that is going to be updated\\n    /// @param _newEvidenceURI New evidence uri. It can be blank.\\n    function updateImageUriOfClaim(uint256 _claimIndex, string calldata _newEvidenceURI)\\n        public\\n        onlyOwner\\n    {\\n        IClaimingRegistry.ClaimInfo memory claimInfo = claimingRegistry.claimInfo(_claimIndex);\\n        string memory oldEvidenceURI = claimInfo.evidenceURI;\\n\\n        claimingRegistry.updateImageUriOfClaim(_claimIndex, _newEvidenceURI);\\n\\n        emit UpdatedImageURI(_claimIndex, oldEvidenceURI, _newEvidenceURI);\\n    }\\n\\n    /// @notice sets the policybookFacade mpls values\\n    /// @param _facadeAddress address of the policybook facade\\n    /// @param _userLeverageMPL uint256 value of the user leverage mpl;\\n    /// @param _reinsuranceLeverageMPL uint256 value of the reinsurance leverage mpl\\n    function setPolicyBookFacadeMPLs(\\n        address _facadeAddress,\\n        uint256 _userLeverageMPL,\\n        uint256 _reinsuranceLeverageMPL\\n    ) external override onlyOwner {\\n        IPolicyBookFacade(_facadeAddress).setMPLs(_userLeverageMPL, _reinsuranceLeverageMPL);\\n    }\\n\\n    /// @notice sets the policybookFacade mpls values\\n    /// @param _facadeAddress address of the policybook facade\\n    /// @param _newRebalancingThreshold uint256 value of the reinsurance leverage mpl\\n    function setPolicyBookFacadeRebalancingThreshold(\\n        address _facadeAddress,\\n        uint256 _newRebalancingThreshold\\n    ) external override onlyOwner {\\n        IPolicyBookFacade(_facadeAddress).setRebalancingThreshold(_newRebalancingThreshold);\\n    }\\n\\n    /// @notice sets the policybookFacade mpls values\\n    /// @param _facadeAddress address of the policybook facade\\n    /// @param _safePricingModel bool is pricing model safe (true) or not (false)\\n    function setPolicyBookFacadeSafePricingModel(address _facadeAddress, bool _safePricingModel)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        IPolicyBookFacade(_facadeAddress).setSafePricingModel(_safePricingModel);\\n    }\\n\\n    /// @notice sets the user leverage pool Rebalancing Threshold\\n    /// @param _LeveragePoolAddress address of the policybook facade\\n    /// @param _newRebalancingThreshold uint256 value of Rebalancing Threshold\\n    function setLeveragePortfolioRebalancingThreshold(\\n        address _LeveragePoolAddress,\\n        uint256 _newRebalancingThreshold\\n    ) external override onlyOwner {\\n        ILeveragePortfolio(_LeveragePoolAddress).setRebalancingThreshold(_newRebalancingThreshold);\\n    }\\n\\n    function setLeveragePortfolioProtocolConstant(\\n        address _LeveragePoolAddress,\\n        uint256 _targetUR,\\n        uint256 _d_ProtocolConstant,\\n        uint256 _a_ProtocolConstant,\\n        uint256 _max_ProtocolConstant\\n    ) external override onlyOwner {\\n        ILeveragePortfolio(_LeveragePoolAddress).setProtocolConstant(\\n            _targetUR,\\n            _d_ProtocolConstant,\\n            _a_ProtocolConstant,\\n            _max_ProtocolConstant\\n        );\\n    }\\n\\n    function setUserLeverageMaxCapacities(address _userLeverageAddress, uint256 _maxCapacities)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        IUserLeveragePool(_userLeverageAddress).setMaxCapacities(_maxCapacities);\\n    }\\n\\n    /// @notice setup all pricing model varlues\\n    ///@param _riskyAssetThresholdPercentage URRp Utilization ration for pricing model when the assets is considered risky, %\\n    ///@param _minimumCostPercentage MC minimum cost of cover (Premium), %;\\n    ///@param _minimumInsuranceCost minimum cost of insurance (Premium) , (10**18)\\n    ///@param _lowRiskMaxPercentPremiumCost TMCI target maximum cost of cover when the asset is not considered risky (Premium)\\n    ///@param _lowRiskMaxPercentPremiumCost100Utilization MCI not risky\\n    ///@param _highRiskMaxPercentPremiumCost TMCI target maximum cost of cover when the asset is considered risky (Premium)\\n    ///@param _highRiskMaxPercentPremiumCost100Utilization MCI risky\\n    function setupPricingModel(\\n        uint256 _riskyAssetThresholdPercentage,\\n        uint256 _minimumCostPercentage,\\n        uint256 _minimumInsuranceCost,\\n        uint256 _lowRiskMaxPercentPremiumCost,\\n        uint256 _lowRiskMaxPercentPremiumCost100Utilization,\\n        uint256 _highRiskMaxPercentPremiumCost,\\n        uint256 _highRiskMaxPercentPremiumCost100Utilization\\n    ) external override onlyOwner {\\n        policyQuote.setupPricingModel(\\n            _riskyAssetThresholdPercentage,\\n            _minimumCostPercentage,\\n            _minimumInsuranceCost,\\n            _lowRiskMaxPercentPremiumCost,\\n            _lowRiskMaxPercentPremiumCost100Utilization,\\n            _highRiskMaxPercentPremiumCost,\\n            _highRiskMaxPercentPremiumCost100Utilization\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/abstract/AbstractDependant.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\nimport \\\"../interfaces/IContractsRegistry.sol\\\";\\n\\nabstract contract AbstractDependant {\\n    /// @dev keccak256(AbstractDependant.setInjector(address)) - 1\\n    bytes32 private constant _INJECTOR_SLOT =\\n        0xd6b8f2e074594ceb05d47c27386969754b6ad0c15e5eb8f691399cd0be980e76;\\n\\n    modifier onlyInjectorOrZero() {\\n        address _injector = injector();\\n\\n        require(_injector == address(0) || _injector == msg.sender, \\\"Dependant: Not an injector\\\");\\n        _;\\n    }\\n\\n    function setInjector(address _injector) external onlyInjectorOrZero {\\n        bytes32 slot = _INJECTOR_SLOT;\\n\\n        assembly {\\n            sstore(slot, _injector)\\n        }\\n    }\\n\\n    /// @dev has to apply onlyInjectorOrZero() modifier\\n    function setDependencies(IContractsRegistry) external virtual;\\n\\n    function injector() public view returns (address _injector) {\\n        bytes32 slot = _INJECTOR_SLOT;\\n\\n        assembly {\\n            _injector := sload(slot)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/helpers/Upgrader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract Upgrader {\\n    address private immutable _owner;\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"DependencyInjector: Not an owner\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        _owner = msg.sender;\\n    }\\n\\n    function upgrade(address what, address to) external onlyOwner {\\n        TransparentUpgradeableProxy(payable(what)).upgradeTo(to);\\n    }\\n\\n    function upgradeAndCall(\\n        address what,\\n        address to,\\n        bytes calldata data\\n    ) external onlyOwner {\\n        TransparentUpgradeableProxy(payable(what)).upgradeToAndCall(to, data);\\n    }\\n\\n    function getImplementation(address what) external onlyOwner returns (address) {\\n        return TransparentUpgradeableProxy(payable(what)).implementation();\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/interfaces/IClaimingRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IPolicyBookFabric.sol\\\";\\n\\ninterface IClaimingRegistry {\\n    enum ClaimStatus {\\n        CAN_CLAIM,\\n        UNCLAIMABLE,\\n        PENDING,\\n        AWAITING_CALCULATION,\\n        REJECTED_CAN_APPEAL,\\n        REJECTED,\\n        ACCEPTED\\n    }\\n\\n    struct ClaimInfo {\\n        address claimer;\\n        address policyBookAddress;\\n        string evidenceURI;\\n        uint256 dateSubmitted;\\n        uint256 dateEnded;\\n        bool appeal;\\n        ClaimStatus status;\\n        uint256 claimAmount;\\n    }\\n\\n    /// @notice returns anonymous voting duration\\n    function anonymousVotingDuration(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns the whole voting duration\\n    function votingDuration(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns how many time should pass before anyone could calculate a claim result\\n    function anyoneCanCalculateClaimResultAfter(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns true if a user can buy new policy of specified PolicyBook\\n    function canBuyNewPolicy(address buyer, address policyBookAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice submits new PolicyBook claim for the user\\n    function submitClaim(\\n        address user,\\n        address policyBookAddress,\\n        string calldata evidenceURI,\\n        uint256 cover,\\n        bool appeal\\n    ) external returns (uint256);\\n\\n    /// @notice returns true if the claim with this index exists\\n    function claimExists(uint256 index) external view returns (bool);\\n\\n    /// @notice returns claim submition time\\n    function claimSubmittedTime(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns claim end time or zero in case it is pending\\n    function claimEndTime(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns true if the claim is anonymously votable\\n    function isClaimAnonymouslyVotable(uint256 index) external view returns (bool);\\n\\n    /// @notice returns true if the claim is exposably votable\\n    function isClaimExposablyVotable(uint256 index) external view returns (bool);\\n\\n    /// @notice returns true if claim is anonymously votable or exposably votable\\n    function isClaimVotable(uint256 index) external view returns (bool);\\n\\n    /// @notice returns true if a claim can be calculated by anyone\\n    function canClaimBeCalculatedByAnyone(uint256 index) external view returns (bool);\\n\\n    /// @notice returns true if this claim is pending or awaiting\\n    function isClaimPending(uint256 index) external view returns (bool);\\n\\n    /// @notice returns how many claims the holder has\\n    function countPolicyClaimerClaims(address user) external view returns (uint256);\\n\\n    /// @notice returns how many pending claims are there\\n    function countPendingClaims() external view returns (uint256);\\n\\n    /// @notice returns how many claims are there\\n    function countClaims() external view returns (uint256);\\n\\n    /// @notice returns a claim index of it's claimer and an ordinal number\\n    function claimOfOwnerIndexAt(address claimer, uint256 orderIndex)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice returns pending claim index by its ordinal index\\n    function pendingClaimIndexAt(uint256 orderIndex) external view returns (uint256);\\n\\n    /// @notice returns claim index by its ordinal index\\n    function claimIndexAt(uint256 orderIndex) external view returns (uint256);\\n\\n    /// @notice returns current active claim index by policybook and claimer\\n    function claimIndex(address claimer, address policyBookAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice returns true if the claim is appealed\\n    function isClaimAppeal(uint256 index) external view returns (bool);\\n\\n    /// @notice returns current status of a claim\\n    function policyStatus(address claimer, address policyBookAddress)\\n        external\\n        view\\n        returns (ClaimStatus);\\n\\n    /// @notice returns current status of a claim\\n    function claimStatus(uint256 index) external view returns (ClaimStatus);\\n\\n    /// @notice returns the claim owner (claimer)\\n    function claimOwner(uint256 index) external view returns (address);\\n\\n    /// @notice returns the claim PolicyBook\\n    function claimPolicyBook(uint256 index) external view returns (address);\\n\\n    /// @notice returns claim info by its index\\n    function claimInfo(uint256 index) external view returns (ClaimInfo memory _claimInfo);\\n\\n    function getAllPendingClaimsAmount() external view returns (uint256 _totalClaimsAmount);\\n\\n    function getClaimableAmounts(uint256[] memory _claimIndexes) external view returns (uint256);\\n\\n    /// @notice marks the user's claim as Accepted\\n    function acceptClaim(uint256 index) external;\\n\\n    /// @notice marks the user's claim as Rejected\\n    function rejectClaim(uint256 index) external;\\n\\n    /// @notice Update Image Uri in case it contains material that is ilegal\\n    ///         or offensive.\\n    /// @dev Only the owner of the PolicyBookAdmin can erase/update evidenceUri.\\n    /// @param _claimIndex Claim Index that is going to be updated\\n    /// @param _newEvidenceURI New evidence uri. It can be blank.\\n    function updateImageUriOfClaim(uint256 _claimIndex, string calldata _newEvidenceURI) external;\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/interfaces/IContractsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IContractsRegistry {\\n    function getUniswapRouterContract() external view returns (address);\\n\\n    function getUniswapBMIToETHPairContract() external view returns (address);\\n\\n    function getUniswapBMIToUSDTPairContract() external view returns (address);\\n\\n    function getSushiswapRouterContract() external view returns (address);\\n\\n    function getSushiswapBMIToETHPairContract() external view returns (address);\\n\\n    function getSushiswapBMIToUSDTPairContract() external view returns (address);\\n\\n    function getSushiSwapMasterChefV2Contract() external view returns (address);\\n\\n    function getWETHContract() external view returns (address);\\n\\n    function getUSDTContract() external view returns (address);\\n\\n    function getBMIContract() external view returns (address);\\n\\n    function getPriceFeedContract() external view returns (address);\\n\\n    function getPolicyBookRegistryContract() external view returns (address);\\n\\n    function getPolicyBookFabricContract() external view returns (address);\\n\\n    function getBMICoverStakingContract() external view returns (address);\\n\\n    function getBMICoverStakingViewContract() external view returns (address);\\n\\n    function getLegacyRewardsGeneratorContract() external view returns (address);\\n\\n    function getRewardsGeneratorContract() external view returns (address);\\n\\n    function getBMIUtilityNFTContract() external view returns (address);\\n\\n    function getNFTStakingContract() external view returns (address);\\n\\n    function getLiquidityMiningContract() external view returns (address);\\n\\n    function getClaimingRegistryContract() external view returns (address);\\n\\n    function getPolicyRegistryContract() external view returns (address);\\n\\n    function getLiquidityRegistryContract() external view returns (address);\\n\\n    function getClaimVotingContract() external view returns (address);\\n\\n    function getReinsurancePoolContract() external view returns (address);\\n\\n    function getLeveragePortfolioViewContract() external view returns (address);\\n\\n    function getCapitalPoolContract() external view returns (address);\\n\\n    function getPolicyBookAdminContract() external view returns (address);\\n\\n    function getPolicyQuoteContract() external view returns (address);\\n\\n    function getLegacyBMIStakingContract() external view returns (address);\\n\\n    function getBMIStakingContract() external view returns (address);\\n\\n    function getSTKBMIContract() external view returns (address);\\n\\n    function getVBMIContract() external view returns (address);\\n\\n    function getLegacyLiquidityMiningStakingContract() external view returns (address);\\n\\n    function getLiquidityMiningStakingETHContract() external view returns (address);\\n\\n    function getLiquidityMiningStakingUSDTContract() external view returns (address);\\n\\n    function getReputationSystemContract() external view returns (address);\\n\\n    function getAaveProtocolContract() external view returns (address);\\n\\n    function getAaveLendPoolAddressProvdierContract() external view returns (address);\\n\\n    function getAaveATokenContract() external view returns (address);\\n\\n    function getCompoundProtocolContract() external view returns (address);\\n\\n    function getCompoundCTokenContract() external view returns (address);\\n\\n    function getCompoundComptrollerContract() external view returns (address);\\n\\n    function getYearnProtocolContract() external view returns (address);\\n\\n    function getYearnVaultContract() external view returns (address);\\n\\n    function getYieldGeneratorContract() external view returns (address);\\n\\n    function getShieldMiningContract() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/interfaces/ILeveragePortfolio.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\ninterface ILeveragePortfolio {\\n    enum LeveragePortfolio {USERLEVERAGEPOOL, REINSURANCEPOOL}\\n    struct LevFundsFactors {\\n        uint256 netMPL;\\n        uint256 netMPLn;\\n        address policyBookAddr;\\n        // uint256 poolTotalLiquidity;\\n        // uint256 poolUR;\\n        // uint256 minUR;\\n    }\\n\\n    function targetUR() external view returns (uint256);\\n\\n    function d_ProtocolConstant() external view returns (uint256);\\n\\n    function a_ProtocolConstant() external view returns (uint256);\\n\\n    function max_ProtocolConstant() external view returns (uint256);\\n\\n    /// @notice deploy lStable from user leverage pool or reinsurance pool using 2 formulas: access by policybook.\\n    /// @param leveragePoolType LeveragePortfolio is determine the pool which call the function\\n    function deployLeverageStableToCoveragePools(LeveragePortfolio leveragePoolType)\\n        external\\n        returns (uint256);\\n\\n    /// @notice deploy the vStable from RP in v2 and for next versions it will be from RP and LP : access by policybook.\\n    function deployVirtualStableToCoveragePools() external returns (uint256);\\n\\n    /// @notice set the threshold % for re-evaluation of the lStable provided across all Coverage pools : access by owner\\n    /// @param threshold uint256 is the reevaluatation threshold\\n    function setRebalancingThreshold(uint256 threshold) external;\\n\\n    /// @notice set the protocol constant : access by owner\\n    /// @param _targetUR uint256 target utitlization ration\\n    /// @param _d_ProtocolConstant uint256 D protocol constant\\n    /// @param  _a_ProtocolConstant uint256 A protocol constant\\n    /// @param _max_ProtocolConstant uint256 the max % included\\n    function setProtocolConstant(\\n        uint256 _targetUR,\\n        uint256 _d_ProtocolConstant,\\n        uint256 _a_ProtocolConstant,\\n        uint256 _max_ProtocolConstant\\n    ) external;\\n\\n    /// @notice calc M factor by formual M = min( abs((1/ (Tur-UR))*d) /a, max)\\n    /// @param poolUR uint256 utitilization ratio for a coverage pool\\n    /// @return uint256 M facotr\\n    //function calcM(uint256 poolUR) external returns (uint256);\\n\\n    /// @return uint256 the amount of vStable stored in the pool\\n    function totalLiquidity() external view returns (uint256);\\n\\n    /// @notice add the portion of 80% of premium to user leverage pool where the leverage provide lstable : access policybook\\n    /// add the 20% of premium + portion of 80% of premium where reisnurance pool participate in coverage pools (vStable)  : access policybook\\n    /// @param epochsNumber uint256 the number of epochs which the policy holder will pay a premium for\\n    /// @param  premiumAmount uint256 the premium amount which is a portion of 80% of the premium\\n    function addPolicyPremium(uint256 epochsNumber, uint256 premiumAmount) external;\\n\\n    /// @notice Used to get a list of coverage pools which get leveraged , use with count()\\n    /// @return _coveragePools a list containing policybook addresses\\n    function listleveragedCoveragePools(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory _coveragePools);\\n\\n    /// @notice get count of coverage pools which get leveraged\\n    function countleveragedCoveragePools() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/interfaces/IPolicyBook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IPolicyBookFabric.sol\\\";\\nimport \\\"./IClaimingRegistry.sol\\\";\\nimport \\\"./IPolicyBookFacade.sol\\\";\\n\\ninterface IPolicyBook {\\n    enum WithdrawalStatus {NONE, PENDING, READY, EXPIRED}\\n\\n    struct PolicyHolder {\\n        uint256 coverTokens;\\n        uint256 startEpochNumber;\\n        uint256 endEpochNumber;\\n        uint256 paid;\\n        uint256 reinsurancePrice;\\n    }\\n\\n    struct WithdrawalInfo {\\n        uint256 withdrawalAmount;\\n        uint256 readyToWithdrawDate;\\n        bool withdrawalAllowed;\\n    }\\n\\n    struct BuyPolicyParameters {\\n        address buyer;\\n        address holder;\\n        uint256 epochsNumber;\\n        uint256 coverTokens;\\n        uint256 distributorFee;\\n        address distributor;\\n    }\\n\\n    function policyHolders(address _holder)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function policyBookFacade() external view returns (IPolicyBookFacade);\\n\\n    function setPolicyBookFacade(address _policyBookFacade) external;\\n\\n    function EPOCH_DURATION() external view returns (uint256);\\n\\n    function stblDecimals() external view returns (uint256);\\n\\n    function READY_TO_WITHDRAW_PERIOD() external view returns (uint256);\\n\\n    function whitelisted() external view returns (bool);\\n\\n    function epochStartTime() external view returns (uint256);\\n\\n    // @TODO: should we let DAO to change contract address?\\n    /// @notice Returns address of contract this PolicyBook covers, access: ANY\\n    /// @return _contract is address of covered contract\\n    function insuranceContractAddress() external view returns (address _contract);\\n\\n    /// @notice Returns type of contract this PolicyBook covers, access: ANY\\n    /// @return _type is type of contract\\n    function contractType() external view returns (IPolicyBookFabric.ContractType _type);\\n\\n    function totalLiquidity() external view returns (uint256);\\n\\n    function totalCoverTokens() external view returns (uint256);\\n\\n    // /// @notice return MPL for user leverage pool\\n    // function userleveragedMPL() external view returns (uint256);\\n\\n    // /// @notice return MPL for reinsurance pool\\n    // function reinsurancePoolMPL() external view returns (uint256);\\n\\n    // function bmiRewardMultiplier() external view returns (uint256);\\n\\n    function withdrawalsInfo(address _userAddr)\\n        external\\n        view\\n        returns (\\n            uint256 _withdrawalAmount,\\n            uint256 _readyToWithdrawDate,\\n            bool _withdrawalAllowed\\n        );\\n\\n    function __PolicyBook_init(\\n        address _insuranceContract,\\n        IPolicyBookFabric.ContractType _contractType,\\n        string calldata _description,\\n        string calldata _projectSymbol\\n    ) external;\\n\\n    function whitelist(bool _whitelisted) external;\\n\\n    function getEpoch(uint256 time) external view returns (uint256);\\n\\n    /// @notice get STBL equivalent\\n    function convertBMIXToSTBL(uint256 _amount) external view returns (uint256);\\n\\n    /// @notice get BMIX equivalent\\n    function convertSTBLToBMIX(uint256 _amount) external view returns (uint256);\\n\\n    /// @notice submits new claim of the policy book\\n    function submitClaimAndInitializeVoting(string calldata evidenceURI) external;\\n\\n    /// @notice submits new appeal claim of the policy book\\n    function submitAppealAndInitializeVoting(string calldata evidenceURI) external;\\n\\n    /// @notice updates info on claim acceptance\\n    function commitClaim(\\n        address claimer,\\n        uint256 claimAmount,\\n        uint256 claimEndTime,\\n        IClaimingRegistry.ClaimStatus status\\n    ) external;\\n\\n    /// @notice forces an update of RewardsGenerator multiplier\\n    function forceUpdateBMICoverStakingRewardMultiplier() external;\\n\\n    /// @notice function to get precise current cover and liquidity\\n    function getNewCoverAndLiquidity()\\n        external\\n        view\\n        returns (uint256 newTotalCoverTokens, uint256 newTotalLiquidity);\\n\\n    /// @notice view function to get precise policy price\\n    /// @param _epochsNumber is number of epochs to cover\\n    /// @param _coverTokens is number of tokens to cover\\n    /// @param _buyer address of the user who buy the policy\\n    /// @return totalSeconds is number of seconds to cover\\n    /// @return totalPrice is the policy price which will pay by the buyer\\n    function getPolicyPrice(\\n        uint256 _epochsNumber,\\n        uint256 _coverTokens,\\n        address _buyer\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalSeconds,\\n            uint256 totalPrice,\\n            uint256 pricePercentage\\n        );\\n\\n    /// @notice Let user to buy policy by supplying stable coin, access: ANY\\n    /// @param _buyer who is transferring funds\\n    /// @param _holder who owns coverage\\n    /// @param _epochsNumber period policy will cover\\n    /// @param _coverTokens amount paid for the coverage\\n    /// @param _distributorFee distributor fee (commission). It can't be greater than PROTOCOL_PERCENTAGE\\n    /// @param _distributor if it was sold buy a whitelisted distributor, it is distributor address to receive fee (commission)\\n    function buyPolicy(\\n        address _buyer,\\n        address _holder,\\n        uint256 _epochsNumber,\\n        uint256 _coverTokens,\\n        uint256 _distributorFee,\\n        address _distributor\\n    ) external returns (uint256, uint256);\\n\\n    function updateEpochsInfo() external;\\n\\n    function secondsToEndCurrentEpoch() external view returns (uint256);\\n\\n    /// @notice Let eligible contracts add liqiudity for another user by supplying stable coin\\n    /// @param _liquidityHolderAddr is address of address to assign cover\\n    /// @param _liqudityAmount is amount of stable coin tokens to secure\\n    function addLiquidityFor(address _liquidityHolderAddr, uint256 _liqudityAmount) external;\\n\\n    /// @notice Let user to add liquidity by supplying stable coin, access: ANY\\n    /// @param _liquidityBuyerAddr address the one that transfer funds\\n    /// @param _liquidityHolderAddr address the one that owns liquidity\\n    /// @param _liquidityAmount uint256 amount to be added on behalf the sender\\n    /// @param _stakeSTBLAmount uint256 the staked amount if add liq and stake\\n    function addLiquidity(\\n        address _liquidityBuyerAddr,\\n        address _liquidityHolderAddr,\\n        uint256 _liquidityAmount,\\n        uint256 _stakeSTBLAmount\\n    ) external;\\n\\n    function getAvailableBMIXWithdrawableAmount(address _userAddr) external view returns (uint256);\\n\\n    function getWithdrawalStatus(address _userAddr) external view returns (WithdrawalStatus);\\n\\n    function requestWithdrawal(uint256 _tokensToWithdraw, address _user) external;\\n\\n    // function requestWithdrawalWithPermit(\\n    //     uint256 _tokensToWithdraw,\\n    //     uint8 _v,\\n    //     bytes32 _r,\\n    //     bytes32 _s\\n    // ) external;\\n\\n    function unlockTokens() external;\\n\\n    /// @notice Let user to withdraw deposited liqiudity, access: ANY\\n    function withdrawLiquidity(address sender) external returns (uint256);\\n\\n    function getAPY() external view returns (uint256);\\n\\n    /// @notice Getting user stats, access: ANY\\n    function userStats(address _user) external view returns (PolicyHolder memory);\\n\\n    /// @notice Getting number stats, access: ANY\\n    /// @return _maxCapacities is a max token amount that a user can buy\\n    /// @return _totalSTBLLiquidity is PolicyBook's liquidity\\n    /// @return _totalLeveragedLiquidity is PolicyBook's leveraged liquidity\\n    /// @return _stakedSTBL is how much stable coin are staked on this PolicyBook\\n    /// @return _annualProfitYields is its APY\\n    /// @return _annualInsuranceCost is percentage of cover tokens that is required to be paid for 1 year of insurance\\n    function numberStats()\\n        external\\n        view\\n        returns (\\n            uint256 _maxCapacities,\\n            uint256 _totalSTBLLiquidity,\\n            uint256 _totalLeveragedLiquidity,\\n            uint256 _stakedSTBL,\\n            uint256 _annualProfitYields,\\n            uint256 _annualInsuranceCost,\\n            uint256 _bmiXRatio\\n        );\\n\\n    /// @notice Getting info, access: ANY\\n    /// @return _symbol is the symbol of PolicyBook (bmiXCover)\\n    /// @return _insuredContract is an addres of insured contract\\n    /// @return _contractType is a type of insured contract\\n    /// @return _whitelisted is a state of whitelisting\\n    function info()\\n        external\\n        view\\n        returns (\\n            string memory _symbol,\\n            address _insuredContract,\\n            IPolicyBookFabric.ContractType _contractType,\\n            bool _whitelisted\\n        );\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/interfaces/IPolicyBookAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IPolicyBookAdmin {\\n    function getUpgrader() external view returns (address);\\n\\n    function getImplementationOfPolicyBook(address policyBookAddress) external returns (address);\\n\\n    function getImplementationOfPolicyBookFacade(address policyBookFacadeAddress)\\n        external\\n        returns (address);\\n\\n    function getCurrentPolicyBooksImplementation() external view returns (address);\\n\\n    function getCurrentPolicyBooksFacadeImplementation() external view returns (address);\\n\\n    function getCurrentUserLeverageImplementation() external view returns (address);\\n\\n    /// @notice It blacklists or whitelists a PolicyBook. Only whitelisted PolicyBooks can\\n    ///         receive stakes and funds\\n    /// @param policyBookAddress PolicyBook address that will be whitelisted or blacklisted\\n    /// @param whitelisted true to whitelist or false to blacklist a PolicyBook\\n    function whitelist(address policyBookAddress, bool whitelisted) external;\\n\\n    /// @notice Whitelist distributor address. Commission fee is 2-5% of the Premium\\n    ///         It comes from the Protocol’s fee part\\n    /// @dev If commission fee is 5%, so _distributorFee = 5\\n    /// @param _distributor distributor address that will receive funds\\n    /// @param _distributorFee distributor fee amount\\n    function whitelistDistributor(address _distributor, uint256 _distributorFee) external;\\n\\n    /// @notice Removes a distributor address from the distributor whitelist\\n    /// @param _distributor distributor address that will be blacklist\\n    function blacklistDistributor(address _distributor) external;\\n\\n    /// @notice Distributor commission fee is 2-5% of the Premium\\n    ///         It comes from the Protocol’s fee part\\n    /// @dev If max commission fee is 5%, so _distributorFeeCap = 5. Default value is 5\\n    /// @param _distributor address of the distributor\\n    /// @return true if address is a whitelisted distributor\\n    function isWhitelistedDistributor(address _distributor) external view returns (bool);\\n\\n    /// @notice Distributor commission fee is 2-5% of the Premium\\n    ///         It comes from the Protocol’s fee part\\n    /// @dev If max commission fee is 5%, so _distributorFeeCap = 5. Default value is 5\\n    /// @param _distributor address of the distributor\\n    /// @return distributor fee value. It is distributor commission\\n    function distributorFees(address _distributor) external view returns (uint256);\\n\\n    /// @notice Used to get a list of whitelisted distributors\\n    /// @dev If max commission fee is 5%, so _distributorFeeCap = 5. Default value is 5\\n    /// @return _distributors a list containing distritubors addresses\\n    /// @return _distributorsFees a list containing distritubors fees\\n    function listDistributors(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory _distributors, uint256[] memory _distributorsFees);\\n\\n    /// @notice Returns number of whitelisted distributors, access: ANY\\n    function countDistributors() external view returns (uint256);\\n\\n    /// @notice sets the policybookFacade mpls values\\n    /// @param _facadeAddress address of the policybook facade\\n    /// @param _userLeverageMPL uint256 value of the user leverage mpl;\\n    /// @param _reinsuranceLeverageMPL uint256 value of the reinsurance leverage mpl\\n    function setPolicyBookFacadeMPLs(\\n        address _facadeAddress,\\n        uint256 _userLeverageMPL,\\n        uint256 _reinsuranceLeverageMPL\\n    ) external;\\n\\n    /// @notice sets the policybookFacade mpls values\\n    /// @param _facadeAddress address of the policybook facade\\n    /// @param _newRebalancingThreshold uint256 value of the reinsurance leverage mpl\\n    function setPolicyBookFacadeRebalancingThreshold(\\n        address _facadeAddress,\\n        uint256 _newRebalancingThreshold\\n    ) external;\\n\\n    /// @notice sets the policybookFacade mpls values\\n    /// @param _facadeAddress address of the policybook facade\\n    /// @param _safePricingModel bool is pricing model safe (true) or not (false)\\n    function setPolicyBookFacadeSafePricingModel(address _facadeAddress, bool _safePricingModel)\\n        external;\\n\\n    function setLeveragePortfolioRebalancingThreshold(\\n        address _LeveragePoolAddress,\\n        uint256 _newRebalancingThreshold\\n    ) external;\\n\\n    function setLeveragePortfolioProtocolConstant(\\n        address _LeveragePoolAddress,\\n        uint256 _targetUR,\\n        uint256 _d_ProtocolConstant,\\n        uint256 _a_ProtocolConstant,\\n        uint256 _max_ProtocolConstant\\n    ) external;\\n\\n    function setUserLeverageMaxCapacities(address _userLeverageAddress, uint256 _maxCapacities)\\n        external;\\n\\n    /// @notice setup all pricing model varlues\\n    ///@param _riskyAssetThresholdPercentage URRp Utilization ration for pricing model when the assets is considered risky, %\\n    ///@param _minimumCostPercentage MC minimum cost of cover (Premium), %;\\n    ///@param _minimumInsuranceCost minimum cost of insurance (Premium) , (10**18)\\n    ///@param _lowRiskMaxPercentPremiumCost TMCI target maximum cost of cover when the asset is not considered risky (Premium)\\n    ///@param _lowRiskMaxPercentPremiumCost100Utilization MCI not risky\\n    ///@param _highRiskMaxPercentPremiumCost TMCI target maximum cost of cover when the asset is considered risky (Premium)\\n    ///@param _highRiskMaxPercentPremiumCost100Utilization MCI risky\\n    function setupPricingModel(\\n        uint256 _riskyAssetThresholdPercentage,\\n        uint256 _minimumCostPercentage,\\n        uint256 _minimumInsuranceCost,\\n        uint256 _lowRiskMaxPercentPremiumCost,\\n        uint256 _lowRiskMaxPercentPremiumCost100Utilization,\\n        uint256 _highRiskMaxPercentPremiumCost,\\n        uint256 _highRiskMaxPercentPremiumCost100Utilization\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/interfaces/IPolicyBookFabric.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\ninterface IPolicyBookFabric {\\n    enum ContractType {CONTRACT, STABLECOIN, SERVICE, EXCHANGE, VARIOUS}\\n\\n    /// @notice Create new Policy Book contract, access: ANY\\n    /// @param _contract is Contract to create policy book for\\n    /// @param _contractType is Contract to create policy book for\\n    /// @param _description is bmiXCover token desription for this policy book\\n    /// @param _projectSymbol replaces x in bmiXCover token symbol\\n    /// @param _initialDeposit is an amount user deposits on creation (addLiquidity())\\n    /// @return _policyBook is address of created contract\\n    function create(\\n        address _contract,\\n        ContractType _contractType,\\n        string calldata _description,\\n        string calldata _projectSymbol,\\n        uint256 _initialDeposit,\\n        address _shieldMiningToken\\n    ) external returns (address);\\n\\n    function createLeveragePools(\\n        ContractType _contractType,\\n        string calldata _description,\\n        string calldata _projectSymbol\\n    ) external returns (address);\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/interfaces/IPolicyBookFacade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\nimport \\\"./IPolicyBook.sol\\\";\\nimport \\\"./ILeveragePortfolio.sol\\\";\\n\\ninterface IPolicyBookFacade {\\n    /// @notice Let user to buy policy by supplying stable coin, access: ANY\\n    /// @param _epochsNumber period policy will cover\\n    /// @param _coverTokens amount paid for the coverage\\n    function buyPolicy(uint256 _epochsNumber, uint256 _coverTokens) external;\\n\\n    /// @param _holder who owns coverage\\n    /// @param _epochsNumber period policy will cover\\n    /// @param _coverTokens amount paid for the coverage\\n    function buyPolicyFor(\\n        address _holder,\\n        uint256 _epochsNumber,\\n        uint256 _coverTokens\\n    ) external;\\n\\n    function policyBook() external view returns (IPolicyBook);\\n\\n    function userLiquidity(address account) external view returns (uint256);\\n\\n    /// @notice virtual funds deployed by reinsurance pool\\n    function VUreinsurnacePool() external view returns (uint256);\\n\\n    /// @notice leverage funds deployed by reinsurance pool\\n    function LUreinsurnacePool() external view returns (uint256);\\n\\n    /// @notice leverage funds deployed by user leverage pool\\n    function LUuserLeveragePool(address userLeveragePool) external view returns (uint256);\\n\\n    /// @notice total leverage funds deployed to the pool sum of (VUreinsurnacePool,LUreinsurnacePool,LUuserLeveragePool)\\n    function totalLeveragedLiquidity() external view returns (uint256);\\n\\n    function userleveragedMPL() external view returns (uint256);\\n\\n    function reinsurancePoolMPL() external view returns (uint256);\\n\\n    function rebalancingThreshold() external view returns (uint256);\\n\\n    function safePricingModel() external view returns (bool);\\n\\n    /// @notice policyBookFacade initializer\\n    /// @param pbProxy polciybook address upgreadable cotnract.\\n    function __PolicyBookFacade_init(\\n        address pbProxy,\\n        address liquidityProvider,\\n        uint256 initialDeposit\\n    ) external;\\n\\n    /// @param _epochsNumber period policy will cover\\n    /// @param _coverTokens amount paid for the coverage\\n    /// @param _distributor if it was sold buy a whitelisted distributor, it is distributor address to receive fee (commission)\\n    function buyPolicyFromDistributor(\\n        uint256 _epochsNumber,\\n        uint256 _coverTokens,\\n        address _distributor\\n    ) external;\\n\\n    /// @param _buyer who is buying the coverage\\n    /// @param _epochsNumber period policy will cover\\n    /// @param _coverTokens amount paid for the coverage\\n    /// @param _distributor if it was sold buy a whitelisted distributor, it is distributor address to receive fee (commission)\\n    function buyPolicyFromDistributorFor(\\n        address _buyer,\\n        uint256 _epochsNumber,\\n        uint256 _coverTokens,\\n        address _distributor\\n    ) external;\\n\\n    /// @notice Let user to add liquidity by supplying stable coin, access: ANY\\n    /// @param _liquidityAmount is amount of stable coin tokens to secure\\n    function addLiquidity(uint256 _liquidityAmount) external;\\n\\n    /// @notice Let user to add liquidity by supplying stable coin, access: ANY\\n    /// @param _user the one taht add liquidity\\n    /// @param _liquidityAmount is amount of stable coin tokens to secure\\n    function addLiquidityFromDistributorFor(address _user, uint256 _liquidityAmount) external;\\n\\n    /// @notice Let user to add liquidity by supplying stable coin and stake it,\\n    /// @dev access: ANY\\n    function addLiquidityAndStake(uint256 _liquidityAmount, uint256 _stakeSTBLAmount) external;\\n\\n    /// @notice Let user to withdraw deposited liqiudity, access: ANY\\n    function withdrawLiquidity() external;\\n\\n    /// @notice fetches all the pools data\\n    /// @return uint256 VUreinsurnacePool\\n    /// @return uint256 LUreinsurnacePool\\n    /// @return uint256 LUleveragePool\\n    /// @return uint256 user leverage pool address\\n    function getPoolsData()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            address\\n        );\\n\\n    /// @notice deploy leverage funds (RP lStable, ULP lStable)\\n    /// @param  deployedAmount uint256 the deployed amount to be added or substracted from the total liquidity\\n    /// @param leveragePool whether user leverage or reinsurance leverage\\n    function deployLeverageFundsAfterRebalance(\\n        uint256 deployedAmount,\\n        ILeveragePortfolio.LeveragePortfolio leveragePool\\n    ) external;\\n\\n    /// @notice deploy virtual funds (RP vStable)\\n    /// @param  deployedAmount uint256 the deployed amount to be added to the liquidity\\n    function deployVirtualFundsAfterRebalance(uint256 deployedAmount) external;\\n\\n    /// @notice set the MPL for the user leverage and the reinsurance leverage\\n    /// @param _userLeverageMPL uint256 value of the user leverage MPL\\n    /// @param _reinsuranceLeverageMPL uint256  value of the reinsurance leverage MPL\\n    function setMPLs(uint256 _userLeverageMPL, uint256 _reinsuranceLeverageMPL) external;\\n\\n    /// @notice sets the rebalancing threshold value\\n    /// @param _newRebalancingThreshold uint256 rebalancing threshhold value\\n    function setRebalancingThreshold(uint256 _newRebalancingThreshold) external;\\n\\n    /// @notice sets the rebalancing threshold value\\n    /// @param _safePricingModel bool is pricing model safe (true) or not (false)\\n    function setSafePricingModel(bool _safePricingModel) external;\\n\\n    /// @notice returns how many BMI tokens needs to approve in order to submit a claim\\n    function getClaimApprovalAmount(address user) external view returns (uint256);\\n\\n    /// @notice upserts a withdraw request\\n    /// @dev prevents adding a request if an already pending or ready request is open.\\n    /// @param _tokensToWithdraw uint256 amount of tokens to withdraw\\n    function requestWithdrawal(uint256 _tokensToWithdraw) external;\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/interfaces/IPolicyBookRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IPolicyBookFabric.sol\\\";\\n\\ninterface IPolicyBookRegistry {\\n    struct PolicyBookStats {\\n        string symbol;\\n        address insuredContract;\\n        IPolicyBookFabric.ContractType contractType;\\n        uint256 maxCapacity;\\n        uint256 totalSTBLLiquidity;\\n        uint256 totalLeveragedLiquidity;\\n        uint256 stakedSTBL;\\n        uint256 APY;\\n        uint256 annualInsuranceCost;\\n        uint256 bmiXRatio;\\n        bool whitelisted;\\n    }\\n\\n    function policyBooksByInsuredAddress(address insuredContract) external view returns (address);\\n\\n    function policyBookFacades(address facadeAddress) external view returns (address);\\n\\n    /// @notice Adds PolicyBook to registry, access: PolicyFabric\\n    function add(\\n        address insuredContract,\\n        IPolicyBookFabric.ContractType contractType,\\n        address policyBook,\\n        address facadeAddress\\n    ) external;\\n\\n    function whitelist(address policyBookAddress, bool whitelisted) external;\\n\\n    /// @notice returns required allowances for the policybooks\\n    function getPoliciesPrices(\\n        address[] calldata policyBooks,\\n        uint256[] calldata epochsNumbers,\\n        uint256[] calldata coversTokens\\n    ) external view returns (uint256[] memory _durations, uint256[] memory _allowances);\\n\\n    /// @notice Buys a batch of policies\\n    function buyPolicyBatch(\\n        address[] calldata policyBooks,\\n        uint256[] calldata epochsNumbers,\\n        uint256[] calldata coversTokens\\n    ) external;\\n\\n    /// @notice Checks if provided address is a PolicyBook\\n    function isPolicyBook(address policyBook) external view returns (bool);\\n\\n    /// @notice Checks if provided address is a policyBookFacade\\n    function isPolicyBookFacade(address _facadeAddress) external view returns (bool);\\n\\n    /// @notice Checks if provided address is a user leverage pool\\n    function isUserLeveragePool(address policyBookAddress) external view returns (bool);\\n\\n    /// @notice Returns number of registered PolicyBooks with certain contract type\\n    function countByType(IPolicyBookFabric.ContractType contractType)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Returns number of registered PolicyBooks, access: ANY\\n    function count() external view returns (uint256);\\n\\n    function countByTypeWhitelisted(IPolicyBookFabric.ContractType contractType)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function countWhitelisted() external view returns (uint256);\\n\\n    /// @notice Listing registered PolicyBooks with certain contract type, access: ANY\\n    /// @return _policyBooksArr is array of registered PolicyBook addresses with certain contract type\\n    function listByType(\\n        IPolicyBookFabric.ContractType contractType,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory _policyBooksArr);\\n\\n    /// @notice Listing registered PolicyBooks, access: ANY\\n    /// @return _policyBooksArr is array of registered PolicyBook addresses\\n    function list(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory _policyBooksArr);\\n\\n    function listByTypeWhitelisted(\\n        IPolicyBookFabric.ContractType contractType,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory _policyBooksArr);\\n\\n    function listWhitelisted(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory _policyBooksArr);\\n\\n    /// @notice Listing registered PolicyBooks with stats and certain contract type, access: ANY\\n    function listWithStatsByType(\\n        IPolicyBookFabric.ContractType contractType,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\n\\n    /// @notice Listing registered PolicyBooks with stats, access: ANY\\n    function listWithStats(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\n\\n    function listWithStatsByTypeWhitelisted(\\n        IPolicyBookFabric.ContractType contractType,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\n\\n    function listWithStatsWhitelisted(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\n\\n    /// @notice Getting stats from policy books, access: ANY\\n    /// @param policyBooks is list of PolicyBooks addresses\\n    function stats(address[] calldata policyBooks)\\n        external\\n        view\\n        returns (PolicyBookStats[] memory _stats);\\n\\n    /// @notice Return existing Policy Book contract, access: ANY\\n    /// @param insuredContract is contract address to lookup for created IPolicyBook\\n    function policyBookFor(address insuredContract) external view returns (address);\\n\\n    /// @notice Getting stats from policy books, access: ANY\\n    /// @param insuredContracts is list of insuredContracts in registry\\n    function statsByInsuredContracts(address[] calldata insuredContracts)\\n        external\\n        view\\n        returns (PolicyBookStats[] memory _stats);\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/interfaces/IPolicyQuote.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\ninterface IPolicyQuote {\\n    /// @notice Let user to calculate policy cost in stable coin, access: ANY\\n    /// @param _durationSeconds is number of seconds to cover\\n    /// @param _tokens is a number of tokens to cover\\n    /// @param _totalCoverTokens is a number of covered tokens\\n    /// @param _totalLiquidity is a liquidity amount\\n    /// @param _totalLeveragedLiquidity is a totale deployed leverage to the pool\\n    /// @param _safePricingModel the pricing model configured for this bool safe or risk\\n    /// @return amount of stable coin policy costs\\n    function getQuotePredefined(\\n        uint256 _durationSeconds,\\n        uint256 _tokens,\\n        uint256 _totalCoverTokens,\\n        uint256 _totalLiquidity,\\n        uint256 _totalLeveragedLiquidity,\\n        bool _safePricingModel\\n    ) external view returns (uint256, uint256);\\n\\n    /// @notice Let user to calculate policy cost in stable coin, access: ANY\\n    /// @param _durationSeconds is number of seconds to cover\\n    /// @param _tokens is number of tokens to cover\\n    /// @param _policyBookAddr is address of policy book\\n    /// @return amount of stable coin policy costs\\n    function getQuote(\\n        uint256 _durationSeconds,\\n        uint256 _tokens,\\n        address _policyBookAddr\\n    ) external view returns (uint256);\\n\\n    /// @notice setup all pricing model varlues\\n    ///@param _riskyAssetThresholdPercentage URRp Utilization ration for pricing model when the assets is considered risky, %\\n    ///@param _minimumCostPercentage MC minimum cost of cover (Premium), %;\\n    ///@param _minimumInsuranceCost minimum cost of insurance (Premium) , (10**18)\\n    ///@param _lowRiskMaxPercentPremiumCost TMCI target maximum cost of cover when the asset is not considered risky (Premium)\\n    ///@param _lowRiskMaxPercentPremiumCost100Utilization MCI not risky\\n    ///@param _highRiskMaxPercentPremiumCost TMCI target maximum cost of cover when the asset is considered risky (Premium)\\n    ///@param _highRiskMaxPercentPremiumCost100Utilization MCI risky\\n    function setupPricingModel(\\n        uint256 _riskyAssetThresholdPercentage,\\n        uint256 _minimumCostPercentage,\\n        uint256 _minimumInsuranceCost,\\n        uint256 _lowRiskMaxPercentPremiumCost,\\n        uint256 _lowRiskMaxPercentPremiumCost100Utilization,\\n        uint256 _highRiskMaxPercentPremiumCost,\\n        uint256 _highRiskMaxPercentPremiumCost100Utilization\\n    ) external;\\n\\n    ///@notice return min ur under the current pricing model\\n    ///@param _safePricingModel pricing model of the pool wethere it is safe or risky model\\n    function getMINUR(bool _safePricingModel) external view returns (uint256 _minUR);\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/interfaces/IUserLeveragePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IPolicyBookFabric.sol\\\";\\nimport \\\"./IClaimingRegistry.sol\\\";\\nimport \\\"./IPolicyBookFacade.sol\\\";\\n\\ninterface IUserLeveragePool {\\n    enum WithdrawalStatus {NONE, PENDING, READY, EXPIRED}\\n\\n    struct WithdrawalInfo {\\n        uint256 withdrawalAmount;\\n        uint256 readyToWithdrawDate;\\n        bool withdrawalAllowed;\\n    }\\n\\n    struct BMIMultiplierFactors {\\n        uint256 poolMultiplier;\\n        uint256 leverageProvided;\\n        uint256 multiplier;\\n    }\\n\\n    /// @notice Returns type of contract this PolicyBook covers, access: ANY\\n    /// @return _type is type of contract\\n    function contractType() external view returns (IPolicyBookFabric.ContractType _type);\\n\\n    function userLiquidity(address account) external view returns (uint256);\\n\\n    function EPOCH_DURATION() external view returns (uint256);\\n\\n    function READY_TO_WITHDRAW_PERIOD() external view returns (uint256);\\n\\n    function epochStartTime() external view returns (uint256);\\n\\n    function withdrawalsInfo(address _userAddr)\\n        external\\n        view\\n        returns (\\n            uint256 _withdrawalAmount,\\n            uint256 _readyToWithdrawDate,\\n            bool _withdrawalAllowed\\n        );\\n\\n    function __UserLeveragePool_init(\\n        IPolicyBookFabric.ContractType _contractType,\\n        string calldata _description,\\n        string calldata _projectSymbol\\n    ) external;\\n\\n    function getEpoch(uint256 time) external view returns (uint256);\\n\\n    /// @notice get STBL equivalent\\n    function convertBMIXToSTBL(uint256 _amount) external view returns (uint256);\\n\\n    /// @notice get BMIX equivalent\\n    function convertSTBLToBMIX(uint256 _amount) external view returns (uint256);\\n\\n    /// @notice forces an update of RewardsGenerator multiplier\\n    function forceUpdateBMICoverStakingRewardMultiplier() external;\\n\\n    /// @notice function to get precise current cover and liquidity\\n    function getNewCoverAndLiquidity()\\n        external\\n        view\\n        returns (uint256 newTotalCoverTokens, uint256 newTotalLiquidity);\\n\\n    function updateEpochsInfo() external;\\n\\n    function secondsToEndCurrentEpoch() external view returns (uint256);\\n\\n    /// @notice Let user to add liquidity by supplying stable coin, access: ANY\\n    /// @param _liqudityAmount is amount of stable coin tokens to secure\\n    function addLiquidity(uint256 _liqudityAmount) external;\\n\\n    // /// @notice Let eligible contracts add liqiudity for another user by supplying stable coin\\n    // /// @param _liquidityHolderAddr is address of address to assign cover\\n    // /// @param _liqudityAmount is amount of stable coin tokens to secure\\n    // function addLiquidityFor(address _liquidityHolderAddr, uint256 _liqudityAmount) external;\\n\\n    function addLiquidityAndStake(uint256 _liquidityAmount, uint256 _stakeSTBLAmount) external;\\n\\n    function getAvailableBMIXWithdrawableAmount(address _userAddr) external view returns (uint256);\\n\\n    function getWithdrawalStatus(address _userAddr) external view returns (WithdrawalStatus);\\n\\n    function requestWithdrawal(uint256 _tokensToWithdraw) external;\\n\\n    // function requestWithdrawalWithPermit(\\n    //     uint256 _tokensToWithdraw,\\n    //     uint8 _v,\\n    //     bytes32 _r,\\n    //     bytes32 _s\\n    // ) external;\\n\\n    function unlockTokens() external;\\n\\n    /// @notice Let user to withdraw deposited liqiudity, access: ANY\\n    function withdrawLiquidity() external;\\n\\n    function getAPY() external view returns (uint256);\\n\\n    function whitelisted() external view returns (bool);\\n\\n    function whitelist(bool _whitelisted) external;\\n\\n    /// @notice set max total liquidity for the pool\\n    /// @param _maxCapacities uint256 the max total liquidity\\n    function setMaxCapacities(uint256 _maxCapacities) external;\\n\\n    /// @notice Getting number stats, access: ANY\\n    /// @return _maxCapacities is a max liquidity of the pool\\n    /// @return _totalSTBLLiquidity is PolicyBook's liquidity\\n    /// @return _totalLeveragedLiquidity is becuase to follow the same function in policy book\\n    /// @return _stakedSTBL is how much stable coin are staked on this PolicyBook\\n    /// @return _annualProfitYields is its APY\\n    /// @return _annualInsuranceCost is becuase to follow the same function in policy book\\n    /// @return  _bmiXRatio is multiplied by 10**18. To get STBL representation\\n    function numberStats()\\n        external\\n        view\\n        returns (\\n            uint256 _maxCapacities,\\n            uint256 _totalSTBLLiquidity,\\n            uint256 _totalLeveragedLiquidity,\\n            uint256 _stakedSTBL,\\n            uint256 _annualProfitYields,\\n            uint256 _annualInsuranceCost,\\n            uint256 _bmiXRatio\\n        );\\n\\n    /// @notice Getting info, access: ANY\\n    /// @return _symbol is the symbol of PolicyBook (bmiXCover)\\n    /// @return _insuredContract is an addres of insured contract\\n    /// @return _contractType is becuase to follow the same function in policy book\\n    /// @return _whitelisted is a state of whitelisting\\n    function info()\\n        external\\n        view\\n        returns (\\n            string memory _symbol,\\n            address _insuredContract,\\n            IPolicyBookFabric.ContractType _contractType,\\n            bool _whitelisted\\n        );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n * \\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n * \\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     * \\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 { revert(0, returndatasize()) }\\n            default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal virtual view returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     * \\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback () payable external {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive () payable external {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     * \\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./UpgradeableProxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n * \\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n * \\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n * \\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n * \\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative inerface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is UpgradeableProxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}.\\n     */\\n    constructor(address _logic, address _admin, bytes memory _data) payable UpgradeableProxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _setAdmin(_admin);\\n    }\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _admin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     * \\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     * \\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address) {\\n        return _admin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     * \\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     * \\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address) {\\n        return _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     * \\n     * Emits an {AdminChanged} event.\\n     * \\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external ifAdmin {\\n        require(newAdmin != address(0), \\\"TransparentUpgradeableProxy: new admin is the zero address\\\");\\n        emit AdminChanged(_admin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     * \\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeTo(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     * \\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeTo(newImplementation);\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success,) = newImplementation.delegatecall(data);\\n        require(success);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view returns (address adm) {\\n        bytes32 slot = _ADMIN_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            adm := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        bytes32 slot = _ADMIN_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newAdmin)\\n        }\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal override virtual {\\n        require(msg.sender != _admin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/UpgradeableProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Proxy.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n * \\n * Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\\n * {TransparentUpgradeableProxy}.\\n */\\ncontract UpgradeableProxy is Proxy {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     * \\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _setImplementation(_logic);\\n        if(_data.length > 0) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success,) = _logic.delegatecall(_data);\\n            require(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal override view returns (address impl) {\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            impl := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Upgrades the proxy to a new implementation.\\n     * \\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableProxy: new implementation is not a contract\\\");\\n\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newImplementation)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"distributorAddress\",\"type\":\"address\"}],\"name\":\"DistributorBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"distributorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distributorFee\",\"type\":\"uint256\"}],\"name\":\"DistributorWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"policyBookAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"trigger\",\"type\":\"bool\"}],\"name\":\"PolicyBookWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldImageUri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newImageUri\",\"type\":\"string\"}],\"name\":\"UpdatedImageURI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_DISTRIBUTOR_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyBookImplementationAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_policyBookFacadeImplementationAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_userLeverageImplementationAddress\",\"type\":\"address\"}],\"name\":\"__PolicyBookAdmin_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"blacklistDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractsRegistry\",\"outputs\":[{\"internalType\":\"contract IContractsRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countDistributors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"distributorFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPolicyBooksFacadeImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPolicyBooksImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentUserLeverageImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"policyBookAddress\",\"type\":\"address\"}],\"name\":\"getImplementationOfPolicyBook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"policyBookFacadeAddress\",\"type\":\"address\"}],\"name\":\"getImplementationOfPolicyBookFacade\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUpgrader\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"injectDependenciesToExistingPolicies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"injector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_injector\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"isWhitelistedDistributor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"listDistributors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_distributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_distributorsFees\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyBookRegistry\",\"outputs\":[{\"internalType\":\"contract IPolicyBookRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyQuote\",\"outputs\":[{\"internalType\":\"contract IPolicyQuote\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IContractsRegistry\",\"name\":\"_contractsRegistry\",\"type\":\"address\"}],\"name\":\"setDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_injector\",\"type\":\"address\"}],\"name\":\"setInjector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_LeveragePoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_targetUR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_d_ProtocolConstant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_a_ProtocolConstant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max_ProtocolConstant\",\"type\":\"uint256\"}],\"name\":\"setLeveragePortfolioProtocolConstant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_LeveragePoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newRebalancingThreshold\",\"type\":\"uint256\"}],\"name\":\"setLeveragePortfolioRebalancingThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facadeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_userLeverageMPL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reinsuranceLeverageMPL\",\"type\":\"uint256\"}],\"name\":\"setPolicyBookFacadeMPLs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facadeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newRebalancingThreshold\",\"type\":\"uint256\"}],\"name\":\"setPolicyBookFacadeRebalancingThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facadeAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_safePricingModel\",\"type\":\"bool\"}],\"name\":\"setPolicyBookFacadeSafePricingModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userLeverageAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxCapacities\",\"type\":\"uint256\"}],\"name\":\"setUserLeverageMaxCapacities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_riskyAssetThresholdPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumCostPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumInsuranceCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lowRiskMaxPercentPremiumCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lowRiskMaxPercentPremiumCost100Utilization\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_highRiskMaxPercentPremiumCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_highRiskMaxPercentPremiumCost100Utilization\",\"type\":\"uint256\"}],\"name\":\"setupPricingModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newEvidenceURI\",\"type\":\"string\"}],\"name\":\"updateImageUriOfClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"policyBookFacadeImpl\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"upgradePolicyBookFacades\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"policyBookFacadeImpl\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"functionSignature\",\"type\":\"string\"}],\"name\":\"upgradePolicyBookFacadesAndCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"policyBookImpl\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"upgradePolicyBooks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"policyBookImpl\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"functionSignature\",\"type\":\"string\"}],\"name\":\"upgradePolicyBooksAndCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userLeverageImpl\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"upgradeUserLeveragePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userLeverageImpl\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"functionSignature\",\"type\":\"string\"}],\"name\":\"upgradeUserLeveragePoolsAndCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"policyBookAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"policyBooksAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"whitelists\",\"type\":\"bool[]\"}],\"name\":\"whitelistBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_distributorFee\",\"type\":\"uint256\"}],\"name\":\"whitelistDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PolicyBookAdmin","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}