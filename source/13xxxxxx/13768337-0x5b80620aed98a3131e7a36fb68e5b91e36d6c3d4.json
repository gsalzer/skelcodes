{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/staking/BloodFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\nimport \\\"../IVampireGameERC721.sol\\\";\\n\\nimport \\\"./IBloodFarm.sol\\\";\\n\\nimport \\\"../random/IRandom.sol\\\";\\n\\n/// @notice holds info about a staked Human\\nstruct HumanStake {\\n    /// @notice address of the token owner\\n    address owner;\\n    /// @notice id of the token\\n    uint16 tokenId;\\n    /// @notice timestamp of when the human was staked\\n    uint80 stakedAt;\\n}\\n\\n/// @notice holds info about a human unstake request\\nstruct HumanUnstakeRequest {\\n    /// @notice id of the token to unstake\\n    uint16 tokenId;\\n    /// @notice block number of the unstake request\\n    uint240 blocknumber;\\n}\\n\\n/// @title The Blood Farm\\n///\\n/// Note: A lot of the ideas in this contract are from wolf.game, some parts\\n/// were taken directly from their original contract. A lot of things were reorganized\\n///\\n/// ---\\n///\\n/// This contract holds all the state for staked humans and all the logic\\n/// for updating the state.\\n///\\n/// It doesn't transfer tokens or knows about other contracts.\\ncontract BloodFarm is IBloodFarm, IERC721Receiver, Ownable {\\n    /// ==== Immutable Properties\\n\\n    /// @notice how many bloodbags humans produce per day\\n    uint256 public constant DAILY_BLOODBAG_RATE = 5 ether;\\n    /// @notice blood farm guards won't let your human out for at least a few days.\\n    uint256 public constant MINIMUM_TO_EXIT = 2 days;\\n    /// @notice absolute total of bloodbags that can be produced\\n    uint256 public constant MAXIMUM_GLOBAL_BLOOD = 4500000 ether;\\n\\n    /// ==== Mutable Properties\\n\\n    /// @notice can't commit to risky action and reveal the outcome in the same block.\\n    /// This is the amount of blocks you need to wait to be able to reveal the outcome.\\n    uint256 public REVEAL_BLOCK_SPACE;\\n\\n    /// @notice total amount of $BLOODBAGS\\n    uint256 public totalBloodDrained;\\n    /// @notice nubmer of humans staked in the blood farm\\n    uint256 public totalHumansStaked;\\n    /// @notice the last time totalBloodDrained was updated\\n    uint256 public lastBloodUpdate;\\n\\n    /// @notice map tokenId to its staking info\\n    mapping(uint16 => HumanStake) public stakingMap;\\n    /// @notice map a tokenId to its unstake request\\n    mapping(uint16 => HumanUnstakeRequest) public unstakingRequestMap;\\n\\n    /// @notice map of controllers that can control this contract\\n    mapping(address => bool) public controllers;\\n\\n    /// ==== Constructor\\n\\n    constructor(uint256 _REVEAL_BLOCK_SPACE) {\\n        REVEAL_BLOCK_SPACE = _REVEAL_BLOCK_SPACE;\\n    }\\n\\n    /// ==== Modifiers\\n\\n    modifier onlyControllers() {\\n        require(controllers[_msgSender()], \\\"ONLY_CONTROLLERS_ALLOWED\\\");\\n        _;\\n    }\\n\\n    modifier updateEarnings() {\\n        if (totalBloodDrained < MAXIMUM_GLOBAL_BLOOD) {\\n            totalBloodDrained +=\\n                ((block.timestamp - lastBloodUpdate) *\\n                    totalHumansStaked *\\n                    DAILY_BLOODBAG_RATE) /\\n                1 days;\\n            lastBloodUpdate = block.timestamp;\\n        }\\n        _;\\n    }\\n\\n    /// ==== Events\\n\\n    event StakedHuman(address indexed owner, uint16 indexed tokenId);\\n    /// @param owner who's claiming\\n    /// @param tokenId id of the token\\n    /// @param amount total amount to claim, tax included\\n    event BloodBagClaimed(\\n        address indexed owner,\\n        uint16 indexed tokenId,\\n        uint256 amount\\n    );\\n    event RequestedUnstake(address indexed owner, uint16 indexed tokenId);\\n    event UnstakedHuman(\\n        address indexed owner,\\n        uint16 indexed tokenId,\\n        uint256 amount\\n    );\\n\\n    /// ==== Controls\\n\\n    /// @notice Sends a human to the blood farm\\n    /// @param owner the address of the token owner\\n    /// @param tokenId the id of the token that will be staked\\n    function stakeHuman(address owner, uint16 tokenId)\\n        external\\n        override\\n        onlyControllers\\n    {\\n        stakingMap[tokenId] = HumanStake({\\n            owner: owner,\\n            tokenId: tokenId,\\n            stakedAt: uint80(block.timestamp)\\n        });\\n        totalHumansStaked += 1;\\n\\n        emit StakedHuman(owner, tokenId);\\n\\n        // <- Controller should transfer a Human to this contract\\n    }\\n\\n    function claimBloodBags(address sender, uint16 tokenId)\\n        external\\n        override\\n        onlyControllers\\n        returns (uint256 owed)\\n    {\\n        HumanStake memory stake = stakingMap[tokenId];\\n\\n        // Check if sender is the owner\\n        require(stake.owner == sender, \\\"NOT_OWNER\\\");\\n        // Do not allow to claim if there is a request to unstake\\n        require(\\n            unstakingRequestMap[tokenId].blocknumber == 0,\\n            \\\"CANT_CLAIM_WITH_PENDING_UNSTAKE_REQUEST\\\"\\n        );\\n\\n        // Set total owed. Tax is calculated in controller.\\n        owed = _calculateOwedBloodBags(stake);\\n\\n        // Reset staking info\\n        stakingMap[tokenId] = HumanStake({\\n            owner: sender,\\n            tokenId: tokenId,\\n            stakedAt: uint80(block.timestamp)\\n        });\\n\\n        emit BloodBagClaimed(sender, tokenId, owed);\\n\\n        // <- Controller should update the vampires bloodbags\\n        // <- Controller should transfer bloodbags to owner\\n    }\\n\\n    function requestToUnstakeHuman(address sender, uint16 tokenId)\\n        external\\n        override\\n        onlyControllers\\n    {\\n        // Check token ownership\\n        require(stakingMap[tokenId].owner == sender, \\\"NOT_YOURS\\\");\\n        // Make sure it's staked\\n        require(stakingMap[tokenId].stakedAt != 0, \\\"NOT_STAKED\\\");\\n        // Make sure there is no request to unstake yer\\n        require(\\n            unstakingRequestMap[tokenId].blocknumber == 0,\\n            \\\"ALREADY_REQUESTED\\\"\\n        );\\n        // Make sure it got the minimum amount of blood bags\\n        require(\\n            block.timestamp - stakingMap[tokenId].stakedAt > MINIMUM_TO_EXIT,\\n            \\\"NOT_ENOUGH_BLOOD\\\"\\n        );\\n        _requestToUnstakeHuman(tokenId);\\n        emit RequestedUnstake(sender, tokenId);\\n    }\\n\\n    function unstakeHuman(address sender, uint16 tokenId)\\n        external\\n        override\\n        onlyControllers\\n        returns (uint256 owed)\\n    {\\n        // Check token ownership\\n        require(stakingMap[tokenId].owner == sender, \\\"NOT_YOURS\\\");\\n        // Make sure it's staked\\n        require(stakingMap[tokenId].stakedAt != 0, \\\"NOT_STAKED\\\");\\n        // Make sure there is an unstake request\\n        require(unstakingRequestMap[tokenId].blocknumber != 0, \\\"NOT_REQUESTED\\\");\\n\\n        owed = _unstakeHuman(tokenId);\\n\\n        emit UnstakedHuman(sender, tokenId, owed);\\n    }\\n\\n    /// ==== Helpers\\n\\n    function _calculateOwedBloodBags(HumanStake memory stake)\\n        private\\n        view\\n        returns (uint256 owed)\\n    {\\n        if (totalBloodDrained < MAXIMUM_GLOBAL_BLOOD) {\\n            // still under the maxium limit, so normal logic here\\n            owed =\\n                ((block.timestamp - stake.stakedAt) * DAILY_BLOODBAG_RATE) /\\n                1 days;\\n        } else if (stake.stakedAt > lastBloodUpdate) {\\n            // when the player staked after the $BLOODBAG already hit the max amount\\n            owed = 0;\\n        } else {\\n            // if the total amount to claim will surpass the total limit, then some of the\\n            // blood won't get claimed\\n            owed =\\n                ((lastBloodUpdate - stake.stakedAt) * DAILY_BLOODBAG_RATE) /\\n                1 days;\\n        }\\n    }\\n\\n    /// @dev Before calling this:\\n    /// - Check if there is NO unstake requests for this token\\n    function _requestToUnstakeHuman(uint16 tokenId) private {\\n        uint16 tid = uint16(tokenId);\\n        unstakingRequestMap[tokenId] = HumanUnstakeRequest({\\n            tokenId: tid,\\n            blocknumber: uint240(block.number)\\n        });\\n    }\\n\\n    /// @dev Before calling this:\\n    /// - Check ownership of the token\\n    /// - Check if a unstake request exists\\n    function _unstakeHuman(uint16 tokenId) private returns (uint256 owed) {\\n        HumanStake memory stake = stakingMap[tokenId];\\n        // Check if this tx is at least REVEAL_BLOCK_SPACE older than the request block\\n        require(\\n            block.number - unstakingRequestMap[tokenId].blocknumber >=\\n                REVEAL_BLOCK_SPACE,\\n            \\\"HUMAN_NOT_READY_FOR_CLAIM\\\"\\n        );\\n\\n        // Set total owed. Tax is calculated in controller.\\n        owed = _calculateOwedBloodBags(stake);\\n\\n        // -- Update the BloodFarm state\\n\\n        // remove unstaking request\\n        delete unstakingRequestMap[tokenId];\\n        // remove stake info\\n        delete stakingMap[tokenId];\\n        // decrement total humans staked\\n        totalHumansStaked -= 1;\\n\\n        // <- Controller calculates the tax to vampires and update the vampires bloodbags\\n        // <- Controller transfer NFT to owner\\n        // <- Controller transfer bloodbags to owner\\n    }\\n\\n    /// ==== Only Owner\\n\\n    function setRevealBlockspace(uint256 space) external onlyOwner {\\n        require(REVEAL_BLOCK_SPACE != space, \\\"NO_CHANGES\\\");\\n        REVEAL_BLOCK_SPACE = space;\\n    }\\n\\n    /// @notice add a controller that will be able to call functions in this contract\\n    /// @param controller the address that will be authorized\\n    function addController(address controller) external onlyOwner {\\n        controllers[controller] = true;\\n    }\\n\\n    /// @notice remove a controller so it won't be able to call functions in this contract anymore\\n    /// @param controller the address that will be unauthorized\\n    function removeController(address controller) external onlyOwner {\\n        controllers[controller] = false;\\n    }\\n\\n    /// ==== IERC721Receiver\\n\\n    function onERC721Received(\\n        address,\\n        address from,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        require(from == address(0x0), \\\"PLEASE_DONT\\\");\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    /// ==== View\\n\\n    function isStaked(uint16 tokenId) external view override returns (bool) {\\n        return stakingMap[tokenId].stakedAt != 0;\\n    }\\n\\n    function hasRequestedToUnstake(uint16 tokenId)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return unstakingRequestMap[tokenId].blocknumber != 0;\\n    }\\n\\n    function ownerOf(uint16 tokenId) public view override returns (address) {\\n        return stakingMap[tokenId].owner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/IVampireGameERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./IVampireGame.sol\\\";\\n\\n/// @notice Interface composed by IVampireGame + IERC721\\ninterface IVampireGameERC721 is IVampireGame, IERC721 {}\"\r\n    },\r\n    \"contracts/staking/IBloodFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\n/// @notice functions that can be called by a game controller\\ninterface IBloodFarm {\\n    function stakeHuman(address owner, uint16 tokenId) external;\\n\\n    function claimBloodBags(address sender, uint16 tokenId)\\n        external\\n        returns (uint256 owed);\\n\\n    function requestToUnstakeHuman(address sender, uint16 tokenId) external;\\n\\n    function unstakeHuman(\\n        address sender,\\n        uint16 tokenId\\n    ) external returns (uint256 owed);\\n\\n    function isStaked(uint16 tokenId) external view returns (bool);\\n\\n    function hasRequestedToUnstake(uint16 tokenId) external view returns (bool);\\n\\n    function ownerOf(uint16 tokenId) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/random/IRandom.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\ninterface IRandom {\\n  function submitHash(address sender, uint256 tokenId) external;\\n  function getRandomNumber(uint256 tokenId) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/IVampireGame.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"./traits/TokenTraits.sol\\\";\\n\\n/// @notice Interface to interact with the VampireGame contract\\ninterface IVampireGame {\\n    /// @notice get the amount of tokens minted\\n    function getTotalSupply() external view returns (uint16);\\n\\n    /// @notice get tthe amount of og supply\\n    function getOGSupply() external view returns (uint16);\\n\\n    /// @notice get the total supply of gen-0\\n    function getGenZeroSupply() external view returns (uint16);\\n\\n    /// @notice get the total supply of tokens\\n    function getMaxSupply() external view returns (uint16);\\n\\n    /// @notice get the TokenTraits for a given tokenId\\n    function getTokenTraits(uint16 tokenId) external view returns (TokenTraits memory);\\n\\n    /// @notice check if token id a vampire\\n    function isTokenVampire(uint16 tokenId) external view returns (bool);\\n\\n    /// @notice get the Predator Index for a given tokenId\\n    function getPredatorIndex(uint16 tokenId) external view returns (uint8);\\n\\n    /// @notice returns true if a token is aleady revealed\\n    function isTokenRevealed(uint16 tokenId) external view returns (bool);\\n}\\n\\n/// @notice Interface to control parts of the VampireGame ERC 721\\ninterface IVampireGameControls {\\n    /// @notice mint any amount of nft to any address\\n    /// Requirements:\\n    /// - message sender should be an allowed address (game contract)\\n    /// - amount + totalSupply() has to be smaller than MAX_SUPPLY\\n    function mintFromController(address receiver, uint16 amount) external;\\n\\n    /// @notice reveal a list of tokens using specific seeds for each\\n    function controllerRevealTokens(uint16[] calldata tokenIds, uint256[] calldata seeds) external;\\n}\\n\"\r\n    },\r\n    \"contracts/traits/TokenTraits.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nstruct TokenTraits {\\n    bool isVampire;\\n    // Shared Traits\\n    uint8 skin;\\n    uint8 face;\\n    uint8 clothes;\\n    // Human-only Traits\\n    uint8 pants;\\n    uint8 boots;\\n    uint8 accessory;\\n    uint8 hair;\\n    // Vampire-only Traits\\n    uint8 cape;\\n    uint8 predatorIndex;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_REVEAL_BLOCK_SPACE\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BloodBagClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"RequestedUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"StakedHuman\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnstakedHuman\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAILY_BLOODBAG_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_GLOBAL_BLOOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_TO_EXIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVEAL_BLOCK_SPACE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"claimBloodBags\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"owed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"hasRequestedToUnstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBloodUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"removeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"requestToUnstakeHuman\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"space\",\"type\":\"uint256\"}],\"name\":\"setRevealBlockspace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"stakeHuman\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"stakingMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint80\",\"name\":\"stakedAt\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBloodDrained\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHumansStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"unstakeHuman\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"owed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"unstakingRequestMap\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint240\",\"name\":\"blocknumber\",\"type\":\"uint240\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BloodFarm","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}