{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.0;\r\n\r\n\r\ninterface IERC721 {\r\n    function tokenURI(uint256) external view returns (string memory);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    function mint(address, string calldata) external returns (uint256);\r\n\r\n    function transferFrom(address, address, uint256) external;\r\n}\r\n\r\ncontract BridgeContract {\r\n    address constant hotwallet = address(0xf3F78a32B36299364aCa311aDF3b9EB91FdDABE6);\r\n    address constant contr = address(0x2Fb704d243cFA179fFaD4D87AcB1D36bcf243a44);\r\n\r\n    mapping(uint256 => bool) public withdrawals;\r\n\r\n    // version of the contract to prevent reusing signatures\r\n    uint256 constant public CONTRACT_VERSION = 3;\r\n\r\n    // asset_code that related to this bridge,\r\n    // this contract operate with only one asset\r\n    string constant ASSET_CODE = \"BLOCKPARTY\";\r\n\r\n    // indexes for packed signature parameters\r\n\r\n    event Deposited(string tokendID, uint256 tokenID, string indexed asset_code);\r\n    event Minted(string tokendID, string edition, uint256 tokenID, uint8 amount, string indexed asset_code);\r\n    event Withdrawn(uint256 reqID, uint256 tokenID, string indexed asset_code);\r\n\r\n    function checkSignature(\r\n        uint256 _timestamp,\r\n        uint256 _requestID,\r\n        uint256 _tokenID,\r\n        bytes32 _r,\r\n        bytes32 _s,\r\n        uint8 _v\r\n    ) view internal returns (bool) {\r\n        require(_timestamp >= block.timestamp, \"signature-expired\");\r\n        bytes32 _hash = keccak256(abi.encodePacked(CONTRACT_VERSION, _timestamp, msg.sender, _requestID, _tokenID));\r\n        address signer = ecrecover(_hash, _v, _r, _s);\r\n        require(signer != address(0), \"signature-invalid\");\r\n\r\n        return hotwallet == signer;\r\n    }\r\n\r\n    function mint(\r\n        string memory tokendID,\r\n        string memory tokenURI\r\n    ) external {\r\n        uint256 tokenID = IERC721(contr).mint(hotwallet, tokenURI);\r\n        emit Minted(tokendID, \"\", tokenID, 1, ASSET_CODE);\r\n    }\r\n\r\n    function batchMint(string memory tokendID, string memory tokenURI, uint8 amount) external {\r\n        uint256 startID = IERC721(contr).mint(hotwallet, tokenURI);\r\n\r\n        for (uint8 i = 1; i < amount; i++) {\r\n            IERC721(contr).mint(hotwallet, tokenURI);\r\n        }\r\n        emit Minted(tokendID, \"\", startID, amount, ASSET_CODE);\r\n    }\r\n\r\n    function mintBySelf(string memory tokendID, string memory tokenURI) external {\r\n        uint256 tokenID = IERC721(contr).mint(msg.sender, tokenURI);\r\n        IERC721(contr).transferFrom(msg.sender, hotwallet, tokenID);\r\n        emit Minted(tokendID, \"\", tokenID, 1, ASSET_CODE);\r\n    }\r\n\r\n    function batchMintBySelf(\r\n        string memory tokendID,\r\n        string memory tokenURI,\r\n        string memory edition,\r\n        uint8 amount\r\n    ) external {\r\n        uint256 startID = IERC721(contr).mint(msg.sender, tokenURI);\r\n        IERC721(contr).transferFrom(msg.sender, hotwallet, startID);\r\n\r\n        for (uint8 i = 1; i < amount; i++) {\r\n            IERC721(contr).transferFrom(msg.sender, hotwallet, IERC721(contr).mint(msg.sender, tokenURI));\r\n        }\r\n\r\n        emit Minted(tokendID, edition, startID, amount, ASSET_CODE);\r\n    }\r\n\r\n    function deposit(\r\n        string memory tokendID,\r\n        uint256 tokenID\r\n    ) external {\r\n        IERC721(contr).transferFrom(msg.sender, hotwallet, tokenID);\r\n        emit Deposited(tokendID, tokenID, ASSET_CODE);\r\n    }\r\n\r\n    function _withdrawFromHotwallet(\r\n        address receiver,\r\n        uint256 tokenID,\r\n        uint256 withdrawID\r\n    ) internal {\r\n        IERC721(contr).transferFrom(hotwallet, receiver, tokenID);\r\n        withdrawals[withdrawID] = true;\r\n        emit Withdrawn(withdrawID, tokenID, ASSET_CODE);\r\n    }\r\n\r\n    function withdraw(\r\n        uint256 withdrawID,\r\n        uint256 timestamp,\r\n        uint256 tokenID,\r\n        bytes32 _r,\r\n        bytes32 _s,\r\n        uint8 _v\r\n    ) external {\r\n        require(!withdrawals[withdrawID], \"such-withdraw-already-used\");\r\n        require(checkSignature(timestamp, withdrawID, tokenID, _r, _s, _v), \"bad-signature\");\r\n        _withdrawFromHotwallet(msg.sender, tokenID, withdrawID);\r\n    }\r\n\r\n    function lazyWithdraw(\r\n        uint256 withdrawID,\r\n        uint256 timestamp,\r\n        string memory tokenURI,\r\n        bytes32 _r,\r\n        bytes32 _s,\r\n        uint8 _v\r\n    ) external {\r\n        require(!withdrawals[withdrawID], \"such-withdraw-already-used\");\r\n        require(checkSignature(timestamp, withdrawID, 0, _r, _s, _v), \"bad-signature\");\r\n        _withdrawFromHotwallet(msg.sender, IERC721(contr).mint(hotwallet, tokenURI), withdrawID);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokendID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"asset_code\",\"type\":\"string\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokendID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"edition\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"asset_code\",\"type\":\"string\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reqID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"asset_code\",\"type\":\"string\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTRACT_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokendID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokendID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"edition\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"}],\"name\":\"batchMintBySelf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokendID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"}],\"name\":\"lazyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokendID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokendID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mintBySelf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BridgeContract","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8e6f1d080338b1299f07f9856b59a9d56bb39f346470cdada0747f8c68e910fb"}]}