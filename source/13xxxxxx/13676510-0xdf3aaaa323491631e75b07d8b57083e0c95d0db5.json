{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n\\r\\nlibrary Address {\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        return _functionCallWithValue(target, data, value, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\"},\"IERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IERC20 {\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    \\r\\n    function symbol() external view returns(string memory);\\r\\n    \\r\\n    function name() external view returns(string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    \\r\\n    /**\\r\\n     * @dev Returns the number of decimal places\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"IKeysStaking.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n/**\\r\\n * Exempt Surge Interface\\r\\n */\\r\\ninterface IKeysStaking {\\r\\n    function deposit(uint256 amount) external;\\r\\n}\"},\"KeysFundReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IKeysStaking.sol\\\";\\r\\n\\r\\n/**\\r\\n *\\r\\n * KEYS Funding Receiver\\r\\n * Will Allocate Funding To Different Sources\\r\\n * Contract Developed By DeFi Mark (MoonMark)\\r\\n *\\r\\n */\\r\\ncontract KEYSFundingReceiver {\\r\\n    \\r\\n    using Address for address;\\r\\n    \\r\\n    // Farming Manager\\r\\n    address public farm;\\r\\n    address public stake;\\r\\n    address public multisig;\\r\\n\\r\\n    // KEYS\\r\\n    address public constant KEYS = 0xe0a189C975e4928222978A74517442239a0b86ff;\\r\\n    \\r\\n    // allocation to farm + stake + multisig\\r\\n    uint256 public farmFee;\\r\\n    uint256 public stakeFee;\\r\\n    uint256 public multisigFee;\\r\\n    \\r\\n    // ownership\\r\\n    address public _master;\\r\\n    modifier onlyMaster(){require(_master == msg.sender, \\u0027Sender Not Master\\u0027); _;}\\r\\n    \\r\\n    constructor() {\\r\\n    \\r\\n        _master = 0xfCacEAa7b4cf845f2cfcE6a3dA680dF1BB05015c;\\r\\n        multisig = 0xfCacEAa7b4cf845f2cfcE6a3dA680dF1BB05015c;\\r\\n        farm = 0x810487135d29f35f06f1075b48D5978F1791d743;\\r\\n        stake = 0xF09504B63a199158312807c5f05DaEcA734855D9;\\r\\n    \\r\\n        stakeFee = 10;\\r\\n        farmFee = 80;\\r\\n        multisigFee = 10;\\r\\n\\r\\n    }\\r\\n    \\r\\n    event SetFarm(address farm);\\r\\n    event SetStaker(address staker);\\r\\n    event SetMultisig(address multisig);\\r\\n    event SetFundPercents(uint256 farmPercentage, uint256 stakePercent, uint256 multisigPercent);\\r\\n    event Withdrawal(uint256 amount);\\r\\n    event OwnershipTransferred(address newOwner);\\r\\n    \\r\\n    // MASTER \\r\\n    \\r\\n    function setFarm(address _farm) external onlyMaster {\\r\\n        farm = _farm;\\r\\n        emit SetFarm(_farm);\\r\\n    }\\r\\n    \\r\\n    function setStake(address _stake) external onlyMaster {\\r\\n        stake = _stake;\\r\\n        emit SetStaker(_stake);\\r\\n    }\\r\\n    \\r\\n    function setMultisig(address _multisig) external onlyMaster {\\r\\n        multisig = _multisig;\\r\\n        emit SetMultisig(_multisig);\\r\\n    }\\r\\n    \\r\\n    function setFundPercents(uint256 farmPercentage, uint256 stakePercent, uint256 multisigPercent) external onlyMaster {\\r\\n        farmFee = farmPercentage;\\r\\n        stakeFee = stakePercent;\\r\\n        multisigFee = multisigPercent;\\r\\n        emit SetFundPercents(farmPercentage, stakePercent, multisigPercent);\\r\\n    }\\r\\n    \\r\\n    function manualWithdraw(address token) external onlyMaster {\\r\\n        uint256 bal = IERC20(token).balanceOf(address(this));\\r\\n        require(bal \\u003e 0);\\r\\n        IERC20(token).transfer(_master, bal);\\r\\n        emit Withdrawal(bal);\\r\\n    }\\r\\n    \\r\\n    function ETHWithdrawal() external onlyMaster returns (bool s){\\r\\n        uint256 bal = address(this).balance;\\r\\n        require(bal \\u003e 0);\\r\\n        (s,) = payable(_master).call{value: bal}(\\\"\\\");\\r\\n        emit Withdrawal(bal);\\r\\n    }\\r\\n    \\r\\n    function transferMaster(address newMaster) external onlyMaster {\\r\\n        _master = newMaster;\\r\\n        emit OwnershipTransferred(newMaster);\\r\\n    }\\r\\n    \\r\\n    \\r\\n    // ONLY APPROVED\\r\\n    \\r\\n    function distribute() external {\\r\\n        _distributeYield();\\r\\n    }\\r\\n\\r\\n    // PRIVATE\\r\\n    \\r\\n    function _distributeYield() private {\\r\\n        \\r\\n        uint256 keysBal = IERC20(KEYS).balanceOf(address(this));\\r\\n        \\r\\n        uint256 farmBal = (keysBal * farmFee) / 10**2;\\r\\n        uint256 sigBal = (keysBal * multisigFee) / 10**2;\\r\\n        uint256 stakeBal = keysBal - (farmBal + sigBal);\\r\\n\\r\\n        if (farmBal \\u003e 0 \\u0026\\u0026 farm != address(0)) {\\r\\n            IERC20(KEYS).approve(farm, farmBal);\\r\\n            IKeysStaking(farm).deposit(farmBal);\\r\\n        }\\r\\n        \\r\\n        if (stakeBal \\u003e 0 \\u0026\\u0026 stake != address(0)) {\\r\\n            IERC20(KEYS).approve(stake, stakeBal);\\r\\n            IKeysStaking(stake).deposit(stakeBal);\\r\\n        }\\r\\n        \\r\\n        if (sigBal \\u003e 0 \\u0026\\u0026 multisig != address(0)) {\\r\\n            IERC20(KEYS).transfer(multisig, sigBal);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    receive() external payable {\\r\\n        (bool s,) = payable(KEYS).call{value: msg.value}(\\\"\\\");\\r\\n        require(s, \\u0027Failure on Token Purchase\\u0027);\\r\\n        _distributeYield();\\r\\n    }\\r\\n    \\r\\n}\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"farm\",\"type\":\"address\"}],\"name\":\"SetFarm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"farmPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multisigPercent\",\"type\":\"uint256\"}],\"name\":\"SetFundPercents\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"multisig\",\"type\":\"address\"}],\"name\":\"SetMultisig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"SetStaker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETHWithdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"s\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KEYS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_master\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"manualWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multisigFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farm\",\"type\":\"address\"}],\"name\":\"setFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"farmPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multisigPercent\",\"type\":\"uint256\"}],\"name\":\"setFundPercents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_multisig\",\"type\":\"address\"}],\"name\":\"setMultisig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stake\",\"type\":\"address\"}],\"name\":\"setStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMaster\",\"type\":\"address\"}],\"name\":\"transferMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"KEYSFundingReceiver","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4c8c1f940dafcfb59fd2bc1d40c163e76c307271a30074368482425e26413ecc"}]}