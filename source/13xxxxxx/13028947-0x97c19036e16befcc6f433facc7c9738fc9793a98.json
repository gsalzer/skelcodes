{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/viktor/solidity/NFT-royalty-splits/contracts/Random.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Random is Ownable {\\n  uint256 private key;\\n  uint256 private nonce;\\n\\n  constructor(uint256 _key) {\\n    key = _key;\\n  }\\n\\n  function addNonce() private {\\n    nonce = ++nonce;\\n  }\\n\\n  function getCoinbase() private view returns(address) {\\n    return block.coinbase;\\n  }\\n\\n  function getDifficulty() private view returns(uint256) {\\n    return block.difficulty;\\n  }\\n\\n  function getGaslimit() private view returns(uint256) {\\n    return block.gaslimit;\\n  }\\n\\n  function getNumber() private view returns(uint256) {\\n   return block.number;\\n  }\\n\\n  function getBlockhash1() private view returns(bytes32) {\\n    return blockhash(block.number - 1);\\n  }\\n\\n  function getBlockhash2() private view returns(bytes32) {\\n    return blockhash(block.number - 2);\\n  }\\n\\n  function getBlockhash3() private view returns(bytes32) {\\n    return blockhash(block.number - 3);\\n  }\\n\\n  function getBlockhash4() private view returns(bytes32) {\\n    return blockhash(block.number - 4);\\n  }\\n\\n  function getBlockhash5() private view returns(bytes32) {\\n    return blockhash(block.number - 5);\\n  }\\n\\n  function getTimestamp() private view returns(uint256) {\\n    return block.timestamp;\\n  }\\n\\n  function getData() private pure returns(bytes calldata) {\\n    return msg.data;\\n  }\\n\\n  function getSender() private view returns(address) {\\n    return msg.sender;\\n  }\\n\\n  function getSig() private pure returns(bytes4) {\\n    return msg.sig;\\n  }\\n\\n  function getOrigin() private view returns(address) {\\n    return tx.origin;\\n  }\\n\\n  function encodeMessageData() private view returns(bytes memory) {\\n    return abi.encodePacked(getData(), getSender(), getSig());\\n  }\\n\\n  function A8cf9be874ceefa20f0edbc6d3672c92e058b5703579bf8cc0092763eb913f2eb94b08e0df425f02a0e182335b32c9142f9ad26c6badafcf23f7284f6d600bdde9a08faff17f7f303c1c1063ef141c7aa18c9f8c4d1089397a1005c013c4e165cb55f502c2478b56603768eff9ce17afec7ae4b4e9ef5e7214f11a05382170524d1450d12b38ca252065572b70bd4de9e06afb7ba8d4a45715adde4608ec402358b81b3c2fd2d6cac3acaadbda58b4beb0da4fe77c481197151976dafb2f37ae1652e3ad2ae13583c2839720016c3ca9e9effe305d4fbb743a9b188ab6c7ad2a08096ecfa2b9e4c8d2364998baf954b8ab311ff92c894c5bec269a7fcca1fdbc022ad34b59377cd3d8f127e87d9daca4cff6cb038144b6237c166e5f51cb7417ff698281bf223fef00105550ea55245051d5e6189b242a4cff9d87a34d0c5be4363bf9ae3bb0211ca09902ef09b54dd80098e08a90b7e80d7757efa306c3e1b1fccb519908372b345e3114f66f122c2b85b321bd3bb9a0784db519ab77591bfaadebae05528f8de2c918a33bbb59f7a8832ec77cdf95e097e76cf6597ab2ba7fe845c22d06b29f316e17a89d5f932bfd84f3896dd0b448c2ba4ba83faee5a7e03183d392c7df1df15656dccc86fc50b02026e6a6bcfa848701a634f9aaf08d6e() private {\\n    addNonce();\\n\\n    key = uint256(keccak256(abi.encodePacked(\\n          key,\\n          getCoinbase(),\\n          getDifficulty(),\\n          getGaslimit(),\\n          getNumber(),\\n          getBlockhash1(),\\n          getBlockhash2(),\\n          getBlockhash3(),\\n          getBlockhash4(),\\n          getBlockhash5(),\\n          getTimestamp(),\\n          encodeMessageData(),\\n          getOrigin(),\\n          nonce)));\\n  }\\n\\n  function rand(uint256 _range) onlyOwner public returns(uint256) {\\n    regenerateHash();\\n    return key % _range;\\n  }\\n\\n  function regenerateHash() onlyOwner public {\\n    A8cf9be874ceefa20f0edbc6d3672c92e058b5703579bf8cc0092763eb913f2eb94b08e0df425f02a0e182335b32c9142f9ad26c6badafcf23f7284f6d600bdde9a08faff17f7f303c1c1063ef141c7aa18c9f8c4d1089397a1005c013c4e165cb55f502c2478b56603768eff9ce17afec7ae4b4e9ef5e7214f11a05382170524d1450d12b38ca252065572b70bd4de9e06afb7ba8d4a45715adde4608ec402358b81b3c2fd2d6cac3acaadbda58b4beb0da4fe77c481197151976dafb2f37ae1652e3ad2ae13583c2839720016c3ca9e9effe305d4fbb743a9b188ab6c7ad2a08096ecfa2b9e4c8d2364998baf954b8ab311ff92c894c5bec269a7fcca1fdbc022ad34b59377cd3d8f127e87d9daca4cff6cb038144b6237c166e5f51cb7417ff698281bf223fef00105550ea55245051d5e6189b242a4cff9d87a34d0c5be4363bf9ae3bb0211ca09902ef09b54dd80098e08a90b7e80d7757efa306c3e1b1fccb519908372b345e3114f66f122c2b85b321bd3bb9a0784db519ab77591bfaadebae05528f8de2c918a33bbb59f7a8832ec77cdf95e097e76cf6597ab2ba7fe845c22d06b29f316e17a89d5f932bfd84f3896dd0b448c2ba4ba83faee5a7e03183d392c7df1df15656dccc86fc50b02026e6a6bcfa848701a634f9aaf08d6e();\\n  }\\n}\\n\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_key\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_range\",\"type\":\"uint256\"}],\"name\":\"rand\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"regenerateHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Random","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}