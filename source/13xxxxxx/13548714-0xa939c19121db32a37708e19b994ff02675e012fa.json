{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TokenRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ITokenRegistry.sol\\\";\\n\\n/**\\n * @title Contract for managing maximum allowed funds to be escrowed.\\n * The purpose is to limit the total funds locked in escrow in the initial stages of the protocol.\\n */\\n\\ncontract TokenRegistry is Ownable, ITokenRegistry {\\n    uint256 private ethLimit;\\n    mapping(address => uint256) private tokenLimits;\\n    mapping(address => address) private tokenWrappers;\\n\\n    event LogETHLimitChanged(uint256 _newLimit, address indexed _triggeredBy);\\n    event LogTokenLimitChanged(uint256 _newLimit, address indexed _triggeredBy);\\n    event LogTokenWrapperChanged(address indexed _newWrapperAddress, address indexed _triggeredBy);\\n\\n    modifier notZeroAddress(address _tokenAddress) {\\n        require(_tokenAddress != address(0), \\\"INVALID_TOKEN_ADDRESS\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        ethLimit = 1 ether;\\n    }\\n\\n    /**\\n     * @notice Set new limit for ETH. It's used while seller tries to create a voucher. The limit is determined by a voucher set. Voucher price * quantity, seller deposit * quantity, buyer deposit * qty must be below the limit.\\n     * @param _newLimit New limit which will be set.\\n     */\\n    function setETHLimit(uint256 _newLimit) external override onlyOwner {\\n        ethLimit = _newLimit;\\n        emit LogETHLimitChanged(_newLimit, owner());\\n    }\\n\\n    /**\\n     * @notice Set new limit for a token. It's used while seller tries to create a voucher. The limit is determined by a voucher set. Voucher price * quantity, seller deposit * quantity, buyer deposit * qty must be below the limit.\\n     * @param _tokenAddress Address of the token which will be updated.\\n     * @param _newLimit New limit which will be set. It must comply to the decimals of the token, so the limit is set in the correct decimals.\\n     */\\n    function setTokenLimit(address _tokenAddress, uint256 _newLimit)\\n        external\\n        override\\n        onlyOwner\\n        notZeroAddress(_tokenAddress)\\n    {\\n        tokenLimits[_tokenAddress] = _newLimit;\\n        emit LogTokenLimitChanged(_newLimit, owner());\\n    }\\n\\n    // // // // // // // //\\n    // GETTERS\\n    // // // // // // // //\\n\\n    /**\\n     * @notice Get the maximum allowed ETH limit to set as price of voucher, buyer deposit or seller deposit.\\n     */\\n    function getETHLimit() external view override returns (uint256) {\\n        return ethLimit;\\n    }\\n\\n    /**\\n     * @notice Get the maximum allowed token limit for the specified Token.\\n     * @param _tokenAddress Address of the token which will be update.\\n     */\\n    function getTokenLimit(address _tokenAddress)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return tokenLimits[_tokenAddress];\\n    }\\n\\n     /**\\n     * @notice Set the address of the wrapper contract for the token. The wrapper is used to, for instance, allow the Boson Protocol functions that use permit functionality to work in a uniform way.\\n     * @param _tokenAddress Address of the token for which the wrapper is being set\\n     * @param _wrapperAddress Address of the token wrapper contract\\n     */\\n    function setTokenWrapperAddress(address _tokenAddress, address _wrapperAddress) \\n        external\\n        override\\n        onlyOwner\\n        notZeroAddress(_tokenAddress)\\n    {\\n        tokenWrappers[_tokenAddress] = _wrapperAddress;\\n        emit LogTokenWrapperChanged(_wrapperAddress, owner());\\n    }\\n\\n    /**\\n     * @notice Get the address of the token wrapper contract for the specified token\\n     * @param _tokenAddress Address of the token which will be updated.\\n     * @return Address of the token wrapper contract\\n     */\\n    function getTokenWrapperAddress(address _tokenAddress) \\n        external\\n        view \\n        override\\n        returns (address)\\n    {\\n        return tokenWrappers[_tokenAddress];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokenRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\n\\npragma solidity 0.7.6;\\n\\ninterface ITokenRegistry {\\n    /**\\n     * @notice Set new limit for a token. It's used while seller tries to create a voucher. The limit is determined by a voucher set. Voucher price * quantity, seller deposit * quantity, buyer deposit * qty must be below the limit.\\n     * @param _tokenAddress Address of the token which will be updated.\\n     * @param _newLimit New limit which will be set. It must comply to the decimals of the token, so the limit is set in the correct decimals.\\n     */\\n    function setTokenLimit(address _tokenAddress, uint256 _newLimit) external;\\n\\n    /**\\n     * @notice Get the maximum allowed token limit for the specified Token.\\n     * @param _tokenAddress Address of the token which will be update.\\n     * @return The max limit for this token\\n     */\\n    function getTokenLimit(address _tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Set new limit for ETH. It's used while seller tries to create a voucher. The limit is determined by a voucher set. Voucher price * quantity, seller deposit * quantity, buyer deposit * qty must be below the limit.\\n     * @param _newLimit New limit which will be set.\\n     */\\n    function setETHLimit(uint256 _newLimit) external;\\n\\n    /**\\n     * @notice Get the maximum allowed ETH limit to set as price of voucher, buyer deposit or seller deposit.\\n     * @return The max ETH limit\\n     */\\n    function getETHLimit() external view returns (uint256);\\n\\n    /**\\n     * @notice Set the address of the wrapper contract for the token. The wrapper is used to, for instance, allow the Boson Protocol functions that use permit functionality to work in a uniform way.\\n     * @param _tokenAddress Address of the token which will be updated.\\n     * @param _wrapperAddress Address of the wrapper contract\\n     */\\n    function setTokenWrapperAddress(\\n        address _tokenAddress,\\n        address _wrapperAddress\\n    ) external;\\n\\n    /**\\n     * @notice Get the address of the token wrapper contract for the specified token\\n     * @param _tokenAddress Address of the token which will be updated.\\n     * @return Address of the token wrapper contract\\n     */\\n    function getTokenWrapperAddress(address _tokenAddress)\\n        external\\n        view\\n        returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_triggeredBy\",\"type\":\"address\"}],\"name\":\"LogETHLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_triggeredBy\",\"type\":\"address\"}],\"name\":\"LogTokenLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newWrapperAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_triggeredBy\",\"type\":\"address\"}],\"name\":\"LogTokenWrapperChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getETHLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenWrapperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"setETHLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"setTokenLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrapperAddress\",\"type\":\"address\"}],\"name\":\"setTokenWrapperAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenRegistry","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}