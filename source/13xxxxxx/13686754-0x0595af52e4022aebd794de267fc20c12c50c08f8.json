{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/tokens/Vader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\n\\r\\npragma solidity =0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\nimport \\\"../shared/ProtocolConstants.sol\\\";\\r\\n\\r\\nimport \\\"../interfaces/tokens/IUSDV.sol\\\";\\r\\nimport \\\"../interfaces/tokens/IVader.sol\\\";\\r\\nimport \\\"../interfaces/tokens/vesting/ILinearVesting.sol\\\";\\r\\nimport \\\"../interfaces/tokens/converter/IConverter.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IVader} interface.\\r\\n *\\r\\n * The Vader token that acts as the backbone of the Vader protocol,\\r\\n * burned and minted to mint and burn USDV tokens respectively.\\r\\n *\\r\\n * The token has a fixed initial supply at 25 billion units that is meant to then\\r\\n * fluctuate depending on the amount of USDV minted into and burned from circulation.\\r\\n *\\r\\n * Emissions are initially controlled by the Vader team and then will be governed\\r\\n * by the DAO.\\r\\n */\\r\\ncontract Vader is IVader, ProtocolConstants, ERC20, Ownable {\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    // The Vader <-> Vether converter contract\\r\\n    IConverter public converter;\\r\\n\\r\\n    // The Vader Team vesting contract\\r\\n    ILinearVesting public vest;\\r\\n\\r\\n    // The USDV contract, used to apply proper access control\\r\\n    IUSDV public usdv;\\r\\n\\r\\n    // The initial maximum supply of the token, equivalent to 25 bn units\\r\\n    uint256 public maxSupply = _INITIAL_VADER_SUPPLY;\\r\\n\\r\\n    /* ========== CONSTRUCTOR ========== */\\r\\n\\r\\n    /**\\r\\n     * @dev Mints the ecosystem growth fund and grant allocation amount described in the whitepaper to the\\r\\n     * token contract itself.\\r\\n     *\\r\\n     * As the token is meant to be minted and burned freely between USDV and itself,\\r\\n     * there is no real initialization taking place apart from the initially minted\\r\\n     * supply for the following components:\\r\\n     *\\r\\n     * - Grant Allocation: The amount of funds meant to be distributed by the DAO as grants to expand the protocol\\r\\n     *\\r\\n     * - Ecosystem Growth: An allocation that is released to strategic partners for the\\r\\n     * protocol's expansion\\r\\n     *\\r\\n     * The latter two of the allocations are minted at a later date given that the addresses of\\r\\n     * the converter and vesting contract are not known on deployment.\\r\\n     */\\r\\n    constructor() ERC20(\\\"Vader\\\", \\\"VADER\\\") {\\r\\n        _mint(address(this), _GRANT_ALLOCATION);\\r\\n        _mint(address(this), _ECOSYSTEM_GROWTH);\\r\\n    }\\r\\n\\r\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n     * @dev Creates a manual emission event\\r\\n     *\\r\\n     * Emits an {Emission} event indicating the amount emitted as well as what the current\\r\\n     * era's timestamp is.\\r\\n     */\\r\\n    function createEmission(address user, uint256 amount)\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        _transfer(address(this), user, amount);\\r\\n        emit Emission(user, amount);\\r\\n    }\\r\\n\\r\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the initial {converter} and {vest} contract addresses. Additionally, mints\\r\\n     * the Vader amount available for conversion as well as the team allocation that is meant\\r\\n     * to be vested to each respective contract.\\r\\n     *\\r\\n     * Emits a {ProtocolInitialized} event indicating all the supplied values of the function.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be the deployer of the contract\\r\\n     * - the contract must not have already been initialized\\r\\n     */\\r\\n    function setComponents(\\r\\n        IConverter _converter,\\r\\n        ILinearVesting _vest,\\r\\n        address[] calldata vesters,\\r\\n        uint192[] calldata amounts\\r\\n    ) external onlyOwner {\\r\\n        require(\\r\\n            _converter != IConverter(_ZERO_ADDRESS) &&\\r\\n                _vest != ILinearVesting(_ZERO_ADDRESS),\\r\\n            \\\"Vader::setComponents: Incorrect Arguments\\\"\\r\\n        );\\r\\n        require(\\r\\n            converter == IConverter(_ZERO_ADDRESS),\\r\\n            \\\"Vader::setComponents: Already Set\\\"\\r\\n        );\\r\\n\\r\\n        converter = _converter;\\r\\n        vest = _vest;\\r\\n\\r\\n        _mint(address(_converter), _VETH_ALLOCATION);\\r\\n        _mint(address(_vest), _TEAM_ALLOCATION);\\r\\n\\r\\n        _vest.begin(vesters, amounts);\\r\\n\\r\\n        emit ProtocolInitialized(\\r\\n            address(_converter),\\r\\n            address(_vest)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set USDV\\r\\n     * Emits a {USDVSet} event indicating that USDV is set\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be owner\\r\\n     * - USDV must be of a non-zero address\\r\\n     * - USDV must not be set\\r\\n     */\\r\\n    function setUSDV(IUSDV _usdv) external onlyOwner {\\r\\n        require(_usdv != IUSDV(_ZERO_ADDRESS), \\\"Vader::setUSDV: Invalid USDV address\\\");\\r\\n        require(usdv == IUSDV(_ZERO_ADDRESS), \\\"Vader::setUSDV: USDV already set\\\");\\r\\n\\r\\n        usdv = _usdv;\\r\\n        emit USDVSet(address(_usdv));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows a strategic partnership grant to be claimed.\\r\\n     *\\r\\n     * Emits a {GrantClaimed} event indicating the beneficiary of the grant as\\r\\n     * well as the grant amount.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be the DAO\\r\\n     * - the token must hold sufficient Vader allocation for the grant\\r\\n     * - the grant must be of a non-zero amount\\r\\n     */\\r\\n    function claimGrant(address beneficiary, uint256 amount) external onlyOwner {\\r\\n        require(amount != 0, \\\"Vader::claimGrant: Non-Zero Amount Required\\\");\\r\\n        emit GrantClaimed(beneficiary, amount);\\r\\n        _transfer(address(this), beneficiary, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the maximum supply of the token to be adjusted.\\r\\n     *\\r\\n     * Emits an {MaxSupplyChanged} event indicating the previous and next maximum\\r\\n     * total supplies.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be the DAO\\r\\n     * - the new maximum supply must be greater than the current supply\\r\\n     */\\r\\n    function adjustMaxSupply(uint256 _maxSupply) external onlyOwner {\\r\\n        require(\\r\\n            _maxSupply >= totalSupply(),\\r\\n            \\\"Vader::adjustMaxSupply: Max supply cannot subcede current supply\\\"\\r\\n        );\\r\\n        emit MaxSupplyChanged(maxSupply, _maxSupply);\\r\\n        maxSupply = _maxSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the USDV token to perform mints of VADER tokens\\r\\n     *\\r\\n     * Emits an ERC-20 {Transfer} event signaling the minting operation.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be the USDV\\r\\n     * - the new supply must be below the maximum supply\\r\\n     */\\r\\n    function mint(address _user, uint256 _amount) external onlyUSDV {\\r\\n        require(\\r\\n            maxSupply >= totalSupply() + _amount,\\r\\n            \\\"Vader::mint: Max supply reached\\\"\\r\\n        );\\r\\n        _mint(_user, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the USDV token to perform burns of VADER tokens\\r\\n     *\\r\\n     * Emits an ERC-20 {Transfer} event signaling the burning operation.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be the USDV\\r\\n     * - the USDV contract must have a sufficient VADER balance\\r\\n     */\\r\\n    function burn(uint256 _amount) external onlyUSDV {\\r\\n        _burn(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    /* ========== INTERNAL FUNCTIONS ========== */\\r\\n\\r\\n    /* ========== PRIVATE FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n     * @dev Ensures only the USDV is able to invoke a particular function by validating that the\\r\\n     * contract has been set up and that the msg.sender is the USDV address\\r\\n     */\\r\\n    function _onlyUSDV() private view {\\r\\n        require(\\r\\n            address(usdv) == msg.sender,\\r\\n            \\\"Vader::_onlyUSDV: Insufficient Privileges\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /* ========== MODIFIERS ========== */\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if invoked by anyone else other than the USDV\\r\\n     */\\r\\n    modifier onlyUSDV() {\\r\\n        _onlyUSDV();\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/shared/ProtocolConstants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\n\\r\\npragma solidity =0.8.9;\\r\\n\\r\\nabstract contract ProtocolConstants {\\r\\n    /* ========== GENERAL ========== */\\r\\n\\r\\n    // The zero address, utility\\r\\n    address internal constant _ZERO_ADDRESS = address(0);\\r\\n\\r\\n    // One year, utility\\r\\n    uint256 internal constant _ONE_YEAR = 365 days;\\r\\n\\r\\n    // Basis Points\\r\\n    uint256 internal constant _MAX_BASIS_POINTS = 100_00;\\r\\n\\r\\n    /* ========== VADER TOKEN ========== */\\r\\n\\r\\n    // Max VADER supply\\r\\n    uint256 internal constant _INITIAL_VADER_SUPPLY = 25_000_000_000 * 1 ether;\\r\\n\\r\\n    // Allocation for VETH holders\\r\\n    uint256 internal constant _VETH_ALLOCATION = 7_500_000_000 * 1 ether;\\r\\n\\r\\n    // Team allocation vested over {VESTING_DURATION} years\\r\\n    uint256 internal constant _TEAM_ALLOCATION = 2_500_000_000 * 1 ether;\\r\\n\\r\\n    // Ecosystem growth fund unlocked for partnerships & USDV provision\\r\\n    uint256 internal constant _ECOSYSTEM_GROWTH = 2_500_000_000 * 1 ether;\\r\\n\\r\\n    // Total grant tokens\\r\\n    uint256 internal constant _GRANT_ALLOCATION = 12_500_000_000 * 1 ether;\\r\\n\\r\\n    // Emission Era\\r\\n    uint256 internal constant _EMISSION_ERA = 24 hours;\\r\\n\\r\\n    // Initial Emission Curve, 5\\r\\n    uint256 internal constant _INITIAL_EMISSION_CURVE = 5;\\r\\n\\r\\n    // Fee Basis Points\\r\\n    uint256 internal constant _MAX_FEE_BASIS_POINTS = 1_00;\\r\\n\\r\\n    /* ========== VESTING ========== */\\r\\n\\r\\n    // Vesting Duration\\r\\n    uint256 internal constant _VESTING_DURATION = 2 * _ONE_YEAR;\\r\\n\\r\\n    /* ========== CONVERTER ========== */\\r\\n\\r\\n    // Vader -> Vether Conversion Rate (1000:1)\\r\\n    uint256 internal constant _VADER_VETHER_CONVERSION_RATE = 10_000;\\r\\n\\r\\n    // Burn Address\\r\\n    address internal constant _BURN =\\r\\n        0xdeaDDeADDEaDdeaDdEAddEADDEAdDeadDEADDEaD;\\r\\n\\r\\n    /* ========== SWAP QUEUE ========== */\\r\\n\\r\\n    // A minimum of 10 swaps will be executed per block\\r\\n    uint256 internal constant _MIN_SWAPS_EXECUTED = 10;\\r\\n\\r\\n    // Expressed in basis points (50%)\\r\\n    uint256 internal constant _DEFAULT_SWAPS_EXECUTED = 50_00;\\r\\n\\r\\n    // The queue size of each block is 100 units\\r\\n    uint256 internal constant _QUEUE_SIZE = 100;\\r\\n\\r\\n    /* ========== GAS QUEUE ========== */\\r\\n\\r\\n    // Address of Chainlink Fast Gas Price Oracle\\r\\n    address internal constant _FAST_GAS_ORACLE =\\r\\n        0x169E633A2D1E6c10dD91238Ba11c4A708dfEF37C;\\r\\n\\r\\n    /* ========== VADER RESERVE ========== */\\r\\n\\r\\n    // Minimum delay between grants\\r\\n    uint256 internal constant _GRANT_DELAY = 30 days;\\r\\n\\r\\n    // Maximum grant size divisor\\r\\n    uint256 internal constant _MAX_GRANT_BASIS_POINTS = 10_00;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/tokens/vesting/ILinearVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\n\\r\\npragma solidity =0.8.9;\\r\\n\\r\\ninterface ILinearVesting {\\r\\n    /* ========== STRUCTS ========== */\\r\\n\\r\\n    // Struct of a vesting member, tight-packed to 256-bits\\r\\n    struct Vester {\\r\\n        uint192 amount;\\r\\n        uint64 lastClaim;\\r\\n        uint128 start;\\r\\n        uint128 end;\\r\\n    }\\r\\n\\r\\n    /* ========== FUNCTIONS ========== */\\r\\n\\r\\n    function getClaim(address _vester)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 vestedAmount);\\r\\n\\r\\n    function claim() external returns (uint256 vestedAmount);\\r\\n\\r\\n    //    function claimConverted() external returns (uint256 vestedAmount);\\r\\n\\r\\n    function begin(address[] calldata vesters, uint192[] calldata amounts)\\r\\n        external;\\r\\n\\r\\n    function vestFor(address user, uint256 amount) external;\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event VestingInitialized(uint256 duration);\\r\\n\\r\\n    event VestingCreated(address user, uint256 amount);\\r\\n\\r\\n    event Vested(address indexed from, uint256 amount);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/tokens/converter/IConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\n\\r\\npragma solidity =0.8.9;\\r\\n\\r\\ninterface IConverter {\\r\\n    /* ========== FUNCTIONS ========== */\\r\\n\\r\\n    function convert(bytes32[] calldata proof, uint256 amount, uint256 minVader)\\r\\n        external\\r\\n        returns (uint256 vaderReceived);\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event Conversion(\\r\\n        address indexed user,\\r\\n        uint256 vetherAmount,\\r\\n        uint256 vaderAmount\\r\\n    );\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/tokens/IVader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\n\\r\\npragma solidity =0.8.9;\\r\\n\\r\\ninterface IVader {\\r\\n    /* ========== FUNCTIONS ========== */\\r\\n\\r\\n    function createEmission(address user, uint256 amount) external;\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event Emission(address to, uint256 amount);\\r\\n\\r\\n    event EmissionChanged(uint256 previous, uint256 next);\\r\\n\\r\\n    event MaxSupplyChanged(uint256 previous, uint256 next);\\r\\n\\r\\n    event GrantClaimed(address indexed beneficiary, uint256 amount);\\r\\n\\r\\n    event ProtocolInitialized(\\r\\n        address converter,\\r\\n        address vest\\r\\n    );\\r\\n\\r\\n    event USDVSet(address usdv);\\r\\n\\r\\n    /* ========== DEPRECATED ========== */\\r\\n\\r\\n    // function getCurrentEraEmission() external view returns (uint256);\\r\\n\\r\\n    // function getEraEmission(uint256 currentSupply)\\r\\n    //     external\\r\\n    //     view\\r\\n    //     returns (uint256);\\r\\n\\r\\n    // function calculateFee() external view returns (uint256 basisPoints);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/tokens/IUSDV.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\n\\r\\npragma solidity =0.8.9;\\r\\n\\r\\ninterface IUSDV {\\r\\n    /* ========== STRUCTS ========== */\\r\\n    /* ========== FUNCTIONS ========== */\\r\\n    /* ========== EVENTS ========== */\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Emission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previous\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"next\",\"type\":\"uint256\"}],\"name\":\"EmissionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GrantClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previous\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"next\",\"type\":\"uint256\"}],\"name\":\"MaxSupplyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"converter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vest\",\"type\":\"address\"}],\"name\":\"ProtocolInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usdv\",\"type\":\"address\"}],\"name\":\"USDVSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"name\":\"adjustMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimGrant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"converter\",\"outputs\":[{\"internalType\":\"contract IConverter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createEmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConverter\",\"name\":\"_converter\",\"type\":\"address\"},{\"internalType\":\"contract ILinearVesting\",\"name\":\"_vest\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"vesters\",\"type\":\"address[]\"},{\"internalType\":\"uint192[]\",\"name\":\"amounts\",\"type\":\"uint192[]\"}],\"name\":\"setComponents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUSDV\",\"name\":\"_usdv\",\"type\":\"address\"}],\"name\":\"setUSDV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdv\",\"outputs\":[{\"internalType\":\"contract IUSDV\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vest\",\"outputs\":[{\"internalType\":\"contract ILinearVesting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Vader","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}