{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"token.sol\": {\r\n      \"content\": \"\\n// File: math/SafeMath.sol\\n\\npragma solidity 0.5.17;\\n\\n\\nlibrary SafeMath {\\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    return a - b;\\n  }\\n\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // Since Solidity automatically asserts when dividing by 0,\\n    // but we only need it to revert.\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    return a / b;\\n  }\\n\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // Same reason as `div`.\\n    require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\\n// File: token/erc20/IERC20.sol\\n\\npragma solidity 0.5.17;\\n\\n\\ninterface IERC20 {\\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n  function totalSupply() external view returns (uint256 _supply);\\n  function balanceOf(address _owner) external view returns (uint256 _balance);\\n\\n  function approve(address _spender, uint256 _value) external returns (bool _success);\\n  function allowance(address _owner, address _spender) external view returns (uint256 _value);\\n\\n  function transfer(address _to, uint256 _value) external returns (bool _success);\\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool _success);\\n}\\n\\n// File: token/erc20/ERC20.sol\\n\\npragma solidity 0.5.17;\\n\\n\\n\\n\\ncontract ERC20 is IERC20 {\\n  using SafeMath for uint256;\\n\\n  uint256 public totalSupply;\\n  mapping (address => uint256) public balanceOf;\\n  mapping (address => mapping (address => uint256)) internal _allowance;\\n\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n    _approve(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  function allowance(address _owner, address _spender) public view returns (uint256) {\\n    return _allowance[_owner][_spender];\\n  }\\n\\n  function increaseAllowance(address _spender, uint256 _value) public returns (bool) {\\n    _approve(msg.sender, _spender, _allowance[msg.sender][_spender].add(_value));\\n    return true;\\n  }\\n\\n  function decreaseAllowance(address _spender, uint256 _value) public returns (bool) {\\n    _approve(msg.sender, _spender, _allowance[msg.sender][_spender].sub(_value));\\n    return true;\\n  }\\n\\n  function transfer(address _to, uint256 _value) public returns (bool _success) {\\n    _transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success) {\\n    _transfer(_from, _to, _value);\\n    _approve(_from, msg.sender, _allowance[_from][msg.sender].sub(_value));\\n    return true;\\n  }\\n\\n  function _approve(address _owner, address _spender, uint256 _amount) internal {\\n    require(_owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n    require(_spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n    _allowance[_owner][_spender] = _amount;\\n    emit Approval(_owner, _spender, _amount);\\n  }\\n\\n  function _transfer(address _from, address _to, uint256 _value) internal {\\n    require(_from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n    require(_to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n    require(_to != address(this), \\\"ERC20: transfer to this contract address\\\");\\n\\n    balanceOf[_from] = balanceOf[_from].sub(_value);\\n    balanceOf[_to] = balanceOf[_to].add(_value);\\n    emit Transfer(_from, _to, _value);\\n  }\\n}\\n\\npragma solidity 0.5.17;\\n\\n\\n\\n\\ncontract IINJAZToken is ERC20 {\\n  string public name;\\n  string public symbol;\\n  uint8 public decimals;\\n\\n  constructor() public {\\n    name = \\\"IINJAZ\\\";\\n    symbol = \\\"IJZ\\\";\\n    decimals = 18;\\n    totalSupply = uint256(270000000).mul(uint256(10)**18);\\n    balanceOf[msg.sender] = totalSupply;\\n    emit Transfer(address(0), msg.sender, totalSupply);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"IINJAZToken","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}