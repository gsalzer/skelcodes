{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.0;\r\n\r\n/*\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n----------       -----------    --------------   -----------    ------        ---\r\n-----------      -----------    --------------   -----------    ---  --       --- \r\n---     -----    ---            ---              ---            ---   ---     ---\r\n---     ------   -------        ---    -------   -------        ---    ---    ---\r\n---     ------   -------        ---    -------   -------        ---     ---   ---\r\n---     -----    ---            ---        ---   ---            ---      ---  ---\r\n-----------      -----------    --------------   -----------    ---       --- ---  \r\n----------       -----------    --------------   -----------    ---        ------\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     ----------              -----        -------------         -----\r\n     -----------            --- ---       -------------        --- ---\r\n     ---     -----         ---   ---           ---            ---   ---\r\n     ---     ------       ---     ---          ---           ---     ---\r\n     ---     ------      -------------         ---          -------------    \r\n     ---     -----      ---------------        ---         ---------------\r\n     -----------       ---           ---       ---        ---           ---\r\n     ----------       ---             ---      ---       ---             ---\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n*/\r\n\r\n/*\r\n@Title DegenData Pro Degen Access Contract.\r\n@Author DegenData.\r\n@Notice DegenData.io access contract. \r\n*/\r\ncontract DegenDataAccess {\r\n    //StateVariables\r\n    address public owner;\r\n    uint256 public registrationFee;\r\n    address[] public addressList;\r\n\r\n    //Customer Struct\r\n    struct Customer {\r\n        bool isPaid;\r\n        uint256 expirationDate;\r\n    }\r\n\r\n    //Address to struct mapping for customers\r\n    mapping(address => Customer) public UserRegistion;\r\n\r\n    //@Dev Constructor setting intital owwner set to contract deployer & initializes regestration Fee to .069ETH.\r\n    constructor() {\r\n        owner = msg.sender;\r\n        registrationFee = .069 ether;\r\n    }\r\n\r\n    //@Dev modifier: OnlyOwner requirement for admin functions.\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only Owner Can Perform this function\");\r\n        _;\r\n    }\r\n\r\n    //fallback\r\n    fallback() external payable {\r\n        revert();\r\n    }\r\n\r\n    //@dev returns the number customers that have subscribed.\r\n    function getCustomerCount() public view returns (uint256) {\r\n        return addressList.length;\r\n    }\r\n\r\n    //@dev customer registration function. Checks if customer exist first then adds to customers array. otherwai\r\n    function register() public payable {\r\n        require(msg.value >= registrationFee, \"Insufficient funds sent\");\r\n        require(\r\n            UserRegistion[msg.sender].isPaid == false,\r\n            \"You already registered you knucklehead\"\r\n        );\r\n\r\n        if (UserRegistion[msg.sender].expirationDate == 0) {\r\n            addressList.push(msg.sender);\r\n            UserRegistion[msg.sender].isPaid = true;\r\n            UserRegistion[msg.sender].expirationDate =\r\n                block.timestamp +\r\n                365 days;\r\n        }\r\n\r\n        if (\r\n            UserRegistion[msg.sender].expirationDate > block.timestamp &&\r\n            UserRegistion[msg.sender].isPaid == false\r\n        ) {\r\n            UserRegistion[msg.sender].isPaid = true;\r\n            UserRegistion[msg.sender].expirationDate =\r\n                block.timestamp +\r\n                365 days;\r\n        }\r\n    }\r\n\r\n    //@dev checks if a user is past their subscription expiration date.\r\n    function userPastExpiration(address _address) public view returns (bool) {\r\n        if (\r\n            block.timestamp > UserRegistion[_address].expirationDate &&\r\n            UserRegistion[_address].expirationDate != 0\r\n        ) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ADMIN FUNCTIONS\r\n    // @dev sets new `owner` state variable. Granting new owner control to admin functions.\r\n    // @param address.New address to be set.\r\n    function setNewOwner(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    // @dev sets new `registrationFee` state variable. Owner can set access price.\r\n    // @param  value to set new registration fee. Remember to set value to approiate decimal places. 1 ETH = 1000000000000000000, .069 ETH = 69000000000000000\r\n    function setNewRegistrationPrice(uint256 _newFee) public onlyOwner {\r\n        registrationFee = _newFee;\r\n    }\r\n\r\n    // @dev Will evaluate if an array of addresses are past their subscription date and set their payment status to false .\r\n    // @param array of address.\r\n    function resetUserPaidStatus(address[] memory _address) public onlyOwner {\r\n        for (uint256 i = 0; i < _address.length; i++) {\r\n            if (userPastExpiration(_address[i])) {\r\n                UserRegistion[_address[i]].isPaid = false;\r\n            }\r\n        }\r\n    }\r\n    \r\n     // @dev Will set their payment status to false .\r\n    // @param address.\r\n    function resetUserPaidFlag(address _address) public onlyOwner {\r\n            UserRegistion[_address].isPaid = false;\r\n    }\r\n\r\n    //@Dev Allow Owner of the contract to withdraw the balances to themselves.\r\n    function withdrawToOwner() public onlyOwner {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n\r\n    // @Dev Allow Owner of the contract to withdraw a specified amount to a different address.\r\n    // @Notice Could be used for funding a DegenDao contract, another dApp, or gitcoin Grant.\r\n    function withdrawToAddress(address _recipient, uint256 _amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        payable(_recipient).transfer(_amount);\r\n    }\r\n    \r\n\r\n    //@Dev Allow owner of the contract to set an address to True in mapping without payment.\r\n    function giveAccountAway(address _address) public onlyOwner {\r\n        UserRegistion[_address].isPaid = true;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserRegistion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPaid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCustomerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"giveAccountAway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"resetUserPaidFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"}],\"name\":\"resetUserPaidStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setNewRegistrationPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"userPastExpiration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DegenDataAccess","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e3f000dcbce1c196e3f3563738c53cb4595be35db4563961b0764bf806dd1864"}]}