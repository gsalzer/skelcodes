{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-09-17\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2021-06-20\r\n*/\r\n\r\n// SPDX-License-Identifier: MIXED\r\n\r\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.2\r\n// License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\r\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\r\n// Edited by BoringCrypto\r\n\r\ncontract BoringOwnableData {\r\n    address public owner;\r\n    address public pendingOwner;\r\n}\r\n\r\ncontract BoringOwnable is BoringOwnableData {\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /// @notice `owner` defaults to msg.sender on construction.\r\n    constructor() {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\r\n    /// Can only be invoked by the current `owner`.\r\n    /// @param newOwner Address of the new owner.\r\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\r\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\r\n    function transferOwnership(\r\n        address newOwner,\r\n        bool direct,\r\n        bool renounce\r\n    ) public onlyOwner {\r\n        if (direct) {\r\n            // Checks\r\n            require(newOwner != address(0) || renounce, \"Ownable: zero address\");\r\n\r\n            // Effects\r\n            emit OwnershipTransferred(owner, newOwner);\r\n            owner = newOwner;\r\n            pendingOwner = address(0);\r\n        } else {\r\n            // Effects\r\n            pendingOwner = newOwner;\r\n        }\r\n    }\r\n\r\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\r\n    function claimOwnership() public {\r\n        address _pendingOwner = pendingOwner;\r\n\r\n        // Checks\r\n        require(msg.sender == _pendingOwner, \"Ownable: caller != pending owner\");\r\n\r\n        // Effects\r\n        emit OwnershipTransferred(owner, _pendingOwner);\r\n        owner = _pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n\r\n    /// @notice Only allows the `owner` to execute the function.\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.1\r\ninterface IERC20 {\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File @sushiswap/bentobox-sdk/contracts/IBentoBoxV1.sol@v1.0.2\r\n\r\ninterface IBentoBoxV1 {\r\n    function balanceOf(IERC20 token, address user) external view returns (uint256 share);\r\n    function deposit(\r\n        IERC20 token_,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 share\r\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\r\n\r\n    function toAmount(\r\n        IERC20 token,\r\n        uint256 share,\r\n        bool roundUp\r\n    ) external view returns (uint256 amount);\r\n    \r\n    function toShare(\r\n        IERC20 token,\r\n        uint256 amount,\r\n        bool roundUp\r\n    ) external view returns (uint256 share);\r\n    \r\n    function transfer(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 share\r\n    ) external;\r\n\r\n    function withdraw(\r\n        IERC20 token_,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 share\r\n    ) external returns (uint256 amountOut, uint256 shareOut);\r\n}\r\n\r\n// License-Identifier: MIT\r\n\r\ninterface Cauldron {\r\n    function accrue() external;\r\n    function withdrawFees() external;\r\n    function accrueInfo() external view returns(uint64, uint128, uint64);\r\n}\r\n\r\ninterface CauldronV1 {\r\n    function accrue() external;\r\n    function withdrawFees() external;\r\n    function accrueInfo() external view returns(uint64, uint128);\r\n}\r\n\r\ncontract AdvancedWithdrawer is BoringOwnable {\r\n    \r\n    Cauldron[] public cauldrons;\r\n    CauldronV1[] public cauldronsv1;\r\n    IBentoBoxV1 public constant bentoBox = IBentoBoxV1(0xF5BCE5077908a1b7370B9ae04AdC565EBd643966);\r\n    IERC20 public constant MIM = IERC20(0x99D8a9C45b2ecA8864373A26D1459e3Dff1e17F3);\r\n    \r\n    constructor(Cauldron[] memory pools, CauldronV1[] memory poolsv1) {\r\n        cauldrons = pools;\r\n        cauldronsv1 = poolsv1;\r\n    }\r\n    \r\n    function withdraw() external {\r\n        uint256 length = cauldrons.length;\r\n        for(uint256 i = 0; i < length; i++) {\r\n            cauldrons[i].accrue();\r\n            (, uint256 feesEarned, ) = cauldrons[i].accrueInfo();\r\n            if(feesEarned < bentoBox.toAmount(MIM, bentoBox.balanceOf(MIM, address(cauldrons[i])), false)) {\r\n                MIM.transferFrom(msg.sender, address(bentoBox), feesEarned);\r\n                bentoBox.deposit(MIM, address(bentoBox), address(cauldrons[i]), feesEarned, 0);\r\n            }\r\n            cauldrons[i].withdrawFees();\r\n        }\r\n        \r\n        length = cauldronsv1.length;\r\n        for(uint256 i = 0; i < length; i++) {\r\n            cauldronsv1[i].accrue();\r\n            (, uint256 feesEarned) = cauldronsv1[i].accrueInfo();\r\n            if(feesEarned < bentoBox.toAmount(MIM, bentoBox.balanceOf(MIM, address(cauldronsv1[i])), false)) {\r\n                MIM.transferFrom(msg.sender, address(bentoBox), feesEarned);\r\n                bentoBox.deposit(MIM, address(bentoBox), address(cauldronsv1[i]), feesEarned, 0);\r\n            }\r\n            cauldronsv1[i].withdrawFees();\r\n\r\n        }\r\n        \r\n    }\r\n    \r\n    function addPool(Cauldron pool) external onlyOwner {\r\n        cauldrons.push(pool);\r\n    }\r\n    \r\n    function addPoolv1(CauldronV1 pool) external onlyOwner {\r\n        cauldronsv1.push(pool);\r\n    }\r\n    \r\n    \r\n    function addPools(Cauldron[] memory pools) external onlyOwner {\r\n        for(uint256 i = 0; i < pools.length; i++) {\r\n            cauldrons.push(pools[i]);\r\n        }\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract Cauldron[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"contract CauldronV1[]\",\"name\":\"poolsv1\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIM\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Cauldron\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Cauldron[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"addPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CauldronV1\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"addPoolv1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBoxV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cauldrons\",\"outputs\":[{\"internalType\":\"contract Cauldron\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cauldronsv1\",\"outputs\":[{\"internalType\":\"contract CauldronV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AdvancedWithdrawer","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000008000000000000000000000000ebfde87310dc22404d918058faa4d56dc4e93f0a000000000000000000000000003d5a75d284824af736df51933be522de9eed0f00000000000000000000000098a84eff6e008c5ed0289655ccdca899bcb6b99f000000000000000000000000920d9bd936da4eafb5e25c6bdc9f6cb528953f9f00000000000000000000000005500e2ee779329698df35760bedcaac046e7c270000000000000000000000000bca8ebcb26502b013493bf8fe53aa2b1ed401c1000000000000000000000000806e16ec797c69afa8590a55723ce4cc1b54050e0000000000000000000000007b7473a76d6ae86ce19f7352a1e89f6c9dc3902000000000000000000000000000000000000000000000000000000000000000030000000000000000000000006cbafee1fab76ca5b5e144c43b3b50d42b7c8c8f000000000000000000000000ffbf4892822e0d552cff317f65e1ee7b5d3d9ae6000000000000000000000000551a7cff4de931f32893c928bbc3d25bf1fc5147","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://952b8050c17d3dddda6da2a55df41e4554e44ed90f173934249fc92ed9cfdeed"}]}