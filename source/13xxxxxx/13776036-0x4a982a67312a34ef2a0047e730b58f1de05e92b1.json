{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"ImmutablesPageRoyaltyManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n// All Rights Reserved\\r\\n\\r\\n/*\\r\\n$$$$$$\\\\ $$\\\\      $$\\\\ $$\\\\      $$\\\\ $$\\\\   $$\\\\ $$$$$$$$\\\\  $$$$$$\\\\  $$$$$$$\\\\  $$\\\\       $$$$$$$$\\\\  $$$$$$\\\\\\r\\n\\\\_$$  _|$$$\\\\    $$$ |$$$\\\\    $$$ |$$ |  $$ |\\\\__$$  __|$$  __$$\\\\ $$  __$$\\\\ $$ |      $$  _____|$$  __$$\\\\\\r\\n  $$ |  $$$$\\\\  $$$$ |$$$$\\\\  $$$$ |$$ |  $$ |   $$ |   $$ /  $$ |$$ |  $$ |$$ |      $$ |      $$ /  \\\\__|\\r\\n  $$ |  $$\\\\$$\\\\$$ $$ |$$\\\\$$\\\\$$ $$ |$$ |  $$ |   $$ |   $$$$$$$$ |$$$$$$$\\\\ |$$ |      $$$$$\\\\    \\\\$$$$$$\\\\\\r\\n  $$ |  $$ \\\\$$$  $$ |$$ \\\\$$$  $$ |$$ |  $$ |   $$ |   $$  __$$ |$$  __$$\\\\ $$ |      $$  __|    \\\\____$$\\\\\\r\\n  $$ |  $$ |\\\\$  /$$ |$$ |\\\\$  /$$ |$$ |  $$ |   $$ |   $$ |  $$ |$$ |  $$ |$$ |      $$ |      $$\\\\   $$ |\\r\\n$$$$$$\\\\ $$ | \\\\_/ $$ |$$ | \\\\_/ $$ |\\\\$$$$$$  |   $$ |   $$ |  $$ |$$$$$$$  |$$$$$$$$\\\\ $$$$$$$$\\\\ \\\\$$$$$$  |\\r\\n\\\\______|\\\\__|     \\\\__|\\\\__|     \\\\__| \\\\______/    \\\\__|   \\\\__|  \\\\__|\\\\_______/ \\\\________|\\\\________| \\\\______/\\r\\n$$$$$$$\\\\   $$$$$$\\\\ $$\\\\     $$\\\\  $$$$$$\\\\  $$\\\\    $$$$$$$$\\\\ $$\\\\     $$\\\\\\r\\n$$  __$$\\\\ $$  __$$\\\\\\\\$$\\\\   $$  |$$  __$$\\\\ $$ |   \\\\__$$  __|\\\\$$\\\\   $$  |\\r\\n$$ |  $$ |$$ /  $$ |\\\\$$\\\\ $$  / $$ /  $$ |$$ |      $$ |    \\\\$$\\\\ $$  /\\r\\n$$$$$$$  |$$ |  $$ | \\\\$$$$  /  $$$$$$$$ |$$ |      $$ |     \\\\$$$$  /\\r\\n$$  __$$\\u003c $$ |  $$ |  \\\\$$  /   $$  __$$ |$$ |      $$ |      \\\\$$  /\\r\\n$$ |  $$ |$$ |  $$ |   $$ |    $$ |  $$ |$$ |      $$ |       $$ |\\r\\n$$ |  $$ | $$$$$$  |   $$ |    $$ |  $$ |$$$$$$$$\\\\ $$ |       $$ |\\r\\n\\\\__|  \\\\__| \\\\______/    \\\\__|    \\\\__|  \\\\__|\\\\________|\\\\__|       \\\\__|\\r\\n$$\\\\      $$\\\\  $$$$$$\\\\  $$\\\\   $$\\\\  $$$$$$\\\\   $$$$$$\\\\  $$$$$$$$\\\\ $$$$$$$\\\\\\r\\n$$$\\\\    $$$ |$$  __$$\\\\ $$$\\\\  $$ |$$  __$$\\\\ $$  __$$\\\\ $$  _____|$$  __$$\\\\\\r\\n$$$$\\\\  $$$$ |$$ /  $$ |$$$$\\\\ $$ |$$ /  $$ |$$ /  \\\\__|$$ |      $$ |  $$ |\\r\\n$$\\\\$$\\\\$$ $$ |$$$$$$$$ |$$ $$\\\\$$ |$$$$$$$$ |$$ |$$$$\\\\ $$$$$\\\\    $$$$$$$  |\\r\\n$$ \\\\$$$  $$ |$$  __$$ |$$ \\\\$$$$ |$$  __$$ |$$ |\\\\_$$ |$$  __|   $$  __$$\\u003c\\r\\n$$ |\\\\$  /$$ |$$ |  $$ |$$ |\\\\$$$ |$$ |  $$ |$$ |  $$ |$$ |      $$ |  $$ |\\r\\n$$ | \\\\_/ $$ |$$ |  $$ |$$ | \\\\$$ |$$ |  $$ |\\\\$$$$$$  |$$$$$$$$\\\\ $$ |  $$ |\\r\\n\\\\__|     \\\\__|\\\\__|  \\\\__|\\\\__|  \\\\__|\\\\__|  \\\\__| \\\\______/ \\\\________|\\\\__|  \\\\__|\\r\\n*/\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @royaltyRecipient Gutenblock.eth\\r\\n * @title ImmutablesPageRoyaltyManager\\r\\n * @dev This contract allows to split Ether royalty payments between the\\r\\n * Immutables.co contract and an Immutables.co page royaltyRecipient.\\r\\n *\\r\\n * `ImmutablesPageRoyaltyManager` follows a _pull payment_ model. This means that payments\\r\\n * are not automatically forwarded to the accounts but kept in this contract,\\r\\n * and the actual transfer is triggered as a separate step by calling the\\r\\n * {release} function.\\r\\n *\\r\\n * The contract is written to serve as an implementation for minimal proxy clones.\\r\\n */\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./Initializable.sol\\\";\\r\\nimport \\\"./ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract ImmutablesPageRoyaltyManager is Context, Initializable, ReentrancyGuard {\\r\\n    using Address for address payable;\\r\\n\\r\\n    /// @dev Reentrancy protection.\\r\\n    //bool locked = false;\\r\\n\\r\\n    /// @dev The address of the ImmutablesPage contract.\\r\\n    address public immutablesPageContract;\\r\\n    /// @dev The tokenId of the associated ImmutablesPage.\\r\\n    uint256 public immutablesPageTokenId;\\r\\n    /// @dev The name of the associated ImmutablesPage.\\r\\n    string public immutablesPage;\\r\\n\\r\\n    /// @dev The address of the royaltyRecipient.\\r\\n    address public royaltyRecipient;\\r\\n    /// @dev The address of the additionalPayee set by the royaltyRecipient.\\r\\n    address public additionalPayee;\\r\\n    /// @dev The royaltyRecipient\\u0027s percentage of the total expressed as 1/1000ths.\\r\\n    ///      The royaltyRecipient can allot up to all of this to an additionalPayee.\\r\\n    uint16 public royaltyRecipientPercent;\\r\\n    /// @dev The royaltyRecipient\\u0027s percentage, after additional payee,\\r\\n    ///      of the total expressed in basis points.\\r\\n    uint16 public royaltyRecipientPercentMinusAdditionalPayeePercent;\\r\\n    /// @dev The royaltyRecipient\\u0027s additional payee percentae of the total\\r\\n    /// @dev expressed in basis points.  Valid from 0 to royaltyRecipientPercent.\\r\\n    uint16 public additionalPayeePercent;\\r\\n\\r\\n    /// EVENTS\\r\\n\\r\\n    event PayeeAdded(address account, uint256 percent);\\r\\n    event PayeeRemoved(address account, uint256 percent);\\r\\n    event PaymentReleased(address to, uint256 amount);\\r\\n    event PaymentReceived(address from, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @dev Creates an uninitialized instance of `ImmutablesPageRoyaltyManager`.\\r\\n     */\\r\\n    constructor() { }\\r\\n\\r\\n    /**\\r\\n     * @dev Initialized an instance of `ImmutablesPageRoyaltyManager`\\r\\n     */\\r\\n    function initialize(address _immutablesPageContract,\\r\\n                        uint256 _immutablesPageTokenId, string calldata _immutablesPage,\\r\\n                        address _royaltyRecipient, uint16 _royaltyRecipientPercent,\\r\\n                        address _additionalPayee, uint16 _additionalPayeePercent\\r\\n                        ) public initializer() {\\r\\n        immutablesPageContract = _immutablesPageContract;\\r\\n        immutablesPageTokenId = _immutablesPageTokenId;\\r\\n        immutablesPage = _immutablesPage;\\r\\n\\r\\n        royaltyRecipient = _royaltyRecipient;\\r\\n        royaltyRecipientPercent = _royaltyRecipientPercent;\\r\\n        additionalPayee = _additionalPayee;\\r\\n        additionalPayeePercent = _additionalPayeePercent;\\r\\n        royaltyRecipientPercentMinusAdditionalPayeePercent = _royaltyRecipientPercent - _additionalPayeePercent;\\r\\n\\r\\n        emit PayeeAdded(immutablesPageContract, 10000 - royaltyRecipientPercent);\\r\\n        emit PayeeAdded(royaltyRecipient, royaltyRecipientPercentMinusAdditionalPayeePercent);\\r\\n        if(additionalPayee != address(0)) {\\r\\n          emit PayeeAdded(additionalPayee, additionalPayeePercent);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\r\\n     * reliable: it\\u0027s possible for a contract to receive Ether without triggering this function. This only affects the\\r\\n     * reliability of the events, and not the actual splitting of Ether.\\r\\n     *\\r\\n     * To learn more about this see the Solidity documentation for\\r\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\r\\n     * functions].\\r\\n     */\\r\\n    receive() external payable virtual {\\r\\n        emit PaymentReceived(_msgSender(), msg.value);\\r\\n    }\\r\\n\\r\\n    /** @dev Allows the current royalty recipient to set/update the royalty recipieint address.\\r\\n      * @param _newRoyaltyRecipient The new royalty recipieint.\\r\\n      */\\r\\n    function royaltyRecipientUpdateAddress(address _newRoyaltyRecipient) public {\\r\\n        // only the parent contract and the royaltyRecipient can call this function.\\r\\n        // the parent contract only calls this function at the request of the royaltyRecipient.\\r\\n        require(_msgSender() == immutablesPageContract || _msgSender() == royaltyRecipient, \\\"auth\\\");\\r\\n\\r\\n        // update the royaltyRecipient address\\r\\n        emit PayeeRemoved(royaltyRecipient, royaltyRecipientPercentMinusAdditionalPayeePercent);\\r\\n        royaltyRecipient = _newRoyaltyRecipient;\\r\\n        emit PayeeAdded(royaltyRecipient, royaltyRecipientPercentMinusAdditionalPayeePercent);\\r\\n    }\\r\\n\\r\\n    /** @dev Allows the current royalty recipient to update additional payee information.\\r\\n      * @param _newAdditionalPayee The new additional payee.\\r\\n      * @param _newPercent A new additional payee percentage in basis points.\\r\\n      */\\r\\n\\r\\n    /** @dev Allows the royaltyRecipient to update additional payee info.\\r\\n      * @param _newAdditionalPayee the additional payee address.\\r\\n      * @param _newPercent the basis point (1/10,000th) share for the _additionalPayee up to artistPercent (e.g., 5000 = 50.0%).\\r\\n      */\\r\\n    function royaltyRecipientUpdateAdditionalPayeeInfo(address _newAdditionalPayee, uint16 _newPercent) public {\\r\\n        // only the parent contract and the royaltyRecipient can call this function.\\r\\n        // the parent contract only calls this function at the request of the royaltyRecipient.\\r\\n        require(_msgSender() == immutablesPageContract || _msgSender() == royaltyRecipient, \\\"auth\\\");\\r\\n\\r\\n        // the maximum amount the royaltyRecipient can give to an additional payee is\\r\\n        // the current royaltyRecipientPercent plus the current additionalPayeePercent.\\r\\n        require(_newPercent \\u003c= royaltyRecipientPercent, \\\"percent too big\\\");\\r\\n\\r\\n        // Before changing the additional payee information,\\r\\n        // payout everyone as indicated when prior payments were made.\\r\\n        release();\\r\\n\\r\\n        // Change the additional payee and relevant percentages.\\r\\n        emit PayeeRemoved(royaltyRecipient, royaltyRecipientPercentMinusAdditionalPayeePercent);\\r\\n        if(additionalPayee != address(0)) {\\r\\n          emit PayeeRemoved(additionalPayee, additionalPayeePercent);\\r\\n        }\\r\\n\\r\\n        additionalPayee = _newAdditionalPayee;\\r\\n        additionalPayeePercent = _newPercent;\\r\\n        royaltyRecipientPercentMinusAdditionalPayeePercent = royaltyRecipientPercent - _newPercent;\\r\\n\\r\\n        emit PayeeAdded(royaltyRecipient, royaltyRecipientPercentMinusAdditionalPayeePercent);\\r\\n        if(additionalPayee != address(0)) {\\r\\n          emit PayeeAdded(additionalPayee, additionalPayeePercent);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers payout of all royalties.\\r\\n     */\\r\\n    function release() public virtual nonReentrant() {\\r\\n        // checks\\r\\n        // effects\\r\\n        uint256 _startingBalance = address(this).balance;\\r\\n        uint256 _royaltyRecipientAmount = _startingBalance * royaltyRecipientPercentMinusAdditionalPayeePercent / 10000;\\r\\n        uint256 _additionalPayeeAmount = _startingBalance * additionalPayeePercent / 10000;\\r\\n        uint256 _contractAmount = _startingBalance - _royaltyRecipientAmount - _additionalPayeeAmount;\\r\\n\\r\\n        // interactions\\r\\n        if(_startingBalance \\u003e 0) {\\r\\n          payable(immutablesPageContract).sendValue(_contractAmount);\\r\\n          emit PaymentReleased(immutablesPageContract, _contractAmount);\\r\\n\\r\\n          payable(royaltyRecipient).sendValue(_royaltyRecipientAmount);\\r\\n          emit PaymentReleased(royaltyRecipient, _royaltyRecipientAmount);\\r\\n        }\\r\\n\\r\\n        if(_startingBalance \\u003e 0 \\u0026\\u0026 additionalPayee != address(0) \\u0026\\u0026 additionalPayeePercent \\u003e 0) {\\r\\n          payable(additionalPayee).sendValue(_additionalPayeeAmount);\\r\\n          emit PaymentReleased(additionalPayee, _additionalPayeeAmount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can\\u0027t have a constructor, it\\u0027s common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"PayeeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"additionalPayee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"additionalPayeePercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"immutablesPage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"immutablesPageContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"immutablesPageTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_immutablesPageContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_immutablesPageTokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_immutablesPage\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_royaltyRecipientPercent\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_additionalPayee\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_additionalPayeePercent\",\"type\":\"uint16\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyRecipientPercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyRecipientPercentMinusAdditionalPayeePercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdditionalPayee\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_newPercent\",\"type\":\"uint16\"}],\"name\":\"royaltyRecipientUpdateAdditionalPayeeInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRoyaltyRecipient\",\"type\":\"address\"}],\"name\":\"royaltyRecipientUpdateAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ImmutablesPageRoyaltyManager","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bc8056d5b814ec05e02637dba6fb4be8fa815b56fff22cfc0378ccc87841b0ac"}]}