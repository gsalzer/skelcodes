{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/Payments.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IERC20Permit.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./lib/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title Payments\\n * @dev Contract for streaming token payments for set periods of time \\n */\\ncontract Payments is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Payment definition\\n    struct Payment {\\n        address token;\\n        address receiver;\\n        address payer;\\n        uint48 startTime;\\n        uint48 stopTime;\\n        uint16 cliffDurationInDays;\\n        uint256 paymentDurationInSecs;\\n        uint256 amount;\\n        uint256 amountClaimed;\\n    }\\n\\n    /// @notice Payment balance definition\\n    struct PaymentBalance {\\n        uint256 id;\\n        uint256 claimableAmount;\\n        Payment payment;\\n    }\\n\\n    /// @notice Token balance definition\\n    struct TokenBalance {\\n        uint256 totalAmount;\\n        uint256 claimableAmount;\\n        uint256 claimedAmount;\\n    }\\n\\n    /// @dev Used to translate payment periods specified in days to seconds\\n    uint256 constant internal SECONDS_PER_DAY = 86400;\\n    \\n    /// @notice Mapping of payment id > token payments\\n    mapping (uint256 => Payment) public tokenPayments;\\n\\n    /// @notice Mapping of address to payment id\\n    mapping (address => uint256[]) public paymentIds;\\n\\n    /// @notice Number of payments\\n    uint256 public numPayments;\\n\\n    /// @notice Event emitted when a new payment is created\\n    event PaymentCreated(address indexed token, address indexed payer, address indexed receiver, uint256 paymentId, uint256 amount, uint48 startTime, uint256 durationInSecs, uint16 cliffInDays);\\n    \\n    /// @notice Event emitted when tokens are claimed by a receiver from an available balance\\n    event TokensClaimed(address indexed receiver, address indexed token, uint256 indexed paymentId, uint256 amountClaimed);\\n\\n    /// @notice Event emitted when payment stopped\\n    event PaymentStopped(uint256 indexed paymentId, uint256 indexed originalDuration, uint48 stopTime, uint48 startTime);\\n\\n    /**\\n     * @notice Create payment, optionally providing voting power\\n     * @param payer The account that is paymenting tokens\\n     * @param receiver The account that will be able to retrieve available tokens\\n     * @param startTime The unix timestamp when the payment period will start\\n     * @param amount The amount of tokens being paid\\n     * @param paymentDurationInSecs The payment period in seconds\\n     * @param cliffDurationInDays The cliff duration in days\\n     */\\n    function createPayment(\\n        address token,\\n        address payer,\\n        address receiver,\\n        uint48 startTime,\\n        uint256 amount,\\n        uint256 paymentDurationInSecs,\\n        uint16 cliffDurationInDays\\n    )\\n        external\\n    {\\n        require(paymentDurationInSecs > 0, \\\"Payments::createPayment: payment duration must be > 0\\\");\\n        require(paymentDurationInSecs <= 25*365*SECONDS_PER_DAY, \\\"Payments::createPayment: payment duration more than 25 years\\\");\\n        require(paymentDurationInSecs >= SECONDS_PER_DAY*cliffDurationInDays, \\\"Payments::createPayment: payment duration < cliff\\\");\\n        require(amount > 0, \\\"Payments::createPayment: amount not > 0\\\");\\n        _createPayment(token, payer, receiver, startTime, amount, paymentDurationInSecs, cliffDurationInDays);\\n    }\\n\\n    /**\\n     * @notice Create payment, using permit for approval\\n     * @dev It is up to the frontend developer to ensure the token implements permit - otherwise this will fail\\n     * @param token Address of token to payment\\n     * @param payer The account that is paymenting tokens\\n     * @param receiver The account that will be able to retrieve available tokens\\n     * @param startTime The unix timestamp when the payment period will start\\n     * @param amount The amount of tokens being paid\\n     * @param paymentDurationInSecs The payment period in seconds\\n     * @param cliffDurationInDays The payment cliff duration in days\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function createPaymentWithPermit(\\n        address token,\\n        address payer,\\n        address receiver,\\n        uint48 startTime,\\n        uint256 amount,\\n        uint256 paymentDurationInSecs,\\n        uint16 cliffDurationInDays,\\n        uint256 deadline,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) \\n        external\\n    {\\n        require(paymentDurationInSecs > 0, \\\"Payments::createPaymentWithPermit: payment duration must be > 0\\\");\\n        require(paymentDurationInSecs <= 25*365*SECONDS_PER_DAY, \\\"Payments::createPaymentWithPermit: payment duration more than 25 years\\\");\\n        require(paymentDurationInSecs >= SECONDS_PER_DAY*cliffDurationInDays, \\\"Payments::createPaymentWithPermit: duration < cliff\\\");\\n        require(amount > 0, \\\"Payments::createPaymentWithPermit: amount not > 0\\\");\\n\\n        // Set approval using permit signature\\n        IERC20Permit(token).permit(payer, address(this), amount, deadline, v, r, s);\\n        _createPayment(token, payer, receiver, startTime, amount, paymentDurationInSecs, cliffDurationInDays);\\n    }\\n\\n    /**\\n     * @notice Get all active token payment ids\\n     * @return the payment ids\\n     */\\n    function allActivePaymentIds() external view returns(uint256[] memory){\\n        uint256 activeCount;\\n\\n        // Get number of active payments\\n        for (uint256 i; i < numPayments; i++) {\\n            if(claimableBalance(i) > 0) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        uint256[] memory result = new uint256[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < numPayments; i++) {\\n            if(claimableBalance(i) > 0) {\\n                result[j] = i;\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token payments\\n     * @return the payments\\n     */\\n    function allActivePayments() external view returns(Payment[] memory){\\n        uint256 activeCount;\\n\\n        // Get number of active payments\\n        for (uint256 i; i < numPayments; i++) {\\n            if(claimableBalance(i) > 0) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        Payment[] memory result = new Payment[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < numPayments; i++) {\\n            if(claimableBalance(i) > 0) {\\n                result[j] = tokenPayments[i];\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token payment balances\\n     * @return the active payment balances\\n     */\\n    function allActivePaymentBalances() external view returns(PaymentBalance[] memory){\\n        uint256 activeCount;\\n\\n        // Get number of active payments\\n        for (uint256 i; i < numPayments; i++) {\\n            if(claimableBalance(i) > 0) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        PaymentBalance[] memory result = new PaymentBalance[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < numPayments; i++) {\\n            if(claimableBalance(i) > 0) {\\n                result[j] = paymentBalance(i);\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token payment ids for receiver\\n     * @param receiver The address that has paid balances\\n     * @return the active payment ids\\n     */\\n    function activePaymentIds(address receiver) external view returns(uint256[] memory){\\n        uint256 activeCount;\\n        uint256[] memory receiverPaymentIds = paymentIds[receiver];\\n\\n        // Get number of active payments\\n        for (uint256 i; i < receiverPaymentIds.length; i++) {\\n            if(claimableBalance(receiverPaymentIds[i]) > 0) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        uint256[] memory result = new uint256[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < receiverPaymentIds.length; i++) {\\n            if(claimableBalance(receiverPaymentIds[i]) > 0) {\\n                result[j] = receiverPaymentIds[i];\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all token payments for receiver\\n     * @param receiver The address that has paid balances\\n     * @return the payments\\n     */\\n    function allPayments(address receiver) external view returns(Payment[] memory){\\n        uint256[] memory allPaymentIds = paymentIds[receiver];\\n        Payment[] memory result = new Payment[](allPaymentIds.length);\\n        for (uint256 i; i < allPaymentIds.length; i++) {\\n            result[i] = tokenPayments[allPaymentIds[i]];\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token payments for receiver\\n     * @param receiver The address that has paid balances\\n     * @return the payments\\n     */\\n    function activePayments(address receiver) external view returns(Payment[] memory){\\n        uint256 activeCount;\\n        uint256[] memory receiverPaymentIds = paymentIds[receiver];\\n\\n        // Get number of active payments\\n        for (uint256 i; i < receiverPaymentIds.length; i++) {\\n            if(claimableBalance(receiverPaymentIds[i]) > 0) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        Payment[] memory result = new Payment[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < receiverPaymentIds.length; i++) {\\n            if(claimableBalance(receiverPaymentIds[i]) > 0) {\\n                result[j] = tokenPayments[receiverPaymentIds[i]];\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token payment balances for receiver\\n     * @param receiver The address that has paid balances\\n     * @return the active payment balances\\n     */\\n    function activePaymentBalances(address receiver) external view returns(PaymentBalance[] memory){\\n        uint256 activeCount;\\n        uint256[] memory receiverPaymentIds = paymentIds[receiver];\\n\\n        // Get number of active payments\\n        for (uint256 i; i < receiverPaymentIds.length; i++) {\\n            if(claimableBalance(receiverPaymentIds[i]) > 0) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        PaymentBalance[] memory result = new PaymentBalance[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < receiverPaymentIds.length; i++) {\\n            if(claimableBalance(receiverPaymentIds[i]) > 0) {\\n                result[j] = paymentBalance(receiverPaymentIds[i]);\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get total token balance\\n     * @param token The token to check\\n     * @return balance the total active balance of `token`\\n     */\\n    function totalTokenBalance(address token) external view returns(TokenBalance memory balance){\\n        for (uint256 i; i < numPayments; i++) {\\n            Payment memory tokenPayment = tokenPayments[i];\\n            if(tokenPayment.token == token && tokenPayment.startTime != tokenPayment.stopTime){\\n                balance.totalAmount = balance.totalAmount + tokenPayment.amount;\\n                if(block.timestamp > tokenPayment.startTime) {\\n                    balance.claimedAmount = balance.claimedAmount + tokenPayment.amountClaimed;\\n\\n                    uint256 elapsedTime = tokenPayment.stopTime > 0 && tokenPayment.stopTime < block.timestamp ? tokenPayment.stopTime - tokenPayment.startTime : block.timestamp - tokenPayment.startTime;\\n                    uint256 elapsedDays = elapsedTime / SECONDS_PER_DAY;\\n\\n                    if (\\n                        elapsedDays >= tokenPayment.cliffDurationInDays\\n                    ) {\\n                        if (tokenPayment.stopTime == 0 && elapsedTime >= tokenPayment.paymentDurationInSecs) {\\n                            balance.claimableAmount = balance.claimableAmount + tokenPayment.amount - tokenPayment.amountClaimed;\\n                        } else {\\n                            uint256 paymentAmountPerSec = tokenPayment.amount / tokenPayment.paymentDurationInSecs;\\n                            uint256 amountAvailable = paymentAmountPerSec * elapsedTime;\\n                            balance.claimableAmount = balance.claimableAmount + amountAvailable - tokenPayment.amountClaimed;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get token balance of receiver\\n     * @param token The token to check\\n     * @param receiver The address that has available balances\\n     * @return balance the total active balance of `token` for `receiver`\\n     */\\n    function tokenBalance(address token, address receiver) external view returns(TokenBalance memory balance){\\n        uint256[] memory receiverPaymentIds = paymentIds[receiver];\\n        for (uint256 i; i < receiverPaymentIds.length; i++) {\\n            Payment memory receiverPayment = tokenPayments[receiverPaymentIds[i]];\\n            if(receiverPayment.token == token && receiverPayment.startTime != receiverPayment.stopTime){\\n                balance.totalAmount = balance.totalAmount + receiverPayment.amount;\\n                if(block.timestamp > receiverPayment.startTime) {\\n                    balance.claimedAmount = balance.claimedAmount + receiverPayment.amountClaimed;\\n\\n                    uint256 elapsedTime = receiverPayment.stopTime > 0 && receiverPayment.stopTime < block.timestamp ? receiverPayment.stopTime - receiverPayment.startTime : block.timestamp - receiverPayment.startTime;\\n                    uint256 elapsedDays = elapsedTime / SECONDS_PER_DAY;\\n\\n                    if (\\n                        elapsedDays >= receiverPayment.cliffDurationInDays\\n                    ) {\\n                        if (receiverPayment.stopTime == 0 && elapsedTime >= receiverPayment.paymentDurationInSecs) {\\n                            balance.claimableAmount = balance.claimableAmount + receiverPayment.amount - receiverPayment.amountClaimed;\\n                        } else {\\n                            uint256 paymentAmountPerSec = receiverPayment.amount / receiverPayment.paymentDurationInSecs;\\n                            uint256 amountAvailable = paymentAmountPerSec * elapsedTime;\\n                            balance.claimableAmount = balance.claimableAmount + amountAvailable - receiverPayment.amountClaimed;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get payment balance for a given payment id\\n     * @param paymentId The payment ID\\n     * @return balance the payment balance\\n     */\\n    function paymentBalance(uint256 paymentId) public view returns (PaymentBalance memory balance) {\\n        balance.id = paymentId;\\n        balance.claimableAmount = claimableBalance(paymentId);\\n        balance.payment = tokenPayments[paymentId];\\n    }\\n\\n    /**\\n     * @notice Get claimable balance for a given payment id\\n     * @dev Returns 0 if cliff duration has not ended\\n     * @param paymentId The payment ID\\n     * @return The amount that can be claimed\\n     */\\n    function claimableBalance(uint256 paymentId) public view returns (uint256) {\\n        Payment storage payment = tokenPayments[paymentId];\\n\\n        // For payments created with a future start date or payments stopped before starting, that hasn't been reached, return 0\\n        if (block.timestamp < payment.startTime || payment.startTime == payment.stopTime) {\\n            return 0;\\n        }\\n\\n        \\n        uint256 elapsedTime = payment.stopTime > 0 && payment.stopTime < block.timestamp ? payment.stopTime - payment.startTime : block.timestamp - payment.startTime;\\n        uint256 elapsedDays = elapsedTime / SECONDS_PER_DAY;\\n        \\n        if (elapsedDays < payment.cliffDurationInDays) {\\n            return 0;\\n        }\\n\\n        if (payment.stopTime == 0 && elapsedTime >= payment.paymentDurationInSecs) {\\n            return payment.amount - payment.amountClaimed;\\n        }\\n        \\n        uint256 paymentAmountPerSec = payment.amount / payment.paymentDurationInSecs;\\n        uint256 amountAvailable = paymentAmountPerSec * elapsedTime;\\n        return amountAvailable - payment.amountClaimed;\\n    }\\n\\n    /**\\n     * @notice Allows receiver to claim all of their available tokens for a set of payments\\n     * @dev Errors if no tokens are claimable\\n     * @dev It is advised receivers check they are entitled to claim via `claimableBalance` before calling this\\n     * @param payments The payment ids for available token balances\\n     */\\n    function claimAllAvailableTokens(uint256[] memory payments) external nonReentrant {\\n        for (uint i = 0; i < payments.length; i++) {\\n            uint256 claimableAmount = claimableBalance(payments[i]);\\n            require(claimableAmount > 0, \\\"Payments::claimAllAvailableTokens: claimableAmount is 0\\\");\\n            _claimTokens(payments[i], claimableAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows receiver to claim a portion of their available tokens for a given payment\\n     * @dev Errors if token amounts provided are > claimable amounts\\n     * @dev It is advised receivers check they are entitled to claim via `claimableBalance` before calling this\\n     * @param payments The payment ids for available token balances\\n     * @param amounts The amount of each available token to claim\\n     */\\n    function claimAvailableTokenAmounts(uint256[] memory payments, uint256[] memory amounts) external nonReentrant {\\n        require(payments.length == amounts.length, \\\"Payments::claimAvailableTokenAmounts: arrays must be same length\\\");\\n        for (uint i = 0; i < payments.length; i++) {\\n            uint256 claimableAmount = claimableBalance(payments[i]);\\n            require(claimableAmount >= amounts[i], \\\"Payments::claimAvailableTokenAmounts: claimableAmount < amount\\\");\\n            _claimTokens(payments[i], amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows payer or receiver to stop existing payments for a given paymentId\\n     * @param paymentId The payment id for a payment\\n     * @param stopTime Timestamp to stop payment, if 0 use current block.timestamp\\n     */\\n    function stopPayment(uint256 paymentId, uint48 stopTime) external nonReentrant {\\n        Payment storage payment = tokenPayments[paymentId];\\n        require(msg.sender == payment.payer || msg.sender == payment.receiver, \\\"Payments::stopPayment: msg.sender must be payer or receiver\\\");\\n        require(payment.stopTime == 0, \\\"Payments::stopPayment: payment already stopped\\\");\\n        stopTime = stopTime == 0 ? uint48(block.timestamp) : stopTime;\\n        require(stopTime < payment.startTime + payment.paymentDurationInSecs, \\\"Payments::stopPayment: stop time > payment duration\\\");\\n        if(stopTime > payment.startTime) {\\n            payment.stopTime = stopTime;\\n            uint256 newPaymentDuration = stopTime - payment.startTime;\\n            uint256 paymentAmountPerSec = payment.amount / payment.paymentDurationInSecs;\\n            uint256 newPaymentAmount = paymentAmountPerSec * newPaymentDuration;\\n            IERC20(payment.token).safeTransfer(payment.payer, payment.amount - newPaymentAmount);\\n            emit PaymentStopped(paymentId, payment.paymentDurationInSecs, stopTime, payment.startTime);\\n        } else {\\n            payment.stopTime = payment.startTime;\\n            IERC20(payment.token).safeTransfer(payment.payer, payment.amount);\\n            emit PaymentStopped(paymentId, payment.paymentDurationInSecs, payment.startTime, payment.startTime);\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal implementation of createPayment\\n     * @param payer The account that is paymenting tokens\\n     * @param receiver The account that will be able to retrieve available tokens\\n     * @param startTime The unix timestamp when the payment period will start\\n     * @param amount The amount of tokens being paid\\n     * @param paymentDurationInSecs The payment period in seconds\\n     * @param cliffDurationInDays The cliff duration in days\\n     */\\n    function _createPayment(\\n        address token,\\n        address payer,\\n        address receiver,\\n        uint48 startTime,\\n        uint256 amount,\\n        uint256 paymentDurationInSecs,\\n        uint16 cliffDurationInDays\\n    ) internal {\\n\\n        // Transfer the tokens under the control of the payment contract\\n        IERC20(token).safeTransferFrom(payer, address(this), amount);\\n\\n        uint48 paymentStartTime = startTime == 0 ? uint48(block.timestamp) : startTime;\\n\\n        // Create payment\\n        Payment memory payment = Payment({\\n            token: token,\\n            receiver: receiver,\\n            payer: payer,\\n            startTime: paymentStartTime,\\n            stopTime: 0,\\n            paymentDurationInSecs: paymentDurationInSecs,\\n            cliffDurationInDays: cliffDurationInDays,\\n            amount: amount,\\n            amountClaimed: 0\\n        });\\n\\n        tokenPayments[numPayments] = payment;\\n        paymentIds[receiver].push(numPayments);\\n        emit PaymentCreated(token, payer, receiver, numPayments, amount, paymentStartTime, paymentDurationInSecs, cliffDurationInDays);\\n        \\n        // Increment payment id\\n        numPayments++;\\n    }\\n\\n    /**\\n     * @notice Internal implementation of token claims\\n     * @param paymentId The payment id for claim\\n     * @param claimAmount The amount to claim\\n     */\\n    function _claimTokens(uint256 paymentId, uint256 claimAmount) internal {\\n        Payment storage payment = tokenPayments[paymentId];\\n\\n        // Update claimed amount\\n        payment.amountClaimed = payment.amountClaimed + claimAmount;\\n\\n        // Release tokens\\n        IERC20(payment.token).safeTransfer(payment.receiver, claimAmount);\\n        emit TokensClaimed(payment.receiver, payment.token, paymentId, claimAmount);\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Permit is IERC20 {\\n    function getDomainSeparator() external view returns (bytes32);\\n    function DOMAIN_TYPEHASH() external view returns (bytes32);\\n    function VERSION_HASH() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\n    function nonces(address) external view returns (uint);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\"\r\n    },\r\n    \"contracts/lib/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/lib/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\"\r\n    },\r\n    \"contracts/lib/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"durationInSecs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"cliffInDays\",\"type\":\"uint16\"}],\"name\":\"PaymentCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"originalDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"}],\"name\":\"PaymentStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"activePaymentBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"paymentDurationInSecs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct Payments.Payment\",\"name\":\"payment\",\"type\":\"tuple\"}],\"internalType\":\"struct Payments.PaymentBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"activePaymentIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"activePayments\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"paymentDurationInSecs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct Payments.Payment[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allActivePaymentBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"paymentDurationInSecs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct Payments.Payment\",\"name\":\"payment\",\"type\":\"tuple\"}],\"internalType\":\"struct Payments.PaymentBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allActivePaymentIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allActivePayments\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"paymentDurationInSecs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct Payments.Payment[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"allPayments\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"paymentDurationInSecs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct Payments.Payment[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"payments\",\"type\":\"uint256[]\"}],\"name\":\"claimAllAvailableTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"payments\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"claimAvailableTokenAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"}],\"name\":\"claimableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentDurationInSecs\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"}],\"name\":\"createPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentDurationInSecs\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"createPaymentWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numPayments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"}],\"name\":\"paymentBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"paymentDurationInSecs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct Payments.Payment\",\"name\":\"payment\",\"type\":\"tuple\"}],\"internalType\":\"struct Payments.PaymentBalance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paymentIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"}],\"name\":\"stopPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Payments.TokenBalance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPayments\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"paymentDurationInSecs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalTokenBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Payments.TokenBalance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Payments","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}