{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/royalties/ERC2981Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./NiftyEntity.sol\\\";\\nimport \\\"./ERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\ncontract ERC2981Factory is NiftyEntity {\\n    address public immutable tokenImplementation;\\n\\n    event ERC2981Created(address newERC2981Address);\\n\\n    constructor(address _niftyRegistryContract) NiftyEntity(_niftyRegistryContract) {\\n        tokenImplementation = address(new ERC2981(_niftyRegistryContract));\\n    }\\n\\n    function createGlobalRoyaltyInfo(\\n        address _recipient,\\n        uint256 _value,\\n        address _tokenAddress\\n    ) public onlyValidSender returns (address) {\\n        address clone = Clones.clone(tokenImplementation);\\n        ERC2981(clone).initialize(_recipient, _value, _tokenAddress);\\n        emit ERC2981Created(clone);\\n        return clone;\\n    }\\n\\n    function createTokenRoyaltyInfo(address _tokenAddress) public onlyValidSender returns (address) {\\n        address clone = Clones.clone(tokenImplementation);\\n        ERC2981(clone).initialize(address(0), 0, _tokenAddress);\\n        emit ERC2981Created(clone);\\n        return clone;\\n    }\\n}\"\r\n    },\r\n    \"contracts/royalties/NiftyEntity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./registry/INiftyRegistry.sol\\\";\\n\\nabstract contract NiftyEntity {\\n    address internal immutable niftyRegistryContract;\\n\\n    constructor(address _niftyRegistryContract) {\\n        niftyRegistryContract = _niftyRegistryContract;\\n    }\\n\\n    /**\\n     * @dev Determines whether accounts are allowed to invoke state mutating operations on child contracts.\\n     */\\n    modifier onlyValidSender() {\\n        bool isValid = INiftyRegistry(niftyRegistryContract).isValidNiftySender(msg.sender);\\n        require(isValid, \\\"unauthorized\\\");\\n        _;\\n    }\\n}\"\r\n    },\r\n    \"contracts/royalties/ERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./NiftyEntity.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\ncontract ERC2981 is ERC165, IERC2981, Initializable, NiftyEntity {\\n    GlobalRoyaltyInfo private _globalRoyaltyInfo;\\n\\n    RoyaltyRange[] public royaltyRanges;\\n    bool public contractEnabled;\\n    address public tokenAddress;\\n\\n    struct GlobalRoyaltyInfo {\\n        bool enabled;\\n        uint24 amount;\\n        address recipient;\\n    }\\n\\n    struct RoyaltyRange {\\n        uint256 startTokenId;\\n        uint256 endTokenId;\\n        address recipient;\\n        uint16 amount;\\n    }\\n\\n    constructor(address _niftyRegistryContract) NiftyEntity(_niftyRegistryContract) {}\\n\\n    function initialize(\\n        address _recipient,\\n        uint256 _value,\\n        address _tokenAddress\\n    ) public initializer {\\n        tokenAddress = _tokenAddress;\\n        contractEnabled = true;\\n        if (_value != 0) {\\n            _setGlobalRoyalties(_recipient, _value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Function responsible for updating existing token level royalties.\\n     * @param rangeIdx int256 represents the royaltyRanges index to delete. If writing a new range\\n     * then this value is set to '-1'. Deleting elements results in a gas refund.\\n     * @param startTokenId uint256 that is the first token in a RoyaltyRange\\n     * @param endTokenId uint256 that is the last token in a RoyaltyRange\\n     * @param recipient address of who should be sent the royalty payment\\n     * @param amount uint256 value for percentage (using 2 decimals - 10000 = 100, 0 = 0)\\n     */\\n    function updateTokenRoyaltyRange(\\n        int256 rangeIdx,\\n        uint256 startTokenId,\\n        uint256 endTokenId,\\n        address recipient,\\n        uint256 amount\\n    ) public onlyValidSender {\\n        RoyaltyRange storage r = royaltyRanges[uint256(rangeIdx)];\\n        if (r.startTokenId == startTokenId && r.endTokenId == endTokenId) {\\n            delete royaltyRanges[uint256(rangeIdx)];\\n        }\\n        _setTokenRoyaltyRange(startTokenId, endTokenId, recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Function responsible for setting token level royalties. To be gas efficient\\n     * this function provides the ability to set royalty information in ranges. It is\\n     * the responsibility of the caller to determine what these ranges are and to invoke\\n     * this function accordingly e.g. 'setTokenRoyaltyRange(0, 4, addressX, 250)' -\\n     * will set the the first 5 tokens to have 'addressX' and '250' as their royalty info.\\n     *\\n     * When reading royaltyInfo, the latest write for a token in a royalty range gets selected.\\n     * @param startTokenId uint256 that is the first token in a RoyaltyRange\\n     * @param endTokenId uint256 that is the last token in a RoyaltyRange\\n     * @param recipient address of who should be sent the royalty payment\\n     * @param amount uint256 value for percentage (using 2 decimals - 10000 = 100, 0 = 0)\\n     */\\n    function setTokenRoyaltyRange(\\n        uint256 startTokenId,\\n        uint256 endTokenId,\\n        address recipient,\\n        uint256 amount\\n    ) public onlyValidSender {\\n        _setTokenRoyaltyRange(startTokenId, endTokenId, recipient, amount);\\n    }\\n\\n    function _setTokenRoyaltyRange(\\n        uint256 startTokenId,\\n        uint256 endTokenId,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        require(contractEnabled, \\\"Contract disabled\\\");\\n        require(amount <= 10000, \\\"Royalties too high\\\");\\n        require(startTokenId <= endTokenId && startTokenId >= 0, \\\"Bad tokenId range values\\\");\\n        royaltyRanges.push(RoyaltyRange(startTokenId, endTokenId, recipient, uint16(amount)));\\n    }\\n\\n    function royaltyRangeCount() external view returns (uint256) {\\n        return royaltyRanges.length;\\n    }\\n\\n    function globalRoyaltiesEnabled() external view returns (bool) {\\n        return _globalRoyaltyInfo.enabled;\\n    }\\n\\n    function setGlobalRoyalties(address recipient, uint256 value) public onlyValidSender {\\n        require(contractEnabled, \\\"Contract disabled\\\");\\n        _setGlobalRoyalties(recipient, value);\\n    }\\n\\n    function _setGlobalRoyalties(address recipient, uint256 value) internal {\\n        require(value <= 10000, \\\"Royalties too high\\\");\\n        _globalRoyaltyInfo = GlobalRoyaltyInfo(true, uint24(value), recipient);\\n    }\\n\\n    /// @inheritdoc IERC2981\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        require(contractEnabled, \\\"Contract disabled\\\");\\n        uint256 basis;\\n        GlobalRoyaltyInfo memory globalInfo = _globalRoyaltyInfo;\\n        if (globalInfo.enabled) {\\n            receiver = globalInfo.recipient;\\n            basis = globalInfo.amount;\\n        } else {\\n            if (royaltyRanges.length > 0) {\\n                uint256 i = royaltyRanges.length;\\n                while (i > 0) {\\n                    RoyaltyRange memory r = royaltyRanges[--i];\\n                    if (_tokenId >= r.startTokenId && _tokenId <= r.endTokenId) {\\n                        receiver = r.recipient;\\n                        basis = r.amount;\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        royaltyAmount = (_salePrice * basis) / 10000;\\n    }\\n\\n    function setContractEnabled(bool _contractEnabled) public onlyValidSender {\\n        contractEnabled = _contractEnabled;\\n    }\\n\\n    function setGlobalRoyaltiesEnabled(bool _globalRoyaltiesEnabled) public onlyValidSender {\\n        _globalRoyaltyInfo.enabled = _globalRoyaltiesEnabled;\\n    }\\n\\n    /// @inheritdoc ERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/royalties/registry/INiftyRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/**\\n * @dev Nifty registry\\n */\\ninterface INiftyRegistry {\\n    /**\\n     * @dev function to see if sending key is valid\\n     */\\n    function isValidNiftySender(address sending_key) external view returns (bool);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_niftyRegistryContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newERC2981Address\",\"type\":\"address\"}],\"name\":\"ERC2981Created\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"createGlobalRoyaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"createTokenRoyaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ERC2981Factory","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006e53130ddff21e3bc963ee902005223b9a202106","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}