{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/aggregator/mainnet/flashloan/main.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Flashloan.\\n * @dev Flashloan aggregator.\\n */\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { Helper } from \\\"./helpers.sol\\\";\\n\\nimport { \\n    TokenInterface,\\n    CTokenInterface,\\n    InstaFlashReceiverInterface\\n} from \\\"./interfaces.sol\\\";\\n\\ncontract Setups is Helper {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Add to token to cToken mapping.\\n     * @notice Add to token to cToken mapping.\\n     * @param _cTokens list of cToken addresses to be added to the mapping.\\n    */\\n    function addTokenToCToken(address[] memory _cTokens) public {\\n        for (uint i = 0; i < _cTokens.length; i++) {\\n            (bool isMarket_,,) = troller.markets(_cTokens[i]);\\n            require(isMarket_, \\\"unvalid-ctoken\\\");\\n            address token_ = CTokenInterface(_cTokens[i]).underlying();\\n            require(tokenToCToken[token_] == address((0)), \\\"already-added\\\");\\n            tokenToCToken[token_] = _cTokens[i];\\n            IERC20(token_).safeApprove(_cTokens[i], type(uint256).max);\\n        }\\n    }\\n}\\n\\ncontract FlashAggregator is Setups {\\n    using SafeERC20 for IERC20;\\n\\n    event LogFlashloan(\\n        address indexed account,\\n        uint256 indexed route,\\n        address[] tokens,\\n        uint256[] amounts\\n    );\\n    \\n    /**\\n     * @dev Callback function for aave flashloan.\\n     * @notice Callback function for aave flashloan.\\n     * @param _assets list of asset addresses for flashloan.\\n     * @param _amounts list of amounts for the corresponding assets for flashloan.\\n     * @param _premiums list of premiums/fees for the corresponding addresses for flashloan.\\n     * @param _initiator initiator address for flashloan.\\n     * @param _data extra data passed.\\n    */\\n    function executeOperation(\\n        address[] memory _assets,\\n        uint256[] memory _amounts,\\n        uint256[] memory _premiums,\\n        address _initiator,\\n        bytes memory _data\\n    ) external verifyDataHash(_data) returns (bool) {\\n        require(_initiator == address(this), \\\"not-same-sender\\\");\\n        require(msg.sender == aaveLendingAddr, \\\"not-aave-sender\\\");\\n\\n        FlashloanVariables memory instaLoanVariables_;\\n\\n        (address sender_, bytes memory data_) = abi.decode(\\n            _data,\\n            (address, bytes)\\n        );\\n\\n        instaLoanVariables_._tokens = _assets;\\n        instaLoanVariables_._amounts = _amounts;\\n        instaLoanVariables_._instaFees = calculateFees(_amounts, calculateFeeBPS(1));\\n        instaLoanVariables_._iniBals = calculateBalances(_assets, address(this));\\n\\n        safeApprove(instaLoanVariables_, _premiums, aaveLendingAddr);\\n        safeTransfer(instaLoanVariables_, sender_);\\n\\n        if (checkIfDsa(msg.sender)) {\\n            Address.functionCall(sender_, data_, \\\"DSA-flashloan-fallback-failed\\\");\\n        } else {\\n            InstaFlashReceiverInterface(sender_).executeOperation(_assets, _amounts, instaLoanVariables_._instaFees, sender_, data_);\\n        }\\n\\n        instaLoanVariables_._finBals = calculateBalances(_assets, address(this));\\n        validateFlashloan(instaLoanVariables_);\\n\\n        return true;\\n    }\\n    \\n    /**\\n     * @dev Fallback function for makerdao flashloan.\\n     * @notice Fallback function for makerdao flashloan.\\n     * @param _initiator initiator address for flashloan.\\n     * @param _amount DAI amount for flashloan.\\n     * @param _fee fee for the flashloan.\\n     * @param _data extra data passed(includes route info aswell).\\n    */\\n    function onFlashLoan(\\n        address _initiator,\\n        address,\\n        uint256 _amount,\\n        uint256 _fee,\\n        bytes calldata _data\\n    ) external verifyDataHash(_data) returns (bytes32) {\\n        require(_initiator == address(this), \\\"not-same-sender\\\");\\n        require(msg.sender == makerLendingAddr, \\\"not-maker-sender\\\");\\n\\n        FlashloanVariables memory instaLoanVariables_;\\n\\n        (uint route_, address[] memory tokens_, uint256[] memory amounts_, address sender_, bytes memory data_) = abi.decode(\\n            _data,\\n            (uint, address[], uint256[], address, bytes)\\n        );\\n\\n        instaLoanVariables_._tokens = tokens_;\\n        instaLoanVariables_._amounts = amounts_;\\n        instaLoanVariables_._iniBals = calculateBalances(tokens_, address(this));\\n        instaLoanVariables_._instaFees = calculateFees(amounts_, calculateFeeBPS(route_));\\n\\n        if (route_ == 2) {\\n            safeTransfer(instaLoanVariables_, sender_);\\n\\n            if (checkIfDsa(msg.sender)) {\\n                Address.functionCall(sender_, data_, \\\"DSA-flashloan-fallback-failed\\\");\\n            } else {\\n                InstaFlashReceiverInterface(sender_).executeOperation(tokens_, amounts_, instaLoanVariables_._instaFees, sender_, data_);\\n            }\\n            \\n        } else if (route_ == 3 || route_ == 4) {\\n            require(_fee == 0, \\\"flash-DAI-fee-not-0\\\");\\n            if (route_ == 3) {\\n                compoundSupply(daiToken, _amount);\\n                compoundBorrow(tokens_, amounts_);\\n            } else {\\n                aaveSupply(daiToken, _amount);\\n                aaveBorrow(tokens_, amounts_);\\n            }\\n            \\n            safeTransfer(instaLoanVariables_, sender_);\\n\\n            if (checkIfDsa(msg.sender)) {\\n                Address.functionCall(sender_, data_, \\\"DSA-flashloan-fallback-failed\\\");\\n            } else {\\n                InstaFlashReceiverInterface(sender_).executeOperation(tokens_, amounts_, instaLoanVariables_._instaFees, sender_, data_);\\n            }\\n\\n            if (route_ == 3) {\\n                compoundPayback(tokens_, amounts_);\\n                compoundWithdraw(daiToken, _amount);\\n            } else {\\n                aavePayback(tokens_, amounts_);\\n                aaveWithdraw(daiToken, _amount);\\n            }\\n        } else {\\n            require(false, \\\"wrong-route\\\");\\n        }\\n\\n        instaLoanVariables_._finBals = calculateBalances(tokens_, address(this));\\n        validateFlashloan(instaLoanVariables_);\\n\\n        return keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n    }\\n\\n    /**\\n     * @dev Fallback function for balancer flashloan.\\n     * @notice Fallback function for balancer flashloan.\\n     * @param _amounts list of amounts for the corresponding assets or amount of ether to borrow as collateral for flashloan.\\n     * @param _fees list of fees for the corresponding addresses for flashloan.\\n     * @param _data extra data passed(includes route info aswell).\\n    */\\n    function receiveFlashLoan(\\n        IERC20[] memory,\\n        uint256[] memory _amounts,\\n        uint256[] memory _fees,\\n        bytes memory _data\\n    ) external verifyDataHash(_data) {\\n        require(msg.sender == balancerLendingAddr, \\\"not-aave-sender\\\");\\n\\n        FlashloanVariables memory instaLoanVariables_;\\n\\n        (uint route_, address[] memory tokens_, uint256[] memory amounts_, address sender_, bytes memory data_) = abi.decode(\\n            _data,\\n            (uint, address[], uint256[], address, bytes)\\n        );\\n\\n        instaLoanVariables_._tokens = tokens_;\\n        instaLoanVariables_._amounts = amounts_;\\n        instaLoanVariables_._iniBals = calculateBalances(tokens_, address(this));\\n        instaLoanVariables_._instaFees = calculateFees(amounts_, calculateFeeBPS(route_));\\n\\n        if (route_ == 5) {\\n            safeTransfer(instaLoanVariables_, sender_);\\n\\n            if (checkIfDsa(msg.sender)) {\\n                Address.functionCall(sender_, data_, \\\"DSA-flashloan-fallback-failed\\\");\\n            } else {\\n                InstaFlashReceiverInterface(sender_).executeOperation(tokens_, amounts_, instaLoanVariables_._instaFees, sender_, data_);\\n            }\\n\\n            instaLoanVariables_._finBals = calculateBalances(tokens_, address(this));\\n            validateFlashloan(instaLoanVariables_);\\n            safeTransferWithFee(instaLoanVariables_, _fees, balancerLendingAddr);\\n        } else if (route_ == 6 || route_ == 7) {\\n            require(_fees[0] == 0, \\\"flash-ETH-fee-not-0\\\");\\n            if (route_ == 6) {\\n                compoundSupply(wEthToken, _amounts[0]);\\n                compoundBorrow(tokens_, amounts_);\\n            } else {\\n                aaveSupply(wEthToken, _amounts[0]);\\n                aaveBorrow(tokens_, amounts_);\\n            }\\n\\n            safeTransfer(instaLoanVariables_, sender_);\\n\\n            if (checkIfDsa(msg.sender)) {\\n                Address.functionCall(sender_, data_, \\\"DSA-flashloan-fallback-failed\\\");\\n            } else {\\n                InstaFlashReceiverInterface(sender_).executeOperation(tokens_, amounts_, instaLoanVariables_._instaFees, sender_, data_);\\n            }\\n\\n            if (route_ == 6) {\\n                compoundPayback(tokens_, amounts_);\\n                compoundWithdraw(wEthToken, _amounts[0]);\\n            } else {\\n                aavePayback(tokens_, amounts_);\\n                aaveWithdraw(wEthToken, _amounts[0]);\\n            }\\n            instaLoanVariables_._finBals = calculateBalances(tokens_, address(this));\\n            validateFlashloan(instaLoanVariables_);\\n            instaLoanVariables_._amounts = _amounts;\\n            instaLoanVariables_._tokens = new address[](1);\\n            instaLoanVariables_._tokens[0] = wEthToken;\\n            safeTransferWithFee(instaLoanVariables_, _fees, balancerLendingAddr);\\n        } else {\\n            require(false, \\\"wrong-route\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Middle function for route 1.\\n     * @notice Middle function for route 1.\\n     * @param _tokens list of token addresses for flashloan.\\n     * @param _amounts list of amounts for the corresponding assets or amount of ether to borrow as collateral for flashloan.\\n     * @param _data extra data passed.\\n    */\\n    function routeAave(address[] memory _tokens, uint256[] memory _amounts, bytes memory _data) internal {\\n        bytes memory data_ = abi.encode(msg.sender, _data);\\n        uint length_ = _tokens.length;\\n        uint[] memory _modes = new uint[](length_);\\n        for (uint i = 0; i < length_; i++) {\\n            _modes[i]=0;\\n        }\\n        dataHash = bytes32(keccak256(data_));\\n        aaveLending.flashLoan(address(this), _tokens, _amounts, _modes, address(0), data_, 3228);\\n    }\\n\\n    /**\\n     * @dev Middle function for route 2.\\n     * @notice Middle function for route 2.\\n     * @param _token token address for flashloan(DAI).\\n     * @param _amount DAI amount for flashloan.\\n     * @param _data extra data passed.\\n    */\\n    function routeMaker(address _token, uint256 _amount, bytes memory _data) internal {\\n        address[] memory tokens_ = new address[](1);\\n        uint256[] memory amounts_ = new uint256[](1);\\n        tokens_[0] = _token;\\n        amounts_[0] = _amount;\\n        bytes memory data_ = abi.encode(2, tokens_, amounts_, msg.sender, _data);\\n        dataHash = bytes32(keccak256(data_));\\n        makerLending.flashLoan(InstaFlashReceiverInterface(address(this)), _token, _amount, data_);\\n    }\\n\\n    /**\\n     * @dev Middle function for route 3.\\n     * @notice Middle function for route 3.\\n     * @param _tokens token addresses for flashloan.\\n     * @param _amounts list of amounts for the corresponding assets.\\n     * @param _data extra data passed.\\n    */\\n    function routeMakerCompound(address[] memory _tokens, uint256[] memory _amounts, bytes memory _data) internal {\\n        bytes memory data_ = abi.encode(3, _tokens, _amounts, msg.sender, _data);\\n        dataHash = bytes32(keccak256(data_));\\n        makerLending.flashLoan(InstaFlashReceiverInterface(address(this)), daiToken, daiBorrowAmount, data_);\\n    }\\n    \\n    /**\\n     * @dev Middle function for route 4.\\n     * @notice Middle function for route 4.\\n     * @param _tokens token addresses for flashloan.\\n     * @param _amounts list of amounts for the corresponding assets.\\n     * @param _data extra data passed.\\n    */\\n    function routeMakerAave(address[] memory _tokens, uint256[] memory _amounts, bytes memory _data) internal {\\n        bytes memory data_ = abi.encode(4, _tokens, _amounts, msg.sender, _data);\\n        dataHash = bytes32(keccak256(data_));\\n        makerLending.flashLoan(InstaFlashReceiverInterface(address(this)), daiToken, daiBorrowAmount, data_);\\n    }\\n\\n    /**\\n     * @dev Middle function for route 5.\\n     * @notice Middle function for route 5.\\n     * @param _tokens token addresses for flashloan.\\n     * @param _amounts list of amounts for the corresponding assets.\\n     * @param _data extra data passed.\\n    */\\n    function routeBalancer(address[] memory _tokens, uint256[] memory _amounts, bytes memory _data) internal {\\n        uint256 length_ = _tokens.length;\\n        IERC20[] memory tokens_ = new IERC20[](length_);\\n        for(uint256 i = 0 ; i < length_ ; i++) {\\n            tokens_[i] = IERC20(_tokens[i]);\\n        }\\n        bytes memory data_ = abi.encode(5, _tokens, _amounts, msg.sender, _data);\\n        dataHash = bytes32(keccak256(data_));\\n        balancerLending.flashLoan(InstaFlashReceiverInterface(address(this)), tokens_, _amounts, data_);\\n    }\\n\\n    /**\\n     * @dev Middle function for route 6.\\n     * @notice Middle function for route 6.\\n     * @param _tokens token addresses for flashloan.\\n     * @param _amounts list of amounts for the corresponding assets.\\n     * @param _data extra data passed.\\n    */\\n    function routeBalancerCompound(address[] memory _tokens, uint256[] memory _amounts, bytes memory _data) internal {\\n        bytes memory data_ = abi.encode(6, _tokens, _amounts, msg.sender, _data);\\n        IERC20[] memory wethTokenList_ = new IERC20[](1);\\n        uint256[] memory wethAmountList_ = new uint256[](1);\\n        wethTokenList_[0] = IERC20(wEthToken);\\n        wethAmountList_[0] = getWEthBorrowAmount();\\n        dataHash = bytes32(keccak256(data_));\\n        balancerLending.flashLoan(InstaFlashReceiverInterface(address(this)), wethTokenList_, wethAmountList_, data_);\\n    }\\n    \\n    /**\\n     * @dev Middle function for route 7.\\n     * @notice Middle function for route 7.\\n     * @param _tokens token addresses for flashloan.\\n     * @param _amounts list of amounts for the corresponding assets.\\n     * @param _data extra data passed.\\n    */\\n    function routeBalancerAave(address[] memory _tokens, uint256[] memory _amounts, bytes memory _data) internal {\\n        bytes memory data_ = abi.encode(7, _tokens, _amounts, msg.sender, _data);\\n        IERC20[] memory wethTokenList_ = new IERC20[](1);\\n        uint256[] memory wethAmountList_ = new uint256[](1);\\n        wethTokenList_[0] = IERC20(wEthToken);\\n        wethAmountList_[0] = getWEthBorrowAmount();\\n        dataHash = bytes32(keccak256(data_));\\n        balancerLending.flashLoan(InstaFlashReceiverInterface(address(this)), wethTokenList_, wethAmountList_, data_);\\n    }\\n\\n    /**\\n     * @dev Main function for flashloan for all routes. Calls the middle functions according to routes.\\n     * @notice Main function for flashloan for all routes. Calls the middle functions according to routes.\\n     * @param _tokens token addresses for flashloan.\\n     * @param _amounts list of amounts for the corresponding assets.\\n     * @param _route route for flashloan.\\n     * @param _data extra data passed.\\n    */\\n    function flashLoan(\\t\\n        address[] memory _tokens,\\t\\n        uint256[] memory _amounts,\\n        uint256 _route,\\n        bytes calldata _data,\\n        bytes calldata // added this as we might need some extra data to decide route in future cases. Not using it anywhere at the moment.\\n    ) external reentrancy {\\n\\n        require(_tokens.length == _amounts.length, \\\"array-lengths-not-same\\\");\\n\\n        (_tokens, _amounts) = bubbleSort(_tokens, _amounts);\\n        validateTokens(_tokens);\\n\\n        if (_route == 1) {\\n            routeAave(_tokens, _amounts, _data);\\t\\n        } else if (_route == 2) {\\n            routeMaker(_tokens[0], _amounts[0], _data);\\t\\n        } else if (_route == 3) {\\n            routeMakerCompound(_tokens, _amounts, _data);\\n        } else if (_route == 4) {\\n            routeMakerAave(_tokens, _amounts, _data);\\n        } else if (_route == 5) {\\n            routeBalancer(_tokens, _amounts, _data);\\n        } else if (_route == 6) {\\n            routeBalancerCompound(_tokens, _amounts, _data);\\n        } else if (_route == 7) {\\n            routeBalancerAave(_tokens, _amounts, _data);\\n        } else {\\n            require(false, \\\"route-does-not-exist\\\");\\n        }\\n        \\n        emit LogFlashloan(\\n            msg.sender,\\n            _route,\\n            _tokens,\\n            _amounts\\n        );\\n    }\\n\\n    /**\\n     * @dev Function to get the list of available routes.\\n     * @notice Function to get the list of available routes.\\n    */\\n    function getRoutes() public pure returns (uint16[] memory routes_) {\\n        routes_ = new uint16[](7);\\n        routes_[0] = 1;\\n        routes_[1] = 2;\\n        routes_[2] = 3;\\n        routes_[3] = 4;\\n        routes_[4] = 5;\\n        routes_[5] = 6;\\n        routes_[6] = 7;\\n    }\\n\\n    /**\\n     * @dev Function to transfer fee to the treasury.\\n     * @notice Function to transfer fee to the treasury. Will be called manually.\\n     * @param _tokens token addresses for transferring fee to treasury.\\n    */\\n    function transferFeeToTreasury(address[] memory _tokens) public {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            IERC20 token_ = IERC20(_tokens[i]);\\n            uint decimals_ = TokenInterface(_tokens[i]).decimals();\\n            uint amtToSub_ = decimals_ == 18 ? 1e10 : decimals_ > 12 ? 10000 : decimals_ > 7 ? 100 : 10;\\n            uint amtToTransfer_ = token_.balanceOf(address(this)) > amtToSub_ ? (token_.balanceOf(address(this)) - amtToSub_) : 0;\\n            if (amtToTransfer_ > 0) token_.safeTransfer(treasuryAddr, amtToTransfer_);\\n        }\\n    }\\n}\\n\\ncontract InstaFlashAggregator is FlashAggregator {\\n    using SafeERC20 for IERC20;\\n\\n    function initialize(address[] memory _ctokens) public {\\n        require(status == 0, \\\"cannot-call-again\\\");\\n        IERC20(daiToken).safeApprove(makerLendingAddr, type(uint256).max);\\n        addTokenToCToken(_ctokens);\\n        status = 1;\\n    }\\n\\n    receive() external payable {}\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/aggregator/mainnet/flashloan/helpers.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport {Variables} from \\\"./variables.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {\\n    TokenInterface,\\n    CTokenInterface,\\n    CEthInterface\\n} from \\\"./interfaces.sol\\\";\\n\\ncontract Helper is Variables {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Approves the tokens to the receiver address with allowance (amount + fee).\\n     * @notice Approves the tokens to the receiver address with allowance (amount + fee).\\n     * @param _instaLoanVariables struct which includes list of token addresses and amounts.\\n     * @param _fees list of premiums/fees for the corresponding addresses for flashloan.\\n     * @param _receiver address to which tokens have to be approved.\\n    */\\n    function safeApprove(\\n        FlashloanVariables memory _instaLoanVariables,\\n        uint256[] memory _fees,\\n        address _receiver\\n    ) internal {\\n        require(_instaLoanVariables._tokens.length == _instaLoanVariables._amounts.length, \\\"Lengths of parameters not same\\\");\\n        require(_instaLoanVariables._tokens.length == _fees.length, \\\"Lengths of parameters not same\\\");\\n        uint256 length_ = _instaLoanVariables._tokens.length;\\n        for (uint i = 0; i < length_; i++) {\\n            IERC20 token = IERC20(_instaLoanVariables._tokens[i]);\\n            token.safeApprove(_receiver, _instaLoanVariables._amounts[i] + _fees[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers the tokens to the receiver address.\\n     * @notice Transfers the tokens to the receiver address.\\n     * @param _instaLoanVariables struct which includes list of token addresses and amounts.\\n     * @param _receiver address to which tokens have to be transferred.\\n    */\\n    function safeTransfer(\\n        FlashloanVariables memory _instaLoanVariables,\\n        address _receiver\\n    ) internal {\\n        require(_instaLoanVariables._tokens.length == _instaLoanVariables._amounts.length, \\\"Lengths of parameters not same\\\");\\n        uint256 length_ = _instaLoanVariables._tokens.length;\\n        for (uint i = 0; i < length_; i++) {\\n            IERC20 token = IERC20(_instaLoanVariables._tokens[i]);\\n            token.safeTransfer(_receiver, _instaLoanVariables._amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers the tokens to the receiver address (amount + fee).\\n     * @notice Transfers the tokens to the receiver address (amount + fee).\\n     * @param _instaLoanVariables struct which includes list of token addresses and amounts.\\n     * @param _fees list of fees for the respective tokens.\\n     * @param _receiver address to which tokens have to be transferred.\\n    */\\n    function safeTransferWithFee(\\n        FlashloanVariables memory _instaLoanVariables,\\n        uint256[] memory _fees,\\n        address _receiver\\n    ) internal {\\n        require(_instaLoanVariables._tokens.length == _instaLoanVariables._amounts.length, \\\"Lengths of parameters not same\\\");\\n        require(_instaLoanVariables._tokens.length == _fees.length, \\\"Lengths of parameters not same\\\");\\n        uint256 length_ = _instaLoanVariables._tokens.length;\\n        for (uint i = 0; i < length_; i++) {\\n            IERC20 token = IERC20(_instaLoanVariables._tokens[i]);\\n            token.safeTransfer(_receiver, _instaLoanVariables._amounts[i] + _fees[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the balances..\\n     * @notice Calculates the balances of the account passed for the tokens.\\n     * @param _tokens list of token addresses to calculate balance for.\\n     * @param _account account to calculate balance for.\\n    */\\n    function calculateBalances(\\n        address[] memory _tokens,\\n        address _account\\n    ) internal view returns (uint256[] memory) {\\n        uint256 _length = _tokens.length;\\n        uint256[] memory balances_ = new uint256[](_length);\\n        for (uint i = 0; i < _length; i++) {\\n            IERC20 token = IERC20(_tokens[i]);\\n            balances_[i] = token.balanceOf(_account);\\n        }\\n        return balances_;\\n    }\\n\\n    /**\\n     * @dev Validates if the receiver sent the correct amounts of funds.\\n     * @notice Validates if the receiver sent the correct amounts of funds.\\n     * @param _instaLoanVariables struct which includes list of initial balances, final balances and fees for the respective tokens.\\n    */\\n    function validateFlashloan(\\n        FlashloanVariables memory _instaLoanVariables\\n    ) internal pure {\\n        for (uint i = 0; i < _instaLoanVariables._iniBals.length; i++) {\\n            require(_instaLoanVariables._iniBals[i] + _instaLoanVariables._instaFees[i] <= _instaLoanVariables._finBals[i], \\\"amount-paid-less\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Validates if token addresses are unique. Just need to check adjacent tokens as the array was sorted first\\n     * @notice Validates if token addresses are unique.\\n     * @param _tokens list of token addresses.\\n    */\\n    function validateTokens(address[] memory _tokens) internal pure {\\n        for (uint i = 0; i < _tokens.length - 1; i++) {\\n            require(_tokens[i] != _tokens[i+1], \\\"non-unique-tokens\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Supply token for the amount to compound.\\n     * @notice Supply token for the amount to compound.\\n     * @param _token token addresses.\\n     * @param _amount amount of token.\\n    */\\n    function compoundSupply(address _token, uint256 _amount) internal {\\n        address[] memory cTokens_ = new address[](1);\\n        if (_token == wEthToken) {\\n            wEth.withdraw(_amount);\\n            CEthInterface cEth_ = CEthInterface(cEthToken);\\n            cEth_.mint{value: _amount}();\\n            cTokens_[0] = cEthToken;\\n        } else {\\n            CTokenInterface cToken_ = CTokenInterface(tokenToCToken[_token]);\\n            // Approved already in addTokenToctoken function\\n            require(cToken_.mint(_amount) == 0, \\\"mint failed\\\");\\n            cTokens_[0] = tokenToCToken[_token];\\n        }\\n        uint[] memory errors_ = troller.enterMarkets(cTokens_);\\n        for(uint i=0; i < errors_.length; i++){\\n            require(errors_[i] == 0, \\\"Comptroller.enterMarkets failed.\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Borrow tokens for the amounts to compound.\\n     * @notice Borrow tokens for the amounts to compound.\\n     * @param _tokens list of token addresses.\\n     * @param _amounts amounts of respective tokens.\\n    */\\n    function compoundBorrow(\\n        address[] memory _tokens,\\n        uint256[] memory _amounts\\n    ) internal {\\n        uint256 length_ = _tokens.length;\\n        for(uint i=0; i < length_; i++) {\\n            if (_tokens[i] == wEthToken) {\\n                CEthInterface cEth = CEthInterface(cEthToken);\\n                require(cEth.borrow(_amounts[i]) == 0, \\\"borrow failed\\\");\\n                wEth.deposit{value: _amounts[i]}();\\n            } else {\\n                CTokenInterface cToken = CTokenInterface(tokenToCToken[_tokens[i]]);\\n                require(cToken.borrow(_amounts[i]) == 0, \\\"borrow failed\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Payback tokens for the amounts to compound.\\n     * @notice Payback tokens for the amounts to compound.\\n     * @param _tokens list of token addresses.\\n     * @param _amounts amounts of respective tokens.\\n    */\\n    function compoundPayback(\\n        address[] memory _tokens,\\n        uint256[] memory _amounts\\n    ) internal {\\n        uint256 length_ = _tokens.length;\\n        for(uint i=0; i < length_; i++) {\\n            if ( _tokens[i] == wEthToken ) {\\n                wEth.withdraw(_amounts[i]);\\n                CEthInterface cToken = CEthInterface(cEthToken);\\n                cToken.repayBorrow{value : _amounts[i]}();\\n            } else {\\n                CTokenInterface cToken = CTokenInterface(tokenToCToken[_tokens[i]]);\\n                // Approved already in addTokenToctoken function\\n                require(cToken.repayBorrow(_amounts[i]) == 0, \\\"repay failed\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Withdraw token from compound.\\n     * @notice Withdraw token from compound.\\n     * @param _token token address.\\n     * @param _amount amount of token.\\n    */\\n    function compoundWithdraw(address _token, uint256 _amount) internal {\\n        if (_token == wEthToken) {\\n            CEthInterface cEth_ = CEthInterface(cEthToken);\\n            require(cEth_.redeemUnderlying(_amount) == 0, \\\"redeem failed\\\");\\n            wEth.deposit{value: _amount}();\\n        } else {\\n            CTokenInterface cToken_ = CTokenInterface(tokenToCToken[_token]);    \\n            require(cToken_.redeemUnderlying(_amount) == 0, \\\"redeem failed\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Supply token to aave.\\n     * @notice Supply token to aave.\\n     * @param _token token address.\\n     * @param _amount amount of token.\\n    */\\n    function aaveSupply(address _token, uint256 _amount) internal {\\n        IERC20 token_ = IERC20(_token);\\n        token_.safeApprove(aaveLendingAddr, _amount);\\n        aaveLending.deposit(_token, _amount, address(this), 3228);\\n        aaveLending.setUserUseReserveAsCollateral(_token, true);\\n    }\\n\\n    /**\\n     * @dev Borrow tokens from aave.\\n     * @notice Borrow tokens from aave.\\n     * @param _tokens list of token addresses.\\n     * @param _amounts list of amounts for respective tokens.\\n    */\\n    function aaveBorrow(\\n        address[] memory _tokens,\\n        uint256[] memory _amounts\\n    ) internal {\\n        uint256 length_ = _tokens.length;\\n        for(uint i=0; i < length_; i++) {\\n            aaveLending.borrow(_tokens[i], _amounts[i], 2, 3228, address(this));\\n        }\\n    }\\n\\n    /**\\n     * @dev Payback tokens to aave.\\n     * @notice Payback tokens to aave.\\n     * @param _tokens list of token addresses.\\n     * @param _amounts list of amounts for respective tokens.\\n    */\\n    function aavePayback(\\n        address[] memory _tokens,\\n        uint256[] memory _amounts\\n    ) internal {\\n        uint256 length = _tokens.length;\\n        for(uint i=0; i < length; i++) {\\n            IERC20 token_ = IERC20(_tokens[i]);\\n            token_.safeApprove(aaveLendingAddr, _amounts[i]);\\n            aaveLending.repay(_tokens[i], _amounts[i], 2, address(this));\\n        }\\n    }\\n\\n    /**\\n     * @dev Withdraw token from aave.\\n     * @notice Wiothdraw token from aave.\\n     * @param _token token address.\\n     * @param _amount amount of token.\\n    */\\n    function aaveWithdraw(address _token, uint256 _amount) internal {\\n        aaveLending.withdraw(_token, _amount, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns fee for the passed route in BPS.\\n     * @notice Returns fee for the passed route in BPS. 1 BPS == 0.01%.\\n     * @param _route route number for flashloan.\\n    */\\n    function calculateFeeBPS(uint256 _route) public view returns (uint256 BPS_) {\\n        if (_route == 1) {\\n            BPS_ = aaveLending.FLASHLOAN_PREMIUM_TOTAL();\\n        } else if (_route == 2 || _route == 3 || _route == 4) {\\n            BPS_ = (makerLending.toll()) / (10 ** 14);\\n        } else if (_route == 5 || _route == 6 || _route == 7) {\\n            BPS_ = (balancerLending.getProtocolFeesCollector().getFlashLoanFeePercentage()) * 100;\\n        } else {\\n            require(false, \\\"Invalid source\\\");\\n        }\\n        \\n        if (BPS_ < InstaFeeBPS) {\\n            BPS_ = InstaFeeBPS;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculate fees for the respective amounts and fee in BPS passed.\\n     * @notice Calculate fees for the respective amounts and fee in BPS passed. 1 BPS == 0.01%.\\n     * @param _amounts list of amounts.\\n     * @param _BPS fee in BPS.\\n    */\\n    function calculateFees(uint256[] memory _amounts, uint256 _BPS) internal pure returns (uint256[] memory) {\\n        uint256 length_ = _amounts.length;\\n        uint256[] memory InstaFees = new uint256[](length_);\\n        for (uint i = 0; i < length_; i++) {\\n            InstaFees[i] = (_amounts[i] * _BPS) / (10 ** 4);\\n        }\\n        return InstaFees;\\n    }\\n\\n    /**\\n     * @dev Sort the tokens and amounts arrays according to token addresses.\\n     * @notice Sort the tokens and amounts arrays according to token addresses.\\n     * @param _tokens list of token addresses.\\n     * @param _amounts list of respective amounts.\\n    */\\n    function bubbleSort(address[] memory _tokens, uint256[] memory _amounts) internal pure returns (address[] memory, uint256[] memory) {\\n        for (uint256 i = 0; i < _tokens.length - 1; i++) {\\n            for( uint256 j = 0; j < _tokens.length - i - 1 ; j++) {\\n                if(_tokens[j] > _tokens[j+1]) {\\n                   (_tokens[j], _tokens[j+1], _amounts[j], _amounts[j+1]) = (_tokens[j+1], _tokens[j], _amounts[j+1], _amounts[j]);\\n                }\\n            }\\n        }\\n        return (_tokens, _amounts);\\n    }\\n\\n    /**\\n     * @dev Returns to wEth amount to be borrowed.\\n     * @notice Returns to wEth amount to be borrowed.\\n    */\\n    function getWEthBorrowAmount() internal view returns (uint256) {\\n        uint256 amount_ = wEth.balanceOf(balancerLendingAddr);\\n        return (amount_ * wethBorrowAmountPercentage) / 100;\\n    }\\n    \\n    /**\\n     * @dev Returns to true if the passed address is a DSA else returns false.\\n     * @notice Returns to true if the passed address is a DSA else returns false.\\n     * @param _account account to check for, if DSA.\\n    */\\n    function checkIfDsa(address _account) internal view returns (bool) {\\n        return instaList.accountID(_account) > 0;\\n    }\\n\\n    /**\\n     * @dev  better checking by double encoding the data.\\n     * @notice better checking by double encoding the data.\\n     * @param data_ data passed.\\n    */\\n    modifier verifyDataHash(bytes memory data_) {\\n        bytes32 dataHash_ = keccak256(data_);\\n        require(dataHash_ == dataHash && dataHash_ != bytes32(0), \\\"invalid-data-hash\\\");\\n        require(status == 2, \\\"already-entered\\\");\\n        dataHash = bytes32(0);\\n        _;\\n        status = 1;\\n    }\\n\\n    /**\\n     * @dev reentrancy gaurd.\\n     * @notice reentrancy gaurd.\\n    */\\n    modifier reentrancy {\\n        require(status == 1, \\\"already-entered\\\");\\n        status = 2;\\n        _;\\n        require(status == 1, \\\"already-entered\\\");\\n    }\\n}\"\r\n    },\r\n    \"contracts/aggregator/mainnet/flashloan/interfaces.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface InstaFlashReceiverInterface {\\n    function executeOperation(\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        address initiator,\\n        bytes calldata _data\\n    ) external returns (bool);\\n}\\n\\ninterface IndexInterface {\\n    function master() external view returns (address);\\n\\n    function list() external view returns (address);\\n}\\n\\ninterface ListInterface {\\n    function accountID(address) external view returns (uint64);\\n}\\n\\ninterface TokenInterface is IERC20 {\\n    function decimals() external view returns (uint256);\\n}\\n\\ninterface CTokenInterface {\\n    function mint(uint256) external returns (uint256);\\n\\n    function redeemUnderlying(uint256) external returns (uint256);\\n\\n    function borrow(uint256) external returns (uint256);\\n\\n    function repayBorrow(uint256) external returns (uint256);\\n\\n    function underlying() external view returns (address);\\n}\\n\\ninterface CEthInterface {\\n    function mint() external payable;\\n\\n    function redeemUnderlying(uint) external returns (uint);\\n\\n    function borrow(uint) external returns (uint);\\n\\n    function repayBorrow() external payable;\\n}\\n\\ninterface IWeth is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\\ninterface Comptroller {\\n    function enterMarkets(address[] calldata)\\n        external\\n        returns (uint256[] memory);\\n    function markets(address) external view returns (bool, uint, bool);\\n    function getAllMarkets() external view returns (CTokenInterface[] memory);\\n}\\n\\ninterface IAaveLending {\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint256);\\n\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 rateMode,\\n        address onBehalfOf\\n    ) external;\\n\\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral)\\n        external;\\n}\\n\\ninterface IERC3156FlashLender {\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    function flashFee(address token, uint256 amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function flashLoan(\\n        InstaFlashReceiverInterface receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n\\n    function toll() external view returns (uint256);\\n}\\n\\ninterface ProtocolFeesCollector {\\n    function getFlashLoanFeePercentage() external view returns (uint256);\\n}\\n\\ninterface IBalancerLending {\\n    function flashLoan(\\n        InstaFlashReceiverInterface recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n    function getProtocolFeesCollector() external view returns (ProtocolFeesCollector);\\n}\\n\"\r\n    },\r\n    \"contracts/aggregator/mainnet/flashloan/variables.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n\\nimport { \\n    IndexInterface,\\n    ListInterface,\\n    TokenInterface,\\n    IAaveLending,\\n    IERC3156FlashLender, \\n    Comptroller,\\n    IBalancerLending,\\n    IWeth\\n} from \\\"./interfaces.sol\\\";\\n\\ncontract ConstantVariables {\\n\\n    address public constant wEthToken = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    IWeth public constant wEth = IWeth(wEthToken);\\n\\n    address public constant aaveLendingAddr = 0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9;\\n    IAaveLending public constant aaveLending = IAaveLending(aaveLendingAddr);\\n\\n    address public constant makerLendingAddr = 0x1EB4CF3A948E7D72A198fe073cCb8C7a948cD853;\\n    IERC3156FlashLender public constant makerLending = IERC3156FlashLender(makerLendingAddr);\\n\\n    address public constant balancerLendingAddr = 0xBA12222222228d8Ba445958a75a0704d566BF2C8;\\n    IBalancerLending public constant balancerLending = IBalancerLending(balancerLendingAddr);\\n\\n    address public constant daiToken = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address public constant cDaiToken = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\\n    uint256 public constant daiBorrowAmount = 500000000000000000000000000;\\n\\n    address public constant cEthToken = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\\n    uint256 public constant wethBorrowAmountPercentage = 80;\\n\\n    address public constant comptrollerAddr = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\\n    Comptroller public constant troller = Comptroller(comptrollerAddr);\\n\\n    address public constant treasuryAddr = 0x28849D2b63fA8D361e5fc15cB8aBB13019884d09;\\n    address private constant instaListAddr = 0x4c8a1BEb8a87765788946D6B19C6C6355194AbEb;\\n    ListInterface public constant instaList = ListInterface(instaListAddr);\\n\\n    uint256 public constant InstaFeeBPS = 5; // in BPS; 1 BPS = 0.01%\\n\\n}\\n\\ncontract Variables is ConstantVariables{\\n\\n    bytes32 internal dataHash;\\n    // if 1 then can enter flashlaon, if 2 then callback\\n    uint internal status;\\n\\n    struct FlashloanVariables {\\n        address[] _tokens;\\n        uint256[] _amounts;\\n        uint256[] _iniBals;\\n        uint256[] _finBals;\\n        uint256[] _instaFees;\\n    }\\n\\n    mapping(address => address) public tokenToCToken;\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"route\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"LogFlashloan\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"InstaFeeBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveLending\",\"outputs\":[{\"internalType\":\"contract IAaveLending\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveLendingAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_cTokens\",\"type\":\"address[]\"}],\"name\":\"addTokenToCToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerLending\",\"outputs\":[{\"internalType\":\"contract IBalancerLending\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerLendingAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cDaiToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cEthToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_route\",\"type\":\"uint256\"}],\"name\":\"calculateFeeBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"BPS_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptrollerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiBorrowAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_route\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoutes\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"routes_\",\"type\":\"uint16[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_ctokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instaList\",\"outputs\":[{\"internalType\":\"contract ListInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makerLending\",\"outputs\":[{\"internalType\":\"contract IERC3156FlashLender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makerLendingAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onFlashLoan\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fees\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"receiveFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToCToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"transferFeeToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troller\",\"outputs\":[{\"internalType\":\"contract Comptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wEth\",\"outputs\":[{\"internalType\":\"contract IWeth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wEthToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethBorrowAmountPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"InstaFlashAggregator","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}