{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function percent(uint value,uint numerator, uint denominator, uint precision) internal pure  returns(uint quotient) {\r\n        uint _numerator  = numerator * 10 ** (precision+1);\r\n        uint _quotient =  ((_numerator / denominator) + 5) / 10;\r\n        return (value*_quotient/1000000000000000000);\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n  // Empty internal constructor, to prevent people from mistakenly deploying\r\n  // an instance of this contract, which should be used via inheritance.\r\n  constructor () internal { }\r\n\r\n  function _msgSender() internal view returns (address payable) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context{\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor () internal {\r\n    address msgSender = 0x54CB357f8b221BaC33B325d5FE78Fd0f906c1872;//_msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns ( address ) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract TokenICO is Ownable{\r\n    \r\n    address public tokenA;\r\n    address public tokenB;\r\n    uint256 public priceETH;\r\n    uint256 public priceUSDT;\r\n    uint256 public tokensSold;\r\n    Token a ;\r\n    Token b ;\r\n    Token usdt;\r\n\r\n    \r\n    constructor(address TokenContractA, address TokenContractB,address USDTcontract) public{\r\n        a = Token(TokenContractA);\r\n        b = Token(TokenContractB);\r\n        usdt = Token(USDTcontract);        \r\n\r\n        tokenA=TokenContractA;\r\n        tokenB=TokenContractB;\r\n    }\r\n    \r\n    function() payable external {\r\n        purchaseTokens();\r\n    }\r\n    \r\n\r\n    //**************************ETH*********************\r\n    function purchaseTokens() payable public{       \r\n        uint256 weiAmount = msg.value;\r\n        address buyer = msg.sender;\r\n        uint256 tokenAmount;\r\n\r\n        if(tokensSold < 30000*1e18){\r\n            require(msg.value >= 37*1e15, \"Minimum buy is 1 token\"); \r\n            priceETH = 37*1e15;\r\n        }\r\n        else if(tokensSold >= 30000*1e18){\r\n            require(msg.value >= 43*1e15, \"Minimum buy is 1 token\"); \r\n            priceETH = 43*1e15;\r\n        }\r\n        else  if(tokensSold >= 45000*1e18){\r\n            require(msg.value >= 49*1e15, \"Minimum buy is 1 token\"); \r\n            priceETH = 49*1e15;\r\n        }\r\n\r\n        tokenAmount = (weiAmount*1e18/priceETH); \r\n        tokensSold = tokensSold + tokenAmount;\r\n\r\n        require(a.balanceOf(address(this)) >=tokenAmount , \"Tokens Not Available in contract, contact Admin!\");\r\n        require(b.balanceOf(address(this)) >= tokenAmount*5000 , \" Free Tokens Not Available in contract, contact Admin!\" );\r\n\r\n        a.transfer(buyer, tokenAmount); \r\n        b.transfer(buyer, tokenAmount*5000);\r\n\r\n        forwardETH(); // to ICO admin        \r\n    }\r\n\r\n    function forwardETH() internal {\r\n        address payable ICOadmin = address(uint160(owner()));\r\n        ICOadmin.transfer(address(this).balance);\r\n    }\r\n\r\n    function withdrawFunds() public{\r\n        require(msg.sender==owner(),\"Only owner can Withdraw!\");\r\n        forwardETH();\r\n    }\r\n\r\n    //********************** USDT*******************\r\n    function purchaseTokensWithUSDT(uint256 amount) public{   \r\n        uint256 tokenAmount;\r\n        \r\n        if(tokensSold<30000*1e18){  \r\n            require(amount >= 150*1e6,\"Minimum buy is 1 token\");     \r\n            priceUSDT = 150*1e18;\r\n        }\r\n\r\n        else if(tokensSold>=30000*1e18){  \r\n            require(amount >= 175*1e6,\"Minimum buy is 1 token\");     \r\n            priceUSDT = 175*1e18;\r\n        }\r\n\r\n        else  if(tokensSold>=45000*1e18){\r\n            require(amount >= 200*1e6,\"Minimum buy is 1 token\");     \r\n            priceUSDT = 200*1e18;\r\n        }\r\n        \r\n        tokenAmount = (amount*1e30/priceUSDT);          \r\n        tokensSold = tokensSold + tokenAmount;  \r\n\r\n        require(a.balanceOf(address(this)) >=tokenAmount , \"Tokens Not Available in contract, contact Admin!\");\r\n        require(b.balanceOf(address(this)) >= tokenAmount*5000 , \" Free Tokens Not Available in contract, contact Admin!\" );\r\n\r\n        a.transfer(msg.sender, tokenAmount); \r\n        b.transfer(msg.sender, tokenAmount*5000);\r\n\r\n        usdt.transferFrom(msg.sender,address(this),amount);\r\n        forwardUSDT();\r\n    }\r\n\r\n    function forwardUSDT() internal{\r\n        usdt.transfer(owner(),usdt.balanceOf(address(this)));\r\n    }\r\n\r\n    function withdrawUSDTFunds() public{\r\n        require(msg.sender==owner(),\"Only owner can update contract!\");\r\n        require(usdt.balanceOf(address(this)) >=0 , \"USDT Not Available in contract, contact Admin!\");        \r\n        usdt.transfer(msg.sender,usdt.balanceOf(address(this)));\r\n    }\r\n    //***********************************************\r\n    \r\n    function updatePrice(uint256 tokenPrice) public {\r\n        require(msg.sender==owner(),\"Only owner can update contract!\");\r\n        priceETH=tokenPrice;\r\n    }\r\n        \r\n    function withdrawRemainingTokens() public{\r\n         require(msg.sender==owner(),\"Only owner can update contract!\");\r\n         a.transfer(msg.sender,a.balanceOf(address(this)));\r\n         b.transfer(msg.sender,b.balanceOf(address(this)));\r\n    }\r\n        \r\n    function calculateTokenAmount(uint256 amount) external view returns (uint256){\r\n        uint tokens = SafeMath.mul(amount,priceETH);\r\n        return tokens;\r\n    }\r\n    \r\n    function tokenPrice() external view returns (uint256){\r\n        return priceETH;\r\n    }\r\n      \r\n    function Round() external view returns (uint256){\r\n         if(tokensSold<30000*1e18){  \r\n            return 1;\r\n        }\r\n        else if(tokensSold>=30000*1e18){  \r\n            return 2;\r\n        }\r\n        else  if(tokensSold>=45000*1e18){\r\n            return 3;\r\n        }\r\n    }\r\n    \r\n    \r\n}\r\n\r\ncontract Token {\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool);\r\n    function transfer(address recipient, uint256 amount) public returns (bool);\r\n    function balanceOf(address account) external view returns (uint256)  ;\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"TokenContractA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"TokenContractB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"USDTcontract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"Round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchaseTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"purchaseTokensWithUSDT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRemainingTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawUSDTFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenICO","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008d8dcbdeaa1a01bbaf965196202d1b4a734003ad0000000000000000000000000728f4c6896926b0f4eb72782d5926d61bec6ab6000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://4619a9a8852374c3d2d8fb1d185d43dda8efa8ce4d0f22d2808befa5981b6ac2"}]}