{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICreditLimitModel.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\n/**\\n * @title CreditLimitModel Interface\\n *  @dev Calculate the user's credit line based on the trust he receives from the vouchees.\\n */\\ninterface ICreditLimitModel {\\n    struct LockedInfo {\\n        address staker;\\n        uint256 vouchingAmount;\\n        uint256 lockedAmount;\\n        uint256 availableStakingAmount;\\n    }\\n\\n    function isCreditLimitModel() external pure returns (bool);\\n\\n    function effectiveNumber() external returns (uint256);\\n\\n    /**\\n     * @notice Calculates the staker locked amount\\n     * @return Member credit limit\\n     */\\n    function getLockedAmount(\\n        LockedInfo[] calldata vouchAmountList,\\n        address staker,\\n        uint256 amount,\\n        bool isIncrease\\n    ) external pure returns (uint256);\\n\\n    /**\\n     * @notice Calculates the member credit limit by vouchs\\n     * @return Member credit limit\\n     */\\n    function getCreditLimit(uint256[] calldata vouchs) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/user/SumOfTrust.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../interfaces/ICreditLimitModel.sol\\\";\\n\\ncontract SumOfTrust is Ownable, ICreditLimitModel {\\n    bool public constant override isCreditLimitModel = true;\\n    uint256 public override effectiveNumber;\\n\\n    constructor(uint256 effectiveNumber_) {\\n        effectiveNumber = effectiveNumber_;\\n    }\\n\\n    function getCreditLimit(uint256[] memory vouchs) public view override returns (uint256) {\\n        uint256 vouchLength = vouchs.length;\\n        if (vouchLength >= effectiveNumber) {\\n            uint256 limit;\\n            for (uint256 i = 0; i < vouchLength; i++) {\\n                limit += vouchs[i];\\n            }\\n\\n            return limit;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function getLockedAmount(\\n        LockedInfo[] memory array,\\n        address account,\\n        uint256 amount,\\n        bool isIncrease\\n    ) public pure override returns (uint256) {\\n        uint256 arrLength = array.length;\\n        if (arrLength == 0) return 0;\\n\\n        uint256 remaining = amount;\\n        uint256 newLockedAmount;\\n        if (isIncrease) {\\n            array = _sortArray(array, true);\\n            for (uint256 i = 0; i < arrLength; i++) {\\n                uint256 remainingVouchingAmount;\\n                if (array[i].vouchingAmount > array[i].lockedAmount) {\\n                    remainingVouchingAmount = array[i].vouchingAmount - array[i].lockedAmount;\\n                } else {\\n                    remainingVouchingAmount = 0;\\n                }\\n\\n                if (remainingVouchingAmount > array[i].availableStakingAmount) {\\n                    if (array[i].availableStakingAmount > remaining) {\\n                        newLockedAmount = array[i].lockedAmount + remaining;\\n                        remaining = 0;\\n                    } else {\\n                        newLockedAmount = array[i].lockedAmount + array[i].availableStakingAmount;\\n                        remaining = remaining - array[i].availableStakingAmount;\\n                    }\\n                } else {\\n                    if (remainingVouchingAmount > remaining) {\\n                        newLockedAmount = array[i].lockedAmount + remaining;\\n                        remaining = 0;\\n                    } else {\\n                        newLockedAmount = array[i].lockedAmount + remainingVouchingAmount;\\n                        remaining -= remainingVouchingAmount;\\n                    }\\n                }\\n\\n                if (account == array[i].staker) {\\n                    return newLockedAmount;\\n                }\\n            }\\n        } else {\\n            array = _sortArray(array, false);\\n            for (uint256 i = 0; i < arrLength; i++) {\\n                if (array[i].lockedAmount > remaining) {\\n                    newLockedAmount = array[i].lockedAmount - remaining;\\n                    remaining = 0;\\n                } else {\\n                    newLockedAmount = 0;\\n                    remaining -= array[i].lockedAmount;\\n                }\\n\\n                if (account == array[i].staker) {\\n                    return newLockedAmount;\\n                }\\n            }\\n        }\\n\\n        return 0;\\n    }\\n\\n    function setEffectNumber(uint256 number) external onlyOwner {\\n        effectiveNumber = number;\\n    }\\n\\n    //use bubble\\n    function _sortArray(LockedInfo[] memory arr, bool isPositive) private pure returns (LockedInfo[] memory) {\\n        uint256 length = arr.length;\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            for (uint256 j = i + 1; j < length; j++) {\\n                if (isPositive) {\\n                    if (arr[i].vouchingAmount < arr[j].vouchingAmount) {\\n                        LockedInfo memory temp = arr[j];\\n                        arr[j] = arr[i];\\n                        arr[i] = temp;\\n                    }\\n                } else {\\n                    if (arr[i].vouchingAmount > arr[j].vouchingAmount) {\\n                        LockedInfo memory temp = arr[j];\\n                        arr[j] = arr[i];\\n                        arr[i] = temp;\\n                    }\\n                }\\n            }\\n        }\\n\\n        return arr;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"effectiveNumber_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"effectiveNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"vouchs\",\"type\":\"uint256[]\"}],\"name\":\"getCreditLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vouchingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableStakingAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ICreditLimitModel.LockedInfo[]\",\"name\":\"array\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isIncrease\",\"type\":\"bool\"}],\"name\":\"getLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCreditLimitModel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"setEffectNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SumOfTrust","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000003","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}