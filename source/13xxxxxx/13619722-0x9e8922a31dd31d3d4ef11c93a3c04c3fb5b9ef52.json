{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/curve/SwishBasePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"../libraries/Errors.sol\\\";\\nimport \\\"../interfaces/ISwishPool.sol\\\";\\nimport \\\"../interfaces/ISwishPoolManager.sol\\\";\\nimport \\\"../interfaces/convex/IConvexBooster.sol\\\";\\nimport \\\"../interfaces/convex/IBaseRewardPool.sol\\\";\\nimport \\\"../interfaces/convex/IConvexToken.sol\\\";\\nimport \\\"../interfaces/convex/IVirtualBalanceRewardPool.sol\\\";\\nimport \\\"./SwishBaseMasterchef.sol\\\";\\n\\ncontract SwishBasePool is\\n    SwishBaseMasterchef,\\n    ReentrancyGuardUpgradeable,\\n    ISwishPool\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    event Deposit(address indexed user, uint256 amount);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event Harvest(address indexed user);\\n\\n    address public constant CVX = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;\\n    address public constant CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52;\\n    address public constant CONVEX_BOOSTER =\\n        0xF403C135812408BFbE8713b5A23a04b3D48AAE31;\\n\\n    address public bent;\\n\\n    address public poolManager;\\n    address public override lpToken;\\n    uint256 public cvxPoolId;\\n    address public crvRewards;\\n    uint256 internal lastRewardBlock; // bent reward last block\\n\\n    string public name;\\n\\n    ISwishPoolManager.FeeInfo public feeInfo;\\n\\n    function initialize(\\n        address _poolManager,\\n        string memory _name,\\n        uint256 _cvxPoolId,\\n        address[] memory _extraRewardTokens\\n    ) public initializer {\\n        __ReentrancyGuard_init();\\n\\n        poolManager = _poolManager;\\n        cvxPoolId = _cvxPoolId;\\n        name = _name;\\n\\n        bent = ISwishPoolManager(poolManager).rewardToken();\\n        (\\n            feeInfo.bentStaker,\\n            feeInfo.bentStakerFee,\\n            feeInfo.cvxStaker,\\n            feeInfo.cvxStakerFee\\n        ) = ISwishPoolManager(poolManager).feeInfo();\\n\\n        rewardPools[0].rewardToken = IERC20Upgradeable(CRV);\\n        rewardPools[1].rewardToken = IERC20Upgradeable(CVX);\\n\\n        (lpToken, , , crvRewards, , ) = IConvexBooster(CONVEX_BOOSTER).poolInfo(\\n            _cvxPoolId\\n        );\\n        uint256 extraRewardsLength = _extraRewardTokens.length;\\n        for (uint256 i = 0; i < extraRewardsLength; i++) {\\n            rewardPools[i + 2].rewardToken = IERC20Upgradeable(\\n                _extraRewardTokens[i]\\n            );\\n        }\\n        rewardPoolsCount = 2 + extraRewardsLength;\\n    }\\n\\n    function deposit(uint256 _amount) external nonReentrant {\\n        require(_amount != 0, Errors.ZERO_AMOUNT);\\n\\n        _updateAccPerShare(true);\\n\\n        uint256 _before = IERC20(lpToken).balanceOf(address(this));\\n        IERC20Upgradeable(lpToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        uint256 _after = IERC20(lpToken).balanceOf(address(this));\\n        // Additional check for deflationary tokens\\n        _amount = _after - _before;\\n\\n        _mint(msg.sender, _amount);\\n\\n        // deposit to the convex booster\\n        IERC20Upgradeable(lpToken).safeApprove(CONVEX_BOOSTER, 0);\\n        IERC20Upgradeable(lpToken).safeApprove(CONVEX_BOOSTER, _amount);\\n        IConvexBooster(CONVEX_BOOSTER).deposit(cvxPoolId, _amount, true);\\n\\n        _updateUserRewardDebt();\\n\\n        emit Deposit(msg.sender, _amount);\\n    }\\n\\n    function withdraw(uint256 _amount) external nonReentrant {\\n        require(\\n            balanceOf[msg.sender] >= _amount && _amount != 0,\\n            Errors.INVALID_AMOUNT\\n        );\\n\\n        _updateAccPerShare(true);\\n\\n        _burn(msg.sender, _amount);\\n\\n        // withdraw from the convex booster\\n        IBaseRewardPool(crvRewards).withdrawAndUnwrap(_amount, false);\\n\\n        // transfer to msg.sender\\n        IERC20Upgradeable(lpToken).safeTransfer(msg.sender, _amount);\\n\\n        _updateUserRewardDebt();\\n\\n        emit Withdraw(msg.sender, _amount);\\n    }\\n\\n    function harvest() external virtual nonReentrant {\\n        _updateAccPerShare(true);\\n\\n        require(_harvest(), Errors.NO_PENDING_REWARD);\\n\\n        _updateUserRewardDebt();\\n\\n        emit Harvest(msg.sender);\\n    }\\n\\n    function updateFee() external nonReentrant {\\n        _harvestFromConvex();\\n        _updateAccPerShare(false);\\n        (\\n            feeInfo.bentStaker,\\n            feeInfo.bentStakerFee,\\n            feeInfo.cvxStaker,\\n            feeInfo.cvxStakerFee\\n        ) = ISwishPoolManager(poolManager).feeInfo();\\n    }\\n\\n    function pendingReward(address user)\\n        external\\n        view\\n        returns (uint256[] memory pending)\\n    {\\n        uint256 _rewardPoolsCount = rewardPoolsCount;\\n        pending = new uint256[](_rewardPoolsCount + 1);\\n\\n        uint256[] memory addedRewards = _calcAddedRewards();\\n        for (uint256 i = 0; i < _rewardPoolsCount; i++) {\\n            uint256 reward = super.pendingReward(i, user, addedRewards[i]);\\n            if (i == 1) {\\n                // calculate bent rewards amount based on CVX reward\\n                pending[0] = _calcProRataRewards(bent, reward, 4);\\n            }\\n            pending[i + 1] = reward;\\n        }\\n    }\\n\\n    // Internal Functions\\n\\n    function _updateAccPerShare(bool withdrawReward) internal {\\n        uint256[] memory addedRewards = _calcAddedRewards();\\n        uint256 _rewardPoolsCount = rewardPoolsCount;\\n        for (uint256 i = 0; i < _rewardPoolsCount; i++) {\\n            super.updateAccPerShare(i, addedRewards[i]);\\n            if (withdrawReward) {\\n                super.withdrawReward(i, msg.sender);\\n            }\\n        }\\n    }\\n\\n    function _calcAddedRewards()\\n        internal\\n        view\\n        returns (uint256[] memory addedRewards)\\n    {\\n        uint256 _rewardPoolsCount = rewardPoolsCount;\\n        uint256 crvLpStakerFee = 10000 -\\n            feeInfo.bentStakerFee -\\n            feeInfo.cvxStakerFee;\\n\\n        addedRewards = new uint256[](_rewardPoolsCount);\\n        addedRewards[0] =\\n            (IBaseRewardPool(crvRewards).earned(address(this)) *\\n                crvLpStakerFee) /\\n            10000;\\n        addedRewards[1] =\\n            (_calcProRataRewards(CVX, addedRewards[0], 1) * crvLpStakerFee) /\\n            10000;\\n\\n        uint256 j = 0;\\n        uint256 extraRewardsLength = IBaseRewardPool(crvRewards)\\n            .extraRewardsLength();\\n        for (uint256 i = 0; i < extraRewardsLength; i++) {\\n            IVirtualBalanceRewardPool pool = IVirtualBalanceRewardPool(\\n                IBaseRewardPool(crvRewards).extraRewards(i)\\n            );\\n            address extraToken = pool.rewardToken();\\n            uint256 earned = (pool.earned(address(this)) * crvLpStakerFee) /\\n                10000;\\n            if (extraToken == CRV) {\\n                addedRewards[0] += earned;\\n            } else if (extraToken == CVX) {\\n                addedRewards[1] += earned;\\n            } else {\\n                addedRewards[2 + j] += earned;\\n                j++;\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < _rewardPoolsCount; i++) {\\n            addedRewards[i] += rewardPools[i].rewardToken.balanceOf(\\n                address(this)\\n            );\\n            uint256 rewardsBefore = rewardPools[i].lastReward +\\n                rewardPools[i].pendingReward;\\n            if (addedRewards[i] > rewardsBefore) {\\n                addedRewards[i] -= rewardsBefore;\\n            } else {\\n                // this can happen because cvx rewards is pro rata to crv rewards amount.\\n                addedRewards[i] = 0;\\n            }\\n        }\\n    }\\n\\n    function _updateUserRewardDebt() internal {\\n        uint256 _rewardPoolsCount = rewardPoolsCount;\\n        for (uint256 i = 0; i < _rewardPoolsCount; i++) {\\n            super.updateUserRewardDebt(i, msg.sender);\\n        }\\n    }\\n\\n    function _harvest() internal returns (bool harvested) {\\n        uint256 _rewardPoolsCount = rewardPoolsCount;\\n        for (uint256 i = 0; i < _rewardPoolsCount; i++) {\\n            uint256 harvestAmount = super.harvest(i, msg.sender);\\n            if (harvestAmount > 0) {\\n                if (i == 1) {\\n                    // CVX\\n                    ISwishPoolManager(poolManager).mint(\\n                        msg.sender,\\n                        harvestAmount\\n                    );\\n                }\\n\\n                if (\\n                    rewardPools[i].rewardToken.balanceOf(address(this)) <\\n                    harvestAmount\\n                ) {\\n                    // this will happen only once.\\n                    _harvestFromConvex();\\n                }\\n\\n                rewardPools[i].rewardToken.safeTransfer(\\n                    msg.sender,\\n                    harvestAmount\\n                );\\n                harvested = true;\\n            }\\n        }\\n    }\\n\\n    function _harvestFromConvex() internal {\\n        uint256 i;\\n        uint256[] memory claimBalances = new uint256[](rewardPoolsCount);\\n        // save balances before claim\\n        for (i = 0; i < rewardPoolsCount; i++) {\\n            claimBalances[i] = rewardPools[i].rewardToken.balanceOf(\\n                address(this)\\n            );\\n        }\\n\\n        IBaseRewardPool(crvRewards).getReward(address(this), true);\\n\\n        for (i = 0; i < rewardPoolsCount; i++) {\\n            claimBalances[i] =\\n                rewardPools[i].rewardToken.balanceOf(address(this)) -\\n                claimBalances[i];\\n\\n            if (claimBalances[i] > 0) {\\n                if (feeInfo.bentStakerFee > 0) {\\n                    // bentStakerFee to bentStaker\\n                    rewardPools[i].rewardToken.safeTransfer(\\n                        feeInfo.bentStaker,\\n                        (claimBalances[i] * feeInfo.bentStakerFee) / 10000\\n                    );\\n                }\\n\\n                if (feeInfo.cvxStakerFee > 0) {\\n                    // cvxStakerFee to cvxStaker\\n                    rewardPools[i].rewardToken.safeTransfer(\\n                        feeInfo.cvxStaker,\\n                        (claimBalances[i] * feeInfo.cvxStakerFee) / 10000\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice from convex/bent token contract\\n     */\\n    function _calcProRataRewards(\\n        address token,\\n        uint256 baseEarned,\\n        uint256 multiplier\\n    ) internal view returns (uint256) {\\n        uint256 supply = IConvexToken(token).totalSupply();\\n        if (supply == 0) {\\n            return baseEarned;\\n        }\\n        uint256 totalCliffs = IConvexToken(token).totalCliffs();\\n        uint256 cliff = supply / IConvexToken(token).reductionPerCliff();\\n\\n        if (cliff < totalCliffs) {\\n            uint256 reduction = totalCliffs - cliff;\\n            uint256 _amount = baseEarned;\\n\\n            _amount = ((_amount * reduction) * multiplier) / totalCliffs;\\n\\n            //supply cap check\\n            uint256 amtTillMax = IConvexToken(token).maxSupply() - supply;\\n            if (_amount > amtTillMax) {\\n                _amount = amtTillMax;\\n            }\\n            return _amount;\\n        }\\n        return 0;\\n    }\\n\\n    function _mint(address _user, uint256 _amount) internal {\\n        balanceOf[_user] += _amount;\\n        totalSupply += _amount;\\n    }\\n\\n    function _burn(address _user, uint256 _amount) internal {\\n        balanceOf[_user] -= _amount;\\n        totalSupply -= _amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n    string public constant ZERO_ADDRESS = \\\"100\\\";\\n    string public constant ZERO_AMOUNT = \\\"101\\\";\\n    string public constant INVALID_ADDRESS = \\\"102\\\";\\n    string public constant INVALID_AMOUNT = \\\"103\\\";\\n    string public constant NO_PENDING_REWARD = \\\"104\\\";\\n    string public constant INVALID_PID = \\\"105\\\";\\n    string public constant INVALID_POOL_ADDRESS = \\\"106\\\";\\n    string public constant UNAUTHORIZED = \\\"107\\\";\\n    string public constant ALREADY_EXISTS = \\\"108\\\";\\n    string public constant SAME_ALLOCPOINT = \\\"109\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISwishPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ISwishPool {\\n    function lpToken() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISwishPoolManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ISwishPoolManager {\\n    struct FeeInfo {\\n        address bentStaker;\\n        uint256 bentStakerFee; // 10000 for denominator\\n        address cvxStaker;\\n        uint256 cvxStakerFee; // 10000 for denominator\\n    }\\n\\n    function feeInfo()\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            address,\\n            uint256\\n        );\\n\\n    function rewardToken() external view returns (address);\\n\\n    function mint(address user, uint256 cvxAmount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/convex/IConvexBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IConvexBooster {\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function deposit(\\n        uint256,\\n        uint256,\\n        bool\\n    ) external returns (bool);\\n\\n    function depositAll(uint256, bool) external returns (bool);\\n\\n    function withdraw(uint256, uint256) external returns (bool);\\n\\n    function withdrawAll(uint256) external returns (bool);\\n\\n    function rewardClaimed(\\n        uint256,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/convex/IBaseRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IBaseRewardPool {\\n    function getReward(address, bool) external returns (bool);\\n\\n    function getReward() external returns (bool);\\n\\n    function earned(address) external view returns (uint256);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function extraRewards(uint256) external view returns (address);\\n\\n    function withdrawAndUnwrap(uint256, bool) external returns (bool);\\n\\n    function extraRewardsLength() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/convex/IConvexToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IConvexToken is IERC20 {\\n    function reductionPerCliff() external view returns (uint256);\\n\\n    function totalCliffs() external view returns (uint256);\\n\\n    function maxSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/convex/IVirtualBalanceRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IVirtualBalanceRewardPool {\\n    function getReward(address) external;\\n\\n    function getReward() external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function earned(address) external view returns (uint256);\\n\\n    function rewardToken() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/curve/SwishBaseMasterchef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nabstract contract SwishBaseMasterchef {\\n    struct PoolData {\\n        IERC20Upgradeable rewardToken;\\n        uint256 accRewardPerShare; // Accumulated Rewards per share, times 1e36. See below.\\n        uint256 lastReward;\\n        uint256 curReward;\\n        uint256 pendingReward;\\n    }\\n\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balanceOf;\\n\\n    uint256 public rewardPoolsCount;\\n    mapping(uint256 => PoolData) public rewardPools;\\n    mapping(uint256 => mapping(address => uint256)) internal userRewardDebt;\\n    mapping(uint256 => mapping(address => uint256)) internal userPendingRewards;\\n\\n    function updateAccPerShare(uint256 pid, uint256 addedReward) internal {\\n        PoolData storage pool = rewardPools[pid];\\n\\n        if (totalSupply == 0) {\\n            pool.accRewardPerShare = block.number;\\n            return;\\n        }\\n\\n        if (addedReward > 0) {\\n            pool.accRewardPerShare += (addedReward * (1e36)) / totalSupply;\\n        }\\n\\n        pool.lastReward = pool.lastReward + addedReward;\\n    }\\n\\n    function withdrawReward(uint256 pid, address user) internal {\\n        PoolData storage pool = rewardPools[pid];\\n        uint256 pending = ((balanceOf[user] * pool.accRewardPerShare) / 1e36) -\\n            userRewardDebt[pid][user];\\n\\n        if (pending > 0) {\\n            userPendingRewards[pid][user] += pending;\\n            pool.pendingReward += pending;\\n        }\\n\\n        pool.lastReward -= pending;\\n    }\\n\\n    function harvest(uint256 pid, address user)\\n        internal\\n        returns (uint256 harvested)\\n    {\\n        harvested = userPendingRewards[pid][user];\\n        if (harvested > 0) {\\n            userPendingRewards[pid][user] = 0;\\n            rewardPools[pid].pendingReward -= harvested;\\n        }\\n    }\\n\\n    function updateUserRewardDebt(uint256 pid, address user) internal {\\n        userRewardDebt[pid][user] =\\n            (balanceOf[user] * rewardPools[pid].accRewardPerShare) /\\n            1e36;\\n    }\\n\\n    function pendingReward(\\n        uint256 pid,\\n        address user,\\n        uint256 addedReward\\n    ) internal view returns (uint256) {\\n        if (totalSupply == 0) return 0;\\n\\n        uint256 newAccRewardPerShare = rewardPools[pid].accRewardPerShare +\\n            ((addedReward * 1e36) / totalSupply);\\n\\n        return\\n            ((balanceOf[user] * newAccRewardPerShare) / 1e36) -\\n            userRewardDebt[pid][user] +\\n            userPendingRewards[pid][user];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONVEX_BOOSTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CVX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bentStaker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bentStakerFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"cvxStaker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cvxStakerFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolManager\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_cvxPoolId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_extraRewardTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pending\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPools\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"curReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPoolsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SwishBasePool","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}