{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/mocks/MockTreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\nlibrary SafeMath {\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n  }\\n\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, \\\"SafeMath: division by zero\\\");\\n  }\\n\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    return c;\\n  }\\n}\\n\\nlibrary Address {\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies in extcodesize, which returns 0 for contracts in\\n    // construction, since the code is only stored at the end of the\\n    // constructor execution.\\n\\n    uint256 size;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      size := extcodesize(account)\\n    }\\n    return size > 0;\\n  }\\n\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return _functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  function _functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 weiValue,\\n    string memory errorMessage\\n  ) private returns (bytes memory) {\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.call{value: weiValue}(\\n      data\\n    );\\n    if (success) {\\n      return returndata;\\n    } else {\\n      if (returndata.length > 0) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n\\n  function _verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) private pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      if (returndata.length > 0) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\\ninterface IOwnable {\\n  function manager() external view returns (address);\\n\\n  function renounceManagement() external;\\n\\n  function pushManagement(address newOwner_) external;\\n\\n  function pullManagement() external;\\n}\\n\\ncontract Ownable is IOwnable {\\n  address internal _owner;\\n  address internal _newOwner;\\n\\n  event OwnershipPushed(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n  event OwnershipPulled(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n  constructor() {\\n    _owner = msg.sender;\\n    emit OwnershipPushed(address(0), _owner);\\n  }\\n\\n  function manager() public view override returns (address) {\\n    return _owner;\\n  }\\n\\n  modifier onlyManager() {\\n    require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  function renounceManagement() public virtual override onlyManager {\\n    emit OwnershipPushed(_owner, address(0));\\n    _owner = address(0);\\n  }\\n\\n  function pushManagement(address newOwner_)\\n    public\\n    virtual\\n    override\\n    onlyManager\\n  {\\n    require(newOwner_ != address(0), \\\"Ownable: new owner is the zero address\\\");\\n    emit OwnershipPushed(_owner, newOwner_);\\n    _newOwner = newOwner_;\\n  }\\n\\n  function pullManagement() public virtual override {\\n    require(msg.sender == _newOwner, \\\"Ownable: must be new owner to pull\\\");\\n    emit OwnershipPulled(_owner, _newOwner);\\n    _owner = _newOwner;\\n  }\\n}\\n\\ninterface IERC20 {\\n  function decimals() external view returns (uint8);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transfer.selector, to, value)\\n    );\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n    );\\n  }\\n\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    bytes memory returndata = address(token).functionCall(\\n      data,\\n      \\\"SafeERC20: low-level call failed\\\"\\n    );\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(\\n        abi.decode(returndata, (bool)),\\n        \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n      );\\n    }\\n  }\\n}\\n\\ninterface IERC20Mintable {\\n  function mint(uint256 amount_) external;\\n\\n  function mint(address account_, uint256 ammount_) external;\\n}\\n\\ninterface IOHMERC20 {\\n  function burnFrom(address account_, uint256 amount_) external;\\n}\\n\\ninterface IBondCalculator {\\n  function valuation(address pair_, uint256 amount_)\\n    external\\n    view\\n    returns (uint256 _value);\\n}\\n\\ncontract MockOlympusTreasury is Ownable {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  event Deposit(address indexed token, uint256 amount, uint256 value);\\n  event Withdrawal(address indexed token, uint256 amount, uint256 value);\\n  event CreateDebt(\\n    address indexed debtor,\\n    address indexed token,\\n    uint256 amount,\\n    uint256 value\\n  );\\n  event RepayDebt(\\n    address indexed debtor,\\n    address indexed token,\\n    uint256 amount,\\n    uint256 value\\n  );\\n  event ReservesManaged(address indexed token, uint256 amount);\\n  event ReservesUpdated(uint256 indexed totalReserves);\\n  event ReservesAudited(uint256 indexed totalReserves);\\n  event RewardsMinted(\\n    address indexed caller,\\n    address indexed recipient,\\n    uint256 amount\\n  );\\n  event ChangeQueued(MANAGING indexed managing, address queued);\\n  event ChangeActivated(\\n    MANAGING indexed managing,\\n    address activated,\\n    bool result\\n  );\\n\\n  enum MANAGING {\\n    RESERVEDEPOSITOR,\\n    RESERVESPENDER,\\n    RESERVETOKEN,\\n    RESERVEMANAGER,\\n    LIQUIDITYDEPOSITOR,\\n    LIQUIDITYTOKEN,\\n    LIQUIDITYMANAGER,\\n    DEBTOR,\\n    REWARDMANAGER,\\n    SOHM\\n  }\\n\\n  address public immutable OHM;\\n  uint256 public immutable blocksNeededForQueue;\\n\\n  address[] public reserveTokens; // Push only, beware false-positives.\\n  mapping(address => bool) public isReserveToken;\\n  mapping(address => uint256) public reserveTokenQueue; // Delays changes to mapping.\\n\\n  address[] public reserveDepositors; // Push only, beware false-positives. Only for viewing.\\n  mapping(address => bool) public isReserveDepositor;\\n  mapping(address => uint256) public reserveDepositorQueue; // Delays changes to mapping.\\n\\n  address[] public reserveSpenders; // Push only, beware false-positives. Only for viewing.\\n  mapping(address => bool) public isReserveSpender;\\n  mapping(address => uint256) public reserveSpenderQueue; // Delays changes to mapping.\\n\\n  address[] public liquidityTokens; // Push only, beware false-positives.\\n  mapping(address => bool) public isLiquidityToken;\\n  mapping(address => uint256) public LiquidityTokenQueue; // Delays changes to mapping.\\n\\n  address[] public liquidityDepositors; // Push only, beware false-positives. Only for viewing.\\n  mapping(address => bool) public isLiquidityDepositor;\\n  mapping(address => uint256) public LiquidityDepositorQueue; // Delays changes to mapping.\\n\\n  mapping(address => address) public bondCalculator; // bond calculator for liquidity token\\n\\n  address[] public reserveManagers; // Push only, beware false-positives. Only for viewing.\\n  mapping(address => bool) public isReserveManager;\\n  mapping(address => uint256) public ReserveManagerQueue; // Delays changes to mapping.\\n\\n  address[] public liquidityManagers; // Push only, beware false-positives. Only for viewing.\\n  mapping(address => bool) public isLiquidityManager;\\n  mapping(address => uint256) public LiquidityManagerQueue; // Delays changes to mapping.\\n\\n  address[] public debtors; // Push only, beware false-positives. Only for viewing.\\n  mapping(address => bool) public isDebtor;\\n  mapping(address => uint256) public debtorQueue; // Delays changes to mapping.\\n  mapping(address => uint256) public debtorBalance;\\n\\n  address[] public rewardManagers; // Push only, beware false-positives. Only for viewing.\\n  mapping(address => bool) public isRewardManager;\\n  mapping(address => uint256) public rewardManagerQueue; // Delays changes to mapping.\\n\\n  address public sOHM;\\n  uint256 public sOHMQueue; // Delays change to sOHM address\\n\\n  uint256 public totalReserves; // Risk-free value of all assets\\n  uint256 public totalDebt;\\n\\n  constructor(\\n    address _OHM,\\n    address _DAI,\\n    address _Frax,\\n    //address _OHMDAI,\\n    uint256 _blocksNeededForQueue\\n  ) {\\n    require(_OHM != address(0));\\n    OHM = _OHM;\\n\\n    isReserveToken[_DAI] = true;\\n    reserveTokens.push(_DAI);\\n\\n    isReserveToken[_Frax] = true;\\n    reserveTokens.push(_Frax);\\n\\n    // isLiquidityToken[ _OHMDAI ] = true;\\n    // liquidityTokens.push( _OHMDAI );\\n\\n    blocksNeededForQueue = _blocksNeededForQueue;\\n  }\\n\\n  /**\\n        @notice allow approved address to deposit an asset for OHM\\n        @param _amount uint\\n        @param _token address\\n        @param _profit uint\\n        @return send_ uint\\n     */\\n  function deposit(\\n    uint256 _amount,\\n    address _token,\\n    uint256 _profit\\n  ) external returns (uint256 send_) {\\n    require(isReserveToken[_token] || isLiquidityToken[_token], \\\"Not accepted\\\");\\n    IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n    if (isReserveToken[_token]) {\\n      require(isReserveDepositor[msg.sender], \\\"Not approved\\\");\\n    } else {\\n      require(isLiquidityDepositor[msg.sender], \\\"Not approved\\\");\\n    }\\n\\n    uint256 value = valueOfToken(_token, _amount);\\n    (_token, _amount);\\n    // mint OHM needed and store amount of rewards for distribution\\n    send_ = value.sub(_profit);\\n    IERC20Mintable(OHM).mint(msg.sender, send_);\\n\\n    totalReserves = totalReserves.add(value);\\n    emit ReservesUpdated(totalReserves);\\n\\n    emit Deposit(_token, _amount, value);\\n  }\\n\\n  /**\\n        @notice allow approved address to burn OHM for reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n  function withdraw(uint256 _amount, address _token) external {\\n    require(isReserveToken[_token], \\\"Not accepted\\\"); // Only reserves can be used for redemptions\\n    require(isReserveSpender[msg.sender] == true, \\\"Not approved\\\");\\n\\n    uint256 value = valueOfToken(_token, _amount);\\n    IOHMERC20(OHM).burnFrom(msg.sender, value);\\n\\n    totalReserves = totalReserves.sub(value);\\n    emit ReservesUpdated(totalReserves);\\n\\n    IERC20(_token).safeTransfer(msg.sender, _amount);\\n\\n    emit Withdrawal(_token, _amount, value);\\n  }\\n\\n  /**\\n        @notice allow approved address to borrow reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n  function incurDebt(uint256 _amount, address _token) external {\\n    require(isDebtor[msg.sender], \\\"Not approved\\\");\\n    require(isReserveToken[_token], \\\"Not accepted\\\");\\n\\n    uint256 value = valueOfToken(_token, _amount);\\n\\n    uint256 maximumDebt = IERC20(sOHM).balanceOf(msg.sender); // Can only borrow against sOHM held\\n    uint256 availableDebt = maximumDebt.sub(debtorBalance[msg.sender]);\\n    require(value <= availableDebt, \\\"Exceeds debt limit\\\");\\n\\n    debtorBalance[msg.sender] = debtorBalance[msg.sender].add(value);\\n    totalDebt = totalDebt.add(value);\\n\\n    totalReserves = totalReserves.sub(value);\\n    emit ReservesUpdated(totalReserves);\\n\\n    IERC20(_token).transfer(msg.sender, _amount);\\n\\n    emit CreateDebt(msg.sender, _token, _amount, value);\\n  }\\n\\n  /**\\n        @notice allow approved address to repay borrowed reserves with reserves\\n        @param _amount uint\\n        @param _token address\\n     */\\n  function repayDebtWithReserve(uint256 _amount, address _token) external {\\n    require(isDebtor[msg.sender], \\\"Not approved\\\");\\n    require(isReserveToken[_token], \\\"Not accepted\\\");\\n\\n    IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n    uint256 value = valueOfToken(_token, _amount);\\n    debtorBalance[msg.sender] = debtorBalance[msg.sender].sub(value);\\n    totalDebt = totalDebt.sub(value);\\n\\n    totalReserves = totalReserves.add(value);\\n    emit ReservesUpdated(totalReserves);\\n\\n    emit RepayDebt(msg.sender, _token, _amount, value);\\n  }\\n\\n  /**\\n        @notice allow approved address to repay borrowed reserves with OHM\\n        @param _amount uint\\n     */\\n  function repayDebtWithOHM(uint256 _amount) external {\\n    require(isDebtor[msg.sender], \\\"Not approved\\\");\\n\\n    IOHMERC20(OHM).burnFrom(msg.sender, _amount);\\n\\n    debtorBalance[msg.sender] = debtorBalance[msg.sender].sub(_amount);\\n    totalDebt = totalDebt.sub(_amount);\\n\\n    emit RepayDebt(msg.sender, OHM, _amount, _amount);\\n  }\\n\\n  /**\\n        @notice allow approved address to withdraw assets\\n        @param _token address\\n        @param _amount uint\\n     */\\n  function manage(address _token, uint256 _amount) external {\\n    if (isLiquidityToken[_token]) {\\n      require(isLiquidityManager[msg.sender], \\\"Not approved\\\");\\n    } else {\\n      require(isReserveManager[msg.sender], \\\"Not approved\\\");\\n    }\\n\\n    uint256 value = valueOfToken(_token, _amount);\\n    (_token, _amount);\\n    require(value <= excessReserves(), \\\"Insufficient reserves\\\");\\n\\n    totalReserves = totalReserves.sub(value);\\n    emit ReservesUpdated(totalReserves);\\n\\n    IERC20(_token).safeTransfer(msg.sender, _amount);\\n\\n    emit ReservesManaged(_token, _amount);\\n  }\\n\\n  /**\\n        @notice send epoch reward to staking contract\\n     */\\n  function mintRewards(address _recipient, uint256 _amount) external {\\n    require(isRewardManager[msg.sender], \\\"Not approved\\\");\\n    require(_amount <= excessReserves(), \\\"Insufficient reserves\\\");\\n\\n    IERC20Mintable(OHM).mint(_recipient, _amount);\\n\\n    emit RewardsMinted(msg.sender, _recipient, _amount);\\n  }\\n\\n  /**\\n        @notice returns excess reserves not backing tokens\\n        @return uint\\n     */\\n  function excessReserves() public view returns (uint256) {\\n    return totalReserves.sub(IERC20(OHM).totalSupply().sub(totalDebt));\\n  }\\n\\n  /**\\n        @notice takes inventory of all tracked assets\\n        @notice always consolidate to recognized reserves before audit\\n     */\\n  function auditReserves() external onlyManager {\\n    uint256 reserves;\\n    for (uint256 i = 0; i < reserveTokens.length; i++) {\\n      reserves = reserves.add(\\n        valueOfToken(\\n          reserveTokens[i],\\n          IERC20(reserveTokens[i]).balanceOf(address(this))\\n        )\\n      );\\n    }\\n    for (uint256 i = 0; i < liquidityTokens.length; i++) {\\n      reserves = reserves.add(\\n        valueOfToken(\\n          liquidityTokens[i],\\n          IERC20(liquidityTokens[i]).balanceOf(address(this))\\n        )\\n      );\\n    }\\n    totalReserves = reserves;\\n    emit ReservesUpdated(reserves);\\n    emit ReservesAudited(reserves);\\n  }\\n\\n  /**\\n        @notice returns OHM valuation of asset\\n        @param _token address\\n        @param _amount uint\\n        @return value_ uint\\n     */\\n  function valueOfToken(address _token, uint256 _amount)\\n    public\\n    view\\n    returns (uint256 value_)\\n  {\\n    if (isReserveToken[_token]) {\\n      // convert amount to match OHM decimals\\n      value_ = _amount.mul(10**IERC20(OHM).decimals()).div(\\n        10**IERC20(_token).decimals()\\n      );\\n    } else if (isLiquidityToken[_token]) {\\n      value_ = IBondCalculator(bondCalculator[_token]).valuation(\\n        _token,\\n        _amount\\n      );\\n    }\\n  }\\n\\n  /**\\n        @notice queue address to change boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @return bool\\n     */\\n  function queue(MANAGING _managing, address _address)\\n    external\\n    onlyManager\\n    returns (bool)\\n  {\\n    require(_address != address(0));\\n    if (_managing == MANAGING.RESERVEDEPOSITOR) {\\n      // 0\\n      reserveDepositorQueue[_address] = block.number.add(blocksNeededForQueue);\\n    } else if (_managing == MANAGING.RESERVESPENDER) {\\n      // 1\\n      reserveSpenderQueue[_address] = block.number.add(blocksNeededForQueue);\\n    } else if (_managing == MANAGING.RESERVETOKEN) {\\n      // 2\\n      reserveTokenQueue[_address] = block.number.add(blocksNeededForQueue);\\n    } else if (_managing == MANAGING.RESERVEMANAGER) {\\n      // 3\\n      ReserveManagerQueue[_address] = block.number.add(\\n        blocksNeededForQueue.mul(2)\\n      );\\n    } else if (_managing == MANAGING.LIQUIDITYDEPOSITOR) {\\n      // 4\\n      LiquidityDepositorQueue[_address] = block.number.add(\\n        blocksNeededForQueue\\n      );\\n    } else if (_managing == MANAGING.LIQUIDITYTOKEN) {\\n      // 5\\n      LiquidityTokenQueue[_address] = block.number.add(blocksNeededForQueue);\\n    } else if (_managing == MANAGING.LIQUIDITYMANAGER) {\\n      // 6\\n      LiquidityManagerQueue[_address] = block.number.add(\\n        blocksNeededForQueue.mul(2)\\n      );\\n    } else if (_managing == MANAGING.DEBTOR) {\\n      // 7\\n      debtorQueue[_address] = block.number.add(blocksNeededForQueue);\\n    } else if (_managing == MANAGING.REWARDMANAGER) {\\n      // 8\\n      rewardManagerQueue[_address] = block.number.add(blocksNeededForQueue);\\n    } else if (_managing == MANAGING.SOHM) {\\n      // 9\\n      sOHMQueue = block.number.add(blocksNeededForQueue);\\n    } else return false;\\n\\n    emit ChangeQueued(_managing, _address);\\n    return true;\\n  }\\n\\n  /**\\n        @notice verify queue then set boolean in mapping\\n        @param _managing MANAGING\\n        @param _address address\\n        @param _calculator address\\n        @return bool\\n     */\\n  function toggle(\\n    MANAGING _managing,\\n    address _address,\\n    address _calculator\\n  ) external onlyManager returns (bool) {\\n    require(_address != address(0));\\n    bool result;\\n    if (_managing == MANAGING.RESERVEDEPOSITOR) {\\n      // 0\\n      if (requirements(reserveDepositorQueue, isReserveDepositor, _address)) {\\n        reserveDepositorQueue[_address] = 0;\\n        if (!listContains(reserveDepositors, _address)) {\\n          reserveDepositors.push(_address);\\n        }\\n      }\\n      result = !isReserveDepositor[_address];\\n      isReserveDepositor[_address] = result;\\n    } else if (_managing == MANAGING.RESERVESPENDER) {\\n      // 1\\n      if (requirements(reserveSpenderQueue, isReserveSpender, _address)) {\\n        reserveSpenderQueue[_address] = 0;\\n        if (!listContains(reserveSpenders, _address)) {\\n          reserveSpenders.push(_address);\\n        }\\n      }\\n      result = !isReserveSpender[_address];\\n      isReserveSpender[_address] = result;\\n    } else if (_managing == MANAGING.RESERVETOKEN) {\\n      // 2\\n      if (requirements(reserveTokenQueue, isReserveToken, _address)) {\\n        reserveTokenQueue[_address] = 0;\\n        if (!listContains(reserveTokens, _address)) {\\n          reserveTokens.push(_address);\\n        }\\n      }\\n      result = !isReserveToken[_address];\\n      isReserveToken[_address] = result;\\n    } else if (_managing == MANAGING.RESERVEMANAGER) {\\n      // 3\\n      if (requirements(ReserveManagerQueue, isReserveManager, _address)) {\\n        reserveManagers.push(_address);\\n        ReserveManagerQueue[_address] = 0;\\n        if (!listContains(reserveManagers, _address)) {\\n          reserveManagers.push(_address);\\n        }\\n      }\\n      result = !isReserveManager[_address];\\n      isReserveManager[_address] = result;\\n    } else if (_managing == MANAGING.LIQUIDITYDEPOSITOR) {\\n      // 4\\n      if (\\n        requirements(LiquidityDepositorQueue, isLiquidityDepositor, _address)\\n      ) {\\n        liquidityDepositors.push(_address);\\n        LiquidityDepositorQueue[_address] = 0;\\n        if (!listContains(liquidityDepositors, _address)) {\\n          liquidityDepositors.push(_address);\\n        }\\n      }\\n      result = !isLiquidityDepositor[_address];\\n      isLiquidityDepositor[_address] = result;\\n    } else if (_managing == MANAGING.LIQUIDITYTOKEN) {\\n      // 5\\n      if (requirements(LiquidityTokenQueue, isLiquidityToken, _address)) {\\n        LiquidityTokenQueue[_address] = 0;\\n        if (!listContains(liquidityTokens, _address)) {\\n          liquidityTokens.push(_address);\\n        }\\n      }\\n      result = !isLiquidityToken[_address];\\n      isLiquidityToken[_address] = result;\\n      bondCalculator[_address] = _calculator;\\n    } else if (_managing == MANAGING.LIQUIDITYMANAGER) {\\n      // 6\\n      if (requirements(LiquidityManagerQueue, isLiquidityManager, _address)) {\\n        LiquidityManagerQueue[_address] = 0;\\n        if (!listContains(liquidityManagers, _address)) {\\n          liquidityManagers.push(_address);\\n        }\\n      }\\n      result = !isLiquidityManager[_address];\\n      isLiquidityManager[_address] = result;\\n    } else if (_managing == MANAGING.DEBTOR) {\\n      // 7\\n      if (requirements(debtorQueue, isDebtor, _address)) {\\n        debtorQueue[_address] = 0;\\n        if (!listContains(debtors, _address)) {\\n          debtors.push(_address);\\n        }\\n      }\\n      result = !isDebtor[_address];\\n      isDebtor[_address] = result;\\n    } else if (_managing == MANAGING.REWARDMANAGER) {\\n      // 8\\n      if (requirements(rewardManagerQueue, isRewardManager, _address)) {\\n        rewardManagerQueue[_address] = 0;\\n        if (!listContains(rewardManagers, _address)) {\\n          rewardManagers.push(_address);\\n        }\\n      }\\n      result = !isRewardManager[_address];\\n      isRewardManager[_address] = result;\\n    } else if (_managing == MANAGING.SOHM) {\\n      // 9\\n      sOHMQueue = 0;\\n      sOHM = _address;\\n      result = true;\\n    } else return false;\\n\\n    emit ChangeActivated(_managing, _address, result);\\n    return true;\\n  }\\n\\n  /**\\n        @notice checks requirements and returns altered structs\\n        @param queue_ mapping( address => uint )\\n        @param status_ mapping( address => bool )\\n        @param _address address\\n        @return bool \\n     */\\n  function requirements(\\n    mapping(address => uint256) storage queue_,\\n    mapping(address => bool) storage status_,\\n    address _address\\n  ) internal view returns (bool) {\\n    if (!status_[_address]) {\\n      require(queue_[_address] != 0, \\\"Must queue\\\");\\n      require(queue_[_address] <= block.number, \\\"Queue not expired\\\");\\n      return true;\\n    }\\n    return false;\\n  }\\n\\n  /**\\n        @notice checks array to ensure against duplicate\\n        @param _list address[]\\n        @param _token address\\n        @return bool\\n     */\\n  function listContains(address[] storage _list, address _token)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    for (uint256 i = 0; i < _list.length; i++) {\\n      if (_list[i] == _token) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_OHM\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DAI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Frax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blocksNeededForQueue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum MockOlympusTreasury.MANAGING\",\"name\":\"managing\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"activated\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"ChangeActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum MockOlympusTreasury.MANAGING\",\"name\":\"managing\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"queued\",\"type\":\"address\"}],\"name\":\"ChangeQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CreateDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RepayDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesAudited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReservesManaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LiquidityDepositorQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LiquidityManagerQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LiquidityTokenQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OHM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ReserveManagerQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auditReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksNeededForQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bondCalculator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtorBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtorQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"debtors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"send_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excessReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"incurDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDebtor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidityDepositor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidityManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidityToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReserveDepositor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReserveManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReserveSpender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReserveToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRewardManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidityDepositors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidityManagers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidityTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"manage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"pushManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MockOlympusTreasury.MANAGING\",\"name\":\"_managing\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"queue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repayDebtWithOHM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"repayDebtWithReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reserveDepositorQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reserveDepositors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reserveManagers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reserveSpenderQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reserveSpenders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reserveTokenQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reserveTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardManagerQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardManagers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sOHM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sOHMQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MockOlympusTreasury.MANAGING\",\"name\":\"_managing\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_calculator\",\"type\":\"address\"}],\"name\":\"toggle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"valueOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MockOlympusTreasury","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000a09c0e98a252965a2b6bf2994e2d2c020af0f89a00000000000000000000000099d8a9c45b2eca8864373a26d1459e3dff1e17f300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}