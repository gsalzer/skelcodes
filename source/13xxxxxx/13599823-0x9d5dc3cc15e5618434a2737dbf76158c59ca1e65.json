{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-11-03\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2021-11-01\r\n*/\r\n\r\n// File: contracts/Proxy/IERC1538.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/// @title ERC1538 Transparent Contract Standard\r\n/// @dev Required interface\r\n///  Note: the ERC-165 identifier for this interface is 0x61455567\r\ninterface IERC1538 {\r\n\r\n    /// @dev This emits when one or a set of functions are updated in a transparent contract.\r\n    ///  The message string should give a short description of the change and why\r\n    ///  the change was made.\r\n    event CommitMessage(string message);\r\n\r\n    /// @dev This emits for each function that is updated in a transparent contract.\r\n    ///  functionId is the bytes4 of the keccak256 of the function signature.\r\n    ///  oldDelegate is the delegate contract address of the old delegate contract if\r\n    ///  the function is being replaced or removed.\r\n    ///  oldDelegate is the zero value address(0) if a function is being added for the\r\n    ///  first time.\r\n    ///  newDelegate is the delegate contract address of the new delegate contract if\r\n    ///  the function is being added for the first time or if the function is being\r\n    ///  replaced.\r\n    ///  newDelegate is the zero value address(0) if the function is being removed.\r\n    event FunctionUpdate(bytes4 indexed functionId, address indexed oldDelegate, address indexed newDelegate, string functionSignature);\r\n\r\n    /// @notice Updates functions in a transparent contract.\r\n    /// @dev If the value of _delegate is zero then the functions specified\r\n    ///  in _functionSignatures are removed.\r\n    ///  If the value of _delegate is a delegate contract address then the functions\r\n    ///  specified in _functionSignatures will be delegated to that address.\r\n    /// @param _delegate The address of a delegate contract to delegate to or zero\r\n    ///        to remove functions.\r\n    /// @param _functionSignatures A list of function signatures listed one after the other\r\n    /// @param _commitMessage A short description of the change and why it is made\r\n    ///        This message is passed to the CommitMessage event.\r\n    function updateContract(address _delegate, string calldata _functionSignatures, string calldata _commitMessage) external;\r\n}\r\n\r\n// File: contracts/Proxy/ProxyBaseStorage.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n/**\r\n * @title ProxyBaseStorage\r\n * @dev Defining base storage for the proxy contract.\r\n */\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\ncontract ProxyBaseStorage {\r\n\r\n    //////////////////////////////////////////// VARS /////////////////////////////////////////////\r\n\r\n    // maps functions to the delegate contracts that execute the functions.\r\n    // funcId => delegate contract\r\n    mapping(bytes4 => address) public delegates;\r\n\r\n    // array of function signatures supported by the contract.\r\n    bytes[] public funcSignatures;\r\n\r\n    // maps each function signature to its position in the funcSignatures array.\r\n    // signature => index+1\r\n    mapping(bytes => uint256) internal funcSignatureToIndex;\r\n\r\n    // proxy address of itself, can be used for cross-delegate calls but also safety checking.\r\n    address proxy;\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n}\r\n\r\n// File: contracts/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function mint(address recipient, uint256 amount) external returns(bool);\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n      function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function blindBox(address seller, string calldata tokenURI, bool flag, address to, string calldata ownerId) external returns (uint256);\r\n    function mintAliaForNonCrypto(uint256 price, address from) external returns (bool);\r\n    function nonCryptoNFTVault() external returns(address);\r\n    function mainPerecentage() external returns(uint256);\r\n    function authorPercentage() external returns(uint256);\r\n    function platformPerecentage() external returns(uint256);\r\n    function updateAliaBalance(string calldata stringId, uint256 amount) external returns(bool);\r\n    function getSellDetail(uint256 tokenId) external view returns (address, uint256, uint256, address, uint256, uint256, uint256);\r\n    function getNonCryptoWallet(string calldata ownerId) external view returns(uint256);\r\n    function getNonCryptoOwner(uint256 tokenId) external view returns(string memory);\r\n    function adminOwner(address _address) external view returns(bool);\r\n     function getAuthor(uint256 tokenIdFunction) external view returns (address);\r\n     function _royality(uint256 tokenId) external view returns (uint256);\r\n     function getrevenueAddressBlindBox(string calldata info) external view returns(address);\r\n     function getboxNameByToken(uint256 token) external view returns(string memory);\r\n    //Revenue share\r\n    function addNonCryptoAuthor(string calldata artistId, uint256 tokenId, bool _isArtist) external returns(bool);\r\n    function transferAliaArtist(address buyer, uint256 price, address nftVaultAddress, uint256 tokenId ) external returns(bool);\r\n    function checkArtistOwner(string calldata artistId, uint256 tokenId) external returns(bool);\r\n    function checkTokenAuthorIsArtist(uint256 tokenId) external returns(bool);\r\n    function withdraw(uint) external;\r\n    function deposit() payable external;\r\n    // function approve(address spender, uint256 rawAmount) external;\r\n\r\n    // BlindBox ref:https://noborderz.slack.com/archives/C0236PBG601/p1633942033011800?thread_ts=1633941154.010300&cid=C0236PBG601\r\n    function isSellable (string calldata name) external view returns(bool);\r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n\r\n    function burn (uint256 tokenId) external;\r\n\r\n}\r\n\r\n// File: contracts/INFT.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n// import \"../openzeppelin-solidity/contracts/token/ERC721/IERC721Full.sol\";\r\n\r\ninterface INFT {\r\n    function transferFromAdmin(address owner, address to, uint256 tokenId) external;\r\n    function mintWithTokenURI(address to, string calldata tokenURI) external returns (uint256);\r\n    function getAuthor(uint256 tokenIdFunction) external view returns (address);\r\n    function updateTokenURI(uint256 tokenIdT, string calldata uriT) external;\r\n    //\r\n    function mint(address to, string calldata tokenURI) external returns (uint256);\r\n    function transferOwnership(address newOwner) external;\r\n    function ownerOf(uint256 tokenId) external view returns(address);\r\n    function transferFrom(address owner, address to, uint256 tokenId) external;\r\n}\r\n\r\n// File: contracts/IFactory.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract IFactory {\r\n    function create(string calldata name_, string calldata symbol_, address owner_) external returns(address);\r\n    function getCollections(address owner_) external view returns(address [] memory);\r\n}\r\n\r\n// File: contracts/LPInterface.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface LPInterface {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n   \r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/Proxy/DexStorage.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n/**\r\n * @title DexStorage\r\n * @dev Defining dex storage for the proxy contract.\r\n */\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\ncontract DexStorage {\r\n  using SafeMath for uint256;\r\n   address x; // dummy variable, never set or use its value in any logic contracts. It keeps garbage value & append it with any value set on it.\r\n   IERC20 ALIA;\r\n   INFT XNFT;\r\n   IFactory factory;\r\n   IERC20 OldNFTDex;\r\n   IERC20 BUSD;\r\n   IERC20 BNB;\r\n   struct RDetails {\r\n       address _address;\r\n       uint256 percentage;\r\n   }\r\n  struct AuthorDetails {\r\n    address _address;\r\n    uint256 royalty;\r\n    string ownerId;\r\n    bool isSecondry;\r\n  }\r\n  // uint256[] public sellList; // this violates generlization as not tracking tokenIds agains nftContracts/collections but ignoring as not using it in logic anywhere (uncommented)\r\n  mapping (uint256 => mapping(address => AuthorDetails)) internal _tokenAuthors;\r\n  mapping (address => bool) public adminOwner;\r\n  address payable public platform;\r\n  address payable public authorVault;\r\n  uint256 internal platformPerecentage;\r\n  struct fixedSell {\r\n  //  address nftContract; // adding to support multiple NFT contracts buy/sell \r\n    address seller;\r\n    uint256 price;\r\n    uint256 timestamp;\r\n    bool isDollar;\r\n    uint256 currencyType;\r\n  }\r\n  // stuct for auction\r\n  struct auctionSell {\r\n    address seller;\r\n    address nftContract;\r\n    address bidder;\r\n    uint256 minPrice;\r\n    uint256 startTime;\r\n    uint256 endTime;\r\n    uint256 bidAmount;\r\n    bool isDollar;\r\n    uint256 currencyType;\r\n    // address nftAddress;\r\n  }\r\n\r\n  \r\n  // tokenId => nftContract => fixedSell\r\n  mapping (uint256 => mapping (address  => fixedSell)) internal _saleTokens;\r\n  mapping(address => bool) public _supportNft;\r\n  // tokenId => nftContract => auctionSell\r\n  mapping(uint256 => mapping ( address => auctionSell)) internal _auctionTokens;\r\n  address payable public nonCryptoNFTVault;\r\n  // tokenId => nftContract => ownerId\r\n  mapping (uint256=> mapping (address => string)) internal _nonCryptoOwners;\r\n  struct balances{\r\n    uint256 bnb;\r\n    uint256 Alia;\r\n    uint256 BUSD;\r\n  }\r\n  mapping (string => balances) internal _nonCryptoWallet;\r\n \r\n  LPInterface LPAlia;\r\n  LPInterface LPBNB;\r\n  uint256 public adminDiscount;\r\n  address admin;\r\n  mapping (string => address) internal revenueAddressBlindBox;\r\n  mapping (uint256=>string) internal boxNameByToken;\r\n   bool public collectionConfig;\r\n  uint256 public countCopy;\r\n  mapping (uint256=> mapping( address => mapping(uint256 => bool))) _allowedCurrencies;\r\n  IERC20 token;\r\n//   struct offer {\r\n//       address _address;\r\n//       string ownerId;\r\n//       uint256 currencyType;\r\n//       uint256 price;\r\n//   }\r\n//   struct offers {\r\n//       uint256 count;\r\n//       mapping (uint256 => offer) _offer;\r\n//   }\r\n//   mapping(uint256 => mapping(address => offers)) _offers;\r\n  uint256[] allowedArray;\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/Proxy/DexProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n/**\r\n * @title ProxyReceiver Contract\r\n * @dev Handles forwarding calls to receiver delegates while offering transparency of updates.\r\n *      Follows ERC-1538 standard.\r\n *\r\n *    NOTE: Not recommended for direct use in a production contract, as no security control.\r\n *          Provided as simple example only.\r\n */\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\ncontract DexProxy is ProxyBaseStorage, DexStorage, IERC1538, Ownable {\r\n\r\n\r\n    constructor() public {\r\n\r\n        proxy = address(this);\r\n\r\n        //Adding ERC1538 updateContract function\r\n        bytes memory signature = \"updateContract(address,string,string)\";\r\n        bytes4 funcId = bytes4(keccak256(signature));\r\n        delegates[funcId] = proxy;\r\n        funcSignatures.push(signature);\r\n        funcSignatureToIndex[signature] = funcSignatures.length;\r\n        emit FunctionUpdate(funcId, address(0), proxy, string(signature));\r\n        emit CommitMessage(\"Added ERC1538 updateContract function at contract creation\");\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function() external payable {\r\n        if (msg.sig == bytes4(0) && msg.value != uint(0)) { // skipping ethers/BNB received to delegate\r\n            return;\r\n        }\r\n        address delegate = delegates[msg.sig];\r\n        require(delegate != address(0), \"Function does not exist.\");\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, 0, calldatasize)\r\n            let result := delegatecall(gas, delegate, ptr, calldatasize, 0, 0)\r\n            let size := returndatasize\r\n            returndatacopy(ptr, 0, size)\r\n            switch result\r\n            case 0 {revert(ptr, size)}\r\n            default {return (ptr, size)}\r\n        }\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    /// @notice Updates functions in a transparent contract.\r\n    /// @dev If the value of _delegate is zero then the functions specified\r\n    ///  in _functionSignatures are removed.\r\n    ///  If the value of _delegate is a delegate contract address then the functions\r\n    ///  specified in _functionSignatures will be delegated to that address.\r\n    /// @param _delegate The address of a delegate contract to delegate to or zero\r\n    /// @param _functionSignatures A list of function signatures listed one after the other\r\n    /// @param _commitMessage A short description of the change and why it is made\r\n    ///        This message is passed to the CommitMessage event.\r\n    function updateContract(address _delegate, string calldata _functionSignatures, string calldata _commitMessage) onlyOwner external {\r\n        // pos is first used to check the size of the delegate contract.\r\n        // After that pos is the current memory location of _functionSignatures.\r\n        // It is used to move through the characters of _functionSignatures\r\n        uint256 pos;\r\n        if(_delegate != address(0)) {\r\n            assembly {\r\n                pos := extcodesize(_delegate)\r\n            }\r\n            require(pos > 0, \"_delegate address is not a contract and is not address(0)\");\r\n        }\r\n\r\n        // creates a bytes version of _functionSignatures\r\n        bytes memory signatures = bytes(_functionSignatures);\r\n        // stores the position in memory where _functionSignatures ends.\r\n        uint256 signaturesEnd;\r\n        // stores the starting position of a function signature in _functionSignatures\r\n        uint256 start;\r\n        assembly {\r\n            pos := add(signatures,32)\r\n            start := pos\r\n            signaturesEnd := add(pos,mload(signatures))\r\n        }\r\n        // the function id of the current function signature\r\n        bytes4 funcId;\r\n        // the delegate address that is being replaced or address(0) if removing functions\r\n        address oldDelegate;\r\n        // the length of the current function signature in _functionSignatures\r\n        uint256 num;\r\n        // the current character in _functionSignatures\r\n        uint256 char;\r\n        // the position of the current function signature in the funcSignatures array\r\n        uint256 index;\r\n        // the last position in the funcSignatures array\r\n        uint256 lastIndex;\r\n        // parse the _functionSignatures string and handle each function\r\n        for (; pos < signaturesEnd; pos++) {\r\n            assembly {char := byte(0,mload(pos))}\r\n            // 0x29 == )\r\n            if (char == 0x29) {\r\n                pos++;\r\n                num = (pos - start);\r\n                start = pos;\r\n                assembly {\r\n                    mstore(signatures,num)\r\n                }\r\n                funcId = bytes4(keccak256(signatures));\r\n                oldDelegate = delegates[funcId];\r\n                if(_delegate == address(0)) {\r\n                    index = funcSignatureToIndex[signatures];\r\n                    require(index != 0, \"Function does not exist.\");\r\n                    index--;\r\n                    lastIndex = funcSignatures.length - 1;\r\n                    if (index != lastIndex) {\r\n                        funcSignatures[index] = funcSignatures[lastIndex];\r\n                        funcSignatureToIndex[funcSignatures[lastIndex]] = index + 1;\r\n                    }\r\n                    funcSignatures.length--;\r\n                    delete funcSignatureToIndex[signatures];\r\n                    delete delegates[funcId];\r\n                    emit FunctionUpdate(funcId, oldDelegate, address(0), string(signatures));\r\n                }\r\n                else if (funcSignatureToIndex[signatures] == 0) {\r\n                    require(oldDelegate == address(0), \"FuncId clash.\");\r\n                    delegates[funcId] = _delegate;\r\n                    funcSignatures.push(signatures);\r\n                    funcSignatureToIndex[signatures] = funcSignatures.length;\r\n                    emit FunctionUpdate(funcId, address(0), _delegate, string(signatures));\r\n                }\r\n                else if (delegates[funcId] != _delegate) {\r\n                    delegates[funcId] = _delegate;\r\n                    emit FunctionUpdate(funcId, oldDelegate, _delegate, string(signatures));\r\n\r\n                }\r\n                assembly {signatures := add(signatures,num)}\r\n            }\r\n        }\r\n        emit CommitMessage(_commitMessage);\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_supportNft\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funcSignatures\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countCopy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_delegate\",\"type\":\"address\"},{\"name\":\"_functionSignatures\",\"type\":\"string\"},{\"name\":\"_commitMessage\",\"type\":\"string\"}],\"name\":\"updateContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectionConfig\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonCryptoNFTVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"delegates\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminDiscount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"CommitMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"functionId\",\"type\":\"bytes4\"},{\"indexed\":true,\"name\":\"oldDelegate\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newDelegate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"functionSignature\",\"type\":\"string\"}],\"name\":\"FunctionUpdate\",\"type\":\"event\"}]","ContractName":"DexProxy","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://bea3c43cf5529399c6c6e7f8bb72473511f2c3fbe79ae4a1b332e9778191165b"}]}