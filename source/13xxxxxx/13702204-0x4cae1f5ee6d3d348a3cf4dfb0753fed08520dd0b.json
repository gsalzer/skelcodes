{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/*\\n\\n       .\\n      \\\":\\\"\\n    ___:____     |\\\"\\\\/\\\"|\\n  ,'        `.    \\\\  /\\n  |  O        \\\\___/  |\\n~^~^~^~^~^~^~^~^~^~^~^~^~\\n\\nWhales Game | Generative Yield NFTs\\nMint tokens and earn KRILL with this new blockchain based game! Battle it out to see who can generate the most yield.\\n\\nWebsite: https://whales.game/\\n\\n*/\\n\\ninterface WhalesGameInterface {\\n\\tfunction getToken(uint256 _tokenId) external view returns (address tokenOwner, address approved, bytes32 seed, bool isWhale);\\n}\\n\\n\\ncontract Metadata {\\n\\n\\tstring public name = \\\"Whales Game\\\";\\n\\tstring public symbol = \\\"WG\\\";\\n\\n\\tstring constant private TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n\\tstruct Trait {\\n\\t\\tstring trait;\\n\\t\\tstring[] names;\\n\\t\\tstring[] imgs;\\n\\t}\\n\\n\\tstruct Traits {\\n\\t\\tstring base;\\n\\t\\tTrait[] traits;\\n\\t}\\n\\t\\n\\tstruct Info {\\n\\t\\taddress owner;\\n\\t\\tWhalesGameInterface wg;\\n\\t\\tTraits whaleTraits;\\n\\t\\tTraits fishermanTraits;\\n\\t\\tstring[] colors;\\n\\t}\\n\\tInfo private info;\\n\\t\\n\\t\\n\\tmodifier _onlyOwner() {\\n\\t\\trequire(msg.sender == owner());\\n\\t\\t_;\\n\\t}\\n\\n\\n\\tconstructor(string memory _whaleBase, string memory _fishermenBase, string[] memory _colors) {\\n\\t\\tinfo.owner = msg.sender;\\n\\t\\tinfo.whaleTraits.base = _whaleBase;\\n\\t\\tinfo.fishermanTraits.base = _fishermenBase;\\n\\t\\tinfo.colors = _colors;\\n\\t}\\n\\n\\tfunction createTrait(bool _isWhale, string memory _trait, string[] memory _names, string[] memory _imgs) external _onlyOwner {\\n\\t\\trequire(_names.length > 0 && _names.length == _imgs.length);\\n\\t\\tTraits storage _traits = _isWhale ? info.whaleTraits : info.fishermanTraits;\\n\\t\\t_traits.traits.push(Trait(_trait, _names, _imgs));\\n\\t}\\n\\n\\tfunction setOwner(address _owner) external _onlyOwner {\\n\\t\\tinfo.owner = _owner;\\n\\t}\\n\\n\\tfunction setWhalesGame(WhalesGameInterface _wg) external _onlyOwner {\\n\\t\\tinfo.wg = _wg;\\n\\t}\\n\\n\\tfunction deploySetWhalesGame(WhalesGameInterface _wg) external {\\n\\t\\trequire(tx.origin == owner() && whalesGameAddress() == address(0x0));\\n\\t\\tinfo.wg = _wg;\\n\\t}\\n\\n\\n\\tfunction whalesGameAddress() public view returns (address) {\\n\\t\\treturn address(info.wg);\\n\\t}\\n\\n\\tfunction owner() public view returns (address) {\\n\\t\\treturn info.owner;\\n\\t}\\n\\t\\n\\tfunction tokenURI(uint256 _tokenId) external view returns (string memory) {\\n\\t\\t( , , bytes32 _seed, bool _isWhale) = info.wg.getToken(_tokenId);\\n\\t\\tstring memory _json = string(abi.encodePacked('{\\\"name\\\":\\\"', _isWhale ? 'Whale' : 'Fisherman', ' #', _uint2str(_tokenId), '\\\",\\\"description\\\":\\\"Some description content...\\\",'));\\n\\t\\t_json = string(abi.encodePacked(_json, '\\\"image\\\":\\\"data:image/svg+xml;base64,', _encode(bytes(getRawSVG(_seed, _isWhale))), '\\\",\\\"attributes\\\":['));\\n\\t\\t_json = string(abi.encodePacked(_json, '{\\\"trait_type\\\":\\\"Type\\\",\\\"value\\\":\\\"', _isWhale ? 'Whale' : 'Fisherman', '\\\"}'));\\n\\t\\t(string[] memory _traits, string[] memory _values, ) = getRawTraits(_seed, _isWhale);\\n\\t\\tfor (uint256 i = 0; i < _traits.length; i++) {\\n\\t\\t\\tif (keccak256(bytes(_values[i])) != keccak256(bytes(\\\"None\\\"))) {\\n\\t\\t\\t\\t_json = string(abi.encodePacked(_json, ',{\\\"trait_type\\\":\\\"', _traits[i], '\\\",\\\"value\\\":\\\"', _values[i], '\\\"}'));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t_json = string(abi.encodePacked(_json, ']}'));\\n\\t\\treturn string(abi.encodePacked(\\\"data:application/json;base64,\\\", _encode(bytes(_json))));\\n\\t}\\n\\n\\tfunction getSVG(uint256 _tokenId) public view returns (string memory) {\\n\\t\\t( , , bytes32 _seed, bool _isWhale) = info.wg.getToken(_tokenId);\\n\\t\\treturn getRawSVG(_seed, _isWhale);\\n\\t}\\n\\n\\tfunction getRawSVG(bytes32 _seed, bool _isWhale) public view returns (string memory svg) {\\n\\t\\tsvg = string(abi.encodePacked('<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" version=\\\"1.1\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" viewBox=\\\"0 0 44 44\\\">'));\\n\\t\\tuint256 _colorIndex = uint256(keccak256(abi.encodePacked('color:', _seed))) % info.colors.length;\\n\\t\\tsvg = string(abi.encodePacked(svg, '<rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"#', info.colors[_colorIndex], '\\\" />'));\\n\\t\\tTraits storage _traits = _isWhale ? info.whaleTraits : info.fishermanTraits;\\n\\t\\tsvg = string(abi.encodePacked(svg, '<image x=\\\"6\\\" y=\\\"6\\\" width=\\\"32\\\" height=\\\"32\\\" image-rendering=\\\"pixelated\\\" href=\\\"data:image/png;base64,', _traits.base, '\\\"/>'));\\n\\t\\t( , , uint256[] memory _indexes) = getRawTraits(_seed, _isWhale);\\n\\t\\tfor (uint256 i = 0; i < _indexes.length; i++) {\\n\\t\\t\\tsvg = string(abi.encodePacked(svg, '<image x=\\\"6\\\" y=\\\"6\\\" width=\\\"32\\\" height=\\\"32\\\" image-rendering=\\\"pixelated\\\" href=\\\"data:image/png;base64,', _traits.traits[i].imgs[_indexes[i]], '\\\"/>'));\\n\\t\\t}\\n\\t\\tsvg = string(abi.encodePacked(svg, '</svg>'));\\n\\t}\\n\\n\\tfunction getTraits(uint256 _tokenId) public view returns (string[] memory traits, string[] memory values) {\\n\\t\\t( , , bytes32 _seed, bool _isWhale) = info.wg.getToken(_tokenId);\\n\\t\\t(traits, values, ) = getRawTraits(_seed, _isWhale);\\n\\t}\\n\\n\\tfunction getRawTraits(bytes32 _seed, bool _isWhale) public view returns (string[] memory traits, string[] memory values, uint256[] memory indexes) {\\n\\t\\tbytes32 _last = _seed;\\n\\t\\tTraits storage _traits = _isWhale ? info.whaleTraits : info.fishermanTraits;\\n\\t\\tuint256 _length = _traits.traits.length;\\n\\t\\ttraits = new string[](_length);\\n\\t\\tvalues = new string[](_length);\\n\\t\\tindexes = new uint256[](_length);\\n\\t\\tfor (uint256 i = 0; i < _length; i++) {\\n\\t\\t\\t_last = keccak256(abi.encodePacked(_last));\\n\\t\\t\\tuint256 _index = uint256(_last) % _traits.traits[i].names.length;\\n\\t\\t\\ttraits[i] = _traits.traits[i].trait;\\n\\t\\t\\tvalues[i] = _traits.traits[i].names[_index];\\n\\t\\t\\tindexes[i] = _index;\\n\\t\\t}\\n\\t}\\n\\n\\n\\tfunction _uint2str(uint256 _value) internal pure returns (string memory) {\\n\\t\\tuint256 _digits = 1;\\n\\t\\tuint256 _n = _value;\\n\\t\\twhile (_n > 9) {\\n\\t\\t\\t_n /= 10;\\n\\t\\t\\t_digits++;\\n\\t\\t}\\n\\t\\tbytes memory _out = new bytes(_digits);\\n\\t\\tfor (uint256 i = 0; i < _out.length; i++) {\\n\\t\\t\\tuint256 _dec = (_value / (10**(_out.length - i - 1))) % 10;\\n\\t\\t\\t_out[i] = bytes1(uint8(_dec) + 48);\\n\\t\\t}\\n\\t\\treturn string(_out);\\n\\t}\\n\\t\\n\\tfunction _encode(bytes memory _data) internal pure returns (string memory result) {\\n\\t\\tif (_data.length == 0) return '';\\n\\t\\tstring memory _table = TABLE;\\n\\t\\tuint256 _encodedLen = 4 * ((_data.length + 2) / 3);\\n\\t\\tresult = new string(_encodedLen + 32);\\n\\n\\t\\tassembly {\\n\\t\\t\\tmstore(result, _encodedLen)\\n\\t\\t\\tlet tablePtr := add(_table, 1)\\n\\t\\t\\tlet dataPtr := _data\\n\\t\\t\\tlet endPtr := add(dataPtr, mload(_data))\\n\\t\\t\\tlet resultPtr := add(result, 32)\\n\\n\\t\\t\\tfor {} lt(dataPtr, endPtr) {}\\n\\t\\t\\t{\\n\\t\\t\\t\\tdataPtr := add(dataPtr, 3)\\n\\t\\t\\t\\tlet input := mload(dataPtr)\\n\\t\\t\\t\\tmstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n\\t\\t\\t\\tresultPtr := add(resultPtr, 1)\\n\\t\\t\\t\\tmstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n\\t\\t\\t\\tresultPtr := add(resultPtr, 1)\\n\\t\\t\\t\\tmstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n\\t\\t\\t\\tresultPtr := add(resultPtr, 1)\\n\\t\\t\\t\\tmstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n\\t\\t\\t\\tresultPtr := add(resultPtr, 1)\\n\\t\\t\\t}\\n\\t\\t\\tswitch mod(mload(_data), 3)\\n\\t\\t\\tcase 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n\\t\\t\\tcase 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n\\t\\t}\\n\\t\\treturn result;\\n\\t}\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_whaleBase\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_fishermenBase\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_colors\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isWhale\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_trait\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_names\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_imgs\",\"type\":\"string[]\"}],\"name\":\"createTrait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract WhalesGameInterface\",\"name\":\"_wg\",\"type\":\"address\"}],\"name\":\"deploySetWhalesGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_seed\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_isWhale\",\"type\":\"bool\"}],\"name\":\"getRawSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_seed\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_isWhale\",\"type\":\"bool\"}],\"name\":\"getRawTraits\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"traits\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"values\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTraits\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"traits\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"values\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract WhalesGameInterface\",\"name\":\"_wg\",\"type\":\"address\"}],\"name\":\"setWhalesGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whalesGameAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Metadata","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000001306956424f5277304b47676f414141414e5355684555674141414341414141416741674d414141414f464a4a6e414141414446424d5645554141414264655a4f4d6e37464556326e794a6731444141414141585253546c4d41514f62595a6741414149524a52454655474e4e6a6f414c515772554154444f745772574b6763476559525858314e436f42676254513246636f61466851455a6f68475a6f614f6743427437514242416a6759483561734e534d4950426a41484b754c5a714b6f52784e537355796769464d6f34694d527844517734774d42774d4457566759415a61615341617773444141324a636a57466734476341347441434275622f5144576d6f65662f2f2f6e2f41536a796e774b2f4151436c3769386a693732362b7741414141424a52553545726b4a6767673d3d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014c6956424f5277304b47676f414141414e5355684555674141414341414141416742414d414141434256476648414141414956424d564555414141442b777044416e33442f7067536a517761424e67662f7a71626c6c414465706e66596b5659614768714f6d3434554141414141585253546c4d41514f62595a6741414149524a524546554b4d396a4942756b415545434570394e45416a4538416b77436f49416b6f41675467474546716d46556773787a4d415551444e4541466d414553474155494c714759344f56443654555a4d52696f43536b5a4b52417249434a57506a5969566b4158567a59324e6b416337707873626d4d35476449577863626f7a696443456c4a535555415245584678645541646451464145476c74445145415a5541565930675141477541446c4141434536784c5654302b7a774141414141424a52553545726b4a6767673d3d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001eersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}