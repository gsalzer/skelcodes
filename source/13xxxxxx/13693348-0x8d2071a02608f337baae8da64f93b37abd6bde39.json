{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/utils/cryptography/ECDSA.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    enum RecoverError {\r\n        NoError,\r\n        InvalidSignature,\r\n        InvalidSignatureLength,\r\n        InvalidSignatureS,\r\n        InvalidSignatureV\r\n    }\r\n\r\n    function _throwError(RecoverError error) private pure {\r\n        if (error == RecoverError.NoError) {\r\n            return; // no error: do nothing\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n            revert(\"ECDSA: invalid signature\");\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        } else if (error == RecoverError.InvalidSignatureV) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature` or error string. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n        // Check the signature length\r\n        // - case 65: r,s,v signature (standard)\r\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return tryRecover(hash, v, r, s);\r\n        } else if (signature.length == 64) {\r\n            bytes32 r;\r\n            bytes32 vs;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                vs := mload(add(signature, 0x40))\r\n            }\r\n            return tryRecover(hash, r, vs);\r\n        } else {\r\n            return (address(0), RecoverError.InvalidSignatureLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address, RecoverError) {\r\n        bytes32 s;\r\n        uint8 v;\r\n        assembly {\r\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\r\n            v := add(shr(255, vs), 27)\r\n        }\r\n        return tryRecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address, RecoverError) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return (address(0), RecoverError.InvalidSignatureS);\r\n        }\r\n        if (v != 27 && v != 28) {\r\n            return (address(0), RecoverError.InvalidSignatureV);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (signer == address(0)) {\r\n            return (address(0), RecoverError.InvalidSignature);\r\n        }\r\n\r\n        return (signer, RecoverError.NoError);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Counters.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title ERC721 Burnable Token\r\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\r\n */\r\nabstract contract ERC721Burnable is Context, ERC721 {\r\n    /**\r\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own `tokenId` or be an approved operator.\r\n     */\r\n    function burn(uint256 tokenId) public virtual {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\r\n        _burn(tokenId);\r\n    }\r\n}\r\n\r\n// File: contracts/Howl.sol\r\n\r\n\r\npragma solidity ^0.8.2;\r\n\r\n\r\n\r\n\r\n\r\ninterface ISoul {\r\n    function mint(address _address, uint256 _amount) external;\r\n\r\n    function collectAndBurn(address _address, uint256 _amount) external;\r\n}\r\n\r\ncontract Howl is ERC721Burnable, Ownable {\r\n    using ECDSA for bytes32;\r\n    using Counters for Counters.Counter;\r\n\r\n    constructor() ERC721(\"House of Warlords\", \"HOWL\") Ownable() {\r\n        genesisTokenIdCounter._value = 888; // accounting for giveaways and reserve\r\n        genesisReserveTokenIdCounter._value = 8; // accounting for legendaries\r\n    }\r\n\r\n    struct Warlord {\r\n        uint16 face; // 0\r\n        uint16 headGear; // 1\r\n        uint16 clothes; // 2\r\n        uint16 shoulderGuard; // 3\r\n        uint16 armGuards; // 4\r\n        uint16 sideWeapon; // 5\r\n        uint16 backWeapon; // 6\r\n        uint16 background; // 7\r\n        uint16 killCount; // 8\r\n    }\r\n\r\n    event Seppuku(\r\n        address indexed _address,\r\n        uint256 indexed _generation,\r\n        uint256 _tokenId1,\r\n        uint256 _tokenId2\r\n    );\r\n\r\n    event Resurrection(\r\n        uint256 indexed _tokenId,\r\n        address indexed _address,\r\n        uint256 indexed _generation\r\n    );\r\n\r\n    event VoucherUsed(\r\n        address indexed _address,\r\n        uint256 indexed _nonce,\r\n        uint256 _claimQty\r\n    );\r\n\r\n    event StartConquest(uint256 indexed _tokenId, uint256 _startDate);\r\n    event EndConquest(uint256 indexed _tokenId, uint256 _reward);\r\n    event NameChange(uint256 indexed _tokenId, string _name);\r\n\r\n    Counters.Counter public generationCounter;\r\n    Counters.Counter public genesisTokenIdCounter;\r\n    Counters.Counter public genesisReserveTokenIdCounter;\r\n\r\n    uint256 public constant GENESIS_MAX_SUPPLY = 8888;\r\n    uint256 public constant RESERVE_QTY = 888;\r\n    uint256 public SALE_MINT_PRICE = 0.069 ether;\r\n    bool public IS_SALE_ON;\r\n    bool public IS_SEPPUKU_ON;\r\n    bool public IS_STAKING_ON;\r\n\r\n    uint256[3] private _stakingRewards = [250, 600, 1000];\r\n    uint256[3] private _stakingPeriods = [30, 60, 90];\r\n\r\n    uint256 public seppukuBaseFee = 1000;\r\n    uint256 public seppukuMultiplierFee = 500;\r\n\r\n    bool public canSummonLegendaries = true;\r\n\r\n    string public preRevealUrl;\r\n    string public apiUrl;\r\n    address public signer;\r\n    address public soulContractAddress;\r\n\r\n    // When warlords are minted for the first time this contract generates a random looking DNA mapped to a tokenID.\r\n    // The actual uint16 properties of the warlord are later derived by decoding it with the\r\n    // information that's inside of the generationRanges and generationRarities mappings.\r\n    // Each generation of warlords will have its own set of rarities and property ranges\r\n    // with a provenance hash uploaded ahead of time.\r\n    // It gurantees that the actual property distribution is hidden during the pre-reveal phase since decoding depends on\r\n    // the unknown information.\r\n    // Property ranges are stored inside of a uint16[4] array per each property.\r\n    // These 4 numbers are interpreted as buckets of traits. Traits are just sequential numbers.\r\n    // For example [1, 100, 200, 300] value inside of generationRanges for the face property will be interpreted as:\r\n    // - Common: 1-99\r\n    // - Uncommon: 100-199\r\n    // - Rare: 200 - 299\r\n    //\r\n    // The last two pieces of data are located inside of generationRarities mapping which holds uint16[2] arrays of rarities.\r\n    // For example, if our rarities were defined as [80, 15], combined with buckets from above they will result in:\r\n    // - Common: 1-99 [80% chance]\r\n    // - Uncommon: 100-199 [15% chance]\r\n    // - Rare: 200 - 299 [5% chance]\r\n    //\r\n    // This framework helps us to keep our trait generation random and hidden while still allowing for\r\n    // clearly defined rarity categories.\r\n    mapping(uint256 => mapping(uint256 => uint16[4])) public generationRanges;\r\n    mapping(uint256 => uint16[2]) public generationRarities;\r\n    mapping(uint256 => uint256) public generationProvenance;\r\n    mapping(uint256 => bool) public isGenerationRevealed;\r\n    mapping(uint256 => uint256) public generationSeed;\r\n    mapping(uint256 => uint256) public generationResurrectionChance;\r\n    mapping(address => mapping(uint256 => uint256)) public resurrectionTickets;\r\n    mapping(uint256 => uint256) private _tokenIdToWarlord;\r\n    mapping(uint256 => uint256) public conquests;\r\n    mapping(uint256 => uint256) private _voucherToMinted;\r\n    mapping(uint256 => string) public tokenIdToWarlordName;\r\n    mapping(string => bool) public namesTaken;\r\n\r\n    // This mapping is going to be used to connect our howl store implementation and potential future\r\n    // mechanics that will enhance this collection.\r\n    mapping(address => bool) public authorizedToEquip;\r\n    // Kill switch for the mapping above, if community decides that it's too dangerous to have this\r\n    // list extendable we can prevent it from being modified.\r\n    bool public isAuthorizedToEquipLocked;\r\n\r\n    mapping(address => bool) public admins;\r\n\r\n    function _isTokenOwner(uint256 _tokenId) private view {\r\n        require(\r\n            ownerOf(_tokenId) == msg.sender,\r\n            \"HOWL: you don't own this token\"\r\n        );\r\n    }\r\n\r\n    function _isOwnerOrAdmin() private view {\r\n        require(\r\n            owner() == msg.sender || admins[msg.sender],\r\n            \"HOWL: unauthorized\"\r\n        );\r\n    }\r\n\r\n    modifier onlyOwnerOrAdmin() {\r\n        _isOwnerOrAdmin();\r\n        _;\r\n    }\r\n\r\n    modifier onlyTokenOwner(uint256 _tokenId) {\r\n        _isTokenOwner(_tokenId);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAuthorizedToEquip() {\r\n        require(authorizedToEquip[msg.sender], \"HOWL: unauthorized\");\r\n        _;\r\n    }\r\n\r\n    function withdraw() external onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n    function setAuthorizedToEquip(address _address, bool _isAuthorized)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(!isAuthorizedToEquipLocked);\r\n        authorizedToEquip[_address] = _isAuthorized;\r\n    }\r\n\r\n    function lockAuthorizedToEquip() external onlyOwner {\r\n        isAuthorizedToEquipLocked = true;\r\n    }\r\n\r\n    function setAdmin(address _address, bool _hasAccess) external onlyOwner {\r\n        admins[_address] = _hasAccess;\r\n    }\r\n\r\n    function setSaleMintPrice(uint256 _mintPrice) external onlyOwner {\r\n        SALE_MINT_PRICE = _mintPrice;\r\n    }\r\n\r\n    function setSigner(address _signer) external onlyOwner {\r\n        signer = _signer;\r\n    }\r\n\r\n    function setApiUrl(string calldata _apiUrl) external onlyOwner {\r\n        apiUrl = _apiUrl;\r\n    }\r\n\r\n    function setPreRevealUrl(string calldata _preRevealUrl) external onlyOwner {\r\n        preRevealUrl = _preRevealUrl;\r\n    }\r\n\r\n    function setSoulContractAddress(address _address) external onlyOwner {\r\n        soulContractAddress = _address;\r\n    }\r\n\r\n    function setIsSaleOn(bool _isSaleOn) external onlyOwnerOrAdmin {\r\n        IS_SALE_ON = _isSaleOn;\r\n    }\r\n\r\n    function setIsSeppukuOn(bool _isSeppukuOn) external onlyOwnerOrAdmin {\r\n        IS_SEPPUKU_ON = _isSeppukuOn;\r\n    }\r\n\r\n    function setSeppukuBaseAndMultiplierFee(\r\n        uint256 _baseFee,\r\n        uint256 _multiplierFee\r\n    ) external onlyOwnerOrAdmin {\r\n        seppukuBaseFee = _baseFee;\r\n        seppukuMultiplierFee = _multiplierFee;\r\n    }\r\n\r\n    function setStakingRewardsAndPeriods(\r\n        uint256[3] calldata _rewards,\r\n        uint256[3] calldata _periods\r\n    ) external onlyOwnerOrAdmin {\r\n        _stakingRewards = _rewards;\r\n        _stakingPeriods = _periods;\r\n    }\r\n\r\n    function getStakingRewardsAndPeriods()\r\n        external\r\n        view\r\n        returns (uint256[3][2] memory)\r\n    {\r\n        return [\r\n            [_stakingRewards[0], _stakingRewards[1], _stakingRewards[2]],\r\n            [_stakingPeriods[0], _stakingPeriods[1], _stakingPeriods[2]]\r\n        ];\r\n    }\r\n\r\n    function setIsStakingOn(bool _isStakingOn) external onlyOwnerOrAdmin {\r\n        IS_STAKING_ON = _isStakingOn;\r\n    }\r\n\r\n    function setIsGenerationRevealed(uint256 _gen, bool _isGenerationRevealed)\r\n        external\r\n        onlyOwnerOrAdmin\r\n    {\r\n        require(!isGenerationRevealed[_gen]);\r\n        isGenerationRevealed[_gen] = _isGenerationRevealed;\r\n    }\r\n\r\n    function setGenerationRanges(\r\n        uint256 _gen,\r\n        uint16[4] calldata _face,\r\n        uint16[4] calldata _headGear,\r\n        uint16[4] calldata _clothes,\r\n        uint16[4] calldata _shoulderGuard,\r\n        uint16[4] calldata _armGuards,\r\n        uint16[4] calldata _sideWeapon,\r\n        uint16[4] calldata _backWeapon,\r\n        uint16[4] calldata _background\r\n    ) external onlyOwnerOrAdmin {\r\n        require(!isGenerationRevealed[_gen]);\r\n\r\n        generationRanges[_gen][0] = _face;\r\n        generationRanges[_gen][1] = _headGear;\r\n        generationRanges[_gen][2] = _clothes;\r\n        generationRanges[_gen][3] = _shoulderGuard;\r\n        generationRanges[_gen][4] = _armGuards;\r\n        generationRanges[_gen][5] = _sideWeapon;\r\n        generationRanges[_gen][6] = _backWeapon;\r\n        generationRanges[_gen][7] = _background;\r\n    }\r\n\r\n    function setGenerationRarities(\r\n        uint256 _gen,\r\n        uint16 _common,\r\n        uint16 _uncommon\r\n    ) external onlyOwnerOrAdmin {\r\n        require(!isGenerationRevealed[_gen]);\r\n        // rare is derived by 100% - common + uncommon\r\n        // so in the case of [80,15] - rare will be 5%\r\n        require(_common > _uncommon);\r\n        generationRarities[_gen] = [_common, _uncommon];\r\n    }\r\n\r\n    function setGenerationProvenance(uint256 _provenance, uint256 _gen)\r\n        external\r\n        onlyOwnerOrAdmin\r\n    {\r\n        require(generationProvenance[_gen] == 0);\r\n        generationProvenance[_gen] = _provenance;\r\n    }\r\n\r\n    function startNextGenerationResurrection(uint256 _resurrectionChance)\r\n        external\r\n        onlyOwnerOrAdmin\r\n    {\r\n        require(!IS_SEPPUKU_ON);\r\n        generationCounter.increment();\r\n        uint256 gen = generationCounter.current();\r\n        generationSeed[gen] = _getSeed();\r\n        generationResurrectionChance[gen] = _resurrectionChance;\r\n    }\r\n\r\n    function mintReserve(address _address, uint256 _claimQty)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            genesisReserveTokenIdCounter.current() + _claimQty <= RESERVE_QTY\r\n        );\r\n\r\n        for (uint256 i = 0; i < _claimQty; i++) {\r\n            genesisReserveTokenIdCounter.increment();\r\n            _mintWarlord(_address, genesisReserveTokenIdCounter.current(), 0);\r\n        }\r\n    }\r\n\r\n    function summonLegendaries(address _address) external onlyOwner {\r\n        require(canSummonLegendaries);\r\n        // make sure that this action cannot be performed again\r\n        // in theory all 10 legendaries can be burned\r\n        canSummonLegendaries = false;\r\n\r\n        uint256 traitBase = 10000;\r\n        for (uint256 i = 1; i < 9; i++) {\r\n            // first 4 are zen, second 4 are aku\r\n            _tokenIdToWarlord[i] = _generateDecodedDna(\r\n                Warlord(\r\n                    uint16(traitBase + i), // produces traits that look like 10001 - 10002 - ...etc.\r\n                    uint16(traitBase + i),\r\n                    uint16(traitBase + i),\r\n                    uint16(traitBase + i),\r\n                    uint16(traitBase + i),\r\n                    uint16(traitBase + i),\r\n                    uint16(traitBase + i),\r\n                    (i <= 4) ? uint16(traitBase + 1) : uint16(traitBase + 2), // background is 10001 for zen and 10002 for aku\r\n                    0 // 0 kills\r\n                )\r\n            );\r\n\r\n            _safeMint(_address, i);\r\n        }\r\n    }\r\n\r\n    function redeemVoucher(\r\n        address _address,\r\n        uint256 _approvedQty,\r\n        uint256 _price,\r\n        uint256 _nonce,\r\n        bool _isLastItemFree,\r\n        bool _isTeamReserve,\r\n        uint256 _claimQty,\r\n        bytes calldata _voucher\r\n    ) external payable {\r\n        bytes32 hash = keccak256(\r\n            abi.encodePacked(\r\n                _address,\r\n                _approvedQty,\r\n                _price,\r\n                _nonce,\r\n                _isLastItemFree,\r\n                _isTeamReserve\r\n            )\r\n        );\r\n\r\n        require(\r\n            _verifySignature(signer, hash, _voucher),\r\n            \"HOWL: invalid signature\"\r\n        );\r\n\r\n        uint256 totalWithClaimed = _voucherToMinted[uint256(hash)] + _claimQty;\r\n        require(totalWithClaimed <= _approvedQty, \"HOWL: exceeds approved qty\");\r\n\r\n        _voucherToMinted[uint256(hash)] += _claimQty;\r\n\r\n        // Make last item free if voucher allows\r\n        string memory err = \"HOWL: not enough funds sent\";\r\n        if (totalWithClaimed == _approvedQty && _isLastItemFree) {\r\n            require(msg.value >= _price * (_claimQty - 1), err);\r\n        } else {\r\n            require(msg.value >= _price * _claimQty, err);\r\n        }\r\n\r\n        if (_isTeamReserve) {\r\n            // Minting from 9-888 range if authorized to mint from the reserve\r\n            require(\r\n                genesisReserveTokenIdCounter.current() + _claimQty <=\r\n                    RESERVE_QTY,\r\n                \"HOWL: exceeds reserve supply\"\r\n            );\r\n            for (uint256 i = 0; i < _claimQty; i++) {\r\n                genesisReserveTokenIdCounter.increment();\r\n                _mintWarlord(\r\n                    _address,\r\n                    genesisReserveTokenIdCounter.current(),\r\n                    0\r\n                );\r\n            }\r\n        } else {\r\n            // minting from 889 to 8888\r\n            require(\r\n                genesisTokenIdCounter.current() + _claimQty <=\r\n                    GENESIS_MAX_SUPPLY,\r\n                \"HOWL: exceeds max genesis supply\"\r\n            );\r\n\r\n            for (uint256 i = 0; i < _claimQty; i++) {\r\n                genesisTokenIdCounter.increment();\r\n                _mintWarlord(_address, genesisTokenIdCounter.current(), 0);\r\n            }\r\n        }\r\n\r\n        emit VoucherUsed(_address, _nonce, _claimQty);\r\n    }\r\n\r\n    function mintSale(uint256 _claimQty) external payable {\r\n        require(IS_SALE_ON, \"HOWL: sale is not active\");\r\n        require(\r\n            _claimQty <= 10,\r\n            \"HOWL: can't claim more than 10 in one transaction\"\r\n        );\r\n        require(\r\n            msg.value >= SALE_MINT_PRICE * _claimQty,\r\n            \"HOWL: not enough funds sent\"\r\n        );\r\n        require(\r\n            genesisTokenIdCounter.current() + _claimQty <= GENESIS_MAX_SUPPLY,\r\n            \"HOWL: exceeds max genesis supply\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < _claimQty; i++) {\r\n            genesisTokenIdCounter.increment();\r\n            _mintWarlord(msg.sender, genesisTokenIdCounter.current(), 0);\r\n        }\r\n    }\r\n\r\n    function _mintWarlord(\r\n        address _address,\r\n        uint256 _tokenId,\r\n        uint256 _gen\r\n    ) private {\r\n        uint256 dna = uint256(\r\n            keccak256(abi.encodePacked(_address, _tokenId, _getSeed()))\r\n        );\r\n\r\n        // When warlords are generated for the first time\r\n        // the last 9 bits of their DNA will be used to store the generation number (8 bit)\r\n        // and a flag that indicates whether the dna is in its encoded\r\n        // or decoded state (1 bit).\r\n\r\n        // Generation number will help to properly decode properties based on\r\n        // property ranges that are unknown during minting.\r\n\r\n        // ((dna >> 9) << 9) clears the last 9 bits.\r\n        // _gen * 2 moves generation information one bit to the left and sets the last bit to 0.\r\n        dna = ((dna >> 9) << 9) | (uint8(_gen) * 2);\r\n        _tokenIdToWarlord[_tokenId] = dna;\r\n        _safeMint(_address, _tokenId);\r\n    }\r\n\r\n    function canResurrectWarlord(address _address, uint256 _tokenId)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        // Check if resurrection ticket was submitted\r\n        uint256 currentGen = generationCounter.current();\r\n        uint256 resurrectionGen = resurrectionTickets[_address][_tokenId];\r\n        if (resurrectionGen == 0 || resurrectionGen != currentGen) {\r\n            return false;\r\n        }\r\n\r\n        // Check if current generation was seeded\r\n        uint256 seed = generationSeed[currentGen];\r\n        if (seed == 0) {\r\n            return false;\r\n        }\r\n\r\n        // Check if this token is lucky to be reborn\r\n        if (\r\n            (uint256(keccak256(abi.encodePacked(_tokenId, seed))) % 100) >\r\n            generationResurrectionChance[currentGen]\r\n        ) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function resurrectWarlord(uint256 _tokenId) external {\r\n        require(\r\n            canResurrectWarlord(msg.sender, _tokenId),\r\n            \"HOWL: warlord cannot be resurrected\"\r\n        );\r\n\r\n        delete resurrectionTickets[msg.sender][_tokenId];\r\n\r\n        uint256 gen = generationCounter.current();\r\n        _mintWarlord(msg.sender, _tokenId, gen);\r\n        emit Resurrection(_tokenId, msg.sender, gen);\r\n    }\r\n\r\n    function seppuku(\r\n        uint256 _tokenId1,\r\n        uint256 _tokenId2,\r\n        uint16[8] calldata _w\r\n    ) external onlyTokenOwner(_tokenId1) onlyTokenOwner(_tokenId2) {\r\n        require(\r\n            soulContractAddress != address(0) && IS_SEPPUKU_ON,\r\n            \"HOWL: seppuku is not active\"\r\n        );\r\n\r\n        Warlord memory w1 = getWarlord(_tokenId1);\r\n        Warlord memory w2 = getWarlord(_tokenId2);\r\n\r\n        require(\r\n            (_w[0] == w1.face || _w[0] == w2.face) &&\r\n                (_w[1] == w1.headGear || _w[1] == w2.headGear) &&\r\n                (_w[2] == w1.clothes || _w[2] == w2.clothes) &&\r\n                (_w[3] == w1.shoulderGuard || _w[3] == w2.shoulderGuard) &&\r\n                (_w[4] == w1.armGuards || _w[4] == w2.armGuards) &&\r\n                (_w[5] == w1.sideWeapon || _w[5] == w2.sideWeapon) &&\r\n                (_w[6] == w1.backWeapon || _w[6] == w2.backWeapon) &&\r\n                (_w[7] == w1.background || _w[7] == w2.background),\r\n            \"HOWL: invalid property transfer\"\r\n        );\r\n\r\n        _burn(_tokenId2);\r\n\r\n        ISoul(soulContractAddress).mint(\r\n            msg.sender,\r\n            seppukuBaseFee +\r\n                ((w1.killCount + w2.killCount) * seppukuMultiplierFee)\r\n        );\r\n\r\n        // Once any composability mechanic is used warlord traits become fully decoded\r\n        // for the ease of future trait transfers between generations.\r\n        _tokenIdToWarlord[_tokenId1] = _generateDecodedDna(\r\n            Warlord(\r\n                _w[0],\r\n                _w[1],\r\n                _w[2],\r\n                _w[3],\r\n                _w[4],\r\n                _w[5],\r\n                _w[6],\r\n                _w[7],\r\n                w1.killCount + w2.killCount + 1\r\n            )\r\n        );\r\n\r\n        uint256 gen = generationCounter.current();\r\n\r\n        // Burned token has a chance of resurrection during the next generation.\r\n        resurrectionTickets[msg.sender][_tokenId2] = gen + 1;\r\n        emit Seppuku(msg.sender, gen, _tokenId1, _tokenId2);\r\n    }\r\n\r\n    function equipProperties(\r\n        address _originalCaller,\r\n        uint256 _tokenId,\r\n        uint16[8] calldata _w\r\n    ) external onlyAuthorizedToEquip {\r\n        require(\r\n            ownerOf(_tokenId) == _originalCaller,\r\n            \"HOWL: you don't own this token\"\r\n        );\r\n\r\n        Warlord memory w = getWarlord(_tokenId);\r\n\r\n        w.face = _w[0] == 0 ? w.face : _w[0];\r\n        w.headGear = _w[1] == 0 ? w.headGear : _w[1];\r\n        w.clothes = _w[2] == 0 ? w.clothes : _w[2];\r\n        w.shoulderGuard = _w[3] == 0 ? w.shoulderGuard : _w[3];\r\n        w.armGuards = _w[4] == 0 ? w.armGuards : _w[4];\r\n        w.sideWeapon = _w[5] == 0 ? w.sideWeapon : _w[5];\r\n        w.backWeapon = _w[6] == 0 ? w.backWeapon : _w[6];\r\n        w.background = _w[7] == 0 ? w.background : _w[7];\r\n\r\n        _tokenIdToWarlord[_tokenId] = _generateDecodedDna(w);\r\n    }\r\n\r\n    function startConquest(uint256 _tokenId) external onlyTokenOwner(_tokenId) {\r\n        require(IS_STAKING_ON, \"HOWL: conquests are disabled\");\r\n        require(\r\n            conquests[_tokenId] == 0,\r\n            \"HOWL: current conquest hasn't ended yet\"\r\n        );\r\n        conquests[_tokenId] = block.timestamp;\r\n        emit StartConquest(_tokenId, block.timestamp);\r\n    }\r\n\r\n    function getCurrentConquestReward(uint256 _tokenId)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 conquestStart = conquests[_tokenId];\r\n        require(conquestStart != 0, \"HOWL: warlord is not on a conquest\");\r\n\r\n        // Calculate for how long the token has been staked\r\n        uint256 stakedDays = (block.timestamp - conquestStart) / 24 / 60 / 60;\r\n        uint256[3] memory periods = _stakingPeriods;\r\n        uint256[3] memory rewards = _stakingRewards;\r\n\r\n        if (stakedDays >= periods[2]) {\r\n            return rewards[2];\r\n        } else if (stakedDays >= periods[1]) {\r\n            return rewards[1];\r\n        } else if (stakedDays >= periods[0]) {\r\n            return rewards[0];\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function endConquest(uint256 _tokenId) external onlyTokenOwner(_tokenId) {\r\n        uint256 reward = getCurrentConquestReward(_tokenId);\r\n        delete conquests[_tokenId];\r\n\r\n        if (reward != 0) {\r\n            ISoul(soulContractAddress).mint(msg.sender, reward);\r\n        }\r\n\r\n        emit EndConquest(_tokenId, reward);\r\n    }\r\n\r\n    // Tokens can't be transferred when on a conquest\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal view override {\r\n        require(\r\n            conquests[tokenId] == 0,\r\n            \"HOWL: can't transfer or burn warlord while on a conquest\"\r\n        );\r\n    }\r\n\r\n    function nameWarlord(uint256 _tokenId, string calldata _name)\r\n        external\r\n        onlyTokenOwner(_tokenId)\r\n    {\r\n        require(!namesTaken[_name], \"HOWL: this name has been taken\");\r\n        ISoul(soulContractAddress).collectAndBurn(msg.sender, 250);\r\n\r\n        // if warlords was renamed - unreserve the previous name\r\n        string memory previousName = tokenIdToWarlordName[_tokenId];\r\n        if (bytes(previousName).length > 0) {\r\n            namesTaken[previousName] = false;\r\n        }\r\n\r\n        tokenIdToWarlordName[_tokenId] = _name;\r\n\r\n        if (bytes(_name).length > 0) {\r\n            namesTaken[_name] = true;\r\n        }\r\n\r\n        emit NameChange(_tokenId, _name);\r\n    }\r\n\r\n    function tokenURI(uint256 _tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(_exists(_tokenId), \"HOWL: warlord doesn't exist\");\r\n\r\n        if (\r\n            bytes(apiUrl).length == 0 ||\r\n            !_isDnaRevealed(_tokenIdToWarlord[_tokenId])\r\n        ) {\r\n            return preRevealUrl;\r\n        }\r\n\r\n        Warlord memory w = getWarlord(_tokenId);\r\n        string memory separator = \"-\";\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    apiUrl,\r\n                    abi.encodePacked(\r\n                        _toString(_tokenId),\r\n                        separator,\r\n                        _toString(w.face),\r\n                        separator,\r\n                        _toString(w.headGear),\r\n                        separator,\r\n                        _toString(w.clothes)\r\n                    ),\r\n                    abi.encodePacked(\r\n                        separator,\r\n                        _toString(w.shoulderGuard),\r\n                        separator,\r\n                        _toString(w.armGuards),\r\n                        separator,\r\n                        _toString(w.sideWeapon)\r\n                    ),\r\n                    abi.encodePacked(\r\n                        separator,\r\n                        _toString(w.backWeapon),\r\n                        separator,\r\n                        _toString(w.background),\r\n                        separator,\r\n                        _toString(w.killCount)\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    function _verifySignature(\r\n        address _signer,\r\n        bytes32 _hash,\r\n        bytes memory _signature\r\n    ) private pure returns (bool) {\r\n        return\r\n            _signer ==\r\n            ECDSA.recover(ECDSA.toEthSignedMessageHash(_hash), _signature);\r\n    }\r\n\r\n    function _getSeed() private view returns (uint256) {\r\n        return uint256(blockhash(block.number - 1));\r\n    }\r\n\r\n    function _generateDecodedDna(Warlord memory _w)\r\n        private\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 dna = _w.killCount; // 8\r\n        dna = (dna << 16) | _w.background; // 7\r\n        dna = (dna << 16) | _w.backWeapon; // 6\r\n        dna = (dna << 16) | _w.sideWeapon; // 5\r\n        dna = (dna << 16) | _w.armGuards; // 4\r\n        dna = (dna << 16) | _w.shoulderGuard; // 3\r\n        dna = (dna << 16) | _w.clothes; // 2\r\n        dna = (dna << 16) | _w.headGear; // 1\r\n        dna = (dna << 16) | _w.face; // 0\r\n        dna = (dna << 1) | 1; // flag indicating whether this dna was decoded\r\n        // Decoded DNA won't have a generation number anymore.\r\n        // These traits will permanently look decoded and no further manipulation will be needed\r\n        // apart from just extracting it with a bitshift.\r\n\r\n        return dna;\r\n    }\r\n\r\n    function _isDnaRevealed(uint256 _dna) private view returns (bool) {\r\n        // Check the last bit to see if dna is decoded.\r\n        if (_dna & 1 == 1) {\r\n            return true;\r\n        }\r\n\r\n        // If dna wasn't decoded we wanna look up whether the generation it belongs to was revealed.\r\n        return isGenerationRevealed[(_dna >> 1) & 0xFF];\r\n    }\r\n\r\n    function getWarlord(uint256 _tokenId) public view returns (Warlord memory) {\r\n        uint256 dna = _tokenIdToWarlord[_tokenId];\r\n        require(_isDnaRevealed(dna), \"HOWL: warlord is not revealed yet\");\r\n\r\n        Warlord memory w;\r\n        w.face = _getWarlordProperty(dna, 0);\r\n        w.headGear = _getWarlordProperty(dna, 1);\r\n        w.clothes = _getWarlordProperty(dna, 2);\r\n        w.shoulderGuard = _getWarlordProperty(dna, 3);\r\n        w.armGuards = _getWarlordProperty(dna, 4);\r\n        w.sideWeapon = _getWarlordProperty(dna, 5);\r\n        w.backWeapon = _getWarlordProperty(dna, 6);\r\n        w.background = _getWarlordProperty(dna, 7);\r\n        w.killCount = _getWarlordProperty(dna, 8);\r\n\r\n        return w;\r\n    }\r\n\r\n    function _getWarlordProperty(uint256 _dna, uint256 _propertyId)\r\n        private\r\n        view\r\n        returns (uint16)\r\n    {\r\n        // Property right offset in bits.\r\n        uint256 bitShift = _propertyId * 16;\r\n\r\n        // Last bit shows whether the dna was already decoded.\r\n        // If it was we can safely return the stored value after bitshifting and applying a mask.\r\n        // Decoded values don't have a generation number, so only need to shift by one bit to account for the flag.\r\n        if (_dna & 1 == 1) {\r\n            return uint16(((_dna >> 1) >> bitShift) & 0xFFFF);\r\n        }\r\n\r\n        // Every time warlords commit seppuku their DNA will be decoded.\r\n        // If we got here it means that it wasn't decoded and we can safely assume that their kill counter is 0.\r\n        if (_propertyId == 8) {\r\n            return 0;\r\n        }\r\n\r\n        // Minted generation number is stored inside of 8 bits after the encoded/decoded flag.\r\n        uint256 gen = (_dna >> 1) & 0xFF;\r\n\r\n        // Rarity and range values to decode the property (specific to generation)\r\n        uint16[2] storage _rarity = generationRarities[gen];\r\n        uint16[4] storage _range = generationRanges[gen][_propertyId];\r\n\r\n        // Extracting the encoded (raw) property (also shifting by 9bits first to account for generation metadata and a flag).\r\n        // This property is just a raw value, it will get decoded with _rarity and _range information from above.\r\n        uint256 encodedProp = (((_dna >> 9) >> bitShift) & 0xFFFF);\r\n\r\n        if (\r\n            (_propertyId == 3 || _propertyId == 4 || _propertyId == 5) &&\r\n            // 60% chance that sideWeapon/armGuards/shoulderGuard will appear\r\n            uint256(keccak256(abi.encodePacked(encodedProp, _range))) % 100 > 60\r\n        ) {\r\n            // Unlucky\r\n            return 0;\r\n        }\r\n\r\n        // A value that will dictate from which pool of properties we should pull (common, uncommon, rare)\r\n        uint256 rarityDecider = (uint256(\r\n            keccak256(abi.encodePacked(_propertyId, _dna, _range))\r\n        ) % 100) + 1;\r\n\r\n        uint256 rangeStart;\r\n        uint256 rangeEnd;\r\n\r\n        // There is an opportunity to optimize for SLOAD operations here by byte packing all\r\n        // rarity/range information and loading it in getWarlord before this function\r\n        // is called to minimize state access.\r\n        if (rarityDecider <= _rarity[0]) {\r\n            // common\r\n            rangeStart = _range[0];\r\n            rangeEnd = _range[1];\r\n        } else if (rarityDecider <= _rarity[1] + _rarity[0]) {\r\n            // uncommon\r\n            rangeStart = _range[1];\r\n            rangeEnd = _range[2];\r\n        } else {\r\n            // rare\r\n            rangeStart = _range[2];\r\n            rangeEnd = _range[3];\r\n        }\r\n\r\n        // Returns a decoded property that will fall within one of the rarity buckets.\r\n        return uint16((encodedProp % (rangeEnd - rangeStart)) + rangeStart);\r\n    }\r\n\r\n    function _toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT license\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"EndConquest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"NameChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_generation\",\"type\":\"uint256\"}],\"name\":\"Resurrection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_generation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId2\",\"type\":\"uint256\"}],\"name\":\"Seppuku\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"}],\"name\":\"StartConquest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_claimQty\",\"type\":\"uint256\"}],\"name\":\"VoucherUsed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GENESIS_MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_SALE_ON\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_SEPPUKU_ON\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_STAKING_ON\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESERVE_QTY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SALE_MINT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apiUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedToEquip\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"canResurrectWarlord\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canSummonLegendaries\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"conquests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"endConquest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_originalCaller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint16[8]\",\"name\":\"_w\",\"type\":\"uint16[8]\"}],\"name\":\"equipProperties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generationCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"generationProvenance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"generationRanges\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"generationRarities\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"generationResurrectionChance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"generationSeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisReserveTokenIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisTokenIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCurrentConquestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingRewardsAndPeriods\",\"outputs\":[{\"internalType\":\"uint256[3][2]\",\"name\":\"\",\"type\":\"uint256[3][2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getWarlord\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"face\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"headGear\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"clothes\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"shoulderGuard\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"armGuards\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sideWeapon\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"backWeapon\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"background\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"killCount\",\"type\":\"uint16\"}],\"internalType\":\"struct Howl.Warlord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAuthorizedToEquipLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isGenerationRevealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockAuthorizedToEquip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimQty\",\"type\":\"uint256\"}],\"name\":\"mintReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimQty\",\"type\":\"uint256\"}],\"name\":\"mintSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"nameWarlord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"namesTaken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preRevealUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_approvedQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLastItemFree\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isTeamReserve\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_claimQty\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_voucher\",\"type\":\"bytes\"}],\"name\":\"redeemVoucher\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"resurrectWarlord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"resurrectionTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId2\",\"type\":\"uint256\"},{\"internalType\":\"uint16[8]\",\"name\":\"_w\",\"type\":\"uint16[8]\"}],\"name\":\"seppuku\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seppukuBaseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seppukuMultiplierFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_hasAccess\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_apiUrl\",\"type\":\"string\"}],\"name\":\"setApiUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAuthorized\",\"type\":\"bool\"}],\"name\":\"setAuthorizedToEquip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_provenance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gen\",\"type\":\"uint256\"}],\"name\":\"setGenerationProvenance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gen\",\"type\":\"uint256\"},{\"internalType\":\"uint16[4]\",\"name\":\"_face\",\"type\":\"uint16[4]\"},{\"internalType\":\"uint16[4]\",\"name\":\"_headGear\",\"type\":\"uint16[4]\"},{\"internalType\":\"uint16[4]\",\"name\":\"_clothes\",\"type\":\"uint16[4]\"},{\"internalType\":\"uint16[4]\",\"name\":\"_shoulderGuard\",\"type\":\"uint16[4]\"},{\"internalType\":\"uint16[4]\",\"name\":\"_armGuards\",\"type\":\"uint16[4]\"},{\"internalType\":\"uint16[4]\",\"name\":\"_sideWeapon\",\"type\":\"uint16[4]\"},{\"internalType\":\"uint16[4]\",\"name\":\"_backWeapon\",\"type\":\"uint16[4]\"},{\"internalType\":\"uint16[4]\",\"name\":\"_background\",\"type\":\"uint16[4]\"}],\"name\":\"setGenerationRanges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gen\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_common\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_uncommon\",\"type\":\"uint16\"}],\"name\":\"setGenerationRarities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gen\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isGenerationRevealed\",\"type\":\"bool\"}],\"name\":\"setIsGenerationRevealed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isSaleOn\",\"type\":\"bool\"}],\"name\":\"setIsSaleOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isSeppukuOn\",\"type\":\"bool\"}],\"name\":\"setIsSeppukuOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isStakingOn\",\"type\":\"bool\"}],\"name\":\"setIsStakingOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_preRevealUrl\",\"type\":\"string\"}],\"name\":\"setPreRevealUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintPrice\",\"type\":\"uint256\"}],\"name\":\"setSaleMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiplierFee\",\"type\":\"uint256\"}],\"name\":\"setSeppukuBaseAndMultiplierFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSoulContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"_rewards\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"_periods\",\"type\":\"uint256[3]\"}],\"name\":\"setStakingRewardsAndPeriods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soulContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"startConquest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_resurrectionChance\",\"type\":\"uint256\"}],\"name\":\"startNextGenerationResurrection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"summonLegendaries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToWarlordName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Howl","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b39d71f0aff5e36872c46341d06f6ee4b38fe1143dbe6925e95ec440dce65274"}]}