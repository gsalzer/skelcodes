{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.3.3 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v3.4.1\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v3.4.1\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/optimism/messengers/iOVM_BaseCrossDomainMessenger.sol\r\n\r\n// +build ovm\r\npragma solidity >0.5.0 <0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title iOVM_BaseCrossDomainMessenger\r\n */\r\ninterface iOVM_BaseCrossDomainMessenger {\r\n\r\n    /**********\r\n     * Events *\r\n     **********/\r\n    event SentMessage(bytes message);\r\n    event RelayedMessage(bytes32 msgHash);\r\n\r\n    /**********************\r\n     * Contract Variables *\r\n     **********************/\r\n    function xDomainMessageSender() external view returns (address);\r\n\r\n    /********************\r\n     * Public Functions *\r\n     ********************/\r\n\r\n    /**\r\n     * Sends a cross domain message to the target messenger.\r\n     * @param _target Target contract address.\r\n     * @param _message Message to send to the target.\r\n     * @param _gasLimit Gas limit for the provided message.\r\n     */\r\n    function sendMessage(\r\n        address _target,\r\n        bytes calldata _message,\r\n        uint32 _gasLimit\r\n    ) external;\r\n\r\n    function deposit(\r\n        address _depositor,\r\n        uint256 _amount,\r\n        bool _send\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/optimism/messengers/iOVM_L1CrossDomainMessenger.sol\r\n\r\npragma solidity >0.5.0 <0.8.0;\r\n\r\n/**\r\n * @title iOVM_L1CrossDomainMessenger\r\n */\r\ninterface iOVM_L1CrossDomainMessenger is iOVM_BaseCrossDomainMessenger {}\r\n\r\n\r\n// File contracts/interfaces/IMessengerWrapper.sol\r\n\r\npragma solidity >=0.6.12 <0.8.0;\r\n\r\ninterface IMessengerWrapper {\r\n    function sendCrossDomainMessage(bytes memory _calldata) external;\r\n    function verifySender(address l1BridgeCaller, bytes memory _data) external;\r\n}\r\n\r\n\r\n// File contracts/wrappers/MessengerWrapper.sol\r\n\r\npragma solidity >=0.6.12 <0.8.0;\r\n\r\nabstract contract MessengerWrapper is IMessengerWrapper {\r\n    address public immutable l1BridgeAddress;\r\n\r\n    constructor(address _l1BridgeAddress) internal {\r\n        l1BridgeAddress = _l1BridgeAddress;\r\n    }\r\n\r\n    modifier onlyL1Bridge {\r\n        require(msg.sender == l1BridgeAddress, \"MW: Sender must be the L1 Bridge\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/wrappers/OptimismMessengerWrapper.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev A MessengerWrapper for Optimism - https://community.optimism.io/docs/\r\n * @notice Deployed on layer-1\r\n */\r\n\r\ncontract OptimismMessengerWrapper is MessengerWrapper, Ownable {\r\n\r\n    iOVM_L1CrossDomainMessenger public immutable l1MessengerAddress;\r\n    address public immutable l2BridgeAddress;\r\n    uint256 public defaultL2GasLimit;\r\n    mapping (bytes4 => uint256) public l2GasLimitForSignature;\r\n\r\n    constructor(\r\n        address _l1BridgeAddress,\r\n        address _l2BridgeAddress,\r\n        iOVM_L1CrossDomainMessenger _l1MessengerAddress,\r\n        uint256 _defaultL2GasLimit\r\n    )\r\n        public\r\n        MessengerWrapper(_l1BridgeAddress)\r\n    {\r\n        l2BridgeAddress = _l2BridgeAddress;\r\n        l1MessengerAddress = _l1MessengerAddress;\r\n        defaultL2GasLimit = _defaultL2GasLimit;\r\n    }\r\n\r\n    /** \r\n     * @dev Sends a message to the l2BridgeAddress from layer-1\r\n     * @param _calldata The data that l2BridgeAddress will be called with\r\n     */\r\n    function sendCrossDomainMessage(bytes memory _calldata) public override onlyL1Bridge {\r\n        uint256 l2GasLimit = l2GasLimitForCalldata(_calldata);\r\n\r\n        l1MessengerAddress.sendMessage(\r\n            l2BridgeAddress,\r\n            _calldata,\r\n            uint32(l2GasLimit)\r\n        );\r\n    }\r\n\r\n    function verifySender(address l1BridgeCaller, bytes memory /*_data*/) public override {\r\n        require(l1BridgeCaller == address(l1MessengerAddress), \"OVM_MSG_WPR: Caller is not l1MessengerAddress\");\r\n        // Verify that cross-domain sender is l2BridgeAddress\r\n        require(l1MessengerAddress.xDomainMessageSender() == l2BridgeAddress, \"OVM_MSG_WPR: Invalid cross-domain sender\");\r\n    }\r\n\r\n    function setDefaultL2GasLimit(uint256 _l2GasLimit) external onlyOwner {\r\n        defaultL2GasLimit = _l2GasLimit;\r\n    }\r\n\r\n    function setL2GasLimitForSignature(uint256 _l2GasLimit, bytes4 signature) external onlyOwner {\r\n        l2GasLimitForSignature[signature] = _l2GasLimit;\r\n    }\r\n\r\n    // Private functions\r\n\r\n    function l2GasLimitForCalldata(bytes memory _calldata) private view returns (uint256) {\r\n        uint256 l2GasLimit;\r\n\r\n        if (_calldata.length >= 4) {\r\n            bytes4 functionSignature = bytes4(toUint32(_calldata, 0));\r\n            l2GasLimit = l2GasLimitForSignature[functionSignature];\r\n        }\r\n\r\n        if (l2GasLimit == 0) {\r\n            l2GasLimit = defaultL2GasLimit;\r\n        }\r\n\r\n        return l2GasLimit;\r\n    }\r\n\r\n    // source: https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\r\n    function toUint32(bytes memory _bytes, uint256 _start) private pure returns (uint32) {\r\n        require(_bytes.length >= _start + 4, \"OVM_MSG_WPR: out of bounds\");\r\n        uint32 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x4), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1BridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2BridgeAddress\",\"type\":\"address\"},{\"internalType\":\"contract iOVM_L1CrossDomainMessenger\",\"name\":\"_l1MessengerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_defaultL2GasLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"defaultL2GasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1BridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1MessengerAddress\",\"outputs\":[{\"internalType\":\"contract iOVM_L1CrossDomainMessenger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2BridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"l2GasLimitForSignature\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"sendCrossDomainMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_l2GasLimit\",\"type\":\"uint256\"}],\"name\":\"setDefaultL2GasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_l2GasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"signature\",\"type\":\"bytes4\"}],\"name\":\"setL2GasLimitForSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1BridgeCaller\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"verifySender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OptimismMessengerWrapper","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003666f603cc164936c1b87e207f36beba4ac5f18a000000000000000000000000a81d244a1814468c734e5b4101f7b9c0c577a8fc00000000000000000000000025ace71c97b33cc4729cf772ae268934f7ab5fa100000000000000000000000000000000000000000000000000000000003567e0","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://db6c1ad31cc31c72315efb84186ab4b2f8151c3846d20f4d9ba28f39bc4a8c5c"}]}