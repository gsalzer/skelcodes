{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n    Note: This version of plasma has been migrated\r\n    Please check the Space Yetis contract for the correct address\r\n*/\r\n\r\n/*\r\n    ERC20I (ERC20 0xInuarashi Edition)\r\n    Minified and Gas Optimized\r\n    From the efforts of the 0x Collective\r\n    https://0xcollective.net\r\n*/\r\n\r\ncontract ERC20I {\r\n    // Token Params\r\n    string public name;\r\n    string public symbol;\r\n    constructor(string memory name_, string memory symbol_) {\r\n        name = name_;\r\n        symbol = symbol_;\r\n    }\r\n\r\n    // Decimals\r\n    uint8 public constant decimals = 18;\r\n\r\n    // Supply\r\n    uint256 public totalSupply;\r\n    \r\n    // Mappings of Balances\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    // Events\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // Internal Functions\r\n    function _mint(address to_, uint256 amount_) internal virtual {\r\n        totalSupply += amount_;\r\n        balanceOf[to_] += amount_;\r\n        emit Transfer(address(0x0), to_, amount_);\r\n    }\r\n    function _burn(address from_, uint256 amount_) internal virtual {\r\n        balanceOf[from_] -= amount_;\r\n        totalSupply -= amount_;\r\n        emit Transfer(from_, address(0x0), amount_);\r\n    }\r\n    function _approve(address owner_, address spender_, uint256 amount_) internal virtual {\r\n        allowance[owner_][spender_] = amount_;\r\n        emit Approval(owner_, spender_, amount_);\r\n    }\r\n\r\n    // Public Functions\r\n    function approve(address spender_, uint256 amount_) public virtual returns (bool) {\r\n        _approve(msg.sender, spender_, amount_);\r\n        return true;\r\n    }\r\n    function transfer(address to_, uint256 amount_) public virtual returns (bool) {\r\n        balanceOf[msg.sender] -= amount_;\r\n        balanceOf[to_] += amount_;\r\n        emit Transfer(msg.sender, to_, amount_);\r\n        return true;\r\n    }\r\n    function transferFrom(address from_, address to_, uint256 amount_) public virtual returns (bool) {\r\n        if (allowance[from_][msg.sender] != type(uint256).max) {\r\n            allowance[from_][msg.sender] -= amount_; }\r\n        balanceOf[from_] -= amount_;\r\n        balanceOf[to_] += amount_;\r\n        emit Transfer(from_, to_, amount_);\r\n        return true;\r\n    }\r\n\r\n    // 0xInuarashi Custom Functions\r\n    function multiTransfer(address[] memory to_, uint256[] memory amounts_) public virtual {\r\n        require(to_.length == amounts_.length, \"ERC20I: To and Amounts length Mismatch!\");\r\n        for (uint256 i = 0; i < to_.length; i++) {\r\n            transfer(to_[i], amounts_[i]);\r\n        }\r\n    }\r\n    function multiTransferFrom(address[] memory from_, address[] memory to_, uint256[] memory amounts_) public virtual {\r\n        require(from_.length == to_.length && from_.length == amounts_.length, \"ERC20I: From, To, and Amounts length Mismatch!\");\r\n        for (uint256 i = 0; i < from_.length; i++) {\r\n            transferFrom(from_[i], to_[i], amounts_[i]);\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract ERC20IBurnable is ERC20I {\r\n    function burn(uint256 amount_) external virtual {\r\n        _burn(msg.sender, amount_);\r\n    }\r\n    function burnFrom(address from_, uint256 amount_) public virtual {\r\n        uint256 _currentAllowance = allowance[from_][msg.sender];\r\n        require(_currentAllowance >= amount_, \"ERC20IBurnable: Burn amount requested exceeds allowance!\");\r\n\r\n        if (allowance[from_][msg.sender] != type(uint256).max) {\r\n            allowance[from_][msg.sender] -= amount_; }\r\n\r\n        _burn(from_, amount_);\r\n    }\r\n}\r\n\r\n// Open0x Ownable (by 0xInuarashi)\r\nabstract contract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed oldOwner_, address indexed newOwner_);\r\n    constructor() { owner = msg.sender; }\r\n    modifier onlyOwner {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function _transferOwnership(address newOwner_) internal virtual {\r\n        address _oldOwner = owner;\r\n        owner = newOwner_;\r\n        emit OwnershipTransferred(_oldOwner, newOwner_);    \r\n    }\r\n    function transferOwnership(address newOwner_) public virtual onlyOwner {\r\n        require(newOwner_ != address(0x0), \"Ownable: new owner is the zero address!\");\r\n        _transferOwnership(newOwner_);\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0x0));\r\n    }\r\n}\r\n\r\ninterface iSpaceYetis {\r\n    function balanceOf(address address_) external view returns (uint256);\r\n}\r\n\r\ncontract Plasma is ERC20IBurnable, Ownable {\r\n    constructor() ERC20I(\"Plasma\", \"PLASMA\") {}\r\n\r\n    // Interfaces\r\n    address public spaceYetisAddress;\r\n    iSpaceYetis public SpaceYetis;\r\n    function setSpaceYetis(address address_) external onlyOwner {\r\n        spaceYetisAddress = address_; SpaceYetis = iSpaceYetis(address_); }\r\n\r\n    // Times\r\n    uint40 public yieldStartTime = 1640221200; // 2021-12-22_20-00 EST\r\n    uint40 public yieldEndTime = 1955754000; // 2031-12-22_20-00 EST\r\n    function setYieldEndTime(uint40 yieldEndTime_) external onlyOwner {\r\n        yieldEndTime = yieldEndTime_; }\r\n\r\n    // Yield Info\r\n    uint256 public globalModulus = (10 ** 14);\r\n    uint40 public yieldRatePerYeti = uint40(5 ether / globalModulus);\r\n    struct Yield { uint40 lastUpdatedTime_; uint176 pendingRewards_; }\r\n    mapping(address => Yield) public addressToYield;\r\n\r\n    // Events\r\n    event Claim(address to_, uint256 amount_);\r\n    event CreditsDeducted(address from_, uint256 amount_);\r\n    event CreditsAdded(address to_, uint256 amount_);\r\n\r\n    // Controllers\r\n    mapping(address => bool) public plasmaControllers;\r\n    modifier onlyControllers { \r\n        require(plasmaControllers[msg.sender], \"You are not a controller!\"); _; }\r\n    function setControllers(address address_, bool bool_) external onlyOwner {\r\n        plasmaControllers[address_] = bool_; }\r\n    \r\n    // Credits System\r\n    function deductCredits(address address_, uint256 amount_) external onlyControllers {\r\n        uint176 _downscaledAmount = uint176(amount_ / globalModulus);\r\n        require(addressToYield[address_].pendingRewards_ >= _downscaledAmount, \r\n            \"Not enough credits!\");\r\n        addressToYield[address_].pendingRewards_ -= _downscaledAmount;\r\n        emit CreditsDeducted(address_, amount_);\r\n    }\r\n    function addCredits(address address_, uint256 amount_) external onlyControllers {\r\n        uint176 _downscaledAmount = uint176(amount_ / globalModulus);\r\n        addressToYield[address_].pendingRewards_ += _downscaledAmount;\r\n        emit CreditsAdded(address_, amount_);\r\n    }\r\n\r\n    // ERC20 Burn\r\n    function burnByController(address from_, uint256 amount_) external onlyControllers {\r\n        _burn(from_, amount_); }\r\n    \r\n    // Internal View Functions\r\n    function __getSmallerValueUint40(uint40 a, uint40 b) internal pure returns (uint40) { return a < b ? a : b; }\r\n    function __getTimestamp() internal view returns (uint40) {\r\n        return __getSmallerValueUint40(uint40(block.timestamp), yieldEndTime); }\r\n    function __getYieldRate(address address_) internal view returns (uint40) {\r\n        return uint40(SpaceYetis.balanceOf(address_)) * yieldRatePerYeti; }\r\n\r\n    function __calculateYieldReward(address address_) internal view returns (uint176) { \r\n        uint40 _totalYieldRate = __getYieldRate(address_);\r\n        if (_totalYieldRate == 0) { return 0; }\r\n        uint40 _time = __getTimestamp();\r\n        uint40 _lastUpdate = addressToYield[address_].lastUpdatedTime_;\r\n\r\n        if (_lastUpdate > yieldStartTime) {\r\n            return (_totalYieldRate * (_time - _lastUpdate) / 1 days);\r\n        } else { return 0; }\r\n    }\r\n\r\n    // Internal Write Functions\r\n    function __updateYieldReward(address address_) internal {\r\n        uint40 _time = __getTimestamp();\r\n        uint40 _lastUpdate = addressToYield[address_].lastUpdatedTime_;\r\n\r\n        // This is not triggered in the case that the user has never minted / held a token before.\r\n        if (_lastUpdate > 0) { \r\n            addressToYield[address_].pendingRewards_ += __calculateYieldReward(address_);\r\n        }\r\n        // This updates the time until the end when yieldEndTime is set on block.timestamp >= yieldEndTime occurance.\r\n        if (_lastUpdate != yieldEndTime) {\r\n            addressToYield[address_].lastUpdatedTime_ = _time;\r\n        }\r\n    }\r\n    function __claimYieldReward(address address_) internal {\r\n        uint176 _pendingRewards = addressToYield[address_].pendingRewards_;\r\n\r\n        if (_pendingRewards > 0) {\r\n            addressToYield[address_].pendingRewards_ = 0;\r\n        \r\n            uint256 _expandedReward = uint256(_pendingRewards * globalModulus);\r\n        \r\n            _mint(address_, _expandedReward); \r\n            emit Claim(address_, _expandedReward);\r\n        }\r\n    }\r\n\r\n    // Public Write Functions\r\n    function updateReward(address address_) public {\r\n        __updateYieldReward(address_);\r\n    }\r\n    function claimTokens(address address_) public {\r\n        __updateYieldReward(address_);\r\n        __claimYieldReward(address_);\r\n    }\r\n\r\n    // Public View Functions\r\n    function getStorageClaimableTokens(address address_) public view returns (uint256) {\r\n        return uint256(addressToYield[address_].pendingRewards_ * globalModulus);\r\n    }\r\n    function getPendingClaimableTokens(address address_) public view returns (uint256) {\r\n        return uint256(__calculateYieldReward(address_) * globalModulus);\r\n    }\r\n    function getTotalClaimableTokens(address address_) public view returns (uint256) {\r\n        return uint256((addressToYield[address_].pendingRewards_ + __calculateYieldReward(address_)) * globalModulus);\r\n    }\r\n    function getYieldRateOfAddress(address address_) public view returns (uint256) {\r\n        return uint256(__getYieldRate(address_) * globalModulus); \r\n    }\r\n    function raw_getStorageClaimableTokens(address address_) public view returns (uint256) {\r\n        return addressToYield[address_].pendingRewards_;\r\n    }\r\n    function raw_getPendingClaimableTokens(address address_) public view returns (uint256) {\r\n        return __calculateYieldReward(address_);\r\n    }\r\n    function raw_getTotalClaimableTokens(address address_) public view returns (uint256) {\r\n        return addressToYield[address_].pendingRewards_ + __calculateYieldReward(address_);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"CreditsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"CreditsDeducted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SpaceYetis\",\"outputs\":[{\"internalType\":\"contract iSpaceYetis\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"addCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToYield\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"lastUpdatedTime_\",\"type\":\"uint40\"},{\"internalType\":\"uint176\",\"name\":\"pendingRewards_\",\"type\":\"uint176\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burnByController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"deductCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"getPendingClaimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"getStorageClaimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"getTotalClaimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"getYieldRateOfAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalModulus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from_\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"name\":\"multiTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"plasmaControllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"raw_getPendingClaimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"raw_getStorageClaimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"raw_getTotalClaimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"}],\"name\":\"setControllers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"setSpaceYetis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"yieldEndTime_\",\"type\":\"uint40\"}],\"name\":\"setYieldEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spaceYetisAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldEndTime\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldRatePerYeti\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldStartTime\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Plasma","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ee0a56b62d0276655cf9ed854a3abf2aae5948648a91e4eeaa6f3fe2ffc6ad63"}]}