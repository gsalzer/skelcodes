{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface ITokenMover {\r\n    function isOperator(address _operator) external view returns(bool);\r\n    function transferERC20(address currency, address from, address to, uint amount) external;\r\n    function transferERC721(address currency, address from, address to, uint tokenId) external;\r\n}\r\n\r\ncontract AppRole is Ownable {\r\n    address[] private _apps;\r\n    mapping(address => bool) internal _isApp;\r\n\r\n    modifier onlyApp() {\r\n        require(_isApp[_msgSender()], \"Caller is not the app\");\r\n        _;\r\n    }\r\n\r\n    function getAllApps() public view returns(address[] memory) {\r\n        return _apps;\r\n    }\r\n\r\n    function isApp(address _app) public view returns(bool) {\r\n        return _isApp[_app];\r\n    }\r\n\r\n    function addApp(address _app) public onlyOwner {\r\n        require(!_isApp[_app], \"Address already added as app\");\r\n        _apps.push(_app);\r\n        _isApp[_app] = true;\r\n    }\r\n\r\n    function removeApp(address _app) public onlyOwner {\r\n        require(_isApp[_app], \"Address is not added as app\");\r\n        _isApp[_app] = false;\r\n        for (uint256 i = 0; i < _apps.length; i++) {\r\n            if (_apps[i] == _app) {\r\n                _apps[i] = _apps[_apps.length - 1];\r\n                _apps.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// This contract enables users to tip their preferred creators\r\ncontract TipManagerv2 is Ownable, AppRole {\r\n\r\n    ITokenMover public immutable tokenMover;\r\n    address public immutable PKN;\r\n    address public pokmiWallet;\r\n\r\n    event tipSent(address user, address creator, uint256 amount, uint256 creatorFeeBIPS);\r\n\r\n    constructor(address _PKN, ITokenMover _tokenMover, address _pokmiWallet) {\r\n        PKN = _PKN;\r\n        tokenMover = _tokenMover;\r\n        pokmiWallet = _pokmiWallet;\r\n    }\r\n\r\n    function payTip(address user, address creator, uint256 amount, uint256 creatorFeeBIPS) external onlyApp() {\r\n        uint256 amountForCreator = (amount * creatorFeeBIPS) / 10000;\r\n\r\n        tokenMover.transferERC20(PKN, user, creator, amountForCreator);\r\n        tokenMover.transferERC20(PKN, user, pokmiWallet, amount - amountForCreator);\r\n\r\n        emit tipSent(user, creator, amount, creatorFeeBIPS);\r\n    }\r\n\r\n    function updatePokmiWallet(address newWallet) external onlyOwner() {\r\n        pokmiWallet = newWallet;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_PKN\",\"type\":\"address\"},{\"internalType\":\"contract ITokenMover\",\"name\":\"_tokenMover\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pokmiWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creatorFeeBIPS\",\"type\":\"uint256\"}],\"name\":\"tipSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PKN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_app\",\"type\":\"address\"}],\"name\":\"addApp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllApps\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_app\",\"type\":\"address\"}],\"name\":\"isApp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creatorFeeBIPS\",\"type\":\"uint256\"}],\"name\":\"payTip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pokmiWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_app\",\"type\":\"address\"}],\"name\":\"removeApp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMover\",\"outputs\":[{\"internalType\":\"contract ITokenMover\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updatePokmiWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TipManagerv2","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"000000000000000000000000df09a216fac5adc3e640db418c0b956076509503000000000000000000000000874f15088843949fa6ac0834a9933b57e6edfd08000000000000000000000000acb33c7cc49dfcf23055e3d383be3a72c3fa6ab5","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5fa5cf8345534ed3848c3ea752aaeff26939d64583d729434baf60d1bf086dbc"}]}