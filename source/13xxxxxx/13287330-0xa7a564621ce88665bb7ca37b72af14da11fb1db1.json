{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/XPNSimpleSignal.sol\": {\r\n      \"content\": \"// Copyright (C) 2021 Exponent\\n\\n// This file is part of Exponent.\\n\\n// Exponent is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// Exponent is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with Exponent.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"./interface/ISignal.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract XPNSignal is ISignal, Ownable {\\n    struct signalMetaData {\\n        string signalType;\\n        bool signalExist;\\n        bool signalActive;\\n    }\\n    mapping(address => mapping(string => bool)) ownSignals;\\n    mapping(string => int256[]) signalsWeight;\\n    mapping(string => string[]) signalsSymbol;\\n    mapping(string => signalMetaData) signalsMetaData;\\n    mapping(address => bool) signalProviderWhitelist;\\n\\n    address[] assetAddress;\\n    event SignalProviderWhitelisted(address wallet);\\n    event SignalProviderDeWhitelisted(address wallet);\\n\\n    constructor() {\\n        whitelistsignalProvider(msg.sender);\\n    }\\n\\n    // @notice register a new signal. caller will own the signal\\n    // @param signalName unique identifier of the signal.\\n    // @param signalType general info about the signal.\\n    // @param symbols list of symbol that this signal will address. order sensitive. immutable\\n    function registerSignal(\\n        string memory signalName,\\n        string memory signalType,\\n        string[] memory symbols\\n    ) external override returns (string memory) {\\n        require(\\n            _signalProviderIsWhitelisted(msg.sender),\\n            \\\"Wallet is not whitelisted\\\"\\n        );\\n\\n        if (signalsMetaData[signalName].signalExist) {\\n            revert(\\\"signal already exist\\\");\\n        }\\n\\n        ownSignals[msg.sender][signalName] = true;\\n        signalsMetaData[signalName] = signalMetaData({\\n            signalType: signalType,\\n            signalExist: true,\\n            signalActive: false\\n        });\\n        signalsSymbol[signalName] = symbols;\\n    }\\n\\n    // @notice whitelist wallet by address\\n    // @param address of the wallet to whitelist\\n    // @dev only callable by owner\\n    function whitelistsignalProvider(address wallet) public onlyOwner {\\n        signalProviderWhitelist[wallet] = true;\\n        emit SignalProviderWhitelisted(wallet);\\n    }\\n\\n    // @notice un-whitelist wallet by address\\n    // @param address of the wallet to un-whitelist\\n    // @dev only callable by owner\\n    function deWhitelistsignalProvider(address wallet) public onlyOwner {\\n        signalProviderWhitelist[wallet] = false;\\n        emit SignalProviderDeWhitelisted(wallet);\\n    }\\n\\n    function _signalProviderIsWhitelisted(address wallet)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return signalProviderWhitelist[wallet];\\n    }\\n\\n    // @notice make a signal inactive\\n    // @dev caller must be signal owner\\n    function withdrawSignal(string memory signalName) external override {\\n        require(ownSignals[msg.sender][signalName], \\\"not your signal\\\");\\n        signalsMetaData[signalName].signalActive = false;\\n    }\\n\\n    // @notice signal weight setter. just store signal weight as signal.\\n    // @dev some of the param are just from ISignal, not really in use.\\n    // @param signalName unique identifier of signal\\n    // @param ref not in use.\\n    // @param weights of each asset.\\n    // @param data not in use.\\n    function submitSignal(\\n        string memory signalName,\\n        string[] memory ref,\\n        int256[] memory weights,\\n        bytes calldata data\\n    ) external override {\\n        require(ownSignals[msg.sender][signalName], \\\"not your signal\\\");\\n        require(\\n            weights.length == signalsSymbol[signalName].length,\\n            \\\"signal length mismatch\\\"\\n        );\\n        signalsWeight[signalName] = weights;\\n        signalsMetaData[signalName].signalActive = true;\\n    }\\n\\n    // @notice do nothing. this function is from ISignal.\\n    function updateSignal(string memory signalName) external override {\\n        revert(\\\"this signal do not require any update\\\");\\n    }\\n\\n    // @notice get symbol list of the signal\\n    // @param signalName unique identifier of signal\\n    // @return string[] list of symbol\\n    function getSignalSymbols(string memory signalName)\\n        external\\n        view\\n        override\\n        returns (string[] memory)\\n    {\\n        require(\\n            signalsMetaData[signalName].signalActive,\\n            \\\"signal not available\\\"\\n        );\\n        return signalsSymbol[signalName];\\n    }\\n\\n    // @notice get symbol list of the signal\\n    // @param signalName unique identifier of signal\\n    // @return int256[] signal, % target allocation between each symbols.\\n    function getSignal(string memory signalName)\\n        external\\n        view\\n        override\\n        returns (int256[] memory)\\n    {\\n        require(\\n            signalsMetaData[signalName].signalActive,\\n            \\\"signal not available\\\"\\n        );\\n\\n        return signalsWeight[signalName];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ISignal.sol\": {\r\n      \"content\": \"pragma solidity 0.8.0;\\n\\ninterface ISignal {\\n    function registerSignal(\\n        string memory,\\n        string memory,\\n        string[] memory\\n    ) external returns (string memory);\\n\\n    function withdrawSignal(string memory) external;\\n\\n    function submitSignal(\\n        string memory,\\n        string[] memory,\\n        int256[] memory,\\n        bytes calldata\\n    ) external;\\n\\n    function updateSignal(string memory) external;\\n\\n    function getSignal(string memory) external view returns (int256[] memory);\\n\\n    function getSignalSymbols(string memory)\\n        external\\n        view\\n        returns (string[] memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 50\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"SignalProviderDeWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"SignalProviderWhitelisted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"deWhitelistsignalProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"signalName\",\"type\":\"string\"}],\"name\":\"getSignal\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"signalName\",\"type\":\"string\"}],\"name\":\"getSignalSymbols\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"signalName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"signalType\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"name\":\"registerSignal\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"signalName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"ref\",\"type\":\"string[]\"},{\"internalType\":\"int256[]\",\"name\":\"weights\",\"type\":\"int256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"submitSignal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"signalName\",\"type\":\"string\"}],\"name\":\"updateSignal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"whitelistsignalProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"signalName\",\"type\":\"string\"}],\"name\":\"withdrawSignal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"XPNSignal","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"50","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}