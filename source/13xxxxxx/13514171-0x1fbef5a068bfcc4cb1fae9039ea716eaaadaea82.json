{"status":"1","message":"OK","result":[{"SourceCode":"// File: BLOCKLIST/openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: BLOCKLIST/openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: BLOCKLIST/Blocklist.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n/**\r\n * @title Blocklist\r\n * @dev This contract manages a list of addresses and has a simple CRUD\r\n */\r\ncontract Blocklist is Ownable {\r\n  /**\r\n   * @dev The index of each user in the list\r\n   */\r\n  mapping(address => uint256) private _userIndex;\r\n\r\n  /**\r\n   * @dev The list itself\r\n   */\r\n  address[] private _userList;\r\n\r\n  /**\r\n   * @notice Event emitted when a user is added to the blocklist\r\n   */\r\n  event addedToBlocklist(address indexed account, address by);\r\n\r\n  /**\r\n   * @notice Event emitted when a user is removed from the blocklist\r\n   */\r\n  event removedFromBlocklist(address indexed account, address by);\r\n\r\n  /**\r\n   * @notice Modifier to facilitate checking the blocklist\r\n   */\r\n  modifier onlyInBlocklist(address account) {\r\n    require(isBlocklisted(account), \"Not in blocklist\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @notice Modifier to facilitate checking the blocklist\r\n   */\r\n  modifier onlyNotInBlocklist(address account) {\r\n    require(!isBlocklisted(account), \"Already in blocklist\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds an address to the blocklist\r\n   * @param account The address to add\r\n   * @return true if the operation succeeded\r\n   * @dev Fails if the address was already blocklisted\r\n   */\r\n  function _addToBlocklist(address account) private onlyNotInBlocklist(account) returns(bool) {\r\n    _userIndex[account] = _userList.length;\r\n    _userList.push(account);\r\n\r\n    emit addedToBlocklist(account, msg.sender);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Adds many addresses to the blocklist at once\r\n   * @param accounts[] The list of addresses to add\r\n   * @dev Fails if at least one of the addresses was already blocklisted\r\n   */\r\n  function batchAddToBlocklist(address[] calldata accounts) external onlyOwner {\r\n    for (uint256 i = 0; i < accounts.length; i++) {\r\n      require(_addToBlocklist(accounts[i]));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Adds an address to the blocklist\r\n   * @param account The address to add\r\n   * @return true if the operation succeeded\r\n   * @dev Fails if the address was already blocklisted\r\n   */\r\n  function addToBlocklist(address account) external onlyOwner returns(bool) {\r\n    return _addToBlocklist(account);\r\n  }\r\n\r\n  /**\r\n   * @dev Removes an address from the blocklist\r\n   * @param account The address to remove\r\n   * @return true if the operation succeeds\r\n   * @dev Fails if the address was not blocklisted\r\n   */\r\n  function _removeFromBlocklist(address account) private onlyInBlocklist(account) returns(bool) {\r\n    uint rowToDelete = _userIndex[account];\r\n    address keyToMove = _userList[_userList.length-1];\r\n    _userList[rowToDelete] = keyToMove;\r\n    _userIndex[keyToMove] = rowToDelete; \r\n    _userList.length--;\r\n\r\n    emit removedFromBlocklist(account, msg.sender);\r\n    \r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Removes many addresses from the blocklist at once\r\n   * @param accounts[] The list of addresses to remove\r\n   * @dev Fails if at least one of the addresses was not blocklisted\r\n   */\r\n  function batchRemoveFromBlocklist(address[] calldata accounts) external onlyOwner {\r\n    for (uint256 i = 0; i < accounts.length; i++) {\r\n      require(_removeFromBlocklist(accounts[i]));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Removes an address from the blocklist\r\n   * @param account The address to remove\r\n   * @dev Fails if the address was not blocklisted\r\n   * @return true if the operation succeeded\r\n   */\r\n  function removeFromBlocklist(address account) external onlyOwner returns(bool) {\r\n    return _removeFromBlocklist(account);\r\n  }\r\n\r\n  /**\r\n   * @notice Consults whether an address is blocklisted\r\n   * @param account The address to check\r\n   * @return bool True if the address is blocklisted\r\n   */\r\n  function isBlocklisted(address account) public view returns(bool) {\r\n    if(_userList.length == 0) return false;\r\n\r\n    // We don't want to throw when querying for an out-of-bounds index.\r\n    // It can happen when the list has been shrunk after a deletion.\r\n    if(_userIndex[account] >= _userList.length) return false;\r\n\r\n    return _userList[_userIndex[account]] == account;\r\n  }\r\n\r\n  /**\r\n   * @notice Fetches the list of all blocklisted addresses\r\n   * @return array The list of currently blocklisted addresses\r\n   */\r\n  function getFullList() public view returns(address[] memory) {\r\n    return _userList;\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"}],\"name\":\"addedToBlocklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"}],\"name\":\"removedFromBlocklist\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addToBlocklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"batchAddToBlocklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"batchRemoveFromBlocklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFullList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlocklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromBlocklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Blocklist","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://072405320f95ee7bf4c2808fc8ee080b831724ae79ce39200c32d7e5b18f3959"}]}