{"status":"1","message":"OK","result":[{"SourceCode":"{\"GenArt721Minter_DoodleLabs_Config.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\u0027./SafeMath.sol\\u0027;\\nimport \\u0027./IGenArt721CoreV2.sol\\u0027;\\n\\ncontract GenArt721Minter_DoodleLabs_Config {\\n    using SafeMath for uint256;\\n\\n    event SetState(uint256 projectId, uint256 state);\\n    event SetPurchaseManyLimit(uint256 projectId, uint256 limit);\\n\\n    enum SaleState {\\n        FAMILY_COLLECTORS,\\n        REDEMPTION,\\n        PUBLIC\\n    }\\n\\n    IGenArt721CoreV2 public genArtCoreContract;\\n\\n    mapping(uint256 =\\u003e SaleState) public state;\\n    mapping(uint256 =\\u003e uint256) public purchaseLimit;\\n\\n    modifier onlyWhitelisted() {\\n        require(genArtCoreContract.isWhitelisted(msg.sender), \\\"can only be set by admin\\\");\\n        _;\\n    }\\n\\n    constructor(address _genArt721Address) public {\\n        genArtCoreContract = IGenArt721CoreV2(_genArt721Address);\\n    }\\n\\n    function getPurchaseManyLimit(uint256 projectId) view public returns (uint256 limit) {\\n        return purchaseLimit[projectId];\\n    }\\n\\n    function getState(uint256 projectId) view public returns (uint256 _state) {\\n        return uint256(state[projectId]);\\n    }\\n\\n    function setStateFamilyCollectors(uint256 projectId) public onlyWhitelisted {\\n        state[projectId] = SaleState.FAMILY_COLLECTORS;\\n        emit SetState(projectId, uint256(state[projectId]));\\n    }\\n\\n    function setStateRedemption(uint256 projectId) public onlyWhitelisted {\\n        state[projectId] = SaleState.REDEMPTION;\\n        emit SetState(projectId, uint256(state[projectId]));\\n    }\\n\\n    function setStatePublic(uint256 projectId) public onlyWhitelisted {\\n       state[projectId] = SaleState.PUBLIC;\\n       emit SetState(projectId, uint256(state[projectId]));\\n    }\\n\\n    function setPurchaseManyLimit(uint256 projectId, uint256 limit) public onlyWhitelisted {\\n        purchaseLimit[projectId] = limit;\\n        emit SetPurchaseManyLimit(projectId, limit);\\n    }\\n}\"},\"IGenArt721CoreV2.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\ninterface IGenArt721CoreV2 {\\n  function isWhitelisted(address sender) external view returns (bool);\\n  function projectIdToCurrencySymbol(uint256 _projectId) external view returns (string memory);\\n  function projectIdToCurrencyAddress(uint256 _projectId) external view returns (address);\\n  function projectIdToArtistAddress(uint256 _projectId) external view returns (address payable);\\n  function projectIdToPricePerTokenInWei(uint256 _projectId) external view returns (uint256);\\n  function projectIdToAdditionalPayee(uint256 _projectId) external view returns (address payable);\\n  function projectIdToAdditionalPayeePercentage(uint256 _projectId) external view returns (uint256);\\n  function projectTokenInfo(uint256 _projectId) external view returns (address, uint256, uint256, uint256, bool, address, uint256, string memory, address);\\n  function renderProviderAddress() external view returns (address payable);\\n  function renderProviderPercentage() external view returns (uint256);\\n  function mint(address _to, uint256 _projectId, address _by) external returns (uint256 tokenId);\\n}\"},\"SafeMath.sol\":{\"content\":\"// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.4.0/contracts/math/SafeMath.sol\\npragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"}}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"setStateFamilyCollectors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchaseLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"setStatePublic\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"getState\",\"outputs\":[{\"name\":\"_state\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"setStateRedemption\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"getPurchaseManyLimit\",\"outputs\":[{\"name\":\"limit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"genArtCoreContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"projectId\",\"type\":\"uint256\"},{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setPurchaseManyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_genArt721Address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"uint256\"}],\"name\":\"SetState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"SetPurchaseManyLimit\",\"type\":\"event\"}]","ContractName":"GenArt721Minter_DoodleLabs_Config","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"00000000000000000000000028f2d3805652fb5d359486dffb7d08320d403240","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://fc015736b95c8f76c5414dfb345c8b6abbd1663db2da020937cef116b0eac109"}]}