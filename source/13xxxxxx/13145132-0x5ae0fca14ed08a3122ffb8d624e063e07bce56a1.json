{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n// File: contracts\\interfaces\\MathUtil.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary MathUtil {\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\n// File: contracts\\interfaces\\IStakingProxy.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IStakingProxy {\r\n    function getBalance() external view returns(uint256);\r\n\r\n    function withdraw(uint256 _amount) external;\r\n\r\n    function stake() external;\r\n\r\n    function distribute() external;\r\n}\r\n\r\n// File: contracts\\interfaces\\IRewardStaking.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IRewardStaking {\r\n    function stakeFor(address, uint256) external;\r\n    function stake( uint256) external;\r\n    function withdraw(uint256 amount, bool claim) external;\r\n    function withdrawAndUnwrap(uint256 amount, bool claim) external;\r\n    function earned(address account) external view returns (uint256);\r\n    function getReward() external;\r\n    function getReward(address _account, bool _claimExtras) external;\r\n    function extraRewardsLength() external view returns (uint256);\r\n    function extraRewards(uint256 _pid) external view returns (address);\r\n    function rewardToken() external view returns (address);\r\n    function balanceOf(address _account) external view returns (uint256);\r\n}\r\n\r\n// File: contracts\\interfaces\\BoringMath.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/// @notice A library for performing overflow-/underflow-safe math,\r\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\r\nlibrary BoringMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b == 0 || (c = a * b) / b == a, \"BoringMath: Mul Overflow\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"BoringMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    function to128(uint256 a) internal pure returns (uint128 c) {\r\n        require(a <= uint128(-1), \"BoringMath: uint128 Overflow\");\r\n        c = uint128(a);\r\n    }\r\n\r\n    function to64(uint256 a) internal pure returns (uint64 c) {\r\n        require(a <= uint64(-1), \"BoringMath: uint64 Overflow\");\r\n        c = uint64(a);\r\n    }\r\n\r\n    function to32(uint256 a) internal pure returns (uint32 c) {\r\n        require(a <= uint32(-1), \"BoringMath: uint32 Overflow\");\r\n        c = uint32(a);\r\n    }\r\n\r\n    function to40(uint256 a) internal pure returns (uint40 c) {\r\n        require(a <= uint40(-1), \"BoringMath: uint40 Overflow\");\r\n        c = uint40(a);\r\n    }\r\n\r\n    function to112(uint256 a) internal pure returns (uint112 c) {\r\n        require(a <= uint112(-1), \"BoringMath: uint112 Overflow\");\r\n        c = uint112(a);\r\n    }\r\n\r\n    function to224(uint256 a) internal pure returns (uint224 c) {\r\n        require(a <= uint224(-1), \"BoringMath: uint224 Overflow\");\r\n        c = uint224(a);\r\n    }\r\n\r\n    function to208(uint256 a) internal pure returns (uint208 c) {\r\n        require(a <= uint208(-1), \"BoringMath: uint208 Overflow\");\r\n        c = uint208(a);\r\n    }\r\n\r\n    function to216(uint256 a) internal pure returns (uint216 c) {\r\n        require(a <= uint216(-1), \"BoringMath: uint216 Overflow\");\r\n        c = uint216(a);\r\n    }\r\n}\r\n\r\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\r\nlibrary BoringMath128 {\r\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\r\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\r\n    }\r\n\r\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\r\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\r\n    }\r\n}\r\n\r\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\r\nlibrary BoringMath64 {\r\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\r\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\r\n    }\r\n\r\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\r\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\r\n    }\r\n}\r\n\r\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\r\nlibrary BoringMath32 {\r\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\r\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\r\n    }\r\n\r\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\r\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\r\n    }\r\n\r\n    function mul(uint32 a, uint32 b) internal pure returns (uint32 c) {\r\n        require(b == 0 || (c = a * b) / b == a, \"BoringMath: Mul Overflow\");\r\n    }\r\n\r\n    function div(uint32 a, uint32 b) internal pure returns (uint32) {\r\n        require(b > 0, \"BoringMath: division by zero\");\r\n        return a / b;\r\n    }\r\n}\r\n\r\n\r\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint112.\r\nlibrary BoringMath112 {\r\n    function add(uint112 a, uint112 b) internal pure returns (uint112 c) {\r\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\r\n    }\r\n\r\n    function sub(uint112 a, uint112 b) internal pure returns (uint112 c) {\r\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\r\n    }\r\n\r\n    function mul(uint112 a, uint112 b) internal pure returns (uint112 c) {\r\n        require(b == 0 || (c = a * b) / b == a, \"BoringMath: Mul Overflow\");\r\n    }\r\n    \r\n    function div(uint112 a, uint112 b) internal pure returns (uint112) {\r\n        require(b > 0, \"BoringMath: division by zero\");\r\n        return a / b;\r\n    }\r\n}\r\n\r\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint224.\r\nlibrary BoringMath224 {\r\n    function add(uint224 a, uint224 b) internal pure returns (uint224 c) {\r\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\r\n    }\r\n\r\n    function sub(uint224 a, uint224 b) internal pure returns (uint224 c) {\r\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\r\n    }\r\n\r\n    function mul(uint224 a, uint224 b) internal pure returns (uint224 c) {\r\n        require(b == 0 || (c = a * b) / b == a, \"BoringMath: Mul Overflow\");\r\n    }\r\n    \r\n    function div(uint224 a, uint224 b) internal pure returns (uint224) {\r\n        require(b > 0, \"BoringMath: division by zero\");\r\n        return a / b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\math\\SafeMath.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\utils\\Address.sol\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\math\\Math.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\utils\\Context.sol\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\utils\\ReentrancyGuard.sol\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts\\CvxLocker.sol\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n// CVX Locking contract for https://www.convexfinance.com/\r\n// CVX locked in this contract will be entitled to voting rights for the Convex Finance platform\r\n// Based on EPS Staking contract for http://ellipsis.finance/\r\n// Based on SNX MultiRewards by iamdefinitelyahuman - https://github.com/iamdefinitelyahuman/multi-rewards\r\ncontract CvxLocker is ReentrancyGuard, Ownable {\r\n\r\n    using BoringMath for uint256;\r\n    using BoringMath224 for uint224;\r\n    using BoringMath112 for uint112;\r\n    using BoringMath32 for uint32;\r\n    using SafeERC20\r\n    for IERC20;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    struct Reward {\r\n        bool useBoost;\r\n        uint40 periodFinish;\r\n        uint208 rewardRate;\r\n        uint40 lastUpdateTime;\r\n        uint208 rewardPerTokenStored;\r\n    }\r\n    struct Balances {\r\n        uint112 locked;\r\n        uint112 boosted;\r\n        uint32 nextUnlockIndex;\r\n    }\r\n    struct LockedBalance {\r\n        uint112 amount;\r\n        uint112 boosted;\r\n        uint32 unlockTime;\r\n    }\r\n    struct EarnedData {\r\n        address token;\r\n        uint256 amount;\r\n    }\r\n    struct Epoch {\r\n        uint224 supply; //epoch boosted supply\r\n        uint32 date; //epoch start date\r\n    }\r\n\r\n    //token constants\r\n    IERC20 public constant stakingToken = IERC20(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B); //cvx\r\n    address public constant cvxCrv = address(0x62B9c7356A2Dc64a1969e19C23e4f579F9810Aa7);\r\n\r\n    //rewards\r\n    address[] public rewardTokens;\r\n    mapping(address => Reward) public rewardData;\r\n\r\n    // Duration that rewards are streamed over\r\n    uint256 public constant rewardsDuration = 86400 * 7;\r\n\r\n    // Duration of lock/earned penalty period\r\n    uint256 public constant lockDuration = rewardsDuration * 17;\r\n\r\n    // reward token -> distributor -> is approved to add rewards\r\n    mapping(address => mapping(address => bool)) public rewardDistributors;\r\n\r\n    // user -> reward token -> amount\r\n    mapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;\r\n    mapping(address => mapping(address => uint256)) public rewards;\r\n\r\n    //supplies and epochs\r\n    uint256 public lockedSupply;\r\n    uint256 public boostedSupply;\r\n    Epoch[] public epochs;\r\n\r\n    //mappings for balance data\r\n    mapping(address => Balances) public balances;\r\n    mapping(address => LockedBalance[]) public userLocks;\r\n\r\n    //boost\r\n    address public boostPayment = address(0x1389388d01708118b497f59521f6943Be2541bb7);\r\n    uint256 public maximumBoostPayment = 0;\r\n    uint256 public boostRate = 10000;\r\n    uint256 public nextMaximumBoostPayment = 0;\r\n    uint256 public nextBoostRate = 10000;\r\n    uint256 public constant denominator = 10000;\r\n\r\n    //staking\r\n    uint256 public minimumStake = 10000;\r\n    uint256 public maximumStake = 10000;\r\n    address public stakingProxy;\r\n    address public constant cvxcrvStaking = address(0x3Fe65692bfCD0e6CF84cB1E7d24108E434A7587e);\r\n    uint256 public constant stakeOffsetOnLock = 500; //allow broader range for staking when depositing\r\n\r\n    //management\r\n    uint256 public kickRewardPerEpoch = 100;\r\n    uint256 public kickRewardEpochDelay = 4;\r\n\r\n    //shutdown\r\n    bool public isShutdown = false;\r\n\r\n    //erc20-like interface\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private immutable _decimals;\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor() public Ownable() {\r\n        _name = \"Vote Locked Convex Token\";\r\n        _symbol = \"vlCVX\";\r\n        _decimals = 18;\r\n\r\n        uint256 currentEpoch = block.timestamp.div(rewardsDuration).mul(rewardsDuration);\r\n        epochs.push(Epoch({\r\n            supply: 0,\r\n            date: uint32(currentEpoch)\r\n        }));\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /* ========== ADMIN CONFIGURATION ========== */\r\n\r\n    // Add a new reward token to be distributed to stakers\r\n    function addReward(\r\n        address _rewardsToken,\r\n        address _distributor,\r\n        bool _useBoost\r\n    ) public onlyOwner {\r\n        require(rewardData[_rewardsToken].lastUpdateTime == 0);\r\n        require(_rewardsToken != address(stakingToken));\r\n        rewardTokens.push(_rewardsToken);\r\n        rewardData[_rewardsToken].lastUpdateTime = uint40(block.timestamp);\r\n        rewardData[_rewardsToken].periodFinish = uint40(block.timestamp);\r\n        rewardData[_rewardsToken].useBoost = _useBoost;\r\n        rewardDistributors[_rewardsToken][_distributor] = true;\r\n    }\r\n\r\n    // Modify approval for an address to call notifyRewardAmount\r\n    function approveRewardDistributor(\r\n        address _rewardsToken,\r\n        address _distributor,\r\n        bool _approved\r\n    ) external onlyOwner {\r\n        require(rewardData[_rewardsToken].lastUpdateTime > 0);\r\n        rewardDistributors[_rewardsToken][_distributor] = _approved;\r\n    }\r\n\r\n    //Set the staking contract for the underlying cvx. immutable to avoid foul play\r\n    function setStakingContract(address _staking) external onlyOwner {\r\n        require(stakingProxy == address(0), \"staking contract immutable\");\r\n\r\n        stakingProxy = _staking;\r\n    }\r\n\r\n    //set staking limits. will stake the mean of the two once either ratio is crossed\r\n    function setStakeLimits(uint256 _minimum, uint256 _maximum) external onlyOwner {\r\n        require(_minimum <= denominator, \"min range\");\r\n        require(_maximum <= denominator, \"max range\");\r\n        minimumStake = _minimum;\r\n        maximumStake = _maximum;\r\n        updateStakeRatio(0);\r\n    }\r\n\r\n    //set boost parameters\r\n    function setBoost(uint256 _max, uint256 _rate, address _receivingAddress) external onlyOwner {\r\n        require(maximumBoostPayment < 1500, \"over max payment\"); //max 15%\r\n        require(boostRate < 30000, \"over max rate\"); //max 3x\r\n        require(_receivingAddress != address(0), \"invalid address\"); //must point somewhere valid\r\n        nextMaximumBoostPayment = _max;\r\n        nextBoostRate = _rate;\r\n        boostPayment = _receivingAddress;\r\n    }\r\n\r\n    //set kick incentive\r\n    function setKickIncentive(uint256 _rate, uint256 _delay) external onlyOwner {\r\n        require(_rate <= 500, \"over max rate\"); //max 5% per epoch\r\n        require(_delay >= 2, \"min delay\"); //minimum 2 epochs of grace\r\n        kickRewardPerEpoch = _rate;\r\n        kickRewardEpochDelay = _delay;\r\n    }\r\n\r\n    //shutdown the contract. unstake all tokens. release all locks\r\n    function shutdown() external onlyOwner {\r\n        if (stakingProxy != address(0)) {\r\n            uint256 stakeBalance = IStakingProxy(stakingProxy).getBalance();\r\n            IStakingProxy(stakingProxy).withdraw(stakeBalance);\r\n        }\r\n        isShutdown = true;\r\n    }\r\n\r\n    //set approvals for staking cvx and cvxcrv\r\n    function setApprovals() external {\r\n        IERC20(cvxCrv).safeApprove(cvxcrvStaking, 0);\r\n        IERC20(cvxCrv).safeApprove(cvxcrvStaking, uint256(-1));\r\n\r\n        IERC20(stakingToken).safeApprove(stakingProxy, 0);\r\n        IERC20(stakingToken).safeApprove(stakingProxy, uint256(-1));\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    function _rewardPerToken(address _rewardsToken) internal view returns(uint256) {\r\n        if (boostedSupply == 0) {\r\n            return rewardData[_rewardsToken].rewardPerTokenStored;\r\n        }\r\n        return\r\n        uint256(rewardData[_rewardsToken].rewardPerTokenStored).add(\r\n            _lastTimeRewardApplicable(rewardData[_rewardsToken].periodFinish).sub(\r\n                rewardData[_rewardsToken].lastUpdateTime).mul(\r\n                rewardData[_rewardsToken].rewardRate).mul(1e18).div(rewardData[_rewardsToken].useBoost ? boostedSupply : lockedSupply)\r\n        );\r\n    }\r\n\r\n    function _earned(\r\n        address _user,\r\n        address _rewardsToken,\r\n        uint256 _balance\r\n    ) internal view returns(uint256) {\r\n        return _balance.mul(\r\n            _rewardPerToken(_rewardsToken).sub(userRewardPerTokenPaid[_user][_rewardsToken])\r\n        ).div(1e18).add(rewards[_user][_rewardsToken]);\r\n    }\r\n\r\n    function _lastTimeRewardApplicable(uint256 _finishTime) internal view returns(uint256){\r\n        return Math.min(block.timestamp, _finishTime);\r\n    }\r\n\r\n    function lastTimeRewardApplicable(address _rewardsToken) public view returns(uint256) {\r\n        return _lastTimeRewardApplicable(rewardData[_rewardsToken].periodFinish);\r\n    }\r\n\r\n    function rewardPerToken(address _rewardsToken) external view returns(uint256) {\r\n        return _rewardPerToken(_rewardsToken);\r\n    }\r\n\r\n    function getRewardForDuration(address _rewardsToken) external view returns(uint256) {\r\n        return uint256(rewardData[_rewardsToken].rewardRate).mul(rewardsDuration);\r\n    }\r\n\r\n    // Address and claimable amount of all reward tokens for the given account\r\n    function claimableRewards(address _account) external view returns(EarnedData[] memory userRewards) {\r\n        userRewards = new EarnedData[](rewardTokens.length);\r\n        Balances storage userBalance = balances[_account];\r\n        uint256 boostedBal = userBalance.boosted;\r\n        for (uint256 i = 0; i < userRewards.length; i++) {\r\n            address token = rewardTokens[i];\r\n            userRewards[i].token = token;\r\n            userRewards[i].amount = _earned(_account, token, rewardData[token].useBoost ? boostedBal : userBalance.locked);\r\n        }\r\n        return userRewards;\r\n    }\r\n\r\n    // Total BOOSTED balance of an account, including unlocked but not withdrawn tokens\r\n    function rewardWeightOf(address _user) view external returns(uint256 amount) {\r\n        return balances[_user].boosted;\r\n    }\r\n\r\n    // total token balance of an account, including unlocked but not withdrawn tokens\r\n    function lockedBalanceOf(address _user) view external returns(uint256 amount) {\r\n        return balances[_user].locked;\r\n    }\r\n\r\n    //BOOSTED balance of an account which only includes properly locked tokens as of the most recent eligible epoch\r\n    function balanceOf(address _user) view external returns(uint256 amount) {\r\n        LockedBalance[] storage locks = userLocks[_user];\r\n        Balances storage userBalance = balances[_user];\r\n        uint256 nextUnlockIndex = userBalance.nextUnlockIndex;\r\n\r\n        //start with current boosted amount\r\n        amount = balances[_user].boosted;\r\n\r\n        uint256 locksLength = locks.length;\r\n        //remove old records only (will be better gas-wise than adding up)\r\n        for (uint i = nextUnlockIndex; i < locksLength; i++) {\r\n            if (locks[i].unlockTime <= block.timestamp) {\r\n                amount = amount.sub(locks[i].boosted);\r\n            } else {\r\n                //stop now as no futher checks are needed\r\n                break;\r\n            }\r\n        }\r\n\r\n        //also remove amount in the current epoch\r\n        uint256 currentEpoch = block.timestamp.div(rewardsDuration).mul(rewardsDuration);\r\n        if (locksLength > 0 && uint256(locks[locksLength - 1].unlockTime).sub(lockDuration) == currentEpoch) {\r\n            amount = amount.sub(locks[locksLength - 1].boosted);\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    //BOOSTED balance of an account which only includes properly locked tokens at the given epoch\r\n    function balanceAtEpochOf(uint256 _epoch, address _user) view external returns(uint256 amount) {\r\n        LockedBalance[] storage locks = userLocks[_user];\r\n\r\n        //get timestamp of given epoch index\r\n        uint256 epochTime = epochs[_epoch].date;\r\n        //get timestamp of first non-inclusive epoch\r\n        uint256 cutoffEpoch = epochTime.sub(lockDuration);\r\n\r\n        //current epoch is not counted\r\n        uint256 currentEpoch = block.timestamp.div(rewardsDuration).mul(rewardsDuration);\r\n\r\n        //need to add up since the range could be in the middle somewhere\r\n        //traverse inversely to make more current queries more gas efficient\r\n        for (uint i = locks.length - 1; i + 1 != 0; i--) {\r\n            uint256 lockEpoch = uint256(locks[i].unlockTime).sub(lockDuration);\r\n            //lock epoch must be less or equal to the epoch we're basing from.\r\n            //also not include the current epoch\r\n            if (lockEpoch <= epochTime && lockEpoch < currentEpoch) {\r\n                if (lockEpoch > cutoffEpoch) {\r\n                    amount = amount.add(locks[i].boosted);\r\n                } else {\r\n                    //stop now as no futher checks matter\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    //supply of all properly locked BOOSTED balances at most recent eligible epoch\r\n    function totalSupply() view external returns(uint256 supply) {\r\n\r\n        uint256 currentEpoch = block.timestamp.div(rewardsDuration).mul(rewardsDuration);\r\n        uint256 cutoffEpoch = currentEpoch.sub(lockDuration);\r\n        uint256 epochindex = epochs.length;\r\n\r\n        //do not include current epoch's supply\r\n        if ( uint256(epochs[epochindex - 1].date) == currentEpoch) {\r\n            epochindex--;\r\n        }\r\n\r\n        //traverse inversely to make more current queries more gas efficient\r\n        for (uint i = epochindex - 1; i + 1 != 0; i--) {\r\n            Epoch storage e = epochs[i];\r\n            if (uint256(e.date) <= cutoffEpoch) {\r\n                break;\r\n            }\r\n            supply = supply.add(e.supply);\r\n        }\r\n\r\n        return supply;\r\n    }\r\n\r\n    //supply of all properly locked BOOSTED balances at the given epoch\r\n    function totalSupplyAtEpoch(uint256 _epoch) view external returns(uint256 supply) {\r\n\r\n        uint256 epochStart = uint256(epochs[_epoch].date).div(rewardsDuration).mul(rewardsDuration);\r\n        uint256 cutoffEpoch = epochStart.sub(lockDuration);\r\n        uint256 currentEpoch = block.timestamp.div(rewardsDuration).mul(rewardsDuration);\r\n\r\n        //do not include current epoch's supply\r\n        if (uint256(epochs[_epoch].date) == currentEpoch) {\r\n            _epoch--;\r\n        }\r\n\r\n        //traverse inversely to make more current queries more gas efficient\r\n        for (uint i = _epoch; i + 1 != 0; i--) {\r\n            Epoch storage e = epochs[i];\r\n            if (uint256(e.date) <= cutoffEpoch) {\r\n                break;\r\n            }\r\n            supply = supply.add(epochs[i].supply);\r\n        }\r\n\r\n        return supply;\r\n    }\r\n\r\n    //find an epoch index based on timestamp\r\n    function findEpochId(uint256 _time) view external returns(uint256 epoch) {\r\n        uint256 max = epochs.length - 1;\r\n        uint256 min = 0;\r\n\r\n        //convert to start point\r\n        _time = _time.div(rewardsDuration).mul(rewardsDuration);\r\n\r\n        for (uint256 i = 0; i < 128; i++) {\r\n            if (min >= max) break;\r\n\r\n            uint256 mid = (min + max + 1) / 2;\r\n            uint256 midEpochBlock = epochs[mid].date;\r\n            if(midEpochBlock == _time){\r\n                //found\r\n                return mid;\r\n            }else if (midEpochBlock < _time) {\r\n                min = mid;\r\n            } else{\r\n                max = mid - 1;\r\n            }\r\n        }\r\n        return min;\r\n    }\r\n\r\n\r\n    // Information on a user's locked balances\r\n    function lockedBalances(\r\n        address _user\r\n    ) view external returns(\r\n        uint256 total,\r\n        uint256 unlockable,\r\n        uint256 locked,\r\n        LockedBalance[] memory lockData\r\n    ) {\r\n        LockedBalance[] storage locks = userLocks[_user];\r\n        Balances storage userBalance = balances[_user];\r\n        uint256 nextUnlockIndex = userBalance.nextUnlockIndex;\r\n        uint256 idx;\r\n        for (uint i = nextUnlockIndex; i < locks.length; i++) {\r\n            if (locks[i].unlockTime > block.timestamp) {\r\n                if (idx == 0) {\r\n                    lockData = new LockedBalance[](locks.length - i);\r\n                }\r\n                lockData[idx] = locks[i];\r\n                idx++;\r\n                locked = locked.add(locks[i].amount);\r\n            } else {\r\n                unlockable = unlockable.add(locks[i].amount);\r\n            }\r\n        }\r\n        return (userBalance.locked, unlockable, locked, lockData);\r\n    }\r\n\r\n    //number of epochs\r\n    function epochCount() external view returns(uint256) {\r\n        return epochs.length;\r\n    }\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    function checkpointEpoch() external {\r\n        _checkpointEpoch();\r\n    }\r\n\r\n    //insert a new epoch if needed. fill in any gaps\r\n    function _checkpointEpoch() internal {\r\n        uint256 currentEpoch = block.timestamp.div(rewardsDuration).mul(rewardsDuration);\r\n        uint256 epochindex = epochs.length;\r\n\r\n        //first epoch add in constructor, no need to check 0 length\r\n\r\n        //check to add\r\n        if (epochs[epochindex - 1].date < currentEpoch) {\r\n            //fill any epoch gaps\r\n            while(epochs[epochs.length-1].date != currentEpoch){\r\n                uint256 nextEpochDate = uint256(epochs[epochs.length-1].date).add(rewardsDuration);\r\n                epochs.push(Epoch({\r\n                    supply: 0,\r\n                    date: uint32(nextEpochDate)\r\n                }));\r\n            }\r\n\r\n            //update boost parameters on a new epoch\r\n            if(boostRate != nextBoostRate){\r\n                boostRate = nextBoostRate;\r\n            }\r\n            if(maximumBoostPayment != nextMaximumBoostPayment){\r\n                maximumBoostPayment = nextMaximumBoostPayment;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Locked tokens cannot be withdrawn for lockDuration and are eligible to receive stakingReward rewards\r\n    function lock(address _account, uint256 _amount, uint256 _spendRatio) external nonReentrant updateReward(_account) {\r\n\r\n        //pull tokens\r\n        stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n        //lock\r\n        _lock(_account, _amount, _spendRatio);\r\n    }\r\n\r\n    //lock tokens\r\n    function _lock(address _account, uint256 _amount, uint256 _spendRatio) internal {\r\n        require(_amount > 0, \"Cannot stake 0\");\r\n        require(_spendRatio <= maximumBoostPayment, \"over max spend\");\r\n        require(!isShutdown, \"shutdown\");\r\n\r\n        Balances storage bal = balances[_account];\r\n\r\n        //must try check pointing epoch first\r\n        _checkpointEpoch();\r\n\r\n        //calc lock and boosted amount\r\n        uint256 spendAmount = _amount.mul(_spendRatio).div(denominator);\r\n        uint256 boostRatio = boostRate.mul(_spendRatio).div(maximumBoostPayment==0?1:maximumBoostPayment);\r\n        uint112 lockAmount = _amount.sub(spendAmount).to112();\r\n        uint112 boostedAmount = _amount.add(_amount.mul(boostRatio).div(denominator)).to112();\r\n\r\n        //add user balances\r\n        bal.locked = bal.locked.add(lockAmount);\r\n        bal.boosted = bal.boosted.add(boostedAmount);\r\n\r\n        //add to total supplies\r\n        lockedSupply = lockedSupply.add(lockAmount);\r\n        boostedSupply = boostedSupply.add(boostedAmount);\r\n\r\n        //add user lock records or add to current\r\n        uint256 currentEpoch = block.timestamp.div(rewardsDuration).mul(rewardsDuration);\r\n        uint256 unlockTime = currentEpoch.add(lockDuration);\r\n        uint256 idx = userLocks[_account].length;\r\n        if (idx == 0 || userLocks[_account][idx - 1].unlockTime < unlockTime) {\r\n            userLocks[_account].push(LockedBalance({\r\n                amount: lockAmount,\r\n                boosted: boostedAmount,\r\n                unlockTime: uint32(unlockTime)\r\n            }));\r\n        } else {\r\n            LockedBalance storage userL = userLocks[_account][idx - 1];\r\n            userL.amount = userL.amount.add(lockAmount);\r\n            userL.boosted = userL.boosted.add(boostedAmount);\r\n        }\r\n\r\n        \r\n        //update epoch supply, epoch checkpointed above so safe to add to latest\r\n        Epoch storage e = epochs[epochs.length - 1];\r\n        e.supply = e.supply.add(uint224(boostedAmount));\r\n\r\n        //send boost payment\r\n        if (spendAmount > 0) {\r\n            stakingToken.safeTransfer(boostPayment, spendAmount);\r\n        }\r\n\r\n        //update staking, allow a bit of leeway for smaller deposits to reduce gas\r\n        updateStakeRatio(stakeOffsetOnLock);\r\n\r\n        emit Staked(_account, _amount, lockAmount, boostedAmount);\r\n    }\r\n\r\n    // Withdraw all currently locked tokens where the unlock time has passed\r\n    function _processExpiredLocks(address _account, bool _relock, uint256 _spendRatio, address _withdrawTo, address _rewardAddress, uint256 _checkDelay) internal updateReward(_account) {\r\n        LockedBalance[] storage locks = userLocks[_account];\r\n        Balances storage userBalance = balances[_account];\r\n        uint112 locked;\r\n        uint112 boostedAmount;\r\n        uint256 length = locks.length;\r\n        uint256 reward = 0;\r\n        \r\n        if (isShutdown || locks[length - 1].unlockTime <= block.timestamp.sub(_checkDelay)) {\r\n            //if time is beyond last lock, can just bundle everything together\r\n            locked = userBalance.locked;\r\n            boostedAmount = userBalance.boosted;\r\n\r\n            //dont delete, just set next index\r\n            userBalance.nextUnlockIndex = length.to32();\r\n\r\n            //check for kick reward\r\n            //this wont have the exact reward rate that you would get if looped through\r\n            //but this section is supposed to be for quick and easy low gas processing of all locks\r\n            //we'll assume that if the reward was good enough someone would have processed at an earlier epoch\r\n            if (_checkDelay > 0) {\r\n                uint256 currentEpoch = block.timestamp.sub(_checkDelay).div(rewardsDuration).mul(rewardsDuration);\r\n                uint256 epochsover = currentEpoch.sub(uint256(locks[length - 1].unlockTime)).div(rewardsDuration);\r\n                uint256 rRate = MathUtil.min(kickRewardPerEpoch.mul(epochsover+1), denominator);\r\n                reward = uint256(locks[length - 1].amount).mul(rRate).div(denominator);\r\n            }\r\n        } else {\r\n\r\n            //use a processed index(nextUnlockIndex) to not loop as much\r\n            //deleting does not change array length\r\n            uint32 nextUnlockIndex = userBalance.nextUnlockIndex;\r\n            for (uint i = nextUnlockIndex; i < length; i++) {\r\n                //unlock time must be less or equal to time\r\n                if (locks[i].unlockTime > block.timestamp.sub(_checkDelay)) break;\r\n\r\n                //add to cumulative amounts\r\n                locked = locked.add(locks[i].amount);\r\n                boostedAmount = boostedAmount.add(locks[i].boosted);\r\n\r\n                //check for kick reward\r\n                //each epoch over due increases reward\r\n                if (_checkDelay > 0) {\r\n                    uint256 currentEpoch = block.timestamp.sub(_checkDelay).div(rewardsDuration).mul(rewardsDuration);\r\n                    uint256 epochsover = currentEpoch.sub(uint256(locks[i].unlockTime)).div(rewardsDuration);\r\n                    uint256 rRate = MathUtil.min(kickRewardPerEpoch.mul(epochsover+1), denominator);\r\n                    reward = reward.add( uint256(locks[i].amount).mul(rRate).div(denominator));\r\n                }\r\n                //set next unlock index\r\n                nextUnlockIndex++;\r\n            }\r\n            //update next unlock index\r\n            userBalance.nextUnlockIndex = nextUnlockIndex;\r\n        }\r\n        require(locked > 0, \"no exp locks\");\r\n\r\n        //update user balances and total supplies\r\n        userBalance.locked = userBalance.locked.sub(locked);\r\n        userBalance.boosted = userBalance.boosted.sub(boostedAmount);\r\n        lockedSupply = lockedSupply.sub(locked);\r\n        boostedSupply = boostedSupply.sub(boostedAmount);\r\n\r\n        emit Withdrawn(_account, locked, _relock);\r\n\r\n        //send process incentive\r\n        if (reward > 0) {\r\n            //if theres a reward(kicked), it will always be a withdraw only\r\n            //preallocate enough cvx from stake contract to pay for both reward and withdraw\r\n            allocateCVXForTransfer(uint256(locked));\r\n\r\n            //reduce return amount by the kick reward\r\n            locked = locked.sub(reward.to112());\r\n            \r\n            //transfer reward\r\n            transferCVX(_rewardAddress, reward, false);\r\n\r\n            emit KickReward(_rewardAddress, _account, reward);\r\n        }else if(_spendRatio > 0){\r\n            //preallocate enough cvx to transfer the boost cost\r\n            allocateCVXForTransfer( uint256(locked).mul(_spendRatio).div(denominator) );\r\n        }\r\n\r\n        //relock or return to user\r\n        if (_relock) {\r\n            _lock(_withdrawTo, locked, _spendRatio);\r\n        } else {\r\n            transferCVX(_withdrawTo, locked, true);\r\n        }\r\n    }\r\n\r\n    // Withdraw/relock all currently locked tokens where the unlock time has passed\r\n    function processExpiredLocks(bool _relock, uint256 _spendRatio, address _withdrawTo) external nonReentrant {\r\n        _processExpiredLocks(msg.sender, _relock, _spendRatio, _withdrawTo, msg.sender, 0);\r\n    }\r\n\r\n    // Withdraw/relock all currently locked tokens where the unlock time has passed\r\n    function processExpiredLocks(bool _relock) external nonReentrant {\r\n        _processExpiredLocks(msg.sender, _relock, 0, msg.sender, msg.sender, 0);\r\n    }\r\n\r\n    function kickExpiredLocks(address _account) external nonReentrant {\r\n        //allow kick after grace period of 'kickRewardEpochDelay'\r\n        _processExpiredLocks(_account, false, 0, _account, msg.sender, rewardsDuration.mul(kickRewardEpochDelay));\r\n    }\r\n\r\n    //pull required amount of cvx from staking for an upcoming transfer\r\n    function allocateCVXForTransfer(uint256 _amount) internal{\r\n        uint256 balance = stakingToken.balanceOf(address(this));\r\n        if (_amount > balance) {\r\n            IStakingProxy(stakingProxy).withdraw(_amount.sub(balance));\r\n        }\r\n    }\r\n\r\n    //transfer helper: pull enough from staking, transfer, updating staking ratio\r\n    function transferCVX(address _account, uint256 _amount, bool _updateStake) internal {\r\n        //allocate enough cvx from staking for the transfer\r\n        allocateCVXForTransfer(_amount);\r\n        //transfer\r\n        stakingToken.safeTransfer(_account, _amount);\r\n\r\n        //update staking\r\n        if(_updateStake){\r\n            updateStakeRatio(0);\r\n        }\r\n    }\r\n\r\n    //calculate how much cvx should be staked. update if needed\r\n    function updateStakeRatio(uint256 _offset) internal {\r\n        if (isShutdown) return;\r\n\r\n        //get balances\r\n        uint256 local = stakingToken.balanceOf(address(this));\r\n        uint256 staked = IStakingProxy(stakingProxy).getBalance();\r\n        uint256 total = local.add(staked);\r\n        \r\n        if(total == 0) return;\r\n\r\n        //current staked ratio\r\n        uint256 ratio = staked.mul(denominator).div(total);\r\n        //mean will be where we reset to if unbalanced\r\n        uint256 mean = maximumStake.add(minimumStake).div(2);\r\n        uint256 max = maximumStake.add(_offset);\r\n        uint256 min = Math.min(minimumStake, minimumStake - _offset);\r\n        if (ratio > max) {\r\n            //remove\r\n            uint256 remove = staked.sub(total.mul(mean).div(denominator));\r\n            IStakingProxy(stakingProxy).withdraw(remove);\r\n        } else if (ratio < min) {\r\n            //add\r\n            uint256 increase = total.mul(mean).div(denominator).sub(staked);\r\n            stakingToken.safeTransfer(stakingProxy, increase);\r\n            IStakingProxy(stakingProxy).stake();\r\n        }\r\n    }\r\n\r\n    // Claim all pending rewards\r\n    function getReward(address _account, bool _stake) public nonReentrant updateReward(_account) {\r\n        for (uint i; i < rewardTokens.length; i++) {\r\n            address _rewardsToken = rewardTokens[i];\r\n            uint256 reward = rewards[_account][_rewardsToken];\r\n            if (reward > 0) {\r\n                rewards[_account][_rewardsToken] = 0;\r\n                if (_rewardsToken == cvxCrv && _stake) {\r\n                    IRewardStaking(cvxcrvStaking).stakeFor(_account, reward);\r\n                } else {\r\n                    IERC20(_rewardsToken).safeTransfer(_account, reward);\r\n                }\r\n                emit RewardPaid(_account, _rewardsToken, reward);\r\n            }\r\n        }\r\n    }\r\n\r\n    // claim all pending rewards\r\n    function getReward(address _account) external{\r\n        getReward(_account,false);\r\n    }\r\n\r\n\r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n    function _notifyReward(address _rewardsToken, uint256 _reward) internal {\r\n        Reward storage rdata = rewardData[_rewardsToken];\r\n\r\n        if (block.timestamp >= rdata.periodFinish) {\r\n            rdata.rewardRate = _reward.div(rewardsDuration).to208();\r\n        } else {\r\n            uint256 remaining = uint256(rdata.periodFinish).sub(block.timestamp);\r\n            uint256 leftover = remaining.mul(rdata.rewardRate);\r\n            rdata.rewardRate = _reward.add(leftover).div(rewardsDuration).to208();\r\n        }\r\n\r\n        rdata.lastUpdateTime = block.timestamp.to40();\r\n        rdata.periodFinish = block.timestamp.add(rewardsDuration).to40();\r\n    }\r\n\r\n    function notifyRewardAmount(address _rewardsToken, uint256 _reward) external updateReward(address(0)) {\r\n        require(rewardDistributors[_rewardsToken][msg.sender]);\r\n        require(_reward > 0, \"No reward\");\r\n\r\n        _notifyReward(_rewardsToken, _reward);\r\n\r\n        // handle the transfer of reward tokens via `transferFrom` to reduce the number\r\n        // of transactions required and ensure correctness of the _reward amount\r\n        IERC20(_rewardsToken).safeTransferFrom(msg.sender, address(this), _reward);\r\n        \r\n        emit RewardAdded(_rewardsToken, _reward);\r\n\r\n        if(_rewardsToken == cvxCrv){\r\n            //update staking ratio if main reward\r\n            updateStakeRatio(0);\r\n        }\r\n    }\r\n\r\n    // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\r\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\r\n        require(_tokenAddress != address(stakingToken), \"Cannot withdraw staking token\");\r\n        require(rewardData[_tokenAddress].lastUpdateTime == 0, \"Cannot withdraw reward token\");\r\n        IERC20(_tokenAddress).safeTransfer(owner(), _tokenAmount);\r\n        emit Recovered(_tokenAddress, _tokenAmount);\r\n    }\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier updateReward(address _account) {\r\n        {//stack too deep\r\n            Balances storage userBalance = balances[_account];\r\n            uint256 boostedBal = userBalance.boosted;\r\n            for (uint i = 0; i < rewardTokens.length; i++) {\r\n                address token = rewardTokens[i];\r\n                rewardData[token].rewardPerTokenStored = _rewardPerToken(token).to208();\r\n                rewardData[token].lastUpdateTime = _lastTimeRewardApplicable(rewardData[token].periodFinish).to40();\r\n                if (_account != address(0)) {\r\n                    //check if reward is boostable or not. use boosted or locked balance accordingly\r\n                    rewards[_account][token] = _earned(_account, token, rewardData[token].useBoost ? boostedBal : userBalance.locked );\r\n                    userRewardPerTokenPaid[_account][token] = rewardData[token].rewardPerTokenStored;\r\n                }\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n    event RewardAdded(address indexed _token, uint256 _reward);\r\n    event Staked(address indexed _user, uint256 _paidAmount, uint256 _lockedAmount, uint256 _boostedAmount);\r\n    event Withdrawn(address indexed _user, uint256 _amount, bool _relocked);\r\n    event KickReward(address indexed _user, address indexed _kicked, uint256 _reward);\r\n    event RewardPaid(address indexed _user, address indexed _rewardsToken, uint256 _reward);\r\n    event Recovered(address _token, uint256 _amount);\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_kicked\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"KickReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_paidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_boostedAmount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_relocked\",\"type\":\"bool\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_useBoost\",\"type\":\"bool\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"approveRewardDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceAtEpochOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"locked\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"boosted\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"nextUnlockIndex\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostPayment\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"claimableRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CvxLocker.EarnedData[]\",\"name\":\"userRewards\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxCrv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxcrvStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochs\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"supply\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"date\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"findEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"kickExpiredLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kickRewardEpochDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kickRewardPerEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_spendRatio\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"lockedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"boosted\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"unlockTime\",\"type\":\"uint32\"}],\"internalType\":\"struct CvxLocker.LockedBalance[]\",\"name\":\"lockData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumBoostPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextBoostRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextMaximumBoostPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_relock\",\"type\":\"bool\"}],\"name\":\"processExpiredLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_relock\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_spendRatio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_withdrawTo\",\"type\":\"address\"}],\"name\":\"processExpiredLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"useBoost\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"periodFinish\",\"type\":\"uint40\"},{\"internalType\":\"uint208\",\"name\":\"rewardRate\",\"type\":\"uint208\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTime\",\"type\":\"uint40\"},{\"internalType\":\"uint208\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint208\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardDistributors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"rewardWeightOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setApprovals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receivingAddress\",\"type\":\"address\"}],\"name\":\"setBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setKickIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maximum\",\"type\":\"uint256\"}],\"name\":\"setStakeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"setStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeOffsetOnLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAtEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userLocks\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"boosted\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"unlockTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CvxLocker","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2b34925688364aade08a9f3748583c004a8edf471b090a05fc6b66888223e623"}]}