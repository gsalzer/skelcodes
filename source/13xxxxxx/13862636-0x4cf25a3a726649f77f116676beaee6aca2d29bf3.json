{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/support/PathFinder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {ISwapRouter} from \\\"../integrations/uniswap/IUniswapV3.sol\\\";\\nimport {IUniswapV2Router02} from \\\"../integrations/uniswap/IUniswapV2Router02.sol\\\";\\nimport {BytesLib} from \\\"../integrations/uniswap/BytesLib.sol\\\";\\nimport {ICurvePool} from \\\"../integrations/curve/ICurvePool.sol\\\";\\nimport {Constants} from \\\"../libraries/helpers/Constants.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\nimport {IQuoter} from \\\"../integrations/uniswap/IQuoter.sol\\\";\\nimport {AddressProvider} from \\\"../core/AddressProvider.sol\\\";\\nimport {ContractsRegister} from \\\"../core/ContractsRegister.sol\\\";\\nimport {ICreditManager} from \\\"../interfaces/ICreditManager.sol\\\";\\nimport {ICreditFilter} from \\\"../interfaces/ICreditFilter.sol\\\";\\nimport {PriceOracle} from \\\"../oracles/PriceOracle.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract PathFinder {\\n    using SafeMath for uint256;\\n    using BytesLib for bytes;\\n    AddressProvider public addressProvider;\\n    ContractsRegister public immutable contractsRegister;\\n    PriceOracle public priceOracle;\\n    address public wethToken;\\n\\n    // Mainnet\\n    //    address public constant ethToUsdPriceFeed =\\n    //    0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\\n\\n    // Kovan\\n    address public constant ethToUsdPriceFeed =\\n        0x9326BFA02ADD2366b30bacB125260Af641031331;\\n\\n    // Contract version\\n    uint256 public constant version = 1;\\n\\n    struct TradePath {\\n        address[] path;\\n        uint256 rate;\\n        uint256 expectedAmount;\\n    }\\n\\n    /// @dev Allows provide data for registered credit managers only to eliminated usage for non-gearbox contracts\\n    modifier registeredCreditManagerOnly(address creditManager) {\\n        // Could be optimised by adding internal list of creditManagers\\n        require(\\n            contractsRegister.isCreditManager(creditManager),\\n            Errors.REGISTERED_CREDIT_ACCOUNT_MANAGERS_ONLY\\n        ); // T:[WG-3]\\n\\n        _;\\n    }\\n\\n    constructor(address _addressProvider) {\\n        addressProvider = AddressProvider(_addressProvider);\\n        contractsRegister = ContractsRegister(\\n            addressProvider.getContractsRegister()\\n        );\\n\\n        priceOracle = PriceOracle(addressProvider.getPriceOracle());\\n        wethToken = addressProvider.getWethToken();\\n    }\\n\\n    function bestUniPath(\\n        uint256 swapInterface,\\n        address router,\\n        uint256 swapType,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        address[] memory tokens\\n    ) public returns (TradePath memory) {\\n        if (amount == 0) {\\n            return\\n                TradePath({path: new address[](3), rate: 0, expectedAmount: 0});\\n        }\\n\\n        // Checking path[2]:  [from,to]\\n        address[] memory path = new address[](2);\\n\\n        path[0] = from;\\n        path[1] = to;\\n\\n        (uint256 bestAmount, bool best) = _getAmountsUni(\\n            swapInterface,\\n            router,\\n            swapType,\\n            path,\\n            amount,\\n            swapType == Constants.EXACT_INPUT ? 0 : Constants.MAX_INT\\n        );\\n\\n        address[] memory bestPath;\\n        uint256 expectedAmount;\\n\\n        if (best) {\\n            bestPath = path;\\n        }\\n\\n        // Checking path[3]: [from, <connector>, to]\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            path = new address[](3);\\n            path[0] = from;\\n            path[2] = to;\\n\\n            if (tokens[i] != from && tokens[i] != to) {\\n                path[1] = tokens[i];\\n                (expectedAmount, best) = _getAmountsUni(\\n                    swapInterface,\\n                    router,\\n                    swapType,\\n                    path,\\n                    amount,\\n                    bestAmount\\n                );\\n                if (best) {\\n                    bestAmount = expectedAmount;\\n                    bestPath = path;\\n                }\\n            }\\n        }\\n\\n        uint256 bestRate = 0;\\n\\n        if (bestAmount == Constants.MAX_INT) {\\n            bestAmount = 0;\\n        }\\n\\n        if (bestAmount != 0 && amount != 0) {\\n            bestRate = swapType == Constants.EXACT_INPUT\\n                ? Constants.WAD.mul(amount).div(bestAmount)\\n                : Constants.WAD.mul(bestAmount).div(amount);\\n        }\\n\\n        return\\n            TradePath({\\n                rate: bestRate,\\n                path: bestPath,\\n                expectedAmount: bestAmount\\n            });\\n    }\\n\\n    function _getAmountsUni(\\n        uint256 swapInterface,\\n        address router,\\n        uint256 swapType,\\n        address[] memory path,\\n        uint256 amount,\\n        uint256 bestAmount\\n    ) internal returns (uint256, bool) {\\n        return\\n            swapInterface == Constants.UNISWAP_V2\\n                ? _getAmountsV2(\\n                    IUniswapV2Router02(router),\\n                    swapType,\\n                    path,\\n                    amount,\\n                    bestAmount\\n                )\\n                : _getAmountsV3(\\n                    IQuoter(router),\\n                    swapType,\\n                    path,\\n                    amount,\\n                    bestAmount\\n                );\\n    }\\n\\n    function _getAmountsV2(\\n        IUniswapV2Router02 router,\\n        uint256 swapType,\\n        address[] memory path,\\n        uint256 amount,\\n        uint256 bestAmount\\n    ) internal view returns (uint256, bool) {\\n        uint256 expectedAmount;\\n\\n        if (swapType == Constants.EXACT_INPUT) {\\n            try router.getAmountsOut(amount, path) returns (\\n                uint256[] memory amountsOut\\n            ) {\\n                expectedAmount = amountsOut[path.length - 1];\\n            } catch {\\n                return (bestAmount, false);\\n            }\\n        } else if (swapType == Constants.EXACT_OUTPUT) {\\n            try router.getAmountsIn(amount, path) returns (\\n                uint256[] memory amountsIn\\n            ) {\\n                expectedAmount = amountsIn[0];\\n            } catch {\\n                return (bestAmount, false);\\n            }\\n        } else {\\n            revert(\\\"Unknown swap type\\\");\\n        }\\n\\n        if (\\n            (swapType == Constants.EXACT_INPUT &&\\n                expectedAmount > bestAmount) ||\\n            (swapType == Constants.EXACT_OUTPUT && expectedAmount < bestAmount)\\n        ) {\\n            return (expectedAmount, true);\\n        }\\n\\n        return (bestAmount, false);\\n    }\\n\\n    function _getAmountsV3(\\n        IQuoter quoter,\\n        uint256 swapType,\\n        address[] memory path,\\n        uint256 amount,\\n        uint256 bestAmount\\n    ) internal returns (uint256, bool) {\\n        uint256 expectedAmount;\\n\\n        if (swapType == Constants.EXACT_INPUT) {\\n            try\\n                quoter.quoteExactInput(\\n                    convertPathToPathV3(path, swapType),\\n                    amount\\n                )\\n            returns (uint256 amountOut) {\\n                expectedAmount = amountOut;\\n            } catch {\\n                return (bestAmount, false);\\n            }\\n        } else if (swapType == Constants.EXACT_OUTPUT) {\\n            try\\n                quoter.quoteExactOutput(\\n                    convertPathToPathV3(path, swapType),\\n                    amount\\n                )\\n            returns (uint256 amountIn) {\\n                expectedAmount = amountIn;\\n            } catch {\\n                return (bestAmount, false);\\n            }\\n        } else {\\n            revert(\\\"Unknown swap type\\\");\\n        }\\n\\n        if (\\n            (swapType == Constants.EXACT_INPUT &&\\n                expectedAmount > bestAmount) ||\\n            (swapType == Constants.EXACT_OUTPUT && expectedAmount < bestAmount)\\n        ) {\\n            return (expectedAmount, true);\\n        }\\n\\n        return (bestAmount, false);\\n    }\\n\\n    function convertPathToPathV3(address[] memory path, uint256 swapType)\\n        public\\n        pure\\n        returns (bytes memory result)\\n    {\\n        uint24 fee = 3000;\\n\\n        if (swapType == Constants.EXACT_INPUT) {\\n            for (uint256 i = 0; i < path.length.sub(1); i++) {\\n                result = result.concat(abi.encodePacked(path[i], fee));\\n            }\\n            result = result.concat(abi.encodePacked(path[path.length - 1]));\\n        } else {\\n            for (uint256 i = path.length.sub(1); i > 0; i--) {\\n                result = result.concat(abi.encodePacked(path[i], fee));\\n            }\\n            result = result.concat(abi.encodePacked(path[0]));\\n        }\\n    }\\n\\n    function getClosurePaths(\\n        address router,\\n        address _creditManager,\\n        address borrower,\\n        address[] memory connectorTokens\\n    )\\n        external\\n        registeredCreditManagerOnly(_creditManager)\\n        returns (TradePath[] memory result)\\n    {\\n        ICreditFilter creditFilter = ICreditFilter(\\n            ICreditManager(_creditManager).creditFilter()\\n        );\\n        result = new TradePath[](creditFilter.allowedTokensCount());\\n\\n        address creditAccount = ICreditManager(_creditManager)\\n        .getCreditAccountOrRevert(borrower);\\n        address underlyingToken = creditFilter.underlyingToken();\\n\\n        for (uint256 i = 0; i < creditFilter.allowedTokensCount(); i++) {\\n            (address token, uint256 balance, , ) = creditFilter\\n            .getCreditAccountTokenById(creditAccount, i);\\n\\n            if (i == 0) {\\n                result[0] = TradePath({\\n                    path: new address[](3),\\n                    rate: Constants.WAD,\\n                    expectedAmount: balance\\n                });\\n            } else {\\n                result[i] = bestUniPath(\\n                    Constants.UNISWAP_V2,\\n                    router,\\n                    Constants.EXACT_INPUT,\\n                    token,\\n                    underlyingToken,\\n                    balance,\\n                    connectorTokens\\n                );\\n            }\\n        }\\n    }\\n\\n    function getPrices(address[] calldata tokens)\\n        external\\n        view\\n        returns (uint256[] memory prices)\\n    {\\n        (\\n            ,\\n            //uint80 roundID,\\n            int256 ethPrice, //uint startedAt, //uint timeStamp, //uint80 answeredInRound\\n            ,\\n            ,\\n\\n        ) = AggregatorV3Interface(ethToUsdPriceFeed).latestRoundData();\\n        prices = new uint256[](tokens.length);\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            uint256 decimals = ERC20(tokens[i]).decimals();\\n            prices[i] = priceOracle\\n            .convert(10**decimals, tokens[i], wethToken)\\n            .mul(uint256(ethPrice))\\n            .div(Constants.WAD);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/integrations/uniswap/IUniswapV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport './IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter  {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"contracts/integrations/uniswap/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external  returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external  returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external  payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function factory() external override view returns (address);\\n    function WETH() external override view returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external override returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external override payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external override returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external override returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external override returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external override returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external override returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external override returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external override\\n    payable\\n    returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external override\\n    returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external override\\n    returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n    external override\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external override view returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external override view returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external override view returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external override view returns (uint[] memory amounts);\\n\\n    function getAmountsIn(uint amountOut, address[] calldata path) external override view returns (uint[] memory amounts);\\n\\n\\n}\\n\"\r\n    },\r\n    \"contracts/integrations/uniswap/BytesLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.5.0 <0.8.0;\\n\\nlibrary BytesLib {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_start + _length >= _start, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(\\n                    add(tempBytes, lengthmod),\\n                    mul(0x20, iszero(lengthmod))\\n                )\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(\\n                        add(\\n                            add(_bytes, lengthmod),\\n                            mul(0x20, iszero(lengthmod))\\n                        ),\\n                        _start\\n                    )\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        require(_start + 20 >= _start, \\\"toAddress_overflow\\\");\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(\\n                mload(add(add(_bytes, 0x20), _start)),\\n                0x1000000000000000000000000\\n            )\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint24)\\n    {\\n        require(_start + 3 >= _start, \\\"toUint24_overflow\\\");\\n        require(_bytes.length >= _start + 3, \\\"toUint24_outOfBounds\\\");\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/integrations/curve/ICurvePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.4;\\n\\ninterface ICurvePool {\\n    function coins(uint256) external view returns (address);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/helpers/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\nimport {PercentageMath} from \\\"../math/PercentageMath.sol\\\";\\n\\nlibrary Constants {\\n    uint256 constant MAX_INT =\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    // 25% of MAX_INT\\n    uint256 constant MAX_INT_4 =\\n        0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    // REWARD FOR LEAN DEPLOYMENT MINING\\n    uint256 constant ACCOUNT_CREATION_REWARD = 1e5;\\n    uint256 constant DEPLOYMENT_COST = 1e17;\\n\\n    // FEE = 10%\\n    uint256 constant FEE_INTEREST = 1000; // 10%\\n\\n    // FEE + LIQUIDATION_FEE 2%\\n    uint256 constant FEE_LIQUIDATION = 200;\\n\\n    // Liquidation premium 5%\\n    uint256 constant LIQUIDATION_DISCOUNTED_SUM = 9500;\\n\\n    // 100% - LIQUIDATION_FEE - LIQUIDATION_PREMIUM\\n    uint256 constant UNDERLYING_TOKEN_LIQUIDATION_THRESHOLD =\\n        LIQUIDATION_DISCOUNTED_SUM - FEE_LIQUIDATION;\\n\\n    // Seconds in a year\\n    uint256 constant SECONDS_PER_YEAR = 365 days;\\n    uint256 constant SECONDS_PER_ONE_AND_HALF_YEAR = SECONDS_PER_YEAR * 3 /2;\\n\\n    // 1e18\\n    uint256 constant RAY = 1e27;\\n    uint256 constant WAD = 1e18;\\n\\n    // OPERATIONS\\n    uint8 constant OPERATION_CLOSURE = 1;\\n    uint8 constant OPERATION_REPAY = 2;\\n    uint8 constant OPERATION_LIQUIDATION = 3;\\n\\n    // Decimals for leverage, so x4 = 4*LEVERAGE_DECIMALS for openCreditAccount function\\n    uint8 constant LEVERAGE_DECIMALS = 100;\\n\\n    // Maximum withdraw fee for pool in percentage math format. 100 = 1%\\n    uint8 constant MAX_WITHDRAW_FEE = 100;\\n\\n    uint256 constant CHI_THRESHOLD = 9950;\\n    uint256 constant HF_CHECK_INTERVAL_DEFAULT = 4;\\n\\n    uint256 constant NO_SWAP = 0;\\n    uint256 constant UNISWAP_V2 = 1;\\n    uint256 constant UNISWAP_V3 = 2;\\n    uint256 constant CURVE_V1 = 3;\\n    uint256 constant LP_YEARN = 4;\\n\\n    uint256 constant EXACT_INPUT = 1;\\n    uint256 constant EXACT_OUTPUT = 2;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/helpers/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\n\\n/// @title Errors library\\nlibrary Errors {\\n    //\\n    // COMMON\\n    //\\n\\n    string public constant ZERO_ADDRESS_IS_NOT_ALLOWED = \\\"Z0\\\";\\n    string public constant NOT_IMPLEMENTED = \\\"NI\\\";\\n    string public constant INCORRECT_PATH_LENGTH = \\\"PL\\\";\\n    string public constant INCORRECT_ARRAY_LENGTH = \\\"CR\\\";\\n    string public constant REGISTERED_CREDIT_ACCOUNT_MANAGERS_ONLY = \\\"CP\\\";\\n    string public constant REGISTERED_POOLS_ONLY = \\\"RP\\\";\\n    string public constant INCORRECT_PARAMETER = \\\"IP\\\";\\n\\n    //\\n    // MATH\\n    //\\n\\n    string public constant MATH_MULTIPLICATION_OVERFLOW = \\\"M1\\\";\\n    string public constant MATH_ADDITION_OVERFLOW = \\\"M2\\\";\\n    string public constant MATH_DIVISION_BY_ZERO = \\\"M3\\\";\\n\\n    //\\n    // POOL\\n    //\\n\\n    string public constant POOL_CONNECTED_CREDIT_MANAGERS_ONLY = \\\"PS0\\\";\\n    string public constant POOL_INCOMPATIBLE_CREDIT_ACCOUNT_MANAGER = \\\"PS1\\\";\\n    string public constant POOL_MORE_THAN_EXPECTED_LIQUIDITY_LIMIT = \\\"PS2\\\";\\n    string public constant POOL_INCORRECT_WITHDRAW_FEE = \\\"PS3\\\";\\n    string public constant POOL_CANT_ADD_CREDIT_MANAGER_TWICE = \\\"PS4\\\";\\n\\n    //\\n    // CREDIT MANAGER\\n    //\\n\\n    string public constant CM_NO_OPEN_ACCOUNT = \\\"CM1\\\";\\n    string\\n        public constant CM_ZERO_ADDRESS_OR_USER_HAVE_ALREADY_OPEN_CREDIT_ACCOUNT =\\n        \\\"CM2\\\";\\n\\n    string public constant CM_INCORRECT_AMOUNT = \\\"CM3\\\";\\n    string public constant CM_CAN_LIQUIDATE_WITH_SUCH_HEALTH_FACTOR = \\\"CM4\\\";\\n    string public constant CM_CAN_UPDATE_WITH_SUCH_HEALTH_FACTOR = \\\"CM5\\\";\\n    string public constant CM_WETH_GATEWAY_ONLY = \\\"CM6\\\";\\n    string public constant CM_INCORRECT_PARAMS = \\\"CM7\\\";\\n    string public constant CM_INCORRECT_FEES = \\\"CM8\\\";\\n    string public constant CM_MAX_LEVERAGE_IS_TOO_HIGH = \\\"CM9\\\";\\n    string public constant CM_CANT_CLOSE_WITH_LOSS = \\\"CMA\\\";\\n    string public constant CM_TARGET_CONTRACT_iS_NOT_ALLOWED = \\\"CMB\\\";\\n    string public constant CM_TRANSFER_FAILED = \\\"CMC\\\";\\n    string public constant CM_INCORRECT_NEW_OWNER = \\\"CME\\\";\\n\\n    //\\n    // ACCOUNT FACTORY\\n    //\\n\\n    string public constant AF_CANT_CLOSE_CREDIT_ACCOUNT_IN_THE_SAME_BLOCK =\\n        \\\"AF1\\\";\\n    string public constant AF_MINING_IS_FINISHED = \\\"AF2\\\";\\n    string public constant AF_CREDIT_ACCOUNT_NOT_IN_STOCK = \\\"AF3\\\";\\n    string public constant AF_EXTERNAL_ACCOUNTS_ARE_FORBIDDEN = \\\"AF4\\\";\\n\\n    //\\n    // ADDRESS PROVIDER\\n    //\\n\\n    string public constant AS_ADDRESS_NOT_FOUND = \\\"AP1\\\";\\n\\n    //\\n    // CONTRACTS REGISTER\\n    //\\n\\n    string public constant CR_POOL_ALREADY_ADDED = \\\"CR1\\\";\\n    string public constant CR_CREDIT_MANAGER_ALREADY_ADDED = \\\"CR2\\\";\\n\\n    //\\n    // CREDIT_FILTER\\n    //\\n\\n    string public constant CF_UNDERLYING_TOKEN_FILTER_CONFLICT = \\\"CF0\\\";\\n    string public constant CF_INCORRECT_LIQUIDATION_THRESHOLD = \\\"CF1\\\";\\n    string public constant CF_TOKEN_IS_NOT_ALLOWED = \\\"CF2\\\";\\n    string public constant CF_CREDIT_MANAGERS_ONLY = \\\"CF3\\\";\\n    string public constant CF_ADAPTERS_ONLY = \\\"CF4\\\";\\n    string public constant CF_OPERATION_LOW_HEALTH_FACTOR = \\\"CF5\\\";\\n    string public constant CF_TOO_MUCH_ALLOWED_TOKENS = \\\"CF6\\\";\\n    string public constant CF_INCORRECT_CHI_THRESHOLD = \\\"CF7\\\";\\n    string public constant CF_INCORRECT_FAST_CHECK = \\\"CF8\\\";\\n    string public constant CF_NON_TOKEN_CONTRACT = \\\"CF9\\\";\\n    string public constant CF_CONTRACT_IS_NOT_IN_ALLOWED_LIST = \\\"CFA\\\";\\n    string public constant CF_FAST_CHECK_NOT_COVERED_COLLATERAL_DROP = \\\"CFB\\\";\\n    string public constant CF_SOME_LIQUIDATION_THRESHOLD_MORE_THAN_NEW_ONE =\\n        \\\"CFC\\\";\\n    string public constant CF_ADAPTER_CAN_BE_USED_ONLY_ONCE = \\\"CFD\\\";\\n    string public constant CF_INCORRECT_PRICEFEED = \\\"CFE\\\";\\n    string public constant CF_TRANSFER_IS_NOT_ALLOWED = \\\"CFF\\\";\\n    string public constant CF_CREDIT_MANAGER_IS_ALREADY_SET = \\\"CFG\\\";\\n\\n    //\\n    // CREDIT ACCOUNT\\n    //\\n\\n    string public constant CA_CONNECTED_CREDIT_MANAGER_ONLY = \\\"CA1\\\";\\n    string public constant CA_FACTORY_ONLY = \\\"CA2\\\";\\n\\n    //\\n    // PRICE ORACLE\\n    //\\n\\n    string public constant PO_PRICE_FEED_DOESNT_EXIST = \\\"PO0\\\";\\n    string public constant PO_TOKENS_WITH_DECIMALS_MORE_18_ISNT_ALLOWED = \\\"PO1\\\";\\n    string public constant PO_AGGREGATOR_DECIMALS_SHOULD_BE_18 = \\\"PO2\\\";\\n\\n    //\\n    // ACL\\n    //\\n\\n    string public constant ACL_CALLER_NOT_PAUSABLE_ADMIN = \\\"ACL1\\\";\\n    string public constant ACL_CALLER_NOT_CONFIGURATOR = \\\"ACL2\\\";\\n\\n    //\\n    // WETH GATEWAY\\n    //\\n\\n    string public constant WG_DESTINATION_IS_NOT_WETH_COMPATIBLE = \\\"WG1\\\";\\n    string public constant WG_RECEIVE_IS_NOT_ALLOWED = \\\"WG2\\\";\\n    string public constant WG_NOT_ENOUGH_FUNDS = \\\"WG3\\\";\\n\\n    //\\n    // LEVERAGED ACTIONS\\n    //\\n\\n    string public constant LA_INCORRECT_VALUE = \\\"LA1\\\";\\n    string public constant LA_HAS_VALUE_WITH_TOKEN_TRANSFER = \\\"LA2\\\";\\n    string public constant LA_UNKNOWN_SWAP_INTERFACE = \\\"LA3\\\";\\n    string public constant LA_UNKNOWN_LP_INTERFACE = \\\"LA4\\\";\\n    string public constant LA_LOWER_THAN_AMOUNT_MIN = \\\"LA5\\\";\\n    string public constant LA_TOKEN_OUT_IS_NOT_COLLATERAL = \\\"LA6\\\";\\n\\n    //\\n    // YEARN PRICE FEED\\n    //\\n    string public constant YPF_PRICE_PER_SHARE_OUT_OF_RANGE = \\\"YP1\\\";\\n    string public constant YPF_INCORRECT_LIMITER_PARAMETERS = \\\"YP2\\\";\\n\\n    //\\n    // TOKEN DISTRIBUTOR\\n    //\\n    string public constant TD_WALLET_IS_ALREADY_CONNECTED_TO_VC = \\\"TD1\\\";\\n    string public constant TD_INCORRECT_WEIGHTS = \\\"TD2\\\";\\n    string public constant TD_NON_ZERO_BALANCE_AFTER_DISTRIBUTION = \\\"TD3\\\";\\n    string public constant TD_CONTRIBUTOR_IS_NOT_REGISTERED = \\\"TD4\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/integrations/uniswap/IQuoter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Quoter Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IQuoter {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountIn The desired input amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountOut The desired output amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"contracts/core/AddressProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\nimport {IAppAddressProvider} from \\\"../interfaces/app/IAppAddressProvider.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\n\\n\\n/// @title AddressRepository\\n/// @notice Stores addresses of deployed contracts\\ncontract AddressProvider is Ownable, IAppAddressProvider {\\n    // Mapping which keeps all addresses\\n    mapping(bytes32 => address) public addresses;\\n\\n    // Emits each time when new address is set\\n    event AddressSet(bytes32 indexed service, address indexed newAddress);\\n\\n    // This event is triggered when a call to ClaimTokens succeeds.\\n    event Claimed(uint256 user_id, address account, uint256 amount, bytes32 leaf);\\n\\n    // Repositories & services\\n    bytes32 public constant CONTRACTS_REGISTER = \\\"CONTRACTS_REGISTER\\\";\\n    bytes32 public constant ACL = \\\"ACL\\\";\\n    bytes32 public constant PRICE_ORACLE = \\\"PRICE_ORACLE\\\";\\n    bytes32 public constant ACCOUNT_FACTORY = \\\"ACCOUNT_FACTORY\\\";\\n    bytes32 public constant DATA_COMPRESSOR = \\\"DATA_COMPRESSOR\\\";\\n    bytes32 public constant TREASURY_CONTRACT = \\\"TREASURY_CONTRACT\\\";\\n    bytes32 public constant GEAR_TOKEN = \\\"GEAR_TOKEN\\\";\\n    bytes32 public constant WETH_TOKEN = \\\"WETH_TOKEN\\\";\\n    bytes32 public constant WETH_GATEWAY = \\\"WETH_GATEWAY\\\";\\n    bytes32 public constant LEVERAGED_ACTIONS = \\\"LEVERAGED_ACTIONS\\\";\\n\\n    // Contract version\\n    uint256 public constant version = 1;\\n\\n    constructor() {\\n        // @dev Emits first event for contract discovery\\n        emit AddressSet(\\\"ADDRESS_PROVIDER\\\", address(this));\\n    }\\n\\n    /// @return Address of ACL contract\\n    function getACL() external view returns (address) {\\n        return _getAddress(ACL); // T:[AP-3]\\n    }\\n\\n    /// @dev Sets address of ACL contract\\n    /// @param _address Address of ACL contract\\n    function setACL(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(ACL, _address); // T:[AP-3]\\n    }\\n\\n    /// @return Address of ContractsRegister\\n    function getContractsRegister() external view returns (address) {\\n        return _getAddress(CONTRACTS_REGISTER); // T:[AP-4]\\n    }\\n\\n    /// @dev Sets address of ContractsRegister\\n    /// @param _address Address of ContractsRegister\\n    function setContractsRegister(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(CONTRACTS_REGISTER, _address); // T:[AP-4]\\n    }\\n\\n    /// @return Address of PriceOracle\\n    function getPriceOracle() external view override returns (address) {\\n        return _getAddress(PRICE_ORACLE); // T:[AP-5]\\n    }\\n\\n    /// @dev Sets address of PriceOracle\\n    /// @param _address Address of PriceOracle\\n    function setPriceOracle(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(PRICE_ORACLE, _address); // T:[AP-5]\\n    }\\n\\n    /// @return Address of AccountFactory\\n    function getAccountFactory() external view returns (address) {\\n        return _getAddress(ACCOUNT_FACTORY); // T:[AP-6]\\n    }\\n\\n    /// @dev Sets address of AccountFactory\\n    /// @param _address Address of AccountFactory\\n    function setAccountFactory(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(ACCOUNT_FACTORY, _address); // T:[AP-7]\\n    }\\n\\n    /// @return Address of AccountFactory\\n    function getDataCompressor() external view override returns (address) {\\n        return _getAddress(DATA_COMPRESSOR); // T:[AP-8]\\n    }\\n\\n    /// @dev Sets address of AccountFactory\\n    /// @param _address Address of AccountFactory\\n    function setDataCompressor(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(DATA_COMPRESSOR, _address); // T:[AP-8]\\n    }\\n\\n    /// @return Address of Treasury contract\\n    function getTreasuryContract() external view returns (address) {\\n        return _getAddress(TREASURY_CONTRACT); //T:[AP-11]\\n    }\\n\\n    /// @dev Sets address of Treasury Contract\\n    /// @param _address Address of Treasury Contract\\n    function setTreasuryContract(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(TREASURY_CONTRACT, _address); //T:[AP-11]\\n    }\\n\\n    /// @return Address of GEAR token\\n    function getGearToken() external view override returns (address) {\\n        return _getAddress(GEAR_TOKEN); // T:[AP-12]\\n    }\\n\\n    /// @dev Sets address of GEAR token\\n    /// @param _address Address of GEAR token\\n    function setGearToken(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(GEAR_TOKEN, _address); // T:[AP-12]\\n    }\\n\\n    /// @return Address of WETH token\\n    function getWethToken() external view override returns (address) {\\n        return _getAddress(WETH_TOKEN); // T:[AP-13]\\n    }\\n\\n    /// @dev Sets address of WETH token\\n    /// @param _address Address of WETH token\\n    function setWethToken(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(WETH_TOKEN, _address); // T:[AP-13]\\n    }\\n\\n    /// @return Address of WETH token\\n    function getWETHGateway() external view override returns (address) {\\n        return _getAddress(WETH_GATEWAY); // T:[AP-14]\\n    }\\n\\n    /// @dev Sets address of WETH token\\n    /// @param _address Address of WETH token\\n    function setWETHGateway(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(WETH_GATEWAY, _address); // T:[AP-14]\\n    }\\n\\n    /// @return Address of WETH token\\n    function getLeveragedActions() external view override returns (address) {\\n        return _getAddress(LEVERAGED_ACTIONS); // T:[AP-7]\\n    }\\n\\n    /// @dev Sets address of WETH token\\n    /// @param _address Address of WETH token\\n    function setLeveragedActions(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(LEVERAGED_ACTIONS, _address); // T:[AP-7]\\n    }\\n\\n    /// @return Address of key, reverts if key doesn't exist\\n    function _getAddress(bytes32 key) internal view returns (address) {\\n        address result = addresses[key];\\n        require(result != address(0), Errors.AS_ADDRESS_NOT_FOUND); // T:[AP-1]\\n        return result; // T:[AP-3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\\n    }\\n\\n    /// @dev Sets address to map by its key\\n    /// @param key Key in string format\\n    /// @param value Address\\n    function _setAddress(bytes32 key, address value) internal {\\n        addresses[key] = value; // T:[AP-3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\\n        emit AddressSet(key, value); // T:[AP-2]\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/ContractsRegister.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\nimport {ACLTrait} from \\\"./ACLTrait.sol\\\";\\n\\n\\n/// @title Pools & Contract managers registry\\n/// @notice Keeps pools & contract manager addresses\\ncontract ContractsRegister is ACLTrait {\\n    // Pools list\\n    address[] public pools;\\n    mapping(address => bool) public isPool;\\n\\n    // Credit Managers list\\n    address[] public creditManagers;\\n    mapping(address => bool) public isCreditManager;\\n\\n    // Contract version\\n    uint256 public constant version = 1;\\n\\n    // emits each time when new pool was added to register\\n    event NewPoolAdded(address indexed pool);\\n\\n    // emits each time when new credit Manager was added to register\\n    event NewCreditManagerAdded(address indexed creditManager);\\n\\n    constructor(address addressProvider) ACLTrait(addressProvider) {}\\n\\n    /// @dev Adds pool to list\\n    /// @param newPoolAddress Address on new pool added\\n    function addPool(address newPoolAddress)\\n        external\\n        configuratorOnly // T:[CR-1]\\n    {\\n        require(\\n            newPoolAddress != address(0),\\n            Errors.ZERO_ADDRESS_IS_NOT_ALLOWED\\n        );\\n        require(!isPool[newPoolAddress], Errors.CR_POOL_ALREADY_ADDED); // T:[CR-2]\\n        pools.push(newPoolAddress); // T:[CR-3]\\n        isPool[newPoolAddress] = true; // T:[CR-3]\\n\\n        emit NewPoolAdded(newPoolAddress); // T:[CR-4]\\n    }\\n\\n    /// @dev Returns array of registered pool addresses\\n    function getPools() external view returns (address[] memory) {\\n        return pools;\\n    }\\n\\n    /// @return Returns quantity of registered pools\\n    function getPoolsCount() external view returns (uint256) {\\n        return pools.length; // T:[CR-3]\\n    }\\n\\n    /// @dev Adds credit accounts manager address to the registry\\n    /// @param newCreditManager Address on new pausableAdmin added\\n    function addCreditManager(address newCreditManager)\\n        external\\n        configuratorOnly // T:[CR-1]\\n    {\\n        require(\\n            newCreditManager != address(0),\\n            Errors.ZERO_ADDRESS_IS_NOT_ALLOWED\\n        );\\n\\n        require(\\n            !isCreditManager[newCreditManager],\\n            Errors.CR_CREDIT_MANAGER_ALREADY_ADDED\\n        ); // T:[CR-5]\\n        creditManagers.push(newCreditManager); // T:[CR-6]\\n        isCreditManager[newCreditManager] = true; // T:[CR-6]\\n\\n        emit NewCreditManagerAdded(newCreditManager); // T:[CR-7]\\n    }\\n\\n    /// @dev Returns array of registered credit manager addresses\\n    function getCreditManagers() external view returns (address[] memory) {\\n        return creditManagers;\\n    }\\n\\n    /// @return Returns quantity of registered credit managers\\n    function getCreditManagersCount() external view returns (uint256) {\\n        return creditManagers.length; // T:[CR-6]\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICreditManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\npragma abicoder v2;\\n\\nimport {ICreditFilter} from \\\"../interfaces/ICreditFilter.sol\\\";\\nimport {IAppCreditManager} from \\\"./app/IAppCreditManager.sol\\\";\\nimport {DataTypes} from \\\"../libraries/data/Types.sol\\\";\\n\\n\\n/// @title Credit Manager interface\\n/// @notice It encapsulates business logic for managing credit accounts\\n///\\n/// More info: https://dev.gearbox.fi/developers/credit/credit_manager\\ninterface ICreditManager is IAppCreditManager {\\n    // Emits each time when the credit account is opened\\n    event OpenCreditAccount(\\n        address indexed sender,\\n        address indexed onBehalfOf,\\n        address indexed creditAccount,\\n        uint256 amount,\\n        uint256 borrowAmount,\\n        uint256 referralCode\\n    );\\n\\n    // Emits each time when the credit account is closed\\n    event CloseCreditAccount(\\n        address indexed owner,\\n        address indexed to,\\n        uint256 remainingFunds\\n    );\\n\\n    // Emits each time when the credit account is liquidated\\n    event LiquidateCreditAccount(\\n        address indexed owner,\\n        address indexed liquidator,\\n        uint256 remainingFunds\\n    );\\n\\n    // Emits each time when borrower increases borrowed amount\\n    event IncreaseBorrowedAmount(address indexed borrower, uint256 amount);\\n\\n    // Emits each time when borrower adds collateral\\n    event AddCollateral(\\n        address indexed onBehalfOf,\\n        address indexed token,\\n        uint256 value\\n    );\\n\\n    // Emits each time when the credit account is repaid\\n    event RepayCreditAccount(address indexed owner, address indexed to);\\n\\n    // Emit each time when financial order is executed\\n    event ExecuteOrder(address indexed borrower, address indexed target);\\n\\n    // Emits each time when new fees are set\\n    event NewParameters(\\n        uint256 minAmount,\\n        uint256 maxAmount,\\n        uint256 maxLeverage,\\n        uint256 feeInterest,\\n        uint256 feeLiquidation,\\n        uint256 liquidationDiscount\\n    );\\n\\n    event TransferAccount(address indexed oldOwner, address indexed newOwner);\\n\\n    //\\n    // CREDIT ACCOUNT MANAGEMENT\\n    //\\n\\n    /**\\n     * @dev Opens credit account and provides credit funds.\\n     * - Opens credit account (take it from account factory)\\n     * - Transfers trader /farmers initial funds to credit account\\n     * - Transfers borrowed leveraged amount from pool (= amount x leverageFactor) calling lendCreditAccount() on connected Pool contract.\\n     * - Emits OpenCreditAccount event\\n     * Function reverts if user has already opened position\\n     *\\n     * More info: https://dev.gearbox.fi/developers/credit/credit_manager#open-credit-account\\n     *\\n     * @param amount Borrowers own funds\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param leverageFactor Multiplier to borrowers own funds\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function openCreditAccount(\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint256 leverageFactor,\\n        uint256 referralCode\\n    ) external override;\\n\\n    /**\\n     * @dev Closes credit account\\n     * - Swaps all assets to underlying one using default swap protocol\\n     * - Pays borrowed amount + interest accrued + fees back to the pool by calling repayCreditAccount\\n     * - Transfers remaining funds to the trader / farmer\\n     * - Closes the credit account and return it to account factory\\n     * - Emits CloseCreditAccount event\\n     *\\n     * More info: https://dev.gearbox.fi/developers/credit/credit_manager#close-credit-account\\n     *\\n     * @param to Address to send remaining funds\\n     * @param paths Exchange type data which provides paths + amountMinOut\\n     */\\n    function closeCreditAccount(address to, DataTypes.Exchange[] calldata paths)\\n        external\\n        override;\\n\\n    /**\\n     * @dev Liquidates credit account\\n     * - Transfers discounted total credit account value from liquidators account\\n     * - Pays borrowed funds + interest + fees back to pool, than transfers remaining funds to credit account owner\\n     * - Transfer all assets from credit account to liquidator (\\\"to\\\") account\\n     * - Returns credit account to factory\\n     * - Emits LiquidateCreditAccount event\\n     *\\n     * More info: https://dev.gearbox.fi/developers/credit/credit_manager#liquidate-credit-account\\n     *\\n     * @param borrower Borrower address\\n     * @param to Address to transfer all assets from credit account\\n     * @param force If true, use transfer function for transferring tokens instead of safeTransfer\\n     */\\n    function liquidateCreditAccount(\\n        address borrower,\\n        address to,\\n        bool force\\n    ) external;\\n\\n    /// @dev Repays credit account\\n    /// More info: https://dev.gearbox.fi/developers/credit/credit_manager#repay-credit-account\\n    ///\\n    /// @param to Address to send credit account assets\\n    function repayCreditAccount(address to) external override;\\n\\n    /// @dev Repays credit account with ETH. Restricted to be called by WETH Gateway only\\n    ///\\n    /// @param borrower Address of borrower\\n    /// @param to Address to send credit account assets\\n    function repayCreditAccountETH(address borrower, address to)\\n        external\\n        returns (uint256);\\n\\n    /// @dev Increases borrowed amount by transferring additional funds from\\n    /// the pool if after that HealthFactor > minHealth\\n    /// More info: https://dev.gearbox.fi/developers/credit/credit_manager#increase-borrowed-amount\\n    ///\\n    /// @param amount Amount to increase borrowed amount\\n    function increaseBorrowedAmount(uint256 amount) external override;\\n\\n    /// @dev Adds collateral to borrower's credit account\\n    /// @param onBehalfOf Address of borrower to add funds\\n    /// @param token Token address\\n    /// @param amount Amount to add\\n    function addCollateral(\\n        address onBehalfOf,\\n        address token,\\n        uint256 amount\\n    ) external override;\\n\\n    /// @dev Returns true if the borrower has opened a credit account\\n    /// @param borrower Borrower account\\n    function hasOpenedCreditAccount(address borrower)\\n        external\\n        view\\n        override\\n        returns (bool);\\n\\n    /// @dev Calculates Repay amount = borrow amount + interest accrued + fee\\n    ///\\n    /// More info: https://dev.gearbox.fi/developers/credit/economy#repay\\n    ///           https://dev.gearbox.fi/developers/credit/economy#liquidate\\n    ///\\n    /// @param borrower Borrower address\\n    /// @param isLiquidated True if calculated repay amount for liquidator\\n    function calcRepayAmount(address borrower, bool isLiquidated)\\n        external\\n        view\\n        override\\n        returns (uint256);\\n\\n    /// @dev Returns minimal amount for open credit account\\n    function minAmount() external view returns (uint256);\\n\\n    /// @dev Returns maximum amount for open credit account\\n    function maxAmount() external view returns (uint256);\\n\\n    /// @dev Returns maximum leveraged factor allowed for this pool\\n    function maxLeverageFactor() external view returns (uint256);\\n\\n    /// @dev Returns underlying token address\\n    function underlyingToken() external view returns (address);\\n\\n    /// @dev Returns address of connected pool\\n    function poolService() external view returns (address);\\n\\n    /// @dev Returns address of CreditFilter\\n    function creditFilter() external view returns (ICreditFilter);\\n\\n    /// @dev Returns address of CreditFilter\\n    function creditAccounts(address borrower) external view returns (address);\\n\\n    /// @dev Executes filtered order on credit account which is connected with particular borrowers\\n    /// @param borrower Borrower address\\n    /// @param target Target smart-contract\\n    /// @param data Call data for call\\n    function executeOrder(\\n        address borrower,\\n        address target,\\n        bytes memory data\\n    ) external returns (bytes memory);\\n\\n    /// @dev Approves token for msg.sender's credit account\\n    function approve(address targetContract, address token) external;\\n\\n    /// @dev Approve tokens for credit accounts. Restricted for adapters only\\n    function provideCreditAccountAllowance(\\n        address creditAccount,\\n        address toContract,\\n        address token\\n    ) external;\\n\\n    function transferAccountOwnership(address newOwner) external;\\n\\n    /// @dev Returns address of borrower's credit account and reverts of borrower has no one.\\n    /// @param borrower Borrower address\\n    function getCreditAccountOrRevert(address borrower)\\n        external\\n        view\\n        override\\n        returns (address);\\n\\n//    function feeSuccess() external view returns (uint256);\\n\\n    function feeInterest() external view returns (uint256);\\n\\n    function feeLiquidation() external view returns (uint256);\\n\\n    function liquidationDiscount() external view returns (uint256);\\n\\n    function minHealthFactor() external view returns (uint256);\\n\\n    function defaultSwapContract() external view override returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICreditFilter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\ninterface ICreditFilter {\\n    // Emits each time token is allowed or liquidtion threshold changed\\n    event TokenAllowed(address indexed token, uint256 liquidityThreshold);\\n\\n   // Emits each time token is allowed or liquidtion threshold changed\\n    event TokenForbidden(address indexed token);\\n\\n    // Emits each time contract is allowed or adapter changed\\n    event ContractAllowed(address indexed protocol, address indexed adapter);\\n\\n    // Emits each time contract is forbidden\\n    event ContractForbidden(address indexed protocol);\\n\\n    // Emits each time when fast check parameters are updated\\n    event NewFastCheckParameters(uint256 chiThreshold, uint256 fastCheckDelay);\\n\\n    event TransferAccountAllowed(\\n        address indexed from,\\n        address indexed to,\\n        bool state\\n    );\\n\\n    event TransferPluginAllowed(\\n        address indexed pugin,\\n        bool state\\n    );\\n\\n    event PriceOracleUpdated(address indexed newPriceOracle);\\n\\n    //\\n    // STATE-CHANGING FUNCTIONS\\n    //\\n\\n    /// @dev Adds token to the list of allowed tokens\\n    /// @param token Address of allowed token\\n    /// @param liquidationThreshold The constant showing the maximum allowable ratio of Loan-To-Value for the i-th asset.\\n    function allowToken(address token, uint256 liquidationThreshold) external;\\n\\n    /// @dev Adds contract to the list of allowed contracts\\n    /// @param targetContract Address of contract to be allowed\\n    /// @param adapter Adapter contract address\\n    function allowContract(address targetContract, address adapter) external;\\n\\n    /// @dev Forbids contract and removes it from the list of allowed contracts\\n    /// @param targetContract Address of allowed contract\\n    function forbidContract(address targetContract) external;\\n\\n    /// @dev Checks financial order and reverts if tokens aren't in list or collateral protection alerts\\n    /// @param creditAccount Address of credit account\\n    /// @param tokenIn Address of token In in swap operation\\n    /// @param tokenOut Address of token Out in swap operation\\n    /// @param amountIn Amount of tokens in\\n    /// @param amountOut Amount of tokens out\\n    function checkCollateralChange(\\n        address creditAccount,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    ) external;\\n\\n    function checkMultiTokenCollateral(\\n        address creditAccount,\\n        uint256[] memory amountIn,\\n        uint256[] memory amountOut,\\n        address[] memory tokenIn,\\n        address[] memory tokenOut\\n    ) external;\\n\\n    /// @dev Connects credit managaer, hecks that all needed price feeds exists and finalize config\\n    function connectCreditManager(address poolService) external;\\n\\n    /// @dev Sets collateral protection for new credit accounts\\n    function initEnabledTokens(address creditAccount) external;\\n\\n    function checkAndEnableToken(address creditAccount, address token) external;\\n\\n    //\\n    // GETTERS\\n    //\\n\\n    /// @dev Returns quantity of contracts in allowed list\\n    function allowedContractsCount() external view returns (uint256);\\n\\n    /// @dev Returns of contract address from the allowed list by its id\\n    function allowedContracts(uint256 id) external view returns (address);\\n\\n    /// @dev Reverts if token isn't in token allowed list\\n    function revertIfTokenNotAllowed(address token) external view;\\n\\n    /// @dev Returns true if token is in allowed list otherwise false\\n    function isTokenAllowed(address token) external view returns (bool);\\n\\n    /// @dev Returns quantity of tokens in allowed list\\n    function allowedTokensCount() external view returns (uint256);\\n\\n    /// @dev Returns of token address from allowed list by its id\\n    function allowedTokens(uint256 id) external view returns (address);\\n\\n    /// @dev Calculates total value for provided address\\n    /// More: https://dev.gearbox.fi/developers/credit/economy#total-value\\n    ///\\n    /// @param creditAccount Token creditAccount address\\n    function calcTotalValue(address creditAccount)\\n        external\\n        view\\n        returns (uint256 total);\\n\\n    /// @dev Calculates Threshold Weighted Total Value\\n    /// More: https://dev.gearbox.fi/developers/credit/economy#threshold-weighted-value\\n    ///\\n    ///@param creditAccount Credit account address\\n    function calcThresholdWeightedValue(address creditAccount)\\n        external\\n        view\\n        returns (uint256 total);\\n\\n    function contractToAdapter(address allowedContract)\\n        external\\n        view\\n        returns (address);\\n\\n    /// @dev Returns address of underlying token\\n    function underlyingToken() external view returns (address);\\n\\n    /// @dev Returns address & balance of token by the id of allowed token in the list\\n    /// @param creditAccount Credit account address\\n    /// @param id Id of token in allowed list\\n    /// @return token Address of token\\n    /// @return balance Token balance\\n    function getCreditAccountTokenById(address creditAccount, uint256 id)\\n        external\\n        view\\n        returns (\\n            address token,\\n            uint256 balance,\\n            uint256 tv,\\n            uint256 twv\\n        );\\n\\n    /**\\n     * @dev Calculates health factor for the credit account\\n     *\\n     *         sum(asset[i] * liquidation threshold[i])\\n     *   Hf = --------------------------------------------\\n     *             borrowed amount + interest accrued\\n     *\\n     *\\n     * More info: https://dev.gearbox.fi/developers/credit/economy#health-factor\\n     *\\n     * @param creditAccount Credit account address\\n     * @return Health factor in percents (see PERCENTAGE FACTOR in PercentageMath.sol)\\n     */\\n    function calcCreditAccountHealthFactor(address creditAccount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev Calculates credit account interest accrued\\n    /// More: https://dev.gearbox.fi/developers/credit/economy#interest-rate-accrued\\n    ///\\n    /// @param creditAccount Credit account address\\n    function calcCreditAccountAccruedInterest(address creditAccount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev Return enabled tokens - token masks where each bit is \\\"1\\\" is token is enabled\\n    function enabledTokens(address creditAccount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function liquidationThresholds(address token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function updateUnderlyingTokenLiquidationThreshold() external;\\n\\n    function revertIfCantIncreaseBorrowing(\\n        address creditAccount,\\n        uint256 minHealthFactor\\n    ) external view;\\n\\n    function revertIfAccountTransferIsNotAllowed(\\n        address onwer,\\n        address creditAccount\\n    ) external view;\\n\\n    function approveAccountTransfers(address from, bool state) external;\\n\\n    function allowanceForAccountTransfers(address from, address to)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/oracles/PriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport {IPriceOracle} from \\\"../interfaces/IPriceOracle.sol\\\";\\n\\nimport {AddressProvider} from \\\"../core/AddressProvider.sol\\\";\\n\\nimport {Constants} from \\\"../libraries/helpers/Constants.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\n\\nimport {ACLTrait} from \\\"../core/ACLTrait.sol\\\";\\n\\n/// @title Price Oracle based on Chainlink's price feeds\\n/// @notice Works as router and provide cross rates using converting via ETH\\n///\\n/// More: https://dev.gearbox.fi/developers/priceoracle\\ncontract PriceOracle is ACLTrait, IPriceOracle {\\n    using SafeMath for uint256;\\n\\n    // Address of WETH token\\n    address public wethAddress;\\n\\n    // token => priceFeed\\n    mapping(address => address) public priceFeeds;\\n\\n    // token => decimals multiplier\\n    mapping(address => uint256) public decimalsMultipliers;\\n    mapping(address => uint256) public decimalsDividers;\\n\\n    // Contract version\\n    uint constant public version = 1;\\n\\n    constructor(address addressProvider) ACLTrait(addressProvider) {\\n        wethAddress = AddressProvider(addressProvider).getWethToken();\\n        decimalsMultipliers[wethAddress] = 1;\\n        decimalsDividers[wethAddress] = Constants.WAD;\\n    }\\n\\n    /// @dev Sets price feed if it doesn't exist. If price feed is already set, it changes nothing\\n    /// This logic is done to protect Gearbox from priceOracle attack\\n    /// when potential attacker can get access to price oracle, change them to fraud ones\\n    /// and then liquidate all funds\\n    /// @param token Address of token\\n    /// @param priceFeed Address of chainlink price feed token => Eth\\n    function addPriceFeed(address token, address priceFeed)\\n        external\\n        override\\n        configuratorOnly\\n    {\\n        // T:[PO-5]\\n        priceFeeds[token] = priceFeed;\\n        uint256 decimals = ERC20(token).decimals();\\n\\n        require(\\n            decimals <= 18,\\n            Errors.PO_TOKENS_WITH_DECIMALS_MORE_18_ISNT_ALLOWED\\n        ); // T:[PO-3]\\n\\n        require(\\n            AggregatorV3Interface(priceFeed).decimals() == 18,\\n            Errors.PO_AGGREGATOR_DECIMALS_SHOULD_BE_18\\n        ); // T:[PO-10]\\n\\n        decimalsMultipliers[token] = 10**(18 - decimals);\\n        decimalsDividers[token] = 10**(36 - decimals);\\n        emit NewPriceFeed(token, priceFeed); // T:[PO-4]\\n    }\\n\\n    /// @dev Converts one asset into another using price feed rate. Reverts if price feed doesn't exist\\n    /// @param amount Amount to convert\\n    /// @param tokenFrom Token address converts from\\n    /// @param tokenTo Token address - converts to\\n    /// @return Amount converted to tokenTo asset\\n    function convert(\\n        uint256 amount,\\n        address tokenFrom,\\n        address tokenTo\\n    ) external view override returns (uint256) {\\n        return\\n            amount\\n                .mul(decimalsMultipliers[tokenFrom])\\n                .mul(getLastPrice(tokenFrom, tokenTo))\\n                .div(decimalsDividers[tokenTo]); // T:[PO-8]\\n    }\\n\\n    /// @dev Gets token rate with 18 decimals. Reverts if priceFeed doesn't exist\\n    /// @param tokenFrom Converts from token address\\n    /// @param tokenTo Converts to token address\\n    /// @return Rate in WAD format\\n    function getLastPrice(address tokenFrom, address tokenTo)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (tokenFrom == tokenTo) return Constants.WAD; // T:[PO-1]\\n\\n        // price = wad * price[ETH] / price[token_to] = wad^2 / price[token_to]\\n        if (tokenFrom == wethAddress) {\\n            return Constants.WAD.mul(Constants.WAD).div(_getPrice(tokenTo)); // T:[PO-6]\\n        }\\n\\n        // price = wad * price[token_from] / price[ETH] = wad * price[token_from] / wad = price[token_from]\\n        if (tokenTo == wethAddress) {\\n            return _getPrice(tokenFrom); // T:[PO-6]\\n        }\\n\\n        return Constants.WAD.mul(_getPrice(tokenFrom)).div(_getPrice(tokenTo)); // T:[PO-7]\\n    }\\n\\n    /// @dev Returns rate to ETH in WAD format\\n    /// @param token Token converts from\\n    function _getPrice(address token) internal view returns (uint256) {\\n        require(\\n            priceFeeds[token] != address(0),\\n            Errors.PO_PRICE_FEED_DOESNT_EXIST\\n        ); // T:[PO-9]\\n\\n        (\\n            ,\\n            //uint80 roundID,\\n            int256 price, //uint startedAt, //uint timeStamp, //uint80 answeredInRound\\n            ,\\n            ,\\n\\n        ) = AggregatorV3Interface(priceFeeds[token]).latestRoundData(); // T:[PO-6]\\n        return uint256(price);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"contracts/integrations/uniswap/IUniswapV3SwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/integrations/uniswap/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external view returns (address);\\n\\n    function WETH() external view returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external view returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external view returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external view returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/math/PercentageMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.7.4;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded half up\\n **/\\n\\nlibrary PercentageMath {\\n    uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n    uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\n\\n    /**\\n     * @dev Executes a percentage multiplication\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return The percentage of value\\n     **/\\n    function percentMul(uint256 value, uint256 percentage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (value == 0 || percentage == 0) {\\n            return 0; // T:[PM-1]\\n        }\\n\\n        require(\\n            value <= (type(uint256).max - HALF_PERCENT) / percentage,\\n            Errors.MATH_MULTIPLICATION_OVERFLOW\\n        ); // T:[PM-1]\\n\\n        return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR; // T:[PM-1]\\n    }\\n\\n    /**\\n     * @dev Executes a percentage division\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return The value divided the percentage\\n     **/\\n    function percentDiv(uint256 value, uint256 percentage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(percentage != 0, Errors.MATH_DIVISION_BY_ZERO); // T:[PM-2]\\n        uint256 halfPercentage = percentage / 2; // T:[PM-2]\\n\\n        require(\\n            value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR,\\n            Errors.MATH_MULTIPLICATION_OVERFLOW\\n        ); // T:[PM-2]\\n\\n        return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/app/IAppAddressProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\n\\n/// @title Optimised for front-end Address Provider interface\\ninterface IAppAddressProvider {\\n    function getDataCompressor() external view returns (address);\\n\\n    function getGearToken() external view returns (address);\\n\\n    function getWethToken() external view returns (address);\\n\\n    function getWETHGateway() external view returns (address);\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function getLeveragedActions() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/ACLTrait.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\nimport {Pausable} from \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport {AddressProvider} from \\\"./AddressProvider.sol\\\";\\nimport {ACL} from \\\"./ACL.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\n\\n\\n/// @title ACL Trait\\n/// @notice Trait which adds acl functions to contract\\nabstract contract ACLTrait is Pausable {\\n    // ACL contract to check rights\\n    ACL private _acl;\\n\\n    /// @dev constructor\\n    /// @param addressProvider Address of address repository\\n    constructor(address addressProvider) {\\n        require(\\n            addressProvider != address(0),\\n            Errors.ZERO_ADDRESS_IS_NOT_ALLOWED\\n        );\\n\\n        _acl = ACL(AddressProvider(addressProvider).getACL());\\n    }\\n\\n    /// @dev  Reverts if msg.sender is not configurator\\n    modifier configuratorOnly() {\\n        require(\\n            _acl.isConfigurator(msg.sender),\\n            Errors.ACL_CALLER_NOT_CONFIGURATOR\\n        ); // T:[ACLT-8]\\n        _;\\n    }\\n\\n    ///@dev Pause contract\\n    function pause() external {\\n        require(\\n            _acl.isPausableAdmin(msg.sender),\\n            Errors.ACL_CALLER_NOT_PAUSABLE_ADMIN\\n        ); // T:[ACLT-1]\\n        _pause();\\n    }\\n\\n    /// @dev Unpause contract\\n    function unpause() external {\\n        require(\\n            _acl.isUnpausableAdmin(msg.sender),\\n            Errors.ACL_CALLER_NOT_PAUSABLE_ADMIN\\n        ); // T:[ACLT-1],[ACLT-2]\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/ACL.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\n\\n\\n/// @title ACL keeps admins addresses\\n/// More info: https://dev.gearbox.fi/security/roles\\ncontract ACL is Ownable {\\n    mapping(address => bool) public pausableAdminSet;\\n    mapping(address => bool) public unpausableAdminSet;\\n\\n    // Contract version\\n    uint256 public constant version = 1;\\n\\n    // emits each time when new pausable admin added\\n    event PausableAdminAdded(address indexed newAdmin);\\n\\n    // emits each time when pausable admin removed\\n    event PausableAdminRemoved(address indexed admin);\\n\\n    // emits each time when new unpausable admin added\\n    event UnpausableAdminAdded(address indexed newAdmin);\\n\\n    // emits each times when unpausable admin removed\\n    event UnpausableAdminRemoved(address indexed admin);\\n\\n    /// @dev Adds pausable admin address\\n    /// @param newAdmin Address of new pausable admin\\n    function addPausableAdmin(address newAdmin)\\n        external\\n        onlyOwner // T:[ACL-1]\\n    {\\n        pausableAdminSet[newAdmin] = true; // T:[ACL-2]\\n        emit PausableAdminAdded(newAdmin); // T:[ACL-2]\\n    }\\n\\n    /// @dev Removes pausable admin\\n    /// @param admin Address of admin which should be removed\\n    function removePausableAdmin(address admin)\\n        external\\n        onlyOwner // T:[ACL-1]\\n    {\\n        pausableAdminSet[admin] = false; // T:[ACL-3]\\n        emit PausableAdminRemoved(admin); // T:[ACL-3]\\n    }\\n\\n    /// @dev Returns true if the address is pausable admin and false if not\\n    function isPausableAdmin(address addr) external view returns (bool) {\\n        return pausableAdminSet[addr]; // T:[ACL-2,3]\\n    }\\n\\n    /// @dev Adds unpausable admin address to the list\\n    /// @param newAdmin Address of new unpausable admin\\n    function addUnpausableAdmin(address newAdmin)\\n        external\\n        onlyOwner // T:[ACL-1]\\n    {\\n        unpausableAdminSet[newAdmin] = true; // T:[ACL-4]\\n        emit UnpausableAdminAdded(newAdmin); // T:[ACL-4]\\n    }\\n\\n    /// @dev Removes unpausable admin\\n    /// @param admin Address of admin to be removed\\n    function removeUnpausableAdmin(address admin)\\n        external\\n        onlyOwner // T:[ACL-1]\\n    {\\n        unpausableAdminSet[admin] = false; // T:[ACL-5]\\n        emit UnpausableAdminRemoved(admin); // T:[ACL-5]\\n    }\\n\\n    /// @dev Returns true if the address is unpausable admin and false if not\\n    function isUnpausableAdmin(address addr) external view returns (bool) {\\n        return unpausableAdminSet[addr]; // T:[ACL-4,5]\\n    }\\n\\n    /// @dev Returns true if addr has configurator rights\\n    function isConfigurator(address account) external view returns (bool) {\\n        return account == owner(); // T:[ACL-6]\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/app/IAppCreditManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\npragma abicoder v2;\\n\\nimport {DataTypes} from \\\"../../libraries/data/Types.sol\\\";\\n\\n\\n/// @title Optimised for front-end credit Manager interface\\n/// @notice It's optimised for light-weight abi\\ninterface IAppCreditManager {\\n    function openCreditAccount(\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint256 leverageFactor,\\n        uint256 referralCode\\n    ) external;\\n\\n    function closeCreditAccount(address to, DataTypes.Exchange[] calldata paths)\\n        external;\\n\\n    function repayCreditAccount(address to) external;\\n\\n    function increaseBorrowedAmount(uint256 amount) external;\\n\\n    function addCollateral(\\n        address onBehalfOf,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function calcRepayAmount(address borrower, bool isLiquidated)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getCreditAccountOrRevert(address borrower)\\n        external\\n        view\\n        returns (address);\\n\\n    function hasOpenedCreditAccount(address borrower)\\n        external\\n        view\\n        returns (bool);\\n\\n    function defaultSwapContract() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/data/Types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\n\\n/// @title DataType library\\n/// @notice Contains data types used in data compressor.\\nlibrary DataTypes {\\n    struct Exchange {\\n        address[] path;\\n        uint256 amountOutMin;\\n    }\\n\\n    struct TokenBalance {\\n        address token;\\n        uint256 balance;\\n        bool isAllowed;\\n    }\\n\\n    struct ContractAdapter {\\n        address allowedContract;\\n        address adapter;\\n    }\\n\\n    struct CreditAccountData {\\n        address addr;\\n        address borrower;\\n        bool inUse;\\n        address creditManager;\\n        address underlyingToken;\\n        uint256 borrowedAmountPlusInterest;\\n        uint256 totalValue;\\n        uint256 healthFactor;\\n        uint256 borrowRate;\\n        TokenBalance[] balances;\\n    }\\n\\n    struct CreditAccountDataExtended {\\n        address addr;\\n        address borrower;\\n        bool inUse;\\n        address creditManager;\\n        address underlyingToken;\\n        uint256 borrowedAmountPlusInterest;\\n        uint256 totalValue;\\n        uint256 healthFactor;\\n        uint256 borrowRate;\\n        TokenBalance[] balances;\\n        uint256 repayAmount;\\n        uint256 liquidationAmount;\\n        bool canBeClosed;\\n        uint256 borrowedAmount;\\n        uint256 cumulativeIndexAtOpen;\\n        uint256 since;\\n    }\\n\\n    struct CreditManagerData {\\n        address addr;\\n        bool hasAccount;\\n        address underlyingToken;\\n        bool isWETH;\\n        bool canBorrow;\\n        uint256 borrowRate;\\n        uint256 minAmount;\\n        uint256 maxAmount;\\n        uint256 maxLeverageFactor;\\n        uint256 availableLiquidity;\\n        address[] allowedTokens;\\n        ContractAdapter[] adapters;\\n    }\\n\\n    struct PoolData {\\n        address addr;\\n        bool isWETH;\\n        address underlyingToken;\\n        address dieselToken;\\n        uint256 linearCumulativeIndex;\\n        uint256 availableLiquidity;\\n        uint256 expectedLiquidity;\\n        uint256 expectedLiquidityLimit;\\n        uint256 totalBorrowed;\\n        uint256 depositAPY_RAY;\\n        uint256 borrowAPY_RAY;\\n        uint256 dieselRate_RAY;\\n        uint256 withdrawFee;\\n        uint256 cumulativeIndex_RAY;\\n        uint256 timestampLU;\\n    }\\n\\n    struct TokenInfo {\\n        address addr;\\n        string symbol;\\n        uint8 decimals;\\n    }\\n\\n    struct AddressProviderData {\\n        address contractRegister;\\n        address acl;\\n        address priceOracle;\\n        address traderAccountFactory;\\n        address dataCompressor;\\n        address farmingFactory;\\n        address accountMiner;\\n        address treasuryContract;\\n        address gearToken;\\n        address wethToken;\\n        address wethGateway;\\n    }\\n\\n    struct MiningApproval {\\n        address token;\\n        address swapContract;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\n\\n/// @title Price oracle interface\\ninterface IPriceOracle {\\n\\n    // Emits each time new configurator is set up\\n    event NewPriceFeed(address indexed token, address indexed priceFeed);\\n\\n    /**\\n     * @dev Sets price feed if it doesn't exists\\n     * If pricefeed exists, it changes nothing\\n     * This logic is done to protect Gearbox from priceOracle attack\\n     * when potential attacker can get access to price oracle, change them to fraud ones\\n     * and then liquidate all funds\\n     * @param token Address of token\\n     * @param priceFeedToken Address of chainlink price feed token => Eth\\n     */\\n    function addPriceFeed(address token, address priceFeedToken) external;\\n\\n    /**\\n     * @dev Converts one asset into another using rate. Reverts if price feed doesn't exist\\n     *\\n     * @param amount Amount to convert\\n     * @param tokenFrom Token address converts from\\n     * @param tokenTo Token address - converts to\\n     * @return Amount converted to tokenTo asset\\n     */\\n    function convert(\\n        uint256 amount,\\n        address tokenFrom,\\n        address tokenTo\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Gets token rate with 18 decimals. Reverts if priceFeed doesn't exist\\n     *\\n     * @param tokenFrom Converts from token address\\n     * @param tokenTo Converts to token address\\n     * @return Rate in WAD format\\n     */\\n    function getLastPrice(address tokenFrom, address tokenTo)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressProvider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"contract AddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapInterface\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"bestUniPath\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct PathFinder.TradePath\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractsRegister\",\"outputs\":[{\"internalType\":\"contract ContractsRegister\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"swapType\",\"type\":\"uint256\"}],\"name\":\"convertPathToPathV3\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethToUsdPriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_creditManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"connectorTokens\",\"type\":\"address[]\"}],\"name\":\"getClosurePaths\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct PathFinder.TradePath[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PathFinder","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000cf64698aff7e5f27a11dff868af228653ba53be0","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}