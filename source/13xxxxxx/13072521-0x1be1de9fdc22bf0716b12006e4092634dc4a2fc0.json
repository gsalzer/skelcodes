{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/marketplace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\\n/**\\n * @dev Required interface of an EaselyRegistry compliant contract.\\n */\\ninterface IEaselyRegistry {\\n    /**\\n     * @dev Emitted when `CREATOR_ROLE` has registered a new creatorAddress with a BPS fee\\n     */\\n    event CreatorRegistered(address creatorAddress);\\n\\n    /**\\n     * @dev Emitted when `CREATOR_ROLE` or owner needs to pause all sales on our Marketplaces\\n     */\\n    event CreatorPaused(address creatorAddress);\\n\\n    /**\\n     * @dev Emitted when `CREATOR_ROLE` or owner wants to resume all sales on our Marketplaces\\n     */\\n    event CreatorUnpaused(address creatorAddress);\\n\\n    /**\\n     * @dev Calculates for a certain creator and payin amount, how much the creator receives.\\n     * This value is always greater than 95% since the BPS fee cap is 500.\\n     *\\n     * Requirements:\\n     * - Creator cannot be paused\\n     */\\n    function calculateCreatorPayout(address creatorAddress, uint256 payin) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns if a creator is registered or has the default BPS fee.\\n     */\\n    function isCreatorRegistered(address creatorAddress) external view returns (bool);\\n\\n    /**\\n     * @dev Returns if a creator is paused on our marketplaces or not.\\n     */\\n    function isCreatorPaused(address creatorAddress) external view returns (bool);\\n}\\n\\n/** \\n * @dev Required interface of a SimpleMarketplace that sells bundles\\n */\\ninterface ISimpleMarketplace {\\n    /**\\n     * @dev Emitted when a bundle is created and includes the contractAddress, \\n     * tokenIds involved in the bundle, the price, and the creatorAddress who needs \\n     * to own the tokens as well as receive the majority of the proceeds of the sale.\\n     */\\n    event BundleCreated(\\n        uint256 bundleId, \\n        address contractAddress, \\n        address creatorAddress, \\n        uint256[] tokenIds, \\n        uint256 price\\n    );\\n\\n    /**\\n     * @dev Emitted when a created bundle is withdrawn from the marketplace\\n     * and can no longer be bought.\\n     */\\n    event BundleWithdrawn(uint256 bundleId);\\n\\n    /**\\n     * @dev Emitted when a created bundle is sold from the marketplace and \\n     * the related tokens have successfully transferred to the buyer.\\n     */\\n    event BundleBought(uint256 bundleId);\\n\\n    /**\\n     * @dev Information that the marketplace needs in order to put a bundle of\\n     * tokens relating to a contract up for sale\\n     *\\n     * Requirements:\\n     * - contractAddress must support IERC721\\n     * - sender must be contractAddress or creatorAddress\\n     * - creatorAddress must grant this contract permission\\n     * - bundle cannot exceed a certain size\\n     * - price must be valid (at least 0.000001 ETH)\\n     */\\n    function sellBundle(\\n        address contractAddress, \\n        address creatorAddress, \\n        uint256[] memory tokenIds, \\n        uint256 price\\n    ) external;\\n\\n    /**\\n     * @dev Returns the bundleId that a specific token belongs to. Will throw\\n     * if token is not part of a bundle.\\n     */\\n    function getBundleId(address contractAddress, uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @dev Because token ownership can change outside the marketplace contract, a created bundled\\n     * that is not withdrawn or bought cannot determine alone if the bundle is still buyable.\\n     * \\n     * This function will check if the owner still has the tokens for a bundle and if this marketplace\\n     * still has the permissions to transfer the tokens.\\n     */\\n    function isBuyable(uint256 bundleId) external view returns (bool);\\n\\n    /**\\n     * @dev Allows a bundle to be taken off the market and can no longer by bought by buyBundle.\\n     * The bundle is deleted in the process.\\n     *\\n     * Can only be called by the contract or creator who is marked on the bundleId.\\n     */\\n    function withdrawBundle(uint256 bundleId) external;\\n\\n    /**\\n     * @dev Allows any user to buy a bundle of tokens and will be transferred from\\n     * the creatorAddress into the payer's address. The bundle is deleted after the transfer.\\n     *\\n     * Requirements:\\n     * - buyerAddress must be a safeTransfer location\\n     * - creatorAddress still has all the tokenIds in the bundle\\n     */\\n    function buyBundle(uint256 bundleId) external payable;\\n}\\n\\ncontract SimpleMarketplace is Ownable, ISimpleMarketplace {\\n\\n    struct Bundle {\\n        address contractAddress;\\n        address creatorAddress;\\n        uint256 price;\\n        uint256[] tokenIds;\\n    }\\n\\n    address public registryAddress;\\n\\n    /**\\n     * Setting a min price so that users cannot accidentally\\n     * sell their tokens at a price that is off by a conversion rate.\\n     * The min WEI price below is equivalent to ETH 0.000001\\n     *\\n     * WEI has a conversion rate of:\\n     * 1 ETH = 1_000_000_000 GWEI\\n     * 1 GWEI = 1_000_000_000 WEI\\n     */\\n    uint256 public MIN_WEI_PRICE = 1_000_000_000_000;\\n\\n    uint256 public MAX_BUNDLE_SIZE = 25;\\n\\n    uint256 private nextBundleId = 1;\\n\\n    mapping(uint256 => Bundle) private _bundleIdToBundle;\\n    mapping(address => mapping(uint256 => uint256)) private _tokenToBundleId;\\n\\n    /**\\n     * @dev Constructor function\\n     */\\n    constructor(address registryAddress_) { \\n        registryAddress = registryAddress_;\\n    }\\n\\n    /**\\n     * @dev Verify that the seller is either the contractAddress or the creator.\\n     * Also ensure that this contract has approval for all tokens for that creator.\\n     */\\n    function _verifySeller(address contractAddress, address creatorAddress) internal view {\\n        address msgSender = _msgSender();\\n\\n        bool isValidSender = msgSender == contractAddress || msgSender == creatorAddress;\\n        require(isValidSender, \\\"Seller must be the creator or the contract\\\");\\n\\n        IERC721 nonFungibleContract = IERC721(contractAddress);\\n        require(\\n            nonFungibleContract.isApprovedForAll(creatorAddress, address(this)), \\n            \\\"Seller must approve this contract for all tokens\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Valid bundles start with id 1, so tokens with bundleId 0 are not bundled\\n     */\\n    function _isBundled(address contractAddress, uint256 tokenId) internal view returns (bool) {\\n        return _tokenToBundleId[contractAddress][tokenId] != 0;\\n    }\\n\\n    /**\\n     * @dev Valid bundles have a price above minimum and are reset when deleted. So\\n     * we can use price as a proxy to see if the bundle exists\\n     */\\n    function _bundleExists(uint256 bundleId) internal view returns (bool) {\\n        return _bundleIdToBundle[bundleId].price >= MIN_WEI_PRICE;\\n    }\\n\\n    /**\\n     * @dev See {ISimpleMarketplace-isBuyable}.\\n     */\\n    function _isBuyable(uint256 bundleId) internal view returns (bool) {\\n        // Cannot sell the bundle if it does not exist\\n        if(!_bundleExists(bundleId)) {\\n            return false;\\n        }\\n\\n        Bundle memory bundle = _bundleIdToBundle[bundleId];\\n        IERC721 nonFungibleContract = IERC721(bundle.contractAddress);\\n\\n        // Cannot sell the bundle if we are not approved to transfer all\\n        if(!nonFungibleContract.isApprovedForAll(bundle.creatorAddress, address(this))) {\\n            return false; \\n        }\\n\\n        uint256[] memory tokenIds = bundle.tokenIds;\\n        uint256 numTokens = tokenIds.length;\\n\\n        // Cannot sell the bundle if the owner no longer owns all the tokens\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            if(nonFungibleContract.ownerOf(tokenIds[i]) != bundle.creatorAddress) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns all pertinent information related to a bundleId\\n     */\\n    function getBundle(uint256 bundleId) external view returns (Bundle memory) {\\n        require(_isBuyable(bundleId), \\\"This bundle is not buyable\\\");\\n        return _bundleIdToBundle[bundleId];\\n    }\\n\\n    /**\\n     * @dev See {ISimpleMarketplace-isBuyable}.\\n     */\\n    function isBuyable(uint256 bundleId) external view override returns (bool) {\\n        return _isBuyable(bundleId);\\n    }\\n\\n    /**\\n     * @dev See {ISimpleMarketplace-getBundleId}.\\n     */\\n    function getBundleId(address contractAddress, uint256 tokenId) external view override returns (uint256) {\\n        uint256 bundleId = _tokenToBundleId[contractAddress][tokenId];\\n        require(bundleId != 0, \\\"This token is not part of a bundle\\\");\\n        \\n        return bundleId;\\n    }\\n\\n    /**\\n     * @dev After every transaction the marketplace holds a cut. A portion of this\\n     * accumulated amount can be withdrawn by the owner at anytime.\\n     *\\n     * Requirements:\\n     * - Only Marketplace owner can withdraw balance.\\n     */\\n    function withdrawBalance(uint256 amount) external onlyOwner {\\n        require(amount <= address(this).balance, \\\"Contract balance too low\\\");\\n        payable(owner()).transfer(amount);\\n    }\\n\\n    /**\\n     * @dev See {ISimpleMarketplace-sellBundle}.\\n     */\\n    function sellBundle(\\n        address contractAddress, \\n        address creatorAddress, \\n        uint256[] memory tokenIds, \\n        uint256 price\\n    ) external override {\\n        require(tokenIds.length < MAX_BUNDLE_SIZE, \\\"Too many tokens given\\\");\\n        require(price >= MIN_WEI_PRICE, \\\"Price given is below minimum\\\");\\n        require(IERC165(contractAddress).supportsInterface(type(IERC721).interfaceId), \\\"Contract must support IERC721\\\");\\n        _verifySeller(contractAddress, creatorAddress);\\n\\n        Bundle memory newBundle;\\n        newBundle.contractAddress = contractAddress;\\n        newBundle.creatorAddress = creatorAddress;\\n        newBundle.tokenIds = tokenIds;\\n        newBundle.price = price;\\n\\n        _bundleIdToBundle[nextBundleId] = newBundle;\\n\\n        uint256 numTokens = tokenIds.length;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            require(!_isBundled(contractAddress, tokenId), \\\"Token already in bundle\\\");\\n            _tokenToBundleId[contractAddress][tokenId] = nextBundleId;\\n        }\\n\\n        emit BundleCreated(nextBundleId, contractAddress, creatorAddress, tokenIds, price);\\n\\n        nextBundleId = nextBundleId + 1;\\n    }\\n\\n    /**\\n     * @dev See {ISimpleMarketplace-withdrawBundle}.\\n     */\\n    function withdrawBundle(uint256 bundleId) external override {\\n        require(_bundleExists(bundleId), \\\"Bundle does not exist\\\");\\n\\n        address msgSender = _msgSender();\\n        Bundle memory bundle = _bundleIdToBundle[bundleId];\\n        address contractAddress = bundle.contractAddress;\\n\\n        bool isValidWithdrawer = msgSender == contractAddress || msgSender == bundle.creatorAddress;\\n        require(isValidWithdrawer, \\\"Only the contract or bundle creator can withdraw\\\");\\n        \\n        uint256[] memory tokenIds = bundle.tokenIds;\\n        uint256 numTokens = tokenIds.length;\\n\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            _tokenToBundleId[contractAddress][tokenIds[i]] = 0;\\n        }\\n\\n        delete _bundleIdToBundle[bundleId];\\n\\n        emit BundleWithdrawn(bundleId);\\n    }\\n\\n    /**\\n     * @dev See {ISimpleMarketplace-buyBundle}.\\n     */\\n    function buyBundle(uint256 bundleId) external payable override {\\n        require(_bundleExists(bundleId), \\\"Bundle does not exist\\\");\\n\\n        Bundle memory bundle = _bundleIdToBundle[bundleId];\\n\\n        uint256 msgValue = msg.value;\\n        address senderAddress = _msgSender();\\n        address creatorAddress = bundle.creatorAddress;\\n\\n        require(msgValue >= bundle.price, \\\"Msg value too small\\\");\\n        \\n        uint256 creatorPayout = \\n            IEaselyRegistry(registryAddress).calculateCreatorPayout(creatorAddress, bundle.price); \\n\\n        IERC721 nonFungibleContract = IERC721(bundle.contractAddress);\\n        uint256[] memory tokenIds = bundle.tokenIds;\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = bundle.tokenIds[i];\\n            \\n            _tokenToBundleId[bundle.contractAddress][tokenId] = 0;\\n            nonFungibleContract.safeTransferFrom(creatorAddress, senderAddress, tokenId);\\n        } \\n\\n        // Send back any value greater than the listed price\\n        payable(creatorAddress).transfer(creatorPayout);\\n        payable(senderAddress).transfer(msgValue - bundle.price);\\n\\n        delete _bundleIdToBundle[bundleId];\\n\\n        emit BundleBought(bundleId);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 300\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registryAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bundleId\",\"type\":\"uint256\"}],\"name\":\"BundleBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bundleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"BundleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bundleId\",\"type\":\"uint256\"}],\"name\":\"BundleWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_BUNDLE_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_WEI_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bundleId\",\"type\":\"uint256\"}],\"name\":\"buyBundle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bundleId\",\"type\":\"uint256\"}],\"name\":\"getBundle\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct SimpleMarketplace.Bundle\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getBundleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bundleId\",\"type\":\"uint256\"}],\"name\":\"isBuyable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"sellBundle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bundleId\",\"type\":\"uint256\"}],\"name\":\"withdrawBundle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SimpleMarketplace","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"300","ConstructorArguments":"00000000000000000000000093256c28ac5b2dfe5ea80251c685390736b42114","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}