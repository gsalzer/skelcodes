{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/tokenStaking/StakingPoolForUniswapV2Tokens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {TokenDistributor} from \\\"./TokenDistributor.sol\\\";\\nimport {TokenSplitter} from \\\"./TokenSplitter.sol\\\";\\n\\n/**\\n * @title StakingPoolForUniswapV2Tokens\\n * @notice It is a staking pool for Uniswap V2 LP tokens (stake Uniswap V2 LP tokens -> get LOOKS).\\n */\\ncontract StakingPoolForUniswapV2Tokens is Ownable, Pausable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    struct UserInfo {\\n        uint256 amount; // Amount of staked tokens provided by user\\n        uint256 rewardDebt; // Reward debt\\n    }\\n\\n    // Precision factor for reward calculation\\n    uint256 public constant PRECISION_FACTOR = 10**12;\\n\\n    // LOOKS token (token distributed)\\n    IERC20 public immutable looksRareToken;\\n\\n    // The staked token (i.e., Uniswap V2 WETH/LOOKS LP token)\\n    IERC20 public immutable stakedToken;\\n\\n    // Block number when rewards start\\n    uint256 public immutable START_BLOCK;\\n\\n    // Accumulated tokens per share\\n    uint256 public accTokenPerShare;\\n\\n    // Block number when rewards end\\n    uint256 public endBlock;\\n\\n    // Block number of the last update\\n    uint256 public lastRewardBlock;\\n\\n    // Tokens distributed per block (in looksRareToken)\\n    uint256 public rewardPerBlock;\\n\\n    // UserInfo for users that stake tokens (stakedToken)\\n    mapping(address => UserInfo) public userInfo;\\n\\n    event AdminRewardWithdraw(uint256 amount);\\n    event Deposit(address indexed user, uint256 amount, uint256 harvestedAmount);\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\n    event Harvest(address indexed user, uint256 harvestedAmount);\\n    event NewRewardPerBlockAndEndBlock(uint256 rewardPerBlock, uint256 endBlock);\\n    event Withdraw(address indexed user, uint256 amount, uint256 harvestedAmount);\\n\\n    /**\\n     * @notice Constructor\\n     * @param _stakedToken staked token address\\n     * @param _looksRareToken reward token address\\n     * @param _rewardPerBlock reward per block (in LOOKS)\\n     * @param _startBlock start block\\n     * @param _endBlock end block\\n     */\\n    constructor(\\n        address _stakedToken,\\n        address _looksRareToken,\\n        uint256 _rewardPerBlock,\\n        uint256 _startBlock,\\n        uint256 _endBlock\\n    ) {\\n        stakedToken = IERC20(_stakedToken);\\n        looksRareToken = IERC20(_looksRareToken);\\n        rewardPerBlock = _rewardPerBlock;\\n        START_BLOCK = _startBlock;\\n        endBlock = _endBlock;\\n\\n        // Set the lastRewardBlock as the start block\\n        lastRewardBlock = _startBlock;\\n    }\\n\\n    /**\\n     * @notice Deposit staked tokens and collect reward tokens (if any)\\n     * @param amount amount to deposit (in stakedToken)\\n     */\\n    function deposit(uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"Deposit: Amount must be > 0\\\");\\n\\n        _updatePool();\\n\\n        uint256 pendingRewards;\\n\\n        if (userInfo[msg.sender].amount > 0) {\\n            pendingRewards =\\n                ((userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR) -\\n                userInfo[msg.sender].rewardDebt;\\n\\n            if (pendingRewards > 0) {\\n                looksRareToken.safeTransfer(msg.sender, pendingRewards);\\n            }\\n        }\\n\\n        stakedToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        userInfo[msg.sender].amount += amount;\\n        userInfo[msg.sender].rewardDebt = (userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR;\\n\\n        emit Deposit(msg.sender, amount, pendingRewards);\\n    }\\n\\n    /**\\n     * @notice Harvest tokens that are pending\\n     */\\n    function harvest() external nonReentrant {\\n        _updatePool();\\n\\n        uint256 pendingRewards = ((userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR) -\\n            userInfo[msg.sender].rewardDebt;\\n\\n        require(pendingRewards > 0, \\\"Harvest: Pending rewards must be > 0\\\");\\n\\n        userInfo[msg.sender].rewardDebt = (userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR;\\n        looksRareToken.safeTransfer(msg.sender, pendingRewards);\\n\\n        emit Harvest(msg.sender, pendingRewards);\\n    }\\n\\n    /**\\n     * @notice Withdraw staked tokens and give up rewards\\n     * @dev Only for emergency. It does not update the pool.\\n     */\\n    function emergencyWithdraw() external nonReentrant whenPaused {\\n        uint256 userBalance = userInfo[msg.sender].amount;\\n\\n        require(userBalance != 0, \\\"Withdraw: Amount must be > 0\\\");\\n\\n        // Reset internal value for user\\n        userInfo[msg.sender].amount = 0;\\n        userInfo[msg.sender].rewardDebt = 0;\\n\\n        stakedToken.safeTransfer(msg.sender, userBalance);\\n\\n        emit EmergencyWithdraw(msg.sender, userBalance);\\n    }\\n\\n    /**\\n     * @notice Withdraw staked tokens and collect reward tokens\\n     * @param amount amount to withdraw (in stakedToken)\\n     */\\n    function withdraw(uint256 amount) external nonReentrant {\\n        require(\\n            (userInfo[msg.sender].amount >= amount) && (amount > 0),\\n            \\\"Withdraw: Amount must be > 0 or lower than user balance\\\"\\n        );\\n\\n        _updatePool();\\n\\n        uint256 pendingRewards = ((userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR) -\\n            userInfo[msg.sender].rewardDebt;\\n\\n        userInfo[msg.sender].amount -= amount;\\n        userInfo[msg.sender].rewardDebt = (userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR;\\n\\n        stakedToken.safeTransfer(msg.sender, amount);\\n\\n        if (pendingRewards > 0) {\\n            looksRareToken.safeTransfer(msg.sender, pendingRewards);\\n        }\\n\\n        emit Withdraw(msg.sender, amount, pendingRewards);\\n    }\\n\\n    /**\\n     * @notice Withdraw rewards (for admin)\\n     * @param amount amount to withdraw (in looksRareToken)\\n     * @dev Only callable by owner.\\n     */\\n    function adminRewardWithdraw(uint256 amount) external onlyOwner {\\n        looksRareToken.safeTransfer(msg.sender, amount);\\n\\n        emit AdminRewardWithdraw(amount);\\n    }\\n\\n    /**\\n     * @notice Pause\\n     * It allows calling emergencyWithdraw\\n     */\\n    function pause() external onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpause\\n     */\\n    function unpause() external onlyOwner whenPaused {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Update reward per block and the end block\\n     * @param newRewardPerBlock the new reward per block\\n     * @param newEndBlock the new end block\\n     */\\n    function updateRewardPerBlockAndEndBlock(uint256 newRewardPerBlock, uint256 newEndBlock) external onlyOwner {\\n        if (block.number >= START_BLOCK) {\\n            _updatePool();\\n        }\\n        require(newEndBlock > block.number, \\\"Owner: New endBlock must be after current block\\\");\\n        require(newEndBlock > START_BLOCK, \\\"Owner: New endBlock must be after start block\\\");\\n\\n        endBlock = newEndBlock;\\n        rewardPerBlock = newRewardPerBlock;\\n\\n        emit NewRewardPerBlockAndEndBlock(newRewardPerBlock, newEndBlock);\\n    }\\n\\n    /**\\n     * @notice View function to see pending reward on frontend.\\n     * @param user address of the user\\n     * @return Pending reward\\n     */\\n    function calculatePendingRewards(address user) external view returns (uint256) {\\n        uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\\n\\n        if ((block.number > lastRewardBlock) && (stakedTokenSupply != 0)) {\\n            uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\\n            uint256 tokenReward = multiplier * rewardPerBlock;\\n            uint256 adjustedTokenPerShare = accTokenPerShare + (tokenReward * PRECISION_FACTOR) / stakedTokenSupply;\\n\\n            return (userInfo[user].amount * adjustedTokenPerShare) / PRECISION_FACTOR - userInfo[user].rewardDebt;\\n        } else {\\n            return (userInfo[user].amount * accTokenPerShare) / PRECISION_FACTOR - userInfo[user].rewardDebt;\\n        }\\n    }\\n\\n    /**\\n     * @notice Update reward variables of the pool to be up-to-date.\\n     */\\n    function _updatePool() internal {\\n        if (block.number <= lastRewardBlock) {\\n            return;\\n        }\\n\\n        uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\\n\\n        if (stakedTokenSupply == 0) {\\n            lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\\n        uint256 tokenReward = multiplier * rewardPerBlock;\\n\\n        // Update only if token reward for staking is not null\\n        if (tokenReward > 0) {\\n            accTokenPerShare = accTokenPerShare + ((tokenReward * PRECISION_FACTOR) / stakedTokenSupply);\\n        }\\n\\n        // Update last reward block only if it wasn't updated after or at the end block\\n        if (lastRewardBlock <= endBlock) {\\n            lastRewardBlock = block.number;\\n        }\\n    }\\n\\n    /**\\n     * @notice Return reward multiplier over the given \\\"from\\\" to \\\"to\\\" block.\\n     * @param from block to start calculating reward\\n     * @param to block to finish calculating reward\\n     * @return the multiplier for the period\\n     */\\n    function _getMultiplier(uint256 from, uint256 to) internal view returns (uint256) {\\n        if (to <= endBlock) {\\n            return to - from;\\n        } else if (from >= endBlock) {\\n            return 0;\\n        } else {\\n            return endBlock - from;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokenStaking/TokenDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {ILooksRareToken} from \\\"../interfaces/ILooksRareToken.sol\\\";\\n\\n/**\\n * @title TokenDistributor\\n * @notice It handles the distribution of LOOKS token.\\n * It auto-adjusts block rewards over a set number of periods.\\n */\\ncontract TokenDistributor is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for ILooksRareToken;\\n\\n    struct StakingPeriod {\\n        uint256 rewardPerBlockForStaking;\\n        uint256 rewardPerBlockForOthers;\\n        uint256 periodLengthInBlock;\\n    }\\n\\n    struct UserInfo {\\n        uint256 amount; // Amount of staked tokens provided by user\\n        uint256 rewardDebt; // Reward debt\\n    }\\n\\n    // Precision factor for calculating rewards\\n    uint256 public constant PRECISION_FACTOR = 10**12;\\n\\n    ILooksRareToken public immutable looksRareToken;\\n\\n    address public immutable tokenSplitter;\\n\\n    // Number of reward periods\\n    uint256 public immutable NUMBER_PERIODS;\\n\\n    // Block number when rewards start\\n    uint256 public immutable START_BLOCK;\\n\\n    // Accumulated tokens per share\\n    uint256 public accTokenPerShare;\\n\\n    // Current phase for rewards\\n    uint256 public currentPhase;\\n\\n    // Block number when rewards end\\n    uint256 public endBlock;\\n\\n    // Block number of the last update\\n    uint256 public lastRewardBlock;\\n\\n    // Tokens distributed per block for other purposes (team + treasury + trading rewards)\\n    uint256 public rewardPerBlockForOthers;\\n\\n    // Tokens distributed per block for staking\\n    uint256 public rewardPerBlockForStaking;\\n\\n    // Total amount staked\\n    uint256 public totalAmountStaked;\\n\\n    mapping(uint256 => StakingPeriod) public stakingPeriod;\\n\\n    mapping(address => UserInfo) public userInfo;\\n\\n    event Compound(address indexed user, uint256 harvestedAmount);\\n    event Deposit(address indexed user, uint256 amount, uint256 harvestedAmount);\\n    event NewRewardsPerBlock(\\n        uint256 indexed currentPhase,\\n        uint256 startBlock,\\n        uint256 rewardPerBlockForStaking,\\n        uint256 rewardPerBlockForOthers\\n    );\\n    event Withdraw(address indexed user, uint256 amount, uint256 harvestedAmount);\\n\\n    /**\\n     * @notice Constructor\\n     * @param _looksRareToken LOOKS token address\\n     * @param _tokenSplitter token splitter contract address (for team and trading rewards)\\n     * @param _startBlock start block for reward program\\n     * @param _rewardsPerBlockForStaking array of rewards per block for staking\\n     * @param _rewardsPerBlockForOthers array of rewards per block for other purposes (team + treasury + trading rewards)\\n     * @param _periodLengthesInBlocks array of period lengthes\\n     * @param _numberPeriods number of periods with different rewards/lengthes (e.g., if 3 changes --> 4 periods)\\n     */\\n    constructor(\\n        address _looksRareToken,\\n        address _tokenSplitter,\\n        uint256 _startBlock,\\n        uint256[] memory _rewardsPerBlockForStaking,\\n        uint256[] memory _rewardsPerBlockForOthers,\\n        uint256[] memory _periodLengthesInBlocks,\\n        uint256 _numberPeriods\\n    ) {\\n        require(\\n            (_periodLengthesInBlocks.length == _numberPeriods) &&\\n                (_rewardsPerBlockForStaking.length == _numberPeriods) &&\\n                (_rewardsPerBlockForStaking.length == _numberPeriods),\\n            \\\"Distributor: Lengthes must match numberPeriods\\\"\\n        );\\n\\n        // 1. Operational checks for supply\\n        uint256 nonCirculatingSupply = ILooksRareToken(_looksRareToken).SUPPLY_CAP() -\\n            ILooksRareToken(_looksRareToken).totalSupply();\\n\\n        uint256 amountTokensToBeMinted;\\n\\n        for (uint256 i = 0; i < _numberPeriods; i++) {\\n            amountTokensToBeMinted +=\\n                (_rewardsPerBlockForStaking[i] * _periodLengthesInBlocks[i]) +\\n                (_rewardsPerBlockForOthers[i] * _periodLengthesInBlocks[i]);\\n\\n            stakingPeriod[i] = StakingPeriod({\\n                rewardPerBlockForStaking: _rewardsPerBlockForStaking[i],\\n                rewardPerBlockForOthers: _rewardsPerBlockForOthers[i],\\n                periodLengthInBlock: _periodLengthesInBlocks[i]\\n            });\\n        }\\n\\n        require(amountTokensToBeMinted == nonCirculatingSupply, \\\"Distributor: Wrong reward parameters\\\");\\n\\n        // 2. Store values\\n        looksRareToken = ILooksRareToken(_looksRareToken);\\n        tokenSplitter = _tokenSplitter;\\n        rewardPerBlockForStaking = _rewardsPerBlockForStaking[0];\\n        rewardPerBlockForOthers = _rewardsPerBlockForOthers[0];\\n\\n        START_BLOCK = _startBlock;\\n        endBlock = _startBlock + _periodLengthesInBlocks[0];\\n\\n        NUMBER_PERIODS = _numberPeriods;\\n\\n        // Set the lastRewardBlock as the startBlock\\n        lastRewardBlock = _startBlock;\\n    }\\n\\n    /**\\n     * @notice Deposit staked tokens and compounds pending rewards\\n     * @param amount amount to deposit (in LOOKS)\\n     */\\n    function deposit(uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"Deposit: Amount must be > 0\\\");\\n\\n        // Update pool information\\n        _updatePool();\\n\\n        // Transfer LOOKS tokens to this contract\\n        looksRareToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        uint256 pendingRewards;\\n\\n        // If not new deposit, calculate pending rewards (for auto-compounding)\\n        if (userInfo[msg.sender].amount > 0) {\\n            pendingRewards =\\n                ((userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR) -\\n                userInfo[msg.sender].rewardDebt;\\n        }\\n\\n        // Adjust user information\\n        userInfo[msg.sender].amount += (amount + pendingRewards);\\n        userInfo[msg.sender].rewardDebt = (userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR;\\n\\n        // Increase totalAmountStaked\\n        totalAmountStaked += (amount + pendingRewards);\\n\\n        emit Deposit(msg.sender, amount, pendingRewards);\\n    }\\n\\n    /**\\n     * @notice Compound based on pending rewards\\n     */\\n    function harvestAndCompound() external nonReentrant {\\n        // Update pool information\\n        _updatePool();\\n\\n        // Calculate pending rewards\\n        uint256 pendingRewards = ((userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR) -\\n            userInfo[msg.sender].rewardDebt;\\n\\n        // Return if no pending rewards\\n        if (pendingRewards == 0) {\\n            // It doesn't throw revertion (to help with the fee-sharing auto-compounding contract)\\n            return;\\n        }\\n\\n        // Adjust user amount for pending rewards\\n        userInfo[msg.sender].amount += pendingRewards;\\n\\n        // Adjust totalAmountStaked\\n        totalAmountStaked += pendingRewards;\\n\\n        // Recalculate reward debt based on new user amount\\n        userInfo[msg.sender].rewardDebt = (userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR;\\n\\n        emit Compound(msg.sender, pendingRewards);\\n    }\\n\\n    /**\\n     * @notice Update pool rewards\\n     */\\n    function updatePool() external nonReentrant {\\n        _updatePool();\\n    }\\n\\n    /**\\n     * @notice Withdraw staked tokens and compound pending rewards\\n     * @param amount amount to withdraw\\n     */\\n    function withdraw(uint256 amount) external nonReentrant {\\n        require(\\n            (userInfo[msg.sender].amount >= amount) && (amount > 0),\\n            \\\"Withdraw: Amount must be > 0 or lower than user balance\\\"\\n        );\\n\\n        // Update pool\\n        _updatePool();\\n\\n        // Calculate pending rewards\\n        uint256 pendingRewards = ((userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR) -\\n            userInfo[msg.sender].rewardDebt;\\n\\n        // Adjust user information\\n        userInfo[msg.sender].amount = userInfo[msg.sender].amount + pendingRewards - amount;\\n        userInfo[msg.sender].rewardDebt = (userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR;\\n\\n        // Adjust total amount staked\\n        totalAmountStaked = totalAmountStaked + pendingRewards - amount;\\n\\n        // Transfer LOOKS tokens to the sender\\n        looksRareToken.safeTransfer(msg.sender, amount);\\n\\n        emit Withdraw(msg.sender, amount, pendingRewards);\\n    }\\n\\n    /**\\n     * @notice Withdraw all staked tokens and collect tokens\\n     */\\n    function withdrawAll() external nonReentrant {\\n        require(userInfo[msg.sender].amount > 0, \\\"Withdraw: Amount must be > 0\\\");\\n\\n        // Update pool\\n        _updatePool();\\n\\n        // Calculate pending rewards and amount to transfer (to the sender)\\n        uint256 pendingRewards = ((userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR) -\\n            userInfo[msg.sender].rewardDebt;\\n\\n        uint256 amountToTransfer = userInfo[msg.sender].amount + pendingRewards;\\n\\n        // Adjust total amount staked\\n        totalAmountStaked = totalAmountStaked - userInfo[msg.sender].amount;\\n\\n        // Adjust user information\\n        userInfo[msg.sender].amount = 0;\\n        userInfo[msg.sender].rewardDebt = 0;\\n\\n        // Transfer LOOKS tokens to the sender\\n        looksRareToken.safeTransfer(msg.sender, amountToTransfer);\\n\\n        emit Withdraw(msg.sender, amountToTransfer, pendingRewards);\\n    }\\n\\n    /**\\n     * @notice Calculate pending rewards for a user\\n     * @param user address of the user\\n     * @return Pending rewards\\n     */\\n    function calculatePendingRewards(address user) external view returns (uint256) {\\n        if ((block.number > lastRewardBlock) && (totalAmountStaked != 0)) {\\n            uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\\n\\n            uint256 tokenRewardForStaking = multiplier * rewardPerBlockForStaking;\\n\\n            uint256 adjustedEndBlock = endBlock;\\n            uint256 adjustedCurrentPhase = currentPhase;\\n\\n            // Check whether to adjust multipliers and reward per block\\n            while ((block.number > adjustedEndBlock) && (adjustedCurrentPhase < (NUMBER_PERIODS - 1))) {\\n                // Update current phase\\n                adjustedCurrentPhase++;\\n\\n                // Update rewards per block\\n                uint256 adjustedRewardPerBlockForStaking = stakingPeriod[adjustedCurrentPhase].rewardPerBlockForStaking;\\n\\n                // Calculate adjusted block number\\n                uint256 previousEndBlock = adjustedEndBlock;\\n\\n                // Update end block\\n                adjustedEndBlock = previousEndBlock + stakingPeriod[adjustedCurrentPhase].periodLengthInBlock;\\n\\n                // Calculate new multiplier\\n                uint256 newMultiplier = (block.number <= adjustedEndBlock)\\n                    ? (block.number - previousEndBlock)\\n                    : stakingPeriod[adjustedCurrentPhase].periodLengthInBlock;\\n\\n                // Adjust token rewards for staking\\n                tokenRewardForStaking += (newMultiplier * adjustedRewardPerBlockForStaking);\\n            }\\n\\n            uint256 adjustedTokenPerShare = accTokenPerShare +\\n                (tokenRewardForStaking * PRECISION_FACTOR) /\\n                totalAmountStaked;\\n\\n            return (userInfo[user].amount * adjustedTokenPerShare) / PRECISION_FACTOR - userInfo[user].rewardDebt;\\n        } else {\\n            return (userInfo[user].amount * accTokenPerShare) / PRECISION_FACTOR - userInfo[user].rewardDebt;\\n        }\\n    }\\n\\n    /**\\n     * @notice Update reward variables of the pool\\n     */\\n    function _updatePool() internal {\\n        if (block.number <= lastRewardBlock) {\\n            return;\\n        }\\n\\n        if (totalAmountStaked == 0) {\\n            lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        // Calculate multiplier\\n        uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\\n\\n        // Calculate rewards for staking and others\\n        uint256 tokenRewardForStaking = multiplier * rewardPerBlockForStaking;\\n        uint256 tokenRewardForOthers = multiplier * rewardPerBlockForOthers;\\n\\n        // Check whether to adjust multipliers and reward per block\\n        while ((block.number > endBlock) && (currentPhase < (NUMBER_PERIODS - 1))) {\\n            // Update rewards per block\\n            _updateRewardsPerBlock(endBlock);\\n\\n            uint256 previousEndBlock = endBlock;\\n\\n            // Adjust the end block\\n            endBlock += stakingPeriod[currentPhase].periodLengthInBlock;\\n\\n            // Adjust multiplier to cover the missing periods with other lower inflation schedule\\n            uint256 newMultiplier = _getMultiplier(previousEndBlock, block.number);\\n\\n            // Adjust token rewards\\n            tokenRewardForStaking += (newMultiplier * rewardPerBlockForStaking);\\n            tokenRewardForOthers += (newMultiplier * rewardPerBlockForOthers);\\n        }\\n\\n        // Mint tokens only if token rewards for staking are not null\\n        if (tokenRewardForStaking > 0) {\\n            // It allows protection against potential issues to prevent funds from being locked\\n            bool mintStatus = looksRareToken.mint(address(this), tokenRewardForStaking);\\n            if (mintStatus) {\\n                accTokenPerShare = accTokenPerShare + ((tokenRewardForStaking * PRECISION_FACTOR) / totalAmountStaked);\\n            }\\n\\n            looksRareToken.mint(tokenSplitter, tokenRewardForOthers);\\n        }\\n\\n        // Update last reward block only if it wasn't updated after or at the end block\\n        if (lastRewardBlock <= endBlock) {\\n            lastRewardBlock = block.number;\\n        }\\n    }\\n\\n    /**\\n     * @notice Update rewards per block\\n     * @dev Rewards are halved by 2 (for staking + others)\\n     */\\n    function _updateRewardsPerBlock(uint256 _newStartBlock) internal {\\n        // Update current phase\\n        currentPhase++;\\n\\n        // Update rewards per block\\n        rewardPerBlockForStaking = stakingPeriod[currentPhase].rewardPerBlockForStaking;\\n        rewardPerBlockForOthers = stakingPeriod[currentPhase].rewardPerBlockForOthers;\\n\\n        emit NewRewardsPerBlock(currentPhase, _newStartBlock, rewardPerBlockForStaking, rewardPerBlockForOthers);\\n    }\\n\\n    /**\\n     * @notice Return reward multiplier over the given \\\"from\\\" to \\\"to\\\" block.\\n     * @param from block to start calculating reward\\n     * @param to block to finish calculating reward\\n     * @return the multiplier for the period\\n     */\\n    function _getMultiplier(uint256 from, uint256 to) internal view returns (uint256) {\\n        if (to <= endBlock) {\\n            return to - from;\\n        } else if (from >= endBlock) {\\n            return 0;\\n        } else {\\n            return endBlock - from;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokenStaking/TokenSplitter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title TokenSplitter\\n * @notice It splits LOOKS to team/treasury/trading volume reward accounts based on shares.\\n */\\ncontract TokenSplitter is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    struct AccountInfo {\\n        uint256 shares;\\n        uint256 tokensDistributedToAccount;\\n    }\\n\\n    uint256 public immutable TOTAL_SHARES;\\n\\n    IERC20 public immutable looksRareToken;\\n\\n    // Total LOOKS tokens distributed across all accounts\\n    uint256 public totalTokensDistributed;\\n\\n    mapping(address => AccountInfo) public accountInfo;\\n\\n    event NewSharesOwner(address indexed oldRecipient, address indexed newRecipient);\\n    event TokensTransferred(address indexed account, uint256 amount);\\n\\n    /**\\n     * @notice Constructor\\n     * @param _accounts array of accounts addresses\\n     * @param _shares array of shares per account\\n     * @param _looksRareToken address of the LOOKS token\\n     */\\n    constructor(\\n        address[] memory _accounts,\\n        uint256[] memory _shares,\\n        address _looksRareToken\\n    ) {\\n        require(_accounts.length == _shares.length, \\\"Splitter: Length differ\\\");\\n        require(_accounts.length > 0, \\\"Splitter: Length must be > 0\\\");\\n\\n        uint256 currentShares;\\n\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            require(_shares[i] > 0, \\\"Splitter: Shares are 0\\\");\\n\\n            currentShares += _shares[i];\\n            accountInfo[_accounts[i]].shares = _shares[i];\\n        }\\n\\n        TOTAL_SHARES = currentShares;\\n        looksRareToken = IERC20(_looksRareToken);\\n    }\\n\\n    /**\\n     * @notice Release LOOKS tokens to the account\\n     * @param account address of the account\\n     */\\n    function releaseTokens(address account) external nonReentrant {\\n        require(accountInfo[account].shares > 0, \\\"Splitter: Account has no share\\\");\\n\\n        // Calculate amount to transfer to the account\\n        uint256 totalTokensReceived = looksRareToken.balanceOf(address(this)) + totalTokensDistributed;\\n        uint256 pendingRewards = ((totalTokensReceived * accountInfo[account].shares) / TOTAL_SHARES) -\\n            accountInfo[account].tokensDistributedToAccount;\\n\\n        // Revert if equal to 0\\n        require(pendingRewards != 0, \\\"Splitter: Nothing to transfer\\\");\\n\\n        accountInfo[account].tokensDistributedToAccount += pendingRewards;\\n        totalTokensDistributed += pendingRewards;\\n\\n        // Transfer funds to account\\n        looksRareToken.safeTransfer(account, pendingRewards);\\n\\n        emit TokensTransferred(account, pendingRewards);\\n    }\\n\\n    /**\\n     * @notice Update share recipient\\n     * @param _newRecipient address of the new recipient\\n     * @param _currentRecipient address of the current recipient\\n     */\\n    function updateSharesOwner(address _newRecipient, address _currentRecipient) external onlyOwner {\\n        require(accountInfo[_currentRecipient].shares > 0, \\\"Owner: Current recipient has no shares\\\");\\n        require(accountInfo[_newRecipient].shares == 0, \\\"Owner: New recipient has existing shares\\\");\\n\\n        // Copy shares to new recipient\\n        accountInfo[_newRecipient].shares = accountInfo[_currentRecipient].shares;\\n        accountInfo[_newRecipient].tokensDistributedToAccount = accountInfo[_currentRecipient]\\n            .tokensDistributedToAccount;\\n\\n        // Reset existing shares\\n        accountInfo[_currentRecipient].shares = 0;\\n        accountInfo[_currentRecipient].tokensDistributedToAccount = 0;\\n\\n        emit NewSharesOwner(_currentRecipient, _newRecipient);\\n    }\\n\\n    /**\\n     * @notice Retrieve amount of LOOKS tokens that can be transferred\\n     * @param account address of the account\\n     */\\n    function calculatePendingRewards(address account) external view returns (uint256) {\\n        if (accountInfo[account].shares == 0) {\\n            return 0;\\n        }\\n\\n        uint256 totalTokensReceived = looksRareToken.balanceOf(address(this)) + totalTokensDistributed;\\n        uint256 pendingRewards = ((totalTokensReceived * accountInfo[account].shares) / TOTAL_SHARES) -\\n            accountInfo[account].tokensDistributedToAccount;\\n\\n        return pendingRewards;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILooksRareToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ILooksRareToken is IERC20 {\\n    function SUPPLY_CAP() external view returns (uint256);\\n\\n    function mint(address account, uint256 amount) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 888888\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_looksRareToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminRewardWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestedAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestedAmount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"NewRewardPerBlockAndEndBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestedAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRECISION_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accTokenPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminRewardWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculatePendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"looksRareToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newEndBlock\",\"type\":\"uint256\"}],\"name\":\"updateRewardPerBlockAndEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakingPoolForUniswapV2Tokens","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"888888","ConstructorArguments":"000000000000000000000000dc00ba87cc2d99468f7f34bc04cbf72e111a32f7000000000000000000000000f4d2888d29d722226fafa5d9b24f9164c092421e0000000000000000000000000000000000000000000000008ac7230489e800000000000000000000000000000000000000000000000000000000000000d545b400000000000000000000000000000000000000000000000000000000011cc75e","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}