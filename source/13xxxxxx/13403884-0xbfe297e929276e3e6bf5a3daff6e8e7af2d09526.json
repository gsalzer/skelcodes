{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n// ┏━━━┓━━━━━┏┓━━━━━━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━━━━━\r\n// ┃┏━┓┃━━━━┏┛┗┓━━━━━━━━┃┏━━┛━━━━━━━━━━━━━━━━━━━━━━━\r\n// ┃┗━┛┃┏━┓━┗┓┏┛┏━━┓━━━━┃┗━━┓┏┓┏━┓━┏━━┓━┏━┓━┏━━┓┏━━┓\r\n// ┃┏━┓┃┃┏┓┓━┃┃━┃┏┓┃━━━━┃┏━━┛┣┫┃┏┓┓┗━┓┃━┃┏┓┓┃┏━┛┃┏┓┃\r\n// ┃┃ ┃┃┃┃┃┃━┃┗┓┃┃━┫━┏┓━┃┃━━━┃┃┃┃┃┃┃┗┛┗┓┃┃┃┃┃┗━┓┃┃━┫\r\n// ┗┛ ┗┛┗┛┗┛━┗━┛┗━━┛━┗┛━┗┛━━━┗┛┗┛┗┛┗━━━┛┗┛┗┛┗━━┛┗━━┛\r\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n\r\npragma solidity >=0.7.0;\r\n\r\n/// @title The interface for the Ante V0.5 Ante Test\r\n/// @notice The Ante V0.5 Ante Test wraps test logic for verifying fundamental invariants of a protocol\r\ninterface IAnteTest {\r\n    /// @notice Returns the author of the Ante Test\r\n    /// @dev This overrides the auto-generated getter for testAuthor as a public var\r\n    /// @return The address of the test author\r\n    function testAuthor() external view returns (address);\r\n\r\n    /// @notice Returns the name of the protocol the Ante Test is testing\r\n    /// @dev This overrides the auto-generated getter for protocolName as a public var\r\n    /// @return The name of the protocol in string format\r\n    function protocolName() external view returns (string memory);\r\n\r\n    /// @notice Returns a single address in the testedContracts array\r\n    /// @dev This overrides the auto-generated getter for testedContracts [] as a public var\r\n    /// @param i The array index of the address to return\r\n    /// @return The address of the i-th element in the list of tested contracts\r\n    function testedContracts(uint256 i) external view returns (address);\r\n\r\n    /// @notice Returns the name of the Ante Test\r\n    /// @dev This overrides the auto-generated getter for testName as a public var\r\n    /// @return The name of the Ante Test in string format\r\n    function testName() external view returns (string memory);\r\n\r\n    /// @notice Function containing test logic to inspect the protocol invariant\r\n    /// @dev This should usually return True\r\n    /// @return A single bool indicating if the Ante Test passes/fails\r\n    function checkTestPasses() external returns (bool);\r\n}\r\npragma solidity >=0.7.0;\r\n\r\n/// @title Ante V0.5 Ante Test smart contract\r\n/// @notice Abstract inheritable contract that supplies syntactic sugar for writing Ante Tests\r\n/// @dev Usage: contract YourAnteTest is AnteTest(\"String descriptor of test\") { ... }\r\nabstract contract AnteTest is IAnteTest {\r\n    /// @inheritdoc IAnteTest\r\n    address public override testAuthor;\r\n    /// @inheritdoc IAnteTest\r\n    string public override testName;\r\n    /// @inheritdoc IAnteTest\r\n    string public override protocolName;\r\n    /// @inheritdoc IAnteTest\r\n    address[] public override testedContracts;\r\n\r\n    /// @dev testedContracts and protocolName are optional parameters which should\r\n    /// be set in the constructor of your AnteTest\r\n    /// @param _testName The name of the Ante Test\r\n    constructor(string memory _testName) {\r\n        testAuthor = msg.sender;\r\n        testName = _testName;\r\n    }\r\n\r\n    /// @notice Returns the testedContracts array of addresses\r\n    /// @return The list of tested contracts as an array of addresses\r\n    function getTestedContracts() external view returns (address[] memory) {\r\n        return testedContracts;\r\n    }\r\n\r\n    /// @inheritdoc IAnteTest\r\n    function checkTestPasses() external virtual override returns (bool) {}\r\n}\r\n\r\npragma solidity >=0.8.0;\r\n\r\ninterface IPriceOracle {\r\n    function tokenPrice(address _token) external view returns (uint256);\r\n}\r\n\r\n// Ante Test to check if the Wild Credit reward pools Controller's token price is always within 1% of the UniswapV3Price oracle\r\n// This will be useful in the event Wild Credit ever changes the price oracle and there would be discrepancies\r\ncontract AnteWildCreditOracleTest is\r\n    AnteTest(\"Wild.Credit Controller price oracle is always the within 1% of Wild.Credit UniswapV3Oracle\")\r\n{\r\n    // this is the uniswap v3 oracle deployed by wild credit\r\n    IPriceOracle public constant uniswapV3Oracle = IPriceOracle(0x3D619bc03014917d3B27B3B86452346af36e58de);\r\n    // this is the controller contract, we use the IPriceOracle interface as it has the same tokenPrice function\r\n    IPriceOracle public constant controllerPriceOracle = IPriceOracle(0x45ee906E9CFAE0aabDB194D6180A3A119D4376C4);\r\n    uint256 accuracy = 10e12;\r\n\r\n    // these are the tokens used in wild credit rewardDistribution\r\n    address[] tokenList = [\r\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, // WETH\r\n        0x6B175474E89094C44Da98b954EedeAC495271d0F, // DAI\r\n        0xBB0E17EF65F82Ab018d8EDd776e8DD940327B28b, // AXS\r\n        0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0, // MATIC\r\n        0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9, // AAVE\r\n        0xc00e94Cb662C3520282E6f5717214004A7f26888, // COMP\r\n        0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F, // SNX\r\n        0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2, // MKR\r\n        0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599, // WBTC\r\n        0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984, // UNI\r\n        0x514910771AF9Ca656af840dff83E8264EcF986CA, // LINK\r\n        0xD533a949740bb3306d119CC777fa900bA034cd52, // CRV\r\n        0xbC396689893D065F41bc2C6EcbeE5e0085233447, // PERP\r\n        0x111111111117dC0aa78b770fA6A738034120C302, // 1INCH\r\n        0x0391D2021f89DC339F60Fff84546EA23E337750f, // BOND\r\n        0x08A75dbC7167714CeaC1a8e43a8d643A4EDd625a // WILD (this is not used in reward distribution and lending pairs but is in the oracle contract, we add it here just in case)\r\n    ];\r\n\r\n    constructor() {\r\n        protocolName = \"Wild Credit\";\r\n        testedContracts = [address(controllerPriceOracle)];\r\n    }\r\n\r\n    function checkTestPasses() public view override returns (bool) {\r\n        // get add reward pools and check if prices match\r\n        for (uint256 i = 0; i < tokenList.length; i++) {\r\n            address token = tokenList[i];\r\n            uint256 price1 = uniswapV3Oracle.tokenPrice(token);\r\n            uint256 price2 = controllerPriceOracle.tokenPrice(token);\r\n\r\n            // return false if price1 or price2 is 0\r\n            if (price1 == 0 || price2 == 0) {\r\n                return false;\r\n            }\r\n\r\n            if (!(((price1 * accuracy) / price2 > 99e11) && ((price2 * accuracy) / price1 > 99e11))) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"checkTestPasses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controllerPriceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTestedContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testAuthor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"testedContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV3Oracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AnteWildCreditOracleTest","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://924ed96dbd6faa8536dbad25802460d17a494f2fa395f47f73b2afc90404a8b8"}]}