{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"base64-sol/base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/security/PullPayment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/escrow/Escrow.sol\\\";\\n\\n/**\\n * @dev Simple implementation of a\\n * https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\\n * strategy, where the paying contract doesn't interact directly with the\\n * receiver account, which must withdraw its payments itself.\\n *\\n * Pull-payments are often considered the best practice when it comes to sending\\n * Ether, security-wise. It prevents recipients from blocking execution, and\\n * eliminates reentrancy concerns.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\\n * instead of Solidity's `transfer` function. Payees can query their due\\n * payments with {payments}, and retrieve them with {withdrawPayments}.\\n */\\nabstract contract PullPayment {\\n    Escrow private immutable _escrow;\\n\\n    constructor() {\\n        _escrow = new Escrow();\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated payments, forwarding all gas to the recipient.\\n     *\\n     * Note that _any_ account can call this function, not just the `payee`.\\n     * This means that contracts unaware of the `PullPayment` protocol can still\\n     * receive funds this way, by having a separate account call\\n     * {withdrawPayments}.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param payee Whose payments will be withdrawn.\\n     */\\n    function withdrawPayments(address payable payee) public virtual {\\n        _escrow.withdraw(payee);\\n    }\\n\\n    /**\\n     * @dev Returns the payments owed to an address.\\n     * @param dest The creditor's address.\\n     */\\n    function payments(address dest) public view returns (uint256) {\\n        return _escrow.depositsOf(dest);\\n    }\\n\\n    /**\\n     * @dev Called by the payer to store the sent amount as credit to be pulled.\\n     * Funds sent in this way are stored in an intermediate {Escrow} contract, so\\n     * there is no danger of them being spent before withdrawal.\\n     *\\n     * @param dest The destination address of the funds.\\n     * @param amount The amount to transfer.\\n     */\\n    function _asyncTransfer(address dest, uint256 amount) internal virtual {\\n        _escrow.deposit{value: amount}(dest);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC721/extensions/ERC721Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC721Pausable is ERC721, Pausable {\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/escrow/Escrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../Address.sol\\\";\\n\\n/**\\n * @title Escrow\\n * @dev Base escrow contract, holds funds designated for a payee until they\\n * withdraw them.\\n *\\n * Intended usage: This contract (and derived escrow contracts) should be a\\n * standalone contract, that only interacts with the contract that instantiated\\n * it. That way, it is guaranteed that all Ether will be handled according to\\n * the `Escrow` rules, and there is no need to check for payable functions or\\n * transfers in the inheritance tree. The contract that uses the escrow as its\\n * payment method should be its owner, and provide public methods redirecting\\n * to the escrow's deposit and withdraw.\\n */\\ncontract Escrow is Ownable {\\n    using Address for address payable;\\n\\n    event Deposited(address indexed payee, uint256 weiAmount);\\n    event Withdrawn(address indexed payee, uint256 weiAmount);\\n\\n    mapping(address => uint256) private _deposits;\\n\\n    function depositsOf(address payee) public view returns (uint256) {\\n        return _deposits[payee];\\n    }\\n\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     * @param payee The destination address of the funds.\\n     */\\n    function deposit(address payee) public payable virtual onlyOwner {\\n        uint256 amount = msg.value;\\n        _deposits[payee] += amount;\\n        emit Deposited(payee, amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated balance for a payee, forwarding all gas to the\\n     * recipient.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param payee The address whose funds will be withdrawn and transferred to.\\n     */\\n    function withdraw(address payable payee) public virtual onlyOwner {\\n        uint256 payment = _deposits[payee];\\n\\n        _deposits[payee] = 0;\\n\\n        payee.sendValue(payment);\\n\\n        emit Withdrawn(payee, payment);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/BMP.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright 2021 Arran Schlosberg / Twitter @divergence_art\\n// All Rights Reserved\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"base64-sol/base64.sol\\\";\\n\\n/**\\n * @dev 8-bit BMP encoding with arbitrary colour palettes.\\n */\\ncontract BMP {\\n    using Base64 for string;\\n\\n    /**\\n     * @dev Returns an 8-bit grayscale palette for bitmap images.\\n     */\\n    function grayscale() public pure returns (bytes memory) {\\n        bytes memory palette = new bytes(768);\\n        // TODO: investigate a way around using ++ += or + on a bytes1 without\\n        // having to use a placeholder int8 for incrementing!\\n        uint8 j;\\n        bytes1 b;\\n        for (uint16 i = 0; i < 768; i += 3) {\\n            b = bytes1(j);\\n            palette[i  ] = b;\\n            palette[i+1] = b;\\n            palette[i+2] = b;\\n            // The last increment would revert if checked.\\n            unchecked { j++; }\\n        }\\n        return palette;\\n    }\\n\\n    /**\\n     * @dev Returns an 8-bit BMP encoding of the pixels.\\n     *\\n     * Spec: https://www.digicamsoft.com/bmp/bmp.html\\n     *\\n     * Layout description with offsets:\\n     * http://www.ece.ualberta.ca/~elliott/ee552/studentAppNotes/2003_w/misc/bmp_file_format/bmp_file_format.htm\\n     *\\n     * N.B. Everything is little-endian, hence the assembly for masking and\\n     * shifting.\\n     */\\n    function bmp(bytes memory pixels, uint32 width, uint32 height, bytes memory palette) public pure returns (bytes memory) {\\n        require(width * height == pixels.length, \\\"Invalid dimensions\\\");\\n        require(palette.length == 768, \\\"256 colours required\\\");\\n\\n        // 14 bytes for BITMAPFILEHEADER + 40 for BITMAPINFOHEADER + 1024 for palette\\n        bytes memory buf = new bytes(1078);\\n\\n        // BITMAPFILEHEADER\\n        buf[0] = 0x42; buf[1] = 0x4d; // bfType = BM\\n        \\n        uint32 size = 1078 + uint32(pixels.length);\\n        // bfSize; bytes in the entire buffer\\n        uint32 b;\\n        for (uint i = 2; i < 6; i++) {\\n            assembly {\\n                b := and(size, 0xff)\\n                size := shr(8, size)\\n            }\\n            buf[i] = bytes1(uint8(b));\\n        }\\n\\n        // Next 4 bytes are bfReserved1 & 2; both = 0 = initial value\\n\\n        // bfOffBits; bytes from beginning of file to pixels = 14 + 40 + 1024\\n        // (see size above)\\n        buf[0x0a] = 0x36;\\n        buf[0x0b] = 0x04;\\n\\n        // BITMAPINFOHEADER\\n        // biSize; bytes in this struct = 40\\n        buf[0x0e] = 0x28;\\n\\n        // biWidth / biHeight\\n        for (uint i = 0x12; i < 0x16; i++) {\\n            assembly {\\n                b := and(width, 0xff)\\n                width := shr(8, width)\\n            }\\n            buf[i] = bytes1(uint8(b));\\n        }\\n        for (uint i = 0x16; i < 0x1a; i++) {\\n            assembly {\\n                b := and(height, 0xff)\\n                height := shr(8, height)\\n            }\\n            buf[i] = bytes1(uint8(b));\\n        }\\n\\n        // biPlanes\\n        buf[0x1a] = 0x01;\\n        // biBitCount\\n        buf[0x1c] = 0x08;\\n\\n        // I've decided to use raw pixels instead of run-length encoding for\\n        // compression as these aren't being stored. It's therefore simpler to\\n        // avoid the extra computation. Therefore biSize can be 0. Similarly\\n        // there's no point checking exactly which colours are used, so\\n        // biClrUsed and biClrImportant can be 0 to indicate all colours. This\\n        // is therefore the end of BITMAPINFOHEADER. Simples.\\n\\n        uint j = 54;\\n        for (uint i = 0; i < 768; i += 3) {\\n            // RGBQUAD is in reverse order and the 4th byte is unused.\\n            buf[j  ] = palette[i+2];\\n            buf[j+1] = palette[i+1];\\n            buf[j+2] = palette[i  ];\\n            j += 4;\\n        }\\n\\n        return abi.encodePacked(buf, pixels);\\n    }\\n\\n    /**\\n     * @dev Returns the buffer, presumably from bmp(), as a base64 data URI.\\n     */\\n    function bmpDataURI(bytes memory bmpBuf) public pure returns (string memory) {\\n        return string(abi.encodePacked(\\n            'data:image/bmp;base64,',\\n            Base64.encode(bmpBuf)\\n        ));\\n    }\\n\\n    /**\\n     * @dev Scale pixels by repetition along both axes.\\n     */\\n    function scalePixels(bytes memory pixels, uint32 width, uint32 height, uint32 scale) public pure returns (bytes memory) {\\n        require(width * height == pixels.length, \\\"Invalid dimensions\\\");\\n        bytes memory scaled = new bytes(pixels.length * scale * scale);\\n\\n        // Indices in each of the original and scaled buffers, respectively. The\\n        // scaled-buffer index is always incremented. The original index is\\n        // incremented only after scaling x-wise by scale times, then reversed\\n        // at the end of the width to allow for y-wise scaling.\\n        uint32 origIdx;\\n        uint32 scaleIdx;\\n        for (uint32 y = 0; y < height; y++) {\\n            for (uint32 yScale = 0; yScale < scale; yScale++) {\\n                for (uint32 x = 0; x < width; x++) {\\n                    for (uint32 xScale = 0; xScale < scale; xScale++) {\\n                        scaled[scaleIdx] = pixels[origIdx];\\n                        scaleIdx++;\\n                    }\\n                    origIdx++;\\n                }\\n                // Rewind to copy the row again.\\n                origIdx -= width;\\n            }\\n            // Don't just copy the first row.\\n            origIdx += width;\\n        }\\n\\n        return scaled;\\n    }\\n\\n}\"\r\n    },\r\n    \"/contracts/BaseOpenSea.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// https://gist.github.com/dievardump/483eb43bc6ed30b14f01e01842e3339b/\\n\\n/// @title OpenSea contract helper that defines a few things\\n/// @author Simon Fremaux (@dievardump)\\n/// @dev This is a contract used to add OpenSea's support for gas-less trading\\n///      by checking if operator is owner's proxy\\ncontract BaseOpenSea {\\n    string private _contractURI;\\n    ProxyRegistry private _proxyRegistry;\\n\\n    /// @notice Returns the contract URI function. Used on OpenSea to get details\\n    ///         about a contract (owner, royalties etc...)\\n    ///         See documentation: https://docs.opensea.io/docs/contract-level-metadata\\n    function contractURI() public view returns (string memory) {\\n        return _contractURI;\\n    }\\n\\n    /// @notice Helper for OpenSea gas-less trading\\n    /// @dev Allows to check if `operator` is owner's OpenSea proxy\\n    /// @param owner the owner we check for\\n    /// @param operator the operator (proxy) we check for\\n    function isOwnersOpenSeaProxy(address owner, address operator)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        ProxyRegistry proxyRegistry = _proxyRegistry;\\n        return\\n            // we have a proxy registry address\\n            address(proxyRegistry) != address(0) &&\\n            // current operator is owner's proxy address\\n            address(proxyRegistry.proxies(owner)) == operator;\\n    }\\n\\n    /// @dev Internal function to set the _contractURI\\n    /// @param contractURI_ the new contract uri\\n    function _setContractURI(string memory contractURI_) internal {\\n        _contractURI = contractURI_;\\n    }\\n\\n    /// @dev Internal function to set the _proxyRegistry\\n    /// @param proxyRegistryAddress the new proxy registry address\\n    function _setOpenSeaRegistry(address proxyRegistryAddress) internal {\\n        _proxyRegistry = ProxyRegistry(proxyRegistryAddress);\\n    }\\n}\\n\\ncontract OwnableDelegateProxy {}\\n\\ncontract ProxyRegistry {\\n    mapping(address => OwnableDelegateProxy) public proxies;\\n}\"\r\n    },\r\n    \"/contracts/Brotchain.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright 2021 Arran Schlosberg / Twitter @divergence_art\\n// All Rights Reserved\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/*\\n\\n  ____            _       _           _       \\n |  _ \\\\          | |     | |         (_)      \\n | |_) |_ __ ___ | |_ ___| |__   __ _ _ _ __  \\n |  _ <| '__/ _ \\\\| __/ __| '_ \\\\ / _` | | '_ \\\\ \\n | |_) | | | (_) | || (__| | | | (_| | | | | |\\n |____/|_|  \\\\___/ \\\\__\\\\___|_| |_|\\\\__,_|_|_| |_|\\n                                              \\n                                              \\n\\\"In-chain\\\" generative art, Brots are BMP images generated and rendered entirely\\nby this contract. No externalities, no rendering dependencies—just 100%\\nSolidity.\\n\\n                                .                               \\n                         ...............                        \\n                     .......................                    \\n                   ...........................                  \\n                 ...............................                \\n               ...................................              \\n              .....................................             \\n             .......................................            \\n           ...........................................          \\n          .............................................         \\n         ...............................................        \\n        .................................................       \\n        .................................................       \\n       ...................................................      \\n      ...................'''```'''.........................     \\n     ..................''''``^```'''........................    \\n     .................''''````\\\",$''''.......................    \\n    ................''''''````\\\"^``''''.......................   \\n    ...............''''''```\\\"^$\\\"^```'''......................   \\n   ...............'''''`````,$$$!````''.......................  \\n   ..............'''''``````:$$$l`````''......................  \\n  .............'''''``^^^`^^\\\"$$$\\\"^^```^''...................... \\n  ............''''````^:,^Y$$$$$$/$^,^^`'......................\\n  ...........''```````^I$#$$$$$$$$$I$|\\\"``'..................... \\n  .........''````````^^,$$$$$$$$$$$$$$^``'..................... \\n ........''``````````\\\"$$$$$$$$$$$$$$$_^``'......................\\n .....'''```\\\"````````:$$$$$$$$$$$$$$$$,!`''.....................\\n ...''''````^,^^,\\\"^^^}$$$$$$$$$$$$$$$$$^`''.....................\\n .'''''`````^:$$$l:^\\\"$$$$$$$$$$$$$$$$$$\\\"`''.....................\\n '''''``````\\\")$$$$$<,$$$$$$$$$$$$$$$$$$``''.....................\\n ''''`````^^,$$$$$$$;$$$$$$$$$$$$$$$$$,``''.....................\\n ````````^,$}$$$$$$$<$$$$$$$$$$$$$$$$$```''.....................\\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$^```''.....................\\n ````````^,$}$$$$$$$<$$$$$$$$$$$$$$$$$```''.....................\\n ''''`````^^,$$$$$$$;$$$$$$$$$$$$$$$$$,``''.....................\\n '''''``````\\\")$$$$$<,$$$$$$$$$$$$$$$$$$``''.....................\\n .'''''`````^:$$$l:^\\\"$$$$$$$$$$$$$$$$$$\\\"`''.....................\\n ...''''````^,^^,\\\"^^^}$$$$$$$$$$$$$$$$$^`''.....................\\n .....'''```\\\"````````:$$$$$$$$$$$$$$$$,!`''.....................\\n ........''``````````\\\"$$$$$$$$$$$$$$$_^``'......................\\n  .........''````````^^,$$$$$$$$$$$$$$^``'..................... \\n  ...........''```````^I$#$$$$$$$$$I$|\\\"``'.....................\\n  ............''''````^:,^Y$$$$$$/$^,^^`'...................... \\n  .............'''''``^^^`^^\\\"$$$\\\"^^```^''...................... \\n   ..............'''''``````:$$$l`````''......................  \\n   ...............'''''`````,$$$!````''.......................  \\n    ...............''''''```\\\"^$\\\"^```'''......................   \\n    ................''''''````\\\"^``''''.......................   \\n     .................''''````\\\",$''''.......................    \\n     ..................''''``^```'''........................    \\n      ...................'''```'''.........................     \\n       ...................................................      \\n        .................................................       \\n        .................................................       \\n         ...............................................        \\n          .............................................         \\n           ...........................................          \\n             .......................................            \\n              .....................................             \\n               ...................................              \\n                 ...............................                \\n                   ...........................                  \\n                     .......................                    \\n                         ...............                        \\n*/\\n\\nimport \\\"./BaseOpenSea.sol\\\";\\nimport \\\"./BMP.sol\\\";\\nimport \\\"./Mandelbrot.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/access/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/security/PullPayment.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC721/extensions/ERC721Pausable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/utils/Strings.sol\\\";\\n\\ncontract Brotchain is BaseOpenSea, ERC721Enumerable, ERC721Pausable, Ownable, PullPayment {\\n    /**\\n     * @dev A BMP pixel encoder, supporting arbitrary colour palettes.\\n     */\\n    BMP public immutable _bmp;\\n\\n    /**\\n     * @dev A Mandelbrot-and-friends fractal generator.\\n     */\\n    Mandelbrot public immutable _brots;\\n\\n    /**\\n     * @dev Maximum number of editions per series.\\n     */\\n    uint256 public constant MAX_PER_SERIES = 64;\\n\\n    /**\\n     * @dev Mint price = pi/10.\\n     */\\n    uint256 public constant MINT_PRICE = (314159 ether) / 1000000;\\n\\n    constructor(string memory name, string memory symbol, address brots, address openSeaProxyRegistry) ERC721(name, symbol) {\\n        _bmp = new BMP();\\n        _brots = Mandelbrot(brots);\\n\\n        if (openSeaProxyRegistry != address(0)) {\\n            _setOpenSeaRegistry(openSeaProxyRegistry);\\n        }\\n    }\\n\\n    /**\\n     * @dev Base config for pricing + all tokens in a series.\\n     */\\n    struct Series {\\n        uint256[] patches;\\n        uint256 numMinted;\\n        uint32 width;\\n        uint32 height;\\n        bytes defaultPalette;\\n        bool locked;\\n        string name;\\n        string description;\\n    }\\n\\n    /**\\n     * @dev All existing series configs.\\n     */\\n    Series[] public seriesConfigs;\\n\\n    /**\\n     * @dev Require that the series exists.\\n     */\\n    modifier seriesMustExist(uint256 seriesId) {\\n        require(seriesId < seriesConfigs.length, \\\"Series doesn't exist\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Creates a new series of brots, based on the precomputed patches.\\n     *\\n     * The seriesId MUST be equal to seriesConfigs.length. This is a safety\\n     * measure for automated deployment of multiple series in case an earlier\\n     * transaction fails as series would otherwise be created out of order. This\\n     * effectively makes newSeries() idempotent.\\n     */\\n    function newSeries(uint256 seriesId, string memory name, string memory description, uint256[] memory patches, uint32 width, uint32 height) external onlyOwner {\\n        require(seriesId == seriesConfigs.length, \\\"Invalid new series ID\\\");\\n        \\n        seriesConfigs.push(Series({\\n            name: name,\\n            description: description,\\n            patches: patches,\\n            width: width,\\n            height: height,\\n            numMinted: 0,\\n            locked: false,\\n            defaultPalette: new bytes(0)\\n        }));\\n        emit SeriesPixelsChanged(seriesId);\\n    }\\n\\n    /**\\n     * @dev Require that the series isn't locked to updates.\\n     */\\n    modifier seriesNotLocked(uint256 seriesId) {\\n        require(!seriesConfigs[seriesId].locked, \\\"Series locked\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Permanently lock the series to changes in pixels.\\n     */\\n    function lockSeries(uint256 seriesId) external seriesMustExist(seriesId) onlyOwner {\\n        Series memory series = seriesConfigs[seriesId];\\n        uint256 length;\\n        for (uint i = 0; i < series.patches.length; i++) {\\n            length += _brots.cachedPatch(series.patches[i]).pixels.length;\\n        }\\n        require(series.width * series.height == length, \\\"Invalid dimensions\\\");\\n        \\n        seriesConfigs[seriesId].locked = true;\\n    }\\n\\n    /**\\n     * @dev Emitted when a series' patches or dimensions change.\\n     */\\n    event SeriesPixelsChanged(uint256 indexed seriesId);\\n\\n    /**\\n     * @dev Update the patches that govern series pixels.\\n     */\\n    function setSeriesPatches(uint256 seriesId, uint256[] memory patches) external seriesMustExist(seriesId) seriesNotLocked(seriesId) onlyOwner {\\n        seriesConfigs[seriesId].patches = patches;\\n        emit SeriesPixelsChanged(seriesId);\\n    }\\n\\n    /**\\n     * @dev Update the dimensions of the series.\\n     */\\n    function setSeriesDimensions(uint256 seriesId, uint32 width, uint32 height) external seriesMustExist(seriesId) seriesNotLocked(seriesId) onlyOwner {\\n        seriesConfigs[seriesId].width = width;\\n        seriesConfigs[seriesId].height = height;\\n        emit SeriesPixelsChanged(seriesId);\\n    }\\n\\n    /**\\n     * @dev Update the default palette for a series when the token doesn't have one.\\n     */\\n    function setSeriesDefaultPalette(uint256 seriesId, bytes memory palette) external seriesMustExist(seriesId) seriesNotLocked(seriesId) onlyOwner {\\n        require(palette.length == 768, \\\"256 colours required\\\");\\n        seriesConfigs[seriesId].defaultPalette = palette;\\n    }\\n\\n    /**\\n     * @dev Update the series name.\\n     */\\n    function setSeriesName(uint256 seriesId, string memory name) external seriesMustExist(seriesId) onlyOwner {\\n        seriesConfigs[seriesId].name = name;\\n    }\\n\\n    /**\\n     * @dev Update the series description.\\n     */\\n    function setSeriesDescription(uint256 seriesId, string memory description) external seriesMustExist(seriesId) onlyOwner {\\n        seriesConfigs[seriesId].description = description;\\n    }\\n\\n    /**\\n     * @dev Token configuration such as series (pixels).\\n     */\\n    struct TokenConfig {\\n        uint256 paletteChanges;\\n        address paletteBy;\\n        address paletteApproval;\\n        // paletteReset is actually a boolean, but sized to align with a 256-bit\\n        // boundary for better storage. See resetPalette();\\n        uint192 paletteReset;\\n        bytes palette;\\n    }\\n\\n    /**\\n     * @dev All existing token configs.\\n     */\\n    mapping(uint256 => TokenConfig) public tokenConfigs;\\n    \\n    /**\\n     * @dev Whether to limit minting only to those in _earlyAccess mapping.\\n     */\\n    bool public onlyEarlyAccess = true;\\n\\n    /**\\n     * @dev Addresses with early minting access.\\n     */\\n    mapping(address => uint256) private _earlyAccess;\\n\\n    /**\\n     * @dev Emitted when setOnlyEarlyAccess(to) is called.\\n     */\\n    event OnlyEarlyAccess();\\n\\n    /**\\n     * @dev Set the onlyEarlyAccess flag.\\n     */\\n    function setOnlyEarlyAccess(bool to) external onlyOwner {\\n        onlyEarlyAccess = to;\\n        emit OnlyEarlyAccess();\\n    }\\n\\n    /**\\n     * @dev Call parameter for early access because mapping()s are disallowed.\\n     */\\n    struct EarlyAccess {\\n        address addr;\\n        uint256 totalAllowed;\\n    }\\n\\n    /**\\n     * @dev Set early-access granting or revocation for the addresses.\\n     *\\n     * The supply is not the amount left, but the total in the early-access\\n     * phase.\\n     */\\n    function setEarlyAccessGrants(EarlyAccess[] calldata addresses) external onlyOwner {\\n        for (uint i = 0; i < addresses.length; i++) {\\n            _earlyAccess[addresses[i].addr] = addresses[i].totalAllowed;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total early-access allocation for the address.\\n     */\\n    function earlyAccessFor(address addr) public view returns (uint256) {\\n        return _earlyAccess[addr];\\n    }\\n\\n    /**\\n     * @dev Max number that the contract owner can mint in a specific series.\\n     */\\n    uint256 public constant OWNER_ALLOCATION = 2;\\n\\n    /**\\n     * @dev Allow minting of the genesis pieces.\\n     */\\n    function safeMintInSeries(uint256 seriesId) external seriesMustExist(seriesId) onlyOwner {\\n        require(seriesConfigs[seriesId].numMinted < OWNER_ALLOCATION, \\\"Don't be greedy\\\");\\n        _safeMintInSeries(seriesId);\\n    }\\n\\n    /**\\n     * @dev Mint one edition, from a randomly selected series.\\n     *\\n     * # NB see the bug described in _safeMintInSeries().\\n     */\\n    function safeMint() external payable {\\n        require(msg.value >= MINT_PRICE, \\\"Insufficient payment\\\");\\n        _asyncTransfer(owner(), msg.value);\\n\\n        uint256 numSeries = seriesConfigs.length;\\n        // We need some sort of randomness to choose which series is issued\\n        // next. sha3 is, by nature of being a cryptographic hash, a good PRNG.\\n        // Although this can technically be manipulated by someone in control of\\n        // block.timestamp, they're in a race against other blocks and also the\\n        // last minted (which is also random). If you can control this and care\\n        // enough to do so, then you deserve to choose which series you get!\\n        uint256 rand = uint256(keccak256(abi.encodePacked(\\n            _msgSender(),\\n            block.timestamp,\\n            lastTokenMinted\\n        ))) % numSeries; // uniform if numSeries is a power of 2 (it is)\\n        \\n        // Try each, starting from a random index, until a series with\\n        // capacity is found.\\n        for (uint256 i = 0; i < numSeries; i++) {\\n            uint256 seriesId = (rand + i) % numSeries;\\n            if (seriesConfigs[seriesId].numMinted < MAX_PER_SERIES) {\\n                _safeMintInSeries(seriesId);\\n                return;\\n            }\\n        }\\n        revert(\\\"All series sold out\\\");\\n    }\\n\\n    /**\\n     * @dev Last tokenId minted.\\n     *\\n     * This doesn't increment because the series could be different to the one\\n     * before. It's useful for randomly choosing the next token and for testing\\n     * too. Even at a gas price of 100, updating this only costs 0.0005 ETH.\\n     */\\n    uint256 public lastTokenMinted;\\n\\n    /**\\n     * @dev Value by which seriesId is multiplied for the prefix of a tokenId.\\n     *\\n     * Series 0 will have tokens 0, 1, 2…; series 1 will have tokens 1000, 1001,\\n     * etc.\\n     */\\n    uint256 private constant _tokenIdSeriesMultiplier = 1e4;\\n\\n    /**\\n     * @dev Returns the seriesId of a token. The token may not exist.\\n     */\\n    function tokenSeries(uint256 tokenId) public pure returns (uint256) {\\n        return tokenId / _tokenIdSeriesMultiplier;\\n    }\\n\\n    /**\\n     * @dev Returns a token's edition within its series. The token may not exist.\\n     */\\n    function tokenEditionNum(uint256 tokenId) public pure returns (uint256) {\\n        return tokenId % _tokenIdSeriesMultiplier;\\n    }\\n\\n    /**\\n     * @dev Mints the next token in the series.\\n     */\\n    function _safeMintInSeries(uint256 seriesId) internal seriesMustExist(seriesId) {\\n        /**\\n         * ################################\\n         * There is a bug in this code that we only discovered after deployment.\\n         * A minter can move their piece to a different wallet, reducing their\\n         * balance, and then mint again. See GermanBakery.sol for the fix.\\n         * ################################\\n         */\\n        if (_msgSender() != owner()) {\\n            if (onlyEarlyAccess) {\\n                require(balanceOf(_msgSender()) < _earlyAccess[_msgSender()], \\\"Early access exhausted for wallet\\\");\\n            } else {\\n                require(balanceOf(_msgSender()) < seriesConfigs.length, \\\"Wallet cap reached\\\");\\n            }\\n        }\\n\\n        Series memory series = seriesConfigs[seriesId];\\n        uint256 tokenId = seriesId * _tokenIdSeriesMultiplier + series.numMinted;\\n        lastTokenMinted = tokenId;\\n\\n        tokenConfigs[tokenId] = TokenConfig({\\n            paletteChanges: 0,\\n            paletteBy: address(0),\\n            paletteApproval: address(0),\\n            paletteReset: 0,\\n            palette: new bytes(0)\\n        });\\n        seriesConfigs[seriesId].numMinted++;\\n\\n        _safeMint(_msgSender(), tokenId);\\n        emit TokenBMPChanged(tokenId);\\n    }\\n\\n    /**\\n     * @dev Emitted when the address is approved to change a token's palette.\\n     */\\n    event PaletteApproval(uint256 indexed tokenId, address approved);\\n\\n    /**\\n     * @dev Approve the address to change the token's palette.\\n     *\\n     * Set to 0x00 address to revoke. Token owner and ERC721 approved already\\n     * have palette approval. This is to allow someone else to modify a palette\\n     * without the risk of them transferring the token.\\n     *\\n     * Revoked upon token transfer.\\n     */\\n    function approveForPalette(uint256 tokenId, address approved) external {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Only owner or approver\\\");\\n        address owner = ownerOf(tokenId);\\n        require(approved != owner, \\\"Approving token owner\\\");\\n        \\n       tokenConfigs[tokenId].paletteApproval = approved;\\n        emit PaletteApproval(tokenId, approved);\\n    }\\n\\n    /**\\n     * @dev Emitted to signal changing of a token's BMP.\\n     */\\n    event TokenBMPChanged(uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Require that the message sender is approved for palette changes.\\n     */\\n    modifier approvedForPalette(uint256 tokenId) {\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId) ||\\n            tokenConfigs[tokenId].paletteApproval == _msgSender(),\\n            \\\"Not approved for palette\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Clear a token's palette, using the series default instead.\\n     *\\n     * Does not reset the paletteChanges count, but increments it.\\n     *\\n     * Emits TokenBMPChanged(tokenId);\\n     */\\n    function resetPalette(uint256 tokenId) approvedForPalette(tokenId) external {\\n        require(tokenConfigs[tokenId].paletteReset == 0, \\\"Already reset\\\");\\n        \\n        tokenConfigs[tokenId].paletteChanges++;\\n        tokenConfigs[tokenId].paletteBy = address(0);\\n        // Initial palette setting costs about 0.01 ETH at 30 gas but changes\\n        // are a little over 25% of that. Using a boolean for reset adds\\n        // negligible cost to the reset, in exchange for  greater savings on the\\n        // next setPalette() call.\\n        tokenConfigs[tokenId].paletteReset = 1;\\n        \\n        emit TokenBMPChanged(tokenId);\\n    }\\n\\n    /**\\n     * @dev Set a token's palette if an owner or has approval.\\n     *\\n     * Emits TokenBMPChanged(tokenId).\\n     */\\n    function setPalette(uint256 tokenId, bytes memory palette) approvedForPalette(tokenId) external {\\n        require(palette.length == 768, \\\"256 colours required\\\");\\n        \\n        tokenConfigs[tokenId].palette = palette;\\n        tokenConfigs[tokenId].paletteChanges++;\\n        tokenConfigs[tokenId].paletteBy = _msgSender();\\n        tokenConfigs[tokenId].paletteReset = 0;\\n        \\n        emit TokenBMPChanged(tokenId);\\n    }\\n\\n    /**\\n     * @dev Concatenates a series' patches into a single array.\\n     */\\n    function seriesPixels(uint256 seriesId) public view seriesMustExist(seriesId) returns (bytes memory) {\\n        return _brots.concatenatePatches(seriesConfigs[seriesId].patches);\\n    }\\n\\n    /**\\n     * @dev Token equivalent of seriesPixels().\\n     */\\n    function pixelsOf(uint256 tokenId) public view returns (bytes memory) {\\n        require(_exists(tokenId), \\\"Token doesn't exist\\\");\\n        return seriesPixels(tokenSeries(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the effective token palette, considering resets.\\n     *\\n     * Boolean flag indicates whether it's the original palette; i.e. nothing is\\n     * set or the palette has been explicitly reset().\\n     */\\n    function _tokenPalette(uint256 tokenId) private view returns (bytes memory, bool) {\\n        TokenConfig memory token = tokenConfigs[tokenId];\\n        bytes memory palette = token.palette;\\n        bool original = token.paletteReset == 1 || palette.length == 0;\\n        \\n        if (original) {\\n            palette = seriesConfigs[tokenSeries(tokenId)].defaultPalette;\\n            if (palette.length == 0) {\\n                palette = _bmp.grayscale();\\n            }\\n        }\\n        \\n        return (palette, original);\\n    }\\n\\n    /**\\n     * @dev Returns the BMP-encoded token image, scaling pixels in both dimensions.\\n     *\\n     * Scale of 0 is treated as 1.\\n     */\\n    function bmpOf(uint256 tokenId, uint32 scale) public view returns (bytes memory) {\\n        require(_exists(tokenId), \\\"Token doesn't exist\\\");\\n        Series memory series = seriesConfigs[tokenSeries(tokenId)];\\n        (bytes memory palette, ) = _tokenPalette(tokenId);\\n        \\n        bytes memory pixels = pixelsOf(tokenId);\\n        if (scale > 1) {\\n            return _bmp.bmp(\\n                _bmp.scalePixels(pixels, series.width, series.height, scale),\\n                series.width * scale,\\n                series.height * scale,\\n                palette\\n            );\\n        }\\n        return _bmp.bmp(pixels, series.width, series.height, palette);\\n    }\\n\\n    /**\\n     * @dev Equivalent to bmpOf() but encoded as a data URI to view in a browser.\\n     */\\n    function bmpDataURIOf(uint256 tokenId, uint32 scale) public view returns (string memory) {\\n        return _bmp.bmpDataURI(bmpOf(tokenId, scale));\\n    }\\n\\n    /**\\n     * @dev Renders the token as an ASCII brot.\\n     *\\n     * This is an homage to Robert W Brooks and Peter Matelski who were the\\n     * first to render the Mandelbrot, in this form.\\n     */\\n    function brooksMatelskiOf(uint256 tokenId, string memory characters) external view returns (string memory) {\\n        bytes memory charset = abi.encodePacked(characters);\\n        require(charset.length == 256, \\\"256 characters\\\");\\n\\n        Series memory series = seriesConfigs[tokenSeries(tokenId)];\\n        // Include newlines except for the end.\\n        bytes memory ascii = new bytes((series.width+1)*series.height - 1);\\n        \\n        bytes memory pixels = pixelsOf(tokenId);\\n\\n        uint col;\\n        uint a; // ascii index\\n        for (uint p = 0; p < pixels.length; p++) {\\n            ascii[a] = charset[uint8(pixels[p])];\\n            a++;\\n            col++;\\n            \\n            if (col == series.width && a < ascii.length) {\\n                ascii[a] = 0x0a; // Not compatible with Windows and typewriters.\\n                a++;\\n                col = 0;\\n            }\\n        }\\n\\n        return string(ascii);\\n    }\\n\\n    /**\\n     * @dev Base URL for external_url metadata field.\\n     */\\n    string private _baseExternalUrl = \\\"https://brotchain.art/brot/\\\";\\n\\n    /**\\n     * @dev Set the base URL for external_url metadata field.\\n     */\\n    function setBaseExternalUrl(string memory url) public onlyOwner {\\n        _baseExternalUrl = url;\\n    }\\n\\n    /**\\n     * @dev Returns data URI of token metadata.\\n     *\\n     * The BMP-encoded image is included in its own base64-encoded data URI.\\n     */\\n    function tokenURI(uint256 tokenId) public override view returns (string memory) {\\n        TokenConfig memory token = tokenConfigs[tokenId];\\n        Series memory series = seriesConfigs[tokenSeries(tokenId)];\\n        uint256 editionNum = tokenEditionNum(tokenId);\\n\\n        bytes memory data = abi.encodePacked(\\n            'data:application/json,{',\\n                '\\\"name\\\":\\\"', series.name, ' #', Strings.toString(editionNum) ,'\\\",',\\n                '\\\"description\\\":\\\"', series.description, '\\\",'\\n                '\\\"external_url\\\":\\\"', _baseExternalUrl, Strings.toString(tokenId),'\\\",'\\n        );\\n\\n        // Combining this packing with the one above would result in the stack\\n        // being too deep and a failure to compile.\\n        data = abi.encodePacked(\\n            data,\\n            '\\\"attributes\\\":['\\n                '{\\\"value\\\":\\\"', series.name, '\\\"},'\\n                '{',\\n                    '\\\"trait_type\\\":\\\"Palette Changes\\\",',\\n                    '\\\"value\\\":', Strings.toString(token.paletteChanges),\\n                '}'\\n        );\\n\\n        if (token.paletteBy != address(0)) {\\n            data = abi.encodePacked(\\n                data,\\n                ',{',\\n                    '\\\"trait_type\\\":\\\"Palette By\\\",',\\n                    '\\\"value\\\":\\\"', Strings.toHexString(uint256(uint160(token.paletteBy)), 20),'\\\"',\\n                '}'\\n            );\\n        }\\n\\n        (, bool original) = _tokenPalette(tokenId);\\n        if (original) {\\n            data = abi.encodePacked(\\n                data,\\n                ',{\\\"value\\\":\\\"Original Palette\\\"}'\\n            );\\n        }      \\n        if (editionNum == 0) {\\n            data = abi.encodePacked(\\n                data,\\n                ',{\\\"value\\\":\\\"Genesis\\\"}'\\n            );\\n        }\\n\\n        return string(abi.encodePacked(\\n            data,\\n                '],',\\n                '\\\"image\\\":\\\"', bmpDataURIOf(tokenId, 1), '\\\"',\\n            '}'\\n        ));\\n    }\\n\\n    /**\\n     * @dev Pause the contract.\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpause the contract.\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\\n        return super.isApprovedForAll(owner, operator) || isOwnersOpenSeaProxy(owner, operator);\\n    }\\n\\n    /**\\n     * @dev OpenSea collection config.\\n     *\\n     * https://docs.opensea.io/docs/contract-level-metadata\\n     */\\n    function setContractURI(string memory contractURI) external onlyOwner {\\n        _setContractURI(contractURI);\\n    }\\n\\n    /**\\n     * @dev Revoke palette approval upon token transfer.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override(ERC721Enumerable, ERC721Pausable) {\\n        tokenConfigs[tokenId].paletteApproval = address(0);\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override (ERC721, ERC721Enumerable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\"\r\n    },\r\n    \"/contracts/Mandelbrot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright 2021 Arran Schlosberg / Twitter @divergence_art\\n// All Rights Reserved\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"openzeppelin-solidity/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @dev Pure-Solidity rendering of Mandelbrot and similar fractals.\\n */\\ncontract Mandelbrot is Ownable {\\n    /**\\n     * @dev Defines the fixed-point precision for non-integer numbers.\\n     *\\n     * The number 1 is represented as 1<<PRECISION, 0.5 as 1<<(PRECISION-1).\\n     * These values can be thought of as the binary equivalent of working in\\n     * cents vs dollars (100c = $1) which is the same 2 _decimal_ precision.\\n     *\\n     * Addition functions as normal. Multiplication results in twice as many\\n     * fractional bits so requires devision by the \\\"dollar-equivalent\\\":\\n     * \\n     *   $1 × $2 = $2\\n     *   100c × 200c = 20,000 (extra precision) / 100 = $2\\n     *\\n     * The binary equivalent of this division is a right arithmetic shift (sar)\\n     * to maintain the sign. The specific value was chosen to avoid overflow\\n     * based on Mandelbrot escape conditions. Although it's possible to first\\n     * right-shift both the multiplier and multiplicand by PRECISION/2 and then\\n     * multiply in order to allow higher values, this changes gas from 8 to 11\\n     * as mul=5 and sar=3.\\n     */\\n    uint256 private constant PRECISION = 125;\\n\\n    /**\\n     * @dev Pre-computed value for PRECISION+2.\\n     */\\n    uint256 private constant PRECISION_PLUS_2 = 127;\\n\\n    /**\\n     * @dev The number 1 in @PRECISION fixed-point representation.\\n     *\\n     * This is useful for external callers, which should use ONE as bignum menas\\n     * of computing fractions.\\n     */\\n    int256 public constant ONE = 2**125;\\n\\n    /**\\n     * @dev The number 2 in @PRECISION fixed-point representation.\\n     */\\n    int256 private constant TWO = 2**126;\\n\\n    /**\\n     * @dev By now I think you can see the pattern.\\n     */\\n    int256 private constant FOUR = 2**127;\\n\\n    /**\\n     * @dev You're gonna have to trust me on this one!\\n     */\\n    int256 private constant POINT_FOUR = 0xccccccccccccccccccccccccccccccc;\\n\\n    /**\\n     * @dev Some bounds checks for inclusion in the cardioid, main bulb, etc.\\n     */\\n    int256 private constant QUARTER = 2**123;\\n    int256 private constant EIGHTH = 2**122;\\n    int256 private constant SIXTEENTH = 2**121;\\n    int256 private constant NEG_THREE_QUARTERS = 2**123 - 2**125;\\n    int256 private constant NEG_ONE_PT_TWO_FIVE = -(2**123 + 2**125);\\n\\n    /**\\n     * @dev The number -2 in @PRECISION fixed-point representation.\\n     *\\n     * This is the lower bound of the parts of real and imaginary axes on which\\n     * fractals are defined.\\n     */\\n    int256 public constant NEG_TWO = -TWO;\\n\\n    /**\\n     * @dev Supported Mandelbrot-derived fractals.\\n     *\\n     * The INVALID sentinel value MUST be last as it allows for rapid checking\\n     * of valid values with <.\\n     */\\n    enum Fractal {\\n        Mandelbrot,\\n        Mandelbar,\\n        Multi3,\\n        BurningShip,\\n\\n        INVALID\\n    }\\n\\n    /**\\n     * @dev Parameters for computing a patch in a fractal.\\n     */\\n    struct Patch {\\n        // Fixed-point values, not actually integers. See ONE.\\n        int256 minReal;\\n        int256 minImaginary;\\n        // Dimensions in pixels. Pixel width is controlled by zoomLog2.\\n        int256 width;\\n        int256 height;\\n        // For a full fractal, set equal width and height, and\\n        // zoomLog2 = log_2(width).\\n        int16 zoomLog2;\\n        uint8 maxIterations;\\n        Fractal fractal;\\n    }\\n\\n    /**\\n     * @dev Computes escape times (pixel values) for a fractal rendering.\\n     *\\n     * These are the components that make up the final image when concatenated,\\n     * but are computed piecemeal to save compute time of any single call.\\n     */\\n    function patchPixels(Patch memory patch) public pure returns (bytes memory) {\\n        require(patch.width > 0, \\\"Non-positive width\\\");\\n        require(patch.height > 0, \\\"Non-positive height\\\");\\n        require(patch.zoomLog2 > 0, \\\"Non-positive zoom\\\");\\n        require(patch.fractal < Fractal.INVALID, \\\"Unsupported fractal\\\");\\n\\n        // Mandelbrots are defined on [-2,2] (i.e. width 4 = 2^2), hence the use\\n        // of PRECISION+2. Every increment of zoomLog2 increases the\\n        // mangification of both axes 2× by halving the pixelWidth.\\n        int256 pixelWidth;\\n        {\\n            int16 zoomLog2 = patch.zoomLog2;\\n            assembly { pixelWidth := shl(sub(PRECISION_PLUS_2, zoomLog2), 1) }\\n        }\\n        int256 maxRe = patch.minReal + pixelWidth*patch.width;\\n        int256 maxIm = patch.minImaginary + pixelWidth*patch.height;\\n\\n        // While this duplicates a lot of code, it saves having the if statement\\n        // inside the loops, which would be much less efficient.\\n        if (patch.fractal == Fractal.Mandelbrot) {\\n            return _mandelbrot(patch, pixelWidth, maxRe, maxIm);\\n        } else if (patch.fractal == Fractal.Mandelbar) {\\n            return _mandelbar(patch, pixelWidth, maxRe, maxIm);\\n        } else if (patch.fractal == Fractal.Multi3) {\\n            return _multi3(patch, pixelWidth, maxRe, maxIm);\\n        } else if (patch.fractal == Fractal.BurningShip) {\\n            return _burningShip(patch, pixelWidth, maxRe, maxIm);\\n        }\\n        // The check for patch.fractal < Fractal.INVALID makes this impossible,\\n        // but we still need a return value.\\n        return new bytes(0);\\n    }\\n\\n    /**\\n     * @dev Computes the standard Mandelbrot.\\n     */\\n    function _mandelbrot(Patch memory patch, int256 pixelWidth, int256 maxRe, int256 maxIm) internal pure returns (bytes memory) {\\n        bytes memory pixels = new bytes(uint256(patch.width * patch.height));\\n        \\n        int256 zRe;\\n        int256 zIm;\\n        int256 reSq;\\n        int256 imSq;\\n\\n        uint8 maxIters  = patch.maxIterations;\\n        uint256 pixelIdx = 0;\\n        for (int256 cIm = patch.minImaginary; cIm < maxIm; cIm += pixelWidth) {\\n            for (int256 cRe = patch.minReal; cRe < maxRe; cRe += pixelWidth) {\\n                // Points in the Mandelbrot are expensive to compute by force\\n                // because they require maxIters iterations. Ruling out the two\\n                // largest areas adds a little more computation to other\\n                // regions, but is a net saving.\\n                //\\n                // From https://en.wikipedia.org/wiki/Plotting_algorithms_for_the_Mandelbrot_set#Border_tracing_/_edge_checking\\n                //\\n                // NOTE: to keep the stack small, all variable names are\\n                // overloaded with different meanings. It's ugly, but so be it.\\n\\n                // TODO: the checks are only performed based on real ranges;\\n                // test if there's a benefit to computing |cIm| and limiting\\n                // further. At this point the speed-up is good enough to render\\n                // a 256x256 fairly quickly, for some subjective definition of\\n                // \\\"fairly\\\".\\n\\n                // Inside the cardioid?\\n                if (cRe >= NEG_THREE_QUARTERS && cRe < POINT_FOUR) {\\n                    zRe = cRe - QUARTER;\\n                    zIm = cIm;\\n                    assembly {\\n                        reSq := shr(PRECISION, mul(zRe, zRe)) // (x - 1/4)^2\\n                        imSq := shr(PRECISION, mul(zIm, zIm)) // y^2\\n                        zIm := add(reSq, imSq) // q\\n                        zRe := add(zRe, zIm) // q + x - 1/4\\n                        zRe := sar(PRECISION, mul(zRe, zIm)) // q(q + x - 1/4)\\n                        imSq := shr(2, imSq) // y^2/4\\n                    }\\n                    if (zRe <= imSq) {\\n                        pixelIdx++;\\n                        continue;\\n                    }\\n                }\\n                \\n                // Inside the main bulb?\\n                if (cRe <= NEG_THREE_QUARTERS && cRe >= NEG_ONE_PT_TWO_FIVE) {\\n                    zRe = cRe + ONE;\\n                    zIm = cIm;\\n                    assembly {\\n                        reSq := shr(PRECISION, mul(zRe, zRe))\\n                        imSq := shr(PRECISION, mul(zIm, zIm))\\n                    }\\n                    if (reSq + imSq <= SIXTEENTH) {\\n                        pixelIdx++;\\n                        continue;\\n                    }\\n                }\\n\\n                // Brute-force computation from here on. Variables now mean what\\n                // they say on the tin.\\n\\n                // Technically z_0 = (0,0) but z_1 is always c, so skip that\\n                // iteration and eke out an extra iteration.\\n                zRe = cRe;\\n                zIm = cIm;\\n                uint8 pixelVal;\\n                assembly {\\n                    for { let i := 0 } lt(i, maxIters) { i := add(i, 1) } {\\n                        reSq := shr(PRECISION, mul(zRe, zRe))\\n                        imSq := shr(PRECISION, mul(zIm, zIm))\\n                        \\n                        if gt(add(reSq, imSq), FOUR) {\\n                            pixelVal := sub(maxIters, i)\\n                            i := maxIters\\n                        }\\n\\n                        // (x+iy)^2 = (x^2 - y^2) + 2ixy\\n                        //\\n                        // mul is 5 gas but add is 3, so 2xy is mul(add(x,x),y) instead\\n                        // of mul(mul(x,y),2)\\n                        zIm := add(cIm, sar(PRECISION, mul(add(zRe, zRe), zIm)))\\n                        zRe := add(cRe, sub(reSq, imSq))\\n\\n                    } // for maxIters\\n                } // assembly\\n\\n                pixels[pixelIdx] = bytes1(pixelVal);\\n                pixelIdx++;\\n\\n            } // for cIm\\n        } // for cRe\\n\\n        return pixels;\\n    }\\n\\n    /**\\n     * @dev Computes the \\\"Mandelbar\\\", taking the conjugate of z (hence bar).\\n     *\\n     * Also known as a \\\"Tricorn\\\". This differs from _mandelbrot() in that it has\\n     * no efficiency checks, initial zIm = -cIm (not cIm) and the zIm in the\\n     * assembly block is wrapped in sub(0, …). Each difference is noted with\\n     * comments.\\n     */\\n    function _mandelbar(Patch memory patch, int256 pixelWidth, int256 maxRe, int256 maxIm) internal pure returns (bytes memory) {\\n        bytes memory pixels = new bytes(uint256(patch.width * patch.height));\\n        \\n        int256 zRe;\\n        int256 zIm;\\n        int256 reSq;\\n        int256 imSq;\\n\\n        uint8 maxIters  = patch.maxIterations;\\n        uint256 pixelIdx = 0;\\n        for (int256 cIm = patch.minImaginary; cIm < maxIm; cIm += pixelWidth) {\\n            for (int256 cRe = patch.minReal; cRe < maxRe; cRe += pixelWidth) {\\n                // Note: there are no containment checks we can do to reduce\\n                // brute-force computation.\\n\\n                // Technically z_0 = (0,0) but z_1 is always c, so skip that\\n                // iteration and eke out an extra iteration.\\n                zRe = cRe;\\n                // Note: the -cIm for the conjugate.\\n                zIm = -cIm;\\n                uint8 pixelVal;\\n                assembly {\\n                    for { let i := 0 } lt(i, maxIters) { i := add(i, 1) } {\\n                        reSq := shr(PRECISION, mul(zRe, zRe))\\n                        imSq := shr(PRECISION, mul(zIm, zIm))\\n                        \\n                        if gt(add(reSq, imSq), FOUR) {\\n                            pixelVal := sub(maxIters, i)\\n                            i := maxIters\\n                        }\\n\\n                        // (x+iy)^2 = (x^2 - y^2) + 2ixy\\n                        //\\n                        // mul is 5 gas but add is 3, so 2xy is mul(add(x,x),y) instead\\n                        // of mul(mul(x,y),2)\\n                        //\\n                        // Note: the sub(0, …) is the \\\"bar\\\" part of the fractal.\\n                        zIm := sub(0, add(cIm, sar(PRECISION, mul(add(zRe, zRe), zIm))))\\n                        zRe := add(cRe, sub(reSq, imSq))\\n\\n                    } // for maxIters\\n                } // assembly\\n\\n                pixels[pixelIdx] = bytes1(pixelVal);\\n                pixelIdx++;\\n\\n            } // for cIm\\n        } // for cRe\\n\\n        return pixels;\\n    }\\n\\n    /**\\n     * @dev Computes the 3-headed Multibrot, z_n -> z_n^4 + z_0;\\n     *\\n     * This is effectively the same as the Mandelbrot but we square z_n twice.\\n     * Each difference is noted with comments.\\n     */\\n    function _multi3(Patch memory patch, int256 pixelWidth, int256 maxRe, int256 maxIm) internal pure returns (bytes memory) {\\n        bytes memory pixels = new bytes(uint256(patch.width * patch.height));\\n        \\n        int256 zRe;\\n        int256 zIm;\\n        int256 reSq;\\n        int256 imSq;\\n\\n        uint8 maxIters  = patch.maxIterations;\\n        uint256 pixelIdx = 0;\\n        for (int256 cIm = patch.minImaginary; cIm < maxIm; cIm += pixelWidth) {\\n            for (int256 cRe = patch.minReal; cRe < maxRe; cRe += pixelWidth) {\\n                // As with the containment tests for the Mandelbrot cardioid and\\n                // bulb, variable names are sometimes used differently to reduce\\n                // stack usage. \\n\\n                assembly {\\n                    reSq := shr(PRECISION, mul(cRe, cRe))\\n                    imSq := shr(PRECISION, mul(cIm, cIm))\\n                    reSq := add(reSq, imSq) // |z^2|\\n                }\\n                if (reSq > FOUR) {\\n                    // There's odd behaviour in the [-2,-2] corner without this\\n                    // initial check.\\n                    pixels[pixelIdx] = bytes1(maxIters);\\n                    pixelIdx++;\\n                    continue;\\n                } else if (reSq < EIGHTH) {\\n                    // Multibrots have cardioid-oids (great word eh?) that grow\\n                    // in minimum radius as the power increases. The\\n                    // Mandelbrot's cardioid inverts to 0.25.\\n                    // \\n                    // TODO: loosen this bound to rule out more computation.\\n                    pixelIdx++;\\n                    continue;\\n                }\\n\\n                // Brute-force computation from here on. Variables now mean what\\n                // they say on the tin.\\n\\n                // Technically z_0 = (0,0) but z_1 is always c, so skip that\\n                // iteration and eke out an extra iteration.\\n                zRe = cRe;\\n                zIm = cIm;\\n                uint8 pixelVal;\\n                assembly {\\n                    for { let i := 0 } lt(i, maxIters) { i := add(i, 1) } {\\n                        reSq := shr(PRECISION, mul(zRe, zRe))\\n                        imSq := shr(PRECISION, mul(zIm, zIm))\\n\\n                        // Note: instead of immediately checking for divergence,\\n                        // we complete z^2 and then check |z^2|^2 > 4 whereas\\n                        // the standard Mandelbrot checks |z|^2.\\n                        //\\n                        // (x+iy)^2 = (x^2 - y^2) + 2ixy\\n                        //\\n                        // mul is 5 gas but add is 3, so 2xy is mul(add(x,x),y) instead\\n                        // of mul(mul(x,y),2)\\n                        //\\n                        // Note: unlike Mandelbrot, we don't add z_0 (c) yet.\\n                        zIm := sar(PRECISION, mul(add(zRe, zRe), zIm))\\n                        zRe := sub(reSq, imSq)\\n                        \\n                        // // Note: reSq + imSq = |z^2|^2\\n                        reSq := shr(PRECISION, mul(zRe, zRe))\\n                        imSq := shr(PRECISION, mul(zIm, zIm))\\n\\n                        if gt(add(reSq, imSq), FOUR) {\\n                            pixelVal := sub(maxIters, i)\\n                            i := maxIters\\n                        }\\n\\n                        // Note: same as above except adding c.\\n                        zIm := add(cIm, sar(PRECISION, mul(add(zRe, zRe), zIm)))\\n                        zRe := add(cRe, sub(reSq, imSq))\\n\\n                    } // for maxIters\\n                } // assembly\\n\\n                pixels[pixelIdx] = bytes1(pixelVal);\\n                pixelIdx++;\\n\\n            } // for cIm\\n        } // for cRe\\n\\n        return pixels;\\n    }\\n\\n    /**\\n     * @dev Computes the Burning Ship by using |Re| and |Im|.\\n     */\\n    function _burningShip(Patch memory patch, int256 pixelWidth, int256 maxRe, int256 maxIm) internal pure returns (bytes memory) {\\n        bytes memory pixels = new bytes(uint256(patch.width * patch.height));\\n        \\n        int256 zRe;\\n        int256 zIm;\\n        int256 reSq;\\n        int256 imSq;\\n\\n        uint8 maxIters  = patch.maxIterations;\\n        uint256 pixelIdx = 0;\\n        // Note: the burning ship only looks like a ship when the imaginary axis\\n        // is flipped. Flipping the real is common too.\\n        for (int256 cIm = maxIm - pixelWidth; cIm >= patch.minImaginary; cIm -= pixelWidth) {\\n            for (int256 cRe = maxRe - pixelWidth; cRe >= patch.minReal; cRe -= pixelWidth) {\\n                // Technically z_0 = (0,0) but z_1 is always c, so skip that\\n                // iteration and eke out an extra iteration.\\n                zRe = cRe;\\n                zIm = cIm;\\n                uint8 pixelVal;\\n                assembly {\\n                    for { let i := 0 } lt(i, maxIters) { i := add(i, 1) } {\\n                        reSq := shr(PRECISION, mul(zRe, zRe))\\n                        imSq := shr(PRECISION, mul(zIm, zIm))\\n                        \\n                        if gt(add(reSq, imSq), FOUR) {\\n                            pixelVal := sub(maxIters, i)\\n                            i := maxIters\\n                        }\\n\\n                        // (x+iy)^2 = (x^2 - y^2) + 2ixy\\n                        //\\n                        // mul is 5 gas but add is 3, so 2xy is mul(add(x,x),y) instead\\n                        // of mul(mul(x,y),2)\\n                        zIm := add(cIm, sar(PRECISION, mul(add(zRe, zRe), zIm)))\\n                        zRe := add(cRe, sub(reSq, imSq))\\n\\n                        // Note: burning ship is identical to Mandelbrot except\\n                        // for the absolute values of real and imaginary.\\n                        if slt(zRe, 0) {\\n                            zRe := sub(0, zRe)\\n                        }\\n                        if slt(zIm, 0) {\\n                            zIm := sub(0, zIm)\\n                        }\\n                    } // for maxIters\\n                } // assembly\\n\\n                pixels[pixelIdx] = bytes1(pixelVal);\\n                pixelIdx++;\\n\\n            } // for cIm\\n        } // for cRe\\n\\n        return pixels;\\n    }\\n\\n    /**\\n     * @dev Precomputed pixels with their generating information.\\n     */\\n    struct CachedPatch {\\n        bytes pixels;\\n        Patch patch;\\n    }\\n\\n    /**\\n     * @dev A cache of precomputed pixels.\\n     *\\n     * Key is patchCacheKey(patch).\\n     */\\n    mapping(uint256 => CachedPatch) public patchCache;\\n\\n    /**\\n     * @dev Returns the key for the patchCache mapping of this patch.\\n     */\\n    function patchCacheKey(Patch memory patch) public pure returns (uint256) {\\n        return uint256(keccak256(abi.encode(patch)));\\n    }\\n\\n    /**\\n     * @dev Cache a precomputed patch of pixels.\\n     *\\n     * See verifyCachedPatch().\\n     */\\n    function cachePatch(bytes memory pixels, Patch memory patch) public onlyOwner {\\n        require(pixels.length == uint256(patch.width * patch.height), \\\"Invalid dimensions\\\");\\n        patchCache[patchCacheKey(patch)] = CachedPatch(pixels, patch);\\n    }\\n\\n    /**\\n     * @dev Returns a cached patch, confirming existence.\\n     *\\n     * As mappings always return a value, width and height both > 0 is used as\\n     * a proxy for the patch having been cached. Those with 0 area are\\n     * redundant anyway.\\n     */\\n    function cachedPatch(uint256 cacheIdx) public view returns (CachedPatch memory) {\\n        CachedPatch memory cached = patchCache[cacheIdx];\\n        require(cached.patch.width > 0 && cached.patch.height > 0, \\\"Patch not cached\\\");\\n        return cached;\\n    }\\n\\n    /**\\n     * @dev Recompute pixels for a patch and confirm that they match the cache.\\n     *\\n     * This contract works on a trust-but-verify model. If patchPixels() were to\\n     * be used in a transaction, the gas fee would make the entire project\\n     * infeasible. Instead, it's only used in (free, read-only) calls, and the\\n     * returned values are stored via cachePatch(), which is cheaper. It's\\n     * possible to recompute the patch at any time via another free call to\\n     * verifyCachedPatch().\\n     */\\n    function verifyCachedPatch(uint256 cacheIdx) public view returns (bool) {\\n        CachedPatch memory cached = cachedPatch(cacheIdx);\\n        bytes memory fresh = patchPixels(cached.patch);\\n        return keccak256(fresh) == keccak256(cached.pixels);\\n    }\\n\\n    /**\\n     * @dev Returns a concatenated pixel buffer of cached patches.\\n     */\\n    function concatenatePatches(uint256[] memory patches) public view returns (bytes memory) {\\n        CachedPatch[] memory cached = new CachedPatch[](patches.length);\\n\\n        uint256 len;\\n        for (uint i = 0; i < patches.length; i++) {\\n            cached[i] = cachedPatch(patches[i]);\\n            len += cached[i].pixels.length;\\n        }\\n\\n        bytes memory buf = new bytes(len);\\n        uint idx;\\n        for (uint i = 0; i < cached.length; i++) {\\n            for (uint j = 0; j < cached[i].pixels.length; j++) {\\n                buf[idx] = cached[i].pixels[j];\\n                idx++;\\n            }\\n        }\\n        return buf;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"brots\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"openSeaProxyRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OnlyEarlyAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"}],\"name\":\"PaletteApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"}],\"name\":\"SeriesPixelsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenBMPChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_PER_SERIES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ALLOCATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_bmp\",\"outputs\":[{\"internalType\":\"contract BMP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_brots\",\"outputs\":[{\"internalType\":\"contract Mandelbrot\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"}],\"name\":\"approveForPalette\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"scale\",\"type\":\"uint32\"}],\"name\":\"bmpDataURIOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"scale\",\"type\":\"uint32\"}],\"name\":\"bmpOf\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"characters\",\"type\":\"string\"}],\"name\":\"brooksMatelskiOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"earlyAccessFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isOwnersOpenSeaProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTokenMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"}],\"name\":\"lockSeries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"patches\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32\",\"name\":\"width\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"}],\"name\":\"newSeries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyEarlyAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"pixelsOf\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"resetPalette\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"}],\"name\":\"safeMintInSeries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"seriesConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"width\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"defaultPalette\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"}],\"name\":\"seriesPixels\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"setBaseExternalUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllowed\",\"type\":\"uint256\"}],\"internalType\":\"struct Brotchain.EarlyAccess[]\",\"name\":\"addresses\",\"type\":\"tuple[]\"}],\"name\":\"setEarlyAccessGrants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"to\",\"type\":\"bool\"}],\"name\":\"setOnlyEarlyAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"palette\",\"type\":\"bytes\"}],\"name\":\"setPalette\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"palette\",\"type\":\"bytes\"}],\"name\":\"setSeriesDefaultPalette\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"setSeriesDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"width\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"}],\"name\":\"setSeriesDimensions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setSeriesName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"patches\",\"type\":\"uint256[]\"}],\"name\":\"setSeriesPatches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paletteChanges\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paletteBy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paletteApproval\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"paletteReset\",\"type\":\"uint192\"},{\"internalType\":\"bytes\",\"name\":\"palette\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenEditionNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenSeries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"withdrawPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Brotchain","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000dbe0bcf4a4cb4d822850f3ed30c9d6dbdf7959b5000000000000000000000000a5409ec958c83c3f309868babaca7c86dcb077c1000000000000000000000000000000000000000000000000000000000000000942726f74636861696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000442524f5400000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}