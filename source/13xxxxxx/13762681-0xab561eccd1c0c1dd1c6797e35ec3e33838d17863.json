{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/buy-and-make/RevenueBuyBack.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport { IEmissionsController } from \\\"../interfaces/IEmissionsController.sol\\\";\\nimport { IMasset } from \\\"../interfaces/IMasset.sol\\\";\\nimport { IRevenueRecipient } from \\\"../interfaces/IRevenueRecipient.sol\\\";\\nimport { DialData } from \\\"../emissions/EmissionsController.sol\\\";\\nimport { ImmutableModule } from \\\"../shared/ImmutableModule.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IUniswapV3SwapRouter } from \\\"../peripheral/Uniswap/IUniswapV3SwapRouter.sol\\\";\\n\\nstruct RevenueBuyBackConfig {\\n    // Minimum price of bAssets compared to mAssets scaled to 1e18 (CONFIG_SCALE).\\n    uint128 minMasset2BassetPrice;\\n    // Minimum price of rewards token compared to bAssets scaled to 1e18 (CONFIG_SCALE).\\n    uint128 minBasset2RewardsPrice;\\n    // base asset of the mAsset that is being redeemed and then sold for reward tokens.\\n    address bAsset;\\n    // Uniswap V3 path\\n    bytes uniswapPath;\\n}\\n\\n/**\\n * @title   RevenueBuyBack\\n * @author  mStable\\n * @notice  Uses protocol revenue to buy MTA rewards for stakers.\\n * @dev     VERSION: 1.0\\n *          DATE:    2021-11-09\\n */\\ncontract RevenueBuyBack is IRevenueRecipient, Initializable, ImmutableModule {\\n    using SafeERC20 for IERC20;\\n\\n    event RevenueReceived(address indexed mAsset, uint256 amountIn);\\n    event BuyBackRewards(\\n        address indexed mAsset,\\n        uint256 mAssetAmount,\\n        uint256 bAssetAmount,\\n        uint256 rewardsAmount\\n    );\\n    event DonatedRewards(uint256 totalRewards);\\n    event AddedMassetConfig(\\n        address indexed mAsset,\\n        address indexed bAsset,\\n        uint128 minMasset2BassetPrice,\\n        uint128 minBasset2RewardsPrice,\\n        bytes uniswapPath\\n    );\\n    event AddedStakingContract(uint16 stakingDialId);\\n\\n    /// @notice scale of the `minMasset2BassetPrice` and `minBasset2RewardsPrice` configuration properties.\\n    uint256 public constant CONFIG_SCALE = 1e18;\\n\\n    /// @notice address of the rewards token that is being purchased. eg MTA\\n    IERC20 public immutable REWARDS_TOKEN;\\n    /// @notice address of the Emissions Controller that does the weekly MTA reward emissions based off on-chain voting power.\\n    IEmissionsController public immutable EMISSIONS_CONTROLLER;\\n    /// @notice Uniswap V3 Router address\\n    IUniswapV3SwapRouter public immutable UNISWAP_ROUTER;\\n\\n    /// @notice Mapping of mAssets to RevenueBuyBack config\\n    mapping(address => RevenueBuyBackConfig) public massetConfig;\\n    /// @notice Emissions Controller dial ids for all staking contracts that will receive reward tokens.\\n    uint256[] public stakingDialIds;\\n\\n    /**\\n     * @param _nexus mStable system Nexus address\\n     * @param _rewardsToken Rewards token address that are purchased. eg MTA\\n     * @param _uniswapRouter Uniswap V3 Router address\\n     * @param _emissionsController Emissions Controller address that rewards tokens are donated to.\\n     */\\n    constructor(\\n        address _nexus,\\n        address _rewardsToken,\\n        address _uniswapRouter,\\n        address _emissionsController\\n    ) ImmutableModule(_nexus) {\\n        require(_rewardsToken != address(0), \\\"Rewards token is zero\\\");\\n        REWARDS_TOKEN = IERC20(_rewardsToken);\\n\\n        require(_uniswapRouter != address(0), \\\"Uniswap Router is zero\\\");\\n        UNISWAP_ROUTER = IUniswapV3SwapRouter(_uniswapRouter);\\n\\n        require(_emissionsController != address(0), \\\"Emissions controller is zero\\\");\\n        EMISSIONS_CONTROLLER = IEmissionsController(_emissionsController);\\n    }\\n\\n    /**\\n     * @param _stakingDialIds Emissions Controller dial ids for all staking contracts that will receive reward tokens.\\n     */\\n    function initialize(uint16[] memory _stakingDialIds) external initializer {\\n        for (uint256 i = 0; i < _stakingDialIds.length; i++) {\\n            _addStakingContract(_stakingDialIds[i]);\\n        }\\n    }\\n\\n    /***************************************\\n                    EXTERNAL\\n    ****************************************/\\n\\n    /**\\n     * @dev Simply transfers the mAsset from the sender to here\\n     * @param _mAsset Address of mAsset\\n     * @param _amount Units of mAsset collected\\n     */\\n    function notifyRedistributionAmount(address _mAsset, uint256 _amount) external override {\\n        require(massetConfig[_mAsset].bAsset != address(0), \\\"Invalid mAsset\\\");\\n\\n        // Transfer from sender to here\\n        IERC20(_mAsset).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        emit RevenueReceived(_mAsset, _amount);\\n    }\\n\\n    /**\\n     * @notice Buys reward tokens, eg MTA, using mAssets like mUSD or mBTC from protocol revenue.\\n     * @param _mAssets Addresses of mAssets that are to be sold for rewards. eg mUSD and mBTC.\\n     */\\n    function buyBackRewards(address[] calldata _mAssets) external onlyKeeperOrGovernor {\\n        uint256 len = _mAssets.length;\\n        require(len > 0, \\\"Invalid args\\\");\\n\\n        // for each mAsset\\n        for (uint256 i = 0; i < len; i++) {\\n            // Get config for mAsset\\n            RevenueBuyBackConfig memory config = massetConfig[_mAssets[i]];\\n            require(config.bAsset != address(0), \\\"Invalid mAsset\\\");\\n\\n            // STEP 1 - Redeem mAssets for bAssets\\n            IMasset mAsset = IMasset(_mAssets[i]);\\n            uint256 mAssetBal = IERC20(_mAssets[i]).balanceOf(address(this));\\n            uint256 minBassetOutput = (mAssetBal * config.minMasset2BassetPrice) / CONFIG_SCALE;\\n            uint256 bAssetAmount = mAsset.redeem(\\n                config.bAsset,\\n                mAssetBal,\\n                minBassetOutput,\\n                address(this)\\n            );\\n\\n            // STEP 2 - Swap bAssets for rewards using Uniswap V3\\n            IERC20(config.bAsset).safeApprove(address(UNISWAP_ROUTER), bAssetAmount);\\n            uint256 minRewardsAmount = (bAssetAmount * config.minBasset2RewardsPrice) /\\n                CONFIG_SCALE;\\n            IUniswapV3SwapRouter.ExactInputParams memory param = IUniswapV3SwapRouter\\n            .ExactInputParams(\\n                config.uniswapPath,\\n                address(this),\\n                block.timestamp,\\n                bAssetAmount,\\n                minRewardsAmount\\n            );\\n            uint256 rewardsAmount = UNISWAP_ROUTER.exactInput(param);\\n\\n            emit BuyBackRewards(_mAssets[i], mAssetBal, bAssetAmount, rewardsAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice donates purchased rewards, eg MTA, to staking contracts via the Emissions Controller.\\n     */\\n    function donateRewards() external onlyKeeperOrGovernor {\\n        // STEP 1 - Get the voting power of the staking contracts\\n        uint256 numberStakingContracts = stakingDialIds.length;\\n        uint256[] memory votingPower = new uint256[](numberStakingContracts);\\n        uint256 totalVotingPower;\\n        // Get the voting power of each staking contract\\n        for (uint256 i = 0; i < numberStakingContracts; i++) {\\n            address stakingContractAddress = EMISSIONS_CONTROLLER.getDialRecipient(\\n                stakingDialIds[i]\\n            );\\n            require(stakingContractAddress != address(0), \\\"invalid dial id\\\");\\n\\n            votingPower[i] = IERC20(stakingContractAddress).totalSupply();\\n            totalVotingPower += votingPower[i];\\n        }\\n        require(totalVotingPower > 0, \\\"No voting power\\\");\\n\\n        // STEP 2 - Get rewards that need to be distributed\\n        uint256 rewardsBal = REWARDS_TOKEN.balanceOf(address(this));\\n        require(rewardsBal > 0, \\\"No rewards to donate\\\");\\n\\n        // STEP 3 - Calculate rewards for each staking contract\\n        uint256[] memory rewardDonationAmounts = new uint256[](numberStakingContracts);\\n        for (uint256 i = 0; i < numberStakingContracts; i++) {\\n            rewardDonationAmounts[i] = (rewardsBal * votingPower[i]) / totalVotingPower;\\n        }\\n\\n        // STEP 4 - RevenueBuyBack approves the Emissions Controller to transfer rewards. eg MTA\\n        REWARDS_TOKEN.safeApprove(address(EMISSIONS_CONTROLLER), rewardsBal);\\n\\n        // STEP 5 - donate rewards to staking contract dials in the Emissions Controller\\n        EMISSIONS_CONTROLLER.donate(stakingDialIds, rewardDonationAmounts);\\n\\n        // To get a details split of rewards to staking contracts,\\n        // see the `DonatedRewards` event on the `EmissionsController`\\n        emit DonatedRewards(rewardsBal);\\n    }\\n\\n    /***************************************\\n                    ADMIN\\n    ****************************************/\\n\\n    /**\\n     * @notice Adds or updates rewards buyback config for a mAsset.\\n     * @param _mAsset Address of the meta asset that is received as protocol revenue.\\n     * @param _bAsset Address of the base asset that is redeemed from the mAsset.\\n     * @param _minMasset2BassetPrice Minimum price of bAssets compared to mAssets scaled to 1e18 (CONFIG_SCALE).\\n     * eg USDC/mUSD and wBTC/mBTC exchange rates.\\n     * USDC has 6 decimal places so `minMasset2BassetPrice` with no slippage is 1e6.\\n     * If a 2% slippage is allowed, the `minMasset2BassetPrice` is 98e4.\\n     * WBTC has 8 decimal places so `minMasset2BassetPrice` with no slippage is 1e8.\\n     * If a 5% slippage is allowed, the `minMasset2BassetPrice` is 95e6.\\n     * @param _minBasset2RewardsPrice Minimum price of rewards token compared to bAssets scaled to 1e18 (CONFIG_SCALE).\\n     * eg USDC/MTA and wBTC/MTA exchange rates scaled to 1e18.\\n     * USDC only has 6 decimal places\\n     * 2 MTA/USDC = 0.5 USDC/MTA * (1e18 / 1e6) * 1e18 = 0.5e30 = 5e29\\n     * wBTC only has 8 decimal places\\n     * 0.000033 MTA/wBTC = 30,000 WBTC/MTA * (1e18 / 1e8) * 1e18 = 3e4 * 1e28 = 3e32\\n     * @param _uniswapPath The Uniswap V3 bytes encoded path.\\n     */\\n    function setMassetConfig(\\n        address _mAsset,\\n        address _bAsset,\\n        uint128 _minMasset2BassetPrice,\\n        uint128 _minBasset2RewardsPrice,\\n        bytes calldata _uniswapPath\\n    ) external onlyGovernor {\\n        require(_mAsset != address(0), \\\"mAsset token is zero\\\");\\n        require(_bAsset != address(0), \\\"bAsset token is zero\\\");\\n        // bAsset slippage must be plus or minus 10%\\n        require(_minMasset2BassetPrice > 0, \\\"Invalid min bAsset price\\\");\\n        require(_minBasset2RewardsPrice > 0, \\\"Invalid min reward price\\\");\\n        require(\\n            _validUniswapPath(_bAsset, address(REWARDS_TOKEN), _uniswapPath),\\n            \\\"Invalid uniswap path\\\"\\n        );\\n\\n        massetConfig[_mAsset] = RevenueBuyBackConfig({\\n            bAsset: _bAsset,\\n            minMasset2BassetPrice: _minMasset2BassetPrice,\\n            minBasset2RewardsPrice: _minBasset2RewardsPrice,\\n            uniswapPath: _uniswapPath\\n        });\\n\\n        emit AddedMassetConfig(\\n            _mAsset,\\n            _bAsset,\\n            _minMasset2BassetPrice,\\n            _minBasset2RewardsPrice,\\n            _uniswapPath\\n        );\\n    }\\n\\n    /**\\n     * @notice Adds a new staking contract that will receive MTA rewards\\n     * @param _stakingDialId dial identifier from the Emissions Controller of the staking contract.\\n     */\\n    function addStakingContract(uint16 _stakingDialId) external onlyGovernor {\\n        _addStakingContract(_stakingDialId);\\n    }\\n\\n    function _addStakingContract(uint16 _stakingDialId) internal {\\n        for (uint256 i = 0; i < stakingDialIds.length; i++) {\\n            require(stakingDialIds[i] != _stakingDialId, \\\"Staking dial id already exists\\\");\\n        }\\n        // Make sure the dial id of the staking contract is valid\\n        require(\\n            EMISSIONS_CONTROLLER.getDialRecipient(_stakingDialId) != address(0),\\n            \\\"Missing staking dial\\\"\\n        );\\n\\n        stakingDialIds.push(_stakingDialId);\\n\\n        emit AddedStakingContract(_stakingDialId);\\n    }\\n\\n    /**\\n     * @notice Validates a given uniswap path - valid if sellToken at position 0 and bAsset at end\\n     * @param _sellToken Token harvested from the integration contract\\n     * @param _bAsset New asset to buy on Uniswap\\n     * @param _uniswapPath The Uniswap V3 bytes encoded path.\\n     */\\n    function _validUniswapPath(\\n        address _sellToken,\\n        address _bAsset,\\n        bytes calldata _uniswapPath\\n    ) internal pure returns (bool) {\\n        uint256 len = _uniswapPath.length;\\n        require(_uniswapPath.length >= 43, \\\"Uniswap path too short\\\");\\n        // check sellToken is first 20 bytes and bAsset is the last 20 bytes of the uniswap path\\n        return\\n            keccak256(abi.encodePacked(_sellToken)) ==\\n            keccak256(abi.encodePacked(_uniswapPath[0:20])) &&\\n            keccak256(abi.encodePacked(_bAsset)) ==\\n            keccak256(abi.encodePacked(_uniswapPath[len - 20:len]));\\n    }\\n\\n    /**\\n     * @dev Abstract override\\n     */\\n    function depositToPool(\\n        address[] calldata, /* _mAssets */\\n        uint256[] calldata /* _percentages */\\n    ) external override {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEmissionsController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport { IVotes } from \\\"../interfaces/IVotes.sol\\\";\\nimport { DialData } from \\\"../emissions/EmissionsController.sol\\\";\\n\\n/**\\n * @title IEmissionsController\\n * @dev Emissions Controller interface used for by RevenueBuyBack\\n */\\ninterface IEmissionsController {\\n    function getDialRecipient(uint256 dialId) external returns (address recipient);\\n\\n    function donate(uint256[] memory _dialIds, uint256[] memory _amounts) external;\\n\\n    function stakingContracts(uint256 dialId) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMasset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\npragma abicoder v2;\\n\\nimport { BassetData, BassetPersonal } from \\\"../masset/MassetStructs.sol\\\";\\n\\nabstract contract IMasset {\\n    // Mint\\n    function mint(\\n        address _input,\\n        uint256 _inputQuantity,\\n        uint256 _minOutputQuantity,\\n        address _recipient\\n    ) external virtual returns (uint256 mintOutput);\\n\\n    function mintMulti(\\n        address[] calldata _inputs,\\n        uint256[] calldata _inputQuantities,\\n        uint256 _minOutputQuantity,\\n        address _recipient\\n    ) external virtual returns (uint256 mintOutput);\\n\\n    function getMintOutput(address _input, uint256 _inputQuantity)\\n        external\\n        view\\n        virtual\\n        returns (uint256 mintOutput);\\n\\n    function getMintMultiOutput(address[] calldata _inputs, uint256[] calldata _inputQuantities)\\n        external\\n        view\\n        virtual\\n        returns (uint256 mintOutput);\\n\\n    // Swaps\\n    function swap(\\n        address _input,\\n        address _output,\\n        uint256 _inputQuantity,\\n        uint256 _minOutputQuantity,\\n        address _recipient\\n    ) external virtual returns (uint256 swapOutput);\\n\\n    function getSwapOutput(\\n        address _input,\\n        address _output,\\n        uint256 _inputQuantity\\n    ) external view virtual returns (uint256 swapOutput);\\n\\n    // Redemption\\n    function redeem(\\n        address _output,\\n        uint256 _mAssetQuantity,\\n        uint256 _minOutputQuantity,\\n        address _recipient\\n    ) external virtual returns (uint256 outputQuantity);\\n\\n    function redeemMasset(\\n        uint256 _mAssetQuantity,\\n        uint256[] calldata _minOutputQuantities,\\n        address _recipient\\n    ) external virtual returns (uint256[] memory outputQuantities);\\n\\n    function redeemExactBassets(\\n        address[] calldata _outputs,\\n        uint256[] calldata _outputQuantities,\\n        uint256 _maxMassetQuantity,\\n        address _recipient\\n    ) external virtual returns (uint256 mAssetRedeemed);\\n\\n    function getRedeemOutput(address _output, uint256 _mAssetQuantity)\\n        external\\n        view\\n        virtual\\n        returns (uint256 bAssetOutput);\\n\\n    function getRedeemExactBassetsOutput(\\n        address[] calldata _outputs,\\n        uint256[] calldata _outputQuantities\\n    ) external view virtual returns (uint256 mAssetAmount);\\n\\n    // Views\\n    function getBasket() external view virtual returns (bool, bool);\\n\\n    function getBasset(address _token)\\n        external\\n        view\\n        virtual\\n        returns (BassetPersonal memory personal, BassetData memory data);\\n\\n    function getBassets()\\n        external\\n        view\\n        virtual\\n        returns (BassetPersonal[] memory personal, BassetData[] memory data);\\n\\n    function bAssetIndexes(address) external view virtual returns (uint8);\\n\\n    function getPrice() external view virtual returns (uint256 price, uint256 k);\\n\\n    // SavingsManager\\n    function collectInterest() external virtual returns (uint256 swapFeesGained, uint256 newSupply);\\n\\n    function collectPlatformInterest()\\n        external\\n        virtual\\n        returns (uint256 mintAmount, uint256 newSupply);\\n\\n    // Admin\\n    function setCacheSize(uint256 _cacheSize) external virtual;\\n\\n    function setFees(uint256 _swapFee, uint256 _redemptionFee) external virtual;\\n\\n    function setTransferFeesFlag(address _bAsset, bool _flag) external virtual;\\n\\n    function migrateBassets(address[] calldata _bAssets, address _newIntegration) external virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRevenueRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\ninterface IRevenueRecipient {\\n    /** @dev Recipient */\\n    function notifyRedistributionAmount(address _mAsset, uint256 _amount) external;\\n\\n    function depositToPool(address[] calldata _mAssets, uint256[] calldata _percentages) external;\\n}\\n\"\r\n    },\r\n    \"contracts/emissions/EmissionsController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { IGovernanceHook } from \\\"../governance/staking/interfaces/IGovernanceHook.sol\\\";\\nimport { IRewardsDistributionRecipient } from \\\"../interfaces/IRewardsDistributionRecipient.sol\\\";\\nimport { IVotes } from \\\"../interfaces/IVotes.sol\\\";\\nimport { ImmutableModule } from \\\"../shared/ImmutableModule.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nstruct HistoricVotes {\\n    // Number of votes directed to this dial\\n    uint128 votes;\\n    // The start of the distribution period in seconds divided by 604,800 seconds in a week\\n    uint32 epoch;\\n}\\n\\nstruct DialData {\\n    // If true, no rewards are distributed to the dial recipient and any votes on this dial are ignored\\n    bool disabled;\\n    // If true, `notifyRewardAmount` on the recipient contract is called\\n    bool notify;\\n    // Cap on distribution % where 1% = 1\\n    uint8 cap;\\n    // Dial rewards that are waiting to be distributed to recipient\\n    uint96 balance;\\n    // Account rewards are distributed to\\n    address recipient;\\n    // List of weighted votes in each distribution period\\n    HistoricVotes[] voteHistory;\\n}\\n\\nstruct Preference {\\n    // ID of the dial (array position)\\n    uint256 dialId;\\n    // % weight applied to this dial, where 200 = 100% and 1 = 0.5%\\n    uint256 weight;\\n}\\n\\nstruct VoterPreferences {\\n    // A array of 16 Preferences, which contain a dialId and weight of 8 bits each.\\n    // That's 16 bits per item, which is 16 * 16 = 256 bits = 1 slot.\\n    // The first item, index 0, is right ended.\\n    // Each item is a dialId and weight.\\n    // The array is stored as a uint256\\n    uint256 dialWeights;\\n    // Total voting power cast by this voter across the staking contracts.\\n    uint128 votesCast;\\n    // Last time balance was looked up across all staking contracts\\n    uint32 lastSourcePoke;\\n}\\n\\nstruct TopLevelConfig {\\n    int256 A;\\n    int256 B;\\n    int256 C;\\n    int256 D;\\n    uint128 EPOCHS;\\n}\\n\\nstruct EpochHistory {\\n    // First weekly epoch of this contract.\\n    uint32 startEpoch;\\n    // The last weekly epoch to have rewards distributed.\\n    uint32 lastEpoch;\\n}\\n\\n/**\\n * @title  EmissionsController\\n * @author mStable\\n * @notice Allows governors to vote on the weekly distribution of $MTA. Rewards are distributed between\\n *         `n` \\\"Dials\\\" proportionately to the % of votes the dial receives. Vote weight derives from multiple\\n *         whitelisted \\\"Staking contracts\\\". Voters can distribute their vote across (0 <= n <= 16 dials), at 0.5%\\n *         increments in voting weight. Once their preferences are cast, each time their voting weight changes\\n *         it is reflected here through a hook.\\n * @dev    VERSION: 1.0\\n *         DATE:    2021-10-28\\n */\\ncontract EmissionsController is IGovernanceHook, Initializable, ImmutableModule {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Minimum time between distributions.\\n    uint32 constant DISTRIBUTION_PERIOD = 1 weeks;\\n    /// @notice Scale of dial weights. 200 = 100%, 2 = 1%, 1 = 0.5%\\n    uint256 constant SCALE = 200;\\n    /// @notice Polynomial top level emission function parameters\\n    int256 immutable A;\\n    int256 immutable B;\\n    int256 immutable C;\\n    int256 immutable D;\\n    uint128 immutable EPOCHS;\\n\\n    /// @notice Address of rewards token. ie MTA token\\n    IERC20 public immutable REWARD_TOKEN;\\n\\n    /// @notice Epoch history in storage\\n    ///         An epoch is the number of weeks since 1 Jan 1970. The week starts on Thursday 00:00 UTC.\\n    ///         epoch = start of the distribution period in seconds divided by 604,800 seconds in a week\\n    EpochHistory public epochs;\\n\\n    /// @notice Flags the timestamp that a given staking contract was added\\n    mapping(address => uint32) public stakingContractAddTime;\\n    /// @notice List of staking contract addresses.\\n    IVotes[] public stakingContracts;\\n\\n    /// @notice List of dial data including votes, rewards balance, recipient contract and disabled flag.\\n    DialData[] public dials;\\n\\n    /// @notice Mapping of staker addresses to an list of voter dial weights.\\n    /// @dev    The sum of the weights for each staker must not be greater than SCALE = 200.\\n    ///         A user can issue a subset of their voting power. eg only 20% of their voting power.\\n    ///         A user can not issue more than 100% of their voting power across dials.\\n    mapping(address => VoterPreferences) public voterPreferences;\\n\\n    event AddedDial(uint256 indexed dialId, address indexed recipient);\\n    event UpdatedDial(uint256 indexed dialId, bool disabled);\\n    event AddStakingContract(address indexed stakingContract);\\n\\n    event PeriodRewards(uint256[] amounts);\\n    event DonatedRewards(uint256 indexed dialId, uint256 amount);\\n    event DistributedReward(uint256 indexed dialId, uint256 amount);\\n\\n    event PreferencesChanged(address indexed voter, Preference[] preferences);\\n    event VotesCast(\\n        address stakingContract,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount\\n    );\\n    event SourcesPoked(address indexed voter, uint256 newVotesCast);\\n\\n    /***************************************\\n                    INIT\\n    ****************************************/\\n\\n    /**\\n     * @notice Recipient is a module, governed by mStable governance.\\n     * @param _nexus        System Nexus that resolves module addresses.\\n     * @param _rewardToken  Token that rewards are distributed in. eg MTA.\\n     * @param _config       Arguments for polynomial top level emission function (raw, not scaled).\\n     */\\n    constructor(\\n        address _nexus,\\n        address _rewardToken,\\n        TopLevelConfig memory _config\\n    ) ImmutableModule(_nexus) {\\n        require(_rewardToken != address(0), \\\"Reward token address is zero\\\");\\n        REWARD_TOKEN = IERC20(_rewardToken);\\n        A = _config.A * 1e3;\\n        B = _config.B * 1e3;\\n        C = _config.C * 1e3;\\n        D = _config.D * 1e3;\\n        EPOCHS = _config.EPOCHS;\\n    }\\n\\n    /**\\n     * @dev Initialisation function to configure the first dials. All recipient contracts with _notifies = true need to\\n     *      implement the `IRewardsDistributionRecipient` interface.\\n     * @param _recipients        List of dial contract addresses that can receive rewards.\\n     * @param _caps              Limit on the percentage of the weekly top line emission the corresponding dial can receive (where 10% = 10 and uncapped = 0).\\n     * @param _notifies          If true, `notifyRewardAmount` is called in the `distributeRewards` function.\\n     * @param _stakingContracts  Initial staking contracts used for voting power lookup.\\n     */\\n    function initialize(\\n        address[] memory _recipients,\\n        uint8[] memory _caps,\\n        bool[] memory _notifies,\\n        address[] memory _stakingContracts\\n    ) external initializer {\\n        uint256 len = _recipients.length;\\n        require(_notifies.length == len && _caps.length == len, \\\"Initialize args mismatch\\\");\\n\\n        // 1.0 - Set the last epoch storage variable to the immutable start epoch\\n        //       Set the weekly epoch this contract starts distributions which will be 1 - 2 week after deployment.\\n        uint32 startEpoch = _epoch(block.timestamp) + 1;\\n        epochs = EpochHistory({ startEpoch: startEpoch, lastEpoch: startEpoch });\\n\\n        // 2.0 - Add each of the dials\\n        for (uint256 i = 0; i < len; i++) {\\n            _addDial(_recipients[i], _caps[i], _notifies[i]);\\n        }\\n\\n        // 3.0 - Initialize the staking contracts\\n        for (uint256 i = 0; i < _stakingContracts.length; i++) {\\n            _addStakingContract(_stakingContracts[i]);\\n        }\\n    }\\n\\n    /***************************************\\n                    VIEW\\n    ****************************************/\\n\\n    /**\\n     * @notice Gets the users aggregate voting power across all voting contracts.\\n     * @dev    Voting power can be from staking or it could be delegated to the account.\\n     * @param account       For which to fetch voting power.\\n     * @return votingPower  Units of voting power owned by account.\\n     */\\n    function getVotes(address account) public view returns (uint256 votingPower) {\\n        // For each configured staking contract\\n        for (uint256 i = 0; i < stakingContracts.length; i++) {\\n            votingPower += stakingContracts[i].getVotes(account);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates top line distribution amount for the current epoch as per the polynomial.\\n     *          (f(x)=A*(x/div)^3+B*(x/div)^2+C*(x/div)+D)\\n     * @dev    Values are effectively scaled to 1e12 to avoid integer overflow on pow.\\n     * @param epoch              The number of weeks since 1 Jan 1970.\\n     * @return emissionForEpoch  Units of MTA to be distributed at this epoch.\\n     */\\n    function topLineEmission(uint32 epoch) public view returns (uint256 emissionForEpoch) {\\n        require(\\n            epochs.startEpoch < epoch && epoch <= epochs.startEpoch + 312,\\n            \\\"Wrong epoch number\\\"\\n        );\\n        // e.g. week 1, A = -166000e12, B = 168479942061125e3, C = -168479942061125e3, D = 166000e12\\n        // e.g. epochDelta = 1\\n        uint128 epochDelta = (epoch - epochs.startEpoch);\\n        // e.g. x = 1e12 / 312 = 3205128205\\n        int256 x = SafeCast.toInt256((epochDelta * 1e12) / EPOCHS);\\n        emissionForEpoch =\\n            SafeCast.toUint256(\\n                ((A * (x**3)) / 1e36) + // e.g. -166000e12         * (3205128205 ^ 3) / 1e36 = -5465681315\\n                    ((B * (x**2)) / 1e24) + // e.g.  168479942061125e3 * (3205128205 ^ 2) / 1e24 =  1730768635433\\n                    ((C * (x)) / 1e12) + // e.g. -168479942061125e3 *  3205128205      / 1e12 = -539999814276877\\n                    D // e.g.  166000e12\\n            ) *\\n            1e6; // e.g. SUM = 165461725488677241 * 1e6 = 165461e18\\n    }\\n\\n    /**\\n     * @notice Gets a dial's recipient address.\\n     * @param dialId      Dial identifier starting from 0.\\n     * @return recipient  Address of the recipient account associated with.\\n     */\\n    function getDialRecipient(uint256 dialId) public view returns (address recipient) {\\n        recipient = dials[dialId].recipient;\\n    }\\n\\n    /**\\n     * @notice Gets a dial's weighted votes for each distribution period.\\n     * @param dialId        Dial identifier starting from 0.\\n     * @return voteHistory  List of weighted votes with the first distribution at index 0.\\n     */\\n    function getDialVoteHistory(uint256 dialId)\\n        public\\n        view\\n        returns (HistoricVotes[] memory voteHistory)\\n    {\\n        voteHistory = dials[dialId].voteHistory;\\n    }\\n\\n    /**\\n     * @notice Gets the latest weighted votes for each dial.\\n     *         This will include disabled dials and their current weighted votes.\\n     * @return dialVotes A list of dial weighted votes. The index of the array is the dialId.\\n     */\\n    function getDialVotes() public view returns (uint256[] memory dialVotes) {\\n        uint256 dialLen = dials.length;\\n        dialVotes = new uint256[](dialLen);\\n\\n        for (uint256 i = 0; i < dialLen; i++) {\\n            DialData memory dialData = dials[i];\\n\\n            uint256 voteHistoryLen = dialData.voteHistory.length;\\n\\n            // If no distributions for this dial yet\\n            if (voteHistoryLen == 0) {\\n                continue;\\n            }\\n\\n            dialVotes[i] = dialData.voteHistory[voteHistoryLen - 1].votes;\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets a voter's weights for each dial.\\n     * @dev    A dial identifier of 255 marks the end  of the array. It should be ignored.\\n     * @param voter         Address of the voter that has set weights.\\n     * @return preferences  List of dial identifiers and weights where a weight of 100% = 200.\\n     */\\n    function getVoterPreferences(address voter)\\n        public\\n        view\\n        returns (Preference[16] memory preferences)\\n    {\\n        for (uint256 i = 0; i < 16; i++) {\\n            preferences[i].weight = uint8(voterPreferences[voter].dialWeights >> (i * 16));\\n            preferences[i].dialId = uint8(voterPreferences[voter].dialWeights >> ((i * 16) + 8));\\n        }\\n    }\\n\\n    /***************************************\\n                    ADMIN\\n    ****************************************/\\n\\n    /**\\n     * @notice Adds a new dial that can be voted on to receive weekly rewards. Callable by system governor.\\n     * @param _recipient  Address of the contract that will receive rewards.\\n     * @param _cap        Cap where 0 = uncapped and 10 = 10%.\\n     * @param _notify     If true, `notifyRewardAmount` is called in the `distributeRewards` function.\\n     */\\n    function addDial(\\n        address _recipient,\\n        uint8 _cap,\\n        bool _notify\\n    ) external onlyGovernor {\\n        _addDial(_recipient, _cap, _notify);\\n    }\\n\\n    /**\\n     * @dev Internal dial addition fn, see parent fn for details.\\n     */\\n    function _addDial(\\n        address _recipient,\\n        uint8 _cap,\\n        bool _notify\\n    ) internal {\\n        require(_recipient != address(0), \\\"Dial address is zero\\\");\\n        require(_cap < 100, \\\"Invalid cap\\\");\\n\\n        uint256 len = dials.length;\\n        require(len < 254, \\\"Max dial count reached\\\");\\n        for (uint256 i = 0; i < len; i++) {\\n            require(dials[i].recipient != _recipient, \\\"Dial already exists\\\");\\n        }\\n\\n        dials.push();\\n        DialData storage newDialData = dials[len];\\n        newDialData.recipient = _recipient;\\n        newDialData.notify = _notify;\\n        newDialData.cap = _cap;\\n        uint32 currentEpoch = _epoch(block.timestamp);\\n        if (currentEpoch < epochs.startEpoch) {\\n            currentEpoch = epochs.startEpoch;\\n        }\\n        newDialData.voteHistory.push(HistoricVotes({ votes: 0, epoch: currentEpoch }));\\n\\n        emit AddedDial(len, _recipient);\\n    }\\n\\n    /**\\n     * @notice Updates a dials recipient contract and/or disabled flag.\\n     * @param _dialId    Dial identifier which is the index of the dials array.\\n     * @param _disabled  If true, no rewards will be distributed to this dial.\\n     */\\n    function updateDial(uint256 _dialId, bool _disabled) external onlyGovernor {\\n        require(_dialId < dials.length, \\\"Invalid dial id\\\");\\n\\n        dials[_dialId].disabled = _disabled;\\n\\n        emit UpdatedDial(_dialId, _disabled);\\n    }\\n\\n    /**\\n     * @notice Adds a new contract to the list of approved staking contracts.\\n     * @param _stakingContract Address of the new staking contract\\n     */\\n    function addStakingContract(address _stakingContract) external onlyGovernor {\\n        _addStakingContract(_stakingContract);\\n    }\\n\\n    /**\\n     * @dev Adds a staking contract by setting it's addition time to current timestamp.\\n     */\\n    function _addStakingContract(address _stakingContract) internal {\\n        require(_stakingContract != address(0), \\\"Staking contract address is zero\\\");\\n\\n        uint256 len = stakingContracts.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            require(\\n                address(stakingContracts[i]) != _stakingContract,\\n                \\\"StakingContract already exists\\\"\\n            );\\n        }\\n\\n        stakingContractAddTime[_stakingContract] = SafeCast.toUint32(block.timestamp);\\n        stakingContracts.push(IVotes(_stakingContract));\\n\\n        emit AddStakingContract(_stakingContract);\\n    }\\n\\n    /***************************************\\n                REWARDS-EXTERNAL\\n    ****************************************/\\n\\n    /**\\n     * @notice Allows arbitrary reward donation to a dial on top of the weekly rewards.\\n     * @param _dialIds  Dial identifiers that will receive donated rewards.\\n     * @param _amounts  Units of rewards to be sent to each dial including decimals.\\n     */\\n    function donate(uint256[] memory _dialIds, uint256[] memory _amounts) external {\\n        uint256 dialLen = _dialIds.length;\\n        require(dialLen > 0 && _amounts.length == dialLen, \\\"Invalid inputs\\\");\\n\\n        uint256 totalAmount;\\n\\n        // For each specified dial\\n        uint256 dialId;\\n        for (uint256 i = 0; i < dialLen; i++) {\\n            dialId = _dialIds[i];\\n            require(dialId < dials.length, \\\"Invalid dial id\\\");\\n\\n            // Sum the rewards for each dial\\n            totalAmount += _amounts[i];\\n            // Add rewards to the dial's rewards balance\\n            dials[dialId].balance += SafeCast.toUint96(_amounts[i]);\\n\\n            emit DonatedRewards(dialId, _amounts[i]);\\n        }\\n\\n        // Transfer the total donated rewards to this Emissions Controller contract\\n        REWARD_TOKEN.safeTransferFrom(msg.sender, address(this), totalAmount);\\n    }\\n\\n    /**\\n     * @notice Calculates the rewards to be distributed to each dial for the next weekly period.\\n     * @dev    Callable once an epoch has fully passed. Top level emission for the epoch is distributed\\n     *         proportionately to vote count with the following exceptions:\\n     *          - Disabled dials are ignored and votes not counted.\\n     *          - Dials with a cap are capped and their votes/emission removed (effectively redistributing rewards).\\n     */\\n    function calculateRewards() external {\\n        // 1 - Calculate amount of rewards to distribute this week\\n        uint32 epoch = _epoch(block.timestamp);\\n        require(epoch > epochs.lastEpoch, \\\"Must wait for new period\\\");\\n        //     Update storage with new last epoch\\n        epochs.lastEpoch = epoch;\\n        uint256 emissionForEpoch = topLineEmission(epoch);\\n\\n        // 2.0 - Calculate the total amount of dial votes ignoring any disabled dials\\n        uint256 totalDialVotes;\\n        uint256 dialLen = dials.length;\\n        uint256[] memory dialVotes = new uint256[](dialLen);\\n        for (uint256 i = 0; i < dialLen; i++) {\\n            DialData memory dialData = dials[i];\\n            if (dialData.disabled) continue;\\n\\n            // Get the relevant votes for the dial. Possibilities:\\n            //   - No new votes cast in period, therefore relevant votes are at pos len - 1\\n            //   - Votes already cast in period, therefore relevant is at pos len - 2\\n            uint256 end = dialData.voteHistory.length - 1;\\n            HistoricVotes memory latestVote = dialData.voteHistory[end];\\n            if (latestVote.epoch < epoch) {\\n                dialVotes[i] = latestVote.votes;\\n                totalDialVotes += latestVote.votes;\\n                // Create a new weighted votes for the current distribution period\\n                dials[i].voteHistory.push(\\n                    HistoricVotes({ votes: latestVote.votes, epoch: SafeCast.toUint32(epoch) })\\n                );\\n            } else if (latestVote.epoch == epoch && end > 0) {\\n                uint256 votes = dialData.voteHistory[end - 1].votes;\\n                dialVotes[i] = votes;\\n                totalDialVotes += votes;\\n            }\\n        }\\n\\n        // 3.0 - Deal with the capped dials\\n        uint256[] memory distributionAmounts = new uint256[](dialLen);\\n        uint256 postCappedVotes = totalDialVotes;\\n        uint256 postCappedEmission = emissionForEpoch;\\n        for (uint256 k = 0; k < dialLen; k++) {\\n            DialData memory dialData = dials[k];\\n            // 3.1 - If the dial has a cap and isn't disabled, check if it's over the threshold\\n            if (dialData.cap > 0 && !dialData.disabled) {\\n                uint256 maxVotes = (dialData.cap * totalDialVotes) / 100;\\n                // If dial has move votes than its cap\\n                if (dialVotes[k] > maxVotes) {\\n                    // Calculate amount of rewards for the dial\\n                    distributionAmounts[k] = (dialData.cap * emissionForEpoch) / 100;\\n                    // Add dial rewards to balance in storage.\\n                    // Is addition and not set as rewards could have been donated.\\n                    dials[k].balance += SafeCast.toUint96(distributionAmounts[k]);\\n\\n                    // Remove dial votes from total votes\\n                    postCappedVotes -= dialVotes[k];\\n                    // Remove capped rewards from total reward\\n                    postCappedEmission -= distributionAmounts[k];\\n                    // Set to zero votes so it'll be skipped in the next loop\\n                    dialVotes[k] = 0;\\n                }\\n            }\\n        }\\n\\n        // 4.0 - Calculate the distribution amounts for each dial\\n        for (uint256 l = 0; l < dialLen; l++) {\\n            // Skip dial if no votes, disabled or was over cap\\n            if (dialVotes[l] == 0) {\\n                continue;\\n            }\\n\\n            // Calculate amount of rewards for the dial & set storage\\n            distributionAmounts[l] = (dialVotes[l] * postCappedEmission) / postCappedVotes;\\n            dials[l].balance += SafeCast.toUint96(distributionAmounts[l]);\\n        }\\n\\n        emit PeriodRewards(distributionAmounts);\\n    }\\n\\n    /**\\n     * @notice Transfers all accrued rewards to dials and notifies them of the amount.\\n     * @param _dialIds  Dial identifiers for which to distribute rewards.\\n     */\\n    function distributeRewards(uint256[] memory _dialIds) external {\\n        // For each specified dial\\n        uint256 len = _dialIds.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            require(_dialIds[i] < dials.length, \\\"Invalid dial id\\\");\\n            DialData memory dialData = dials[_dialIds[i]];\\n\\n            // 1.0 - Get the dial's reward balance\\n            if (dialData.balance == 0) {\\n                continue;\\n            }\\n            // 2.0 - Reset the balance in storage back to 0\\n            dials[_dialIds[i]].balance = 0;\\n\\n            // 3.0 - Send the rewards the to the dial recipient\\n            REWARD_TOKEN.safeTransfer(dialData.recipient, dialData.balance);\\n\\n            // 4.0 - Notify the dial of the new rewards if configured to\\n            //       Only after successful transer tx\\n            if (dialData.notify) {\\n                IRewardsDistributionRecipient(dialData.recipient).notifyRewardAmount(\\n                    dialData.balance\\n                );\\n            }\\n\\n            emit DistributedReward(_dialIds[i], dialData.balance);\\n        }\\n    }\\n\\n    /***************************************\\n                VOTING-EXTERNAL\\n    ****************************************/\\n\\n    /**\\n     * @notice Re-cast a voters votes by retrieving balance across all staking contracts\\n     *         and updating `lastSourcePoke`.\\n     * @dev    This would need to be called if a staking contract was added to the emissions controller\\n     * when a voter already had voting power in the new staking contract and they had already set voting preferences.\\n     * @param _voter    Address of the voter for which to re-cast.\\n     */\\n    function pokeSources(address _voter) public {\\n        // Only poke if voter has previously set voting preferences\\n        if (voterPreferences[_voter].lastSourcePoke > 0) {\\n            uint256 votesCast = voterPreferences[_voter].votesCast;\\n            uint256 newVotesCast = getVotes(_voter) - votesCast;\\n            _moveVotingPower(_voter, newVotesCast, _add);\\n            voterPreferences[_voter].lastSourcePoke = SafeCast.toUint32(block.timestamp);\\n\\n            emit SourcesPoked(_voter, newVotesCast);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows a staker to cast their voting power across a number of dials.\\n     * @dev    A staker can proportion their voting power even if they currently have zero voting power.\\n     *         For example, they have delegated their votes. When they do have voting power (e.g. they undelegate),\\n     *         their set weights will proportion their voting power.\\n     * @param _preferences  Structs containing dialId & voting weights, with 0 <= n <= 16 entries.\\n     */\\n    function setVoterDialWeights(Preference[] memory _preferences) external {\\n        require(_preferences.length <= 16, \\\"Max of 16 preferences\\\");\\n\\n        // 1.0 - Get staker's previous total votes cast\\n        uint256 votesCast = voterPreferences[msg.sender].votesCast;\\n        // 1.1 - Adjust dial votes from removed staker votes\\n        _moveVotingPower(msg.sender, votesCast, _subtract);\\n        //       Clear the old weights as they will be added back below\\n        delete voterPreferences[msg.sender];\\n\\n        // 2.0 - Log new preferences\\n        uint256 newTotalWeight;\\n        uint256 newDialWeights;\\n        for (uint256 i = 0; i < _preferences.length; i++) {\\n            require(_preferences[i].dialId < dials.length, \\\"Invalid dial id\\\");\\n            require(_preferences[i].weight > 0, \\\"Must give a dial some weight\\\");\\n            newTotalWeight += _preferences[i].weight;\\n\\n            // Add staker's dial weight\\n            newDialWeights |= uint256(_preferences[i].weight) << (i * 16);\\n            // Add staker's dial id\\n            newDialWeights |= uint256(_preferences[i].dialId) << ((i * 16) + 8);\\n        }\\n\\n        // 2.1 - In the likely scenario less than 16 preferences are given, add a breaker with max uint\\n        //       to signal that this is the end of array.\\n        if (_preferences.length < 16) {\\n            // Set dialId to 255\\n            newDialWeights |= uint256(255) << ((_preferences.length * 16) + 8);\\n        }\\n        require(newTotalWeight <= SCALE, \\\"Imbalanced weights\\\");\\n        // Update storage with the array of 16 Preferences stored as an uint256\\n        voterPreferences[msg.sender].dialWeights = newDialWeights;\\n\\n        // Need to set before calling _moveVotingPower for the second time\\n        voterPreferences[msg.sender].lastSourcePoke = SafeCast.toUint32(block.timestamp);\\n\\n        // 3.0 - Cast votes on these new preferences\\n        _moveVotingPower(msg.sender, getVotes(msg.sender), _add);\\n\\n        emit PreferencesChanged(msg.sender, _preferences);\\n    }\\n\\n    /**\\n     * @notice  Called by the staking contracts when a staker has modified voting power.\\n     * @dev     This can be called when staking, cooling down for withdraw or delegating.\\n     * @param from    Account that votes moved from. If a mint the account will be a zero address.\\n     * @param to      Account that votes moved to. If a burn the account will be a zero address.\\n     * @param amount  The number of votes moved including the decimal places.\\n     */\\n    function moveVotingPowerHook(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external override {\\n        if (amount > 0) {\\n            bool votesCast;\\n            // Require that the caller of this function is a whitelisted staking contract\\n            uint32 addTime = stakingContractAddTime[msg.sender];\\n            require(addTime > 0, \\\"Caller must be staking contract\\\");\\n\\n            // If burning (withdraw) or transferring delegated votes from a staker\\n            if (from != address(0)) {\\n                uint32 lastSourcePoke = voterPreferences[from].lastSourcePoke;\\n                if (lastSourcePoke > addTime) {\\n                    _moveVotingPower(from, amount, _subtract);\\n                    votesCast = true;\\n                } else if (lastSourcePoke > 0) {\\n                    // If preferences were set before the calling staking contract\\n                    // was added to the EmissionsController\\n                    pokeSources(from);\\n                }\\n                // Don't need to do anything if staker has not set preferences before.\\n            }\\n            // If minting (staking) or transferring delegated votes to a staker\\n            if (to != address(0)) {\\n                uint32 lastSourcePoke = voterPreferences[to].lastSourcePoke;\\n                if (lastSourcePoke > addTime) {\\n                    _moveVotingPower(to, amount, _add);\\n                    votesCast = true;\\n                } else if (lastSourcePoke > 0) {\\n                    // If preferences were set before the calling staking contract\\n                    // was added to the EmissionsController\\n                    pokeSources(to);\\n                }\\n                // Don't need to do anything if staker has not set preferences before.\\n            }\\n\\n            // Only emit if voting power was moved.\\n            if (votesCast) {\\n                emit VotesCast(msg.sender, from, to, amount);\\n            }\\n        }\\n    }\\n\\n    /***************************************\\n                VOTING-INTERNAL\\n    ****************************************/\\n\\n    /**\\n     * @dev Internal voting power updater. Adds/subtracts votes across the array of user preferences.\\n     * @param _voter    Address of the source of movement.\\n     * @param _amount   Total amount of votes to be added/removed (proportionately across the user preferences).\\n     * @param _op       Function (either addition or subtraction) that dictates how the `_amount` of votes affects balance.\\n     */\\n    function _moveVotingPower(\\n        address _voter,\\n        uint256 _amount,\\n        function(uint256, uint256) pure returns (uint256) _op\\n    ) internal {\\n        // 0.0 - Get preferences and epoch data\\n        VoterPreferences memory preferences = voterPreferences[_voter];\\n\\n        // 0.1 - If no preferences have been set then there is nothing to do\\n        // This prevent doing 16 iterations below as dialId 255 will not be set\\n        if (preferences.lastSourcePoke == 0) return;\\n\\n        // 0.2 - If in the first launch week\\n        uint32 currentEpoch = _epoch(block.timestamp);\\n\\n        // 0.3 - Update the total amount of votes cast by the voter\\n        voterPreferences[_voter].votesCast = SafeCast.toUint128(\\n            _op(preferences.votesCast, _amount)\\n        );\\n\\n        // 1.0 - Loop through voter preferences until dialId == 255 or until end\\n        for (uint256 i = 0; i < 16; i++) {\\n            uint256 dialId = uint8(preferences.dialWeights >> ((i * 16) + 8));\\n            if (dialId == 255) break;\\n\\n            uint256 weight = uint8(preferences.dialWeights >> (i * 16));\\n\\n            // 1.1 - Scale the vote by dial weight\\n            //       e.g. 5e17 * 1e18 / 1e18 * 100e18 / 1e18 = 50e18\\n            uint256 amountToChange = (weight * _amount) / SCALE;\\n\\n            // 1.2 - Fetch voting history for this dial\\n            HistoricVotes[] storage voteHistory = dials[dialId].voteHistory;\\n            uint256 len = voteHistory.length;\\n            HistoricVotes storage latestHistoricVotes = voteHistory[len - 1];\\n\\n            // 1.3 - Determine new votes cast for dial\\n            uint128 newVotes = SafeCast.toUint128(_op(latestHistoricVotes.votes, amountToChange));\\n\\n            // 1.4 - Update dial vote count. If first vote in new epoch, create new entry\\n            if (latestHistoricVotes.epoch < currentEpoch) {\\n                // Add a new weighted votes epoch for the dial\\n                voteHistory.push(HistoricVotes({ votes: newVotes, epoch: currentEpoch }));\\n            } else {\\n                // Epoch already exists for this dial so just update the dial's weighted votes\\n                latestHistoricVotes.votes = newVotes;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the epoch index the timestamp is on.\\n     *         This is the number of weeks since 1 Jan 1970. ie the timestamp / 604800 seconds in a week.\\n     * @dev    Each week starts on Thursday 00:00 UTC.\\n     * @param timestamp UNIX time in seconds.\\n     * @return epoch    The number of weeks since 1 Jan 1970.\\n     */\\n    function _epoch(uint256 timestamp) internal pure returns (uint32 epoch) {\\n        epoch = SafeCast.toUint32(timestamp) / DISTRIBUTION_PERIOD;\\n    }\\n\\n    /**\\n     * @dev Simple addition function, used in the `_moveVotingPower` fn.\\n     */\\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Simple subtraction function, used in the `_moveVotingPower` fn.\\n     */\\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a - b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/shared/ImmutableModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport { ModuleKeys } from \\\"./ModuleKeys.sol\\\";\\nimport { INexus } from \\\"../interfaces/INexus.sol\\\";\\n\\n/**\\n * @title   ImmutableModule\\n * @author  mStable\\n * @dev     Subscribes to module updates from a given publisher and reads from its registry.\\n *          Contract is used for upgradable proxy contracts.\\n */\\nabstract contract ImmutableModule is ModuleKeys {\\n    INexus public immutable nexus;\\n\\n    /**\\n     * @dev Initialization function for upgradable proxy contracts\\n     * @param _nexus Nexus contract address\\n     */\\n    constructor(address _nexus) {\\n        require(_nexus != address(0), \\\"Nexus address is zero\\\");\\n        nexus = INexus(_nexus);\\n    }\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        _onlyGovernor();\\n        _;\\n    }\\n\\n    function _onlyGovernor() internal view {\\n        require(msg.sender == _governor(), \\\"Only governor can execute\\\");\\n    }\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the Governor or the Keeper EOA.\\n     */\\n    modifier onlyKeeperOrGovernor() {\\n        _keeperOrGovernor();\\n        _;\\n    }\\n\\n    function _keeperOrGovernor() internal view {\\n        require(msg.sender == _keeper() || msg.sender == _governor(), \\\"Only keeper or governor\\\");\\n    }\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the Governance.\\n     *      Governance is either Governor address or Governance address.\\n     */\\n    modifier onlyGovernance() {\\n        require(\\n            msg.sender == _governor() || msg.sender == _governance(),\\n            \\\"Only governance can execute\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns Governor address from the Nexus\\n     * @return Address of Governor Contract\\n     */\\n    function _governor() internal view returns (address) {\\n        return nexus.governor();\\n    }\\n\\n    /**\\n     * @dev Returns Governance Module address from the Nexus\\n     * @return Address of the Governance (Phase 2)\\n     */\\n    function _governance() internal view returns (address) {\\n        return nexus.getModule(KEY_GOVERNANCE);\\n    }\\n\\n    /**\\n     * @dev Return Keeper address from the Nexus.\\n     *      This account is used for operational transactions that\\n     *      don't need multiple signatures.\\n     * @return  Address of the Keeper externally owned account.\\n     */\\n    function _keeper() internal view returns (address) {\\n        return nexus.getModule(KEY_KEEPER);\\n    }\\n\\n    /**\\n     * @dev Return SavingsManager Module address from the Nexus\\n     * @return Address of the SavingsManager Module contract\\n     */\\n    function _savingsManager() internal view returns (address) {\\n        return nexus.getModule(KEY_SAVINGS_MANAGER);\\n    }\\n\\n    /**\\n     * @dev Return Recollateraliser Module address from the Nexus\\n     * @return  Address of the Recollateraliser Module contract (Phase 2)\\n     */\\n    function _recollateraliser() internal view returns (address) {\\n        return nexus.getModule(KEY_RECOLLATERALISER);\\n    }\\n\\n    /**\\n     * @dev Return Liquidator Module address from the Nexus\\n     * @return  Address of the Liquidator Module contract\\n     */\\n    function _liquidator() internal view returns (address) {\\n        return nexus.getModule(KEY_LIQUIDATOR);\\n    }\\n\\n    /**\\n     * @dev Return ProxyAdmin Module address from the Nexus\\n     * @return Address of the ProxyAdmin Module contract\\n     */\\n    function _proxyAdmin() internal view returns (address) {\\n        return nexus.getModule(KEY_PROXY_ADMIN);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/peripheral/Uniswap/IUniswapV3SwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.6;\\npragma abicoder v2;\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface IUniswapV3SwapRouter {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVotes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\ninterface IVotes {\\n    function getVotes(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governance/staking/interfaces/IGovernanceHook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\ninterface IGovernanceHook {\\n    function moveVotingPowerHook(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardsDistributionRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewardsDistributionRecipient {\\n    function notifyRewardAmount(uint256 reward) external;\\n\\n    function getRewardToken() external view returns (IERC20);\\n}\\n\\ninterface IRewardsRecipientWithPlatformToken {\\n    function notifyRewardAmount(uint256 reward) external;\\n\\n    function getRewardToken() external view returns (IERC20);\\n\\n    function getPlatformToken() external view returns (IERC20);\\n}\\n\"\r\n    },\r\n    \"contracts/shared/ModuleKeys.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\n/**\\n * @title  ModuleKeys\\n * @author mStable\\n * @notice Provides system wide access to the byte32 represntations of system modules\\n *         This allows each system module to be able to reference and update one another in a\\n *         friendly way\\n * @dev    keccak256() values are hardcoded to avoid re-evaluation of the constants at runtime.\\n */\\ncontract ModuleKeys {\\n    // Governance\\n    // ===========\\n    // keccak256(\\\"Governance\\\");\\n    bytes32 internal constant KEY_GOVERNANCE =\\n        0x9409903de1e6fd852dfc61c9dacb48196c48535b60e25abf92acc92dd689078d;\\n    //keccak256(\\\"Staking\\\");\\n    bytes32 internal constant KEY_STAKING =\\n        0x1df41cd916959d1163dc8f0671a666ea8a3e434c13e40faef527133b5d167034;\\n    //keccak256(\\\"ProxyAdmin\\\");\\n    bytes32 internal constant KEY_PROXY_ADMIN =\\n        0x96ed0203eb7e975a4cbcaa23951943fa35c5d8288117d50c12b3d48b0fab48d1;\\n\\n    // mStable\\n    // =======\\n    // keccak256(\\\"OracleHub\\\");\\n    bytes32 internal constant KEY_ORACLE_HUB =\\n        0x8ae3a082c61a7379e2280f3356a5131507d9829d222d853bfa7c9fe1200dd040;\\n    // keccak256(\\\"Manager\\\");\\n    bytes32 internal constant KEY_MANAGER =\\n        0x6d439300980e333f0256d64be2c9f67e86f4493ce25f82498d6db7f4be3d9e6f;\\n    //keccak256(\\\"Recollateraliser\\\");\\n    bytes32 internal constant KEY_RECOLLATERALISER =\\n        0x39e3ed1fc335ce346a8cbe3e64dd525cf22b37f1e2104a755e761c3c1eb4734f;\\n    //keccak256(\\\"MetaToken\\\");\\n    bytes32 internal constant KEY_META_TOKEN =\\n        0xea7469b14936af748ee93c53b2fe510b9928edbdccac3963321efca7eb1a57a2;\\n    // keccak256(\\\"SavingsManager\\\");\\n    bytes32 internal constant KEY_SAVINGS_MANAGER =\\n        0x12fe936c77a1e196473c4314f3bed8eeac1d757b319abb85bdda70df35511bf1;\\n    // keccak256(\\\"Liquidator\\\");\\n    bytes32 internal constant KEY_LIQUIDATOR =\\n        0x1e9cb14d7560734a61fa5ff9273953e971ff3cd9283c03d8346e3264617933d4;\\n    // keccak256(\\\"InterestValidator\\\");\\n    bytes32 internal constant KEY_INTEREST_VALIDATOR =\\n        0xc10a28f028c7f7282a03c90608e38a4a646e136e614e4b07d119280c5f7f839f;\\n    // keccak256(\\\"Keeper\\\");\\n    bytes32 internal constant KEY_KEEPER =\\n        0x4f78afe9dfc9a0cb0441c27b9405070cd2a48b490636a7bdd09f355e33a5d7de;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INexus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\n/**\\n * @title INexus\\n * @dev Basic interface for interacting with the Nexus i.e. SystemKernel\\n */\\ninterface INexus {\\n    function governor() external view returns (address);\\n\\n    function getModule(bytes32 key) external view returns (address);\\n\\n    function proposeModule(bytes32 _key, address _addr) external;\\n\\n    function cancelProposedModule(bytes32 _key) external;\\n\\n    function acceptProposedModule(bytes32 _key) external;\\n\\n    function acceptProposedModules(bytes32[] calldata _keys) external;\\n\\n    function requestLockModule(bytes32 _key) external;\\n\\n    function cancelLockModule(bytes32 _key) external;\\n\\n    function lockModule(bytes32 _key) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/masset/MassetStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nstruct BassetPersonal {\\n    // Address of the bAsset\\n    address addr;\\n    // Address of the bAsset\\n    address integrator;\\n    // An ERC20 can charge transfer fee, for example USDT, DGX tokens.\\n    bool hasTxFee; // takes a byte in storage\\n    // Status of the bAsset\\n    BassetStatus status;\\n}\\n\\nstruct BassetData {\\n    // 1 Basset * ratio / ratioScale == x Masset (relative value)\\n    // If ratio == 10e8 then 1 bAsset = 10 mAssets\\n    // A ratio is divised as 10^(18-tokenDecimals) * measurementMultiple(relative value of 1 base unit)\\n    uint128 ratio;\\n    // Amount of the Basset that is held in Collateral\\n    uint128 vaultBalance;\\n}\\n\\n// Status of the Basset - has it broken its peg?\\nenum BassetStatus {\\n    Default,\\n    Normal,\\n    BrokenBelowPeg,\\n    BrokenAbovePeg,\\n    Blacklisted,\\n    Liquidating,\\n    Liquidated,\\n    Failed\\n}\\n\\nstruct BasketState {\\n    bool undergoingRecol;\\n    bool failed;\\n}\\n\\nstruct FeederConfig {\\n    uint256 supply;\\n    uint256 a;\\n    WeightLimits limits;\\n}\\n\\nstruct InvariantConfig {\\n    uint256 supply;\\n    uint256 a;\\n    WeightLimits limits;\\n    uint256 recolFee;\\n}\\n\\nstruct BasicConfig {\\n    uint256 a;\\n    WeightLimits limits;\\n}\\n\\nstruct WeightLimits {\\n    uint128 min;\\n    uint128 max;\\n}\\n\\nstruct AmpData {\\n    uint64 initialA;\\n    uint64 targetA;\\n    uint64 rampStartTime;\\n    uint64 rampEndTime;\\n}\\n\\nstruct FeederData {\\n    uint256 swapFee;\\n    uint256 redemptionFee;\\n    uint256 govFee;\\n    uint256 pendingFees;\\n    uint256 cacheSize;\\n    BassetPersonal[] bAssetPersonal;\\n    BassetData[] bAssetData;\\n    AmpData ampData;\\n    WeightLimits weightLimits;\\n}\\n\\nstruct MassetData {\\n    uint256 swapFee;\\n    uint256 redemptionFee;\\n    uint256 cacheSize;\\n    uint256 surplus;\\n    BassetPersonal[] bAssetPersonal;\\n    BassetData[] bAssetData;\\n    BasketState basket;\\n    AmpData ampData;\\n    WeightLimits weightLimits;\\n}\\n\\nstruct AssetData {\\n    uint8 idx;\\n    uint256 amt;\\n    BassetPersonal personal;\\n}\\n\\nstruct Asset {\\n    uint8 idx;\\n    address addr;\\n    bool exists;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nexus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_emissionsController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"minMasset2BassetPrice\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"minBasset2RewardsPrice\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"uniswapPath\",\"type\":\"bytes\"}],\"name\":\"AddedMassetConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"stakingDialId\",\"type\":\"uint16\"}],\"name\":\"AddedStakingContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mAssetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAssetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsAmount\",\"type\":\"uint256\"}],\"name\":\"BuyBackRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"}],\"name\":\"DonatedRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"RevenueReceived\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONFIG_SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMISSIONS_CONTROLLER\",\"outputs\":[{\"internalType\":\"contract IEmissionsController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDS_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_ROUTER\",\"outputs\":[{\"internalType\":\"contract IUniswapV3SwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_stakingDialId\",\"type\":\"uint16\"}],\"name\":\"addStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_mAssets\",\"type\":\"address[]\"}],\"name\":\"buyBackRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"name\":\"depositToPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_stakingDialIds\",\"type\":\"uint16[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"massetConfig\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"minMasset2BassetPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"minBasset2RewardsPrice\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"bAsset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"uniswapPath\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nexus\",\"outputs\":[{\"internalType\":\"contract INexus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"notifyRedistributionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_minMasset2BassetPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_minBasset2RewardsPrice\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"_uniswapPath\",\"type\":\"bytes\"}],\"name\":\"setMassetConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingDialIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RevenueBuyBack","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000afce80b19a8ce13dec0739a1aab7a028d6845eb3000000000000000000000000a3bed4e1c75d00fa6f4e5e6922db7261b5e9acd2000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000ba69e6fc7df49a3b75b565068fb91ff2d9d91780","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}