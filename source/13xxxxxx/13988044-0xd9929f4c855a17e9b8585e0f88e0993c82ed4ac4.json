{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/contracts/Federation.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"../interfaces/IBridgeInbound.sol\\\";\\r\\nimport \\\"../interfaces/IFederation.sol\\\";\\r\\nimport \\\"../libraries/Utils.sol\\\";\\r\\ncontract Federation is IFederation, OwnableUpgradeable {\\r\\n    using Utils for *;\\r\\n\\r\\n    IBridgeInbound public bridge;\\r\\n    address[] public members;\\r\\n    uint public required;\\r\\n\\r\\n    mapping (address => bool) public isMember;\\r\\n    mapping (bytes32 => mapping (address => bool)) public votes;\\r\\n    // mapping (bytes32 => uint256) public processed;\\r\\n\\r\\n    function initialize(uint8 required_, address bridge_) public initializer {\\r\\n        OwnableUpgradeable.__Ownable_init();\\r\\n        _setRequired(required_);\\r\\n        _setBridge(bridge_);\\r\\n    }\\r\\n\\r\\n    function processed(bytes32 id) external view returns(uint256) {\\r\\n        return bridge.processed(id);\\r\\n    }\\r\\n\\r\\n    function setBridge(address bridge_) external onlyOwner {\\r\\n        _setBridge(bridge_);\\r\\n    }\\r\\n    function _setBridge(address bridge_) internal {\\r\\n        require(bridge_ != address(0), \\\"Federation: Empty bridge\\\");\\r\\n        bridge = IBridgeInbound(bridge_);\\r\\n        emit BridgeChanged(bridge_);\\r\\n    }\\r\\n\\r\\n    function addMember(address _newMember) external onlyOwner {\\r\\n        require(_newMember != address(0), \\\"Federation: Empty member\\\");\\r\\n        require(!isMember[_newMember], \\\"Federation: Member already exists\\\");\\r\\n\\r\\n        isMember[_newMember] = true;\\r\\n        members.push(_newMember);\\r\\n        emit MemberAddition(_newMember);\\r\\n    }\\r\\n\\r\\n    function removeMember(address _oldMember) external onlyOwner {\\r\\n        require(_oldMember != address(0), \\\"Federation: Empty member\\\");\\r\\n        require(isMember[_oldMember], \\\"Federation: Member doesn't exists\\\");\\r\\n        require(members.length > 1, \\\"Federation: Can't remove all the members\\\");\\r\\n        require(members.length - 1 >= required, \\\"Federation: Can't have less than required members\\\");\\r\\n        isMember[_oldMember] =  false;\\r\\n        for (uint i = 0; i < members.length - 1; i++) {\\r\\n            if (members[i] == _oldMember) {\\r\\n                members[i] = members[members.length - 1];\\r\\n                members.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        emit MemberRemoval(_oldMember);\\r\\n    }\\r\\n\\r\\n    function voteTransfer(\\r\\n        uint256 srcChainID_,\\r\\n        address srcChainTokenAddress_,\\r\\n        address dstChainTokenAddress_,\\r\\n        address receiver_,\\r\\n        uint256 amount_,\\r\\n        bytes32 transactionHash_,\\r\\n        uint32 logIndex_\\r\\n    ) external override onlyMember {\\r\\n        if (bridge.isTransferProcessed(\\r\\n            srcChainID_,\\r\\n            srcChainTokenAddress_,\\r\\n            dstChainTokenAddress_,\\r\\n            receiver_,\\r\\n            amount_,\\r\\n            transactionHash_,\\r\\n            logIndex_)\\r\\n        ) {\\r\\n            return;\\r\\n        }\\r\\n        bytes32 processId = Utils.getTransferId(\\r\\n            srcChainID_,\\r\\n            srcChainTokenAddress_,\\r\\n            dstChainTokenAddress_,\\r\\n            receiver_,\\r\\n            amount_,\\r\\n            transactionHash_,\\r\\n            logIndex_\\r\\n        );\\r\\n\\r\\n        if (votes[processId][_msgSender()])\\r\\n            return;\\r\\n\\r\\n        votes[processId][_msgSender()] = true;\\r\\n\\r\\n        emit VotedTransfer(\\r\\n            srcChainID_,\\r\\n            srcChainTokenAddress_,\\r\\n            dstChainTokenAddress_,\\r\\n            receiver_,\\r\\n            amount_,\\r\\n            transactionHash_,\\r\\n            logIndex_,\\r\\n            _msgSender(),\\r\\n            processId\\r\\n        );\\r\\n\\r\\n        uint voteCount = getVoteCount(processId);\\r\\n        if ((voteCount >= required) && (voteCount >= members.length / 2 + 1)) {\\r\\n            bridge.acceptTransfer(\\r\\n                srcChainID_,\\r\\n                srcChainTokenAddress_,\\r\\n                dstChainTokenAddress_,\\r\\n                receiver_,\\r\\n                amount_,\\r\\n                transactionHash_,\\r\\n                logIndex_\\r\\n            );\\r\\n\\r\\n            emit ExecutedTransfer(processId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function hasVotedTransfer(\\r\\n        uint256 srcChainID_,\\r\\n        address srcChainTokenAddress_,\\r\\n        address dstChainTokenAddress_,\\r\\n        address receiver_,\\r\\n        uint256 amount_,\\r\\n        bytes32 transactionHash_,\\r\\n        uint32 logIndex_\\r\\n    ) external view override returns(bool) {\\r\\n        bytes32 transferId = Utils.getTransferId(\\r\\n            srcChainID_,\\r\\n            srcChainTokenAddress_,\\r\\n            dstChainTokenAddress_,\\r\\n            receiver_,\\r\\n            amount_,\\r\\n            transactionHash_,\\r\\n            logIndex_\\r\\n        );\\r\\n        return votes[transferId][_msgSender()];\\r\\n    }\\r\\n\\r\\n    function isTransferProcessed(\\r\\n        uint256 srcChainID_,\\r\\n        address srcChainTokenAddress_,\\r\\n        address dstChainTokenAddress_,\\r\\n        address receiver_,\\r\\n        uint256 amount_,\\r\\n        bytes32 transactionHash_,\\r\\n        uint32 logIndex_\\r\\n    ) external view override returns(bool) {\\r\\n        return bridge.isTransferProcessed(srcChainID_, srcChainTokenAddress_, dstChainTokenAddress_, receiver_, amount_, transactionHash_, logIndex_);\\r\\n    }\\r\\n\\r\\n    // function voteCall(\\r\\n    //     uint256 srcChainID_,\\r\\n    //     address srcChainContractAddress_,\\r\\n    //     address dstChainContractAddress_,\\r\\n    //     bytes32 transactionHash_,\\r\\n    //     uint32 logIndex_,\\r\\n    //     bytes calldata payload\\r\\n    // ) external override onlyMember {\\r\\n    //     if (bridge.isCallProcessed(\\r\\n    //         srcChainID_,\\r\\n    //         srcChainContractAddress_,\\r\\n    //         dstChainContractAddress_,\\r\\n    //         transactionHash_,\\r\\n    //         logIndex_,\\r\\n    //         payload\\r\\n    //     )) {\\r\\n    //        return;\\r\\n    //     }\\r\\n    //     bytes32 callId = Utils.getCallId(\\r\\n    //         srcChainID_,\\r\\n    //         srcChainContractAddress_,\\r\\n    //         dstChainContractAddress_,\\r\\n    //         transactionHash_,\\r\\n    //         logIndex_,\\r\\n    //         payload\\r\\n    //     );\\r\\n    //     if (votes[callId][_msgSender()])\\r\\n    //         return;\\r\\n\\r\\n    //     votes[callId][_msgSender()] = true;\\r\\n    //     emit VotedCall(\\r\\n    //         srcChainID_,\\r\\n    //         srcChainContractAddress_,\\r\\n    //         dstChainContractAddress_,\\r\\n    //         transactionHash_,\\r\\n    //         logIndex_,\\r\\n    //         _msgSender(),\\r\\n    //         callId,\\r\\n    //         payload\\r\\n    //     );\\r\\n    //     uint voteCount = getVoteCount(callId);\\r\\n    //     if ((voteCount >= required) && (voteCount >= members.length / 2 + 1)) {\\r\\n    //         bridge.acceptCall(\\r\\n    //             srcChainID_,\\r\\n    //             srcChainContractAddress_,\\r\\n    //             dstChainContractAddress_,\\r\\n    //             transactionHash_,\\r\\n    //             logIndex_,\\r\\n    //             payload\\r\\n    //         );\\r\\n    //         emit ExecutedCall(callId);\\r\\n    //     }\\r\\n\\r\\n    // }\\r\\n    // function hasVotedCall(\\r\\n    //     uint256 srcChainID_,\\r\\n    //     address srcChainContractAddress_,\\r\\n    //     address dstChainContractAddress_,\\r\\n    //     bytes32 transactionHash_,\\r\\n    //     uint32 logIndex_,\\r\\n    //     bytes calldata payload\\r\\n    // ) external view override returns(bool) {\\r\\n    //     bytes32 callId = Utils.getCallId(\\r\\n    //         srcChainID_,\\r\\n    //         srcChainContractAddress_,\\r\\n    //         dstChainContractAddress_,\\r\\n    //         transactionHash_,\\r\\n    //         logIndex_,\\r\\n    //         payload\\r\\n    //     );\\r\\n    //     return votes[callId][_msgSender()];\\r\\n    // }\\r\\n    // function isCallProcessed(\\r\\n    //     uint256 srcChainID_,\\r\\n    //     address srcChainContractAddress_,\\r\\n    //     address dstChainContractAddress_,\\r\\n    //     bytes32 transactionHash_,\\r\\n    //     uint32 logIndex_,\\r\\n    //     bytes calldata payload\\r\\n    // ) external view override returns(bool) {\\r\\n    //     return bridge.isCallProcessed(srcChainID_, srcChainContractAddress_, dstChainContractAddress_, transactionHash_, logIndex_, payload);\\r\\n    // }\\r\\n\\r\\n    function getVoteCount(bytes32 processId) public view override returns(uint) {\\r\\n        uint count = 0;\\r\\n        for (uint i = 0; i < members.length; i++) {\\r\\n            if (votes[processId][members[i]])\\r\\n                count += 1;\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    function setRequired(uint _required) external override onlyOwner {\\r\\n        _setRequired(_required);\\r\\n    }\\r\\n\\r\\n    function _setRequired(uint _required) internal {\\r\\n        required = _required;\\r\\n        emit RequirementChange(_required);\\r\\n    }\\r\\n\\r\\n    modifier onlyMember() {\\r\\n        require(isMember[_msgSender()], \\\"Federation: Caller not a Federator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBridgeInbound.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"./IRegistry.sol\\\";\\r\\nimport \\\"./IFederation.sol\\\";\\r\\n\\r\\ninterface IBridgeInbound {\\r\\n    event TransferAccepted(\\r\\n        uint256 indexed sourceChainId,\\r\\n        bytes32 indexed sourceHash,\\r\\n        address indexed receiver_,\\r\\n        address sourceToken,\\r\\n        address destinationToken,\\r\\n        uint256 amount,\\r\\n        uint32 logIndex\\r\\n    );\\r\\n\\r\\n    function federation() external returns (IFederation);\\r\\n    function processed(bytes32) external view returns(uint256);\\r\\n    /**\\r\\n     * Accepts the transaction from the other chain that was voted and sent by the federation contract\\r\\n     */\\r\\n    function acceptTransfer(\\r\\n        uint256 srcChainID,\\r\\n        address srcChainTokenAddress,\\r\\n        address dstChainTokenAddress,\\r\\n        address receiver,\\r\\n        uint256 amount,\\r\\n        bytes32 transactionHash,\\r\\n        uint32 logIndex\\r\\n    ) external;\\r\\n\\r\\n    // function acceptCall(\\r\\n    //     uint256 srcChainID_,\\r\\n    //     address srcChainTokenAddress_,\\r\\n    //     address dstChainTokenAddress_,\\r\\n    //     bytes32 transactionHash_,\\r\\n    //     uint32 logIndex_,\\r\\n    //     bytes calldata payload\\r\\n    // ) external;\\r\\n\\r\\n    function isTransferProcessed(\\r\\n        uint256 srcChainID,\\r\\n        address srcChainTokenAddress,\\r\\n        address dstChainTokenAddress,\\r\\n        address receiver,\\r\\n        uint256 amount,\\r\\n        bytes32 transactionHash,\\r\\n        uint32 logIndex\\r\\n    ) external view returns(bool);\\r\\n\\r\\n    // function isCallProcessed(\\r\\n    //     uint256 srcChainID_,\\r\\n    //     address srcChainTokenAddress_,\\r\\n    //     address dstChainTokenAddress_,\\r\\n    //     bytes32 transactionHash_,\\r\\n    //     uint32 logIndex_,\\r\\n    //     bytes calldata payload\\r\\n    // ) external view returns(bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IFederation.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IFederation {\\r\\n    event VotedTransfer(\\r\\n        uint256 srcChainID_,\\r\\n        address srcChainTokenAddress_,\\r\\n        address dstChainTokenAddress_,\\r\\n        address receiver_,\\r\\n        uint256 amount_,\\r\\n        bytes32 indexed transactionHash_,\\r\\n        uint32 logIndex_,\\r\\n        address indexed federator,\\r\\n        bytes32 indexed processId);\\r\\n    event VotedCall(\\r\\n        uint256 srcChainID_,\\r\\n        address srcChainContractAddress_,\\r\\n        address dstChainContractAddress_,\\r\\n        bytes32 indexed transactionHash_,\\r\\n        uint32 logIndex_,\\r\\n        address indexed federator,\\r\\n        bytes32 indexed processId,\\r\\n        bytes payload\\r\\n    );\\r\\n\\r\\n    event ExecutedCall(bytes32 indexed processId);\\r\\n    event ExecutedTransfer(bytes32 indexed processId);\\r\\n    event MemberAddition(address indexed member);\\r\\n    event MemberRemoval(address indexed member);\\r\\n    event RequirementChange(uint required);\\r\\n    event BridgeChanged(address bridge);\\r\\n    function voteTransfer(\\r\\n        uint256 srcChainID_,\\r\\n        address srcChainTokenAddress_,\\r\\n        address dstChainTokenAddress_,\\r\\n        address receiver_,\\r\\n        uint256 amount_,\\r\\n        bytes32 transactionHash_,\\r\\n        uint32 logIndex_\\r\\n    ) external;\\r\\n    function hasVotedTransfer(\\r\\n        uint256 srcChainID_,\\r\\n        address srcChainTokenAddress_,\\r\\n        address dstChainTokenAddress_,\\r\\n        address receiver_,\\r\\n        uint256 amount_,\\r\\n        bytes32 transactionHash_,\\r\\n        uint32 logIndex_\\r\\n    ) external view returns(bool);\\r\\n\\r\\n    function isTransferProcessed(\\r\\n        uint256 srcChainID_,\\r\\n        address srcChainTokenAddress_,\\r\\n        address dstChainTokenAddress_,\\r\\n        address receiver_,\\r\\n        uint256 amount_,\\r\\n        bytes32 transactionHash_,\\r\\n        uint32 logIndex_\\r\\n    ) external view returns(bool);\\r\\n\\r\\n\\r\\n    // function voteCall(\\r\\n    //     uint256 srcChainID_,\\r\\n    //     address srcChainContractAddress_,\\r\\n    //     address dstChainContractAddress_,\\r\\n    //     bytes32 transactionHash_,\\r\\n    //     uint32 logIndex_,\\r\\n    //     bytes calldata payload\\r\\n    // ) external;\\r\\n\\r\\n    // function hasVotedCall(\\r\\n    //     uint256 srcChainID_,\\r\\n    //     address srcChainContractAddress_,\\r\\n    //     address dstChainContractAddress_,\\r\\n    //     bytes32 transactionHash_,\\r\\n    //     uint32 logIndex_,\\r\\n    //     bytes calldata payload\\r\\n    // ) external view returns(bool);\\r\\n\\r\\n    // function isCallProcessed(\\r\\n    //     uint256 srcChainID_,\\r\\n    //     address srcChainContractAddress_,\\r\\n    //     address dstChainContractAddress_,\\r\\n    //     bytes32 transactionHash_,\\r\\n    //     uint32 logIndex_,\\r\\n    //     bytes calldata payload\\r\\n    // ) external view returns(bool);\\r\\n\\r\\n    function getVoteCount(bytes32 processId) external view returns(uint);\\r\\n\\r\\n\\r\\n\\r\\n    function setRequired(uint _required) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/Utils.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity >=0.8.4;\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\r\\n\\r\\nlibrary Utils {\\r\\n    // function getCallRegistryId(\\r\\n    //     uint256 alienChainId_,\\r\\n    //     address alienChainContractAddr_,\\r\\n    //     address localChainContractAddr_,\\r\\n    //     bytes4 callSig_\\r\\n    // ) internal pure returns(bytes32) {\\r\\n    //     return keccak256(abi.encodePacked(\\r\\n    //         alienChainId_,\\r\\n    //         alienChainContractAddr_,\\r\\n    //         localChainContractAddr_,\\r\\n    //         callSig_\\r\\n    //     ));\\r\\n    // }\\r\\n\\r\\n    function getTokenRegistryId(\\r\\n        uint256 fromChainID,\\r\\n        address alienAddress\\r\\n    ) internal pure returns(bytes32) {\\r\\n        return keccak256(abi.encodePacked(\\r\\n            fromChainID,\\r\\n            alienAddress\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    function getTransferId(\\r\\n        uint256 srcChainID_,\\r\\n        address srcChainTokenAddress_,\\r\\n        address dstChainTokenAddress_,\\r\\n        address receiver_,\\r\\n        uint256 amount_,\\r\\n        bytes32 transactionHash_,\\r\\n        uint32 logIndex_\\r\\n    ) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(\\r\\n            \\\"Transfer\\\",\\r\\n            srcChainID_,\\r\\n            srcChainTokenAddress_,\\r\\n            dstChainTokenAddress_,\\r\\n            receiver_,\\r\\n            amount_,\\r\\n            transactionHash_,\\r\\n            logIndex_\\r\\n        ));\\r\\n    }\\r\\n    // function getCallId(\\r\\n    //     uint256 srcChainID_,\\r\\n    //     address srcChainTokenAddress_,\\r\\n    //     address dstChainTokenAddress_,\\r\\n    //     bytes32 transactionHash_,\\r\\n    //     uint32 logIndex_,\\r\\n    //     bytes calldata payload\\r\\n    // ) internal pure returns (bytes32) {\\r\\n    //     return keccak256(abi.encodePacked(\\r\\n    //         \\\"Call\\\",\\r\\n    //         srcChainID_,\\r\\n    //         srcChainTokenAddress_,\\r\\n    //         dstChainTokenAddress_,\\r\\n    //         transactionHash_,\\r\\n    //         logIndex_,\\r\\n    //         payload\\r\\n    //     ));\\r\\n    // }\\r\\n\\r\\n    function getTokenInfo(address tokenToUse) internal view returns (uint8 decimals, string memory symbol) {\\r\\n        return (\\r\\n            getDecimals(tokenToUse),\\r\\n            getSymbol(tokenToUse)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getSymbol(address tokenToUse) internal view returns (string memory symbol) {\\r\\n        return IERC20MetadataUpgradeable(tokenToUse).symbol();\\r\\n    }\\r\\n\\r\\n    function getDecimals(address tokenToUse) internal view returns (uint8) {\\r\\n        return IERC20MetadataUpgradeable(tokenToUse).decimals();\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRegistry.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IRegistry {\\r\\n\\r\\n    function fee(address localAddr) external view returns(uint256);\\r\\n    function tokenRegistry(address localAddress, uint256 alienChainId) external view returns(address);\\r\\n    function callRegistry(bytes32 callId) external view returns(bool);\\r\\n    function registerToken(address localAddress, uint256 alienChainId, address alienAddress) external;\\r\\n    function unregisterToken(address localAddress, uint256 alienChainId, address alienAddress) external;\\r\\n    function setFee(address localAddr, uint256 _feeConst) external;\\r\\n\\r\\n\\r\\n    event TokenRegistered(address indexed localAddress, uint256 indexed alienChainId, address indexed alienTokenAddress);\\r\\n    event TokenUnregistered(address indexed localAddress, uint256 indexed alienChainId, address indexed alienTokenAddress);\\r\\n\\r\\n\\r\\n    // event CallRegistered(uint256 indexed alienChainId_, address indexed alienChainContractAddr_, address indexed localChainContractAddr_, bytes4 callSig_);\\r\\n    // event CallUnregistered(uint256 indexed alienChainId_, address indexed alienChainContractAddr_, address indexed localChainContractAddr_, bytes4 callSig_);\\r\\n\\r\\n    event FeeChanged(address indexed localAddr, uint256 _feeConst);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"BridgeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"ExecutedCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"ExecutedTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcChainID_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"srcChainContractAddress_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstChainContractAddress_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionHash_\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"logIndex_\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"federator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"VotedCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcChainID_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"srcChainTokenAddress_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstChainTokenAddress_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionHash_\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"logIndex_\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"federator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"VotedTransfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMember\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contract IBridgeInbound\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"getVoteCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"srcChainID_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"srcChainTokenAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstChainTokenAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionHash_\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"logIndex_\",\"type\":\"uint32\"}],\"name\":\"hasVotedTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"required_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"bridge_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"srcChainID_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"srcChainTokenAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstChainTokenAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionHash_\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"logIndex_\",\"type\":\"uint32\"}],\"name\":\"isTransferProcessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"processed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldMember\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridge_\",\"type\":\"address\"}],\"name\":\"setBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"setRequired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"srcChainID_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"srcChainTokenAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstChainTokenAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionHash_\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"logIndex_\",\"type\":\"uint32\"}],\"name\":\"voteTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Federation","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}