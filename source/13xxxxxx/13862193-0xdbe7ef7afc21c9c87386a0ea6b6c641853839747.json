{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/v1/markets/eth/rarible/RaribleV2Market.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../../../../../interfaces/markets/tokens/IERC20.sol\\\";\\nimport \\\"../../../../../interfaces/markets/tokens/IERC721.sol\\\";\\nimport \\\"../../../../../interfaces/markets/tokens/IERC1155.sol\\\";\\n\\ninterface IExchangeV2Core {\\n    struct AssetType {\\n        bytes4 assetClass;\\n        bytes data;\\n    }\\n    \\n    struct Asset {\\n        AssetType assetType;\\n        uint value;\\n    }\\n\\n    struct Order {\\n        address maker;\\n        Asset makeAsset;\\n        address taker;\\n        Asset takeAsset;\\n        uint salt;\\n        uint start;\\n        uint end;\\n        bytes4 dataType;\\n        bytes data;\\n    }\\n    \\n    function matchOrders(\\n        Order memory orderLeft,\\n        bytes memory signatureLeft,\\n        Order memory orderRight,\\n        bytes memory signatureRight\\n    ) external payable;\\n}\\n\\nlibrary RaribleV2Market {\\n    address public constant RARIBLE = 0x9757F2d2b135150BBeb65308D4a91804107cd8D6;\\n\\n    struct RaribleBuy {\\n        IExchangeV2Core.Order orderLeft;\\n        bytes signatureLeft;\\n        IExchangeV2Core.Order orderRight;\\n        bytes signatureRight;\\n        uint256 price;\\n    }\\n\\n    function buyAssetsForEth(RaribleBuy[] memory raribleBuys, bool revertIfTrxFails) external {\\n        for (uint256 i = 0; i < raribleBuys.length; i++) {\\n            _buyAssetForEth(raribleBuys[i], revertIfTrxFails);\\n        }\\n    }\\n\\n    function _buyAssetForEth(RaribleBuy memory raribleBuy, bool revertIfTrxFails) internal {\\n        bytes memory _data = abi.encodeWithSelector(\\n            IExchangeV2Core(RARIBLE).matchOrders.selector, \\n            raribleBuy.orderLeft,\\n            raribleBuy.signatureLeft,\\n            raribleBuy.orderRight,\\n            raribleBuy.signatureRight\\n        );\\n        (bool success, ) = RARIBLE.call{value:raribleBuy.price}(_data);\\n        if (!success && revertIfTrxFails) {\\n            // Copy revert reason from call\\n            assembly {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n        if (success) {\\n            if (raribleBuy.orderLeft.takeAsset.assetType.assetClass == bytes4(keccak256(\\\"ETH\\\"))) {\\n                // In case we got ETH\\n                (bool _success, ) = msg.sender.call{value: raribleBuy.orderLeft.takeAsset.value}('');\\n                require(_success, \\\"_buyAssetForEth: Rarible market eth transfer failed\\\");\\n            }\\n            else if (raribleBuy.orderLeft.takeAsset.assetType.assetClass == bytes4(keccak256(\\\"ERC20\\\"))) {\\n                // In case we got ERC20\\n                (address addr) = abi.decode(raribleBuy.orderLeft.takeAsset.assetType.data, (address));\\n                IERC20(addr).transfer(msg.sender, raribleBuy.orderLeft.takeAsset.value);\\n            }\\n            else if (raribleBuy.orderLeft.takeAsset.assetType.assetClass == bytes4(keccak256(\\\"ERC721\\\"))) {\\n                // In case we got ERC721\\n                (address addr, uint256 tokenId) = abi.decode(raribleBuy.orderLeft.takeAsset.assetType.data, (address, uint256));\\n                IERC721(addr).transferFrom(address(this), msg.sender, tokenId);\\n            }\\n            else if (raribleBuy.orderLeft.takeAsset.assetType.assetClass == bytes4(keccak256(\\\"ERC1155\\\"))) {\\n                // In case we got ERC1155\\n                (address addr, uint256 tokenId) = abi.decode(raribleBuy.orderLeft.takeAsset.assetType.data, (address, uint256));\\n                IERC1155(addr).safeTransferFrom(address(this), msg.sender, tokenId, raribleBuy.orderLeft.takeAsset.value, \\\"\\\");\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"interfaces/markets/tokens/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\ninterface IERC20 {\\n    /**\\n        * @dev Returns the amount of tokens owned by `account`.\\n        */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n        * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n        *\\n        * Returns a boolean value indicating whether the operation succeeded.\\n        *\\n        * Emits a {Transfer} event.\\n        */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\"\r\n    },\r\n    \"interfaces/markets/tokens/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\ninterface IERC721 {\\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\n    ///  THEY MAY BE PERMANENTLY LOST\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT.\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) external;\\n    \\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function approve(address to, uint256 tokenId) external;\\n    \\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\"\r\n    },\r\n    \"interfaces/markets/tokens/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\ninterface IERC1155 {\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"RARIBLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RaribleV2Market","CompilerVersion":"v0.8.11+commit.d7f03943","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}