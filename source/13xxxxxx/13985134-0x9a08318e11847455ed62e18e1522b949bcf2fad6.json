{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n    unchecked {\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n    }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n    unchecked {\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n    }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n    unchecked {\r\n        _balances[sender] = senderBalance - amount;\r\n    }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n    unchecked {\r\n        _balances[account] = accountBalance - amount;\r\n    }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IMetaKidz {\r\n    function balanceOf(address _user) external view returns(uint256);\r\n    function ownerOf(uint256 _tokenId) external view returns(address);\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\ncontract Metabits is ERC20(\"MetaBits\", \"MBits\"), Ownable {\r\n    address public MetaKidzContractAddress;\r\n    address public MetaKidzPAContractAddress;\r\n    address public MetaKidzGCContractAddress;\r\n    address public admin = 0x1097fd1777409Ff30fF32191891A9a9752b61F01;\r\n    struct ContractSettings {\r\n        uint256 baseRate;\r\n        uint256 start;\r\n        uint256 end;\r\n    }\r\n\r\n    ContractSettings public metaKidzContractSettings;\r\n    ContractSettings public metaKidzPAContractSettings;\r\n    ContractSettings public metaKidzGCContractSettings;\r\n    IMetaKidz public iMetaKidz;\r\n    IMetaKidz public iMetaKidzPA;\r\n    IMetaKidz public iMetaKidzGC;\r\n    IMetaKidz public iMetaKidzE;\r\n\r\n    // Prevents new contracts from being added or changes to disbursement if permanently locked\r\n    bool public isLocked = false;\r\n    mapping(bytes32 => uint256) public metaKidzLastClaim;\r\n    mapping(bytes32 => uint256) public metaKidzPALastClaim;\r\n    mapping(bytes32 => uint256) public metaKidzGCLastClaim;\r\n\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n\r\n    constructor(address _metaKidzAddress,address _metaKidzPAAddress,address _metaKidzGCAddress, uint256 _metaKidzBaseRate, uint256 _metaKidzPABaseRate, uint256 _metaKidzGCBaseRate) {\r\n        MetaKidzContractAddress = _metaKidzAddress;\r\n        MetaKidzPAContractAddress = _metaKidzPAAddress;\r\n        MetaKidzGCContractAddress = _metaKidzGCAddress;\r\n        iMetaKidz = IMetaKidz(MetaKidzContractAddress);\r\n        iMetaKidzPA = IMetaKidz(MetaKidzPAContractAddress);\r\n        iMetaKidzGC = IMetaKidz(MetaKidzGCContractAddress);\r\n        // initialize contractSettings\r\n        metaKidzContractSettings = ContractSettings({\r\n        baseRate: _metaKidzBaseRate * 10 ** 18,\r\n        start: 1641408173,\r\n        end: 1672944173\r\n        });\r\n        metaKidzPAContractSettings = ContractSettings({\r\n        baseRate: _metaKidzPABaseRate  * 10 ** 18,\r\n        start: 1641408173,\r\n        end: 1672944173\r\n        });\r\n        metaKidzGCContractSettings = ContractSettings({\r\n        baseRate: _metaKidzGCBaseRate  * 10 ** 18,\r\n        start: 1641828960,\r\n        end: 1799595360\r\n        });\r\n    }\r\n\r\n    function setMetaKidzContractSettings(uint256 _baseRate, uint256 _start, uint256 _end) public {\r\n        require(msg.sender == admin || msg.sender == owner(), \"Invalid sender\");\r\n        require(!isLocked, \"Cannot modify end dates after lock\");\r\n        metaKidzContractSettings.baseRate = _baseRate  * 10 ** 18;\r\n        metaKidzContractSettings.start = _start;\r\n        metaKidzContractSettings.end = _end;\r\n    }\r\n\r\n    function setMetaKidzPAContractSettings(uint256 _baseRate, uint256 _start, uint256 _end) public {\r\n        require(msg.sender == admin || msg.sender == owner(), \"Invalid sender\");\r\n        require(!isLocked, \"Cannot modify end dates after lock\");\r\n        metaKidzPAContractSettings.baseRate = _baseRate  * 10 ** 18;\r\n        metaKidzPAContractSettings.start = _start;\r\n        metaKidzPAContractSettings.end = _end;\r\n    }\r\n\r\n    function setMetaKidzGCContractSettings(uint256 _baseRate, uint256 _start, uint256 _end) public {\r\n        require(msg.sender == admin || msg.sender == owner(), \"Invalid sender\");\r\n        require(!isLocked, \"Cannot modify end dates after lock\");\r\n        metaKidzGCContractSettings.baseRate = _baseRate  * 10 ** 18;\r\n        metaKidzGCContractSettings.start = _start;\r\n        metaKidzGCContractSettings.end = _end;\r\n    }\r\n\r\n    function claimRewardForMetaKidz(uint256 _metaKidzTokenId) public returns (uint256) {\r\n        uint256 totalUnclaimedReward1 = 0;\r\n        require(metaKidzContractSettings.end > block.timestamp, \"Time for claiming has expired.\");\r\n        require(iMetaKidz.ownerOf(_metaKidzTokenId) == msg.sender, \"Caller does not own the token being claimed for.\");\r\n\r\n        totalUnclaimedReward1 = computeUnclaimedRewardForMetaKidz(_metaKidzTokenId);\r\n\r\n        // update the lastClaim date for tokenId and contractAddress\r\n        bytes32 lastClaimKey = keccak256(abi.encode(_metaKidzTokenId));\r\n        metaKidzLastClaim[lastClaimKey] = block.timestamp;\r\n\r\n        // mint the tokens and distribute to msg.sender\r\n        _mint(msg.sender, totalUnclaimedReward1);\r\n        emit RewardPaid(msg.sender, totalUnclaimedReward1);\r\n\r\n        return totalUnclaimedReward1;\r\n    }\r\n\r\n    function claimRewardForMetaKidzPA( uint256 _metaKidzPATokenId) public returns (uint256) {\r\n        uint256 totalUnclaimedReward2 = 0;\r\n         require(metaKidzPAContractSettings.end > block.timestamp, \"Time for claiming has expired.\");\r\n        require(iMetaKidzPA.ownerOf(_metaKidzPATokenId) == msg.sender, \"Caller does not own the token being claimed for.\");\r\n\r\n        totalUnclaimedReward2 = computeUnclaimedRewardForMetaKidzPA(_metaKidzPATokenId);\r\n\r\n        // update the lastClaim date for tokenId and contractAddress\r\n        bytes32 lastClaimMetaKidzPAKey = keccak256(abi.encode(_metaKidzPATokenId));\r\n        metaKidzPALastClaim[lastClaimMetaKidzPAKey] = block.timestamp;\r\n        // mint the tokens and distribute to msg.sender\r\n        _mint(msg.sender, totalUnclaimedReward2);\r\n        emit RewardPaid(msg.sender, totalUnclaimedReward2);\r\n\r\n        return totalUnclaimedReward2;\r\n    }\r\n\r\n    function claimRewardForMetaKidzGC(uint256 _metaKidzGCTokenId) public returns (uint256) {\r\n        uint256 totalUnclaimedReward1 = 0;\r\n        require(metaKidzGCContractSettings.end > block.timestamp, \"Time for claiming has expired.\");\r\n        require(iMetaKidzGC.ownerOf(_metaKidzGCTokenId) == msg.sender, \"Caller does not own the token being claimed for.\");\r\n\r\n        totalUnclaimedReward1 = computeUnclaimedRewardForMetaKidzGC(_metaKidzGCTokenId);\r\n\r\n        // update the lastClaim date for tokenId and contractAddress\r\n        bytes32 lastClaimKey = keccak256(abi.encode(_metaKidzGCTokenId));\r\n        metaKidzGCLastClaim[lastClaimKey] = block.timestamp;\r\n\r\n        // mint the tokens and distribute to msg.sender\r\n        _mint(msg.sender, totalUnclaimedReward1);\r\n        emit RewardPaid(msg.sender, totalUnclaimedReward1);\r\n\r\n        return totalUnclaimedReward1;\r\n    }\r\n\r\n    function claimRewardsForMetaKidz(uint256[] calldata _metaKidzTokenIds) public returns (uint256) {\r\n        require(metaKidzContractSettings.end > block.timestamp, \"Time for claiming has expired\");\r\n\r\n        uint256 totalUnclaimedReward1 = 0;\r\n\r\n        for(uint256 i = 0; i < _metaKidzTokenIds.length; i++) {\r\n            uint256 _metaKidzTokenId = _metaKidzTokenIds[i];\r\n\r\n            require(iMetaKidz.ownerOf(_metaKidzTokenId) == msg.sender, \"Caller does not own the token being claimed for.\");\r\n\r\n            uint256 unclaimedReward = computeUnclaimedRewardForMetaKidz(_metaKidzTokenId);\r\n            totalUnclaimedReward1 = totalUnclaimedReward1 + unclaimedReward;\r\n\r\n            // update the lastClaim date for tokenId and contractAddress\r\n            bytes32 lastClaimKey = keccak256(abi.encode(_metaKidzTokenId));\r\n            metaKidzLastClaim[lastClaimKey] = block.timestamp;\r\n        }\r\n        // mint the tokens and distribute to msg.sender\r\n        _mint(msg.sender, totalUnclaimedReward1);\r\n        emit RewardPaid(msg.sender, totalUnclaimedReward1);\r\n\r\n        return totalUnclaimedReward1;\r\n    }\r\n\r\n    function claimRewardsForMetaKidzPA(uint256[] calldata _metaKidzPATokenIds) public returns (uint256) {\r\n        require(metaKidzPAContractSettings.end > block.timestamp, \"Time for claiming has expired\");\r\n\r\n        uint256 totalUnclaimedReward2 = 0;\r\n\r\n        for(uint256 i = 0; i < _metaKidzPATokenIds.length; i++) {\r\n            uint256 _metaKidzPATokenId = _metaKidzPATokenIds[i];\r\n\r\n            require(iMetaKidzPA.ownerOf(_metaKidzPATokenId) == msg.sender, \"Caller does not own the token being claimed for.\");\r\n\r\n            uint256 unclaimedReward = computeUnclaimedRewardForMetaKidzPA(_metaKidzPATokenId);\r\n            totalUnclaimedReward2 = totalUnclaimedReward2 + unclaimedReward;\r\n\r\n            // update the lastClaim date for tokenId and contractAddress\r\n            bytes32 lastClaimKey = keccak256(abi.encode(_metaKidzPATokenId));\r\n            metaKidzPALastClaim[lastClaimKey] = block.timestamp;\r\n        }\r\n        // mint the tokens and distribute to msg.sender\r\n        _mint(msg.sender, totalUnclaimedReward2);\r\n        emit RewardPaid(msg.sender, totalUnclaimedReward2);\r\n\r\n        return totalUnclaimedReward2;\r\n    }\r\n\r\n    function claimRewardsForMetaKidzGC(uint256[] calldata _metaKidzGCTokenIds) public returns (uint256) {\r\n        require(metaKidzGCContractSettings.end > block.timestamp, \"Time for claiming has expired\");\r\n\r\n        uint256 totalUnclaimedReward1 = 0;\r\n\r\n        for(uint256 i = 0; i < _metaKidzGCTokenIds.length; i++) {\r\n            uint256 _metaKidzGCTokenId = _metaKidzGCTokenIds[i];\r\n\r\n            require(iMetaKidzGC.ownerOf(_metaKidzGCTokenId) == msg.sender, \"Caller does not own the token being claimed for.\");\r\n\r\n            uint256 unclaimedReward = computeUnclaimedRewardForMetaKidzGC(_metaKidzGCTokenId);\r\n            totalUnclaimedReward1 = totalUnclaimedReward1 + unclaimedReward;\r\n\r\n            // update the lastClaim date for tokenId and contractAddress\r\n            bytes32 lastClaimKey = keccak256(abi.encode(_metaKidzGCTokenId));\r\n            metaKidzGCLastClaim[lastClaimKey] = block.timestamp;\r\n        }\r\n        // mint the tokens and distribute to msg.sender\r\n        _mint(msg.sender, totalUnclaimedReward1);\r\n        emit RewardPaid(msg.sender, totalUnclaimedReward1);\r\n\r\n        return totalUnclaimedReward1;\r\n    }\r\n\r\n    function permanentlyLock() public {\r\n        require(msg.sender == admin || msg.sender == owner(), \"Invalid sender\");\r\n        isLocked = true;\r\n    }\r\n\r\n    function getUnclaimedRewardAmountForMetaKidz(uint256 _tokenId) public view returns (uint256) {\r\n        return computeUnclaimedRewardForMetaKidz(_tokenId);\r\n    }\r\n\r\n        function getUnclaimedRewardAmountForMetaKidzPA(uint256 _tokenId) public view returns (uint256) {\r\n        return computeUnclaimedRewardForMetaKidzPA(_tokenId);\r\n    }\r\n\r\n    function getUnclaimedRewardAmountForMetaKidzGC(uint256 _tokenId) public view returns (uint256) {\r\n        return computeUnclaimedRewardForMetaKidzGC(_tokenId);\r\n    }\r\n\r\n    function getUnclaimedRewardsAmountForMetaKidz(uint256[] calldata _tokenIds) public view returns (uint256) {\r\n\r\n        uint256 totalUnclaimedRewards = 0;\r\n\r\n        for(uint256 i = 0; i < _tokenIds.length; i++) {\r\n            totalUnclaimedRewards += computeUnclaimedRewardForMetaKidz(_tokenIds[i]);\r\n        }\r\n\r\n        return totalUnclaimedRewards;\r\n    }\r\n\r\n    function getUnclaimedRewardsAmountForMetaKidzPA(uint256[] calldata _tokenIds) public view returns (uint256) {\r\n\r\n        uint256 totalUnclaimedRewards = 0;\r\n\r\n        for(uint256 i = 0; i < _tokenIds.length; i++) {\r\n            totalUnclaimedRewards += computeUnclaimedRewardForMetaKidzPA(_tokenIds[i]);\r\n        }\r\n\r\n        return totalUnclaimedRewards;\r\n    }\r\n\r\n    function getUnclaimedRewardsAmountForMetaKidzGC(uint256[] calldata _tokenIds) public view returns (uint256) {\r\n\r\n        uint256 totalUnclaimedRewards = 0;\r\n\r\n        for(uint256 i = 0; i < _tokenIds.length; i++) {\r\n            totalUnclaimedRewards += computeUnclaimedRewardForMetaKidzGC(_tokenIds[i]);\r\n        }\r\n\r\n        return totalUnclaimedRewards;\r\n    }\r\n\r\n    function getTotalUnclaimedRewardsForMetaKidzContract() public view returns (uint256) {\r\n        uint256 totalUnclaimedRewards = 0;\r\n        uint256 totalSupply = iMetaKidz.totalSupply();\r\n\r\n        for(uint256 i = 0; i < totalSupply; i++) {\r\n            totalUnclaimedRewards += computeUnclaimedRewardForMetaKidz(i);\r\n        }\r\n\r\n        return totalUnclaimedRewards;\r\n    }\r\n\r\n    function getTotalUnclaimedRewardsForMetaKidzPAContract() public view returns (uint256) {\r\n        uint256 totalUnclaimedRewards = 0;\r\n        uint256 totalSupply = iMetaKidzPA.totalSupply();\r\n\r\n        for(uint256 i = 0; i < totalSupply; i++) {\r\n            totalUnclaimedRewards += computeUnclaimedRewardForMetaKidzPA(i);\r\n        }\r\n\r\n        return totalUnclaimedRewards;\r\n    }\r\n\r\n    function getTotalUnclaimedRewardsForMetaKidzGCContract() public view returns (uint256) {\r\n        uint256 totalUnclaimedRewards = 0;\r\n        uint256 totalSupply = iMetaKidzGC.totalSupply();\r\n\r\n        for(uint256 i = 0; i < totalSupply; i++) {\r\n            totalUnclaimedRewards += computeUnclaimedRewardForMetaKidzGC(i);\r\n        }\r\n\r\n        return totalUnclaimedRewards;\r\n    }\r\n\r\n    function getMetaKidzLastClaimedTime(uint256 _tokenId) public view returns (uint256) {\r\n\r\n        bytes32 lastClaimKey = keccak256(abi.encode(_tokenId));\r\n\r\n        return metaKidzLastClaim[lastClaimKey];\r\n    }\r\n\r\n    function getMetaKidzPALastClaimedTime(uint256 _tokenId) public view returns (uint256) {\r\n\r\n        bytes32 lastClaimKey = keccak256(abi.encode(_tokenId));\r\n\r\n        return metaKidzPALastClaim[lastClaimKey];\r\n    }\r\n\r\n    function getMetaKidzGCLastClaimedTime(uint256 _tokenId) public view returns (uint256) {\r\n\r\n        bytes32 lastClaimKey = keccak256(abi.encode(_tokenId));\r\n\r\n        return metaKidzGCLastClaim[lastClaimKey];\r\n    }\r\n\r\n    function computeAccumulatedReward(uint256 _lastClaimDate, uint256 _baseRate, uint256 currentTime) internal pure returns (uint256) {\r\n        require(currentTime > _lastClaimDate, \"Last claim date must be smaller than block timestamp\");\r\n\r\n        uint256 secondsElapsed = currentTime - _lastClaimDate;\r\n        uint256 accumulatedReward = secondsElapsed * _baseRate / 1 days;\r\n\r\n        return accumulatedReward;\r\n    }\r\n    function computeUnclaimedRewardForMetaKidz(uint256 _tokenId) internal view returns (uint256) {\r\n\r\n        // Will revert if tokenId does not exist\r\n        iMetaKidz.ownerOf(_tokenId);\r\n\r\n        // build the hash for lastClaim based on contractAddress and tokenId\r\n        bytes32 lastClaimKey = keccak256(abi.encode(_tokenId));\r\n        uint256 lastClaimDate = metaKidzLastClaim[lastClaimKey];\r\n        uint256 baseRate = metaKidzContractSettings.baseRate;\r\n\r\n        // if there has been a lastClaim, compute the value since lastClaim\r\n        if (lastClaimDate != uint256(0)) {\r\n            return computeAccumulatedReward(lastClaimDate, baseRate, block.timestamp);\r\n        }\r\n        \r\n        else {\r\n            // if there has not been a lastClaim, add the initIssuance + computed value since contract startDate\r\n            uint256 totalReward = computeAccumulatedReward(metaKidzContractSettings.start, baseRate, block.timestamp);\r\n\r\n            return totalReward;\r\n        }\r\n    }\r\n\r\n    function computeUnclaimedRewardForMetaKidzPA(uint256 _tokenId) internal view returns (uint256) {\r\n\r\n        // Will revert if tokenId does not exist\r\n        iMetaKidzPA.ownerOf(_tokenId);\r\n\r\n        // build the hash for lastClaim based on contractAddress and tokenId\r\n        bytes32 lastClaimKey = keccak256(abi.encode(_tokenId));\r\n        uint256 lastClaimDate = metaKidzPALastClaim[lastClaimKey];\r\n        uint256 baseRate = metaKidzPAContractSettings.baseRate;\r\n\r\n        // if there has been a lastClaim, compute the value since lastClaim\r\n        if (lastClaimDate != uint256(0)) {\r\n            return computeAccumulatedReward(lastClaimDate, baseRate, block.timestamp);\r\n        }\r\n        \r\n        else {\r\n            // if there has not been a lastClaim, add the initIssuance + computed value since contract startDate\r\n            uint256 totalReward = computeAccumulatedReward(metaKidzPAContractSettings.start, baseRate, block.timestamp);\r\n\r\n            return totalReward;\r\n        }\r\n    }\r\n\r\n    function computeUnclaimedRewardForMetaKidzGC(uint256 _tokenId) internal view returns (uint256) {\r\n\r\n        // Will revert if tokenId does not exist\r\n        iMetaKidzGC.ownerOf(_tokenId);\r\n\r\n        // build the hash for lastClaim based on contractAddress and tokenId\r\n        bytes32 lastClaimKey = keccak256(abi.encode(_tokenId));\r\n        uint256 lastClaimDate = metaKidzGCLastClaim[lastClaimKey];\r\n        uint256 baseRate = metaKidzGCContractSettings.baseRate;\r\n\r\n        // if there has been a lastClaim, compute the value since lastClaim\r\n        if (lastClaimDate != uint256(0)) {\r\n            return computeAccumulatedReward(lastClaimDate, baseRate, block.timestamp);\r\n        }\r\n        \r\n        else {\r\n            // if there has not been a lastClaim, add the initIssuance + computed value since contract startDate\r\n            uint256 totalReward = computeAccumulatedReward(metaKidzGCContractSettings.start, baseRate, block.timestamp);\r\n\r\n            return totalReward;\r\n        }\r\n    }\r\n    \r\n    function updateTimeForMetaKidzGC(uint256 _tokenId) external {\r\n        require(msg.sender == address(iMetaKidzGC));\r\n        _tokenId = _tokenId-1;\r\n        bytes32 lastClaimKey = keccak256(abi.encode(_tokenId));\r\n        metaKidzGCLastClaim[lastClaimKey] = block.timestamp;\r\n    }\r\n\r\n    function updateTimeForMetaKidz(uint256 _tokenId) external {\r\n        require(msg.sender == address(iMetaKidz));\r\n        bytes32 lastClaimKey = keccak256(abi.encode(_tokenId));\r\n        metaKidzLastClaim[lastClaimKey] = block.timestamp;\r\n    }\r\n\r\n    function updateTimeForMetaKidzPA(uint256 _tokenId) external {\r\n        require(msg.sender == address(iMetaKidzPA));\r\n        bytes32 lastClaimKey = keccak256(abi.encode(_tokenId));\r\n        metaKidzPALastClaim[lastClaimKey] = block.timestamp;\r\n    }\r\n\r\n    function burn(address _from, uint256 _amount) external {\r\n\t\trequire(msg.sender == address(iMetaKidzE) || msg.sender == address(iMetaKidzPA));\r\n\t\t_burn(_from, _amount);\r\n\t}\r\n\t\r\n\tfunction setMetaKidzEAddress(address _metaKidzEAddress) public {\r\n        require(msg.sender == admin || msg.sender == owner(), \"Invalid sender\");\r\n\t    iMetaKidzE = IMetaKidz(_metaKidzEAddress);\r\n\t}\r\n    function setMetaKidzPAAddress(address _metaKidzPAAddress) public {\r\n        require(msg.sender == admin || msg.sender == owner(), \"Invalid sender\");\r\n\t    MetaKidzPAContractAddress = _metaKidzPAAddress;\r\n        iMetaKidzPA = IMetaKidz(_metaKidzPAAddress);\r\n\t}\r\n    function setMetaKidzAddress(address _metaKidzAddress) public {\r\n        require(msg.sender == admin || msg.sender == owner(), \"Invalid sender\");\r\n\t    MetaKidzContractAddress = _metaKidzAddress;\r\n        iMetaKidz =  IMetaKidz(_metaKidzAddress);\r\n\t}\r\n    function setMetaKidzGCAddress(address _metaKidzGCAddress) public {\r\n        require(msg.sender == admin || msg.sender == owner(), \"Invalid sender\");\r\n\t    MetaKidzGCContractAddress = _metaKidzGCAddress;\r\n        iMetaKidzGC =  IMetaKidz(_metaKidzGCAddress);\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_metaKidzAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_metaKidzPAAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_metaKidzGCAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_metaKidzBaseRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_metaKidzPABaseRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_metaKidzGCBaseRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MetaKidzContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MetaKidzGCContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MetaKidzPAContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_metaKidzTokenId\",\"type\":\"uint256\"}],\"name\":\"claimRewardForMetaKidz\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_metaKidzGCTokenId\",\"type\":\"uint256\"}],\"name\":\"claimRewardForMetaKidzGC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_metaKidzPATokenId\",\"type\":\"uint256\"}],\"name\":\"claimRewardForMetaKidzPA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_metaKidzTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimRewardsForMetaKidz\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_metaKidzGCTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimRewardsForMetaKidzGC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_metaKidzPATokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimRewardsForMetaKidzPA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getMetaKidzGCLastClaimedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getMetaKidzLastClaimedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getMetaKidzPALastClaimedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalUnclaimedRewardsForMetaKidzContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalUnclaimedRewardsForMetaKidzGCContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalUnclaimedRewardsForMetaKidzPAContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getUnclaimedRewardAmountForMetaKidz\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getUnclaimedRewardAmountForMetaKidzGC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getUnclaimedRewardAmountForMetaKidzPA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getUnclaimedRewardsAmountForMetaKidz\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getUnclaimedRewardsAmountForMetaKidzGC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getUnclaimedRewardsAmountForMetaKidzPA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iMetaKidz\",\"outputs\":[{\"internalType\":\"contract IMetaKidz\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iMetaKidzE\",\"outputs\":[{\"internalType\":\"contract IMetaKidz\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iMetaKidzGC\",\"outputs\":[{\"internalType\":\"contract IMetaKidz\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iMetaKidzPA\",\"outputs\":[{\"internalType\":\"contract IMetaKidz\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metaKidzContractSettings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metaKidzGCContractSettings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"metaKidzGCLastClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"metaKidzLastClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metaKidzPAContractSettings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"metaKidzPALastClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permanentlyLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_metaKidzAddress\",\"type\":\"address\"}],\"name\":\"setMetaKidzAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"setMetaKidzContractSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_metaKidzEAddress\",\"type\":\"address\"}],\"name\":\"setMetaKidzEAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_metaKidzGCAddress\",\"type\":\"address\"}],\"name\":\"setMetaKidzGCAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"setMetaKidzGCContractSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_metaKidzPAAddress\",\"type\":\"address\"}],\"name\":\"setMetaKidzPAAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"setMetaKidzPAContractSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"updateTimeForMetaKidz\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"updateTimeForMetaKidzGC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"updateTimeForMetaKidzPA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Metabits","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000dead000000000000000000000000000000000000000000000000000000000000dead000000000000000000000000626160bea9450bb87f95adffd8c2d8b185f48f8c00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000a","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://88fb6ed9fb5b33d434f50ba35a147a6b70206db2ca5c46ce9193074b9fab2c56"}]}