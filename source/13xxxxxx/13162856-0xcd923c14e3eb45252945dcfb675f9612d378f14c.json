{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-08-27\r\n */\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC165, IERC165)\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            owner != address(0),\r\n            \"ERC721: balance query for the zero address\"\r\n        );\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (address)\r\n    {\r\n        address owner = _owners[tokenId];\r\n        require(\r\n            owner != address(0),\r\n            \"ERC721: owner query for nonexistent token\"\r\n        );\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n\r\n        string memory baseURI = _baseURI();\r\n        return\r\n            bytes(baseURI).length > 0\r\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\r\n                : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (address)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721: approved query for nonexistent token\"\r\n        );\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved)\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(\r\n            _isApprovedOrOwner(_msgSender(), tokenId),\r\n            \"ERC721: transfer caller is not owner nor approved\"\r\n        );\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(\r\n            _isApprovedOrOwner(_msgSender(), tokenId),\r\n            \"ERC721: transfer caller is not owner nor approved\"\r\n        );\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(from, to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\r\n        internal\r\n        view\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721: operator query for nonexistent token\"\r\n        );\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner ||\r\n            getApproved(tokenId) == spender ||\r\n            isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(\r\n            ERC721.ownerOf(tokenId) == from,\r\n            \"ERC721: transfer of token that is not own\"\r\n        );\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try\r\n                IERC721Receiver(to).onERC721Received(\r\n                    _msgSender(),\r\n                    from,\r\n                    tokenId,\r\n                    _data\r\n                )\r\n            returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\r\n                        \"ERC721: transfer to non ERC721Receiver implementer\"\r\n                    );\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index)\r\n        external\r\n        view\r\n        returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(IERC165, ERC721)\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IERC721Enumerable).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            index < ERC721.balanceOf(owner),\r\n            \"ERC721Enumerable: owner index out of bounds\"\r\n        );\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            index < ERC721Enumerable.totalSupply(),\r\n            \"ERC721Enumerable: global index out of bounds\"\r\n        );\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId)\r\n        private\r\n    {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\ncontract Gods is ERC721Enumerable, ReentrancyGuard, Ownable {\r\n    ERC721 lootContract = ERC721(0xFF9C1b15B16263C61d017ee9F65C50e4AE0113D7);\r\n    ERC721 xLootContract = ERC721(0x8bf2f876E2dCD2CAe9C3d272f325776c82DA366d);\r\n    ERC721 pLootContract = ERC721(0x03Ea00B0619e19759eE7ba33E8EB8E914fbF52Ea);\r\n    ERC721 bLootContract = ERC721(0x4F8730E0b32B04beaa5757e5aea3aeF970E5B613);\r\n    \r\n    mapping(address => uint256) public _claimTimes;\r\n\r\n    uint256 public maxSupply = 12000;\r\n    uint256 public currentSupply = 0;\r\n\r\n    uint256 public publicPrice = 30000000000000000; // 0.03 ETH\r\n\r\n    string[] private types = [\r\n        \"Kogdrolath\",\r\n        \"Saggon\",\r\n        \"Dogthekuz\",\r\n        \"Brallmozuud\",\r\n        \"Thur'aran\",\r\n        \"Qharmos, God Of Fall\",\r\n        \"Yreus, God Of The Land\",\r\n        \"Edur, God Of Battle\",\r\n        \"Oher, God Of The Moon\",\r\n        \"Duthos, God Of Law\",\r\n        \"Hypericum\",\r\n        \"Aubretia\",\r\n        \"Antirrhinum\",\r\n        \"Amaranthus\",\r\n        \"Tithonia\",\r\n        \"Yalvina (Yellow-Green)\",\r\n        \"Lavandula\",\r\n        \"Jaborosa\",\r\n        \"Statice\",\r\n        \"Lunaria\",\r\n        \"Mirno\",\r\n        \"Zarna\",\r\n        \"Dheombas\",\r\n        \"Shaetha\",\r\n        \"Zhoermof\",\r\n        \"Groednas\",\r\n        \"Yrida\",\r\n        \"Staenofeth\",\r\n        \"Esthesi\",\r\n        \"Stytredi\",\r\n        \"Thiteas\",\r\n        \"Hephethon\",\r\n        \"Caselaus\",\r\n        \"Basyx\",\r\n        \"Thanios\",\r\n        \"Herasos\",\r\n        \"Thelamamas\",\r\n        \"Oediphippus\",\r\n        \"Ancyptus\",\r\n        \"Brasalus\",\r\n        \"Forseti\",\r\n        \"Od\",\r\n        \"Vili\",\r\n        \"Mani\",\r\n        \"Hanir\",\r\n        \"Narvi\",\r\n        \"Mimir\",\r\n        \"Gangnrad\",\r\n        \"Fafnir\",\r\n        \"Hod\",\r\n        \"Arkoriku\",\r\n        \"Abreare\",\r\n        \"Wiresil\",\r\n        \"Kokia\",\r\n        \"Gyameah\",\r\n        \"Gyamisra\",\r\n        \"Yebei\",\r\n        \"Agyarim\",\r\n        \"Donkoon\",\r\n        \"Dufaomansah\",\r\n        \"Zazlu\",\r\n        \"Uggi\",\r\n        \"Hemdos\",\r\n        \"Emyuan\",\r\n        \"Gonyis\",\r\n        \"Oonloldum\",\r\n        \"Yohnongeh\",\r\n        \"Nunshiufid\",\r\n        \"Gannindro\",\r\n        \"Yoabbengoh\",\r\n        \"Meqosh The Gracious\",\r\n        \"Nazaif The Sane\",\r\n        \"Zutid The Royal\",\r\n        \"Genim The Courageous\",\r\n        \"Nenqu The Spectacular\",\r\n        \"Nekid The Gracious\",\r\n        \"Kidurhosh The Spectacular\",\r\n        \"Sashabuaz The Joyful\",\r\n        \"Missootoz The Enlightened\",\r\n        \"Rozishaf The Fortunate\",\r\n        \"Hebar\",\r\n        \"Dashmo\",\r\n        \"Kusvad\",\r\n        \"Nahus\",\r\n        \"Shavityant\",\r\n        \"Cejartet\",\r\n        \"Ulmathye\",\r\n        \"Beshmuptus\",\r\n        \"Kebhuptihas\",\r\n        \"Akadarmus\",\r\n        \"Agara\",\r\n        \"Gedis\",\r\n        \"Eyva\",\r\n        \"Skovif\",\r\n        \"Bryleif\",\r\n        \"Valdr\",\r\n        \"Hjodne\",\r\n        \"Orja\",\r\n        \"Thrist\",\r\n        \"Rongrior\",\r\n        \"Chine, The Gifted\",\r\n        \"Kathig, The Young One\",\r\n        \"Mimbiad, The Gentle\",\r\n        \"Mandaynth, Destroyer Of Life\",\r\n        \"Qezzun, Lord Of Ice\",\r\n        \"Reghe, Braveheart\",\r\n        \"Argiss, The Dark\",\r\n        \"Qyphath, The Life Giver\",\r\n        \"Batu, The Dead\",\r\n        \"Chyrse, The Tiran\",\r\n        \"Devoss, The Gifted\",\r\n        \"Sarmut, The Powerful\",\r\n        \"Chighintyss, The Calm\",\r\n        \"Edaerris, The White One\",\r\n        \"Pissoles, The Mysterious\",\r\n        \"Nyrtrix, Goddess Of The Sea\",\r\n        \"Dreuna, Goddess Of Governance\",\r\n        \"Kyvneas, Goddess Of Oracles\",\r\n        \"Grahena, Goddess Of Miracles\",\r\n        \"Ehnera, Goddess Of Riddles\",\r\n        \"Kinja, Goddess Of The Moon\",\r\n        \"Imotl, Goddess Of Oracles\",\r\n        \"Myvuna, Goddess Of Sleep\",\r\n        \"Qandea, Goddess Of Poetry\",\r\n        \"Arena, Goddess Of Chivalry\",\r\n        \"Sareash\",\r\n        \"Jehudiel\",\r\n        \"Rachmiel\",\r\n        \"Morael\",\r\n        \"Sandolphon\",\r\n        \"Silrgua\",\r\n        \"Kelci\",\r\n        \"Pabilrgaups\",\r\n        \"Tagalpuen\",\r\n        \"Yolreirn\",\r\n        \"Treiberus\",\r\n        \"Crudusa\",\r\n        \"Shaotorog\",\r\n        \"Kuabihc\",\r\n        \"Jeamall\",\r\n        \"Sunbeam\",\r\n        \"Sunny\",\r\n        \"Glaze\",\r\n        \"Soar\",\r\n        \"Beacon\",\r\n        \"Ember\",\r\n        \"Deja\",\r\n        \"Sunbeam\",\r\n        \"Surge\",\r\n        \"Fume\",\r\n        \"Daocnox\",\r\n        \"Z'ignn'thirh\",\r\n        \"Bhejhass\",\r\n        \"Traarr'tho\",\r\n        \"Kthyzhu\",\r\n        \"Yicxiozt'kra\",\r\n        \"Ithiodho\",\r\n        \"Egadh'kre\",\r\n        \"Ov'aolthod\",\r\n        \"Izuld'itra\",\r\n        \"Lokapala\",\r\n        \"Jambhala\",\r\n        \"Yogambara\",\r\n        \"Tenma goddess\",\r\n        \"Pehar Gyalpo\",\r\n        \"Kumbhanda\",\r\n        \"Yamari\",\r\n        \"Mahoraga\",\r\n        \"Naga\",\r\n        \"Kinnara\",\r\n        \"Morrigan\",\r\n        \"Ler\",\r\n        \"Bran\",\r\n        \"Parthalan\",\r\n        \"Deirdre\",\r\n        \"Labraid\",\r\n        \"Danu\",\r\n        \"Aodhan\",\r\n        \"Rosmerta\",\r\n        \"Dagda\",\r\n        \"Ao Jun\",\r\n        \"Baoxi\",\r\n        \"Taishan Queen\",\r\n        \"TaiYi\",\r\n        \"YangJian\",\r\n        \"ZhangTianShi\",\r\n        \"Emperor Shun\",\r\n        \"Jade Emperor\",\r\n        \"TaiShang LaoJun\",\r\n        \"GuanYin\",\r\n        \"Nephthys\",\r\n        \"Apep\",\r\n        \"Hathor\",\r\n        \"Heka\",\r\n        \"Fetket\",\r\n        \"Unut\",\r\n        \"Kauket\",\r\n        \"Ihy\",\r\n        \"Re\",\r\n        \"Amun\",\r\n        \"Tsuki Yumi\",\r\n        \"Takemikadzuchi\",\r\n        \"Takami Musubi\",\r\n        \"Susanowa\",\r\n        \"Marisha Ten\",\r\n        \"Naka Yama Tsui Mi\",\r\n        \"Fudo\",\r\n        \"Shichi Fujukin\",\r\n        \"Ika Zuchi No Kami\",\r\n        \"Yamato\",\r\n        \"Funzi\",\r\n        \"Mamba Muntu\",\r\n        \"Mbantilanda\",\r\n        \"God of river Nzadi\",\r\n        \"Na Ngutu\",\r\n        \"Simbi dia Maza\",\r\n        \"Nzumbi\",\r\n        \"Nzambi a Mpungu\",\r\n        \"Mpulu Bunzi\",\r\n        \"Lusiemo\",\r\n        \"Haya\",\r\n        \"Ereshkigal\",\r\n        \"Nanaya\",\r\n        \"Zababa\",\r\n        \"Inanna Ishtar\",\r\n        \"Utu Shamash\",\r\n        \"Nabu\",\r\n        \"Marduk\",\r\n        \"An\",\r\n        \"Amashilama\",\r\n        \"Azaka Medeh\",\r\n        \"Boli Shah\",\r\n        \"Guede L'Orage\",\r\n        \"Rada lwa\",\r\n        \"Papa Legba\",\r\n        \"Diejuste\",\r\n        \"Captain Debas\",\r\n        \"Bossou Ashadeh\",\r\n        \"Guede-Double\",\r\n        \"Ti Jean Petro\"\r\n    ];\r\n\r\n    string[] private personalities = [\r\n        \"Moral\",\r\n        \"Efficient\",\r\n        \"Dedicated\",\r\n        \"Sociable\",\r\n        \"Contemplative\",\r\n        \"Sweet\",\r\n        \"Careful\",\r\n        \"Warm-Hearted\",\r\n        \"Loyal\",\r\n        \"Charming\",\r\n        \"Charismatic\",\r\n        \"Reflective\",\r\n        \"Benevolent\",\r\n        \"Confident\",\r\n        \"Relaxed\",\r\n        \"Flexible\",\r\n        \"Stable\",\r\n        \"Insightful\",\r\n        \"Principled\",\r\n        \"Wild Card\",\r\n        \"Overzealous\",\r\n        \"Naive\",\r\n        \"Hero Syndrome\",\r\n        \"Sore Winner\",\r\n        \"Manipulative\",\r\n        \"Selfish\",\r\n        \"Ignorant\",\r\n        \"Slimeball\",\r\n        \"Crude\",\r\n        \"Elegant\",\r\n        \"Skillful\",\r\n        \"Lovable\",\r\n        \"Orderly\",\r\n        \"Helpful\",\r\n        \"Independent\",\r\n        \"Sympathetic\",\r\n        \"Cooperative\",\r\n        \"Predictable\",\r\n        \"Timid\",\r\n        \"Nosey\",\r\n        \"Bad Listener\",\r\n        \"Disorderly\",\r\n        \"Obsessive\",\r\n        \"Paranoid\",\r\n        \"Narrow-Minded\",\r\n        \"Peevish\",\r\n        \"Blunt\",\r\n        \"Single-Minded\",\r\n        \"Spineless\",\r\n        \"Cheap\",\r\n        \"Invisible\",\r\n        \"Gluttonous\",\r\n        \"Weak\",\r\n        \"Responsive\",\r\n        \"Self-Critical\",\r\n        \"Adventurous\",\r\n        \"Responsible\",\r\n        \"Capable\",\r\n        \"Innovative\",\r\n        \"Friendly\",\r\n        \"Dependable\",\r\n        \"Perceptive\",\r\n        \"Cultured\",\r\n        \"Organized\",\r\n        \"Trustworthy\",\r\n        \"Faithful\",\r\n        \"Humble\",\r\n        \"Logical\",\r\n        \"Spiteful\",\r\n        \"Spoiled\",\r\n        \"Dubious\",\r\n        \"Extremist\",\r\n        \"Addictive Personality\",\r\n        \"Messy\",\r\n        \"Senile\",\r\n        \"Overly Picky\",\r\n        \"Power Drunk\",\r\n        \"Vindictive\",\r\n        \"Active\",\r\n        \"Observant\",\r\n        \"Critical Thinker\",\r\n        \"Intelligent\",\r\n        \"Tolerant\",\r\n        \"Alert\",\r\n        \"Dynamic\",\r\n        \"Imaginative\",\r\n        \"Careless\",\r\n        \"Reliable\",\r\n        \"Fair\",\r\n        \"Kind\",\r\n        \"Leaderly\",\r\n        \"Playful\",\r\n        \"Dignified\",\r\n        \"Calm\",\r\n        \"Directed\",\r\n        \"Daring\",\r\n        \"Attentive\",\r\n        \"Disciplined\",\r\n        \"Focused\",\r\n        \"Ambitious\",\r\n        \"Incorruptible\",\r\n        \"Self-Sufficient\",\r\n        \"Caring\",\r\n        \"Clean\",\r\n        \"Anticipative\",\r\n        \"Decent\",\r\n        \"Wise\",\r\n        \"Gracious\",\r\n        \"Understanding\",\r\n        \"Courageous\",\r\n        \"Appreciative\",\r\n        \"Heroic\",\r\n        \"Overambitious\",\r\n        \"Devious\",\r\n        \"Idiotic\",\r\n        \"Sore Loser\",\r\n        \"Shortsighted\",\r\n        \"Coward\",\r\n        \"Psychopathic\",\r\n        \"Rebellious\",\r\n        \"Judgmental\",\r\n        \"Corruptible\",\r\n        \"Brutally Honest\",\r\n        \"Hypocrite\",\r\n        \"Audacious\",\r\n        \"Bigot\",\r\n        \"Respectful\",\r\n        \"Realistic\",\r\n        \"Clever\",\r\n        \"Educated\",\r\n        \"Neat\",\r\n        \"Worldly\",\r\n        \"Erratic\",\r\n        \"Abusive\",\r\n        \"Conceited\",\r\n        \"Greedy\",\r\n        \"Without Direction\",\r\n        \"Envious\",\r\n        \"Resentful\",\r\n        \"Overly Shy\",\r\n        \"Entitled\",\r\n        \"Prankster\",\r\n        \"Reliant\",\r\n        \"Adaptable\",\r\n        \"Decisive\",\r\n        \"Discreet\",\r\n        \"Good Listener\",\r\n        \"Balanced\",\r\n        \"Deceitful\",\r\n        \"Anxious\",\r\n        \"Bigmouth\",\r\n        \"Untrustworthy\",\r\n        \"Overly Competitive\",\r\n        \"Prejudiced\",\r\n        \"Remorseless\",\r\n        \"Fraudulent\",\r\n        \"Sly\",\r\n        \"Shallow\",\r\n        \"Blindly Obedient\",\r\n        \"Immature\",\r\n        \"Athletic\",\r\n        \"Curious\",\r\n        \"Interesting\",\r\n        \"Sober\",\r\n        \"Enthusiastic\",\r\n        \"Self-Reliant\",\r\n        \"Agreeable\",\r\n        \"Peaceful\",\r\n        \"Attention Seeker\",\r\n        \"Shut-In\",\r\n        \"Authoritarian\",\r\n        \"Hedonistic\",\r\n        \"Childish\",\r\n        \"Meddlesome\",\r\n        \"Petty\",\r\n        \"Intolerant\",\r\n        \"Disloyal\",\r\n        \"Attention Deficit\",\r\n        \"Slacker\",\r\n        \"Control Freak\",\r\n        \"Antisocial\",\r\n        \"Procrastinator\",\r\n        \"Dull\",\r\n        \"Lazy\",\r\n        \"Demanding\",\r\n        \"Weak-Willed\",\r\n        \"Indifferent\",\r\n        \"Vain\",\r\n        \"Neat Freak\",\r\n        \"Disorganized\",\r\n        \"Dishonest\",\r\n        \"Sarcastic\",\r\n        \"Insensitive\",\r\n        \"Unlucky\",\r\n        \"Overconfident\",\r\n        \"Forgetful\",\r\n        \"Stupid\",\r\n        \"Asocial\",\r\n        \"Superstitious\",\r\n        \"Dumb\"\r\n    ];\r\n\r\n    string[] private attitudes = [\"lawful\", \"neutral\", \"chaotic\"];\r\n\r\n    string[] private shrines = [\r\n        \"Amusement Parks\",\r\n        \"Antique Store\",\r\n        \"Arcade\",\r\n        \"Asylum\",\r\n        \"Bakery\",\r\n        \"Bank\",\r\n        \"Battle Arenas\",\r\n        \"Beach\",\r\n        \"Blacksmith\",\r\n        \"Bookstore\",\r\n        \"Brewery\",\r\n        \"Bridge\",\r\n        \"Cafe\",\r\n        \"Camp\",\r\n        \"Casino\",\r\n        \"Castle\",\r\n        \"Cave\",\r\n        \"Circus\",\r\n        \"City\",\r\n        \"City District\",\r\n        \"Civilization\",\r\n        \"Cliff\",\r\n        \"Company\",\r\n        \"Continent\",\r\n        \"Coral Reef\",\r\n        \"Country\",\r\n        \"Craft Store\",\r\n        \"Dating Agency\",\r\n        \"Day Care\",\r\n        \"Desert\",\r\n        \"Dimension\",\r\n        \"Dungeon\",\r\n        \"Farm\",\r\n        \"Film Studio\",\r\n        \"Fire Land\",\r\n        \"Forest\",\r\n        \"Galaxy\",\r\n        \"Game Studio\",\r\n        \"Glacier\",\r\n        \"Grassland\",\r\n        \"Graveyard\",\r\n        \"Harbor\",\r\n        \"Headquarters\",\r\n        \"Hideout\",\r\n        \"Hospital\",\r\n        \"Hotel\",\r\n        \"Island\",\r\n        \"Isthmus\",\r\n        \"Jungle\",\r\n        \"Kingdom\",\r\n        \"Laboratory\",\r\n        \"Lake\",\r\n        \"Library\",\r\n        \"Lighthouse\",\r\n        \"Mage Tower\",\r\n        \"Magic School\",\r\n        \"Magic Shop\",\r\n        \"Mansion\",\r\n        \"Mill\",\r\n        \"Mining Company\",\r\n        \"Mountain\",\r\n        \"Museum\",\r\n        \"Nebula\",\r\n        \"Nightclub\",\r\n        \"Norse World\",\r\n        \"Oasis\",\r\n        \"Ocean\",\r\n        \"Orphanage\",\r\n        \"Outpost\",\r\n        \"Park\",\r\n        \"Pet Business\",\r\n        \"Pirate Cove\",\r\n        \"Pizzeria\",\r\n        \"Planet\",\r\n        \"Plantation\",\r\n        \"Plaza\",\r\n        \"Prison\",\r\n        \"Quasar\",\r\n        \"Realm\",\r\n        \"Restaurant\",\r\n        \"River\",\r\n        \"Road\",\r\n        \"Ruin\",\r\n        \"School\",\r\n        \"Shop\",\r\n        \"Sky Island\",\r\n        \"Snowland\",\r\n        \"Spa\",\r\n        \"Space Station\",\r\n        \"Stadium\",\r\n        \"Star\",\r\n        \"Steampunk House\",\r\n        \"Street\",\r\n        \"Swamp\",\r\n        \"Tattoo Parlors\",\r\n        \"Tavern\",\r\n        \"Temple\",\r\n        \"Theater\",\r\n        \"Tower\",\r\n        \"Void\"\r\n    ];\r\n\r\n    string[] private commandments = [\r\n        \"You shall not censor opposing opinions.\",\r\n        \"You shall not be lazy.\",\r\n        \"You shall give to charity what you can spare.\",\r\n        \"You shall seek your place as a child of god.\",\r\n        \"You shall not spread lies or rumors.\",\r\n        \"You shall not act without care.\",\r\n        \"You shall strife for a life in harmony with all.\",\r\n        \"You shall not create idols.\",\r\n        \"You shall not boast about your achievements.\",\r\n        \"You shall speak falsehoods.\",\r\n        \"You shall not desert those who count on you.\",\r\n        \"You shall care for your family.\",\r\n        \"You shall not stray from the true path.\",\r\n        \"You shall be tolerant and accepting.\",\r\n        \"You shall stimulate creativity and curiosity.\",\r\n        \"You shall reward the laziness of others.\",\r\n        \"You shall persevere and be rewarded.\",\r\n        \"You shall live fully in the here and now.\",\r\n        \"You shall love others like you love god.\",\r\n        \"You shall be considerate of others well being.\",\r\n        \"You shall abide by the law.\",\r\n        \"You shall honor the faith.\",\r\n        \"You shall live life humbly.\",\r\n        \"You shall offer your service to those in need.\",\r\n        \"You shall not cheat.\",\r\n        \"You shall take responsibility for your actions.\",\r\n        \"You shall believe in no other gods.\",\r\n        \"You shall pray to me on the seventh day.\",\r\n        \"You shall take responsibility for your mistakes.\",\r\n        \"You shall not make sacrifices.\",\r\n        \"You shall help your neighbor.\",\r\n        \"You shall not take any life.\",\r\n        \"You shall treat strangers with kindness.\",\r\n        \"You shall trust in god above all else.\",\r\n        \"ou shall do your duty.\",\r\n        \"You shall not indulge in gluttony.\",\r\n        \"You shall not forge the word of god.\",\r\n        \"You shall not desire more than your fair share.\",\r\n        \"You shall spread my word.\",\r\n        \"You shall honor your elders.\",\r\n        \"You shall ask god for forgiveness for your sins.\",\r\n        \"You shall love your neighbor.\",\r\n        \"You shall do your duty.\",\r\n        \"You shall not betray others, yourself or god.\",\r\n        \"You shall not question god or god's word.\",\r\n        \"You shall not give into lusts.\",\r\n        \"You shall not take life for granted.\",\r\n        \"You shall not unleash your angers onto others.\",\r\n        \"You shall love your country.\",\r\n        \"You shall take only that which is given.\",\r\n        \"You shall not live a life of vanity.\",\r\n        \"You shall love your children unconditionally.\",\r\n        \"You shall not act with hatred in your heart.\",\r\n        \"You shall repay kindness with kindness.\",\r\n        \"You shall work for a world in balance.\",\r\n        \"You shall be united or seek unity if there is none.\",\r\n        \"You shall not use or think of people as property.\",\r\n        \"You shall not abuse power in any form.\",\r\n        \"You shall not act in anger.\",\r\n        \"You shall ask only fair prices for what you produce.\",\r\n        \"You shall not let fear overtake your judgment.\",\r\n        \"You shall not incite violence.\",\r\n        \"You shall not break promises.\",\r\n        \"You shall honor your parents.\",\r\n        \"You shall encourage others who follow the path of god.\",\r\n        \"You shall hold faith.\",\r\n        \"You shall spread laughter where possible.\",\r\n        \"You shall care for children orphaned by misfortune.\",\r\n        \"You shall be considerate of others feelings.\",\r\n        \"You shall be brave in the face of danger.\",\r\n        \"You shall not murder.\",\r\n        \"You shall seek to understand that which you do not.\",\r\n        \"You shall not act cruel toward any life.\",\r\n        \"You shall be proud only of others.\",\r\n        \"You shall not betray your family.\",\r\n        \"You shall work hard and spend wisely.\",\r\n        \"You shall not desire other's possessions.\",\r\n        \"You shall not steal.\",\r\n        \"You shall uphold order and peace in god's world.\",\r\n        \"You shall strife for excellence.\",\r\n        \"You shall detach yourself from dark desires.\",\r\n        \"You shall follow only the light.\",\r\n        \"You shall not muddle your mind with any substances.\",\r\n        \"You shall look after your mind and body.\",\r\n        \"You shall not cause chaos or mayhem.\",\r\n        \"You shall offer a meal to hungry strangers.\",\r\n        \"You shall seek out your place in the world.\",\r\n        \"You shall be sincere to all.\",\r\n        \"You shall not take my name in vain.\",\r\n        \"You shall never harm an animal.\",\r\n        \"You shall not dwell on the past.\",\r\n        \"You shall not worship false idols.\",\r\n        \"You shall be truthful.\",\r\n        \"You shall show compassion and mercy.\",\r\n        \"You shall never harm a child.\",\r\n        \"You shall be content when life is good.\",\r\n        \"You shall not lust after another.\",\r\n        \"You shall help those in need.\",\r\n        \"You shall not give into pride.\",\r\n        \"You shall prove your worth every day.\"\r\n    ];\r\n\r\n    string[] private enchantments = [\r\n        \"Token of Dangers\",\r\n        \"Chant of Mana Restoration\",\r\n        \"Oath of Delight\",\r\n        \"Titanic Mantra of Domination\",\r\n        \"Enhanced Enchantment of Spells\",\r\n        \"Immortal Blessing of Binding\",\r\n        \"Supreme Breath of Stealth\",\r\n        \"Infusion of Supreme Magic\",\r\n        \"Favor of Light Slaughter\",\r\n        \"Pledge of Elite Glee\",\r\n        \"Secrets of the Night\",\r\n        \"Pledge of Suffering\",\r\n        \"Favor of Dusk\",\r\n        \"Enhanced Mark of Ghosts\",\r\n        \"Prime Symbol of the Ward\",\r\n        \"Elite Oath of Distress\",\r\n        \"Glorious Secrets of Feather Falling\",\r\n        \"Attunement of Glorious Soulmending\",\r\n        \"Chant of Mythic Loot\",\r\n        \"Enchantment of Mythic Determination\",\r\n        \"Spark of Sight\",\r\n        \"Mark of the Prince\",\r\n        \"Enchantment of Delirium\",\r\n        \"Major Oath of Cataclysms\",\r\n        \"Strengthened Tribute of Understanding\",\r\n        \"Supreme Symbol of Creation\",\r\n        \"Prime Aspect of the Isles\",\r\n        \"Infusion of Mighty Fire\",\r\n        \"Charge of Brilliant Soulstealing\",\r\n        \"Token of Minor Lost Souls\",\r\n        \"Charge of Potency\",\r\n        \"Aura of the Cataclysm\",\r\n        \"Infusion of Striking\",\r\n        \"Titanic Seal of Conjuring\",\r\n        \"Light Core of Lifestealing\",\r\n        \"Advanced Aspect of Frost\",\r\n        \"Mighty Mantra of Combat\",\r\n        \"Mark of Impeccable Conjurations\",\r\n        \"Blessing of Increased Trust\",\r\n        \"Gift of Renewed Fog\",\r\n        \"Seal of Hellfire\",\r\n        \"Symbol of the Princess\",\r\n        \"Hymn of Soulstealing\",\r\n        \"Immortal Bond of Dexterity\",\r\n        \"Bolstered Order of Bravery\",\r\n        \"Bond of the Lion\",\r\n        \"Attunement of Lavawalking\",\r\n        \"Blessing of Mythic Gluttony\",\r\n        \"Blessing of Superior Adaptability\",\r\n        \"Seed of Lesser Multistrike\",\r\n        \"Blessing of Kings\",\r\n        \"Brand of the Queen\",\r\n        \"Crux of War\",\r\n        \"Enhanced Whisper of Magic\",\r\n        \"Bolstered Curse of the King\",\r\n        \"Mighty Crux of Anguish\",\r\n        \"Colossal Spark of Ghostly Essences\",\r\n        \"Symbol of Light Understanding\",\r\n        \"Attunement of Immortal Delight\",\r\n        \"Seed of Supreme Dodging\",\r\n        \"Charge of Executions\",\r\n        \"Aura of Dark Magic\",\r\n        \"Oath of Laughter\",\r\n        \"Supreme Word of the Void\",\r\n        \"Mystic Emblem of Assaults\",\r\n        \"Light Curse of Vengeance\",\r\n        \"Glorious Aspect of Animalistic Cunning\",\r\n        \"Mark of Toughened Barriers\",\r\n        \"Blessing of Titanic Balance\",\r\n        \"Pledge of Mystic Poison\",\r\n        \"Pledge of the River\",\r\n        \"Hymn of Anger\",\r\n        \"Breath of Guards\",\r\n        \"Vampiric Aura of Hellfire\",\r\n        \"Impeccable Blessing of Might\",\r\n        \"Reinforced Boon of Force\",\r\n        \"Vicious Curse of the Hunter\",\r\n        \"Grace of Vampiric Moonlight\",\r\n        \"Blessing of Fortified Potency\",\r\n        \"Word of Bolstered Attack\",\r\n        \"Oath of Treasures\",\r\n        \"Attunement of Spells\",\r\n        \"Crest of Diplomacies\",\r\n        \"Superior Order of Hostility\",\r\n        \"Mystic Order of Adventure\",\r\n        \"Impeccable Core of the Scourge\",\r\n        \"Elite Breath of Pain\",\r\n        \"Infusion of Greater Relief\",\r\n        \"Vow of Colossal Loss\",\r\n        \"Seal of Immortal Subtlety\",\r\n        \"Attunement of Disgust\",\r\n        \"Blessing of Attack\",\r\n        \"Pledge of Greed\",\r\n        \"Strengthened Miracle of the Armageddon\",\r\n        \"Enhanced Order of Renewal\",\r\n        \"Bond of Focus\",\r\n        \"Mystic Chant of Suffering\",\r\n        \"Grace of Glorious Dreams\",\r\n        \"Whisper of Vicious Trickery\",\r\n        \"Infusion of Increased Conjurations\",\r\n        \"Seed of Worship\",\r\n        \"Grace of Dreams\",\r\n        \"Crest of Delirium\",\r\n        \"Light Pledge of Ice\",\r\n        \"Brilliant Mark of Demons\",\r\n        \"Reinforced Charge of Clarity\",\r\n        \"Impeccable Seed of Delight\",\r\n        \"Favor of Glorious Misfortune\",\r\n        \"Miracle of Bolstered Sight\",\r\n        \"Infusion of Exceptional Striking\",\r\n        \"Blessing of Pessimism\",\r\n        \"Grace of Preservation\",\r\n        \"Pledge of Catastrophes\",\r\n        \"Word of Conjurations\",\r\n        \"Mystic Gift of Awareness\",\r\n        \"Toughened Order of Paradise\",\r\n        \"Colossal Enchantment of Hot Tempers\",\r\n        \"Brand of Grand Combat\",\r\n        \"Chant of Advanced Spells\",\r\n        \"Pledge of Strengthened Misery\",\r\n        \"Word of the Day\",\r\n        \"Favor of Adventure\",\r\n        \"Oath of Twilight\",\r\n        \"Superior Word of Cataclysms\",\r\n        \"Immortal Breath of Witchcraft\",\r\n        \"Exceptional Pledge of Resilience\",\r\n        \"Enhanced Tribute of Preservation\",\r\n        \"Brand of Vampiric Cunning\",\r\n        \"Token of Reinforced Understanding\",\r\n        \"Symbol of Minor Smite\",\r\n        \"Gift of Greed\",\r\n        \"Mark of the End\",\r\n        \"Charge of Havoc\",\r\n        \"Mythic Hymn of Bravery\",\r\n        \"Immortal Infusion of Anger\",\r\n        \"Renewed Hymn of Crystal Barriers\",\r\n        \"Minor Token of Wealth\",\r\n        \"Gift of Light Hatred\",\r\n        \"Token of Exceptional Dark Magic\",\r\n        \"Miracle of Light Defiance\",\r\n        \"Secrets of Vengeance\",\r\n        \"Whisper of Conjurations\",\r\n        \"Secrets of Hell\",\r\n        \"Major Emblem of Pickpocketing\",\r\n        \"Colossal Emblem of Dodging\",\r\n        \"Fortified Seal of Mana\",\r\n        \"Grand Word of Loot\",\r\n        \"Seal of Mythic Mist\",\r\n        \"Whisper of Mortal Nightmares\",\r\n        \"Tribute of Mortal Hot Tempers\",\r\n        \"Miracle of Wealth\",\r\n        \"Chant of Dawn\",\r\n        \"Aspect of Oblivion\",\r\n        \"Glorious Oath of Dangers\",\r\n        \"Impeccable Enchantment of Titanic Bravery\",\r\n        \"Light Blessing of Silence\",\r\n        \"Glorious Charge of the Dragonborn\",\r\n        \"Bond of Mystic Destruction\",\r\n        \"Curse of Superior Duels\",\r\n        \"Boon of Light Lost Souls\",\r\n        \"Oath of Prayers\",\r\n        \"Whisper of Anger\",\r\n        \"Infusion of the Volcano\",\r\n        \"Reinforced Breath of Guards\",\r\n        \"Grand Blessing of the Eclipse\",\r\n        \"Mortal Emblem of Happiness\",\r\n        \"Supreme Hymn of Executions\",\r\n        \"Word of Exceptional Dangers\",\r\n        \"Secrets of Mighty Auras\",\r\n        \"Crux of Elite Health Absorption\",\r\n        \"Seal of Agility\",\r\n        \"Whisper of Shadows\",\r\n        \"Seed of Massacres\",\r\n        \"Immortal Brand of the Ward\",\r\n        \"Brilliant Pledge of Sunlight\",\r\n        \"Immortal Charge of Adventure\",\r\n        \"Fortified Chant of Gluttony\",\r\n        \"Blessing of Advanced Summoning\",\r\n        \"Gift of Mighty Loss\",\r\n        \"Aura of Light Smite\",\r\n        \"Miracle of Spirits\",\r\n        \"Token of the Fox\",\r\n        \"Mantra of Balance\",\r\n        \"Renewed Enchantment of the Swamp\",\r\n        \"Vampiric Grace of Affliction\",\r\n        \"Impeccable Vow of the Phoenix\",\r\n        \"Toughened Charge of Regeneration\",\r\n        \"Favor of Glorious Summoning\",\r\n        \"Spark of Reinforced Vigor\",\r\n        \"Favor of Mortal Oblivion\",\r\n        \"Vow of Precision\",\r\n        \"Vow of Spirits\",\r\n        \"Gift of Blast Protection\",\r\n        \"Vampiric Hymn of Dangers\",\r\n        \"Fortified Favor of Constitution\",\r\n        \"Increased Token of Versatility\",\r\n        \"Potent Tribute of Restoration\",\r\n        \"Gift of Prime Absorption\",\r\n        \"Tribute of Bolstered Silence\",\r\n        \"Whisper of Mystic War\"\r\n    ];\r\n\r\n    function random(string memory input) internal pure returns (uint256) {\r\n        return uint256(keccak256(abi.encodePacked(input)));\r\n    }\r\n\r\n    function getType(uint256 tokenId) public view returns (string memory) {\r\n        return pluck(tokenId, \"Type\", types);\r\n    }\r\n\r\n    function getPersonality(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (string memory)\r\n    {\r\n        return pluck(tokenId, \"Personality\", personalities);\r\n    }\r\n\r\n    function getAttitude(uint256 tokenId) public view returns (string memory) {\r\n        return pluck(tokenId, \"Attitude\", attitudes);\r\n    }\r\n\r\n    function getShrine(uint256 tokenId) public view returns (string memory) {\r\n        return pluck(tokenId, \"Shrine\", shrines);\r\n    }\r\n\r\n    function getCommandment(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (string memory)\r\n    {\r\n        return pluck(tokenId, \"Commandment\", commandments);\r\n    }\r\n\r\n    function getEnchantment(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (string memory)\r\n    {\r\n        return pluck(tokenId, \"Enchantment\", enchantments);\r\n    }\r\n\r\n    function pluck(\r\n        uint256 tokenId,\r\n        string memory keyPrefix,\r\n        string[] memory sourceArray\r\n    ) internal pure returns (string memory) {\r\n        uint256 rand = random(\r\n            string(abi.encodePacked(keyPrefix, toString(tokenId)))\r\n        );\r\n        string memory output = sourceArray[rand % sourceArray.length];\r\n        return output;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (string memory)\r\n    {\r\n        string[13] memory parts;\r\n        parts[\r\n            0\r\n        ] = '<svg xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 350 350\"><style>.base { fill: white; font-family: serif; font-size: 14px; }</style><rect width=\"100%\" height=\"100%\" fill=\"black\" /><text x=\"10\" y=\"20\" class=\"base\">';\r\n\r\n        parts[1] = getType(tokenId);\r\n\r\n        parts[2] = '</text><text x=\"10\" y=\"40\" class=\"base\">';\r\n\r\n        parts[3] = getPersonality(tokenId);\r\n\r\n        parts[4] = '</text><text x=\"10\" y=\"60\" class=\"base\">';\r\n\r\n        parts[5] = getAttitude(tokenId);\r\n\r\n        parts[6] = '</text><text x=\"10\" y=\"80\" class=\"base\">';\r\n\r\n        parts[7] = getShrine(tokenId);\r\n\r\n        parts[8] = '</text><text x=\"10\" y=\"100\" class=\"base\">';\r\n\r\n        parts[9] = getCommandment(tokenId);\r\n\r\n        parts[10] = '</text><text x=\"10\" y=\"120\" class=\"base\">';\r\n\r\n        parts[11] = getEnchantment(tokenId);\r\n\r\n        parts[12] = \"</text></svg>\";\r\n\r\n        string memory output = string(\r\n            abi.encodePacked(\r\n                parts[0],\r\n                parts[1],\r\n                parts[2],\r\n                parts[3],\r\n                parts[4],\r\n                parts[5],\r\n                parts[6]\r\n            )\r\n        );\r\n        output = string(\r\n            abi.encodePacked(\r\n                output,\r\n                parts[7],\r\n                parts[8],\r\n                parts[9],\r\n                parts[10],\r\n                parts[11],\r\n                parts[12]\r\n            )\r\n        );\r\n\r\n        string memory json = Base64.encode(\r\n            bytes(\r\n                string(\r\n                    abi.encodePacked(\r\n                        '{\"name\": \"Bag #',\r\n                        toString(tokenId),\r\n                        '\", \"description\": \"The spirit is imbued in everything. Endowed with faith, spirits are deified as god. Devoid of remembrance, gods are debased as spirits. Adventurers, with sword and magic, spread the faith for the true god and destroy the existence of the false!\", \"image\": \"data:image/svg+xml;base64,',\r\n                        Base64.encode(bytes(output)),\r\n                        '\"}'\r\n                    )\r\n                )\r\n            )\r\n        );\r\n        output = string(\r\n            abi.encodePacked(\"data:application/json;base64,\", json)\r\n        );\r\n\r\n        return output;\r\n    }\r\n\r\n    function claimWithLoot(uint256 lootId) public nonReentrant {\r\n        require(\r\n            lootContract.ownerOf(lootId) == msg.sender ||\r\n                xLootContract.ownerOf(lootId) == msg.sender ||\r\n                pLootContract.ownerOf(lootId) == msg.sender ||\r\n                bLootContract.ownerOf(lootId) == msg.sender,\r\n            \"This Loot is not owned by the minter\"\r\n        );\r\n        require(currentSupply < maxSupply, \"All mounts are minted\");\r\n        uint256 times = _claimTimes[msg.sender];\r\n        require(times < 1, \"invalid claim times\");\r\n\r\n        _safeMint(msg.sender, currentSupply);\r\n        _claimTimes[msg.sender] = ++times;\r\n        currentSupply += 1;\r\n    }\r\n\r\n    function claim() public payable nonReentrant {\r\n        require(publicPrice <= msg.value, \"Not enough Ether sent\");\r\n        require(currentSupply < maxSupply, \"All mounts are minted\");\r\n\r\n        _safeMint(msg.sender, currentSupply);\r\n        currentSupply += 1;\r\n    }\r\n\r\n    function ownerClaim(uint256 tokenId) public nonReentrant onlyOwner {\r\n        require(tokenId > 14000 && tokenId < 14201, \"Token ID invalid\");\r\n        _safeMint(owner(), tokenId);\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        payable(owner()).call{value: balance}(\"\");\r\n    }\r\n\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT license\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    constructor() ERC721(\"GODS\", \"GODS\") Ownable() {}\r\n}\r\n\r\n/// [MIT License]\r\n/// @title Base64\r\n/// @notice Provides a function for encoding some bytes in base64\r\n/// @author Brecht Devos <brecht@loopring.org>\r\nlibrary Base64 {\r\n    bytes internal constant TABLE =\r\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n    /// @notice Encodes some bytes to the base64 representation\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        uint256 len = data.length;\r\n        if (len == 0) return \"\";\r\n\r\n        // multiply by 4/3 rounded up\r\n        uint256 encodedLen = 4 * ((len + 2) / 3);\r\n\r\n        // Add some extra buffer at the end\r\n        bytes memory result = new bytes(encodedLen + 32);\r\n\r\n        bytes memory table = TABLE;\r\n\r\n        assembly {\r\n            let tablePtr := add(table, 1)\r\n            let resultPtr := add(result, 32)\r\n\r\n            for {\r\n                let i := 0\r\n            } lt(i, len) {\r\n\r\n            } {\r\n                i := add(i, 3)\r\n                let input := and(mload(add(data, i)), 0xffffff)\r\n\r\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\r\n                out := shl(8, out)\r\n                out := add(\r\n                    out,\r\n                    and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\r\n                )\r\n                out := shl(8, out)\r\n                out := add(\r\n                    out,\r\n                    and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\r\n                )\r\n                out := shl(8, out)\r\n                out := add(\r\n                    out,\r\n                    and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)\r\n                )\r\n                out := shl(224, out)\r\n\r\n                mstore(resultPtr, out)\r\n\r\n                resultPtr := add(resultPtr, 4)\r\n            }\r\n\r\n            switch mod(len, 3)\r\n            case 1 {\r\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\r\n            }\r\n            case 2 {\r\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\r\n            }\r\n\r\n            mstore(result, encodedLen)\r\n        }\r\n\r\n        return string(result);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_claimTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lootId\",\"type\":\"uint256\"}],\"name\":\"claimWithLoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAttitude\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCommandment\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getEnchantment\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPersonality\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getShrine\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Gods","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://16350b5a832e7dc780250a55b6d6c167504b2f2cd030dfaadc7aa8b6797d4253"}]}