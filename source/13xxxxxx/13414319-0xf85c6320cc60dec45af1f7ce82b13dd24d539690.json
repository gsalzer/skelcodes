{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Area.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.8.9; // code below expects that integer overflows will revert\\nimport \\\"./AreaNFT.sol\\\";\\nimport \\\"./RandomDropVending.sol\\\";\\nimport \\\"./Utilities/PlusCodes.sol\\\";\\nimport \\\"./Vendor/openzeppelin-contracts-3dadd40034961d5ca75fa209a4188b01d7129501/access/Ownable.sol\\\";\\n\\n/// @title  Area main contract, üåê the earth on the blockchain, üìå geolocation NFTs\\n/// @notice This contract is responsible for initial allocation and non-fungible tokens.\\n///         ‚ö†Ô∏è Bad things will happen if the reveals do not happen a sufficient amount for more than ~60 minutes.\\n/// @author William Entriken\\ncontract Area is Ownable, AreaNFT, RandomDropVending {\\n    /// @param inventorySize  inventory for code length 4 tokens for sale (normally 43,200)\\n    /// @param teamAllocation how many set aside for team\\n    /// @param pricePerPack   the cost in Wei for each pack\\n    /// @param packSize       how many drops can be purchased at a time\\n    /// @param name           ERC721 contract name\\n    /// @param symbol         ERC721 symbol name\\n    /// @param baseURI        prefix for all token URIs\\n    /// @param priceToSplit   value (in Wei) required to split Area tokens\\n    constructor(\\n        uint256 inventorySize,\\n        uint256 teamAllocation,\\n        uint256 pricePerPack,\\n        uint32 packSize,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseURI,\\n        uint256 priceToSplit\\n    )\\n        RandomDropVending(inventorySize, teamAllocation, pricePerPack, packSize)\\n        AreaNFT(name, symbol, baseURI, priceToSplit)\\n    {\\n    }\\n\\n    /// @notice Start the sale\\n    function beginSale() external onlyOwner {\\n        _beginSale();\\n    }\\n\\n    /// @notice In case of emergency, the number of allocations set aside for the team can be adjusted\\n    /// @param  teamAllocation the new allocation amount\\n    function setTeamAllocation(uint256 teamAllocation) external onlyOwner {\\n        _setTeamAllocation(teamAllocation);\\n    }\\n\\n    /// @notice A quantity of Area tokens that were committed by anybody and are now mature are revealed\\n    /// @param  revealsLeft up to how many reveals will occur\\n    function reveal(uint32 revealsLeft) external onlyOwner {\\n        RandomDropVending._reveal(revealsLeft);\\n    }\\n\\n    /// @notice Takes some of the code length 4 codes that are not near the poles and assigns them. Team is unable to\\n    ///         take tokens until all other tokens are allocated from sale.\\n    /// @param  recipient the account that is assigned the tokens\\n    /// @param  quantity  how many to assign\\n    function mintTeamAllocation(address recipient, uint256 quantity) external onlyOwner {\\n        RandomDropVending._takeTeamAllocation(recipient, quantity);\\n    }\\n\\n    /// @notice Takes some of the code length 2 codes that are near the poles and assigns them. Team is unable to take\\n    ///         tokens until all other tokens are allocated from sale.\\n    /// @param  recipient    the account that is assigned the tokens\\n    /// @param  indexFromOne a number in the closed range [1, 54]\\n    function mintWaterAndIceReserve(address recipient, uint256 indexFromOne) external onlyOwner {\\n        require(RandomDropVending._inventoryForSale() == 0, \\\"Cannot take during sale\\\");\\n        uint256 tokenId = PlusCodes.getNthCodeLength2CodeNearPoles(indexFromOne);\\n        AreaNFT._mint(recipient, tokenId);\\n    }\\n\\n    /// @notice Pay the bills\\n    function withdrawBalance() external onlyOwner {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    /// @dev Convert a Plus Code token ID to an ASCII (and UTF-8) string\\n    /// @param  plusCode  the Plus Code token ID to format\\n    /// @return the ASCII (and UTF-8) string showing the Plus Code token ID\\n    function tokenIdToString(uint256 plusCode) external pure returns(string memory) {\\n        return PlusCodes.toString(plusCode);\\n    }\\n\\n    /// @dev Convert ASCII string to a Plus Code token ID\\n    /// @param  stringPlusCode the ASCII (UTF-8) Plus Code token ID\\n    /// @return plusCode       the Plus Code token ID representing the provided ASCII string\\n    function stringToTokenId(string memory stringPlusCode) external pure returns(uint256 plusCode) {\\n        return PlusCodes.fromString(stringPlusCode);\\n    }\\n\\n    /// @inheritdoc RandomDropVending\\n    function _revealCallback(address recipient, uint256 allocation) internal override(RandomDropVending) {\\n        uint256 tokenId = PlusCodes.getNthCodeLength4CodeNotNearPoles(allocation);\\n        AreaNFT._mint(recipient, tokenId);\\n    }\\n}\"\r\n    },\r\n    \"contracts/Vendor/openzeppelin-contracts-3dadd40034961d5ca75fa209a4188b01d7129501/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Utilities/PlusCodes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.8.9;\\n\\n/* Quick reference of valid Plus Codes (full code) formats, where D is some Plus Codes digit\\n *\\n * Code length 2:  DD000000+\\n * Code length 4:  DDDD0000+\\n * Code length 6:  DDDDDD00+\\n * Code length 8:  DDDDDDDD+\\n * Code length 10: DDDDDDDD+DD\\n * Code length 11: DDDDDDDD+DDD\\n * Code length 12: DDDDDDDD+DDDD\\n * Code length 13: DDDDDDDD+DDDDD\\n * Code length 14: DDDDDDDD+DDDDDD\\n * Code length 15: DDDDDDDD+DDDDDDD\\n */\\n\\n/// @title  Part of Area, üåê the earth on the blockchain, üìå geolocation NFTs\\n/// @notice Utilities for working with a subset (upper case and no higher than code length 12) of Plus Codes\\n/// @dev    A Plus Code is a character string representing GPS coordinates. See complete specification at\\n///         https://github.com/google/open-location-code.\\n///         We encode this string using ASCII, little endian, into a 256-bit integer. Following is an example code\\n///         length 8 Plus Code:\\n/// String:                                                  2 2 2 2 0 0 0 0 +\\n/// Hex:    0x000000000000000000000000000000000000000000000032323232303030302B\\n/// @author William Entriken\\nlibrary PlusCodes {\\n    struct ChildTemplate {\\n        uint256 setBits;       // Every child is guaranteed to set these bits\\n        uint32 childCount;     // How many children are there, either 20 or 400\\n        uint32 digitsLocation; // How many bits must the child's significant digit(s) be left-shifted before adding\\n                               // (oring) to `setBits`?\\n    }\\n\\n    /// @dev Plus Codes digits use base-20, these are the constituent digits\\n    bytes20 private constant _PLUS_CODES_DIGITS = bytes20(\\\"23456789CFGHJMPQRVWX\\\");\\n\\n    /// @notice Get the Plus Code at a certain index from the list of all code level 4 Plus Codes which are not near the\\n    ///         north or south poles\\n    /// @dev    Code length 4 Plus Codes represent 1 degree latitude by 1 degree longitude. We consider 40 degrees from\\n    ///         the South Pole and 20 degrees from the North Pole as \\\"near\\\". Therefore 360 √ó 120 = 43,200 Plus Codes are\\n    ///         here.\\n    /// @param  indexFromOne a number in the closed range [1, 43,200]\\n    /// @return plusCode     the n-th (one-indexed) Plus Code from the alphabetized list of all code length 4 Plus Codes\\n    ///                      which are not \\\"near\\\" a pole\\n    function getNthCodeLength4CodeNotNearPoles(uint256 indexFromOne) internal pure returns (uint256 plusCode) {\\n        require((indexFromOne >= 1) && (indexFromOne <= 43200), \\\"Out of range\\\");\\n        uint256 indexFromZero = indexFromOne - 1; // In the half-open range [0, 43,200)\\n\\n        plusCode = uint256(uint40(bytes5(\\\"0000+\\\")));\\n        // 0x000000000000000000000000000000000000000000000000000000303030302B;\\n\\n        // Least significant digit can take any of 20 values\\n        plusCode |= uint256(uint8(_PLUS_CODES_DIGITS[indexFromZero % 20])) << 8*5;\\n        // 0x0000000000000000000000000000000000000000000000000000__303030302B;\\n        indexFromZero /= 20;\\n\\n        // Next digit can take any of 20 values\\n        plusCode |= uint256(uint8(_PLUS_CODES_DIGITS[indexFromZero % 20])) << 8*6;\\n        // 0x00000000000000000000000000000000000000000000000000____303030302B;\\n        indexFromZero /= 20;\\n\\n        // Next digit can take any of 18 values (18 √ó 20 degrees = 360 degrees)\\n        plusCode |= uint256(uint8(_PLUS_CODES_DIGITS[indexFromZero % 18])) << 8*7;\\n        // 0x000000000000000000000000000000000000000000000000______303030302B;\\n        indexFromZero /= 18;\\n\\n        // Most significant digit can be not the lowest 2 nor highest 1 (6 options)\\n        plusCode |= uint256(uint8(_PLUS_CODES_DIGITS[2 + indexFromZero])) << 8*8;\\n        // 0x0000000000000000000000000000000000000000000000________303030302B;\\n    }\\n\\n    /// @notice Get the Plus Code at a certain index from the list of all code level 2 Plus Codes which are near the\\n    ///         north or south poles\\n    /// @dev    Code length 2 Plus Codes represent 20 degrees latitude by 20 degrees longitude. We consider 40 degrees\\n    ///         from the South Pole and 20 degrees from the North Pole as \\\"near\\\". Therefore 360 √ó 60 √∑ 20 √∑ 20 = 54 Plus\\n    ///         Codes are here.\\n    /// @param  indexFromOne a number in the closed range [1, 54]\\n    /// @return plusCode     the n-th (one-indexed) Plus Code from the alphabetized list of all code length 2 Plus Codes\\n    ///                      which are \\\"near\\\" a pole\\n    function getNthCodeLength2CodeNearPoles(uint256 indexFromOne) internal pure returns (uint256 plusCode) {\\n        require((indexFromOne >= 1) && (indexFromOne <= 54), \\\"Out of range\\\");\\n        uint256 indexFromZero = indexFromOne - 1; // In the half-open range [0, 54)\\n\\n        plusCode = uint256(uint56(bytes7(\\\"000000+\\\")));\\n        // 0x000000000000000000000000000000000000000000000000003030303030302B;\\n\\n        // Least significant digit can take any of 18 values (18 √ó 20 degrees = 360 degrees)\\n        plusCode |= uint256(uint8(_PLUS_CODES_DIGITS[indexFromZero % 18])) << 8*7;\\n        // 0x000000000000000000000000000000000000000000000000__3030303030302B;\\n        indexFromZero /= 18;\\n\\n        // Most significant digit determines latitude\\n        if (indexFromZero <= 1) {\\n            // indexFromZero ‚àà {0, 1}, this is the 40 degrees near South Pole\\n            plusCode |= uint256(uint8(_PLUS_CODES_DIGITS[indexFromZero])) << 8*8;\\n            // 0x0000000000000000000000000000000000000000000000____3030303030302B;\\n        } else {\\n            // indexFromZero = 2, this is the 20 degrees near North Pole\\n            plusCode |= uint256(uint8(_PLUS_CODES_DIGITS[8])) << 8*8;\\n            // 0x000000000000000000000000000000000000000000000043__3030303030302B;\\n        }\\n    }\\n\\n    /// @notice Find the Plus Code representing `childCode` plus some more area if input is a valid Plus Code; otherwise\\n    ///         revert\\n    /// @param  childCode  a Plus Code\\n    /// @return parentCode the Plus Code representing the smallest area which contains the `childCode` area plus some\\n    ///                    additional area\\n    function getParent(uint256 childCode) internal pure returns (uint256 parentCode) {\\n        uint8 childCodeLength = getCodeLength(childCode);\\n        if (childCodeLength == 2) {\\n            revert(\\\"Code length 2 Plus Codes do not have parents\\\");\\n        }\\n        if (childCodeLength == 4) {\\n            return childCode & 0xFFFF00000000000000 | 0x3030303030302B;\\n        }\\n        if (childCodeLength == 6) {\\n            return childCode & 0xFFFFFFFF0000000000 | 0x303030302B;\\n        }\\n        if (childCodeLength == 8) {\\n            return childCode & 0xFFFFFFFFFFFF000000 | 0x30302B;\\n        }\\n        if (childCodeLength == 10) {\\n            return childCode >> 8*2;\\n        }\\n        // childCodeLength ‚àà {11, 12}\\n        return childCode >> 8*1;\\n    }\\n\\n    /// @notice Create a template for enumerating Plus Codes that are a portion of `parentCode` if input is a valid Plus\\n    ///         Code; otherwise revert\\n    /// @dev    A \\\"child\\\" is a Plus Code representing the largest area which contains some of the `parentCode` area\\n    ///         minus some area.\\n    /// @param  parentCode    a Plus Code to operate on\\n    /// @return childTemplate bit pattern and offsets every child will have\\n    function getChildTemplate(uint256 parentCode) internal pure returns (ChildTemplate memory) {\\n        uint8 parentCodeLength = getCodeLength(parentCode);\\n        if (parentCodeLength == 2) {\\n            return ChildTemplate(parentCode & 0xFFFF0000FFFFFFFFFF, 400, 8*5);\\n            // DD__0000+\\n        }\\n        if (parentCodeLength == 4) {\\n            return ChildTemplate(parentCode & 0xFFFFFFFF0000FFFFFF, 400, 8*3);\\n            // DDDD__00+\\n        }\\n        if (parentCodeLength == 6) {\\n            return ChildTemplate(parentCode & 0xFFFFFFFFFFFF0000FF, 400, 8*1);\\n            // DDDDDD__+\\n        }\\n        if (parentCodeLength == 8) {\\n            return ChildTemplate(parentCode << 8*2, 400, 0);\\n            // DDDDDDDD+__\\n        }\\n        if (parentCodeLength == 10) {\\n            return ChildTemplate(parentCode << 8*1, 20, 0);\\n            // DDDDDDDD+DD_\\n        }\\n        if (parentCodeLength == 11) {\\n            return ChildTemplate(parentCode << 8*1, 20, 0);\\n            // DDDDDDDD+DDD_\\n        }\\n        revert(\\\"Plus Codes with code length greater than 12 not supported\\\");\\n    }\\n\\n    /// @notice Find a child Plus Code based on a template\\n    /// @dev    A \\\"child\\\" is a Plus Code representing the largest area which contains some of a \\\"parent\\\" area minus some\\n    ///         area.\\n    /// @param  indexFromZero which child (zero-indexed) to generate, must be less than `template.childCount`\\n    /// @param  template      tit pattern and offsets to generate child\\n    function getNthChildFromTemplate(uint32 indexFromZero, ChildTemplate memory template)\\n        internal\\n        pure\\n        returns (uint256 childCode)\\n    {\\n        // This may run in a 400-wide loop (for Transfer events), keep it tight\\n\\n        // These bits are guaranteed\\n        childCode = template.setBits;\\n\\n        // Add rightmost digit\\n        uint8 rightmostDigit = uint8(_PLUS_CODES_DIGITS[indexFromZero % 20]);\\n        childCode |= uint256(rightmostDigit) << template.digitsLocation;\\n        // 0xTEMPLATETEMPLATETEMPLATETEMPLATETEMPLATETEMPLATETEMPLATETEML=ATE;\\n\\n        // Do we need to add a second digit?\\n        if (template.childCount == 400) {\\n            uint8 secondDigit = uint8(_PLUS_CODES_DIGITS[indexFromZero / 20]);\\n            childCode |= uint256(secondDigit) << (template.digitsLocation + 8*1);\\n            // 0xTEMPLATETEMPLATETEMPLATETEMPLATETEMPLATETEMPLATETEMPLATETEM==ATE;\\n        }\\n    }\\n\\n    /// @dev Returns 2, 4, 6, 8, 10, 11, or 12 for valid Plus Codes, otherwise reverts\\n    /// @param  plusCode the Plus Code to format\\n    /// @return the code length\\n    function getCodeLength(uint256 plusCode) internal pure returns(uint8) {\\n        if (bytes1(uint8(plusCode)) == \\\"+\\\") {\\n            // Code lengths 2, 4, 6 and 8 are the only ones that end with the format separator (+) and they have exactly\\n            // 9 characters.\\n            require((plusCode >> 8*9) == 0, \\\"Too many characters in Plus Code\\\");\\n            _requireValidDigit(plusCode, 8);\\n            _requireValidDigit(plusCode, 7);\\n            require(bytes1(uint8(plusCode >> 8*8)) <= \\\"C\\\", \\\"Beyond North Pole\\\");\\n            require(bytes1(uint8(plusCode >> 8*7)) <= \\\"V\\\", \\\"Beyond antimeridian\\\");\\n            if (bytes7(uint56(plusCode & 0xFFFFFFFFFFFFFF)) == \\\"000000+\\\") {\\n                return 2;\\n            }\\n            _requireValidDigit(plusCode, 6);\\n            _requireValidDigit(plusCode, 5);\\n            if (bytes5(uint40(plusCode & 0xFFFFFFFFFF)) == \\\"0000+\\\") {\\n                return 4;\\n            }\\n            _requireValidDigit(plusCode, 4);\\n            _requireValidDigit(plusCode, 3);\\n            if (bytes3(uint24(plusCode & 0xFFFFFF)) == \\\"00+\\\") {\\n                return 6;\\n            }\\n            _requireValidDigit(plusCode, 2);\\n            _requireValidDigit(plusCode, 1);\\n            return 8;\\n        }\\n        // Only code lengths 10, 11 and 12 (or more) don't end with a format separator.\\n        _requireValidDigit(plusCode, 0);\\n        _requireValidDigit(plusCode, 1);\\n        if (bytes1(uint8(plusCode >> 8*2)) == \\\"+\\\") {\\n            require(getCodeLength(plusCode >> 8*2) == 8, \\\"Invalid before +\\\");\\n            return 10;\\n        }\\n        _requireValidDigit(plusCode, 2);\\n        if (bytes1(uint8(plusCode >> 8*3)) == \\\"+\\\") {\\n            require(getCodeLength(plusCode >> 8*3) == 8, \\\"Invalid before +\\\");\\n            return 11;\\n        }\\n        _requireValidDigit(plusCode, 3);\\n        if (bytes1(uint8(plusCode >> 8*4)) == \\\"+\\\") {\\n            require(getCodeLength(plusCode >> 8*4) == 8, \\\"Invalid before +\\\");\\n            return 12;\\n        }\\n        revert(\\\"Code lengths greater than 12 are not supported\\\");\\n    }\\n\\n    /// @dev Convert a Plus Code to an ASCII (and UTF-8) string\\n    /// @param  plusCode the Plus Code to format\\n    /// @return the ASCII (and UTF-8) string showing the Plus Code\\n    function toString(uint256 plusCode) internal pure returns(string memory) {\\n        getCodeLength(plusCode);\\n        bytes memory retval = new bytes(0);\\n        while (plusCode > 0) {\\n            retval = abi.encodePacked(uint8(plusCode % 2**8), retval);\\n            plusCode >>= 8;\\n        }\\n        return string(retval);\\n    }\\n\\n    /// @dev Convert ASCII string to a Plus Code\\n    /// @param  stringPlusCode the ASCII (UTF-8) Plus Code\\n    /// @return plusCode       the Plus Code representing the provided ASCII string\\n    function fromString(string memory stringPlusCode) internal pure returns(uint256 plusCode) {\\n        bytes memory bytesPlusCode = bytes(stringPlusCode);\\n        for (uint index=0; index<bytesPlusCode.length; index++) {\\n            plusCode = (plusCode << 8) + uint8(bytesPlusCode[index]);\\n        }\\n        PlusCodes.getCodeLength(plusCode);\\n    }\\n\\n    /// @dev Reverts if the given byte is not a valid Plus Codes digit\\n    function _requireValidDigit(uint256 plusCode, uint8 offsetFromRightmostByte) private pure {\\n        uint8 digit = uint8(plusCode >> (8 * offsetFromRightmostByte));\\n        for (uint256 index = 0; index < 20; index++) {\\n            if (uint8(_PLUS_CODES_DIGITS[index]) == digit) {\\n                return;\\n            }\\n        }\\n        revert(\\\"Not a valid Plus Codes digit\\\");\\n    }\\n}\"\r\n    },\r\n    \"contracts/RandomDropVending.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.8.9; // code below expects that integer overflows will revert\\nimport \\\"./Utilities/LazyArray.sol\\\";\\nimport \\\"./Utilities/PlusCodes.sol\\\";\\nimport \\\"./Utilities/CommitQueue.sol\\\";\\n\\n/// @title  Area commit-reveal drop contract, üåê the earth on the blockchain, üìå geolocation NFTs\\n/// @notice This contract assigns all code length 4 Plus Codes to participants with randomness provided by a\\n///         commit-reveal mechanism. ‚ö†Ô∏è Bad things will happen if the reveals do not happen a sufficient amount for more\\n///         than ~60 minutes.\\n/// @dev    Each commit must be revealed (by the next committer or a benevolent revealer) to ensure that the intended\\n///         randomness for that, and subsequent, commits are used.\\n/// @author William Entriken\\nabstract contract RandomDropVending {\\n    using CommitQueue for CommitQueue.Self;\\n    CommitQueue.Self private _commitQueue;\\n\\n    using LazyArray for LazyArray.Self;\\n    LazyArray.Self private _dropInventoryIntegers;\\n\\n    uint256 private immutable _pricePerPack;\\n    uint32 private immutable _packSize;\\n    bool private _saleDidNotBeginYet;\\n    uint256 private _teamAllocation;\\n\\n    /// @notice Some code length 4 Plus Codes were purchased, but not yet revealed\\n    /// @param  buyer    who purchased\\n    /// @param  quantity how many were purchased\\n    event Purchased(address buyer, uint32 quantity);\\n\\n    /// @param inventorySize   integers [1, quantity] are available\\n    /// @param teamAllocation_ how many set aside for team\\n    /// @param pricePerPack_   the cost in Wei for each pack\\n    /// @param packSize_       how many drops can be purchased at a time\\n    constructor(uint256 inventorySize, uint256 teamAllocation_, uint256 pricePerPack_, uint32 packSize_) {\\n        require((inventorySize - teamAllocation_) % packSize_ == 0, \\\"Pack size must evenly divide sale quantity\\\");\\n        require(inventorySize > teamAllocation_, \\\"None for sale, no fun\\\");\\n        _dropInventoryIntegers.initialize(inventorySize);\\n        _teamAllocation = teamAllocation_;\\n        _pricePerPack = pricePerPack_;\\n        _packSize = packSize_;\\n        _saleDidNotBeginYet = true;\\n    }\\n\\n    /// @notice A quantity of code length 4 Areas are committed for the benefit of the message sender, to be revealed\\n    ///         soon later. And a quantity of code length 4 Areas that were committed by anybody and are now mature are\\n    ///         revealed.\\n    /// @dev    ‚ö†Ô∏è If a commitment is made and is mature more than ~60 minutes without being revealed, then assignment\\n    ///         will use randomness from the then-current block hash, rather than the intended block hash.\\n    /// @param  benevolence how many reveals will be attempted in addition to the number of commits\\n    function purchaseTokensAndReveal(uint32 benevolence) external payable {\\n        require(msg.value == _pricePerPack, \\\"Did not send correct Ether amount\\\");\\n        require(_inventoryForSale() >= _packSize, \\\"Sold out\\\");\\n        require(msg.sender == tx.origin, \\\"Only externally-owned accounts are eligible to purchase\\\");\\n        require(_saleDidNotBeginYet == false, \\\"The sale did not begin yet\\\");\\n        _commit();\\n        _reveal(_packSize + benevolence); // overflow reverts\\n    }\\n\\n    /// @notice Important numbers about the drop\\n    /// @return inventoryForSale how many more can be committed for sale\\n    /// @return queueCount       how many were committed but not yet revealed\\n    /// @return setAside         how many are remaining for team to claim\\n    function dropStatistics() external view returns (uint256 inventoryForSale, uint256 queueCount, uint256 setAside) {\\n        return (\\n            _inventoryForSale(),\\n            _commitQueue.count(),\\n            _teamAllocation <= _dropInventoryIntegers.count()\\n                ? _teamAllocation\\n                : _dropInventoryIntegers.count()\\n        );\\n    }\\n\\n    /// @notice Start the sale\\n    function _beginSale() internal {\\n        _saleDidNotBeginYet = false;\\n    }\\n\\n    /// @notice In case of emergency, the number of allocations set aside for the team can be adjusted\\n    /// @param  teamAllocation_ the new allocation amount\\n    function _setTeamAllocation(uint256 teamAllocation_) internal {\\n        _teamAllocation = teamAllocation_;\\n    }\\n\\n    /// @notice A quantity of integers that were committed by anybody and are now mature are revealed\\n    /// @param  revealsLeft up to how many reveals will occur\\n    function _reveal(uint32 revealsLeft) internal {\\n        for (; revealsLeft > 0 && _commitQueue.isMature(); revealsLeft--) {\\n            // Get one from queue\\n            address recipient;\\n            uint64 maturityBlock;\\n            (recipient, maturityBlock) = _commitQueue.dequeue();\\n\\n            // Allocate randomly\\n            uint256 randomNumber = _random(maturityBlock);\\n            uint256 randomIndex = randomNumber % _dropInventoryIntegers.count();\\n            uint allocatedNumber = _dropInventoryIntegers.popByIndex(randomIndex);\\n            _revealCallback(recipient, allocatedNumber);\\n        }\\n    }\\n\\n    /// @dev   This callback triggers when some drop is revealed.\\n    /// @param recipient  the beneficiary of the drop\\n    /// @param allocation which number was dropped\\n    function _revealCallback(address recipient, uint256 allocation) internal virtual;\\n\\n    /// @notice Takes some integers (not randomly) in inventory and assigns them. Team does not get tokens until all\\n    ///         other integers are allocated.\\n    /// @param  recipient the account that is assigned the integers\\n    /// @param  quantity  how many integers to assign\\n    function _takeTeamAllocation(address recipient, uint256 quantity) internal {\\n        require(_inventoryForSale() == 0, \\\"Cannot take during sale\\\");\\n        require(quantity <= _dropInventoryIntegers.count(), \\\"Not enough to take\\\");\\n        for (; quantity > 0; quantity--) {\\n            uint256 lastIndex = _dropInventoryIntegers.count() - 1;\\n            uint256 allocatedNumber = _dropInventoryIntegers.popByIndex(lastIndex);\\n            _revealCallback(recipient, allocatedNumber);\\n        }\\n    }\\n\\n    /// @dev Get a random number based on the given block's hash; or some other hash if not available\\n    function _random(uint256 blockNumber) internal view returns (uint256) {\\n        // Blockhash produces non-zero values only for the input range [block.number - 256, block.number - 1]\\n        if (blockhash(blockNumber) != 0) {\\n            return uint256(blockhash(blockNumber));\\n        }\\n        return uint256(blockhash(((block.number - 1)>>8)<<8));\\n    }\\n\\n    /// @notice How many more can be committed for sale\\n    function _inventoryForSale() internal view returns (uint256) {\\n        uint256 inventoryAvailable = _commitQueue.count() >= _dropInventoryIntegers.count()\\n            ? 0\\n            : _dropInventoryIntegers.count() - _commitQueue.count();\\n        return _teamAllocation >= inventoryAvailable\\n            ? 0\\n            : inventoryAvailable - _teamAllocation;\\n    }\\n\\n    /// @notice A quantity of integers are committed for the benefit of the message sender, to be revealed soon later.\\n    /// @dev    ‚ö†Ô∏è If a commitment is made and is mature more than ~60 minutes without being revealed, then assignment\\n    ///         will use randomness from the then-current block hash, rather than the intended block hash.\\n    function _commit() private {\\n        _commitQueue.enqueue(msg.sender, _packSize);\\n        emit Purchased(msg.sender, _packSize);\\n    }\\n}\"\r\n    },\r\n    \"contracts/AreaNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.8.9; // code below expects that integer overflows will revert\\nimport \\\"./Vendor/openzeppelin-contracts-3dadd40034961d5ca75fa209a4188b01d7129501/token/ERC721/ERC721.sol\\\";\\nimport \\\"./Vendor/openzeppelin-contracts-3dadd40034961d5ca75fa209a4188b01d7129501/access/Ownable.sol\\\";\\nimport \\\"./Utilities/PlusCodes.sol\\\";\\n\\n/// @title  Area NFT contract, üåê the earth on the blockchain, üìå geolocation NFTs\\n/// @notice This implementation adds features to the baseline ERC-721 standard:\\n///         - groups of tokens (siblings) are stored efficiently\\n///         - tokens can be split\\n/// @dev    This builds on the OpenZeppelin Contracts implementation\\n/// @author William Entriken\\nabstract contract AreaNFT is ERC721, Ownable {\\n    // The prefix for all token URIs\\n    string internal _baseTokenURI;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _explicitOwners;\\n\\n    // Mapping from token ID to owner address, if a token is split\\n    mapping(uint256 => address) private _splitOwners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Price to split an area in Wei\\n    uint256 private _priceToSplit;\\n\\n    /// @dev Contract constructor\\n    /// @param name_         ERC721 contract name\\n    /// @param symbol_       ERC721 symbol name\\n    /// @param baseURI       prefix for all token URIs\\n    /// @param priceToSplit_ value (in Wei) required to split Area tokens\\n    constructor(string memory name_, string memory symbol_, string memory baseURI, uint256 priceToSplit_)\\n        ERC721(name_, symbol_)\\n    {\\n        _baseTokenURI = baseURI;\\n        _priceToSplit = priceToSplit_;\\n    }\\n\\n    /// @notice The owner of an Area Token can irrevocably split it into Plus Codes at one greater level of precision.\\n    /// @dev    This is the only function with burn functionality. The newly minted tokens do not cause a call to\\n    ///         onERC721Received on the recipient.\\n    /// @param  tokenId the token that will be split\\n    function split(uint256 tokenId) external payable {\\n        require(msg.value == _priceToSplit, \\\"Did not send correct Ether amount\\\");\\n        require(_msgSender() == ownerOf(tokenId), \\\"AreaNFT: split caller is not owner\\\");\\n        _burn(tokenId);\\n\\n        // Split. This causes our ownerOf(childTokenId) to return the owner\\n        _splitOwners[tokenId] = _msgSender();\\n\\n        // Ghost mint the child tokens\\n        // Ghost mint (verb): create N tokens on-chain (i.e. ownerOf returns something) without using N storage slots\\n        PlusCodes.ChildTemplate memory template = PlusCodes.getChildTemplate(tokenId);\\n        _balances[_msgSender()] += template.childCount; // Solidity 0.8+\\n        for (uint32 index = 0; index < template.childCount; index++) {\\n            uint256 childTokenId = PlusCodes.getNthChildFromTemplate(index, template);\\n            emit Transfer(address(0), _msgSender(), childTokenId);\\n        }\\n    }\\n\\n    /// @notice Update the price to split Area tokens\\n    /// @param  newPrice value (in Wei) required to split Area tokens\\n    function setPriceToSplit(uint256 newPrice) external onlyOwner {\\n        _priceToSplit = newPrice;\\n    }\\n\\n    /// @notice Update the base URI for token metadata\\n    /// @dev    All data you need is on-chain via token ID, and metadata is real world data. This Base URI is completely\\n    ///         optional and is only here to facilitate serving to marketplaces.\\n    /// @param  baseURI the new URI to prepend to all token URIs\\n    function setBaseURI(string calldata baseURI) external onlyOwner {\\n        _baseTokenURI = baseURI;\\n    }\\n\\n    /// @inheritdoc ERC721\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /// @inheritdoc ERC721\\n    function ownerOf(uint256 tokenId) public view override returns (address owner) {\\n        owner = _explicitOwners[tokenId];\\n        if (owner != address(0)) {\\n            return owner;\\n        }\\n        require(_splitOwners[tokenId] == address(0), \\\"AreaNFT: owner query for invalid (split) token\\\");\\n        uint256 parentTokenId = PlusCodes.getParent(tokenId);\\n        owner = _splitOwners[parentTokenId];\\n        if (owner != address(0)) {\\n            return owner;\\n        }\\n        revert(\\\"ERC721: owner query for nonexistent token\\\");\\n    }\\n\\n    /// @inheritdoc ERC721\\n    /// @dev We must override because we need to access the derived `_tokenApprovals` variable that is set by the\\n    ///      derived`_approved`.\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /// @inheritdoc ERC721\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /// @inheritdoc ERC721\\n    function _burn(uint256 tokenId) internal virtual override {\\n        address owner = ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _explicitOwners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /// @inheritdoc ERC721\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual override {\\n        require(ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _explicitOwners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /// @inheritdoc ERC721\\n    /// @dev We must override because we need the derived `ownerOf` function.\\n    function _approve(address to, uint256 tokenId) internal virtual override {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /// @inheritdoc ERC721\\n    function _mint(address to, uint256 tokenId) internal virtual override {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n        require(_splitOwners[tokenId] == address(0), \\\"AreaNFT: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _explicitOwners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @inheritdoc ERC721\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual override returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /// @inheritdoc ERC721\\n    function _exists(uint256 tokenId) internal view virtual override returns (bool) {\\n        address owner;\\n        owner = _explicitOwners[tokenId];\\n        if (owner != address(0)) {\\n            return true;\\n        }\\n        if (_splitOwners[tokenId] != address(0)) { // query for invalid (split) token\\n            return false;\\n        }\\n        if (PlusCodes.getCodeLength(tokenId) > 2) { // It has a parent; This throws if it's not a valid plus code.\\n            uint256 parentTokenId = PlusCodes.getParent(tokenId);\\n            owner = _splitOwners[parentTokenId];\\n            if (owner != address(0)) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @inheritdoc ERC721\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n}\"\r\n    },\r\n    \"contracts/Vendor/openzeppelin-contracts-3dadd40034961d5ca75fa209a4188b01d7129501/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Utilities/CommitQueue.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.8.9; // code below expects that integer overflows will revert\\n\\n/// @title  Part of Area, üåê the earth on the blockchain, üìå geolocation NFTs\\n/// @notice A multi-queue data structure for commits that are waiting to be revealed\\n/// @author William Entriken\\nlibrary CommitQueue {\\n    struct Self {\\n        // Storage of all elements\\n        mapping(uint256 => Element) elements;\\n\\n        // The position of the first element if queue is not empty\\n        uint32 startIndex;\\n\\n        // The queue‚Äôs ‚Äúpast the end‚Äù position, i.e. one greater than the last valid subscript argument\\n        uint32 endIndex;\\n\\n        // How many items (sum of Element.quantity) are in the queue\\n        uint256 length;\\n    }\\n\\n    struct Element {\\n        // These sizes are chosen to fit in one EVM word\\n        address beneficiary;\\n        uint64 maturityBlock;\\n        uint32 quantity; // this must be greater than zero\\n    }\\n\\n    /// @notice Adds a new entry to the end of the queue\\n    /// @param  self        the data structure\\n    /// @param  beneficiary an address associated with the commitment\\n    /// @param  quantity    how many to enqueue\\n    function enqueue(Self storage self, address beneficiary, uint32 quantity) internal {\\n        require(quantity > 0, \\\"Quantity is missing\\\");\\n        self.elements[self.endIndex] = Element(\\n            beneficiary,\\n            uint64(block.number), // maturityBlock, hash thereof not yet known\\n            quantity\\n        );\\n        self.endIndex += 1;\\n        self.length += quantity;\\n    }\\n\\n    /// @notice Removes and returns the first element of the multi-queue; reverts if queue is empty\\n    /// @param  self          the data structure\\n    /// @return beneficiary   an address associated with the commitment\\n    /// @return maturityBlock when this commitment matured\\n    function dequeue(Self storage self) internal returns (address beneficiary, uint64 maturityBlock) {\\n        require(!_isEmpty(self), \\\"Queue is empty\\\");\\n        beneficiary = self.elements[self.startIndex].beneficiary;\\n        maturityBlock = self.elements[self.startIndex].maturityBlock;\\n        if (self.elements[self.startIndex].quantity == 1) {\\n            delete self.elements[self.startIndex];\\n            self.startIndex += 1;\\n        } else {\\n            self.elements[self.startIndex].quantity -= 1;\\n        }\\n        self.length -= 1;\\n    }\\n\\n    /// @notice Checks whether the first element can be revealed\\n    /// @dev    Elements are added to the queue in order, so if the first element is not mature than neither are all\\n    ///         remaining elements.\\n    /// @param  self the data structure\\n    /// @return true if the first element exists and is mature; false otherwise\\n    function isMature(Self storage self) internal view returns (bool) {\\n        if (_isEmpty(self)) {\\n            return false;\\n        }\\n        return block.number > self.elements[self.startIndex].maturityBlock;\\n    }\\n\\n    /// @notice Finds how many items are remaining to be dequeued\\n    /// @dev    This is the sum of Element.quantity.\\n    /// @param  self the data structure\\n    /// @return how many items are in the queue (i.e. how many dequeues can happen)\\n    function count(Self storage self) internal view returns (uint256) {\\n        return self.length;\\n    }\\n\\n    /// @notice Whether or not the queue is empty\\n    /// @param  self the data structure\\n    /// @return true if the queue is empty; false otherwise\\n    function _isEmpty(Self storage self) private view returns (bool) {\\n        return self.startIndex == self.endIndex;\\n    }\\n}\"\r\n    },\r\n    \"contracts/Utilities/LazyArray.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.8.9; // code below expects that integer overflows will revert\\n\\n/// @title  Part of Area, üåê the earth on the blockchain, üìå geolocation NFTs\\n/// @notice A data structure that supports random read and delete access and that efficiently initializes to a range of\\n///         [1, N]\\n/// @author William Entriken\\nlibrary LazyArray {\\n    struct Self {\\n        // This stores element values and cannot represent an underlying value of zero.\\n        //\\n        // A zero value at index i represents an element of (i+1). Any other value stored in the array represents an\\n        // element of that value. We employ this technique because all storage in Solidity starts at zero.\\n        //\\n        // e.g. the array [0, 135, 243, 0, 500] represents the values [1, 135, 243, 5, 500]. Then if we remove the 135\\n        // that becomes [0, 500, 243, 0] which represents the values [1, 500, 243, 5].\\n        mapping(uint256 => uint256) elements;\\n\\n        // Adding to this value logically appends a sequence to the array ending in `length`. E.g. changing from 0 to 2\\n        // makes [1, 2].\\n        uint256 length;\\n    }\\n\\n    /// @notice Sets the logical contents to a range of [1, N]. Setting near 2**(256-DIFFICULTY) creates a security\\n    ///         vulnerability.\\n    /// @param  self          the data structure\\n    /// @param  initialLength how big to make the range\\n    function initialize(Self storage self, uint256 initialLength) internal {\\n        require(self.length == 0, \\\"Cannot initialize non-empty structure\\\");\\n        self.length = initialLength;\\n    }\\n\\n    /// @notice Removes and returns the n-th logical element\\n    /// @param  self   the data structure\\n    /// @param  index  which element (zero indexed) to remove and return\\n    /// @return popped the specified element\\n    function popByIndex(Self storage self, uint256 index) internal returns (uint256 popped) {\\n        popped = getByIndex(self, index);\\n        uint256 lastIndex = self.length - 1; // will not underflow b/c prior get\\n        if (index < lastIndex) {\\n            uint256 lastElement = getByIndex(self, lastIndex);\\n            self.elements[index] = lastElement;\\n        }\\n        delete self.elements[lastIndex];\\n        self.length -= 1;\\n    }\\n\\n    /// @notice Returns the n-th logical element\\n    /// @param  self    the data structure\\n    /// @param  index   which element (zero indexed) to get\\n    /// @return element the specified element\\n    function getByIndex(Self storage self, uint256 index) internal view returns (uint256 element) {\\n        require(index < self.length, \\\"Out of bounds\\\");\\n        return self.elements[index] == 0\\n            ? index + 1 // revert on overflow\\n            : self.elements[index];\\n    }\\n\\n    /// @notice Finds how many items remain\\n    /// @param  self   the data structure\\n    /// @return the number of remaining items\\n    function count(Self storage self) internal view returns (uint256) {\\n        return self.length;\\n    }\\n}\"\r\n    },\r\n    \"contracts/Vendor/openzeppelin-contracts-3dadd40034961d5ca75fa209a4188b01d7129501/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/Vendor/openzeppelin-contracts-3dadd40034961d5ca75fa209a4188b01d7129501/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Vendor/openzeppelin-contracts-3dadd40034961d5ca75fa209a4188b01d7129501/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Vendor/openzeppelin-contracts-3dadd40034961d5ca75fa209a4188b01d7129501/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Vendor/openzeppelin-contracts-3dadd40034961d5ca75fa209a4188b01d7129501/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/Vendor/openzeppelin-contracts-3dadd40034961d5ca75fa209a4188b01d7129501/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/Vendor/openzeppelin-contracts-3dadd40034961d5ca75fa209a4188b01d7129501/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Vendor/openzeppelin-contracts-3dadd40034961d5ca75fa209a4188b01d7129501/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inventorySize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerPack\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"packSize\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"priceToSplit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beginSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dropStatistics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inventoryForSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queueCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setAside\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mintTeamAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"indexFromOne\",\"type\":\"uint256\"}],\"name\":\"mintWaterAndIceReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"benevolence\",\"type\":\"uint32\"}],\"name\":\"purchaseTokensAndReveal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"revealsLeft\",\"type\":\"uint32\"}],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceToSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamAllocation\",\"type\":\"uint256\"}],\"name\":\"setTeamAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"split\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"stringPlusCode\",\"type\":\"string\"}],\"name\":\"stringToTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"plusCode\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"plusCode\",\"type\":\"uint256\"}],\"name\":\"tokenIdToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Area","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000a8c00000000000000000000000000000000000000000000000000000000000000c80000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000003782dace9d9000000000000000000000000000000000000000000000000000000000000000000004417265610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044152454100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001268747470733a2f2f617265612e776f726c640000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}