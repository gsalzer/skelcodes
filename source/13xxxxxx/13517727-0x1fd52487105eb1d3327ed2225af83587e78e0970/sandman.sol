// SPDX-License-Identifier: MIT
pragma solidity ^0.8.2;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

interface SandInterface {
    function ownerOf(uint256 tokenId) external view returns (address owner);
    function tokenOfOwnerByIndex(address owner, uint256 index)
        external
        view
        returns (uint256 tokenId);
}

contract SandAvatars is ERC721, ERC721Enumerable, Ownable {
    bool public saleIsActive = false;
    bool public burned = false;
    address public SandAddress = 0xB90b34B41658aC20A0051874FeeE1933c3614fa7;
    SandInterface SandContract = SandInterface(SandAddress);
    
    constructor() ERC721("SandAvatars", "SNAV") {
    }
     

    function _beforeTokenTransfer(address from, address to, uint256 tokenId)
        internal
        override(ERC721, ERC721Enumerable)
    {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    function supportsInterface(bytes4 interfaceId)
        public
        view
        override(ERC721, ERC721Enumerable)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
    
    function random(string memory input) internal pure returns (uint256) {
        return uint256(keccak256(abi.encodePacked(input)));
    }
    
    function toHashCode(uint256 value) internal pure returns (string memory) {
        uint256 i;

        bytes memory buffer = "000000";
        for(i=6;i>0;i--) {
            if (value % 16 < 10)
                buffer[i-1] = bytes1(uint8(48 + uint256(value % 16)));
            else
                buffer[i-1] = bytes1(uint8(55 + uint256(value % 16)));

            value /= 16;
        }
        return string(buffer);
    }
    
    

    function toString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }
    
    function getPolygon(uint256 num, string memory color, string memory op) internal pure returns (string memory) {
        uint256[207]memory xtypes =[
            14121436260491623888573569494265958210382088460059485271557129702735745326,
            3379687223624639408404345647054286820230943047769096274235841555659165627614,
            4766529846908783929200657017927412346891862284447113714675691880753314010650,
            2414848826299563751631584,
            2415403168366050671711990,
            165989458421190421426294049862974048,
            2990041845436834032465436684735961822206490428694177,
            205519767453372228188215768215336195851890616474781117116470017,
            783342371240660400615497362662867695169835591505009495153,
            3015605336097770010832060948773439899320263180355111271447081940574438532253,
            1699410383171683060484640923082407994735009912351540698902523680158858963667,
            2067439483755009076537239878613967120688171739225650558832839415147437291640,
            2110285635025633850782162448438909787314249243868635101044081548977791378060,
            1813537826634847775588271020849619009466237369690820983365919405283580390552,
            1433165981178011733008463800384150766019695303333840710976987787175893725835,
            1347834300580146900593882219877353796923237396140869764780512560971696623306,
            1588291142145332360308884532736805401102486146533600217899801854658095932103,
            1630640689404733378642505262896486732354314158877471864006247217340780175548,
            1926975200976366162727790765948535744022368363806555952276809889580033045183,
            2195729526611169200073088264115405134266050171528327914526689757427595025581,
            2266183416249769109687683253195421600011544355208010500246994655874713467054,
            1942021118171089200927872160880968143467387698704835635209143544230560220841,
            2026692120635480416902954766191778704951595844413918284067846871351766098126,
            2252931742901068372445672611749832774842961514843407512141469648329648975563,
            2295116187662235110121913666276726987468444668928175066731688914204036246718,
            2592194794286804437698157144159526339621523043225693230464121704378048799436,
            2535270053559044811589912991644676175666664223951765667507672669824291794632,
            2676810635330829446627987247531416732227338364894945326305024218158728837315,
            2676507767503271220336019071355421318369328191959582692781556145107637730497,
            2860260185232810836874932161100098492177796172019734599621174229889736083643,
            2704583530546838355578889545793450502804454913237751059045251025304634622638,
            2732605051757189469738771911402128307348469092831311049021474868234958504110,
            2689896882341260570152089198804438177341639211772304451963188924944556062881,
            2874339369183394173601732921210730487262146816407635719706621996970437346462,
            134063278,
            11401402070285144550100871971896250052146431669,
            11401442479798540347354564667579758730284697744,
            2010405393385468769754390500839040943260313875155174100691674881837603800274,
            53852718675364590822474638051961946119679634989037219218611160268927,
            2873152535253068203115307214512935299514021674337530122812293448446001082573,
            632967951439172729344733328545,
            2703590214691199062276704278272662481619631230524746364075007852563519075527,
            3142100272699584422061276135492595947566116804089604574541184736671832567449,
            2989437538194262125706135904879775746659906037333659,
            2732882416327165001845161696611165857660612391574224505373154795372861555376,
            511,
            2407752739435277468182135965268740961167067564356323244993211865623229981385,
            2718635756548816077094781045246157570894954467225593574078410329624519202986,
            205426318550813624678543263541887184093338878840179569528765611,
            783755749980388114187626910565273421423263977749007664810,
            2548935505955974898918714072113448954440083838302132660405920669118189609678,
            2620798165283744002906637766862406499463773050371800692306162182138139601596,
            511,
            3072227530827800386450195294804395741003464330979216039104110948505046855347,
            134062774,
            2492699542259379918880031894535889655400300980491640244623151733365212783310,
            3439125500424588101080488050237853159581039880613797914734533628447204922543,
            35140538584256,
            3242094284692887871609116300080036303492460653890804351075462070651154177202,
            511,
            1770013146521665037408692954108461375963030202334087742099350891873277133542,
            2416417129151844328456352,
            205354787381561677649152221282543919859758865255427095704153723,
            4554618901733828934554583591157904263166577235187268654483446904656196608231,
            205399677480996743294400265142671549319989067471689792870214765,
            1687649379406570998776343934026219620523553877468665929082612794343857930982,
            35146584669401,
            43490082804405313463985993646168051869873,
            682778994860606022295232778088851114906462078344796921178050393667028676812,
            924784587014537063152182727386123816934642400149158636683653472794560994908,
            511,
            740975772651252457144836420278673397610254157186597222250099236134980751977,
            2414117941576320369311410,
            632708923678708594065717615261,
            1458925500838540507418926026561993567301703685253672786264170589214896329935,
            1362215544816844226291935252053426049015218768525540613182698930612617390203,
            205358079224472907756417989573029084098844703882026101090076869,
            783366263800606206590835024970459678702881525236644753005,
            11400184790511075841139148509544386174780755664,
            165862180158385183703562576710887618,
            1953753321857745697879799949839981476218506366288294591805006875595925160150,
            9209770061908476534,
            9208258027669985499,
            1007024817493647344034072868464098635223782697202574437333574124131465880276,
            978311935401717486461471199063926706147737078905916884262441267563763117176,
            1744463536117297771199500556841754719200382694378654872668579678780200630368,
            511,
            1744601465411721296895678703119841194368939717120234214930076101190129364598,
            11401222567826577545303997980370987807270047450,
            9208989541913880222,
            1092826092546994839469209809358617178552720724428088672892094552082176036544,
            632684934038491608715134540950,
            14115595813093446524490909446834395552161017956518832857934551862262970508,
            632986958806261141854888479370,
            632977282640443796338332746377,
            2052946140791500114938153887393848933442548125195317854590544344108166871666,
            134024309,
            2414284504605938271190647,
            2414432961303085847740591,
            1840619951669604201410879954770232798770635410344762643704857699299414045884,
            2054740440345882338413182726751774799923504795098535273396345647260901121653,
            11401099814810876640669013063882522770837151408,
            2251164459629472805890764632980280277423766955907349854903606843989721679987,
            35133399578745,
            632965160288698604399670134412,
            632963006881331930588495022277,
            1786344573953401262130609349327547713072556579231105641242862738580471876815,
            2038589805006897792509112007954350735573250959223795959103614935773248814209,
            53842228122476702495773295789384926848390152018530179498957340490361,
            2111666526756141710963288250158183316620790909592475932262883279353406879950,
            134025936,
            165907096476797172510820836217519220,
            165907184370672188268528709397970124,
            1658082137457338989675227097692720737868293871022172673441890803106526591693,
            1883024388535656625284391916361025676073851550858069989271493020769645815925,
            1926920472707949547012838945053378431215376612467398300984843403947283124847,
            35131542532261,
            2024594198579077053330764490684944254136592945947480819607862982763103974004,
            35131923427956,
            165909021475966603241960532792900752,
            165909083373204686735841121470840002,
            1885618862360980679350640322437473822248060842137738006611198105431721960658,
            1742173066023287913099403968227517944924073894310750451819876872377331939012,
            1614407666257820487363169021269399758278734125660509710128450889567286921848,
            1744464615782850979964182648476765026166962618378931230221541869862448329839,
            134014162,
            11401182764097204976827754137621811304469167267,
            1771877757361298981460197733359093436404203289488771558972277815195612811459,
            35133957411001,
            2010266548816189564479104322685517328153080461434873302541240831931155540179,
            1304683555199795152622005937938311831570780363298831092900867642675445952117,
            1969021876408794075999015047652559943941859790002927827734170938252782778009,
            43490414745042222856303808090815535583909,
            2180572158151246410001024254246908758834719272846442894189196745760436466396,
            1673403802771746401375198818222556837670706048123256272574605586619058958977,
            1885288008633175329315918003045024399639454063428632155870688280191534429897,
            1416905731959046147692107590348875820999182264648841806339526292113423404216,
            1997291483260239039461852812345115693394643947621579986309362922487406451834,
            783558446483948923466464176747535046874779770473507527338,
            14115978838654814715707104984262644478936595142475981459604830162147428033,
            633107969808034801031089073827,
            2633578470602599440322905773949466446156875479267007458201540814813565895350,
            632977495378512133649644484776,
            165929986036551556547801149694623415,
            2989025485403311877817610573034810975450514052426906,
            205407434988195293878750642328847735295359291050132879493903533,
            11404056456687223639749243846043887237610963095,
            2989675086510346121999155662963669593588724326309475,
            43500872086127607303759630063956263790259,
            43501704123066862598939503992370536738999,
            11405895771622953147234522950227641433617192204,
            633135015023432504038451692802,
            1798132692690596179620705189163856188119368407084938759745728243059276205742,
            2989220037414416967977113123657014036013879774232178,
            165937578388141905202686021359195820,
            2414727696459509174196890,
            2414691127125256287900332,
            165915365962175250832669694316052105,
            165910991072664731647969066886692541,
            165915364714563768096814076148908681,
            632905030222108565907283182269,
            14120708005514235896398854230464658906875090178430929295545649270898687532,
            3337199960013931773256446509889229036480433598974937326816702961831104073785,
            3605596203950561889636721869696093579010718870466811845253629283825091211308,
            633155812478473693991465778734,
            9213733475672780801,
            3167748284762293053715838884979026074229237355454641984176617526858699095095,
            9213067443423788601,
            205469983996266401852074125388687431408097597551877715399396883,
            3351113016766149477002540489062003105409306561172428804040580041473100728372,
            9213383966672673328,
            43512465521962263479832723055980780052022,
            3520125028586159092693396574728389547239517587975760695831987336475883987511,
            3534756679028325853283430757339694332274937217738686833232855861131381961745,
            633170324347821347278826632744,
            3576139438807138707926215165472039742119299231360549960477337344216086985298,
            9213737944048074266,
            14119204143756774178704498797963472268374854012663999297240300317580833876,
            2415408463281380994969144,
            3365166644055540638233802210399874078674695627002040277764271603049931312166,
            165988148429214389023346425638543400,
            1887746225632730957138348290686608844568954207126319086712163562729765690710,
            1915600863297605383381527809737518613446657499530049954771583968952018611994,
            2113322577499690111671980382294985200037260660369180400997101761556814565131,
            2296689143527392781842689264020699383608121252820658176192302688260167906561,
            1660566289916744597573142969784638710355914531095542918433558190781161095928,
            2534082095414892391686150036943765103020588807891018485576253045401890385141,
            633024223136024389052689114166,
            2241391978884043179921934352810270624406243989287534804133301471739814963539,
            14116875255364126381735783362239064288396228655148828240929468015891006244,
            2193355749223663387186473805456239874894208331871277368480859777693891256633,
            2403831831909932078863419000029126387693398488022480060606911847939131651161,
            632995175865805100776593642529,
            1995274819321270135644234375868044978329361002748554918878840054020430981452,
            2375396906030561049849552299865999851499367560653426663546240001308245435983,
            35139812415002,
            2235677420740099074517491835994945260329291511134955606995441301360674695509,
            14116911062155530733820699789705328612116920974874452489152294027973179472,
            2678770361965612704120099657034866152680834834755057279760189508348235082564,
            3287203733699690768233314741557537574339684689442054036487386010876555637992,
            4064839512598947773653950189688692616236907353206181272213310648298450050346,
            4120828199034495056757676173705786195371723329918666661524593207136859074328,
            2415394844344362282141479,

            36325149170812693104873872163691011689991992041050311830217183986701738246657,
            64478519805822442329262443918803540875483425373278030259456266971945429652305,
            86726949164196919860061327850596874826858820280533989768291036578610410590608,
            4291282370
            ];
            
            
        uint256 i;
        uint256 first_index;
        uint256 cur_num;
        uint256 k;
        uint256 pos;
        uint256 part;
        string memory res;
        uint256 result;
        
        part = (xtypes[203+(num/32)] / (256**(num%32)));
        first_index = part%256;
        res = '';
    
        for(i = first_index-1; i<=250; i++) {
            if (xtypes[i] == 0)
                break;
    
            cur_num= xtypes[i];    
            k=0;
            for(pos=0;pos<=27;pos++) {
                result = (cur_num /  (512 ** pos)) % 512;
                if (result == 511)
                    break;
    
                if (k%2 == 0) {
                        res = string(abi.encodePacked(res, toString(result*3), ','));

                }
                else {
                    res = string(abi.encodePacked(res, toString(result*3), ' '));

                }
                k++;
             }   
            if (result == 511)
                break;
        }

        return string(abi.encodePacked('<polygon opacity="',op,'" points="', res, '" fill="#',color,'" />'));
    
    }
    
    function tokenURI(uint256 tokenId) pure public override(ERC721)  returns (string memory) {
        uint256[19] memory xtypes;
        string[6] memory colors;
        string memory output;

        uint256[12] memory params;

        uint256 pos;
        uint256 i;

        uint256 rand = random(string(abi.encodePacked('SandMan',toString(tokenId))));

        params[0] = 1 + (rand % 30); // pallette=
        params[1] = 1 + ((rand/100) % 5);// beard
        params[2] = 1 + ((rand/1000) % 6); // cap
        params[3] = 1 + ((rand/10000) % 5); // glasses

        params[4] = 1 + ((rand/100000) % 4); // tube
        params[5] = 1 + ((rand/1000000) % 6); // object
        params[6] = 1 + ((rand/100000000) % 6); // far
        params[7] = 1 + ((rand/1000000000) % 10); // Band - aid



        xtypes[0] = 1765300933158159279126365688755849989787469680610145113308712138382768895;
        xtypes[1] = 1764921079952145254276332071479222557911241288448461372909069781721677547;
        xtypes[2] = 1501679087584470838161589003975082910140105054122807965032669773169688478;
        xtypes[3] = 1764781974038155230893998203428071971942131358905837942209321033418145694;
        xtypes[4] = 1764351442057709576512408600184270815014492966481600074584100303563390699;
        xtypes[5] = 1764513942681239813290380170455237895030536670527749966108226146279030779;
        xtypes[6] = 1765083764856076636672938774629519978791146014135139882458135528892006302;
        xtypes[7] = 1763024496842125922962385602205943197321056192857025632119827849480763839;
        xtypes[8] = 1675710049990272911441037604203877133533668492266557815129548233759518128;
        xtypes[9] = 1551233773361696239304903403895808160934653895059654415324688197841582071;
        xtypes[10] = 1625636607414481457642678052301313971780849938445042085056482070100953889;
        xtypes[11] = 1722512524339940313921309205786012536301170577779571168786046988462044871;
        xtypes[12] = 1766836768210894802335784057954424698551920770841938248704295415987566568;
        xtypes[13] = 442714978489977024950392528240390319461857033012516340293718171539472383;
        xtypes[14] = 1198354148602851882454841352599916552948941833809782804420285718256091136;
        xtypes[15] = 1765862763184508503075712492699913383911672107677599518220277459367559248;

    
        for(i=0;i<=4;i++) {
            pos = (params[0]-1) * 5 + i;
            colors[i] = toHashCode(xtypes[pos/10] / (16777216 ** (pos%10)) % 16777216);
        }


        output = string(abi.encodePacked('<?xml version="1.0" encoding="utf-8"?><svg xmlns="http://www.w3.org/2000/svg" width="1000px" height="1000px" viewBox="0 0 1000 1000"><linearGradient id="g" gradientUnits="userSpaceOnUse" x2="0" y2="1000"><stop offset="0.1" style="stop-color:#',colors[2],'"/><stop offset="0.5" style="stop-color:#',colors[1],'"/><stop offset="1" style="stop-color:#',colors[2],'"/></linearGradient><rect x="0" y="0" fill="url(#g)" width="1000" height="1000"/>',
        '<circle opacity="0.09" fill="#FFFFFF" cx="726" cy="380" r="151"/><radialGradient id="s" cx="44" cy="723" r="99" gradientTransform="matrix(1 0 0 -1 662 1118)" gradientUnits="userSpaceOnUse"><stop  offset="0.6" style="stop-color:#FFFFFF"/><stop  offset="1" style="stop-color:#',colors[1],'"/></radialGradient><circle opacity="0.8" fill="url(#s)" cx="706" cy="395" r="99"/>',
        getPolygon(92 +params[6], colors[2], '0.08')));
        
        output = string(abi.encodePacked(output,'<g><path opacity="0.11" fill="#FFFFFF" d="M668,533c0,0,313,0,303-28s-397-48,15-46c301,2,196,46,460,43c258-3,484-60,485-17s-290,24-290,50s288,9,478,12c189,3,341-83,535-26c194,56,322,32,517,5c194-27,140,0,427,0s1180,0,1180,0v-31H3607c0,0-137-11-283-10c-146,0-162,33-394-7c-232-41-312-43-420-24c-107,18-255,68-395,74s-397,18-398,7c-1-10,447-26,446-65c-1-38-176-42-391-25c-215,16-395-14-568-19c-172-4-626-8-627,25s323,25,322,50c0,9-593,3-593,3H-36v27h478C442,531,553,533,668,533"/><path opacity="0.11" fill="#FFFFFF" d="M668,514c0,0,322,12,312-15c-10-28-804-56,8-62c301-2,239,37,503,34c258-3,565-42,569,1c2,29-381,32-417,61c-23,18,273,12,470,7c189-5,513-94,714-52c212,44,184,46,379,18c194-27,188,1,475,1s1096,0,1096,0v-20c0,0-1102,0-1175,0s-137-13-284-13c-146,0-161,25-393-16s-315-31-422-12c-107,18-250,68-389,74s-432,24-432,13c0-13,458-25,473-71c12-37-172-54-387-38s-395-14-568-19c-172-4-620,7-621,41s319,32,321,51c0,9-598-12-598-12H-36v27h478C442,513,553,514,668,514z"/><animateMotion path="M 0 0 L -3750 40 Z" dur="150s" repeatCount="indefinite" /></g>',
        getPolygon(80 +params[5]*2-1, colors[2], '0.1'),
        getPolygon(80 +params[5]*2, colors[2], '0.4')));
        
        output = string(abi.encodePacked(output, getPolygon(0, colors[2], '1'),
        getPolygon(1, colors[1], '1'),
        getPolygon(2, colors[0], '0.2'),
        getPolygon(3, colors[2], '0.3'),
        getPolygon(4, colors[2], '0.3'),
        getPolygon(5, colors[0], '0.2')));
        
        output = string(abi.encodePacked(output, getPolygon(6, colors[4], '1'),
        getPolygon(7, colors[3], '1'),
        getPolygon(8, 'FFFFFF', '0.9'),
        getPolygon(9, 'FFFFFF', '0.9'),
        '<circle fill="#',colors[2],'" cx="566" cy="406" r="7.3"/><circle opacity="0.66" fill="#FFFFFF" cx="570" cy="404" r="3"/><circle fill="#',colors[2],'" cx="414" cy="407" r="7.3"/><circle opacity="0.66" fill="#FFFFFF" cx="418" cy="404" r="3"/><g>'));
        
        output = string(abi.encodePacked(output, getPolygon(77, colors[3],'1'),
        getPolygon(78, colors[3], '1'),
        getPolygon(79, colors[4], '1'),
        getPolygon(80, colors[4], '1'),
        '<animate attributeName="opacity" values="0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0" dur="4s" repeatCount="indefinite" begin="0s"/></g>'));
        
        
        if (params[7] == 1) {
            output = string(abi.encodePacked(output, getPolygon(38, colors[0],'1'),
            getPolygon(39, colors[3], '1'),
            getPolygon(40, colors[3], '1')));
        }
        
        output = string(abi.encodePacked(output, 
        getPolygon(9 +params[1]*2-1, colors[3], '1'),
        getPolygon(9 +params[1]*2, colors[2], '0.66'),
        
        getPolygon(19 +params[2]*3-2, colors[2], '1'),
        getPolygon(19 +params[2]*3-1, colors[1], '0.6'),
        getPolygon(19 +params[2]*3, colors[1], '0.6')));
        
        output = string(abi.encodePacked(output, 
        getPolygon(40 +params[3]*4-3, colors[3], '0.92'),
        getPolygon(40 +params[3]*4-2, colors[0], '0.25'),
        getPolygon(40 +params[3]*4-1, colors[0], '0.25'),
        getPolygon(40 +params[3]*4, colors[2], '1')));
        
        output = string(abi.encodePacked(output, 
        getPolygon(60 +params[4]*4-3, colors[2], '1'),
        getPolygon(60 +params[4]*4-2, colors[1], '0.5'),
        getPolygon(60 +params[4]*4-1, colors[1], '0.5'),
        getPolygon(60 +params[4]*4, colors[1], '1'),
        '<g>',
        getPolygon(98, colors[2], '1'),
        '<animateMotion path="M0,0 C5,-5 12,-5 15,-12Z" dur="10s" repeatCount="indefinite"/></g></svg> '));

        
        string memory strparams;

        strparams = string(abi.encodePacked('[{ "trait_type": "Palette", "value": "',
        toString(params[0]),
        '" }, { "trait_type": "Beard", "value": "',
        toString(params[1]),
        '" }, { "trait_type": "Cap", "value": "',
        toString(params[2])));
        
        strparams = string(abi.encodePacked(strparams, 
        '" }, { "trait_type": "Glasses", "value": "',
        toString(params[3]),
        '" }, { "trait_type": "Tube", "value": "',
        toString(params[4]),
        '" }, { "trait_type": "Object", "value": "',
        toString(params[5])));
        
        if (params[7] == 1) {
            strparams = string(abi.encodePacked(strparams, 
             '" }, { "trait_type": "Band - aid", "value": "1'));
        }
        
        strparams = string(abi.encodePacked(strparams, 
        '" }, { "trait_type": "Far", "value": "',
        toString(params[6]),
        '" }]'));
    


        string memory json = Base64.encode(bytes(string(abi.encodePacked('{"name": "Onchain Sandman", "description": "Onchain Sandman - beautiful avatar, completely generated OnChain","attributes":', strparams, ', "image": "data:image/svg+xml;base64,', Base64.encode(bytes(output)), '"}'))));
        output = string(abi.encodePacked('data:application/json;base64,', json));

        return output;
    }
    
    function flipSaleState() public onlyOwner {
        saleIsActive = !saleIsActive;
    }
    
        
    function burnAll() public onlyOwner {
        burned = true;
    }
    
    function directMint(address to, uint256 tokenId) public onlyOwner {
        require(!burned, "Burned!");
        _safeMint(to, tokenId);
    }
    
    function mintMany(uint32[] memory ids) public {
        require(!burned, "Burned!");
        require(saleIsActive, "Sale must be active to mint tokens");

        for (uint i = 0; i < ids.length; i++) {
            require(SandContract.ownerOf(ids[i]) == msg.sender, "Must own a Sand to mint token");
            _safeMint(msg.sender, ids[i]);
        }
    }
    
    function mintToken(uint tokenId) public {
        require(!burned, "Burned!");
        require(saleIsActive, "Sale must be active to mint tokens");
        require(SandContract.ownerOf(tokenId) == msg.sender, "Must own a Sand to mint token");

        _safeMint(msg.sender, tokenId);
    }

    
}




/// [MIT License]
/// @title Base64
/// @notice Provides a function for encoding some bytes in base64
/// @author Brecht Devos <brecht@loopring.org>
library Base64 {
    bytes internal constant TABLE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

    /// @notice Encodes some bytes to the base64 representation
    function encode(bytes memory data) internal pure returns (string memory) {
        uint256 len = data.length;
        if (len == 0) return "";

        // multiply by 4/3 rounded up
        uint256 encodedLen = 4 * ((len + 2) / 3);

        // Add some extra buffer at the end
        bytes memory result = new bytes(encodedLen + 32);

        bytes memory table = TABLE;

        assembly {
            let tablePtr := add(table, 1)
            let resultPtr := add(result, 32)

            for {
                let i := 0
            } lt(i, len) {

            } {
                i := add(i, 3)
                let input := and(mload(add(data, i)), 0xffffff)

                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))
                out := shl(8, out)
                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))
                out := shl(8, out)
                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))
                out := shl(8, out)
                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))
                out := shl(224, out)

                mstore(resultPtr, out)

                resultPtr := add(resultPtr, 4)
            }

            switch mod(len, 3)
            case 1 {
                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))
            }
            case 2 {
                mstore(sub(resultPtr, 1), shl(248, 0x3d))
            }

            mstore(result, encodedLen)
        }

        return string(result);
    }
}

