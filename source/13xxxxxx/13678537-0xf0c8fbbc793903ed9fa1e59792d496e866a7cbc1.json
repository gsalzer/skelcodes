{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\n\r\n/// join-8.sol -- Non-standard token adapters\r\n\r\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\r\n// Copyright (C) 2018-2020 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity >=0.6.12;\r\n\r\ninterface VatLike {\r\n    function slip(bytes32, address, int256) external;\r\n}\r\n\r\ninterface GemLike {\r\n    function decimals() external view returns (uint8);\r\n    function transfer(address,uint256) external returns (bool);\r\n    function transferFrom(address,address,uint256) external returns (bool);\r\n    function erc20Impl() external view returns (address);\r\n}\r\n\r\n// AuthGemJoin8\r\n// For a token that has a lower precision than 18, has decimals and it is upgradable (like GUSD)\r\n\r\ncontract AuthGemJoin8 {\r\n    // --- Auth ---\r\n    mapping (address => uint256) public wards;\r\n    function rely(address usr) external auth {\r\n        wards[usr] = 1;\r\n        emit Rely(usr);\r\n    }\r\n    function deny(address usr) external auth {\r\n        wards[usr] = 0;\r\n        emit Deny(usr);\r\n    }\r\n    modifier auth { require(wards[msg.sender] == 1); _; }\r\n\r\n    VatLike public immutable vat;\r\n    bytes32 public immutable ilk;\r\n    GemLike public immutable gem;\r\n    uint256 public immutable dec;\r\n    uint256 public live;  // Access Flag\r\n\r\n    // Events\r\n    event Rely(address indexed usr);\r\n    event Deny(address indexed usr);\r\n    event Join(address indexed usr, uint256 wad, address indexed msgSender);\r\n    event Exit(address indexed usr, uint256 wad);\r\n    event Cage();\r\n\r\n    mapping (address => uint256) public implementations;\r\n\r\n    constructor(address vat_, bytes32 ilk_, address gem_) public {\r\n        gem = GemLike(gem_);\r\n        dec = GemLike(gem_).decimals();\r\n        require(GemLike(gem_).decimals() < 18, \"AuthGemJoin8/decimals-18-or-higher\");\r\n        wards[msg.sender] = 1;\r\n        live = 1;\r\n        setImplementation(GemLike(gem_).erc20Impl(), 1);\r\n        vat = VatLike(vat_);\r\n        ilk = ilk_;\r\n        emit Rely(msg.sender);\r\n    }\r\n\r\n    function cage() external auth {\r\n        live = 0;\r\n        emit Cage();\r\n    }\r\n\r\n    function setImplementation(address implementation, uint256 permitted) public auth {\r\n        implementations[implementation] = permitted;  // 1 live, 0 disable\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"AuthGemJoin8/overflow\");\r\n    }\r\n\r\n    function join(address usr, uint256 amt, address msgSender) external auth {\r\n        require(live == 1, \"AuthGemJoin8/not-live\");\r\n        uint256 wad = mul(amt, 10 ** (18 - dec));\r\n        require(int256(wad) >= 0, \"AuthGemJoin8/overflow\");\r\n        require(implementations[gem.erc20Impl()] == 1, \"AuthGemJoin8/implementation-invalid\");\r\n        vat.slip(ilk, usr, int256(wad));\r\n        require(gem.transferFrom(msg.sender, address(this), amt), \"AuthGemJoin8/failed-transfer\");\r\n        emit Join(usr, amt, msgSender);\r\n    }\r\n\r\n    function exit(address usr, uint256 amt) external {\r\n        uint256 wad = mul(amt, 10 ** (18 - dec));\r\n        require(int256(wad) >= 0, \"AuthGemJoin8/overflow\");\r\n        require(implementations[gem.erc20Impl()] == 1, \"AuthGemJoin8/implementation-invalid\");\r\n        vat.slip(ilk, msg.sender, -int256(wad));\r\n        require(gem.transfer(usr, amt), \"AuthGemJoin8/failed-transfer\");\r\n        emit Exit(usr, amt);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vat_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ilk_\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"gem_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Cage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Deny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"Join\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Rely\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gem\",\"outputs\":[{\"internalType\":\"contract GemLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ilk\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"implementations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"live\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"permitted\",\"type\":\"uint256\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"contract VatLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AuthGemJoin8","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000035d1b3f3d7966a1dfe207aa4514c12a259a0492b50534d2d475553442d4100000000000000000000000000000000000000000000000000000000000000000000056fd409e1d7a124bd7017459dfea2f387b6d5cd","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f770172379f5e513655fd231042fe4b9c0268c0098e59abab8d5be04740b1ca3"}]}