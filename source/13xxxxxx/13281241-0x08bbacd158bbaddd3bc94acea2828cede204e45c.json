{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IERC20Metadata {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IOracle {\r\n    function getPriceUsdcRecommended(address tokenAddress)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\ninterface IVault {\r\n    function pricePerShare() external view returns (uint256);\r\n\r\n    function token() external view returns (address);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract CalculationsStoneVaults {\r\n    address public oracleAddress;\r\n    IOracle private oracle;\r\n\r\n    constructor(address _oracleAddress) public {\r\n        oracleAddress = _oracleAddress;\r\n        oracle = IOracle(_oracleAddress);\r\n    }\r\n\r\n    function isStoneVault(address tokenAddress) public view returns (bool) {\r\n        IVault vault = IVault(tokenAddress);\r\n        try vault.pricePerShare() returns (uint256 pricePerShare) {\r\n            return true;\r\n        } catch {}\r\n        return false;\r\n    }\r\n\r\n    function getPriceStoneVault(address tokenAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // v2 vaults use pricePerShare scaled to underlying token decimals\r\n        IVault vault = IVault(tokenAddress);\r\n        if (isStoneVault(tokenAddress) == false) {\r\n            revert(\"CalculationsStoneVaults: Token is not a stone vault\");\r\n        }\r\n        address underlyingTokenAddress = vault.token();\r\n        uint256 underlyingTokenPrice =\r\n            oracle.getPriceUsdcRecommended(underlyingTokenAddress);\r\n        uint256 sharePrice = vault.pricePerShare();\r\n        uint256 tokenDecimals = IERC20Metadata(underlyingTokenAddress).decimals();\r\n        return (underlyingTokenPrice * sharePrice) / 10**tokenDecimals;\r\n    }\r\n\r\n    function getPriceUsdc(address tokenAddress) public view returns (uint256) {\r\n        return getPriceStoneVault(tokenAddress);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getPriceStoneVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getPriceUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"isStoneVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CalculationsStoneVaults","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002cb53871c01e314343dddc4a0e7ccd30df72b7d5","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ca0a8b45c6a55cca5c79b5b03929d3d8b66ee51a7c7bfdfc0107a5cf89b059e0"}]}