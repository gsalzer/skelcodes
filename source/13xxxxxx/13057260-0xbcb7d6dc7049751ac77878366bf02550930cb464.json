{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/bridge/BadCacheBridge.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../opensea/OpenSeaIERC1155.sol\\\";\\nimport \\\"../core/BadCacheI.sol\\\";\\n\\n/**\\n * @dev This contracts bridges an OpenSea ERC1155 into the new Badcache ERC721.\\n *      Only owners of BadCache from OpenSea can mint new tokens once they transfer their NFT ownership to the BadcacheBridge.\\n *      An ERC721 will be minted once transfer is received\\n */\\n\\ncontract BadCacheBridge is ReentrancyGuard, Ownable, ERC1155Holder, ERC721Holder {\\n  // OpenSea token that can be proxied to check for balance\\n  address internal openseaToken = 0x495f947276749Ce646f68AC8c248420045cb7b5e;\\n\\n  // Total transfered tokens to our bridge\\n  uint32 internal totalTransfers = 0;\\n\\n  // A list of senders, that sent tokens to our bridge\\n  address[] internal senders;\\n\\n  // Storing a transfer count -> sender -> tokenId\\n  mapping(uint32 => mapping(address => uint256)) internal transfers;\\n\\n  // BadCache721 token that it will be minted based on receiving\\n  address internal badCache721 = 0x0000000000000000000000000000000000000000;\\n\\n  // Storing token URIs base\\n  string private baseUri = \\\"https://ipfs.io/ipfs/QmYSUKeq5Dt8M2RBt7u9f63QwWvdPNawr6Gjc47jdaUr5C/\\\";\\n\\n  // Allowed tokens ids (from OpenSea)\\n  uint256[] internal allowedTokens;\\n\\n  // Maps an old token id with a new token id oldTokenId=>newTokenId\\n  mapping(uint256 => uint16) internal oldNewTokenIdPairs;\\n\\n  // Maps an old token id with a new token id oldTokenId=>newTokenId\\n  mapping(uint16 => uint256) internal newOldTokenIdPairs;\\n\\n  // Keeps an array of new token ids that are allowed to be minted\\n  uint16[] internal newTokenIds;\\n\\n  // Keeps an array of custom 721 tokens\\n  uint16[] internal custom721Ids;\\n\\n  event ReceivedTransferFromOpenSea(\\n    address indexed _sender,\\n    address indexed _receiver,\\n    uint256 indexed _tokenId,\\n    uint256 _amount\\n  );\\n\\n  event ReceivedTransferFromBadCache721(address indexed _sender, address indexed _receiver, uint256 indexed _tokenId);\\n\\n  event MintedBadCache721(address indexed _sender, uint256 indexed _tokenId);\\n\\n  /**\\n   * @dev Initiating the tokens allowed to be received\\n   */\\n  constructor() onlyOwner {\\n    initAllowedTokens();\\n  }\\n\\n  /**\\n   * @dev Mint a ERC721 token based on the receiving of the OpenSea token.\\n   *\\n   * Requirements:\\n   *\\n   * - `_sender` cannot be the zero address.\\n   * - `_tokenId` needs to be part of our allowedIds.\\n   * - `_tokenId` must not be minted before.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function mintBasedOnReceiving(address _sender, uint256 _tokenId) internal isTokenAllowed(_tokenId) returns (bool) {\\n    require(_sender != address(0), \\\"BadCacheBridge: can not mint a new token to the zero address\\\");\\n\\n    uint256 newTokenId = oldNewTokenIdPairs[_tokenId];\\n    if (BadCacheI(badCache721).exists(newTokenId) && BadCacheI(badCache721).ownerOf(newTokenId) == address(this)) {\\n      BadCacheI(badCache721).safeTransferFrom(address(this), _sender, newTokenId);\\n      return true;\\n    }\\n    require(!BadCacheI(badCache721).exists(newTokenId), \\\"BadCacheBridge: token already minted\\\");\\n    require(newTokenId != 0, \\\"BadCacheBridge: new token id does not exists\\\");\\n\\n    string memory uri = getURIById(newTokenId);\\n    _mint721(newTokenId, _sender, uri);\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev check balance of an account and an id for the OpenSea ERC1155\\n   */\\n  function checkBalance(address _account, uint256 _tokenId) public view isTokenAllowed(_tokenId) returns (uint256) {\\n    require(_account != address(0), \\\"BadCacheBridge: can not check balance for address zero\\\");\\n    return OpenSeaIERC1155(openseaToken).balanceOf(_account, _tokenId);\\n  }\\n\\n  /**\\n   * @dev sets proxied token for OpenSea. You need to get it from the mainnet https://etherscan.io/address/0x495f947276749ce646f68ac8c248420045cb7b5e\\n   * Requirements:\\n   *\\n   * - `_token` must not be address zero\\n   */\\n  function setOpenSeaProxiedToken(address _token) public onlyOwner {\\n    require(_token != address(0), \\\"BadCacheBridge: can not set as proxy the address zero\\\");\\n    openseaToken = _token;\\n  }\\n\\n  /**\\n   * @dev sets proxied token for BadCache721. You need to transfer the ownership of the 721 to the Bridge so the bridge can mint and transfer\\n   * Requirements:\\n   *\\n   * - `_token` must not be address zero\\n   */\\n  function setBadCache721ProxiedToken(address _token) public onlyOwner {\\n    require(_token != address(0), \\\"BadCacheBridge: can not set as BadCache721 the address zero\\\");\\n    badCache721 = _token;\\n  }\\n\\n  /**\\n   * @dev sets base uri\\n   * Requirements:\\n   */\\n  function setBaseUri(string memory _baseUri) public onlyOwner {\\n    baseUri = _baseUri;\\n  }\\n\\n  /**\\n   * @dev get base uri\\n   * Requirements:\\n   */\\n  function getBaseUri() public view returns (string memory) {\\n    return baseUri;\\n  }\\n\\n  /**\\n   * @dev transfers a BadCache721 Owned by the bridge to another owner\\n   * Requirements:\\n   *\\n   * - `_token` must not be address zero\\n   */\\n  function transferBadCache721(uint256 _tokenId, address _owner) public onlyOwner isNewTokenAllowed(_tokenId) {\\n    require(_owner != address(0), \\\"BadCacheBridge: can not send a BadCache721 to the address zero\\\");\\n\\n    BadCacheI(badCache721).safeTransferFrom(address(this), _owner, _tokenId);\\n  }\\n\\n  /**\\n   * @dev transfers a BadCache1155 Owned by the bridge to another owner\\n   * Requirements:\\n   *\\n   * - `_token` must not be address zero\\n   */\\n  function transferBadCache1155(uint256 _tokenId, address _owner) public onlyOwner isTokenAllowed(_tokenId) {\\n    require(_owner != address(0), \\\"BadCacheBridge: can not send a BadCache1155 to the address zero\\\");\\n\\n    OpenSeaIERC1155(openseaToken).safeTransferFrom(address(this), _owner, _tokenId, 1, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev check owner of a token on OpenSea token\\n   */\\n  function ownerOf1155(uint256 _tokenId) public view returns (bool) {\\n    return OpenSeaIERC1155(openseaToken).balanceOf(msg.sender, _tokenId) != 0;\\n  }\\n\\n  /**\\n   * @dev Triggered when we receive an ERC1155 from OpenSea and calls {mintBasedOnReceiving}\\n   *\\n   * Requirements:\\n   *\\n   * - `_sender` cannot be the zero address.\\n   * - `_tokenId` needs to be part of our allowedIds.\\n   * - `_tokenId` must not be minted before.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function onERC1155Received(\\n    address _sender,\\n    address _receiver,\\n    uint256 _tokenId,\\n    uint256 _amount,\\n    bytes memory _data\\n  ) public override returns (bytes4) {\\n    onReceiveTransfer1155(_sender, _tokenId);\\n    mintBasedOnReceiving(_sender, _tokenId);\\n    emit ReceivedTransferFromOpenSea(_sender, _receiver, _tokenId, _amount);\\n    return super.onERC1155Received(_sender, _receiver, _tokenId, _amount, _data);\\n  }\\n\\n  /**\\n   * @dev Triggered when we receive an ERC1155 from OpenSea and calls {mintBasedOnReceiving}\\n   *\\n   * Requirements:\\n   *\\n   * - `_sender` cannot be the zero address.\\n   * - `_tokenId` needs to be part of our allowedIds.\\n   * - `_tokenId` must not be minted before.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function onERC721Received(\\n    address _sender,\\n    address _receiver,\\n    uint256 _tokenId,\\n    bytes memory _data\\n  ) public override returns (bytes4) {\\n    require(_sender != address(0), \\\"BadCacheBridge: can not update from the zero address\\\");\\n    if (_sender == address(this)) return super.onERC721Received(_sender, _receiver, _tokenId, _data);\\n    require(_tokenId <= type(uint16).max, \\\"BadCacheBridge: Token id overflows\\\");\\n    if (_sender != address(this)) onReceiveTransfer721(_sender, _tokenId);\\n    emit ReceivedTransferFromBadCache721(_sender, _receiver, _tokenId);\\n    return super.onERC721Received(_sender, _receiver, _tokenId, _data);\\n  }\\n\\n  /**\\n   * @dev get total transfer count\\n   */\\n  function getTransferCount() public view returns (uint128) {\\n    return totalTransfers;\\n  }\\n\\n  /**\\n   * @dev get addreses that already sent a token to us\\n   */\\n  function getAddressesThatTransferedIds() public view returns (address[] memory) {\\n    return senders;\\n  }\\n\\n  /**\\n   * @dev get ids of tokens that were transfered\\n   */\\n  function getIds() public view returns (uint256[] memory) {\\n    uint256[] memory ids = new uint256[](totalTransfers);\\n    for (uint32 i = 0; i < totalTransfers; i++) {\\n      ids[i] = transfers[i][senders[i]];\\n    }\\n    return ids;\\n  }\\n\\n  /**\\n   * @dev get ids of custom 721 tokens that were minted\\n   */\\n  function getCustomIds() public view returns (uint256[] memory) {\\n    uint256[] memory ids = new uint256[](custom721Ids.length);\\n    for (uint128 i = 0; i < custom721Ids.length; i++) {\\n      ids[i] = custom721Ids[i];\\n    }\\n    return ids;\\n  }\\n\\n  /**\\n   * @dev get opensea proxied token\\n   */\\n  function getOpenSeaProxiedtoken() public view returns (address) {\\n    return openseaToken;\\n  }\\n\\n  /**\\n   * @dev get BadCache721 proxied token\\n   */\\n  function getBadCache721ProxiedToken() public view returns (address) {\\n    return badCache721;\\n  }\\n\\n  /**\\n   * @dev update params once we receive a transfer from 1155\\n   *\\n   * Requirements:\\n   *\\n   * - `_sender` cannot be the zero address.\\n   * - `_tokenId` needs to be part of our allowedIds.\\n   */\\n  function onReceiveTransfer1155(address _sender, uint256 _tokenId) internal isTokenAllowed(_tokenId) returns (uint32 count) {\\n    require(_sender != address(0), \\\"BadCacheBridge: can not update from the zero address\\\");\\n    require(OpenSeaIERC1155(openseaToken).balanceOf(address(this), _tokenId) > 0, \\\"BadCacheBridge: This is not an OpenSea token\\\");\\n\\n    senders.push(_sender);\\n    transfers[totalTransfers][_sender] = _tokenId;\\n    totalTransfers++;\\n    return totalTransfers;\\n  }\\n\\n  /**\\n   * @dev update params once we receive a transfer 721\\n   *\\n   * Requirements:\\n   *\\n   * - `_sender` cannot be the zero address.\\n   * - `_tokenId` needs to be part of our allowedIds.\\n   */\\n  function onReceiveTransfer721(address _sender, uint256 _tokenId) internal isNewTokenAllowed(_tokenId) {\\n    for (uint120 i; i < senders.length; i++) {\\n      if (senders[i] == _sender) delete senders[i];\\n    }\\n\\n    OpenSeaIERC1155(openseaToken).safeTransferFrom(address(this), _sender, newOldTokenIdPairs[uint16(_tokenId)], 1, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev the owner can add new tokens into the allowed tokens list\\n   */\\n  function addAllowedToken(uint256 _tokenId, uint16 _newTokenId) public onlyOwner {\\n    allowedTokens.push(_tokenId);\\n    oldNewTokenIdPairs[_tokenId] = _newTokenId;\\n    newTokenIds.push(_newTokenId);\\n    newOldTokenIdPairs[_newTokenId] = _tokenId;\\n  }\\n\\n  /**\\n   * @dev mint a custom 721 token by the owner\\n   */\\n  function mintBadCache721(\\n    uint16 _tokenId,\\n    string memory _uri,\\n    address _owner\\n  ) public onlyOwner {\\n    require(_owner != address(0), \\\"BadCacheBridge: can not mint a new token to the zero address\\\");\\n\\n    //means we want to transfer an existing BadCache721\\n    if (BadCacheI(badCache721).exists(_tokenId) && BadCacheI(badCache721).ownerOf(_tokenId) == address(this)) {\\n      BadCacheI(badCache721).safeTransferFrom(address(this), _owner, _tokenId);\\n      return;\\n    }\\n    require(!BadCacheI(badCache721).exists(_tokenId), \\\"BadCacheBridge: token already minted\\\");\\n    _mint721(_tokenId, _owner, _uri);\\n    custom721Ids.push(_tokenId);\\n  }\\n\\n  /**\\n   * @dev transfers the ownership of BadCache721 token\\n   */\\n  function transferOwnershipOf721(address _newOwner) public onlyOwner {\\n    require(_newOwner != address(0), \\\"BadCacheBridge: new owner can not be the zero address\\\");\\n    BadCacheI(badCache721).transferOwnership(_newOwner);\\n  }\\n\\n  /**\\n   * @dev get URI by token id from allowed tokens\\n   *\\n   * Requirements:\\n   *\\n   * - `_tokenId` needs to be part of our allowedIds.\\n   */\\n  function getURIById(uint256 _tokenId) private view isNewTokenAllowed(_tokenId) returns (string memory) {\\n    return string(abi.encodePacked(baseUri, uint2str(_tokenId), \\\".json\\\"));\\n  }\\n\\n  /**\\n   * @dev minting BadCache721 function and transfer to the owner\\n   */\\n  function _mint721(\\n    uint256 _tokenId,\\n    address _owner,\\n    string memory _tokenURI\\n  ) private {\\n    BadCacheI(badCache721).mint(address(this), _tokenId);\\n\\n    BadCacheI(badCache721).setTokenUri(_tokenId, _tokenURI);\\n    BadCacheI(badCache721).safeTransferFrom(address(this), _owner, _tokenId);\\n    emit MintedBadCache721(_owner, _tokenId);\\n  }\\n\\n  /**\\n   * @dev initiation of the allowed tokens\\n   */\\n  function initAllowedTokens() private {\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680203063263232001, 1);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680204162774859777, 2);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680205262286487553, 3);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680206361798115329, 4);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680207461309743105, 5);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680208560821370881, 6);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680209660332998657, 7);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680210759844626433, 8);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680211859356254209, 9);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680212958867881985, 10);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680214058379509761, 11);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680215157891137537, 12);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680216257402765313, 13);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680217356914393089, 14);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680218456426020865, 15);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680219555937648641, 16);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680220655449276417, 17);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680221754960904193, 18);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680222854472531969, 19);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680223953984159745, 20);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680225053495787521, 21);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680226153007415297, 22);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680227252519043073, 23);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680228352030670849, 24);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680229451542298625, 25);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680230551053926401, 26);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680231650565554177, 27);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680232750077181953, 28);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680233849588809729, 29);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680234949100437505, 30);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680236048612065281, 31);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680237148123693057, 32);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680238247635320833, 33);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680239347146948609, 34);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680240446658576385, 35);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680241546170204161, 36);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680242645681831937, 37);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680243745193459713, 38);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680244844705087489, 39);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680245944216715265, 40);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680247043728343041, 41);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680248143239970817, 42);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680249242751598593, 43);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680250342263226369, 44);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680251441774854145, 45);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680252541286481921, 46);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680253640798109697, 47);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680254740309737473, 48);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680255839821365249, 49);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680256939332993025, 50);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680258038844620801, 51);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680259138356248577, 52);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680260237867876353, 53);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680261337379504129, 54);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680262436891131905, 55);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680263536402759681, 56);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680264635914387457, 57);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680265735426015233, 58);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680266834937643009, 59);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680267934449270785, 60);\\n  }\\n\\n  function initTheRestOfTheTokens() public onlyOwner {\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680269033960898561, 61);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680270133472526337, 62);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680271232984154113, 63);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680272332495781889, 64);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680273432007409665, 65);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680274531519037441, 66);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680275631030665217, 67);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680276730542292993, 68);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680277830053920769, 69);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680278929565548545, 70);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680280029077176321, 71);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680281128588804097, 72);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680282228100431873, 73);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680283327612059649, 74);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680284427123687425, 75);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680285526635315201, 76);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680286626146942977, 77);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680287725658570753, 78);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680288825170198529, 79);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680289924681826305, 80);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680291024193454081, 81);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680292123705081857, 82);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680293223216709633, 83);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680294322728337409, 84);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680295422239965185, 85);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680296521751592961, 86);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680297621263220737, 87);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680298720774848513, 88);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680299820286476289, 89);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680300919798104065, 90);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680302019309731841, 91);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680303118821359617, 92);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680304218332987393, 93);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680305317844615169, 94);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680306417356242945, 95);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680307516867870721, 96);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680308616379498497, 97);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680309715891126273, 98);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680310815402754049, 99);\\n    addAllowedToken(85601406272210854214775655996269203562327957411057160318308680311914914381825, 100);\\n  }\\n\\n  /**\\n   * @dev checks if it's part of the allowed tokens\\n   */\\n  modifier isTokenAllowed(uint256 _tokenId) {\\n    bool found = false;\\n    for (uint128 i = 0; i < allowedTokens.length; i++) {\\n      if (allowedTokens[i] == _tokenId) found = true;\\n    }\\n    require(found, \\\"BadCacheBridge: token id does not exists\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev checks if it's part of the new allowed tokens\\n   */\\n  modifier isNewTokenAllowed(uint256 _tokenId) {\\n    bool found = false;\\n\\n    for (uint128 i = 0; i < newTokenIds.length; i++) {\\n      if (newTokenIds[i] == _tokenId) found = true;\\n    }\\n    require(found, \\\"BadCacheBridge: new token id does not exists\\\");\\n    _;\\n  }\\n\\n  function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 j = _i;\\n    uint256 len;\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n    bytes memory bstr = new bytes(len);\\n    uint256 k = len;\\n    while (_i != 0) {\\n      k = k - 1;\\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n      bytes1 b1 = bytes1(temp);\\n      bstr[k] = b1;\\n      _i /= 10;\\n    }\\n    return string(bstr);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/opensea/OpenSeaIERC1155.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nabstract contract OpenSeaIERC1155 is IERC1155 {}\\n\"\r\n    },\r\n    \"contracts/core/BadCacheI.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.6;\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract BadCacheI is IERC721, Ownable {\\n  function setTokenUri(uint256 _tokenId, string memory _tokenURI) public virtual;\\n\\n  function mint(address _owner, uint256 _tokenId) public virtual;\\n\\n  function exists(uint256 _tokenId) public view virtual returns (bool);\\n\\n  function getMaxId() public view virtual returns (uint256);\\n\\n  function setMaxId(uint256 _newMaxId) public virtual;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MintedBadCache721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ReceivedTransferFromBadCache721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedTransferFromOpenSea\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_newTokenId\",\"type\":\"uint16\"}],\"name\":\"addAllowedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressesThatTransferedIds\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBadCache721ProxiedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCustomIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpenSeaProxiedtoken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransferCount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initTheRestOfTheTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"mintBadCache721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf1155\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setBadCache721ProxiedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseUri\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setOpenSeaProxiedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferBadCache1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferBadCache721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipOf721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BadCacheBridge","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}