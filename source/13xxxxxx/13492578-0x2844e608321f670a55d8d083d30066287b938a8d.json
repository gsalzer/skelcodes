{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/0.4.24/interfaces/IBeaconReportReceiver.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2020 Lido <info@lido.fi>\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.4.24;\\n\\n\\n/**\\n  * @title Interface defining a callback that the quorum will call on every quorum reached\\n  */\\ninterface IBeaconReportReceiver {\\n    /**\\n      * @notice Callback to be called by the oracle contract upon the quorum is reached\\n      * @param _postTotalPooledEther total pooled ether on Lido right after the quorum value was reported\\n      * @param _preTotalPooledEther total pooled ether on Lido right before the quorum value was reported\\n      * @param _timeElapsed time elapsed in seconds between the last and the previous quorum\\n      */\\n    function processLidoOracleReport(uint256 _postTotalPooledEther,\\n                                     uint256 _preTotalPooledEther,\\n                                     uint256 _timeElapsed) external;\\n}\\n\"\r\n    },\r\n    \"contracts/0.4.24/test_helpers/BeaconReportReceiverMock.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2020 Lido <info@lido.fi>\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"../interfaces/IBeaconReportReceiver.sol\\\";\\n\\n\\ncontract BeaconReportReceiverMock is IBeaconReportReceiver {\\n    uint256 public postTotalPooledEther;\\n    uint256 public preTotalPooledEther;\\n    uint256 public timeElapsed;\\n    uint256 public gas;\\n    \\n    function processLidoOracleReport(uint256 _postTotalPooledEther,\\n                                     uint256 _preTotalPooledEther,\\n                                     uint256 _timeElapsed) external {\\n        gas = gasleft();\\n        postTotalPooledEther = _postTotalPooledEther;\\n        preTotalPooledEther = _preTotalPooledEther;\\n        timeElapsed = _timeElapsed;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/0.4.24/oracle/LidoOracle.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2020 Lido <info@lido.fi>\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\n/* See contracts/COMPILERS.md */\\npragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IBeaconReportReceiver.sol\\\";\\nimport \\\"../interfaces/ILido.sol\\\";\\nimport \\\"../interfaces/ILidoOracle.sol\\\";\\n\\nimport \\\"./ReportUtils.sol\\\";\\n\\n/**\\n * @title Implementation of an ETH 2.0 -> ETH oracle\\n *\\n * The goal of the oracle is to inform other parts of the system about balances controlled by the\\n * DAO on the ETH 2.0 side. The balances can go up because of reward accumulation and can go down\\n * because of slashing.\\n *\\n * The timeline is divided into consecutive frames. Every oracle member may push its report once\\n * per frame. When the equal reports reach the configurable 'quorum' value, this frame is\\n * considered finalized and the resulting report is pushed to Lido.\\n *\\n * Not all frames may come to a quorum. Oracles may report only to the first epoch of the frame and\\n * only if no quorum is reached for this epoch yet.\\n */\\ncontract LidoOracle is ILidoOracle, AragonApp {\\n    using SafeMath for uint256;\\n    using ReportUtils for uint256;\\n\\n    struct BeaconSpec {\\n        uint64 epochsPerFrame;\\n        uint64 slotsPerEpoch;\\n        uint64 secondsPerSlot;\\n        uint64 genesisTime;\\n    }\\n\\n    /// ACL\\n    bytes32 constant public MANAGE_MEMBERS =\\n        0xbf6336045918ae0015f4cdb3441a2fdbfaa4bcde6558c8692aac7f56c69fb067; // keccak256(\\\"MANAGE_MEMBERS\\\")\\n    bytes32 constant public MANAGE_QUORUM =\\n        0xa5ffa9f45fa52c446078e834e1914561bd9c2ab1e833572d62af775da092ccbc; // keccak256(\\\"MANAGE_QUORUM\\\")\\n    bytes32 constant public SET_BEACON_SPEC =\\n        0x16a273d48baf8111397316e6d961e6836913acb23b181e6c5fb35ec0bd2648fc; // keccak256(\\\"SET_BEACON_SPEC\\\")\\n    bytes32 constant public SET_REPORT_BOUNDARIES =\\n        0x44adaee26c92733e57241cb0b26ffaa2d182ed7120ba3ecd7e0dce3635c01dc1; // keccak256(\\\"SET_REPORT_BOUNDARIES\\\")\\n    bytes32 constant public SET_BEACON_REPORT_RECEIVER =\\n        0xe22a455f1bfbaf705ac3e891a64e156da92cb0b42cfc389158e6e82bd57f37be; // keccak256(\\\"SET_BEACON_REPORT_RECEIVER\\\")\\n\\n    /// Maximum number of oracle committee members\\n    uint256 public constant MAX_MEMBERS = 256;\\n\\n    /// Eth1 denomination is 18 digits, while Eth2 has 9 digits. Because we work with Eth2\\n    /// balances and to support old interfaces expecting eth1 format, we multiply by this\\n    /// coefficient.\\n    uint128 internal constant DENOMINATION_OFFSET = 1e9;\\n\\n    uint256 internal constant MEMBER_NOT_FOUND = uint256(-1);\\n\\n    /// Number of exactly the same reports needed to finalize the epoch\\n    bytes32 internal constant QUORUM_POSITION =\\n        0xd43b42c1ba05a1ab3c178623a49b2cdb55f000ec70b9ccdba5740b3339a7589e; // keccak256(\\\"lido.LidoOracle.quorum\\\")\\n\\n    /// Address of the Lido contract\\n    bytes32 internal constant LIDO_POSITION =\\n        0xf6978a4f7e200f6d3a24d82d44c48bddabce399a3b8ec42a480ea8a2d5fe6ec5; // keccak256(\\\"lido.LidoOracle.lido\\\")\\n\\n    /// Storage for the actual beacon chain specification\\n    bytes32 internal constant BEACON_SPEC_POSITION =\\n        0x805e82d53a51be3dfde7cfed901f1f96f5dad18e874708b082adb8841e8ca909; // keccak256(\\\"lido.LidoOracle.beaconSpec\\\")\\n\\n    /// Version of the initialized contract data, v1 is 0\\n    bytes32 internal constant CONTRACT_VERSION_POSITION =\\n        0x75be19a3f314d89bd1f84d30a6c84e2f1cd7afc7b6ca21876564c265113bb7e4; // keccak256(\\\"lido.LidoOracle.contractVersion\\\")\\n\\n    /// Epoch that we currently collect reports\\n    bytes32 internal constant EXPECTED_EPOCH_ID_POSITION =\\n        0x65f1a0ee358a8a4000a59c2815dc768eb87d24146ca1ac5555cb6eb871aee915; // keccak256(\\\"lido.LidoOracle.expectedEpochId\\\")\\n\\n    /// The bitmask of the oracle members that pushed their reports\\n    bytes32 internal constant REPORTS_BITMASK_POSITION =\\n        0xea6fa022365e4737a3bb52facb00ddc693a656fb51ffb2b4bd24fb85bdc888be; // keccak256(\\\"lido.LidoOracle.reportsBitMask\\\")\\n\\n    /// Historic data about 2 last completed reports and their times\\n    bytes32 internal constant POST_COMPLETED_TOTAL_POOLED_ETHER_POSITION =\\n        0xaa8433b13d2b111d4f84f6f374bc7acbe20794944308876aa250fa9a73dc7f53; // keccak256(\\\"lido.LidoOracle.postCompletedTotalPooledEther\\\")\\n    bytes32 internal constant PRE_COMPLETED_TOTAL_POOLED_ETHER_POSITION =\\n        0x1043177539af09a67d747435df3ff1155a64cd93a347daaac9132a591442d43e; // keccak256(\\\"lido.LidoOracle.preCompletedTotalPooledEther\\\")\\n    bytes32 internal constant LAST_COMPLETED_EPOCH_ID_POSITION =\\n        0xdad15c0beecd15610092d84427258e369d2582df22869138b4c5265f049f574c; // keccak256(\\\"lido.LidoOracle.lastCompletedEpochId\\\")\\n    bytes32 internal constant TIME_ELAPSED_POSITION =\\n        0x8fe323f4ecd3bf0497252a90142003855cc5125cee76a5b5ba5d508c7ec28c3a; // keccak256(\\\"lido.LidoOracle.timeElapsed\\\")\\n\\n    /// Receiver address to be called when the report is pushed to Lido\\n    bytes32 internal constant BEACON_REPORT_RECEIVER_POSITION =\\n        0xb59039ed37776bc23c5d272e10b525a957a1dfad97f5006c84394b6b512c1564; // keccak256(\\\"lido.LidoOracle.beaconReportReceiver\\\")\\n\\n    /// Upper bound of the reported balance possible increase in APR, controlled by the governance\\n    bytes32 internal constant ALLOWED_BEACON_BALANCE_ANNUAL_RELATIVE_INCREASE_POSITION =\\n        0x613075ab597bed8ce2e18342385ce127d3e5298bc7a84e3db68dc64abd4811ac; // keccak256(\\\"lido.LidoOracle.allowedBeaconBalanceAnnualRelativeIncrease\\\")\\n\\n    /// Lower bound of the reported balance possible decrease, controlled by the governance\\n    ///\\n    /// @notice When slashing happens, the balance may decrease at a much faster pace. Slashing are\\n    /// one-time events that decrease the balance a fair amount - a few percent at a time in a\\n    /// realistic scenario. Thus, instead of sanity check for an APR, we check if the plain relative\\n    /// decrease is within bounds.  Note that it's not annual value, its just one-jump value.\\n    bytes32 internal constant ALLOWED_BEACON_BALANCE_RELATIVE_DECREASE_POSITION =\\n        0x92ba7776ed6c5d13cf023555a94e70b823a4aebd56ed522a77345ff5cd8a9109; // keccak256(\\\"lido.LidoOracle.allowedBeaconBalanceDecrease\\\")\\n\\n    /// This variable is from v1: the last reported epoch, used only in the initializer\\n    bytes32 internal constant V1_LAST_REPORTED_EPOCH_ID_POSITION =\\n        0xfe0250ed0c5d8af6526c6d133fccb8e5a55dd6b1aa6696ed0c327f8e517b5a94; // keccak256(\\\"lido.LidoOracle.lastReportedEpochId\\\")\\n\\n    /// Contract structured storage\\n    address[] private members;                /// slot 0: oracle committee members\\n    uint256[] private currentReportVariants;  /// slot 1: reporting storage\\n\\n\\n    /**\\n     * @notice Return the Lido contract address\\n     */\\n    function getLido() public view returns (ILido) {\\n        return ILido(LIDO_POSITION.getStorageAddress());\\n    }\\n\\n    /**\\n     * @notice Return the number of exactly the same reports needed to finalize the epoch\\n     */\\n    function getQuorum() public view returns (uint256) {\\n        return QUORUM_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n     * @notice Return the upper bound of the reported balance possible increase in APR\\n     */\\n    function getAllowedBeaconBalanceAnnualRelativeIncrease() external view returns (uint256) {\\n        return ALLOWED_BEACON_BALANCE_ANNUAL_RELATIVE_INCREASE_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n     * @notice Return the lower bound of the reported balance possible decrease\\n     */\\n    function getAllowedBeaconBalanceRelativeDecrease() external view returns (uint256) {\\n        return ALLOWED_BEACON_BALANCE_RELATIVE_DECREASE_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n     * @notice Set the upper bound of the reported balance possible increase in APR to `_value`\\n     */\\n    function setAllowedBeaconBalanceAnnualRelativeIncrease(uint256 _value) external auth(SET_REPORT_BOUNDARIES) {\\n        ALLOWED_BEACON_BALANCE_ANNUAL_RELATIVE_INCREASE_POSITION.setStorageUint256(_value);\\n        emit AllowedBeaconBalanceAnnualRelativeIncreaseSet(_value);\\n    }\\n\\n    /**\\n     * @notice Set the lower bound of the reported balance possible decrease to `_value`\\n     */\\n    function setAllowedBeaconBalanceRelativeDecrease(uint256 _value) external auth(SET_REPORT_BOUNDARIES) {\\n        ALLOWED_BEACON_BALANCE_RELATIVE_DECREASE_POSITION.setStorageUint256(_value);\\n        emit AllowedBeaconBalanceRelativeDecreaseSet(_value);\\n    }\\n\\n    /**\\n     * @notice Return the receiver contract address to be called when the report is pushed to Lido\\n     */\\n    function getBeaconReportReceiver() external view returns (address) {\\n        return address(BEACON_REPORT_RECEIVER_POSITION.getStorageUint256());\\n    }\\n\\n    /**\\n     * @notice Set the receiver contract address to `_addr` to be called when the report is pushed\\n     * @dev Specify 0 to disable this functionality\\n     */\\n    function setBeaconReportReceiver(address _addr) external auth(SET_BEACON_REPORT_RECEIVER) {\\n        BEACON_REPORT_RECEIVER_POSITION.setStorageUint256(uint256(_addr));\\n        emit BeaconReportReceiverSet(_addr);\\n    }\\n\\n    /**\\n     * @notice Return the current reporting bitmap, representing oracles who have already pushed\\n     * their version of report during the expected epoch\\n     * @dev Every oracle bit corresponds to the index of the oracle in the current members list\\n     */\\n    function getCurrentOraclesReportStatus() external view returns (uint256) {\\n        return REPORTS_BITMASK_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n     * @notice Return the current reporting variants array size\\n     */\\n    function getCurrentReportVariantsSize() external view returns (uint256) {\\n        return currentReportVariants.length;\\n    }\\n\\n    /**\\n     * @notice Return the current reporting array element with index `_index`\\n     */\\n    function getCurrentReportVariant(uint256 _index)\\n        external\\n        view\\n        returns (\\n            uint64 beaconBalance,\\n            uint32 beaconValidators,\\n            uint16 count\\n        )\\n    {\\n        return currentReportVariants[_index].decodeWithCount();\\n    }\\n\\n    /**\\n     * @notice Returns epoch that can be reported by oracles\\n     */\\n    function getExpectedEpochId() external view returns (uint256) {\\n        return EXPECTED_EPOCH_ID_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n     * @notice Return the current oracle member committee list\\n     */\\n    function getOracleMembers() external view returns (address[]) {\\n        return members;\\n    }\\n\\n    /**\\n     * @notice Return the initialized version of this contract starting from 0\\n     */\\n    function getVersion() external view returns (uint256) {\\n        return CONTRACT_VERSION_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n     * @notice Return beacon specification data\\n     */\\n    function getBeaconSpec()\\n        external\\n        view\\n        returns (\\n            uint64 epochsPerFrame,\\n            uint64 slotsPerEpoch,\\n            uint64 secondsPerSlot,\\n            uint64 genesisTime\\n        )\\n    {\\n        BeaconSpec memory beaconSpec = _getBeaconSpec();\\n        return (\\n            beaconSpec.epochsPerFrame,\\n            beaconSpec.slotsPerEpoch,\\n            beaconSpec.secondsPerSlot,\\n            beaconSpec.genesisTime\\n        );\\n    }\\n\\n    /**\\n     * @notice Update beacon specification data\\n     */\\n    function setBeaconSpec(\\n        uint64 _epochsPerFrame,\\n        uint64 _slotsPerEpoch,\\n        uint64 _secondsPerSlot,\\n        uint64 _genesisTime\\n    )\\n        external\\n        auth(SET_BEACON_SPEC)\\n    {\\n        _setBeaconSpec(\\n            _epochsPerFrame,\\n            _slotsPerEpoch,\\n            _secondsPerSlot,\\n            _genesisTime\\n        );\\n    }\\n\\n    /**\\n     * @notice Return the epoch calculated from current timestamp\\n     */\\n    function getCurrentEpochId() external view returns (uint256) {\\n        BeaconSpec memory beaconSpec = _getBeaconSpec();\\n        return _getCurrentEpochId(beaconSpec);\\n    }\\n\\n    /**\\n     * @notice Return currently reportable epoch (the first epoch of the current frame) as well as\\n     * its start and end times in seconds\\n     */\\n    function getCurrentFrame()\\n        external\\n        view\\n        returns (\\n            uint256 frameEpochId,\\n            uint256 frameStartTime,\\n            uint256 frameEndTime\\n        )\\n    {\\n        BeaconSpec memory beaconSpec = _getBeaconSpec();\\n        uint64 genesisTime = beaconSpec.genesisTime;\\n        uint64 secondsPerEpoch = beaconSpec.secondsPerSlot * beaconSpec.slotsPerEpoch;\\n\\n        frameEpochId = _getFrameFirstEpochId(_getCurrentEpochId(beaconSpec), beaconSpec);\\n        frameStartTime = frameEpochId * secondsPerEpoch + genesisTime;\\n        frameEndTime = (frameEpochId + beaconSpec.epochsPerFrame) * secondsPerEpoch + genesisTime - 1;\\n    }\\n\\n    /**\\n     * @notice Return last completed epoch\\n     */\\n    function getLastCompletedEpochId() external view returns (uint256) {\\n        return LAST_COMPLETED_EPOCH_ID_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n     * @notice Report beacon balance and its change during the last frame\\n     */\\n    function getLastCompletedReportDelta()\\n        external\\n        view\\n        returns (\\n            uint256 postTotalPooledEther,\\n            uint256 preTotalPooledEther,\\n            uint256 timeElapsed\\n        )\\n    {\\n        postTotalPooledEther = POST_COMPLETED_TOTAL_POOLED_ETHER_POSITION.getStorageUint256();\\n        preTotalPooledEther = PRE_COMPLETED_TOTAL_POOLED_ETHER_POSITION.getStorageUint256();\\n        timeElapsed = TIME_ELAPSED_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n     * @notice Initialize the contract v2 data, with sanity check bounds\\n     * (`_allowedBeaconBalanceAnnualRelativeIncrease`, `_allowedBeaconBalanceRelativeDecrease`)\\n     * @dev Original initialize function removed from v2 because it is invoked only once\\n     */\\n    function initialize_v2(\\n        uint256 _allowedBeaconBalanceAnnualRelativeIncrease,\\n        uint256 _allowedBeaconBalanceRelativeDecrease\\n    )\\n        external\\n    {\\n        require(CONTRACT_VERSION_POSITION.getStorageUint256() == 0, \\\"ALREADY_INITIALIZED\\\");\\n        CONTRACT_VERSION_POSITION.setStorageUint256(1);\\n        emit ContractVersionSet(1);\\n\\n        ALLOWED_BEACON_BALANCE_ANNUAL_RELATIVE_INCREASE_POSITION\\n            .setStorageUint256(_allowedBeaconBalanceAnnualRelativeIncrease);\\n        emit AllowedBeaconBalanceAnnualRelativeIncreaseSet(_allowedBeaconBalanceAnnualRelativeIncrease);\\n\\n        ALLOWED_BEACON_BALANCE_RELATIVE_DECREASE_POSITION\\n            .setStorageUint256(_allowedBeaconBalanceRelativeDecrease);\\n        emit AllowedBeaconBalanceRelativeDecreaseSet(_allowedBeaconBalanceRelativeDecrease);\\n\\n        // set last completed epoch as V1's contract last reported epoch, in the vast majority of\\n        // cases this is true, in others the error is within a frame\\n        uint256 lastReportedEpoch = V1_LAST_REPORTED_EPOCH_ID_POSITION.getStorageUint256();\\n        LAST_COMPLETED_EPOCH_ID_POSITION.setStorageUint256(lastReportedEpoch);\\n\\n        // set expected epoch to the first epoch for the next frame\\n        BeaconSpec memory beaconSpec = _getBeaconSpec();\\n        uint256 expectedEpoch = _getFrameFirstEpochId(lastReportedEpoch, beaconSpec) + beaconSpec.epochsPerFrame;\\n        EXPECTED_EPOCH_ID_POSITION.setStorageUint256(expectedEpoch);\\n        emit ExpectedEpochIdUpdated(expectedEpoch);\\n    }\\n\\n    /**\\n     * @notice Add `_member` to the oracle member committee list\\n     */\\n    function addOracleMember(address _member) external auth(MANAGE_MEMBERS) {\\n        require(address(0) != _member, \\\"BAD_ARGUMENT\\\");\\n        require(MEMBER_NOT_FOUND == _getMemberId(_member), \\\"MEMBER_EXISTS\\\");\\n\\n        members.push(_member);\\n        require(members.length < MAX_MEMBERS, \\\"TOO_MANY_MEMBERS\\\");\\n        emit MemberAdded(_member);\\n    }\\n\\n    /**\\n     * @notice Remove '_member` from the oracle member committee list\\n     */\\n    function removeOracleMember(address _member) external auth(MANAGE_MEMBERS) {\\n        uint256 index = _getMemberId(_member);\\n        require(index != MEMBER_NOT_FOUND, \\\"MEMBER_NOT_FOUND\\\");\\n        uint256 last = members.length - 1;\\n        if (index != last) members[index] = members[last];\\n        members.length--;\\n        emit MemberRemoved(_member);\\n\\n        // delete the data for the last epoch, let remained oracles report it again\\n        REPORTS_BITMASK_POSITION.setStorageUint256(0);\\n        delete currentReportVariants;\\n    }\\n\\n    /**\\n     * @notice Set the number of exactly the same reports needed to finalize the epoch to `_quorum`\\n     */\\n    function setQuorum(uint256 _quorum) external auth(MANAGE_QUORUM) {\\n        require(0 != _quorum, \\\"QUORUM_WONT_BE_MADE\\\");\\n        uint256 oldQuorum = QUORUM_POSITION.getStorageUint256();\\n        QUORUM_POSITION.setStorageUint256(_quorum);\\n        emit QuorumChanged(_quorum);\\n\\n        // If the quorum value lowered, check existing reports whether it is time to push\\n        if (oldQuorum > _quorum) {\\n            (bool isQuorum, uint256 report) = _getQuorumReport(_quorum);\\n            if (isQuorum) {\\n                (uint64 beaconBalance, uint32 beaconValidators) = report.decode();\\n                _push(\\n                     EXPECTED_EPOCH_ID_POSITION.getStorageUint256(),\\n                     DENOMINATION_OFFSET * uint128(beaconBalance),\\n                     beaconValidators,\\n                     _getBeaconSpec()\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Accept oracle committee member reports from the ETH 2.0 side\\n     * @param _epochId Beacon chain epoch\\n     * @param _beaconBalance Balance in gwei on the ETH 2.0 side (9-digit denomination)\\n     * @param _beaconValidators Number of validators visible in this epoch\\n     */\\n    function reportBeacon(uint256 _epochId, uint64 _beaconBalance, uint32 _beaconValidators) external {\\n        BeaconSpec memory beaconSpec = _getBeaconSpec();\\n        uint256 expectedEpoch = EXPECTED_EPOCH_ID_POSITION.getStorageUint256();\\n        require(_epochId >= expectedEpoch, \\\"EPOCH_IS_TOO_OLD\\\");\\n\\n        // if expected epoch has advanced, check that this is the first epoch of the current frame\\n        // and clear the last unsuccessful reporting\\n        if (_epochId > expectedEpoch) {\\n            require(_epochId == _getFrameFirstEpochId(_getCurrentEpochId(beaconSpec), beaconSpec), \\\"UNEXPECTED_EPOCH\\\");\\n            _clearReportingAndAdvanceTo(_epochId);\\n        }\\n\\n        uint128 beaconBalanceEth1 = DENOMINATION_OFFSET * uint128(_beaconBalance);\\n        emit BeaconReported(_epochId, beaconBalanceEth1, _beaconValidators, msg.sender);\\n\\n        // make sure the oracle is from members list and has not yet voted\\n        uint256 index = _getMemberId(msg.sender);\\n        require(index != MEMBER_NOT_FOUND, \\\"MEMBER_NOT_FOUND\\\");\\n        uint256 bitMask = REPORTS_BITMASK_POSITION.getStorageUint256();\\n        uint256 mask = 1 << index;\\n        require(bitMask & mask == 0, \\\"ALREADY_SUBMITTED\\\");\\n        REPORTS_BITMASK_POSITION.setStorageUint256(bitMask | mask);\\n\\n        // push this report to the matching kind\\n        uint256 report = ReportUtils.encode(_beaconBalance, _beaconValidators);\\n        uint256 quorum = getQuorum();\\n        uint256 i = 0;\\n\\n        // iterate on all report variants we already have, limited by the oracle members maximum\\n        while (i < currentReportVariants.length && currentReportVariants[i].isDifferent(report)) ++i;\\n        if (i < currentReportVariants.length) {\\n            if (currentReportVariants[i].getCount() + 1 >= quorum) {\\n                _push(_epochId, beaconBalanceEth1, _beaconValidators, beaconSpec);\\n            } else {\\n                ++currentReportVariants[i]; // increment report counter, see ReportUtils for details\\n            }\\n        } else {\\n            if (quorum == 1) {\\n                _push(_epochId, beaconBalanceEth1, _beaconValidators, beaconSpec);\\n            } else {\\n                currentReportVariants.push(report + 1);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Return beacon specification data\\n     */\\n    function _getBeaconSpec()\\n        internal\\n        view\\n        returns (BeaconSpec memory beaconSpec)\\n    {\\n        uint256 data = BEACON_SPEC_POSITION.getStorageUint256();\\n        beaconSpec.epochsPerFrame = uint64(data >> 192);\\n        beaconSpec.slotsPerEpoch = uint64(data >> 128);\\n        beaconSpec.secondsPerSlot = uint64(data >> 64);\\n        beaconSpec.genesisTime = uint64(data);\\n        return beaconSpec;\\n    }\\n\\n    /**\\n     * @notice Return whether the `_quorum` is reached and the final report\\n     */\\n    function _getQuorumReport(uint256 _quorum) internal view returns (bool isQuorum, uint256 report) {\\n        // check most frequent cases first: all reports are the same or no reports yet\\n        if (currentReportVariants.length == 1) {\\n            return (currentReportVariants[0].getCount() >= _quorum, currentReportVariants[0]);\\n        } else if (currentReportVariants.length == 0) {\\n            return (false, 0);\\n        }\\n\\n        // if more than 2 kind of reports exist, choose the most frequent\\n        uint256 maxind = 0;\\n        uint256 repeat = 0;\\n        uint16 maxval = 0;\\n        uint16 cur = 0;\\n        for (uint256 i = 0; i < currentReportVariants.length; ++i) {\\n            cur = currentReportVariants[i].getCount();\\n            if (cur >= maxval) {\\n                if (cur == maxval) {\\n                    ++repeat;\\n                } else {\\n                    maxind = i;\\n                    maxval = cur;\\n                    repeat = 0;\\n                }\\n            }\\n        }\\n        return (maxval >= _quorum && repeat == 0, currentReportVariants[maxind]);\\n    }\\n\\n    /**\\n     * @notice Set beacon specification data\\n     */\\n    function _setBeaconSpec(\\n        uint64 _epochsPerFrame,\\n        uint64 _slotsPerEpoch,\\n        uint64 _secondsPerSlot,\\n        uint64 _genesisTime\\n    )\\n        internal\\n    {\\n        require(_epochsPerFrame > 0, \\\"BAD_EPOCHS_PER_FRAME\\\");\\n        require(_slotsPerEpoch > 0, \\\"BAD_SLOTS_PER_EPOCH\\\");\\n        require(_secondsPerSlot > 0, \\\"BAD_SECONDS_PER_SLOT\\\");\\n        require(_genesisTime > 0, \\\"BAD_GENESIS_TIME\\\");\\n\\n        uint256 data = (\\n            uint256(_epochsPerFrame) << 192 |\\n            uint256(_slotsPerEpoch) << 128 |\\n            uint256(_secondsPerSlot) << 64 |\\n            uint256(_genesisTime)\\n        );\\n        BEACON_SPEC_POSITION.setStorageUint256(data);\\n        emit BeaconSpecSet(\\n            _epochsPerFrame,\\n            _slotsPerEpoch,\\n            _secondsPerSlot,\\n            _genesisTime);\\n    }\\n\\n    /**\\n     * @notice Push the given report to Lido and performs accompanying accounting\\n     * @param _epochId Beacon chain epoch, proven to be >= expected epoch and <= current epoch\\n     * @param _beaconBalanceEth1 Validators balance in eth1 (18-digit denomination)\\n     * @param _beaconSpec current beacon specification data\\n     */\\n    function _push(\\n        uint256 _epochId,\\n        uint128 _beaconBalanceEth1,\\n        uint128 _beaconValidators,\\n        BeaconSpec memory _beaconSpec\\n    )\\n        internal\\n    {\\n        emit Completed(_epochId, _beaconBalanceEth1, _beaconValidators);\\n\\n        // now this frame is completed, so the expected epoch should be advanced to the first epoch\\n        // of the next frame\\n        _clearReportingAndAdvanceTo(_epochId + _beaconSpec.epochsPerFrame);\\n\\n        // report to the Lido and collect stats\\n        ILido lido = getLido();\\n        uint256 prevTotalPooledEther = lido.totalSupply();\\n        lido.pushBeacon(_beaconValidators, _beaconBalanceEth1);\\n        uint256 postTotalPooledEther = lido.totalSupply();\\n\\n        PRE_COMPLETED_TOTAL_POOLED_ETHER_POSITION.setStorageUint256(prevTotalPooledEther);\\n        POST_COMPLETED_TOTAL_POOLED_ETHER_POSITION.setStorageUint256(postTotalPooledEther);\\n        uint256 timeElapsed = (_epochId - LAST_COMPLETED_EPOCH_ID_POSITION.getStorageUint256()) *\\n            _beaconSpec.slotsPerEpoch * _beaconSpec.secondsPerSlot;\\n        TIME_ELAPSED_POSITION.setStorageUint256(timeElapsed);\\n        LAST_COMPLETED_EPOCH_ID_POSITION.setStorageUint256(_epochId);\\n\\n        // rollback on boundaries violation\\n        _reportSanityChecks(postTotalPooledEther, prevTotalPooledEther, timeElapsed);\\n\\n        // emit detailed statistics and call the quorum delegate with this data\\n        emit PostTotalShares(postTotalPooledEther, prevTotalPooledEther, timeElapsed, lido.getTotalShares());\\n        IBeaconReportReceiver receiver = IBeaconReportReceiver(BEACON_REPORT_RECEIVER_POSITION.getStorageUint256());\\n        if (address(receiver) != address(0)) {\\n            receiver.processLidoOracleReport(postTotalPooledEther, prevTotalPooledEther, timeElapsed);\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove the current reporting progress and advances to accept the later epoch `_epochId`\\n     */\\n    function _clearReportingAndAdvanceTo(uint256 _epochId) internal {\\n        REPORTS_BITMASK_POSITION.setStorageUint256(0);\\n        EXPECTED_EPOCH_ID_POSITION.setStorageUint256(_epochId);\\n        delete currentReportVariants;\\n        emit ExpectedEpochIdUpdated(_epochId);\\n    }\\n\\n    /**\\n     * @notice Performs logical consistency check of the Lido changes as the result of reports push\\n     * @dev To make oracles less dangerous, we limit rewards report by 10% _annual_ increase and 5%\\n     * _instant_ decrease in stake, with both values configurable by the governance in case of\\n     * extremely unusual circumstances.\\n     **/\\n    function _reportSanityChecks(\\n        uint256 _postTotalPooledEther,\\n        uint256 _preTotalPooledEther,\\n        uint256 _timeElapsed)\\n        internal\\n        view\\n    {\\n        if (_postTotalPooledEther >= _preTotalPooledEther) {\\n            // increase                 = _postTotalPooledEther - _preTotalPooledEther,\\n            // relativeIncrease         = increase / _preTotalPooledEther,\\n            // annualRelativeIncrease   = relativeIncrease / (timeElapsed / 365 days),\\n            // annualRelativeIncreaseBp = annualRelativeIncrease * 10000, in basis points 0.01% (1e-4)\\n            uint256 allowedAnnualRelativeIncreaseBp =\\n                ALLOWED_BEACON_BALANCE_ANNUAL_RELATIVE_INCREASE_POSITION.getStorageUint256();\\n            // check that annualRelativeIncreaseBp <= allowedAnnualRelativeIncreaseBp\\n            require(uint256(10000 * 365 days).mul(_postTotalPooledEther - _preTotalPooledEther) <=\\n                    allowedAnnualRelativeIncreaseBp.mul(_preTotalPooledEther).mul(_timeElapsed),\\n                    \\\"ALLOWED_BEACON_BALANCE_INCREASE\\\");\\n        } else {\\n            // decrease           = _preTotalPooledEther - _postTotalPooledEther\\n            // relativeDecrease   = decrease / _preTotalPooledEther\\n            // relativeDecreaseBp = relativeDecrease * 10000, in basis points 0.01% (1e-4)\\n            uint256 allowedRelativeDecreaseBp =\\n                ALLOWED_BEACON_BALANCE_RELATIVE_DECREASE_POSITION.getStorageUint256();\\n            // check that relativeDecreaseBp <= allowedRelativeDecreaseBp\\n            require(uint256(10000).mul(_preTotalPooledEther - _postTotalPooledEther) <=\\n                    allowedRelativeDecreaseBp.mul(_preTotalPooledEther),\\n                    \\\"ALLOWED_BEACON_BALANCE_DECREASE\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Return `_member` index in the members list or MEMBER_NOT_FOUND\\n     */\\n    function _getMemberId(address _member) internal view returns (uint256) {\\n        uint256 length = members.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            if (members[i] == _member) {\\n                return i;\\n            }\\n        }\\n        return MEMBER_NOT_FOUND;\\n    }\\n\\n    /**\\n     * @notice Return the epoch calculated from current timestamp\\n     */\\n    function _getCurrentEpochId(BeaconSpec memory _beaconSpec) internal view returns (uint256) {\\n        return (_getTime() - _beaconSpec.genesisTime) / (_beaconSpec.slotsPerEpoch * _beaconSpec.secondsPerSlot);\\n    }\\n\\n    /**\\n     * @notice Return the first epoch of the frame that `_epochId` belongs to\\n     */\\n    function _getFrameFirstEpochId(uint256 _epochId, BeaconSpec memory _beaconSpec) internal view returns (uint256) {\\n        return _epochId / _beaconSpec.epochsPerFrame * _beaconSpec.epochsPerFrame;\\n    }\\n\\n    /**\\n     * @notice Return the current timestamp\\n     */\\n    function _getTime() internal view returns (uint256) {\\n        return block.timestamp; // solhint-disable-line not-rely-on-time\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/apps/AragonApp.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\nimport \\\"../common/Autopetrified.sol\\\";\\nimport \\\"../common/ConversionHelpers.sol\\\";\\nimport \\\"../common/ReentrancyGuard.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../evmscript/EVMScriptRunner.sol\\\";\\n\\n\\n// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\\n// that they can never be initialized.\\n// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\\n// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\\n// are included so that they are automatically usable by subclassing contracts\\ncontract AragonApp is AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\\n    string private constant ERROR_AUTH_FAILED = \\\"APP_AUTH_FAILED\\\";\\n\\n    modifier auth(bytes32 _role) {\\n        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    modifier authP(bytes32 _role, uint256[] _params) {\\n        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\\n    * @param _sender Sender of the call\\n    * @param _role Role on this app\\n    * @param _params Permission params for the role\\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\\n    *         Always returns false if the app hasn't been initialized yet.\\n    */\\n    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\\n        if (!hasInitialized()) {\\n            return false;\\n        }\\n\\n        IKernel linkedKernel = kernel();\\n        if (address(linkedKernel) == address(0)) {\\n            return false;\\n        }\\n\\n        return linkedKernel.hasPermission(\\n            _sender,\\n            address(this),\\n            _role,\\n            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\\n        );\\n    }\\n\\n    /**\\n    * @dev Get the recovery vault for the app\\n    * @return Recovery vault address for the app\\n    */\\n    function getRecoveryVault() public view returns (address) {\\n        // Funds recovery via a vault is only available when used with a kernel\\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/lib/math/SafeMath.sol\": {\r\n      \"content\": \"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\\n// Adapted to use pragma ^0.4.24 and satisfy our linter rules\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    string private constant ERROR_ADD_OVERFLOW = \\\"MATH_ADD_OVERFLOW\\\";\\n    string private constant ERROR_SUB_UNDERFLOW = \\\"MATH_SUB_UNDERFLOW\\\";\\n    string private constant ERROR_MUL_OVERFLOW = \\\"MATH_MUL_OVERFLOW\\\";\\n    string private constant ERROR_DIV_ZERO = \\\"MATH_DIV_ZERO\\\";\\n\\n    /**\\n    * @dev Multiplies two numbers, reverts on overflow.\\n    */\\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (_a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = _a * _b;\\n        require(c / _a == _b, ERROR_MUL_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\\n        uint256 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\\n        uint256 c = _a - _b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, reverts on overflow.\\n    */\\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        uint256 c = _a + _b;\\n        require(c >= _a, ERROR_ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, ERROR_DIV_ZERO);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/0.4.24/interfaces/ILido.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2020 Lido <info@lido.fi>\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.4.24;\\n\\n\\n/**\\n  * @title Liquid staking pool\\n  *\\n  * For the high-level description of the pool operation please refer to the paper.\\n  * Pool manages withdrawal keys and fees. It receives ether submitted by users on the ETH 1 side\\n  * and stakes it via the deposit_contract.sol contract. It doesn't hold ether on it's balance,\\n  * only a small portion (buffer) of it.\\n  * It also mints new tokens for rewards generated at the ETH 2.0 side.\\n  */\\ninterface ILido {\\n    /**\\n     * @dev From ISTETH interface, because \\\"Interfaces cannot inherit\\\".\\n     */\\n    function totalSupply() external view returns (uint256);\\n    function getTotalShares() external view returns (uint256);\\n\\n    /**\\n      * @notice Stop pool routine operations\\n      */\\n    function stop() external;\\n\\n    /**\\n      * @notice Resume pool routine operations\\n      */\\n    function resume() external;\\n\\n    event Stopped();\\n    event Resumed();\\n\\n\\n    /**\\n      * @notice Set fee rate to `_feeBasisPoints` basis points. The fees are accrued when oracles report staking results\\n      * @param _feeBasisPoints Fee rate, in basis points\\n      */\\n    function setFee(uint16 _feeBasisPoints) external;\\n\\n    /**\\n      * @notice Set fee distribution: `_treasuryFeeBasisPoints` basis points go to the treasury, `_insuranceFeeBasisPoints` basis points go to the insurance fund, `_operatorsFeeBasisPoints` basis points go to node operators. The sum has to be 10 000.\\n      */\\n    function setFeeDistribution(\\n        uint16 _treasuryFeeBasisPoints,\\n        uint16 _insuranceFeeBasisPoints,\\n        uint16 _operatorsFeeBasisPoints)\\n        external;\\n\\n    /**\\n      * @notice Returns staking rewards fee rate\\n      */\\n    function getFee() external view returns (uint16 feeBasisPoints);\\n\\n    /**\\n      * @notice Returns fee distribution proportion\\n      */\\n    function getFeeDistribution() external view returns (uint16 treasuryFeeBasisPoints, uint16 insuranceFeeBasisPoints,\\n                                                         uint16 operatorsFeeBasisPoints);\\n\\n    event FeeSet(uint16 feeBasisPoints);\\n\\n    event FeeDistributionSet(uint16 treasuryFeeBasisPoints, uint16 insuranceFeeBasisPoints, uint16 operatorsFeeBasisPoints);\\n\\n\\n    /**\\n      * @notice Set credentials to withdraw ETH on ETH 2.0 side after the phase 2 is launched to `_withdrawalCredentials`\\n      * @dev Note that setWithdrawalCredentials discards all unused signing keys as the signatures are invalidated.\\n      * @param _withdrawalCredentials hash of withdrawal multisignature key as accepted by\\n      *        the deposit_contract.deposit function\\n      */\\n    function setWithdrawalCredentials(bytes32 _withdrawalCredentials) external;\\n\\n    /**\\n      * @notice Returns current credentials to withdraw ETH on ETH 2.0 side after the phase 2 is launched\\n      */\\n    function getWithdrawalCredentials() external view returns (bytes);\\n\\n\\n    event WithdrawalCredentialsSet(bytes32 withdrawalCredentials);\\n\\n\\n    /**\\n      * @notice Ether on the ETH 2.0 side reported by the oracle\\n      * @param _epoch Epoch id\\n      * @param _eth2balance Balance in wei on the ETH 2.0 side\\n      */\\n    function pushBeacon(uint256 _epoch, uint256 _eth2balance) external;\\n\\n\\n    // User functions\\n\\n    /**\\n      * @notice Adds eth to the pool\\n      * @return StETH Amount of StETH generated\\n      */\\n    function submit(address _referral) external payable returns (uint256 StETH);\\n\\n    // Records a deposit made by a user\\n    event Submitted(address indexed sender, uint256 amount, address referral);\\n\\n    // The `_amount` of ether was sent to the deposit_contract.deposit function.\\n    event Unbuffered(uint256 amount);\\n\\n    /**\\n      * @notice Issues withdrawal request. Large withdrawals will be processed only after the phase 2 launch.\\n      * @param _amount Amount of StETH to burn\\n      * @param _pubkeyHash Receiving address\\n      */\\n    function withdraw(uint256 _amount, bytes32 _pubkeyHash) external;\\n\\n    // Requested withdrawal of `etherAmount` to `pubkeyHash` on the ETH 2.0 side, `tokenAmount` burned by `sender`,\\n    // `sentFromBuffer` was sent on the current Ethereum side.\\n    event Withdrawal(address indexed sender, uint256 tokenAmount, uint256 sentFromBuffer,\\n                     bytes32 indexed pubkeyHash, uint256 etherAmount);\\n\\n\\n    // Info functions\\n\\n    /**\\n      * @notice Gets the amount of Ether controlled by the system\\n      */\\n    function getTotalPooledEther() external view returns (uint256);\\n\\n    /**\\n      * @notice Gets the amount of Ether temporary buffered on this contract balance\\n      */\\n    function getBufferedEther() external view returns (uint256);\\n\\n    /**\\n      * @notice Returns the key values related to Beacon-side\\n      * @return depositedValidators - number of deposited validators\\n      * @return beaconValidators - number of Lido's validators visible in the Beacon state, reported by oracles\\n      * @return beaconBalance - total amount of Beacon-side Ether (sum of all the balances of Lido validators)\\n      */\\n    function getBeaconStat() external view returns (uint256 depositedValidators, uint256 beaconValidators, uint256 beaconBalance);\\n}\\n\"\r\n    },\r\n    \"contracts/0.4.24/interfaces/ILidoOracle.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2020 Lido <info@lido.fi>\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"../interfaces/ILido.sol\\\";\\n\\n\\n/**\\n * @title ETH 2.0 -> ETH oracle\\n *\\n * The goal of the oracle is to inform other parts of the system about balances controlled by the\\n * DAO on the ETH 2.0 side. The balances can go up because of reward accumulation and can go down\\n * because of slashing.\\n */\\ninterface ILidoOracle {\\n    event AllowedBeaconBalanceAnnualRelativeIncreaseSet(uint256 value);\\n    event AllowedBeaconBalanceRelativeDecreaseSet(uint256 value);\\n    event BeaconReportReceiverSet(address callback);\\n    event MemberAdded(address member);\\n    event MemberRemoved(address member);\\n    event QuorumChanged(uint256 quorum);\\n    event ExpectedEpochIdUpdated(uint256 epochId);\\n    event BeaconSpecSet(\\n        uint64 epochsPerFrame,\\n        uint64 slotsPerEpoch,\\n        uint64 secondsPerSlot,\\n        uint64 genesisTime\\n    );\\n    event BeaconReported(\\n        uint256 epochId,\\n        uint128 beaconBalance,\\n        uint128 beaconValidators,\\n        address caller\\n    );\\n    event Completed(\\n        uint256 epochId,\\n        uint128 beaconBalance,\\n        uint128 beaconValidators\\n    );\\n    event PostTotalShares(\\n         uint256 postTotalPooledEther,\\n         uint256 preTotalPooledEther,\\n         uint256 timeElapsed,\\n         uint256 totalShares);\\n    event ContractVersionSet(uint256 version);\\n\\n    /**\\n     * @notice Return the Lido contract address\\n     */\\n    function getLido() public view returns (ILido);\\n\\n    /**\\n     * @notice Return the number of exactly the same reports needed to finalize the epoch\\n     */\\n    function getQuorum() public view returns (uint256);\\n\\n    /**\\n     * @notice Return the upper bound of the reported balance possible increase in APR\\n     */\\n    function getAllowedBeaconBalanceAnnualRelativeIncrease() external view returns (uint256);\\n\\n    /**\\n     * @notice Return the lower bound of the reported balance possible decrease\\n     */\\n    function getAllowedBeaconBalanceRelativeDecrease() external view returns (uint256);\\n\\n    /**\\n     * @notice Set the upper bound of the reported balance possible increase in APR to `_value`\\n     */\\n    function setAllowedBeaconBalanceAnnualRelativeIncrease(uint256 _value) external;\\n\\n    /**\\n     * @notice Set the lower bound of the reported balance possible decrease to `_value`\\n     */\\n    function setAllowedBeaconBalanceRelativeDecrease(uint256 _value) external;\\n\\n    /**\\n     * @notice Return the receiver contract address to be called when the report is pushed to Lido\\n     */\\n    function getBeaconReportReceiver() external view returns (address);\\n\\n    /**\\n     * @notice Set the receiver contract address to be called when the report is pushed to Lido\\n     */\\n    function setBeaconReportReceiver(address _addr) external;\\n\\n    /**\\n     * @notice Return the current reporting bitmap, representing oracles who have already pushed\\n     * their version of report during the expected epoch\\n     */\\n    function getCurrentOraclesReportStatus() external view returns (uint256);\\n\\n    /**\\n     * @notice Return the current reporting array size\\n     */\\n    function getCurrentReportVariantsSize() external view returns (uint256);\\n\\n    /**\\n     * @notice Return the current reporting array element with the given index\\n     */\\n    function getCurrentReportVariant(uint256 _index)\\n        external\\n        view\\n        returns (\\n            uint64 beaconBalance,\\n            uint32 beaconValidators,\\n            uint16 count\\n        );\\n\\n    /**\\n     * @notice Return epoch that can be reported by oracles\\n     */\\n    function getExpectedEpochId() external view returns (uint256);\\n\\n    /**\\n     * @notice Return the current oracle member committee list\\n     */\\n    function getOracleMembers() external view returns (address[]);\\n\\n    /**\\n     * @notice Return the initialized version of this contract starting from 0\\n     */\\n    function getVersion() external view returns (uint256);\\n\\n    /**\\n     * @notice Return beacon specification data\\n     */\\n    function getBeaconSpec()\\n        external\\n        view\\n        returns (\\n            uint64 epochsPerFrame,\\n            uint64 slotsPerEpoch,\\n            uint64 secondsPerSlot,\\n            uint64 genesisTime\\n        );\\n\\n    /**\\n     * Updates beacon specification data\\n     */\\n    function setBeaconSpec(\\n        uint64 _epochsPerFrame,\\n        uint64 _slotsPerEpoch,\\n        uint64 _secondsPerSlot,\\n        uint64 _genesisTime\\n    )\\n        external;\\n\\n    /**\\n     * Returns the epoch calculated from current timestamp\\n     */\\n    function getCurrentEpochId() external view returns (uint256);\\n\\n    /**\\n     * @notice Return currently reportable epoch (the first epoch of the current frame) as well as\\n     * its start and end times in seconds\\n     */\\n    function getCurrentFrame()\\n        external\\n        view\\n        returns (\\n            uint256 frameEpochId,\\n            uint256 frameStartTime,\\n            uint256 frameEndTime\\n        );\\n\\n    /**\\n     * @notice Return last completed epoch\\n     */\\n    function getLastCompletedEpochId() external view returns (uint256);\\n\\n    /**\\n     * @notice Report beacon balance and its change during the last frame\\n     */\\n    function getLastCompletedReportDelta()\\n        external\\n        view\\n        returns (\\n            uint256 postTotalPooledEther,\\n            uint256 preTotalPooledEther,\\n            uint256 timeElapsed\\n        );\\n\\n    /**\\n     * @notice Initialize the contract v2 data, with sanity check bounds\\n     * (`_allowedBeaconBalanceAnnualRelativeIncrease`, `_allowedBeaconBalanceRelativeDecrease`)\\n     * @dev Original initialize function removed from v2 because it is invoked only once\\n     */\\n    function initialize_v2(\\n        uint256 _allowedBeaconBalanceAnnualRelativeIncrease,\\n        uint256 _allowedBeaconBalanceRelativeDecrease\\n    )\\n        external;\\n\\n    /**\\n     * @notice Add `_member` to the oracle member committee list\\n     */\\n    function addOracleMember(address _member) external;\\n\\n    /**\\n     * @notice Remove '_member` from the oracle member committee list\\n     */\\n    function removeOracleMember(address _member) external;\\n\\n    /**\\n     * @notice Set the number of exactly the same reports needed to finalize the epoch to `_quorum`\\n     */\\n    function setQuorum(uint256 _quorum) external;\\n\\n    /**\\n     * @notice Accept oracle committee member reports from the ETH 2.0 side\\n     * @param _epochId Beacon chain epoch\\n     * @param _beaconBalance Balance in gwei on the ETH 2.0 side (9-digit denomination)\\n     * @param _beaconValidators Number of validators visible in this epoch\\n     */\\n    function reportBeacon(uint256 _epochId, uint64 _beaconBalance, uint32 _beaconValidators) external;\\n}\\n\"\r\n    },\r\n    \"contracts/0.4.24/oracle/ReportUtils.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2020 Lido <info@lido.fi>\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.4.24;\\n\\n/**\\n * Utility functions for effectively storing reports within a single storage slot\\n *\\n * +00 | uint16 | count            | 0..256  | number of reports received exactly like this\\n * +16 | uint32 | beaconValidators | 0..1e9  | number of Lido's validators in beacon chain\\n * +48 | uint64 | beaconBalance    | 0..1e18 | total amout of their balance\\n *\\n * Note that the 'count' is the leftmost field here. Thus it is possible to apply addition\\n * operations to it when it is encoded, provided that you watch for the overflow.\\n */\\nlibrary ReportUtils {\\n    uint256 constant internal COUNT_OUTMASK = 0xFFFFFFFFFFFFFFFFFFFFFFFF0000;\\n\\n    function encode(uint64 beaconBalance, uint32 beaconValidators) internal pure returns (uint256) {\\n        return uint256(beaconBalance) << 48 | uint256(beaconValidators) << 16;\\n    }\\n\\n    function decode(uint256 value) internal pure returns (uint64 beaconBalance, uint32 beaconValidators) {\\n        beaconBalance = uint64(value >> 48);\\n        beaconValidators = uint32(value >> 16);\\n    }\\n\\n    function decodeWithCount(uint256 value)\\n        internal pure\\n        returns (\\n            uint64 beaconBalance,\\n            uint32 beaconValidators,\\n            uint16 count\\n        ) {\\n        beaconBalance = uint64(value >> 48);\\n        beaconValidators = uint32(value >> 16);\\n        count = uint16(value);\\n    }\\n\\n    /// @notice Check if the given reports are different, not considering the counter of the first\\n    function isDifferent(uint256 value, uint256 that) internal pure returns(bool) {\\n        return (value & COUNT_OUTMASK) != that;\\n    }\\n\\n    function getCount(uint256 value) internal pure returns(uint16) {\\n        return uint16(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/apps/AppStorage.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_POSITION = keccak256(\\\"aragonOS.appStorage.kernel\\\");\\n    bytes32 internal constant APP_ID_POSITION = keccak256(\\\"aragonOS.appStorage.appId\\\");\\n    */\\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\\n\\n    function kernel() public view returns (IKernel) {\\n        return IKernel(KERNEL_POSITION.getStorageAddress());\\n    }\\n\\n    function appId() public view returns (bytes32) {\\n        return APP_ID_POSITION.getStorageBytes32();\\n    }\\n\\n    function setKernel(IKernel _kernel) internal {\\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\\n    }\\n\\n    function setAppId(bytes32 _appId) internal {\\n        APP_ID_POSITION.setStorageBytes32(_appId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/acl/ACLSyntaxSugar.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ACLSyntaxSugar {\\n    function arr() internal pure returns (uint256[]) {\\n        return new uint256[](0);\\n    }\\n\\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c);\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c, _d);\\n    }\\n\\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\\n    }\\n\\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\\n        r = new uint256[](1);\\n        r[0] = _a;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\\n        r = new uint256[](2);\\n        r[0] = _a;\\n        r[1] = _b;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        r = new uint256[](3);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        r = new uint256[](4);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        r = new uint256[](5);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n        r[4] = _e;\\n    }\\n}\\n\\n\\ncontract ACLHelpers {\\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 30));\\n    }\\n\\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 31));\\n    }\\n\\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\\n        a = uint32(_x);\\n        b = uint32(_x >> (8 * 4));\\n        c = uint32(_x >> (8 * 8));\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/Autopetrified.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Petrifiable.sol\\\";\\n\\n\\ncontract Autopetrified is Petrifiable {\\n    constructor() public {\\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\\n        // This renders them uninitializable (and unusable without a proxy).\\n        petrify();\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/ConversionHelpers.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.24;\\n\\n\\nlibrary ConversionHelpers {\\n    string private constant ERROR_IMPROPER_LENGTH = \\\"CONVERSION_IMPROPER_LENGTH\\\";\\n\\n    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\\n        // Force cast the uint256[] into a bytes array, by overwriting its length\\n        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 byteLength = _input.length * 32;\\n        assembly {\\n            output := _input\\n            mstore(output, byteLength)\\n        }\\n    }\\n\\n    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\\n        // Force cast the bytes array into a uint256[], by overwriting its length\\n        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 intsLength = _input.length / 32;\\n        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\\n\\n        assembly {\\n            output := _input\\n            mstore(output, intsLength)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/ReentrancyGuard.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\n\\n\\ncontract ReentrancyGuard {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256(\\\"aragonOS.reentrancyGuard.mutex\\\");\\n    */\\n    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\\n\\n    string private constant ERROR_REENTRANT = \\\"REENTRANCY_REENTRANT_CALL\\\";\\n\\n    modifier nonReentrant() {\\n        // Ensure mutex is unlocked\\n        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\\n\\n        // Lock mutex before function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\\n\\n        // Perform function call\\n        _;\\n\\n        // Unlock mutex after function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/VaultRecoverable.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\nimport \\\"./EtherTokenConstant.sol\\\";\\nimport \\\"./IsContract.sol\\\";\\nimport \\\"./IVaultRecoverable.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\n\\n\\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\\n    using SafeERC20 for ERC20;\\n\\n    string private constant ERROR_DISALLOWED = \\\"RECOVER_DISALLOWED\\\";\\n    string private constant ERROR_VAULT_NOT_CONTRACT = \\\"RECOVER_VAULT_NOT_CONTRACT\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_FAILED = \\\"RECOVER_TOKEN_TRANSFER_FAILED\\\";\\n\\n    /**\\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\\n     *         but in case it does, this function allows one to recover them.\\n     * @param _token Token balance to be sent to recovery vault.\\n     */\\n    function transferToVault(address _token) external {\\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\\n        address vault = getRecoveryVault();\\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\\n\\n        uint256 balance;\\n        if (_token == ETH) {\\n            balance = address(this).balance;\\n            vault.transfer(balance);\\n        } else {\\n            ERC20 token = ERC20(_token);\\n            balance = token.staticBalanceOf(this);\\n            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\\n        }\\n\\n        emit RecoverToVault(vault, _token, balance);\\n    }\\n\\n    /**\\n    * @dev By default deriving from AragonApp makes it recoverable\\n    * @param token Token address that would be recovered\\n    * @return bool whether the app allows the recovery\\n    */\\n    function allowRecoverability(address token) public view returns (bool) {\\n        return true;\\n    }\\n\\n    // Cast non-implemented interface to be public so we can use it internally\\n    function getRecoveryVault() public view returns (address);\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/evmscript/EVMScriptRunner.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\nimport \\\"../kernel/KernelConstants.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\n\\n\\ncontract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\\n    string private constant ERROR_EXECUTOR_UNAVAILABLE = \\\"EVMRUN_EXECUTOR_UNAVAILABLE\\\";\\n    string private constant ERROR_PROTECTED_STATE_MODIFIED = \\\"EVMRUN_PROTECTED_STATE_MODIFIED\\\";\\n\\n    /* This is manually crafted in assembly\\n    string private constant ERROR_EXECUTOR_INVALID_RETURN = \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\";\\n    */\\n\\n    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\\n\\n    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\\n    }\\n\\n    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\\n        return IEVMScriptRegistry(registryAddr);\\n    }\\n\\n    function runScript(bytes _script, bytes _input, address[] _blacklist)\\n        internal\\n        isInitialized\\n        protectState\\n        returns (bytes)\\n    {\\n        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\\n\\n        bytes4 sig = executor.execScript.selector;\\n        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\\n\\n        bytes memory output;\\n        assembly {\\n            let success := delegatecall(\\n                gas,                // forward all gas\\n                executor,           // address\\n                add(data, 0x20),    // calldata start\\n                mload(data),        // calldata length\\n                0,                  // don't write output (we'll handle this ourselves)\\n                0                   // don't write output\\n            )\\n\\n            output := mload(0x40) // free mem ptr get\\n\\n            switch success\\n            case 0 {\\n                // If the call errored, forward its full error data\\n                returndatacopy(output, 0, returndatasize)\\n                revert(output, returndatasize)\\n            }\\n            default {\\n                switch gt(returndatasize, 0x3f)\\n                case 0 {\\n                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\\n                    // revert with \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\"\\n                    // See remix: doing a `revert(\\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\")` always results in\\n                    // this memory layout\\n                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\\n                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\\n                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\\n                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\\n\\n                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\\n                }\\n                default {\\n                    // Copy result\\n                    //\\n                    // Needs to perform an ABI decode for the expected `bytes` return type of\\n                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\\n                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\\n                    //    [ output length (32 bytes) ]\\n                    //    [ output content (N bytes) ]\\n                    //\\n                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\\n                    let copysize := sub(returndatasize, 0x20)\\n                    returndatacopy(output, 0x20, copysize)\\n\\n                    mstore(0x40, add(output, copysize)) // free mem ptr set\\n                }\\n            }\\n        }\\n\\n        emit ScriptResult(address(executor), _script, _input, output);\\n\\n        return output;\\n    }\\n\\n    modifier protectState {\\n        address preKernel = address(kernel());\\n        bytes32 preAppId = appId();\\n        _; // exec\\n        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\\n        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/UnstructuredStorage.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/kernel/IKernel.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\ninterface IKernelEvents {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\\n}\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IKernelEvents, IVaultRecoverable {\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/acl/IACL.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/IVaultRecoverable.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IVaultRecoverable {\\n    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\\n\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) external view returns (bool);\\n    function getRecoveryVault() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/Petrifiable.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\n\\ncontract Petrifiable is Initializable {\\n    // Use block UINT256_MAX (which should be never) as the initializable date\\n    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\\n\\n    function isPetrified() public view returns (bool) {\\n        return getInitializationBlock() == PETRIFIED_BLOCK;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract to prevent being initialized.\\n    *      Useful for freezing base contracts when they're used behind proxies.\\n    */\\n    function petrify() internal onlyInit {\\n        initializedAt(PETRIFIED_BLOCK);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/Initializable.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./TimeHelpers.sol\\\";\\nimport \\\"./UnstructuredStorage.sol\\\";\\n\\n\\ncontract Initializable is TimeHelpers {\\n    using UnstructuredStorage for bytes32;\\n\\n    // keccak256(\\\"aragonOS.initializable.initializationBlock\\\")\\n    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\\n\\n    string private constant ERROR_ALREADY_INITIALIZED = \\\"INIT_ALREADY_INITIALIZED\\\";\\n    string private constant ERROR_NOT_INITIALIZED = \\\"INIT_NOT_INITIALIZED\\\";\\n\\n    modifier onlyInit {\\n        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\\n        _;\\n    }\\n\\n    modifier isInitialized {\\n        require(hasInitialized(), ERROR_NOT_INITIALIZED);\\n        _;\\n    }\\n\\n    /**\\n    * @return Block number in which the contract was initialized\\n    */\\n    function getInitializationBlock() public view returns (uint256) {\\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n    * @return Whether the contract has been initialized by the time of the current block\\n    */\\n    function hasInitialized() public view returns (bool) {\\n        uint256 initializationBlock = getInitializationBlock();\\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization has finished.\\n    */\\n    function initialized() internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization to enable the contract\\n    *      at a future block number rather than immediately.\\n    */\\n    function initializedAt(uint256 _blockNumber) internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/TimeHelpers.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Uint256Helpers.sol\\\";\\n\\n\\ncontract TimeHelpers {\\n    using Uint256Helpers for uint256;\\n\\n    /**\\n    * @dev Returns the current block number.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n    * @dev Returns the current block number, converted to uint64.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber64() internal view returns (uint64) {\\n        return getBlockNumber().toUint64();\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp() internal view returns (uint256) {\\n        return block.timestamp; // solium-disable-line security/no-block-members\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp, converted to uint64.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp64() internal view returns (uint64) {\\n        return getTimestamp().toUint64();\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/Uint256Helpers.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.24;\\n\\n\\nlibrary Uint256Helpers {\\n    uint256 private constant MAX_UINT64 = uint64(-1);\\n\\n    string private constant ERROR_NUMBER_TOO_BIG = \\\"UINT64_NUMBER_TOO_BIG\\\";\\n\\n    function toUint64(uint256 a) internal pure returns (uint64) {\\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\\n        return uint64(a);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/lib/token/ERC20.sol\": {\r\n      \"content\": \"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 {\\n    function totalSupply() public view returns (uint256);\\n\\n    function balanceOf(address _who) public view returns (uint256);\\n\\n    function allowance(address _owner, address _spender)\\n        public view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) public returns (bool);\\n\\n    function approve(address _spender, uint256 _value)\\n        public returns (bool);\\n\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        public returns (bool);\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/EtherTokenConstant.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\\n// contracts where both tokens and ETH are accepted\\ncontract EtherTokenConstant {\\n    address internal constant ETH = address(0);\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/IsContract.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract IsContract {\\n    /*\\n    * NOTE: this should NEVER be used for authentication\\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\\n    *\\n    * This is only intended to be used as a sanity check that an address is actually a contract,\\n    * RATHER THAN an address not being a contract.\\n    */\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/SafeERC20.sol\": {\r\n      \"content\": \"// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\n\\n\\nlibrary SafeERC20 {\\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\\n    // https://github.com/ethereum/solidity/issues/3544\\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\\n\\n    string private constant ERROR_TOKEN_BALANCE_REVERTED = \\\"SAFE_ERC_20_BALANCE_REVERTED\\\";\\n    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = \\\"SAFE_ERC_20_ALLOWANCE_REVERTED\\\";\\n\\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\\n        private\\n        returns (bool)\\n    {\\n        bool ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            let success := call(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                0,                    // no value\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                // Check number of bytes returned from last function call\\n                switch returndatasize\\n\\n                // No bytes returned: assume success\\n                case 0 {\\n                    ret := 1\\n                }\\n\\n                // 32 bytes returned: check if non-zero\\n                case 0x20 {\\n                    // Only return success if returned data was true\\n                    // Already have output in ptr\\n                    ret := eq(mload(ptr), 1)\\n                }\\n\\n                // Not sure what was returned: don't mark as success\\n                default { }\\n            }\\n        }\\n        return ret;\\n    }\\n\\n    function staticInvoke(address _addr, bytes memory _calldata)\\n        private\\n        view\\n        returns (bool, uint256)\\n    {\\n        bool success;\\n        uint256 ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            success := staticcall(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                ret := mload(ptr)\\n            }\\n        }\\n        return (success, ret);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferCallData = abi.encodeWithSelector(\\n            TRANSFER_SELECTOR,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferFromCallData = abi.encodeWithSelector(\\n            _token.transferFrom.selector,\\n            _from,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferFromCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\\n        bytes memory approveCallData = abi.encodeWithSelector(\\n            _token.approve.selector,\\n            _spender,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, approveCallData);\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.balanceOf().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\\n        bytes memory balanceOfCallData = abi.encodeWithSelector(\\n            _token.balanceOf.selector,\\n            _owner\\n        );\\n\\n        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\\n        require(success, ERROR_TOKEN_BALANCE_REVERTED);\\n\\n        return tokenBalance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.allowance().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\\n        bytes memory allowanceCallData = abi.encodeWithSelector(\\n            _token.allowance.selector,\\n            _owner,\\n            _spender\\n        );\\n\\n        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return allowance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.totalSupply().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticTotalSupply(ERC20 _token) internal view returns (uint256) {\\n        bytes memory totalSupplyCallData = abi.encodeWithSelector(_token.totalSupply.selector);\\n\\n        (bool success, uint256 totalSupply) = staticInvoke(_token, totalSupplyCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return totalSupply;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IEVMScriptExecutor {\\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\\n    function executorType() external pure returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\n\\n\\ncontract EVMScriptRegistryConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\\\"evmreg\\\");\\n    */\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\\n}\\n\\n\\ninterface IEVMScriptRegistry {\\n    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\\n    function disableScriptExecutor(uint256 executorId) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/kernel/KernelConstants.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract KernelAppIds {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\\\"kernel\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\\\"acl\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\\\"vault\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\\n}\\n\\n\\ncontract KernelNamespaceConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\\\"core\\\");\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\\\"base\\\");\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n}\\n\"\r\n    },\r\n    \"contracts/0.4.24/test_helpers/LidoOracleMock.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2020 Lido <info@lido.fi>\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"../oracle/LidoOracle.sol\\\";\\n\\n\\n/**\\n  * @dev Only for testing purposes! LidoOracle version with some functions exposed.\\n  */\\ncontract LidoOracleMock is LidoOracle {\\n    uint256 private time;\\n\\n    // Original initialize function from v1\\n    function initialize(\\n        address _lido,\\n        uint64 _epochsPerFrame,\\n        uint64 _slotsPerEpoch,\\n        uint64 _secondsPerSlot,\\n        uint64 _genesisTime\\n    )\\n        public onlyInit\\n    {\\n        assert(1 == ((1 << (MAX_MEMBERS - 1)) >> (MAX_MEMBERS - 1)));  // static assert\\n        _setBeaconSpec(\\n            _epochsPerFrame,\\n            _slotsPerEpoch,\\n            _secondsPerSlot,\\n            _genesisTime\\n        );\\n        LIDO_POSITION.setStorageAddress(_lido);\\n        QUORUM_POSITION.setStorageUint256(1);\\n        emit QuorumChanged(1);\\n        initialized();\\n    }\\n\\n    function setV1LastReportedEpochForTest(uint256 _epoch) public {\\n        V1_LAST_REPORTED_EPOCH_ID_POSITION.setStorageUint256(_epoch);\\n    }\\n\\n    function setTime(uint256 _time) public {\\n        time = _time;\\n    }\\n\\n    function _getTime() internal view returns (uint256) {\\n        return time;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/0.4.24/test_helpers/ReportUtilsMock.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2020 Lido <info@lido.fi>\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"../oracle/ReportUtils.sol\\\";\\n\\n\\ncontract ReportUtilsMock {\\n    using ReportUtils for uint256;\\n\\n    function encode(uint64 beaconBalance, uint32 beaconValidators) public pure returns (uint256) {\\n        return ReportUtils.encode(beaconBalance, beaconValidators);\\n    }\\n\\n    function decode(uint256 value) public pure returns (uint64 beaconBalance, uint32 beaconValidators) {\\n        return value.decode();\\n    }\\n\\n    function decodeWithCount(uint256 value)\\n        public pure\\n        returns (\\n            uint64 beaconBalance,\\n            uint32 beaconValidators,\\n            uint16 count)\\n    {\\n        return value.decodeWithCount();\\n    }\\n\\n    function isDifferent(uint256 value, uint256 that) public pure returns(bool) {\\n        return value.isDifferent(that);\\n    }\\n\\n    function getCount(uint256 value) public pure returns(uint16) {\\n        return value.getCount();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/0.4.24/test_helpers/OracleMock.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2020 Lido <info@lido.fi>\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"../interfaces/ILido.sol\\\";\\n\\n\\n/**\\n  * @dev This is a mock. Don't use in production.\\n  */\\ncontract OracleMock {\\n    ILido private pool;\\n\\n    function setPool(address _pool) external {\\n        pool = ILido(_pool);\\n    }\\n\\n    function reportBeacon(uint256 _epochId, uint128 _beaconValidators, uint128 _beaconBalance) external {\\n        pool.pushBeacon(_beaconValidators, _beaconBalance);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/0.4.24/Lido.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2020 Lido <info@lido.fi>\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\n/* See contracts/COMPILERS.md */\\npragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath64.sol\\\";\\nimport \\\"@aragon/os/contracts/common/IsContract.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\nimport \\\"./interfaces/ILido.sol\\\";\\nimport \\\"./interfaces/INodeOperatorsRegistry.sol\\\";\\nimport \\\"./interfaces/IDepositContract.sol\\\";\\n\\nimport \\\"./StETH.sol\\\";\\n\\n\\n/**\\n* @title Liquid staking pool implementation\\n*\\n* Lido is an Ethereum 2.0 liquid staking protocol solving the problem of frozen staked Ethers\\n* until transfers become available in Ethereum 2.0.\\n* Whitepaper: https://lido.fi/static/Lido:Ethereum-Liquid-Staking.pdf\\n*\\n* NOTE: the code below assumes moderate amount of node operators, e.g. up to 50.\\n*\\n* Since balances of all token holders change when the amount of total pooled Ether\\n* changes, this token cannot fully implement ERC20 standard: it only emits `Transfer`\\n* events upon explicit transfer between holders. In contrast, when Lido oracle reports\\n* rewards, no Transfer events are generated: doing so would require emitting an event\\n* for each token holder and thus running an unbounded loop.\\n*/\\ncontract Lido is ILido, IsContract, StETH, AragonApp {\\n    using SafeMath for uint256;\\n    using SafeMath64 for uint64;\\n    using UnstructuredStorage for bytes32;\\n\\n    /// ACL\\n    bytes32 constant public PAUSE_ROLE = keccak256(\\\"PAUSE_ROLE\\\");\\n    bytes32 constant public MANAGE_FEE = keccak256(\\\"MANAGE_FEE\\\");\\n    bytes32 constant public MANAGE_WITHDRAWAL_KEY = keccak256(\\\"MANAGE_WITHDRAWAL_KEY\\\");\\n    bytes32 constant public SET_ORACLE = keccak256(\\\"SET_ORACLE\\\");\\n    bytes32 constant public BURN_ROLE = keccak256(\\\"BURN_ROLE\\\");\\n    bytes32 constant public SET_TREASURY = keccak256(\\\"SET_TREASURY\\\");\\n    bytes32 constant public SET_INSURANCE_FUND = keccak256(\\\"SET_INSURANCE_FUND\\\");\\n    bytes32 constant public DEPOSIT_ROLE = keccak256(\\\"DEPOSIT_ROLE\\\");\\n\\n    uint256 constant public PUBKEY_LENGTH = 48;\\n    uint256 constant public WITHDRAWAL_CREDENTIALS_LENGTH = 32;\\n    uint256 constant public SIGNATURE_LENGTH = 96;\\n\\n    uint256 constant public DEPOSIT_SIZE = 32 ether;\\n\\n    uint256 internal constant DEPOSIT_AMOUNT_UNIT = 1000000000 wei;\\n\\n    /// @dev default value for maximum number of Ethereum 2.0 validators registered in a single depositBufferedEther call\\n    uint256 internal constant DEFAULT_MAX_DEPOSITS_PER_CALL = 150;\\n\\n    bytes32 internal constant FEE_POSITION = keccak256(\\\"lido.Lido.fee\\\");\\n    bytes32 internal constant TREASURY_FEE_POSITION = keccak256(\\\"lido.Lido.treasuryFee\\\");\\n    bytes32 internal constant INSURANCE_FEE_POSITION = keccak256(\\\"lido.Lido.insuranceFee\\\");\\n    bytes32 internal constant NODE_OPERATORS_FEE_POSITION = keccak256(\\\"lido.Lido.nodeOperatorsFee\\\");\\n\\n    bytes32 internal constant DEPOSIT_CONTRACT_POSITION = keccak256(\\\"lido.Lido.depositContract\\\");\\n    bytes32 internal constant ORACLE_POSITION = keccak256(\\\"lido.Lido.oracle\\\");\\n    bytes32 internal constant NODE_OPERATORS_REGISTRY_POSITION = keccak256(\\\"lido.Lido.nodeOperatorsRegistry\\\");\\n    bytes32 internal constant TREASURY_POSITION = keccak256(\\\"lido.Lido.treasury\\\");\\n    bytes32 internal constant INSURANCE_FUND_POSITION = keccak256(\\\"lido.Lido.insuranceFund\\\");\\n\\n    /// @dev amount of Ether (on the current Ethereum side) buffered on this smart contract balance\\n    bytes32 internal constant BUFFERED_ETHER_POSITION = keccak256(\\\"lido.Lido.bufferedEther\\\");\\n    /// @dev number of deposited validators (incrementing counter of deposit operations).\\n    bytes32 internal constant DEPOSITED_VALIDATORS_POSITION = keccak256(\\\"lido.Lido.depositedValidators\\\");\\n    /// @dev total amount of Beacon-side Ether (sum of all the balances of Lido validators)\\n    bytes32 internal constant BEACON_BALANCE_POSITION = keccak256(\\\"lido.Lido.beaconBalance\\\");\\n    /// @dev number of Lido's validators available in the Beacon state\\n    bytes32 internal constant BEACON_VALIDATORS_POSITION = keccak256(\\\"lido.Lido.beaconValidators\\\");\\n\\n    /// @dev Credentials which allows the DAO to withdraw Ether on the 2.0 side\\n    bytes32 internal constant WITHDRAWAL_CREDENTIALS_POSITION = keccak256(\\\"lido.Lido.withdrawalCredentials\\\");\\n\\n    /**\\n    * @dev As AragonApp, Lido contract must be initialized with following variables:\\n    * @param depositContract official ETH2 Deposit contract\\n    * @param _oracle oracle contract\\n    * @param _operators instance of Node Operators Registry\\n    */\\n    function initialize(\\n        IDepositContract depositContract,\\n        address _oracle,\\n        INodeOperatorsRegistry _operators,\\n        address _treasury,\\n        address _insuranceFund\\n    )\\n        public onlyInit\\n    {\\n        _setDepositContract(depositContract);\\n        _setOracle(_oracle);\\n        _setOperators(_operators);\\n        _setTreasury(_treasury);\\n        _setInsuranceFund(_insuranceFund);\\n\\n        initialized();\\n    }\\n\\n    /**\\n    * @notice Send funds to the pool\\n    * @dev Users are able to submit their funds by transacting to the fallback function.\\n    * Unlike vanilla Eth2.0 Deposit contract, accepting only 32-Ether transactions, Lido\\n    * accepts payments of any size. Submitted Ethers are stored in Buffer until someone calls\\n    * depositBufferedEther() and pushes them to the ETH2 Deposit contract.\\n    */\\n    function() external payable {\\n        // protection against accidental submissions by calling non-existent function\\n        require(msg.data.length == 0, \\\"NON_EMPTY_DATA\\\");\\n        _submit(0);\\n    }\\n\\n    /**\\n    * @notice Send funds to the pool with optional _referral parameter\\n    * @dev This function is alternative way to submit funds. Supports optional referral address.\\n    * @return Amount of StETH shares generated\\n    */\\n    function submit(address _referral) external payable returns (uint256) {\\n        return _submit(_referral);\\n    }\\n\\n    /**\\n    * @notice Deposits buffered ethers to the official DepositContract.\\n    * @dev This function is separated from submit() to reduce the cost of sending funds.\\n    */\\n    function depositBufferedEther() external auth(DEPOSIT_ROLE) {\\n        return _depositBufferedEther(DEFAULT_MAX_DEPOSITS_PER_CALL);\\n    }\\n\\n    /**\\n      * @notice Deposits buffered ethers to the official DepositContract, making no more than `_maxDeposits` deposit calls.\\n      * @dev This function is separated from submit() to reduce the cost of sending funds.\\n      */\\n    function depositBufferedEther(uint256 _maxDeposits) external auth(DEPOSIT_ROLE) {\\n        return _depositBufferedEther(_maxDeposits);\\n    }\\n\\n    function burnShares(address _account, uint256 _sharesAmount)\\n        external\\n        authP(BURN_ROLE, arr(_account, _sharesAmount))\\n        returns (uint256 newTotalShares)\\n    {\\n        return _burnShares(_account, _sharesAmount);\\n    }\\n\\n    /**\\n      * @notice Stop pool routine operations\\n      */\\n    function stop() external auth(PAUSE_ROLE) {\\n        _stop();\\n    }\\n\\n    /**\\n      * @notice Resume pool routine operations\\n      */\\n    function resume() external auth(PAUSE_ROLE) {\\n        _resume();\\n    }\\n\\n    /**\\n      * @notice Set fee rate to `_feeBasisPoints` basis points. The fees are accrued when oracles report staking results\\n      * @param _feeBasisPoints Fee rate, in basis points\\n      */\\n    function setFee(uint16 _feeBasisPoints) external auth(MANAGE_FEE) {\\n        _setBPValue(FEE_POSITION, _feeBasisPoints);\\n        emit FeeSet(_feeBasisPoints);\\n    }\\n\\n    /**\\n      * @notice Set fee distribution: `_treasuryFeeBasisPoints` basis points go to the treasury, `_insuranceFeeBasisPoints` basis points go to the insurance fund, `_operatorsFeeBasisPoints` basis points go to node operators. The sum has to be 10 000.\\n      */\\n    function setFeeDistribution(\\n        uint16 _treasuryFeeBasisPoints,\\n        uint16 _insuranceFeeBasisPoints,\\n        uint16 _operatorsFeeBasisPoints\\n    )\\n        external auth(MANAGE_FEE)\\n    {\\n        require(\\n            10000 == uint256(_treasuryFeeBasisPoints)\\n            .add(uint256(_insuranceFeeBasisPoints))\\n            .add(uint256(_operatorsFeeBasisPoints)),\\n            \\\"FEES_DONT_ADD_UP\\\"\\n        );\\n\\n        _setBPValue(TREASURY_FEE_POSITION, _treasuryFeeBasisPoints);\\n        _setBPValue(INSURANCE_FEE_POSITION, _insuranceFeeBasisPoints);\\n        _setBPValue(NODE_OPERATORS_FEE_POSITION, _operatorsFeeBasisPoints);\\n\\n        emit FeeDistributionSet(_treasuryFeeBasisPoints, _insuranceFeeBasisPoints, _operatorsFeeBasisPoints);\\n    }\\n\\n    /**\\n      * @notice Set authorized oracle contract address to `_oracle`\\n      * @dev Contract specified here is allowed to make periodical updates of beacon states\\n      * by calling pushBeacon.\\n      * @param _oracle oracle contract\\n      */\\n    function setOracle(address _oracle) external auth(SET_ORACLE) {\\n        _setOracle(_oracle);\\n    }\\n\\n    /**\\n      * @notice Set treasury contract address to `_treasury`\\n      * @dev Contract specified here is used to accumulate the protocol treasury fee.\\n      * @param _treasury contract which accumulates treasury fee.\\n      */\\n    function setTreasury(address _treasury) external auth(SET_TREASURY) {\\n        _setTreasury(_treasury);\\n    }\\n\\n    /**\\n      * @notice Set insuranceFund contract address to `_insuranceFund`\\n      * @dev Contract specified here is used to accumulate the protocol insurance fee.\\n      * @param _insuranceFund contract which accumulates insurance fee.\\n      */\\n    function setInsuranceFund(address _insuranceFund) external auth(SET_INSURANCE_FUND) {\\n        _setInsuranceFund(_insuranceFund);\\n    }\\n\\n    /**\\n      * @notice Set credentials to withdraw ETH on ETH 2.0 side after the phase 2 is launched to `_withdrawalCredentials`\\n      * @dev Note that setWithdrawalCredentials discards all unused signing keys as the signatures are invalidated.\\n      * @param _withdrawalCredentials hash of withdrawal multisignature key as accepted by\\n      *        the deposit_contract.deposit function\\n      */\\n    function setWithdrawalCredentials(bytes32 _withdrawalCredentials) external auth(MANAGE_WITHDRAWAL_KEY) {\\n        WITHDRAWAL_CREDENTIALS_POSITION.setStorageBytes32(_withdrawalCredentials);\\n        getOperators().trimUnusedKeys();\\n\\n        emit WithdrawalCredentialsSet(_withdrawalCredentials);\\n    }\\n\\n    /**\\n      * @notice Issues withdrawal request. Not implemented.\\n      * @param _amount Amount of StETH to withdraw\\n      * @param _pubkeyHash Receiving address\\n      */\\n    function withdraw(uint256 _amount, bytes32 _pubkeyHash) external whenNotStopped { /* solhint-disable-line no-unused-vars */\\n        //will be upgraded to an actual implementation when withdrawals are enabled (Phase 1.5 or 2 of Eth2 launch, likely late 2021 or 2022).\\n        //at the moment withdrawals are not possible in the beacon chain and there's no workaround\\n        revert(\\\"NOT_IMPLEMENTED_YET\\\");\\n    }\\n\\n    /**\\n    * @notice Updates the number of Lido-controlled keys in the beacon validators set and their total balance.\\n    * @dev periodically called by the Oracle contract\\n    * @param _beaconValidators number of Lido's keys in the beacon state\\n    * @param _beaconBalance simmarized balance of Lido-controlled keys in wei\\n    */\\n    function pushBeacon(uint256 _beaconValidators, uint256 _beaconBalance) external whenNotStopped {\\n        require(msg.sender == getOracle(), \\\"APP_AUTH_FAILED\\\");\\n\\n        uint256 depositedValidators = DEPOSITED_VALIDATORS_POSITION.getStorageUint256();\\n        require(_beaconValidators <= depositedValidators, \\\"REPORTED_MORE_DEPOSITED\\\");\\n\\n        uint256 beaconValidators = BEACON_VALIDATORS_POSITION.getStorageUint256();\\n        // Since the calculation of funds in the ingress queue is based on the number of validators\\n        // that are in a transient state (deposited but not seen on beacon yet), we can't decrease the previously\\n        // reported number (we'll be unable to figure out who is in the queue and count them).\\n        // See LIP-1 for details https://github.com/lidofinance/lido-improvement-proposals/blob/develop/LIPS/lip-1.md\\n        require(_beaconValidators >= beaconValidators, \\\"REPORTED_LESS_VALIDATORS\\\");\\n        uint256 appearedValidators = _beaconValidators.sub(beaconValidators);\\n\\n        // RewardBase is the amount of money that is not included in the reward calculation\\n        // Just appeared validators * 32 added to the previously reported beacon balance\\n        uint256 rewardBase = (appearedValidators.mul(DEPOSIT_SIZE)).add(BEACON_BALANCE_POSITION.getStorageUint256());\\n\\n        // Save the current beacon balance and validators to\\n        // calcuate rewards on the next push\\n        BEACON_BALANCE_POSITION.setStorageUint256(_beaconBalance);\\n        BEACON_VALIDATORS_POSITION.setStorageUint256(_beaconValidators);\\n\\n        if (_beaconBalance > rewardBase) {\\n            uint256 rewards = _beaconBalance.sub(rewardBase);\\n            distributeRewards(rewards);\\n        }\\n    }\\n\\n    /**\\n      * @notice Send funds to recovery Vault. Overrides default AragonApp behaviour.\\n      * @param _token Token to be sent to recovery vault.\\n      */\\n    function transferToVault(address _token) external {\\n        require(allowRecoverability(_token), \\\"RECOVER_DISALLOWED\\\");\\n        address vault = getRecoveryVault();\\n        require(isContract(vault), \\\"RECOVER_VAULT_NOT_CONTRACT\\\");\\n\\n        uint256 balance;\\n        if (_token == ETH) {\\n            balance = _getUnaccountedEther();\\n            // Transfer replaced by call to prevent transfer gas amount issue    \\n            require(vault.call.value(balance)(), \\\"RECOVER_TRANSFER_FAILED\\\");\\n        } else {\\n            ERC20 token = ERC20(_token);\\n            balance = token.staticBalanceOf(this);\\n            // safeTransfer comes from overriden default implementation\\n            require(token.safeTransfer(vault, balance), \\\"RECOVER_TOKEN_TRANSFER_FAILED\\\");\\n        }\\n\\n        emit RecoverToVault(vault, _token, balance);\\n    }\\n\\n    /**\\n      * @notice Returns staking rewards fee rate\\n      */\\n    function getFee() external view returns (uint16 feeBasisPoints) {\\n        return _getFee();\\n    }\\n\\n    /**\\n      * @notice Returns fee distribution proportion\\n      */\\n    function getFeeDistribution()\\n        external\\n        view\\n        returns (\\n            uint16 treasuryFeeBasisPoints,\\n            uint16 insuranceFeeBasisPoints,\\n            uint16 operatorsFeeBasisPoints\\n        )\\n    {\\n        return _getFeeDistribution();\\n    }\\n\\n    /**\\n      * @notice Returns current credentials to withdraw ETH on ETH 2.0 side after the phase 2 is launched\\n      */\\n    function getWithdrawalCredentials() public view returns (bytes32) {\\n        return WITHDRAWAL_CREDENTIALS_POSITION.getStorageBytes32();\\n    }\\n\\n    /**\\n    * @notice Get the amount of Ether temporary buffered on this contract balance\\n    * @dev Buffered balance is kept on the contract from the moment the funds are received from user\\n    * until the moment they are actually sent to the official Deposit contract.\\n    * @return uint256 of buffered funds in wei\\n    */\\n    function getBufferedEther() external view returns (uint256) {\\n        return _getBufferedEther();\\n    }\\n\\n    /**\\n      * @notice Gets deposit contract handle\\n      */\\n    function getDepositContract() public view returns (IDepositContract) {\\n        return IDepositContract(DEPOSIT_CONTRACT_POSITION.getStorageAddress());\\n    }\\n\\n    /**\\n    * @notice Gets authorized oracle address\\n    * @return address of oracle contract\\n    */\\n    function getOracle() public view returns (address) {\\n        return ORACLE_POSITION.getStorageAddress();\\n    }\\n\\n    /**\\n      * @notice Gets node operators registry interface handle\\n      */\\n    function getOperators() public view returns (INodeOperatorsRegistry) {\\n        return INodeOperatorsRegistry(NODE_OPERATORS_REGISTRY_POSITION.getStorageAddress());\\n    }\\n\\n    /**\\n      * @notice Returns the treasury address\\n      */\\n    function getTreasury() public view returns (address) {\\n        return TREASURY_POSITION.getStorageAddress();\\n    }\\n\\n    /**\\n      * @notice Returns the insurance fund address\\n      */\\n    function getInsuranceFund() public view returns (address) {\\n        return INSURANCE_FUND_POSITION.getStorageAddress();\\n    }\\n\\n    /**\\n    * @notice Returns the key values related to Beacon-side\\n    * @return depositedValidators - number of deposited validators\\n    * @return beaconValidators - number of Lido's validators visible in the Beacon state, reported by oracles\\n    * @return beaconBalance - total amount of Beacon-side Ether (sum of all the balances of Lido validators)\\n    */\\n    function getBeaconStat() public view returns (uint256 depositedValidators, uint256 beaconValidators, uint256 beaconBalance) {\\n        depositedValidators = DEPOSITED_VALIDATORS_POSITION.getStorageUint256();\\n        beaconValidators = BEACON_VALIDATORS_POSITION.getStorageUint256();\\n        beaconBalance = BEACON_BALANCE_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n    * @dev Sets the address of Deposit contract\\n    * @param _contract the address of Deposit contract\\n    */\\n    function _setDepositContract(IDepositContract _contract) internal {\\n        require(isContract(address(_contract)), \\\"NOT_A_CONTRACT\\\");\\n        DEPOSIT_CONTRACT_POSITION.setStorageAddress(address(_contract));\\n    }\\n\\n    /**\\n    * @dev Internal function to set authorized oracle address\\n    * @param _oracle oracle contract\\n    */\\n    function _setOracle(address _oracle) internal {\\n        require(isContract(_oracle), \\\"NOT_A_CONTRACT\\\");\\n        ORACLE_POSITION.setStorageAddress(_oracle);\\n    }\\n\\n    /**\\n    * @dev Internal function to set node operator registry address\\n    * @param _r registry of node operators\\n    */\\n    function _setOperators(INodeOperatorsRegistry _r) internal {\\n        require(isContract(_r), \\\"NOT_A_CONTRACT\\\");\\n        NODE_OPERATORS_REGISTRY_POSITION.setStorageAddress(_r);\\n    }\\n\\n    function _setTreasury(address _treasury) internal {\\n        require(_treasury != address(0), \\\"SET_TREASURY_ZERO_ADDRESS\\\");\\n        TREASURY_POSITION.setStorageAddress(_treasury);\\n    }\\n\\n    function _setInsuranceFund(address _insuranceFund) internal {\\n        require(_insuranceFund != address(0), \\\"SET_INSURANCE_FUND_ZERO_ADDRESS\\\");\\n        INSURANCE_FUND_POSITION.setStorageAddress(_insuranceFund);\\n    }\\n\\n    /**\\n    * @dev Process user deposit, mints liquid tokens and increase the pool buffer\\n    * @param _referral address of referral.\\n    * @return amount of StETH shares generated\\n    */\\n    function _submit(address _referral) internal whenNotStopped returns (uint256) {\\n        address sender = msg.sender;\\n        uint256 deposit = msg.value;\\n        require(deposit != 0, \\\"ZERO_DEPOSIT\\\");\\n\\n        uint256 sharesAmount = getSharesByPooledEth(deposit);\\n        if (sharesAmount == 0) {\\n            // totalControlledEther is 0: either the first-ever deposit or complete slashing\\n            // assume that shares correspond to Ether 1-to-1\\n            sharesAmount = deposit;\\n        }\\n\\n        _mintShares(sender, sharesAmount);\\n        _submitted(sender, deposit, _referral);\\n        _emitTransferAfterMintingShares(sender, sharesAmount);\\n        return sharesAmount;\\n    }\\n\\n    /**\\n     * @dev Emits an {Transfer} event where from is 0 address. Indicates mint events.\\n     */\\n    function _emitTransferAfterMintingShares(address _to, uint256 _sharesAmount) internal {\\n        emit Transfer(address(0), _to, getPooledEthByShares(_sharesAmount));\\n    }\\n\\n    /**\\n    * @dev Deposits buffered eth to the DepositContract and assigns chunked deposits to node operators\\n    */\\n    function _depositBufferedEther(uint256 _maxDeposits) internal whenNotStopped {\\n        uint256 buffered = _getBufferedEther();\\n        if (buffered >= DEPOSIT_SIZE) {\\n            uint256 unaccounted = _getUnaccountedEther();\\n            uint256 numDeposits = buffered.div(DEPOSIT_SIZE);\\n            _markAsUnbuffered(_ETH2Deposit(numDeposits < _maxDeposits ? numDeposits : _maxDeposits));\\n            assert(_getUnaccountedEther() == unaccounted);\\n        }\\n    }\\n\\n    /**\\n    * @dev Performs deposits to the ETH 2.0 side\\n    * @param _numDeposits Number of deposits to perform\\n    * @return actually deposited Ether amount\\n    */\\n    function _ETH2Deposit(uint256 _numDeposits) internal returns (uint256) {\\n        (bytes memory pubkeys, bytes memory signatures) = getOperators().assignNextSigningKeys(_numDeposits);\\n\\n        if (pubkeys.length == 0) {\\n            return 0;\\n        }\\n\\n        require(pubkeys.length.mod(PUBKEY_LENGTH) == 0, \\\"REGISTRY_INCONSISTENT_PUBKEYS_LEN\\\");\\n        require(signatures.length.mod(SIGNATURE_LENGTH) == 0, \\\"REGISTRY_INCONSISTENT_SIG_LEN\\\");\\n\\n        uint256 numKeys = pubkeys.length.div(PUBKEY_LENGTH);\\n        require(numKeys == signatures.length.div(SIGNATURE_LENGTH), \\\"REGISTRY_INCONSISTENT_SIG_COUNT\\\");\\n\\n        for (uint256 i = 0; i < numKeys; ++i) {\\n            bytes memory pubkey = BytesLib.slice(pubkeys, i * PUBKEY_LENGTH, PUBKEY_LENGTH);\\n            bytes memory signature = BytesLib.slice(signatures, i * SIGNATURE_LENGTH, SIGNATURE_LENGTH);\\n            _stake(pubkey, signature);\\n        }\\n\\n        DEPOSITED_VALIDATORS_POSITION.setStorageUint256(\\n            DEPOSITED_VALIDATORS_POSITION.getStorageUint256().add(numKeys)\\n        );\\n\\n        return numKeys.mul(DEPOSIT_SIZE);\\n    }\\n\\n    /**\\n    * @dev Invokes a deposit call to the official Deposit contract\\n    * @param _pubkey Validator to stake for\\n    * @param _signature Signature of the deposit call\\n    */\\n    function _stake(bytes memory _pubkey, bytes memory _signature) internal {\\n        bytes32 withdrawalCredentials = getWithdrawalCredentials();\\n        require(withdrawalCredentials != 0, \\\"EMPTY_WITHDRAWAL_CREDENTIALS\\\");\\n\\n        uint256 value = DEPOSIT_SIZE;\\n\\n        // The following computations and Merkle tree-ization will make official Deposit contract happy\\n        uint256 depositAmount = value.div(DEPOSIT_AMOUNT_UNIT);\\n        assert(depositAmount.mul(DEPOSIT_AMOUNT_UNIT) == value);    // properly rounded\\n\\n        // Compute deposit data root (`DepositData` hash tree root) according to deposit_contract.sol\\n        bytes32 pubkeyRoot = sha256(_pad64(_pubkey));\\n        bytes32 signatureRoot = sha256(\\n            abi.encodePacked(\\n                sha256(BytesLib.slice(_signature, 0, 64)),\\n                sha256(_pad64(BytesLib.slice(_signature, 64, SIGNATURE_LENGTH.sub(64))))\\n            )\\n        );\\n\\n        bytes32 depositDataRoot = sha256(\\n            abi.encodePacked(\\n                sha256(abi.encodePacked(pubkeyRoot, withdrawalCredentials)),\\n                sha256(abi.encodePacked(_toLittleEndian64(depositAmount), signatureRoot))\\n            )\\n        );\\n\\n        uint256 targetBalance = address(this).balance.sub(value);\\n\\n        getDepositContract().deposit.value(value)(\\n            _pubkey, abi.encodePacked(withdrawalCredentials), _signature, depositDataRoot);\\n        require(address(this).balance == targetBalance, \\\"EXPECTING_DEPOSIT_TO_HAPPEN\\\");\\n    }\\n\\n    /**\\n    * @dev Distributes rewards by minting and distributing corresponding amount of liquid tokens.\\n    * @param _totalRewards Total rewards accrued on the Ethereum 2.0 side in wei\\n    */\\n    function distributeRewards(uint256 _totalRewards) internal {\\n        // We need to take a defined percentage of the reported reward as a fee, and we do\\n        // this by minting new token shares and assigning them to the fee recipients (see\\n        // StETH docs for the explanation of the shares mechanics). The staking rewards fee\\n        // is defined in basis points (1 basis point is equal to 0.01%, 10000 is 100%).\\n        //\\n        // Since we've increased totalPooledEther by _totalRewards (which is already\\n        // performed by the time this function is called), the combined cost of all holders'\\n        // shares has became _totalRewards StETH tokens more, effectively splitting the reward\\n        // between each token holder proportionally to their token share.\\n        //\\n        // Now we want to mint new shares to the fee recipient, so that the total cost of the\\n        // newly-minted shares exactly corresponds to the fee taken:\\n        //\\n        // shares2mint * newShareCost = (_totalRewards * feeBasis) / 10000\\n        // newShareCost = newTotalPooledEther / (prevTotalShares + shares2mint)\\n        //\\n        // which follows to:\\n        //\\n        //                        _totalRewards * feeBasis * prevTotalShares\\n        // shares2mint = --------------------------------------------------------------\\n        //                 (newTotalPooledEther * 10000) - (feeBasis * _totalRewards)\\n        //\\n        // The effect is that the given percentage of the reward goes to the fee recipient, and\\n        // the rest of the reward is distributed between token holders proportionally to their\\n        // token shares.\\n        uint256 feeBasis = _getFee();\\n        uint256 shares2mint = (\\n            _totalRewards.mul(feeBasis).mul(_getTotalShares())\\n            .div(\\n                _getTotalPooledEther().mul(10000)\\n                .sub(feeBasis.mul(_totalRewards))\\n            )\\n        );\\n\\n        // Mint the calculated amount of shares to this contract address. This will reduce the\\n        // balances of the holders, as if the fee was taken in parts from each of them.\\n        _mintShares(address(this), shares2mint);\\n\\n        (,uint16 insuranceFeeBasisPoints, uint16 operatorsFeeBasisPoints) = _getFeeDistribution();\\n\\n        uint256 toInsuranceFund = shares2mint.mul(insuranceFeeBasisPoints).div(10000);\\n        address insuranceFund = getInsuranceFund();\\n        _transferShares(address(this), insuranceFund, toInsuranceFund);\\n        _emitTransferAfterMintingShares(insuranceFund, toInsuranceFund);\\n\\n        uint256 distributedToOperatorsShares = _distributeNodeOperatorsReward(\\n            shares2mint.mul(operatorsFeeBasisPoints).div(10000)\\n        );\\n\\n        // Transfer the rest of the fee to treasury\\n        uint256 toTreasury = shares2mint.sub(toInsuranceFund).sub(distributedToOperatorsShares);\\n\\n        address treasury = getTreasury();\\n        _transferShares(address(this), treasury, toTreasury);\\n        _emitTransferAfterMintingShares(treasury, toTreasury);\\n    }\\n\\n    function _distributeNodeOperatorsReward(uint256 _sharesToDistribute) internal returns (uint256 distributed) {\\n        (address[] memory recipients, uint256[] memory shares) = getOperators().getRewardsDistribution(_sharesToDistribute);\\n\\n        assert(recipients.length == shares.length);\\n\\n        distributed = 0;\\n        for (uint256 idx = 0; idx < recipients.length; ++idx) {\\n            _transferShares(\\n                address(this),\\n                recipients[idx],\\n                shares[idx]\\n            );\\n            _emitTransferAfterMintingShares(recipients[idx], shares[idx]);\\n            distributed = distributed.add(shares[idx]);\\n        }\\n    }\\n\\n    /**\\n    * @dev Records a deposit made by a user with optional referral\\n    * @param _sender sender's address\\n    * @param _value Deposit value in wei\\n    * @param _referral address of the referral\\n    */\\n    function _submitted(address _sender, uint256 _value, address _referral) internal {\\n        BUFFERED_ETHER_POSITION.setStorageUint256(_getBufferedEther().add(_value));\\n\\n        emit Submitted(_sender, _value, _referral);\\n    }\\n\\n    /**\\n      * @dev Records a deposit to the deposit_contract.deposit function.\\n      * @param _amount Total amount deposited to the ETH 2.0 side\\n      */\\n    function _markAsUnbuffered(uint256 _amount) internal {\\n        BUFFERED_ETHER_POSITION.setStorageUint256(\\n            BUFFERED_ETHER_POSITION.getStorageUint256().sub(_amount));\\n\\n        emit Unbuffered(_amount);\\n    }\\n\\n    /**\\n      * @dev Write a value nominated in basis points\\n      */\\n    function _setBPValue(bytes32 _slot, uint16 _value) internal {\\n        require(_value <= 10000, \\\"VALUE_OVER_100_PERCENT\\\");\\n        _slot.setStorageUint256(uint256(_value));\\n    }\\n\\n    /**\\n      * @dev Returns staking rewards fee rate\\n      */\\n    function _getFee() internal view returns (uint16) {\\n        return _readBPValue(FEE_POSITION);\\n    }\\n\\n    /**\\n      * @dev Returns fee distribution proportion\\n      */\\n    function _getFeeDistribution() internal view\\n        returns (uint16 treasuryFeeBasisPoints, uint16 insuranceFeeBasisPoints, uint16 operatorsFeeBasisPoints)\\n    {\\n        treasuryFeeBasisPoints = _readBPValue(TREASURY_FEE_POSITION);\\n        insuranceFeeBasisPoints = _readBPValue(INSURANCE_FEE_POSITION);\\n        operatorsFeeBasisPoints = _readBPValue(NODE_OPERATORS_FEE_POSITION);\\n    }\\n\\n    /**\\n      * @dev Read a value nominated in basis points\\n      */\\n    function _readBPValue(bytes32 _slot) internal view returns (uint16) {\\n        uint256 v = _slot.getStorageUint256();\\n        assert(v <= 10000);\\n        return uint16(v);\\n    }\\n\\n    /**\\n      * @dev Gets the amount of Ether temporary buffered on this contract balance\\n      */\\n    function _getBufferedEther() internal view returns (uint256) {\\n        uint256 buffered = BUFFERED_ETHER_POSITION.getStorageUint256();\\n        assert(address(this).balance >= buffered);\\n\\n        return buffered;\\n    }\\n\\n    /**\\n      * @dev Gets unaccounted (excess) Ether on this contract balance\\n      */\\n    function _getUnaccountedEther() internal view returns (uint256) {\\n        return address(this).balance.sub(_getBufferedEther());\\n    }\\n\\n    /**\\n    * @dev Calculates and returns the total base balance (multiple of 32) of validators in transient state,\\n    *      i.e. submitted to the official Deposit contract but not yet visible in the beacon state.\\n    * @return transient balance in wei (1e-18 Ether)\\n    */\\n    function _getTransientBalance() internal view returns (uint256) {\\n        uint256 depositedValidators = DEPOSITED_VALIDATORS_POSITION.getStorageUint256();\\n        uint256 beaconValidators = BEACON_VALIDATORS_POSITION.getStorageUint256();\\n        // beaconValidators can never be less than deposited ones.\\n        assert(depositedValidators >= beaconValidators);\\n        uint256 transientValidators = depositedValidators.sub(beaconValidators);\\n        return transientValidators.mul(DEPOSIT_SIZE);\\n    }\\n\\n    /**\\n    * @dev Gets the total amount of Ether controlled by the system\\n    * @return total balance in wei\\n    */\\n    function _getTotalPooledEther() internal view returns (uint256) {\\n        uint256 bufferedBalance = _getBufferedEther();\\n        uint256 beaconBalance = BEACON_BALANCE_POSITION.getStorageUint256();\\n        uint256 transientBalance = _getTransientBalance();\\n        return bufferedBalance.add(beaconBalance).add(transientBalance);\\n    }\\n\\n    /**\\n      * @dev Padding memory array with zeroes up to 64 bytes on the right\\n      * @param _b Memory array of size 32 .. 64\\n      */\\n    function _pad64(bytes memory _b) internal pure returns (bytes memory) {\\n        assert(_b.length >= 32 && _b.length <= 64);\\n        if (64 == _b.length)\\n            return _b;\\n\\n        bytes memory zero32 = new bytes(32);\\n        assembly { mstore(add(zero32, 0x20), 0) }\\n\\n        if (32 == _b.length)\\n            return BytesLib.concat(_b, zero32);\\n        else\\n            return BytesLib.concat(_b, BytesLib.slice(zero32, 0, uint256(64).sub(_b.length)));\\n    }\\n\\n    /**\\n      * @dev Converting value to little endian bytes and padding up to 32 bytes on the right\\n      * @param _value Number less than `2**64` for compatibility reasons\\n      */\\n    function _toLittleEndian64(uint256 _value) internal pure returns (uint256 result) {\\n        result = 0;\\n        uint256 temp_value = _value;\\n        for (uint256 i = 0; i < 8; ++i) {\\n            result = (result << 8) | (temp_value & 0xFF);\\n            temp_value >>= 8;\\n        }\\n\\n        assert(0 == temp_value);    // fully converted\\n        result <<= (24 * 8);\\n    }\\n\\n    function to64(uint256 v) internal pure returns (uint64) {\\n        assert(v <= uint256(uint64(-1)));\\n        return uint64(v);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/lib/math/SafeMath64.sol\": {\r\n      \"content\": \"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\\n// Adapted for uint64, pragma ^0.4.24, and satisfying our linter rules\\n// Also optimized the mul() implementation, see https://github.com/aragon/aragonOS/pull/417\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath64\\n * @dev Math operations for uint64 with safety checks that revert on error\\n */\\nlibrary SafeMath64 {\\n    string private constant ERROR_ADD_OVERFLOW = \\\"MATH64_ADD_OVERFLOW\\\";\\n    string private constant ERROR_SUB_UNDERFLOW = \\\"MATH64_SUB_UNDERFLOW\\\";\\n    string private constant ERROR_MUL_OVERFLOW = \\\"MATH64_MUL_OVERFLOW\\\";\\n    string private constant ERROR_DIV_ZERO = \\\"MATH64_DIV_ZERO\\\";\\n\\n    /**\\n    * @dev Multiplies two numbers, reverts on overflow.\\n    */\\n    function mul(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        uint256 c = uint256(_a) * uint256(_b);\\n        require(c < 0x010000000000000000, ERROR_MUL_OVERFLOW); // 2**64 (less gas this way)\\n\\n        return uint64(c);\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\\n        uint64 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\\n        uint64 c = _a - _b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, reverts on overflow.\\n    */\\n    function add(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        uint64 c = _a + _b;\\n        require(c >= _a, ERROR_ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint64 a, uint64 b) internal pure returns (uint64) {\\n        require(b != 0, ERROR_DIV_ZERO);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"solidity-bytes-utils/contracts/BytesLib.sol\": {\r\n      \"content\": \"/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\n\\npragma solidity ^0.4.19;\\n\\n\\nlibrary BytesLib {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add \\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes_slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes_slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes_slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes_slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes_slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes_slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n                \\n                for { \\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(bytes _bytes, uint _start, uint _length) internal  pure returns (bytes) {\\n        require(_bytes.length >= (_start + _length));\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes _bytes, uint _start) internal  pure returns (address) {\\n        require(_bytes.length >= (_start + 20));\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes _bytes, uint _start) internal  pure returns (uint8) {\\n        require(_bytes.length >= (_start + 1));\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes _bytes, uint _start) internal  pure returns (uint16) {\\n        require(_bytes.length >= (_start + 2));\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes _bytes, uint _start) internal  pure returns (uint32) {\\n        require(_bytes.length >= (_start + 4));\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint(bytes _bytes, uint _start) internal  pure returns (uint256) {\\n        require(_bytes.length >= (_start + 32));\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes _bytes, uint _start) internal  pure returns (bytes32) {\\n        require(_bytes.length >= (_start + 32));\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes_slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes_slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/0.4.24/interfaces/INodeOperatorsRegistry.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2020 Lido <info@lido.fi>\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.4.24;\\n\\n\\n/**\\n  * @title Node Operator registry\\n  *\\n  * Node Operator registry manages signing keys and other node operator data.\\n  * It's also responsible for distributing rewards to node operators.\\n  */\\ninterface INodeOperatorsRegistry {\\n    /**\\n      * @notice Add node operator named `name` with reward address `rewardAddress` and staking limit = 0 validators\\n      * @param _name Human-readable name\\n      * @param _rewardAddress Ethereum 1 address which receives stETH rewards for this operator\\n      * @return a unique key of the added operator\\n      */\\n    function addNodeOperator(string _name, address _rewardAddress) external returns (uint256 id);\\n\\n    /**\\n      * @notice `_active ? 'Enable' : 'Disable'` the node operator #`_id`\\n      */\\n    function setNodeOperatorActive(uint256 _id, bool _active) external;\\n\\n    /**\\n      * @notice Change human-readable name of the node operator #`_id` to `_name`\\n      */\\n    function setNodeOperatorName(uint256 _id, string _name) external;\\n\\n    /**\\n      * @notice Change reward address of the node operator #`_id` to `_rewardAddress`\\n      */\\n    function setNodeOperatorRewardAddress(uint256 _id, address _rewardAddress) external;\\n\\n    /**\\n      * @notice Set the maximum number of validators to stake for the node operator #`_id` to `_stakingLimit`\\n      */\\n    function setNodeOperatorStakingLimit(uint256 _id, uint64 _stakingLimit) external;\\n\\n    /**\\n      * @notice Report `_stoppedIncrement` more stopped validators of the node operator #`_id`\\n      */\\n    function reportStoppedValidators(uint256 _id, uint64 _stoppedIncrement) external;\\n\\n    /**\\n      * @notice Remove unused signing keys\\n      * @dev Function is used by the pool\\n      */\\n    function trimUnusedKeys() external;\\n\\n    /**\\n      * @notice Returns total number of node operators\\n      */\\n    function getNodeOperatorsCount() external view returns (uint256);\\n\\n    /**\\n      * @notice Returns number of active node operators\\n      */\\n    function getActiveNodeOperatorsCount() external view returns (uint256);\\n\\n    /**\\n      * @notice Returns the n-th node operator\\n      * @param _id Node Operator id\\n      * @param _fullInfo If true, name will be returned as well\\n      */\\n    function getNodeOperator(uint256 _id, bool _fullInfo) external view returns (\\n        bool active,\\n        string name,\\n        address rewardAddress,\\n        uint64 stakingLimit,\\n        uint64 stoppedValidators,\\n        uint64 totalSigningKeys,\\n        uint64 usedSigningKeys);\\n\\n    /**\\n      * @notice Returns the rewards distribution proportional to the effective stake for each node operator.\\n      * @param _totalRewardShares Total amount of reward shares to distribute.\\n      */\\n    function getRewardsDistribution(uint256 _totalRewardShares) external view returns (\\n        address[] memory recipients,\\n        uint256[] memory shares\\n    );\\n\\n    event NodeOperatorAdded(uint256 id, string name, address rewardAddress, uint64 stakingLimit);\\n    event NodeOperatorActiveSet(uint256 indexed id, bool active);\\n    event NodeOperatorNameSet(uint256 indexed id, string name);\\n    event NodeOperatorRewardAddressSet(uint256 indexed id, address rewardAddress);\\n    event NodeOperatorStakingLimitSet(uint256 indexed id, uint64 stakingLimit);\\n    event NodeOperatorTotalStoppedValidatorsReported(uint256 indexed id, uint64 totalStopped);\\n    event NodeOperatorTotalKeysTrimmed(uint256 indexed id, uint64 totalKeysTrimmed);\\n\\n    /**\\n     * @notice Selects and returns at most `_numKeys` signing keys (as well as the corresponding\\n     *         signatures) from the set of active keys and marks the selected keys as used.\\n     *         May only be called by the pool contract.\\n     *\\n     * @param _numKeys The number of keys to select. The actual number of selected keys may be less\\n     *        due to the lack of active keys.\\n     */\\n    function assignNextSigningKeys(uint256 _numKeys) external returns (bytes memory pubkeys, bytes memory signatures);\\n\\n    /**\\n      * @notice Add `_quantity` validator signing keys to the keys of the node operator #`_operator_id`. Concatenated keys are: `_pubkeys`\\n      * @dev Along with each key the DAO has to provide a signatures for the\\n      *      (pubkey, withdrawal_credentials, 32000000000) message.\\n      *      Given that information, the contract'll be able to call\\n      *      deposit_contract.deposit on-chain.\\n      * @param _operator_id Node Operator id\\n      * @param _quantity Number of signing keys provided\\n      * @param _pubkeys Several concatenated validator signing keys\\n      * @param _signatures Several concatenated signatures for (pubkey, withdrawal_credentials, 32000000000) messages\\n      */\\n    function addSigningKeys(uint256 _operator_id, uint256 _quantity, bytes _pubkeys, bytes _signatures) external;\\n\\n    /**\\n      * @notice Add `_quantity` validator signing keys of operator #`_id` to the set of usable keys. Concatenated keys are: `_pubkeys`. Can be done by node operator in question by using the designated rewards address.\\n      * @dev Along with each key the DAO has to provide a signatures for the\\n      *      (pubkey, withdrawal_credentials, 32000000000) message.\\n      *      Given that information, the contract'll be able to call\\n      *      deposit_contract.deposit on-chain.\\n      * @param _operator_id Node Operator id\\n      * @param _quantity Number of signing keys provided\\n      * @param _pubkeys Several concatenated validator signing keys\\n      * @param _signatures Several concatenated signatures for (pubkey, withdrawal_credentials, 32000000000) messages\\n      */\\n    function addSigningKeysOperatorBH(uint256 _operator_id, uint256 _quantity, bytes _pubkeys, bytes _signatures) external;\\n\\n    /**\\n      * @notice Removes a validator signing key #`_index` from the keys of the node operator #`_operator_id`\\n      * @param _operator_id Node Operator id\\n      * @param _index Index of the key, starting with 0\\n      */\\n    function removeSigningKey(uint256 _operator_id, uint256 _index) external;\\n\\n    /**\\n      * @notice Removes a validator signing key #`_index` of operator #`_id` from the set of usable keys. Executed on behalf of Node Operator.\\n      * @param _operator_id Node Operator id\\n      * @param _index Index of the key, starting with 0\\n      */\\n    function removeSigningKeyOperatorBH(uint256 _operator_id, uint256 _index) external;\\n\\n    /**\\n      * @notice Removes an #`_amount` of validator signing keys starting from #`_index` of operator #`_id` usable keys. Executed on behalf of DAO.\\n      * @param _operator_id Node Operator id\\n      * @param _index Index of the key, starting with 0\\n      * @param _amount Number of keys to remove\\n      */\\n    function removeSigningKeys(uint256 _operator_id, uint256 _index, uint256 _amount) external;\\n\\n    /**\\n      * @notice Removes an #`_amount` of validator signing keys starting from #`_index` of operator #`_id` usable keys. Executed on behalf of Node Operator.\\n      * @param _operator_id Node Operator id\\n      * @param _index Index of the key, starting with 0\\n      * @param _amount Number of keys to remove\\n      */\\n    function removeSigningKeysOperatorBH(uint256 _operator_id, uint256 _index, uint256 _amount) external;\\n\\n    /**\\n      * @notice Returns total number of signing keys of the node operator #`_operator_id`\\n      */\\n    function getTotalSigningKeyCount(uint256 _operator_id) external view returns (uint256);\\n\\n    /**\\n      * @notice Returns number of usable signing keys of the node operator #`_operator_id`\\n      */\\n    function getUnusedSigningKeyCount(uint256 _operator_id) external view returns (uint256);\\n\\n    /**\\n      * @notice Returns n-th signing key of the node operator #`_operator_id`\\n      * @param _operator_id Node Operator id\\n      * @param _index Index of the key, starting with 0\\n      * @return key Key\\n      * @return depositSignature Signature needed for a deposit_contract.deposit call\\n      * @return used Flag indication if the key was used in the staking\\n      */\\n    function getSigningKey(uint256 _operator_id, uint256 _index) external view returns\\n            (bytes key, bytes depositSignature, bool used);\\n\\n\\n    /**\\n     * @notice Returns a monotonically increasing counter that gets incremented when any of the following happens:\\n     *   1. a node operator's key(s) is added;\\n     *   2. a node operator's key(s) is removed;\\n     *   3. a node operator's approved keys limit is changed.\\n     *   4. a node operator was activated/deactivated. Activation or deactivation of node operator\\n     *      might lead to usage of unvalidated keys in the assignNextSigningKeys method.\\n     */\\n    function getKeysOpIndex() external view returns (uint256);\\n\\n    event SigningKeyAdded(uint256 indexed operatorId, bytes pubkey);\\n    event SigningKeyRemoved(uint256 indexed operatorId, bytes pubkey);\\n    event KeysOpIndexSet(uint256 keysOpIndex);\\n}\\n\"\r\n    },\r\n    \"contracts/0.4.24/interfaces/IDepositContract.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2020 Lido <info@lido.fi>\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.4.24;\\n\\n\\n/**\\n  * @title Deposit contract interface\\n  */\\ninterface IDepositContract {\\n    /**\\n      * @notice Top-ups deposit of a validator on the ETH 2.0 side\\n      * @param pubkey Validator signing key\\n      * @param withdrawal_credentials Credentials that allows to withdraw funds\\n      * @param signature Signature of the request\\n      * @param deposit_data_root The deposits Merkle tree node, used as a checksum\\n      */\\n    function deposit(\\n        bytes /* 48 */ pubkey,\\n        bytes /* 32 */ withdrawal_credentials,\\n        bytes /* 96 */ signature,\\n        bytes32 deposit_data_root\\n    )\\n        external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/0.4.24/StETH.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2020 Lido <info@lido.fi>\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\n/* See contracts/COMPILERS.md */\\npragma solidity 0.4.24;\\n\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@aragon/os/contracts/common/UnstructuredStorage.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath.sol\\\";\\nimport \\\"./lib/Pausable.sol\\\";\\n\\n/**\\n * @title Interest-bearing ERC20-like token for Lido Liquid Stacking protocol.\\n *\\n * This contract is abstract. To make the contract deployable override the\\n * `_getTotalPooledEther` function. `Lido.sol` contract inherits StETH and defines\\n * the `_getTotalPooledEther` function.\\n *\\n * StETH balances are dynamic and represent the holder's share in the total amount\\n * of Ether controlled by the protocol. Account shares aren't normalized, so the\\n * contract also stores the sum of all shares to calculate each account's token balance\\n * which equals to:\\n *\\n *   shares[account] * _getTotalPooledEther() / _getTotalShares()\\n *\\n * For example, assume that we have:\\n *\\n *   _getTotalPooledEther() -> 10 ETH\\n *   sharesOf(user1) -> 100\\n *   sharesOf(user2) -> 400\\n *\\n * Therefore:\\n *\\n *   balanceOf(user1) -> 2 tokens which corresponds 2 ETH\\n *   balanceOf(user2) -> 8 tokens which corresponds 8 ETH\\n *\\n * Since balances of all token holders change when the amount of total pooled Ether\\n * changes, this token cannot fully implement ERC20 standard: it only emits `Transfer`\\n * events upon explicit transfer between holders. In contrast, when total amount of\\n * pooled Ether increases, no `Transfer` events are generated: doing so would require\\n * emitting an event for each token holder and thus running an unbounded loop.\\n *\\n * The token inherits from `Pausable` and uses `whenNotStopped` modifier for methods\\n * which change `shares` or `allowances`. `_stop` and `_resume` functions are overriden\\n * in `Lido.sol` and might be called by an account with the `PAUSE_ROLE` assigned by the\\n * DAO. This is useful for emergency scenarios, e.g. a protocol bug, where one might want\\n * to freeze all token transfers and approvals until the emergency is resolved.\\n */\\ncontract StETH is IERC20, Pausable {\\n    using SafeMath for uint256;\\n    using UnstructuredStorage for bytes32;\\n\\n    /**\\n     * @dev StETH balances are dynamic and are calculated based on the accounts' shares\\n     * and the total amount of Ether controlled by the protocol. Account shares aren't\\n     * normalized, so the contract also stores the sum of all shares to calculate\\n     * each account's token balance which equals to:\\n     *\\n     *   shares[account] * _getTotalPooledEther() / _getTotalShares()\\n    */\\n    mapping (address => uint256) private shares;\\n\\n    /**\\n     * @dev Allowances are nominated in tokens, not token shares.\\n     */\\n    mapping (address => mapping (address => uint256)) private allowances;\\n\\n    /**\\n     * @dev Storage position used for holding the total amount of shares in existence.\\n     *\\n     * The Lido protocol is built on top of Aragon and uses the Unstructured Storage pattern\\n     * for value types:\\n     *\\n     * https://blog.openzeppelin.com/upgradeability-using-unstructured-storage\\n     * https://blog.8bitzen.com/posts/20-02-2020-understanding-how-solidity-upgradeable-unstructured-proxies-work\\n     *\\n     * For reference types, conventional storage variables are used since it's non-trivial\\n     * and error-prone to implement reference-type unstructured storage using Solidity v0.4;\\n     * see https://github.com/lidofinance/lido-dao/issues/181#issuecomment-736098834\\n     */\\n    bytes32 internal constant TOTAL_SHARES_POSITION = keccak256(\\\"lido.StETH.totalShares\\\");\\n\\n    /**\\n     * @return the name of the token.\\n     */\\n    function name() public pure returns (string) {\\n        return \\\"Liquid staked Ether 2.0\\\";\\n    }\\n\\n    /**\\n     * @return the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public pure returns (string) {\\n        return \\\"stETH\\\";\\n    }\\n\\n    /**\\n     * @return the number of decimals for getting user representation of a token amount.\\n     */\\n    function decimals() public pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @return the amount of tokens in existence.\\n     *\\n     * @dev Always equals to `_getTotalPooledEther()` since token amount\\n     * is pegged to the total amount of Ether controlled by the protocol.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _getTotalPooledEther();\\n    }\\n\\n    /**\\n     * @return the entire amount of Ether controlled by the protocol.\\n     *\\n     * @dev The sum of all ETH balances in the protocol, equals to the total supply of stETH.\\n     */\\n    function getTotalPooledEther() public view returns (uint256) {\\n        return _getTotalPooledEther();\\n    }\\n\\n    /**\\n     * @return the amount of tokens owned by the `_account`.\\n     *\\n     * @dev Balances are dynamic and equal the `_account`'s share in the amount of the\\n     * total Ether controlled by the protocol. See `sharesOf`.\\n     */\\n    function balanceOf(address _account) public view returns (uint256) {\\n        return getPooledEthByShares(_sharesOf(_account));\\n    }\\n\\n    /**\\n     * @notice Moves `_amount` tokens from the caller's account to the `_recipient` account.\\n     *\\n     * @return a boolean value indicating whether the operation succeeded.\\n     * Emits a `Transfer` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `_recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `_amount`.\\n     * - the contract must not be paused.\\n     *\\n     * @dev The `_amount` argument is the amount of tokens, not shares.\\n     */\\n    function transfer(address _recipient, uint256 _amount) public returns (bool) {\\n        _transfer(msg.sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @return the remaining number of tokens that `_spender` is allowed to spend\\n     * on behalf of `_owner` through `transferFrom`. This is zero by default.\\n     *\\n     * @dev This value changes when `approve` or `transferFrom` is called.\\n     */\\n    function allowance(address _owner, address _spender) public view returns (uint256) {\\n        return allowances[_owner][_spender];\\n    }\\n\\n    /**\\n     * @notice Sets `_amount` as the allowance of `_spender` over the caller's tokens.\\n     *\\n     * @return a boolean value indicating whether the operation succeeded.\\n     * Emits an `Approval` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `_spender` cannot be the zero address.\\n     * - the contract must not be paused.\\n     *\\n     * @dev The `_amount` argument is the amount of tokens, not shares.\\n     */\\n    function approve(address _spender, uint256 _amount) public returns (bool) {\\n        _approve(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Moves `_amount` tokens from `_sender` to `_recipient` using the\\n     * allowance mechanism. `_amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * @return a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     * Emits an `Approval` event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `_sender` and `_recipient` cannot be the zero addresses.\\n     * - `_sender` must have a balance of at least `_amount`.\\n     * - the caller must have allowance for `_sender`'s tokens of at least `_amount`.\\n     * - the contract must not be paused.\\n     *\\n     * @dev The `_amount` argument is the amount of tokens, not shares.\\n     */\\n    function transferFrom(address _sender, address _recipient, uint256 _amount) public returns (bool) {\\n        uint256 currentAllowance = allowances[_sender][msg.sender];\\n        require(currentAllowance >= _amount, \\\"TRANSFER_AMOUNT_EXCEEDS_ALLOWANCE\\\");\\n\\n        _transfer(_sender, _recipient, _amount);\\n        _approve(_sender, msg.sender, currentAllowance.sub(_amount));\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Atomically increases the allowance granted to `_spender` by the caller by `_addedValue`.\\n     *\\n     * This is an alternative to `approve` that can be used as a mitigation for\\n     * problems described in:\\n     * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol#L42\\n     * Emits an `Approval` event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `_spender` cannot be the the zero address.\\n     * - the contract must not be paused.\\n     */\\n    function increaseAllowance(address _spender, uint256 _addedValue) public returns (bool) {\\n        _approve(msg.sender, _spender, allowances[msg.sender][_spender].add(_addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Atomically decreases the allowance granted to `_spender` by the caller by `_subtractedValue`.\\n     *\\n     * This is an alternative to `approve` that can be used as a mitigation for\\n     * problems described in:\\n     * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol#L42\\n     * Emits an `Approval` event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `_spender` cannot be the zero address.\\n     * - `_spender` must have allowance for the caller of at least `_subtractedValue`.\\n     * - the contract must not be paused.\\n     */\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) public returns (bool) {\\n        uint256 currentAllowance = allowances[msg.sender][_spender];\\n        require(currentAllowance >= _subtractedValue, \\\"DECREASED_ALLOWANCE_BELOW_ZERO\\\");\\n        _approve(msg.sender, _spender, currentAllowance.sub(_subtractedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @return the total amount of shares in existence.\\n     *\\n     * @dev The sum of all accounts' shares can be an arbitrary number, therefore\\n     * it is necessary to store it in order to calculate each account's relative share.\\n     */\\n    function getTotalShares() public view returns (uint256) {\\n        return _getTotalShares();\\n    }\\n\\n    /**\\n     * @return the amount of shares owned by `_account`.\\n     */\\n    function sharesOf(address _account) public view returns (uint256) {\\n        return _sharesOf(_account);\\n    }\\n\\n    /**\\n     * @return the amount of shares that corresponds to `_ethAmount` protocol-controlled Ether.\\n     */\\n    function getSharesByPooledEth(uint256 _ethAmount) public view returns (uint256) {\\n        uint256 totalPooledEther = _getTotalPooledEther();\\n        if (totalPooledEther == 0) {\\n            return 0;\\n        } else {\\n            return _ethAmount\\n                .mul(_getTotalShares())\\n                .div(totalPooledEther);\\n        }\\n    }\\n\\n    /**\\n     * @return the amount of Ether that corresponds to `_sharesAmount` token shares.\\n     */\\n    function getPooledEthByShares(uint256 _sharesAmount) public view returns (uint256) {\\n        uint256 totalShares = _getTotalShares();\\n        if (totalShares == 0) {\\n            return 0;\\n        } else {\\n            return _sharesAmount\\n                .mul(_getTotalPooledEther())\\n                .div(totalShares);\\n        }\\n    }\\n\\n    /**\\n     * @return the total amount (in wei) of Ether controlled by the protocol.\\n     * @dev This is used for calaulating tokens from shares and vice versa.\\n     * @dev This function is required to be implemented in a derived contract.\\n     */\\n    function _getTotalPooledEther() internal view returns (uint256);\\n\\n    /**\\n     * @notice Moves `_amount` tokens from `_sender` to `_recipient`.\\n     * Emits a `Transfer` event.\\n     */\\n    function _transfer(address _sender, address _recipient, uint256 _amount) internal {\\n        uint256 _sharesToTransfer = getSharesByPooledEth(_amount);\\n        _transferShares(_sender, _recipient, _sharesToTransfer);\\n        emit Transfer(_sender, _recipient, _amount);\\n    }\\n\\n    /**\\n     * @notice Sets `_amount` as the allowance of `_spender` over the `_owner` s tokens.\\n     *\\n     * Emits an `Approval` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `_owner` cannot be the zero address.\\n     * - `_spender` cannot be the zero address.\\n     * - the contract must not be paused.\\n     */\\n    function _approve(address _owner, address _spender, uint256 _amount) internal whenNotStopped {\\n        require(_owner != address(0), \\\"APPROVE_FROM_ZERO_ADDRESS\\\");\\n        require(_spender != address(0), \\\"APPROVE_TO_ZERO_ADDRESS\\\");\\n\\n        allowances[_owner][_spender] = _amount;\\n        emit Approval(_owner, _spender, _amount);\\n    }\\n\\n    /**\\n     * @return the total amount of shares in existence.\\n     */\\n    function _getTotalShares() internal view returns (uint256) {\\n        return TOTAL_SHARES_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n     * @return the amount of shares owned by `_account`.\\n     */\\n    function _sharesOf(address _account) internal view returns (uint256) {\\n        return shares[_account];\\n    }\\n\\n    /**\\n     * @notice Moves `_sharesAmount` shares from `_sender` to `_recipient`.\\n     *\\n     * Requirements:\\n     *\\n     * - `_sender` cannot be the zero address.\\n     * - `_recipient` cannot be the zero address.\\n     * - `_sender` must hold at least `_sharesAmount` shares.\\n     * - the contract must not be paused.\\n     */\\n    function _transferShares(address _sender, address _recipient, uint256 _sharesAmount) internal whenNotStopped {\\n        require(_sender != address(0), \\\"TRANSFER_FROM_THE_ZERO_ADDRESS\\\");\\n        require(_recipient != address(0), \\\"TRANSFER_TO_THE_ZERO_ADDRESS\\\");\\n\\n        uint256 currentSenderShares = shares[_sender];\\n        require(_sharesAmount <= currentSenderShares, \\\"TRANSFER_AMOUNT_EXCEEDS_BALANCE\\\");\\n\\n        shares[_sender] = currentSenderShares.sub(_sharesAmount);\\n        shares[_recipient] = shares[_recipient].add(_sharesAmount);\\n    }\\n\\n    /**\\n     * @notice Creates `_sharesAmount` shares and assigns them to `_recipient`, increasing the total amount of shares.\\n     * @dev This doesn't increase the token total supply.\\n     *\\n     * Requirements:\\n     *\\n     * - `_recipient` cannot be the zero address.\\n     * - the contract must not be paused.\\n     */\\n    function _mintShares(address _recipient, uint256 _sharesAmount) internal whenNotStopped returns (uint256 newTotalShares) {\\n        require(_recipient != address(0), \\\"MINT_TO_THE_ZERO_ADDRESS\\\");\\n\\n        newTotalShares = _getTotalShares().add(_sharesAmount);\\n        TOTAL_SHARES_POSITION.setStorageUint256(newTotalShares);\\n\\n        shares[_recipient] = shares[_recipient].add(_sharesAmount);\\n\\n        // Notice: we're not emitting a Transfer event from the zero address here since shares mint\\n        // works by taking the amount of tokens corresponding to the minted shares from all other\\n        // token holders, proportionally to their share. The total supply of the token doesn't change\\n        // as the result. This is equivalent to performing a send from each other token holder's\\n        // address to `address`, but we cannot reflect this as it would require sending an unbounded\\n        // number of events.\\n    }\\n\\n    /**\\n     * @notice Destroys `_sharesAmount` shares from `_account`'s holdings, decreasing the total amount of shares.\\n     * @dev This doesn't decrease the token total supply.\\n     *\\n     * Requirements:\\n     *\\n     * - `_account` cannot be the zero address.\\n     * - `_account` must hold at least `_sharesAmount` shares.\\n     * - the contract must not be paused.\\n     */\\n    function _burnShares(address _account, uint256 _sharesAmount) internal whenNotStopped returns (uint256 newTotalShares) {\\n        require(_account != address(0), \\\"BURN_FROM_THE_ZERO_ADDRESS\\\");\\n\\n        uint256 accountShares = shares[_account];\\n        require(_sharesAmount <= accountShares, \\\"BURN_AMOUNT_EXCEEDS_BALANCE\\\");\\n\\n        newTotalShares = _getTotalShares().sub(_sharesAmount);\\n        TOTAL_SHARES_POSITION.setStorageUint256(newTotalShares);\\n\\n        shares[_account] = accountShares.sub(_sharesAmount);\\n\\n        // Notice: we're not emitting a Transfer event to the zero address here since shares burn\\n        // works by redistributing the amount of tokens corresponding to the burned shares between\\n        // all other token holders. The total supply of the token doesn't change as the result.\\n        // This is equivalent to performing a send from `address` to each other token holder address,\\n        // but we cannot reflect this as it would require sending an unbounded number of events.\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.24;\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ninterface IERC20 {\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address who) external view returns (uint256);\\n\\n  function allowance(address owner, address spender)\\n    external view returns (uint256);\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function approve(address spender, uint256 value)\\n    external returns (bool);\\n\\n  function transferFrom(address from, address to, uint256 value)\\n    external returns (bool);\\n\\n  event Transfer(\\n    address indexed from,\\n    address indexed to,\\n    uint256 value\\n  );\\n\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n}\\n\"\r\n    },\r\n    \"contracts/0.4.24/lib/Pausable.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2020 Lido <info@lido.fi>\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/common/UnstructuredStorage.sol\\\";\\n\\n\\ncontract Pausable {\\n    using UnstructuredStorage for bytes32;\\n\\n    event Stopped();\\n    event Resumed();\\n\\n    bytes32 internal constant ACTIVE_FLAG_POSITION = keccak256(\\\"lido.Pausable.activeFlag\\\");\\n\\n    modifier whenNotStopped() {\\n        require(ACTIVE_FLAG_POSITION.getStorageBool(), \\\"CONTRACT_IS_STOPPED\\\");\\n        _;\\n    }\\n\\n    modifier whenStopped() {\\n        require(!ACTIVE_FLAG_POSITION.getStorageBool(), \\\"CONTRACT_IS_ACTIVE\\\");\\n        _;\\n    }\\n\\n    function isStopped() external view returns (bool) {\\n        return !ACTIVE_FLAG_POSITION.getStorageBool();\\n    }\\n\\n    function _stop() internal whenNotStopped {\\n        ACTIVE_FLAG_POSITION.setStorageBool(false);\\n        emit Stopped();\\n    }\\n\\n    function _resume() internal whenStopped {\\n        ACTIVE_FLAG_POSITION.setStorageBool(true);\\n        emit Resumed();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/0.4.24/test_helpers/LidoPushableMock.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2020 Lido <info@lido.fi>\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"../Lido.sol\\\";\\nimport \\\"./VaultMock.sol\\\";\\n\\n\\n/**\\n * @dev Mock for unit-testing pushBeacon and how reward get calculated\\n */\\ncontract LidoPushableMock is Lido {\\n\\n    uint256 public totalRewards;\\n    bool public distributeRewardsCalled;\\n\\n    function initialize(\\n        IDepositContract depositContract,\\n        address _oracle,\\n        INodeOperatorsRegistry _operators\\n    )\\n    public\\n    {\\n        super.initialize(\\n          depositContract,\\n          _oracle,\\n          _operators,\\n          new VaultMock(),\\n          new VaultMock()\\n        );\\n\\n        _resume();\\n    }\\n\\n    function setDepositedValidators(uint256 _depositedValidators) public {\\n        DEPOSITED_VALIDATORS_POSITION.setStorageUint256(_depositedValidators);\\n    }\\n\\n    function setBeaconBalance(uint256 _beaconBalance) public {\\n        BEACON_BALANCE_POSITION.setStorageUint256(_beaconBalance);\\n    }\\n\\n    // value sent to this function becomes buffered\\n    function setBufferedEther() public payable {\\n        BUFFERED_ETHER_POSITION.setStorageUint256(msg.value);\\n    }\\n\\n    function setBeaconValidators(uint256 _beaconValidators) public {\\n        BEACON_VALIDATORS_POSITION.setStorageUint256(_beaconValidators);\\n    }\\n\\n    function initialize(address _oracle) public onlyInit {\\n        _setOracle(_oracle);\\n        _resume();\\n        initialized();\\n    }\\n\\n    function resetDistributeRewards() public {\\n        totalRewards = 0;\\n        distributeRewardsCalled = false;\\n    }\\n\\n    function distributeRewards(uint256 _totalRewards) internal {\\n        totalRewards = _totalRewards;\\n        distributeRewardsCalled = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/0.4.24/test_helpers/VaultMock.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2020 Lido <info@lido.fi>\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.4.24;\\n\\n\\n/**\\n  * @dev This is a mock. Don't use in production.\\n  */\\ncontract VaultMock {\\n    function() public payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/0.4.24/test_helpers/LidoMock.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2020 Lido <info@lido.fi>\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"../Lido.sol\\\";\\nimport \\\"./VaultMock.sol\\\";\\n\\n\\n/**\\n  * @dev Only for testing purposes! Lido version with some functions exposed.\\n  */\\ncontract LidoMock is Lido {\\n    function initialize(\\n        IDepositContract depositContract,\\n        address _oracle,\\n        INodeOperatorsRegistry _operators\\n    )\\n    public\\n    {\\n        super.initialize(\\n          depositContract,\\n          _oracle,\\n          _operators,\\n          new VaultMock(),\\n          new VaultMock()\\n        );\\n\\n        _resume();\\n    }\\n\\n    /**\\n      * @dev Gets unaccounted (excess) Ether on this contract balance\\n      */\\n    function getUnaccountedEther() public view returns (uint256) {\\n        return _getUnaccountedEther();\\n    }\\n\\n    /**\\n      * @dev Padding memory array with zeroes up to 64 bytes on the right\\n      * @param _b Memory array of size 32 .. 64\\n      */\\n    function pad64(bytes memory _b) public pure returns (bytes memory) {\\n        return _pad64(_b);\\n    }\\n\\n    /**\\n      * @dev Converting value to little endian bytes and padding up to 32 bytes on the right\\n      * @param _value Number less than `2**64` for compatibility reasons\\n      */\\n    function toLittleEndian64(uint256 _value) public pure returns (uint256 result) {\\n        return _toLittleEndian64(_value);\\n    }\\n\\n    /**\\n    * @dev Public wrapper of internal fun. Internal function sets the address of Deposit contract\\n    * @param _contract the address of Deposit contract\\n    */\\n    function setDepositContract(IDepositContract _contract) public {\\n        _setDepositContract(_contract);\\n    }\\n\\n    /**\\n    * @dev Public wrapper of internal fun. Internal function sets node operator registry address\\n    * @param _r registry of node operators\\n    */\\n    function setOperators(INodeOperatorsRegistry _r) public {\\n        _setOperators(_r);\\n    }\\n\\n    /**\\n    * @dev Only for testing recovery vault\\n    */\\n    function makeUnaccountedEther() public payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/0.4.24/test_helpers/StETHMock.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2020 Lido <info@lido.fi>\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"../StETH.sol\\\";\\n\\n/**\\n * @dev Only for testing purposes!\\n * StETH mock version of mintable/burnable/stoppable token.\\n */\\ncontract StETHMock is StETH {\\n    uint256 private totalPooledEther;\\n\\n    constructor() public {\\n        _resume();\\n    }\\n\\n    function _getTotalPooledEther() internal view returns (uint256) {\\n        return totalPooledEther;\\n    }\\n\\n    function stop() external {\\n        _stop();\\n    }\\n\\n    function resume() external {\\n        _resume();\\n    }\\n\\n    function setTotalPooledEther(uint256 _totalPooledEther) public {\\n        totalPooledEther = _totalPooledEther;\\n    }\\n\\n    function mintShares(address _to, uint256 _sharesAmount)\\n        public\\n        returns (uint256 newTotalShares)\\n    {\\n        newTotalShares = _mintShares(_to, _sharesAmount);\\n        _emitTransferAfterMintingShares(_to, _sharesAmount);\\n    }\\n\\n    function burnShares(address _account, uint256 _sharesAmount)\\n        public\\n        returns (uint256 newTotalShares)\\n    {\\n        return _burnShares(_account, _sharesAmount);\\n    }\\n\\n    function _emitTransferAfterMintingShares(address _to, uint256 _sharesAmount)\\n        internal\\n    {\\n        emit Transfer(address(0), _to, getPooledEthByShares(_sharesAmount));\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/apps/UnsafeAragonApp.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\nimport \\\"./AragonApp.sol\\\";\\n\\n\\n// Using UnsafeAragonApp means you'll be playing with 🔥.\\n// A number of safe defaults are provided with AragonApp, to help you avoid dangerous situations\\n// and mistakes with how your contract's developed as well as how it's deployed.\\n// UnsafeAragonApp turns off these safety features to give you greater control over your contract.\\n// In particular, it allows you to:\\n//   - Use deployed base contracts as apps directly, without a proxy\\ncontract UnsafeAragonApp is AragonApp {\\n    using UnstructuredStorage for bytes32;\\n\\n    constructor() public {\\n        // Removes auto petrifying; simulates a delete at INITIALIZATION_BLOCK_POSITION\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/apps-token-manager/contracts/TokenManager.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identitifer:    GPL-3.0-or-later\\n */\\n\\n/* solium-disable function-order */\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"@aragon/os/contracts/common/IForwarder.sol\\\";\\n\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath.sol\\\";\\n\\nimport \\\"@aragon/apps-shared-minime/contracts/ITokenController.sol\\\";\\nimport \\\"@aragon/apps-shared-minime/contracts/MiniMeToken.sol\\\";\\n\\n\\ncontract TokenManager is ITokenController, IForwarder, AragonApp {\\n    using SafeMath for uint256;\\n\\n    bytes32 public constant MINT_ROLE = keccak256(\\\"MINT_ROLE\\\");\\n    bytes32 public constant ISSUE_ROLE = keccak256(\\\"ISSUE_ROLE\\\");\\n    bytes32 public constant ASSIGN_ROLE = keccak256(\\\"ASSIGN_ROLE\\\");\\n    bytes32 public constant REVOKE_VESTINGS_ROLE = keccak256(\\\"REVOKE_VESTINGS_ROLE\\\");\\n    bytes32 public constant BURN_ROLE = keccak256(\\\"BURN_ROLE\\\");\\n\\n    uint256 public constant MAX_VESTINGS_PER_ADDRESS = 50;\\n\\n    string private constant ERROR_CALLER_NOT_TOKEN = \\\"TM_CALLER_NOT_TOKEN\\\";\\n    string private constant ERROR_NO_VESTING = \\\"TM_NO_VESTING\\\";\\n    string private constant ERROR_TOKEN_CONTROLLER = \\\"TM_TOKEN_CONTROLLER\\\";\\n    string private constant ERROR_MINT_RECEIVER_IS_TM = \\\"TM_MINT_RECEIVER_IS_TM\\\";\\n    string private constant ERROR_VESTING_TO_TM = \\\"TM_VESTING_TO_TM\\\";\\n    string private constant ERROR_TOO_MANY_VESTINGS = \\\"TM_TOO_MANY_VESTINGS\\\";\\n    string private constant ERROR_WRONG_CLIFF_DATE = \\\"TM_WRONG_CLIFF_DATE\\\";\\n    string private constant ERROR_VESTING_NOT_REVOKABLE = \\\"TM_VESTING_NOT_REVOKABLE\\\";\\n    string private constant ERROR_REVOKE_TRANSFER_FROM_REVERTED = \\\"TM_REVOKE_TRANSFER_FROM_REVERTED\\\";\\n    string private constant ERROR_CAN_NOT_FORWARD = \\\"TM_CAN_NOT_FORWARD\\\";\\n    string private constant ERROR_BALANCE_INCREASE_NOT_ALLOWED = \\\"TM_BALANCE_INC_NOT_ALLOWED\\\";\\n    string private constant ERROR_ASSIGN_TRANSFER_FROM_REVERTED = \\\"TM_ASSIGN_TRANSFER_FROM_REVERTED\\\";\\n\\n    struct TokenVesting {\\n        uint256 amount;\\n        uint64 start;\\n        uint64 cliff;\\n        uint64 vesting;\\n        bool revokable;\\n    }\\n\\n    // Note that we COMPLETELY trust this MiniMeToken to not be malicious for proper operation of this contract\\n    MiniMeToken public token;\\n    uint256 public maxAccountTokens;\\n\\n    // We are mimicing an array in the inner mapping, we use a mapping instead to make app upgrade more graceful\\n    mapping (address => mapping (uint256 => TokenVesting)) internal vestings;\\n    mapping (address => uint256) public vestingsLengths;\\n\\n    // Other token specific events can be watched on the token address directly (avoids duplication)\\n    event NewVesting(address indexed receiver, uint256 vestingId, uint256 amount);\\n    event RevokeVesting(address indexed receiver, uint256 vestingId, uint256 nonVestedAmount);\\n\\n    modifier onlyToken() {\\n        require(msg.sender == address(token), ERROR_CALLER_NOT_TOKEN);\\n        _;\\n    }\\n\\n    modifier vestingExists(address _holder, uint256 _vestingId) {\\n        // TODO: it's not checking for gaps that may appear because of deletes in revokeVesting function\\n        require(_vestingId < vestingsLengths[_holder], ERROR_NO_VESTING);\\n        _;\\n    }\\n\\n    /**\\n    * @notice Initialize Token Manager for `_token.symbol(): string`, whose tokens are `transferable ? 'not' : ''` transferable`_maxAccountTokens > 0 ? ' and limited to a maximum of ' + @tokenAmount(_token, _maxAccountTokens, false) + ' per account' : ''`\\n    * @param _token MiniMeToken address for the managed token (Token Manager instance must be already set as the token controller)\\n    * @param _transferable whether the token can be transferred by holders\\n    * @param _maxAccountTokens Maximum amount of tokens an account can have (0 for infinite tokens)\\n    */\\n    function initialize(\\n        MiniMeToken _token,\\n        bool _transferable,\\n        uint256 _maxAccountTokens\\n    )\\n        external\\n        onlyInit\\n    {\\n        initialized();\\n\\n        require(_token.controller() == address(this), ERROR_TOKEN_CONTROLLER);\\n\\n        token = _token;\\n        maxAccountTokens = _maxAccountTokens == 0 ? uint256(-1) : _maxAccountTokens;\\n\\n        if (token.transfersEnabled() != _transferable) {\\n            token.enableTransfers(_transferable);\\n        }\\n    }\\n\\n    /**\\n    * @notice Mint `@tokenAmount(self.token(): address, _amount, false)` tokens for `_receiver`\\n    * @param _receiver The address receiving the tokens, cannot be the Token Manager itself (use `issue()` instead)\\n    * @param _amount Number of tokens minted\\n    */\\n    function mint(address _receiver, uint256 _amount) external authP(MINT_ROLE, arr(_receiver, _amount)) {\\n        require(_receiver != address(this), ERROR_MINT_RECEIVER_IS_TM);\\n        _mint(_receiver, _amount);\\n    }\\n\\n    /**\\n    * @notice Mint `@tokenAmount(self.token(): address, _amount, false)` tokens for the Token Manager\\n    * @param _amount Number of tokens minted\\n    */\\n    function issue(uint256 _amount) external authP(ISSUE_ROLE, arr(_amount)) {\\n        _mint(address(this), _amount);\\n    }\\n\\n    /**\\n    * @notice Assign `@tokenAmount(self.token(): address, _amount, false)` tokens to `_receiver` from the Token Manager's holdings\\n    * @param _receiver The address receiving the tokens\\n    * @param _amount Number of tokens transferred\\n    */\\n    function assign(address _receiver, uint256 _amount) external authP(ASSIGN_ROLE, arr(_receiver, _amount)) {\\n        _assign(_receiver, _amount);\\n    }\\n\\n    /**\\n    * @notice Burn `@tokenAmount(self.token(): address, _amount, false)` tokens from `_holder`\\n    * @param _holder Holder of tokens being burned\\n    * @param _amount Number of tokens being burned\\n    */\\n    function burn(address _holder, uint256 _amount) external authP(BURN_ROLE, arr(_holder, _amount)) {\\n        // minime.destroyTokens() never returns false, only reverts on failure\\n        token.destroyTokens(_holder, _amount);\\n    }\\n\\n    /**\\n    * @notice Assign `@tokenAmount(self.token(): address, _amount, false)` tokens to `_receiver` from the Token Manager's holdings with a `_revokable : 'revokable' : ''` vesting starting at `@formatDate(_start)`, cliff at `@formatDate(_cliff)` (first portion of tokens transferable), and completed vesting at `@formatDate(_vested)` (all tokens transferable)\\n    * @param _receiver The address receiving the tokens, cannot be Token Manager itself\\n    * @param _amount Number of tokens vested\\n    * @param _start Date the vesting calculations start\\n    * @param _cliff Date when the initial portion of tokens are transferable\\n    * @param _vested Date when all tokens are transferable\\n    * @param _revokable Whether the vesting can be revoked by the Token Manager\\n    */\\n    function assignVested(\\n        address _receiver,\\n        uint256 _amount,\\n        uint64 _start,\\n        uint64 _cliff,\\n        uint64 _vested,\\n        bool _revokable\\n    )\\n        external\\n        authP(ASSIGN_ROLE, arr(_receiver, _amount))\\n        returns (uint256)\\n    {\\n        require(_receiver != address(this), ERROR_VESTING_TO_TM);\\n        require(vestingsLengths[_receiver] < MAX_VESTINGS_PER_ADDRESS, ERROR_TOO_MANY_VESTINGS);\\n        require(_start <= _cliff && _cliff <= _vested, ERROR_WRONG_CLIFF_DATE);\\n\\n        uint256 vestingId = vestingsLengths[_receiver]++;\\n        vestings[_receiver][vestingId] = TokenVesting(\\n            _amount,\\n            _start,\\n            _cliff,\\n            _vested,\\n            _revokable\\n        );\\n\\n        _assign(_receiver, _amount);\\n\\n        emit NewVesting(_receiver, vestingId, _amount);\\n\\n        return vestingId;\\n    }\\n\\n    /**\\n    * @notice Revoke vesting #`_vestingId` from `_holder`, returning unvested tokens to the Token Manager\\n    * @param _holder Address whose vesting to revoke\\n    * @param _vestingId Numeric id of the vesting\\n    */\\n    function revokeVesting(address _holder, uint256 _vestingId)\\n        external\\n        authP(REVOKE_VESTINGS_ROLE, arr(_holder))\\n        vestingExists(_holder, _vestingId)\\n    {\\n        TokenVesting storage v = vestings[_holder][_vestingId];\\n        require(v.revokable, ERROR_VESTING_NOT_REVOKABLE);\\n\\n        uint256 nonVested = _calculateNonVestedTokens(\\n            v.amount,\\n            getTimestamp(),\\n            v.start,\\n            v.cliff,\\n            v.vesting\\n        );\\n\\n        // To make vestingIds immutable over time, we just zero out the revoked vesting\\n        // Clearing this out also allows the token transfer back to the Token Manager to succeed\\n        delete vestings[_holder][_vestingId];\\n\\n        // transferFrom always works as controller\\n        // onTransfer hook always allows if transfering to token controller\\n        require(token.transferFrom(_holder, address(this), nonVested), ERROR_REVOKE_TRANSFER_FROM_REVERTED);\\n\\n        emit RevokeVesting(_holder, _vestingId, nonVested);\\n    }\\n\\n    // ITokenController fns\\n    // `onTransfer()`, `onApprove()`, and `proxyPayment()` are callbacks from the MiniMe token\\n    // contract and are only meant to be called through the managed MiniMe token that gets assigned\\n    // during initialization.\\n\\n    /*\\n    * @dev Notifies the controller about a token transfer allowing the controller to decide whether\\n    *      to allow it or react if desired (only callable from the token).\\n    *      Initialization check is implicitly provided by `onlyToken()`.\\n    * @param _from The origin of the transfer\\n    * @param _to The destination of the transfer\\n    * @param _amount The amount of the transfer\\n    * @return False if the controller does not authorize the transfer\\n    */\\n    function onTransfer(address _from, address _to, uint256 _amount) external onlyToken returns (bool) {\\n        return _isBalanceIncreaseAllowed(_to, _amount) && _transferableBalance(_from, getTimestamp()) >= _amount;\\n    }\\n\\n    /**\\n    * @dev Notifies the controller about an approval allowing the controller to react if desired\\n    *      Initialization check is implicitly provided by `onlyToken()`.\\n    * @return False if the controller does not authorize the approval\\n    */\\n    function onApprove(address, address, uint) external onlyToken returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Called when ether is sent to the MiniMe Token contract\\n    *      Initialization check is implicitly provided by `onlyToken()`.\\n    * @return True if the ether is accepted, false for it to throw\\n    */\\n    function proxyPayment(address) external payable onlyToken returns (bool) {\\n        return false;\\n    }\\n\\n    // Forwarding fns\\n\\n    function isForwarder() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n    * @notice Execute desired action as a token holder\\n    * @dev IForwarder interface conformance. Forwards any token holder action.\\n    * @param _evmScript Script being executed\\n    */\\n    function forward(bytes _evmScript) public {\\n        require(canForward(msg.sender, _evmScript), ERROR_CAN_NOT_FORWARD);\\n        bytes memory input = new bytes(0); // TODO: Consider input for this\\n\\n        // Add the managed token to the blacklist to disallow a token holder from executing actions\\n        // on the token controller's (this contract) behalf\\n        address[] memory blacklist = new address[](1);\\n        blacklist[0] = address(token);\\n\\n        runScript(_evmScript, input, blacklist);\\n    }\\n\\n    function canForward(address _sender, bytes) public view returns (bool) {\\n        return hasInitialized() && token.balanceOf(_sender) > 0;\\n    }\\n\\n    // Getter fns\\n\\n    function getVesting(\\n        address _recipient,\\n        uint256 _vestingId\\n    )\\n        public\\n        view\\n        vestingExists(_recipient, _vestingId)\\n        returns (\\n            uint256 amount,\\n            uint64 start,\\n            uint64 cliff,\\n            uint64 vesting,\\n            bool revokable\\n        )\\n    {\\n        TokenVesting storage tokenVesting = vestings[_recipient][_vestingId];\\n        amount = tokenVesting.amount;\\n        start = tokenVesting.start;\\n        cliff = tokenVesting.cliff;\\n        vesting = tokenVesting.vesting;\\n        revokable = tokenVesting.revokable;\\n    }\\n\\n    function spendableBalanceOf(address _holder) public view isInitialized returns (uint256) {\\n        return _transferableBalance(_holder, getTimestamp());\\n    }\\n\\n    function transferableBalance(address _holder, uint256 _time) public view isInitialized returns (uint256) {\\n        return _transferableBalance(_holder, _time);\\n    }\\n\\n    /**\\n    * @dev Disable recovery escape hatch for own token,\\n    *      as the it has the concept of issuing tokens without assigning them\\n    */\\n    function allowRecoverability(address _token) public view returns (bool) {\\n        return _token != address(token);\\n    }\\n\\n    // Internal fns\\n\\n    function _assign(address _receiver, uint256 _amount) internal {\\n        require(_isBalanceIncreaseAllowed(_receiver, _amount), ERROR_BALANCE_INCREASE_NOT_ALLOWED);\\n        // Must use transferFrom() as transfer() does not give the token controller full control\\n        require(token.transferFrom(address(this), _receiver, _amount), ERROR_ASSIGN_TRANSFER_FROM_REVERTED);\\n    }\\n\\n    function _mint(address _receiver, uint256 _amount) internal {\\n        require(_isBalanceIncreaseAllowed(_receiver, _amount), ERROR_BALANCE_INCREASE_NOT_ALLOWED);\\n        token.generateTokens(_receiver, _amount); // minime.generateTokens() never returns false\\n    }\\n\\n    function _isBalanceIncreaseAllowed(address _receiver, uint256 _inc) internal view returns (bool) {\\n        // Max balance doesn't apply to the token manager itself\\n        if (_receiver == address(this)) {\\n            return true;\\n        }\\n        return token.balanceOf(_receiver).add(_inc) <= maxAccountTokens;\\n    }\\n\\n    /**\\n    * @dev Calculate amount of non-vested tokens at a specifc time\\n    * @param tokens The total amount of tokens vested\\n    * @param time The time at which to check\\n    * @param start The date vesting started\\n    * @param cliff The cliff period\\n    * @param vested The fully vested date\\n    * @return The amount of non-vested tokens of a specific grant\\n    *  transferableTokens\\n    *   |                         _/--------   vestedTokens rect\\n    *   |                       _/\\n    *   |                     _/\\n    *   |                   _/\\n    *   |                 _/\\n    *   |                /\\n    *   |              .|\\n    *   |            .  |\\n    *   |          .    |\\n    *   |        .      |\\n    *   |      .        |\\n    *   |    .          |\\n    *   +===+===========+---------+----------> time\\n    *      Start       Cliff    Vested\\n    */\\n    function _calculateNonVestedTokens(\\n        uint256 tokens,\\n        uint256 time,\\n        uint256 start,\\n        uint256 cliff,\\n        uint256 vested\\n    )\\n        private\\n        pure\\n        returns (uint256)\\n    {\\n        // Shortcuts for before cliff and after vested cases.\\n        if (time >= vested) {\\n            return 0;\\n        }\\n        if (time < cliff) {\\n            return tokens;\\n        }\\n\\n        // Interpolate all vested tokens.\\n        // As before cliff the shortcut returns 0, we can just calculate a value\\n        // in the vesting rect (as shown in above's figure)\\n\\n        // vestedTokens = tokens * (time - start) / (vested - start)\\n        // In assignVesting we enforce start <= cliff <= vested\\n        // Here we shortcut time >= vested and time < cliff,\\n        // so no division by 0 is possible\\n        uint256 vestedTokens = tokens.mul(time.sub(start)) / vested.sub(start);\\n\\n        // tokens - vestedTokens\\n        return tokens.sub(vestedTokens);\\n    }\\n\\n    function _transferableBalance(address _holder, uint256 _time) internal view returns (uint256) {\\n        uint256 transferable = token.balanceOf(_holder);\\n\\n        // This check is not strictly necessary for the current version of this contract, as\\n        // Token Managers now cannot assign vestings to themselves.\\n        // However, this was a possibility in the past, so in case there were vestings assigned to\\n        // themselves, this will still return the correct value (entire balance, as the Token\\n        // Manager does not have a spending limit on its own balance).\\n        if (_holder != address(this)) {\\n            uint256 vestingsCount = vestingsLengths[_holder];\\n            for (uint256 i = 0; i < vestingsCount; i++) {\\n                TokenVesting storage v = vestings[_holder][i];\\n                uint256 nonTransferable = _calculateNonVestedTokens(\\n                    v.amount,\\n                    _time,\\n                    v.start,\\n                    v.cliff,\\n                    v.vesting\\n                );\\n                transferable = transferable.sub(nonTransferable);\\n            }\\n        }\\n\\n        return transferable;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/IForwarder.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IForwarder {\\n    function isForwarder() external pure returns (bool);\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function canForward(address sender, bytes evmCallScript) public view returns (bool);\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function forward(bytes evmCallScript) public;\\n}\\n\"\r\n    },\r\n    \"@aragon/apps-shared-minime/contracts/ITokenController.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.24;\\n\\n/// @dev The token controller contract must implement these functions\\n\\n\\ninterface ITokenController {\\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\\n    /// @param _owner The address that sent the ether to create tokens\\n    /// @return True if the ether is accepted, false if it throws\\n    function proxyPayment(address _owner) external payable returns(bool);\\n\\n    /// @notice Notifies the controller about a token transfer allowing the\\n    ///  controller to react if desired\\n    /// @param _from The origin of the transfer\\n    /// @param _to The destination of the transfer\\n    /// @param _amount The amount of the transfer\\n    /// @return False if the controller does not authorize the transfer\\n    function onTransfer(address _from, address _to, uint _amount) external returns(bool);\\n\\n    /// @notice Notifies the controller about an approval allowing the\\n    ///  controller to react if desired\\n    /// @param _owner The address that calls `approve()`\\n    /// @param _spender The spender in the `approve()` call\\n    /// @param _amount The amount in the `approve()` call\\n    /// @return False if the controller does not authorize the approval\\n    function onApprove(address _owner, address _spender, uint _amount) external returns(bool);\\n}\\n\"\r\n    },\r\n    \"@aragon/apps-shared-minime/contracts/MiniMeToken.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.24;\\n\\n/*\\n    Copyright 2016, Jordi Baylina\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n\\n/// @title MiniMeToken Contract\\n/// @author Jordi Baylina\\n/// @dev This token contract's goal is to make it easy for anyone to clone this\\n///  token using the token distribution at a given block, this will allow DAO's\\n///  and DApps to upgrade their features in a decentralized manner without\\n///  affecting the original token\\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\\n\\nimport \\\"./ITokenController.sol\\\";\\n\\ncontract Controlled {\\n    /// @notice The address of the controller is the only address that can call\\n    ///  a function with this modifier\\n    modifier onlyController {\\n        require(msg.sender == controller);\\n        _;\\n    }\\n\\n    address public controller;\\n\\n    function Controlled()  public { controller = msg.sender;}\\n\\n    /// @notice Changes the controller of the contract\\n    /// @param _newController The new controller of the contract\\n    function changeController(address _newController) onlyController  public {\\n        controller = _newController;\\n    }\\n}\\n\\ncontract ApproveAndCallFallBack {\\n    function receiveApproval(\\n        address from,\\n        uint256 _amount,\\n        address _token,\\n        bytes _data\\n    ) public;\\n}\\n\\n/// @dev The actual token contract, the default controller is the msg.sender\\n///  that deploys the contract, so usually this token will be deployed by a\\n///  token controller contract, which Giveth will call a \\\"Campaign\\\"\\ncontract MiniMeToken is Controlled {\\n\\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\\n    uint8 public decimals;             //Number of decimals of the smallest unit\\n    string public symbol;              //An identifier: e.g. REP\\n    string public version = \\\"MMT_0.1\\\"; //An arbitrary versioning scheme\\n\\n\\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\\n    ///  given value, the block number attached is the one that last changed the\\n    ///  value\\n    struct Checkpoint {\\n\\n        // `fromBlock` is the block number that the value was generated from\\n        uint128 fromBlock;\\n\\n        // `value` is the amount of tokens at a specific block number\\n        uint128 value;\\n    }\\n\\n    // `parentToken` is the Token address that was cloned to produce this token;\\n    //  it will be 0x0 for a token that was not cloned\\n    MiniMeToken public parentToken;\\n\\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\\n    //  used to determine the initial distribution of the Clone Token\\n    uint public parentSnapShotBlock;\\n\\n    // `creationBlock` is the block number that the Clone Token was created\\n    uint public creationBlock;\\n\\n    // `balances` is the map that tracks the balance of each address, in this\\n    //  contract when the balance changes the block number that the change\\n    //  occurred is also included in the map\\n    mapping (address => Checkpoint[]) balances;\\n\\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\\n    mapping (address => mapping (address => uint256)) allowed;\\n\\n    // Tracks the history of the `totalSupply` of the token\\n    Checkpoint[] totalSupplyHistory;\\n\\n    // Flag that determines if the token is transferable or not.\\n    bool public transfersEnabled;\\n\\n    // The factory used to create new clone tokens\\n    MiniMeTokenFactory public tokenFactory;\\n\\n////////////////\\n// Constructor\\n////////////////\\n\\n    /// @notice Constructor to create a MiniMeToken\\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\\n    ///  will create the Clone token contracts, the token factory needs to be\\n    ///  deployed first\\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\\n    ///  new token\\n    /// @param _parentSnapShotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token, set to 0 if it\\n    ///  is a new token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    function MiniMeToken(\\n        MiniMeTokenFactory _tokenFactory,\\n        MiniMeToken _parentToken,\\n        uint _parentSnapShotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    )  public\\n    {\\n        tokenFactory = _tokenFactory;\\n        name = _tokenName;                                 // Set the name\\n        decimals = _decimalUnits;                          // Set the decimals\\n        symbol = _tokenSymbol;                             // Set the symbol\\n        parentToken = _parentToken;\\n        parentSnapShotBlock = _parentSnapShotBlock;\\n        transfersEnabled = _transfersEnabled;\\n        creationBlock = block.number;\\n    }\\n\\n\\n///////////////////\\n// ERC20 Methods\\n///////////////////\\n\\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n        return doTransfer(msg.sender, _to, _amount);\\n    }\\n\\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\\n    ///  is approved by `_from`\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\\n\\n        // The controller of this contract can move tokens around at will,\\n        //  this is important to recognize! Confirm that you trust the\\n        //  controller of this contract, which in most situations should be\\n        //  another open source smart contract or 0x0\\n        if (msg.sender != controller) {\\n            require(transfersEnabled);\\n\\n            // The standard ERC 20 transferFrom functionality\\n            if (allowed[_from][msg.sender] < _amount)\\n                return false;\\n            allowed[_from][msg.sender] -= _amount;\\n        }\\n        return doTransfer(_from, _to, _amount);\\n    }\\n\\n    /// @dev This is the actual transfer function in the token contract, it can\\n    ///  only be called by other functions in this contract.\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function doTransfer(address _from, address _to, uint _amount) internal returns(bool) {\\n        if (_amount == 0) {\\n            return true;\\n        }\\n        require(parentSnapShotBlock < block.number);\\n        // Do not allow transfer to 0x0 or the token contract itself\\n        require((_to != 0) && (_to != address(this)));\\n        // If the amount being transfered is more than the balance of the\\n        //  account the transfer returns false\\n        var previousBalanceFrom = balanceOfAt(_from, block.number);\\n        if (previousBalanceFrom < _amount) {\\n            return false;\\n        }\\n        // Alerts the token controller of the transfer\\n        if (isContract(controller)) {\\n            // Adding the ` == true` makes the linter shut up so...\\n            require(ITokenController(controller).onTransfer(_from, _to, _amount) == true);\\n        }\\n        // First update the balance array with the new value for the address\\n        //  sending the tokens\\n        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\\n        // Then update the balance array with the new value for the address\\n        //  receiving the tokens\\n        var previousBalanceTo = balanceOfAt(_to, block.number);\\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n        updateValueAtNow(balances[_to], previousBalanceTo + _amount);\\n        // An event to make the transfer easy to find on the blockchain\\n        Transfer(_from, _to, _amount);\\n        return true;\\n    }\\n\\n    /// @param _owner The address that's balance is being requested\\n    /// @return The balance of `_owner` at the current block\\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\\n        return balanceOfAt(_owner, block.number);\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\\n    ///  its behalf. This is a modified version of the ERC20 approve function\\n    ///  to be a little bit safer\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the approval was successful\\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\\n\\n        // Alerts the token controller of the approve function call\\n        if (isContract(controller)) {\\n            // Adding the ` == true` makes the linter shut up so...\\n            require(ITokenController(controller).onApprove(msg.sender, _spender, _amount) == true);\\n        }\\n\\n        allowed[msg.sender][_spender] = _amount;\\n        Approval(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to read the `allowed[]` map\\n    /// @param _owner The address of the account that owns the token\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\\n    ///  to spend\\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\\n    ///  its behalf, and then a function is triggered in the contract that is\\n    ///  being approved, `_spender`. This allows users to use their tokens to\\n    ///  interact with contracts in one function call instead of two\\n    /// @param _spender The address of the contract able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the function call was successful\\n    function approveAndCall(ApproveAndCallFallBack _spender, uint256 _amount, bytes _extraData) public returns (bool success) {\\n        require(approve(_spender, _amount));\\n\\n        _spender.receiveApproval(\\n            msg.sender,\\n            _amount,\\n            this,\\n            _extraData\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to get the total number of tokens\\n    /// @return The total number of tokens\\n    function totalSupply() public constant returns (uint) {\\n        return totalSupplyAt(block.number);\\n    }\\n\\n\\n////////////////\\n// Query balance and totalSupply in History\\n////////////////\\n\\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @param _blockNumber The block number when the balance is queried\\n    /// @return The balance at `_blockNumber`\\n    function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint) {\\n\\n        // These next few lines are used when the balance of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.balanceOfAt` be queried at the\\n        //  genesis block for that token as this contains initial balance of\\n        //  this token\\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                // Has no parent\\n                return 0;\\n            }\\n\\n        // This will return the expected balance during normal situations\\n        } else {\\n            return getValueAt(balances[_owner], _blockNumber);\\n        }\\n    }\\n\\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\\n    /// @param _blockNumber The block number when the totalSupply is queried\\n    /// @return The total amount of tokens at `_blockNumber`\\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\\n\\n        // These next few lines are used when the totalSupply of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\\n        //  genesis block for this token as that contains totalSupply of this\\n        //  token at this block number.\\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                return 0;\\n            }\\n\\n        // This will return the expected totalSupply during normal situations\\n        } else {\\n            return getValueAt(totalSupplyHistory, _blockNumber);\\n        }\\n    }\\n\\n////////////////\\n// Clone Token Method\\n////////////////\\n\\n    /// @notice Creates a new clone token with the initial distribution being\\n    ///  this token at `_snapshotBlock`\\n    /// @param _cloneTokenName Name of the clone token\\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\\n    /// @param _cloneTokenSymbol Symbol of the clone token\\n    /// @param _snapshotBlock Block when the distribution of the parent token is\\n    ///  copied to set the initial distribution of the new clone token;\\n    ///  if the block is zero than the actual block, the current block is used\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    /// @return The address of the new MiniMeToken Contract\\n    function createCloneToken(\\n        string _cloneTokenName,\\n        uint8 _cloneDecimalUnits,\\n        string _cloneTokenSymbol,\\n        uint _snapshotBlock,\\n        bool _transfersEnabled\\n    ) public returns(MiniMeToken)\\n    {\\n        uint256 snapshot = _snapshotBlock == 0 ? block.number - 1 : _snapshotBlock;\\n\\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\\n            this,\\n            snapshot,\\n            _cloneTokenName,\\n            _cloneDecimalUnits,\\n            _cloneTokenSymbol,\\n            _transfersEnabled\\n        );\\n\\n        cloneToken.changeController(msg.sender);\\n\\n        // An event to make the token easy to find on the blockchain\\n        NewCloneToken(address(cloneToken), snapshot);\\n        return cloneToken;\\n    }\\n\\n////////////////\\n// Generate and destroy tokens\\n////////////////\\n\\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\\n    /// @param _owner The address that will be assigned the new tokens\\n    /// @param _amount The quantity of tokens generated\\n    /// @return True if the tokens are generated correctly\\n    function generateTokens(address _owner, uint _amount) onlyController public returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\\n        uint previousBalanceTo = balanceOf(_owner);\\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\\n        Transfer(0, _owner, _amount);\\n        return true;\\n    }\\n\\n\\n    /// @notice Burns `_amount` tokens from `_owner`\\n    /// @param _owner The address that will lose the tokens\\n    /// @param _amount The quantity of tokens to burn\\n    /// @return True if the tokens are burned correctly\\n    function destroyTokens(address _owner, uint _amount) onlyController public returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply >= _amount);\\n        uint previousBalanceFrom = balanceOf(_owner);\\n        require(previousBalanceFrom >= _amount);\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\\n        Transfer(_owner, 0, _amount);\\n        return true;\\n    }\\n\\n////////////////\\n// Enable tokens transfers\\n////////////////\\n\\n\\n    /// @notice Enables token holders to transfer their tokens freely if true\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    function enableTransfers(bool _transfersEnabled) onlyController public {\\n        transfersEnabled = _transfersEnabled;\\n    }\\n\\n////////////////\\n// Internal helper functions to query and set a value in a snapshot array\\n////////////////\\n\\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\\n    /// @param checkpoints The history of values being queried\\n    /// @param _block The block number to retrieve the value at\\n    /// @return The number of tokens being queried\\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block) constant internal returns (uint) {\\n        if (checkpoints.length == 0)\\n            return 0;\\n\\n        // Shortcut for the actual value\\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\\n            return checkpoints[checkpoints.length-1].value;\\n        if (_block < checkpoints[0].fromBlock)\\n            return 0;\\n\\n        // Binary search of the value in the array\\n        uint min = 0;\\n        uint max = checkpoints.length-1;\\n        while (max > min) {\\n            uint mid = (max + min + 1) / 2;\\n            if (checkpoints[mid].fromBlock<=_block) {\\n                min = mid;\\n            } else {\\n                max = mid-1;\\n            }\\n        }\\n        return checkpoints[min].value;\\n    }\\n\\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\\n    ///  `totalSupplyHistory`\\n    /// @param checkpoints The history of data being updated\\n    /// @param _value The new number of tokens\\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\\n            newCheckPoint.fromBlock = uint128(block.number);\\n            newCheckPoint.value = uint128(_value);\\n        } else {\\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];\\n            oldCheckPoint.value = uint128(_value);\\n        }\\n    }\\n\\n    /// @dev Internal function to determine if an address is a contract\\n    /// @param _addr The address being queried\\n    /// @return True if `_addr` is a contract\\n    function isContract(address _addr) constant internal returns(bool) {\\n        uint size;\\n        if (_addr == 0)\\n            return false;\\n\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n\\n        return size>0;\\n    }\\n\\n    /// @dev Helper function to return a min betwen the two uints\\n    function min(uint a, uint b) pure internal returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /// @notice The fallback function: If the contract's controller has not been\\n    ///  set to 0, then the `proxyPayment` method is called which relays the\\n    ///  ether and creates tokens as described in the token controller contract\\n    function () external payable {\\n        require(isContract(controller));\\n        // Adding the ` == true` makes the linter shut up so...\\n        require(ITokenController(controller).proxyPayment.value(msg.value)(msg.sender) == true);\\n    }\\n\\n//////////\\n// Safety Methods\\n//////////\\n\\n    /// @notice This method can be used by the controller to extract mistakenly\\n    ///  sent tokens to this contract.\\n    /// @param _token The address of the token contract that you want to recover\\n    ///  set to 0 in case you want to extract ether.\\n    function claimTokens(address _token) onlyController public {\\n        if (_token == 0x0) {\\n            controller.transfer(this.balance);\\n            return;\\n        }\\n\\n        MiniMeToken token = MiniMeToken(_token);\\n        uint balance = token.balanceOf(this);\\n        token.transfer(controller, balance);\\n        ClaimedTokens(_token, controller, balance);\\n    }\\n\\n////////////////\\n// Events\\n////////////////\\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _amount\\n        );\\n\\n}\\n\\n\\n////////////////\\n// MiniMeTokenFactory\\n////////////////\\n\\n/// @dev This contract is used to generate clone contracts from a contract.\\n///  In solidity this is the way to create a contract from a contract of the\\n///  same class\\ncontract MiniMeTokenFactory {\\n\\n    /// @notice Update the DApp by creating a new token with new functionalities\\n    ///  the msg.sender becomes the controller of this clone token\\n    /// @param _parentToken Address of the token being cloned\\n    /// @param _snapshotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    /// @return The address of the new token contract\\n    function createCloneToken(\\n        MiniMeToken _parentToken,\\n        uint _snapshotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    ) public returns (MiniMeToken)\\n    {\\n        MiniMeToken newToken = new MiniMeToken(\\n            this,\\n            _parentToken,\\n            _snapshotBlock,\\n            _tokenName,\\n            _decimalUnits,\\n            _tokenSymbol,\\n            _transfersEnabled\\n        );\\n\\n        newToken.changeController(msg.sender);\\n        return newToken;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/apps-voting/contracts/Voting.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identitifer:    GPL-3.0-or-later\\n */\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"@aragon/os/contracts/common/IForwarder.sol\\\";\\n\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath64.sol\\\";\\n\\nimport \\\"@aragon/apps-shared-minime/contracts/MiniMeToken.sol\\\";\\n\\n\\ncontract Voting is IForwarder, AragonApp {\\n    using SafeMath for uint256;\\n    using SafeMath64 for uint64;\\n\\n    bytes32 public constant CREATE_VOTES_ROLE = keccak256(\\\"CREATE_VOTES_ROLE\\\");\\n    bytes32 public constant MODIFY_SUPPORT_ROLE = keccak256(\\\"MODIFY_SUPPORT_ROLE\\\");\\n    bytes32 public constant MODIFY_QUORUM_ROLE = keccak256(\\\"MODIFY_QUORUM_ROLE\\\");\\n\\n    uint64 public constant PCT_BASE = 10 ** 18; // 0% = 0; 1% = 10^16; 100% = 10^18\\n\\n    string private constant ERROR_NO_VOTE = \\\"VOTING_NO_VOTE\\\";\\n    string private constant ERROR_INIT_PCTS = \\\"VOTING_INIT_PCTS\\\";\\n    string private constant ERROR_CHANGE_SUPPORT_PCTS = \\\"VOTING_CHANGE_SUPPORT_PCTS\\\";\\n    string private constant ERROR_CHANGE_QUORUM_PCTS = \\\"VOTING_CHANGE_QUORUM_PCTS\\\";\\n    string private constant ERROR_INIT_SUPPORT_TOO_BIG = \\\"VOTING_INIT_SUPPORT_TOO_BIG\\\";\\n    string private constant ERROR_CHANGE_SUPPORT_TOO_BIG = \\\"VOTING_CHANGE_SUPP_TOO_BIG\\\";\\n    string private constant ERROR_CAN_NOT_VOTE = \\\"VOTING_CAN_NOT_VOTE\\\";\\n    string private constant ERROR_CAN_NOT_EXECUTE = \\\"VOTING_CAN_NOT_EXECUTE\\\";\\n    string private constant ERROR_CAN_NOT_FORWARD = \\\"VOTING_CAN_NOT_FORWARD\\\";\\n    string private constant ERROR_NO_VOTING_POWER = \\\"VOTING_NO_VOTING_POWER\\\";\\n\\n    enum VoterState { Absent, Yea, Nay }\\n\\n    struct Vote {\\n        bool executed;\\n        uint64 startDate;\\n        uint64 snapshotBlock;\\n        uint64 supportRequiredPct;\\n        uint64 minAcceptQuorumPct;\\n        uint256 yea;\\n        uint256 nay;\\n        uint256 votingPower;\\n        bytes executionScript;\\n        mapping (address => VoterState) voters;\\n    }\\n\\n    MiniMeToken public token;\\n    uint64 public supportRequiredPct;\\n    uint64 public minAcceptQuorumPct;\\n    uint64 public voteTime;\\n\\n    // We are mimicing an array, we use a mapping instead to make app upgrade more graceful\\n    mapping (uint256 => Vote) internal votes;\\n    uint256 public votesLength;\\n\\n    event StartVote(uint256 indexed voteId, address indexed creator, string metadata);\\n    event CastVote(uint256 indexed voteId, address indexed voter, bool supports, uint256 stake);\\n    event ExecuteVote(uint256 indexed voteId);\\n    event ChangeSupportRequired(uint64 supportRequiredPct);\\n    event ChangeMinQuorum(uint64 minAcceptQuorumPct);\\n\\n    modifier voteExists(uint256 _voteId) {\\n        require(_voteId < votesLength, ERROR_NO_VOTE);\\n        _;\\n    }\\n\\n    /**\\n    * @notice Initialize Voting app with `_token.symbol(): string` for governance, minimum support of `@formatPct(_supportRequiredPct)`%, minimum acceptance quorum of `@formatPct(_minAcceptQuorumPct)`%, and a voting duration of `@transformTime(_voteTime)`\\n    * @param _token MiniMeToken Address that will be used as governance token\\n    * @param _supportRequiredPct Percentage of yeas in casted votes for a vote to succeed (expressed as a percentage of 10^18; eg. 10^16 = 1%, 10^18 = 100%)\\n    * @param _minAcceptQuorumPct Percentage of yeas in total possible votes for a vote to succeed (expressed as a percentage of 10^18; eg. 10^16 = 1%, 10^18 = 100%)\\n    * @param _voteTime Seconds that a vote will be open for token holders to vote (unless enough yeas or nays have been cast to make an early decision)\\n    */\\n    function initialize(\\n        MiniMeToken _token,\\n        uint64 _supportRequiredPct,\\n        uint64 _minAcceptQuorumPct,\\n        uint64 _voteTime\\n    )\\n        external\\n        onlyInit\\n    {\\n        initialized();\\n\\n        require(_minAcceptQuorumPct <= _supportRequiredPct, ERROR_INIT_PCTS);\\n        require(_supportRequiredPct < PCT_BASE, ERROR_INIT_SUPPORT_TOO_BIG);\\n\\n        token = _token;\\n        supportRequiredPct = _supportRequiredPct;\\n        minAcceptQuorumPct = _minAcceptQuorumPct;\\n        voteTime = _voteTime;\\n    }\\n\\n    /**\\n    * @notice Change required support to `@formatPct(_supportRequiredPct)`%\\n    * @param _supportRequiredPct New required support\\n    */\\n    function changeSupportRequiredPct(uint64 _supportRequiredPct)\\n        external\\n        authP(MODIFY_SUPPORT_ROLE, arr(uint256(_supportRequiredPct), uint256(supportRequiredPct)))\\n    {\\n        require(minAcceptQuorumPct <= _supportRequiredPct, ERROR_CHANGE_SUPPORT_PCTS);\\n        require(_supportRequiredPct < PCT_BASE, ERROR_CHANGE_SUPPORT_TOO_BIG);\\n        supportRequiredPct = _supportRequiredPct;\\n\\n        emit ChangeSupportRequired(_supportRequiredPct);\\n    }\\n\\n    /**\\n    * @notice Change minimum acceptance quorum to `@formatPct(_minAcceptQuorumPct)`%\\n    * @param _minAcceptQuorumPct New acceptance quorum\\n    */\\n    function changeMinAcceptQuorumPct(uint64 _minAcceptQuorumPct)\\n        external\\n        authP(MODIFY_QUORUM_ROLE, arr(uint256(_minAcceptQuorumPct), uint256(minAcceptQuorumPct)))\\n    {\\n        require(_minAcceptQuorumPct <= supportRequiredPct, ERROR_CHANGE_QUORUM_PCTS);\\n        minAcceptQuorumPct = _minAcceptQuorumPct;\\n\\n        emit ChangeMinQuorum(_minAcceptQuorumPct);\\n    }\\n\\n    /**\\n    * @notice Create a new vote about \\\"`_metadata`\\\"\\n    * @param _executionScript EVM script to be executed on approval\\n    * @param _metadata Vote metadata\\n    * @return voteId Id for newly created vote\\n    */\\n    function newVote(bytes _executionScript, string _metadata) external auth(CREATE_VOTES_ROLE) returns (uint256 voteId) {\\n        return _newVote(_executionScript, _metadata, true, true);\\n    }\\n\\n    /**\\n    * @notice Create a new vote about \\\"`_metadata`\\\"\\n    * @param _executionScript EVM script to be executed on approval\\n    * @param _metadata Vote metadata\\n    * @param _castVote Whether to also cast newly created vote\\n    * @param _executesIfDecided Whether to also immediately execute newly created vote if decided\\n    * @return voteId id for newly created vote\\n    */\\n    function newVote(bytes _executionScript, string _metadata, bool _castVote, bool _executesIfDecided)\\n        external\\n        auth(CREATE_VOTES_ROLE)\\n        returns (uint256 voteId)\\n    {\\n        return _newVote(_executionScript, _metadata, _castVote, _executesIfDecided);\\n    }\\n\\n    /**\\n    * @notice Vote `_supports ? 'yes' : 'no'` in vote #`_voteId`\\n    * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\\n    *      created via `newVote(),` which requires initialization\\n    * @param _voteId Id for vote\\n    * @param _supports Whether voter supports the vote\\n    * @param _executesIfDecided Whether the vote should execute its action if it becomes decided\\n    */\\n    function vote(uint256 _voteId, bool _supports, bool _executesIfDecided) external voteExists(_voteId) {\\n        require(_canVote(_voteId, msg.sender), ERROR_CAN_NOT_VOTE);\\n        _vote(_voteId, _supports, msg.sender, _executesIfDecided);\\n    }\\n\\n    /**\\n    * @notice Execute vote #`_voteId`\\n    * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\\n    *      created via `newVote(),` which requires initialization\\n    * @param _voteId Id for vote\\n    */\\n    function executeVote(uint256 _voteId) external voteExists(_voteId) {\\n        _executeVote(_voteId);\\n    }\\n\\n    // Forwarding fns\\n\\n    function isForwarder() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n    * @notice Creates a vote to execute the desired action, and casts a support vote if possible\\n    * @dev IForwarder interface conformance\\n    * @param _evmScript Start vote with script\\n    */\\n    function forward(bytes _evmScript) public {\\n        require(canForward(msg.sender, _evmScript), ERROR_CAN_NOT_FORWARD);\\n        _newVote(_evmScript, \\\"\\\", true, true);\\n    }\\n\\n    function canForward(address _sender, bytes) public view returns (bool) {\\n        // Note that `canPerform()` implicitly does an initialization check itself\\n        return canPerform(_sender, CREATE_VOTES_ROLE, arr());\\n    }\\n\\n    // Getter fns\\n\\n    /**\\n    * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\\n    *      created via `newVote(),` which requires initialization\\n    */\\n    function canExecute(uint256 _voteId) public view voteExists(_voteId) returns (bool) {\\n        return _canExecute(_voteId);\\n    }\\n\\n    /**\\n    * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\\n    *      created via `newVote(),` which requires initialization\\n    */\\n    function canVote(uint256 _voteId, address _voter) public view voteExists(_voteId) returns (bool) {\\n        return _canVote(_voteId, _voter);\\n    }\\n\\n    function getVote(uint256 _voteId)\\n        public\\n        view\\n        voteExists(_voteId)\\n        returns (\\n            bool open,\\n            bool executed,\\n            uint64 startDate,\\n            uint64 snapshotBlock,\\n            uint64 supportRequired,\\n            uint64 minAcceptQuorum,\\n            uint256 yea,\\n            uint256 nay,\\n            uint256 votingPower,\\n            bytes script\\n        )\\n    {\\n        Vote storage vote_ = votes[_voteId];\\n\\n        open = _isVoteOpen(vote_);\\n        executed = vote_.executed;\\n        startDate = vote_.startDate;\\n        snapshotBlock = vote_.snapshotBlock;\\n        supportRequired = vote_.supportRequiredPct;\\n        minAcceptQuorum = vote_.minAcceptQuorumPct;\\n        yea = vote_.yea;\\n        nay = vote_.nay;\\n        votingPower = vote_.votingPower;\\n        script = vote_.executionScript;\\n    }\\n\\n    function getVoterState(uint256 _voteId, address _voter) public view voteExists(_voteId) returns (VoterState) {\\n        return votes[_voteId].voters[_voter];\\n    }\\n\\n    // Internal fns\\n\\n    function _newVote(bytes _executionScript, string _metadata, bool _castVote, bool _executesIfDecided)\\n        internal\\n        returns (uint256 voteId)\\n    {\\n        uint64 snapshotBlock = getBlockNumber64() - 1; // avoid double voting in this very block\\n        uint256 votingPower = token.totalSupplyAt(snapshotBlock);\\n        require(votingPower > 0, ERROR_NO_VOTING_POWER);\\n\\n        voteId = votesLength++;\\n\\n        Vote storage vote_ = votes[voteId];\\n        vote_.startDate = getTimestamp64();\\n        vote_.snapshotBlock = snapshotBlock;\\n        vote_.supportRequiredPct = supportRequiredPct;\\n        vote_.minAcceptQuorumPct = minAcceptQuorumPct;\\n        vote_.votingPower = votingPower;\\n        vote_.executionScript = _executionScript;\\n\\n        emit StartVote(voteId, msg.sender, _metadata);\\n\\n        if (_castVote && _canVote(voteId, msg.sender)) {\\n            _vote(voteId, true, msg.sender, _executesIfDecided);\\n        }\\n    }\\n\\n    function _vote(\\n        uint256 _voteId,\\n        bool _supports,\\n        address _voter,\\n        bool _executesIfDecided\\n    ) internal\\n    {\\n        Vote storage vote_ = votes[_voteId];\\n\\n        // This could re-enter, though we can assume the governance token is not malicious\\n        uint256 voterStake = token.balanceOfAt(_voter, vote_.snapshotBlock);\\n        VoterState state = vote_.voters[_voter];\\n\\n        // If voter had previously voted, decrease count\\n        if (state == VoterState.Yea) {\\n            vote_.yea = vote_.yea.sub(voterStake);\\n        } else if (state == VoterState.Nay) {\\n            vote_.nay = vote_.nay.sub(voterStake);\\n        }\\n\\n        if (_supports) {\\n            vote_.yea = vote_.yea.add(voterStake);\\n        } else {\\n            vote_.nay = vote_.nay.add(voterStake);\\n        }\\n\\n        vote_.voters[_voter] = _supports ? VoterState.Yea : VoterState.Nay;\\n\\n        emit CastVote(_voteId, _voter, _supports, voterStake);\\n\\n        if (_executesIfDecided && _canExecute(_voteId)) {\\n            // We've already checked if the vote can be executed with `_canExecute()`\\n            _unsafeExecuteVote(_voteId);\\n        }\\n    }\\n\\n    function _executeVote(uint256 _voteId) internal {\\n        require(_canExecute(_voteId), ERROR_CAN_NOT_EXECUTE);\\n        _unsafeExecuteVote(_voteId);\\n    }\\n\\n    /**\\n    * @dev Unsafe version of _executeVote that assumes you have already checked if the vote can be executed\\n    */\\n    function _unsafeExecuteVote(uint256 _voteId) internal {\\n        Vote storage vote_ = votes[_voteId];\\n\\n        vote_.executed = true;\\n\\n        bytes memory input = new bytes(0); // TODO: Consider input for voting scripts\\n        runScript(vote_.executionScript, input, new address[](0));\\n\\n        emit ExecuteVote(_voteId);\\n    }\\n\\n    function _canExecute(uint256 _voteId) internal view returns (bool) {\\n        Vote storage vote_ = votes[_voteId];\\n\\n        if (vote_.executed) {\\n            return false;\\n        }\\n\\n        // Voting is already decided\\n        if (_isValuePct(vote_.yea, vote_.votingPower, vote_.supportRequiredPct)) {\\n            return true;\\n        }\\n\\n        // Vote ended?\\n        if (_isVoteOpen(vote_)) {\\n            return false;\\n        }\\n        // Has enough support?\\n        uint256 totalVotes = vote_.yea.add(vote_.nay);\\n        if (!_isValuePct(vote_.yea, totalVotes, vote_.supportRequiredPct)) {\\n            return false;\\n        }\\n        // Has min quorum?\\n        if (!_isValuePct(vote_.yea, vote_.votingPower, vote_.minAcceptQuorumPct)) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    function _canVote(uint256 _voteId, address _voter) internal view returns (bool) {\\n        Vote storage vote_ = votes[_voteId];\\n\\n        return _isVoteOpen(vote_) && token.balanceOfAt(_voter, vote_.snapshotBlock) > 0;\\n    }\\n\\n    function _isVoteOpen(Vote storage vote_) internal view returns (bool) {\\n        return getTimestamp64() < vote_.startDate.add(voteTime) && !vote_.executed;\\n    }\\n\\n    /**\\n    * @dev Calculates whether `_value` is more than a percentage `_pct` of `_total`\\n    */\\n    function _isValuePct(uint256 _value, uint256 _total, uint256 _pct) internal pure returns (bool) {\\n        if (_total == 0) {\\n            return false;\\n        }\\n\\n        uint256 computedPct = _value.mul(PCT_BASE) / _total;\\n        return computedPct > _pct;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/apps-finance/contracts/Finance.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identitifer:    GPL-3.0-or-later\\n */\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"@aragon/os/contracts/common/EtherTokenConstant.sol\\\";\\nimport \\\"@aragon/os/contracts/common/IsContract.sol\\\";\\nimport \\\"@aragon/os/contracts/common/SafeERC20.sol\\\";\\n\\nimport \\\"@aragon/os/contracts/lib/token/ERC20.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath64.sol\\\";\\n\\nimport \\\"@aragon/apps-vault/contracts/Vault.sol\\\";\\n\\n\\ncontract Finance is EtherTokenConstant, IsContract, AragonApp {\\n    using SafeMath for uint256;\\n    using SafeMath64 for uint64;\\n    using SafeERC20 for ERC20;\\n\\n    bytes32 public constant CREATE_PAYMENTS_ROLE = keccak256(\\\"CREATE_PAYMENTS_ROLE\\\");\\n    bytes32 public constant CHANGE_PERIOD_ROLE = keccak256(\\\"CHANGE_PERIOD_ROLE\\\");\\n    bytes32 public constant CHANGE_BUDGETS_ROLE = keccak256(\\\"CHANGE_BUDGETS_ROLE\\\");\\n    bytes32 public constant EXECUTE_PAYMENTS_ROLE = keccak256(\\\"EXECUTE_PAYMENTS_ROLE\\\");\\n    bytes32 public constant MANAGE_PAYMENTS_ROLE = keccak256(\\\"MANAGE_PAYMENTS_ROLE\\\");\\n\\n    uint256 internal constant NO_SCHEDULED_PAYMENT = 0;\\n    uint256 internal constant NO_TRANSACTION = 0;\\n    uint256 internal constant MAX_SCHEDULED_PAYMENTS_PER_TX = 20;\\n    uint256 internal constant MAX_UINT256 = uint256(-1);\\n    uint64 internal constant MAX_UINT64 = uint64(-1);\\n    uint64 internal constant MINIMUM_PERIOD = uint64(1 days);\\n\\n    string private constant ERROR_COMPLETE_TRANSITION = \\\"FINANCE_COMPLETE_TRANSITION\\\";\\n    string private constant ERROR_NO_SCHEDULED_PAYMENT = \\\"FINANCE_NO_SCHEDULED_PAYMENT\\\";\\n    string private constant ERROR_NO_TRANSACTION = \\\"FINANCE_NO_TRANSACTION\\\";\\n    string private constant ERROR_NO_PERIOD = \\\"FINANCE_NO_PERIOD\\\";\\n    string private constant ERROR_VAULT_NOT_CONTRACT = \\\"FINANCE_VAULT_NOT_CONTRACT\\\";\\n    string private constant ERROR_SET_PERIOD_TOO_SHORT = \\\"FINANCE_SET_PERIOD_TOO_SHORT\\\";\\n    string private constant ERROR_NEW_PAYMENT_AMOUNT_ZERO = \\\"FINANCE_NEW_PAYMENT_AMOUNT_ZERO\\\";\\n    string private constant ERROR_NEW_PAYMENT_INTERVAL_ZERO = \\\"FINANCE_NEW_PAYMENT_INTRVL_ZERO\\\";\\n    string private constant ERROR_NEW_PAYMENT_EXECS_ZERO = \\\"FINANCE_NEW_PAYMENT_EXECS_ZERO\\\";\\n    string private constant ERROR_NEW_PAYMENT_IMMEDIATE = \\\"FINANCE_NEW_PAYMENT_IMMEDIATE\\\";\\n    string private constant ERROR_RECOVER_AMOUNT_ZERO = \\\"FINANCE_RECOVER_AMOUNT_ZERO\\\";\\n    string private constant ERROR_DEPOSIT_AMOUNT_ZERO = \\\"FINANCE_DEPOSIT_AMOUNT_ZERO\\\";\\n    string private constant ERROR_ETH_VALUE_MISMATCH = \\\"FINANCE_ETH_VALUE_MISMATCH\\\";\\n    string private constant ERROR_BUDGET = \\\"FINANCE_BUDGET\\\";\\n    string private constant ERROR_EXECUTE_PAYMENT_NUM = \\\"FINANCE_EXECUTE_PAYMENT_NUM\\\";\\n    string private constant ERROR_EXECUTE_PAYMENT_TIME = \\\"FINANCE_EXECUTE_PAYMENT_TIME\\\";\\n    string private constant ERROR_PAYMENT_RECEIVER = \\\"FINANCE_PAYMENT_RECEIVER\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_FROM_REVERTED = \\\"FINANCE_TKN_TRANSFER_FROM_REVERT\\\";\\n    string private constant ERROR_TOKEN_APPROVE_FAILED = \\\"FINANCE_TKN_APPROVE_FAILED\\\";\\n    string private constant ERROR_PAYMENT_INACTIVE = \\\"FINANCE_PAYMENT_INACTIVE\\\";\\n    string private constant ERROR_REMAINING_BUDGET = \\\"FINANCE_REMAINING_BUDGET\\\";\\n\\n    // Order optimized for storage\\n    struct ScheduledPayment {\\n        address token;\\n        address receiver;\\n        address createdBy;\\n        bool inactive;\\n        uint256 amount;\\n        uint64 initialPaymentTime;\\n        uint64 interval;\\n        uint64 maxExecutions;\\n        uint64 executions;\\n    }\\n\\n    // Order optimized for storage\\n    struct Transaction {\\n        address token;\\n        address entity;\\n        bool isIncoming;\\n        uint256 amount;\\n        uint256 paymentId;\\n        uint64 paymentExecutionNumber;\\n        uint64 date;\\n        uint64 periodId;\\n    }\\n\\n    struct TokenStatement {\\n        uint256 expenses;\\n        uint256 income;\\n    }\\n\\n    struct Period {\\n        uint64 startTime;\\n        uint64 endTime;\\n        uint256 firstTransactionId;\\n        uint256 lastTransactionId;\\n        mapping (address => TokenStatement) tokenStatement;\\n    }\\n\\n    struct Settings {\\n        uint64 periodDuration;\\n        mapping (address => uint256) budgets;\\n        mapping (address => bool) hasBudget;\\n    }\\n\\n    Vault public vault;\\n    Settings internal settings;\\n\\n    // We are mimicing arrays, we use mappings instead to make app upgrade more graceful\\n    mapping (uint256 => ScheduledPayment) internal scheduledPayments;\\n    // Payments start at index 1, to allow us to use scheduledPayments[0] for transactions that are not\\n    // linked to a scheduled payment\\n    uint256 public paymentsNextIndex;\\n\\n    mapping (uint256 => Transaction) internal transactions;\\n    uint256 public transactionsNextIndex;\\n\\n    mapping (uint64 => Period) internal periods;\\n    uint64 public periodsLength;\\n\\n    event NewPeriod(uint64 indexed periodId, uint64 periodStarts, uint64 periodEnds);\\n    event SetBudget(address indexed token, uint256 amount, bool hasBudget);\\n    event NewPayment(uint256 indexed paymentId, address indexed recipient, uint64 maxExecutions, string reference);\\n    event NewTransaction(uint256 indexed transactionId, bool incoming, address indexed entity, uint256 amount, string reference);\\n    event ChangePaymentState(uint256 indexed paymentId, bool active);\\n    event ChangePeriodDuration(uint64 newDuration);\\n    event PaymentFailure(uint256 paymentId);\\n\\n    // Modifier used by all methods that impact accounting to make sure accounting period\\n    // is changed before the operation if needed\\n    // NOTE: its use **MUST** be accompanied by an initialization check\\n    modifier transitionsPeriod {\\n        bool completeTransition = _tryTransitionAccountingPeriod(getMaxPeriodTransitions());\\n        require(completeTransition, ERROR_COMPLETE_TRANSITION);\\n        _;\\n    }\\n\\n    modifier scheduledPaymentExists(uint256 _paymentId) {\\n        require(_paymentId > 0 && _paymentId < paymentsNextIndex, ERROR_NO_SCHEDULED_PAYMENT);\\n        _;\\n    }\\n\\n    modifier transactionExists(uint256 _transactionId) {\\n        require(_transactionId > 0 && _transactionId < transactionsNextIndex, ERROR_NO_TRANSACTION);\\n        _;\\n    }\\n\\n    modifier periodExists(uint64 _periodId) {\\n        require(_periodId < periodsLength, ERROR_NO_PERIOD);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Deposit ETH to the Vault, to avoid locking them in this Finance app forever\\n     * @dev Send ETH to Vault. Send all the available balance.\\n     */\\n    function () external payable isInitialized transitionsPeriod {\\n        require(msg.value > 0, ERROR_DEPOSIT_AMOUNT_ZERO);\\n        _deposit(\\n            ETH,\\n            msg.value,\\n            \\\"Ether transfer to Finance app\\\",\\n            msg.sender,\\n            true\\n        );\\n    }\\n\\n    /**\\n    * @notice Initialize Finance app for Vault at `_vault` with period length of `@transformTime(_periodDuration)`\\n    * @param _vault Address of the vault Finance will rely on (non changeable)\\n    * @param _periodDuration Duration in seconds of each period\\n    */\\n    function initialize(Vault _vault, uint64 _periodDuration) external onlyInit {\\n        initialized();\\n\\n        require(isContract(_vault), ERROR_VAULT_NOT_CONTRACT);\\n        vault = _vault;\\n\\n        require(_periodDuration >= MINIMUM_PERIOD, ERROR_SET_PERIOD_TOO_SHORT);\\n        settings.periodDuration = _periodDuration;\\n\\n        // Reserve the first scheduled payment index as an unused index for transactions not linked\\n        // to a scheduled payment\\n        scheduledPayments[0].inactive = true;\\n        paymentsNextIndex = 1;\\n\\n        // Reserve the first transaction index as an unused index for periods with no transactions\\n        transactionsNextIndex = 1;\\n\\n        // Start the first period\\n        _newPeriod(getTimestamp64());\\n    }\\n\\n    /**\\n    * @notice Deposit `@tokenAmount(_token, _amount)`\\n    * @dev Deposit for approved ERC20 tokens or ETH\\n    * @param _token Address of deposited token\\n    * @param _amount Amount of tokens sent\\n    * @param _reference Reason for payment\\n    */\\n    function deposit(address _token, uint256 _amount, string _reference) external payable isInitialized transitionsPeriod {\\n        require(_amount > 0, ERROR_DEPOSIT_AMOUNT_ZERO);\\n        if (_token == ETH) {\\n            // Ensure that the ETH sent with the transaction equals the amount in the deposit\\n            require(msg.value == _amount, ERROR_ETH_VALUE_MISMATCH);\\n        }\\n\\n        _deposit(\\n            _token,\\n            _amount,\\n            _reference,\\n            msg.sender,\\n            true\\n        );\\n    }\\n\\n    /**\\n    * @notice Create a new payment of `@tokenAmount(_token, _amount)` to `_receiver` for '`_reference`'\\n    * @dev Note that this function is protected by the `CREATE_PAYMENTS_ROLE` but uses `MAX_UINT256`\\n    *      as its interval auth parameter (as a sentinel value for \\\"never repeating\\\").\\n    *      While this protects against most cases (you typically want to set a baseline requirement\\n    *      for interval time), it does mean users will have to explicitly check for this case when\\n    *      granting a permission that includes a upperbound requirement on the interval time.\\n    * @param _token Address of token for payment\\n    * @param _receiver Address that will receive payment\\n    * @param _amount Tokens that are paid every time the payment is due\\n    * @param _reference String detailing payment reason\\n    */\\n    function newImmediatePayment(address _token, address _receiver, uint256 _amount, string _reference)\\n        external\\n        // Use MAX_UINT256 as the interval parameter, as this payment will never repeat\\n        // Payment time parameter is left as the last param as it was added later\\n        authP(CREATE_PAYMENTS_ROLE, _arr(_token, _receiver, _amount, MAX_UINT256, uint256(1), getTimestamp()))\\n        transitionsPeriod\\n    {\\n        require(_amount > 0, ERROR_NEW_PAYMENT_AMOUNT_ZERO);\\n\\n        _makePaymentTransaction(\\n            _token,\\n            _receiver,\\n            _amount,\\n            NO_SCHEDULED_PAYMENT,   // unrelated to any payment id; it isn't created\\n            0,   // also unrelated to any payment executions\\n            _reference\\n        );\\n    }\\n\\n    /**\\n    * @notice Create a new payment of `@tokenAmount(_token, _amount)` to `_receiver` for `_reference`, executing `_maxExecutions` times at intervals of `@transformTime(_interval)`\\n    * @dev See `newImmediatePayment()` for limitations on how the interval auth parameter can be used\\n    * @param _token Address of token for payment\\n    * @param _receiver Address that will receive payment\\n    * @param _amount Tokens that are paid every time the payment is due\\n    * @param _initialPaymentTime Timestamp for when the first payment is done\\n    * @param _interval Number of seconds that need to pass between payment transactions\\n    * @param _maxExecutions Maximum instances a payment can be executed\\n    * @param _reference String detailing payment reason\\n    */\\n    function newScheduledPayment(\\n        address _token,\\n        address _receiver,\\n        uint256 _amount,\\n        uint64 _initialPaymentTime,\\n        uint64 _interval,\\n        uint64 _maxExecutions,\\n        string _reference\\n    )\\n        external\\n        // Payment time parameter is left as the last param as it was added later\\n        authP(CREATE_PAYMENTS_ROLE, _arr(_token, _receiver, _amount, uint256(_interval), uint256(_maxExecutions), uint256(_initialPaymentTime)))\\n        transitionsPeriod\\n        returns (uint256 paymentId)\\n    {\\n        require(_amount > 0, ERROR_NEW_PAYMENT_AMOUNT_ZERO);\\n        require(_interval > 0, ERROR_NEW_PAYMENT_INTERVAL_ZERO);\\n        require(_maxExecutions > 0, ERROR_NEW_PAYMENT_EXECS_ZERO);\\n\\n        // Token budget must not be set at all or allow at least one instance of this payment each period\\n        require(!settings.hasBudget[_token] || settings.budgets[_token] >= _amount, ERROR_BUDGET);\\n\\n        // Don't allow creating single payments that are immediately executable, use `newImmediatePayment()` instead\\n        if (_maxExecutions == 1) {\\n            require(_initialPaymentTime > getTimestamp64(), ERROR_NEW_PAYMENT_IMMEDIATE);\\n        }\\n\\n        paymentId = paymentsNextIndex++;\\n        emit NewPayment(paymentId, _receiver, _maxExecutions, _reference);\\n\\n        ScheduledPayment storage payment = scheduledPayments[paymentId];\\n        payment.token = _token;\\n        payment.receiver = _receiver;\\n        payment.amount = _amount;\\n        payment.initialPaymentTime = _initialPaymentTime;\\n        payment.interval = _interval;\\n        payment.maxExecutions = _maxExecutions;\\n        payment.createdBy = msg.sender;\\n\\n        // We skip checking how many times the new payment was executed to allow creating new\\n        // scheduled payments before having enough vault balance\\n        _executePayment(paymentId);\\n    }\\n\\n    /**\\n    * @notice Change period duration to `@transformTime(_periodDuration)`, effective for next accounting period\\n    * @param _periodDuration Duration in seconds for accounting periods\\n    */\\n    function setPeriodDuration(uint64 _periodDuration)\\n        external\\n        authP(CHANGE_PERIOD_ROLE, arr(uint256(_periodDuration), uint256(settings.periodDuration)))\\n        transitionsPeriod\\n    {\\n        require(_periodDuration >= MINIMUM_PERIOD, ERROR_SET_PERIOD_TOO_SHORT);\\n        settings.periodDuration = _periodDuration;\\n        emit ChangePeriodDuration(_periodDuration);\\n    }\\n\\n    /**\\n    * @notice Set budget for `_token.symbol(): string` to `@tokenAmount(_token, _amount, false)`, effective immediately\\n    * @param _token Address for token\\n    * @param _amount New budget amount\\n    */\\n    function setBudget(\\n        address _token,\\n        uint256 _amount\\n    )\\n        external\\n        authP(CHANGE_BUDGETS_ROLE, arr(_token, _amount, settings.budgets[_token], uint256(settings.hasBudget[_token] ? 1 : 0)))\\n        transitionsPeriod\\n    {\\n        settings.budgets[_token] = _amount;\\n        if (!settings.hasBudget[_token]) {\\n            settings.hasBudget[_token] = true;\\n        }\\n        emit SetBudget(_token, _amount, true);\\n    }\\n\\n    /**\\n    * @notice Remove spending limit for `_token.symbol(): string`, effective immediately\\n    * @param _token Address for token\\n    */\\n    function removeBudget(address _token)\\n        external\\n        authP(CHANGE_BUDGETS_ROLE, arr(_token, uint256(0), settings.budgets[_token], uint256(settings.hasBudget[_token] ? 1 : 0)))\\n        transitionsPeriod\\n    {\\n        settings.budgets[_token] = 0;\\n        settings.hasBudget[_token] = false;\\n        emit SetBudget(_token, 0, false);\\n    }\\n\\n    /**\\n    * @notice Execute pending payment #`_paymentId`\\n    * @dev Executes any payment (requires role)\\n    * @param _paymentId Identifier for payment\\n    */\\n    function executePayment(uint256 _paymentId)\\n        external\\n        authP(EXECUTE_PAYMENTS_ROLE, arr(_paymentId, scheduledPayments[_paymentId].amount))\\n        scheduledPaymentExists(_paymentId)\\n        transitionsPeriod\\n    {\\n        _executePaymentAtLeastOnce(_paymentId);\\n    }\\n\\n    /**\\n    * @notice Execute pending payment #`_paymentId`\\n    * @dev Always allow receiver of a payment to trigger execution\\n    *      Initialization check is implicitly provided by `scheduledPaymentExists()` as new\\n    *      scheduled payments can only be created via `newScheduledPayment(),` which requires initialization\\n    * @param _paymentId Identifier for payment\\n    */\\n    function receiverExecutePayment(uint256 _paymentId) external scheduledPaymentExists(_paymentId) transitionsPeriod {\\n        require(scheduledPayments[_paymentId].receiver == msg.sender, ERROR_PAYMENT_RECEIVER);\\n        _executePaymentAtLeastOnce(_paymentId);\\n    }\\n\\n    /**\\n    * @notice `_active ? 'Activate' : 'Disable'` payment #`_paymentId`\\n    * @dev Note that we do not require this action to transition periods, as it doesn't directly\\n    *      impact any accounting periods.\\n    *      Not having to transition periods also makes disabling payments easier to prevent funds\\n    *      from being pulled out in the event of a breach.\\n    * @param _paymentId Identifier for payment\\n    * @param _active Whether it will be active or inactive\\n    */\\n    function setPaymentStatus(uint256 _paymentId, bool _active)\\n        external\\n        authP(MANAGE_PAYMENTS_ROLE, arr(_paymentId, uint256(_active ? 1 : 0)))\\n        scheduledPaymentExists(_paymentId)\\n    {\\n        scheduledPayments[_paymentId].inactive = !_active;\\n        emit ChangePaymentState(_paymentId, _active);\\n    }\\n\\n    /**\\n     * @notice Send tokens held in this contract to the Vault\\n     * @dev Allows making a simple payment from this contract to the Vault, to avoid locked tokens.\\n     *      This contract should never receive tokens with a simple transfer call, but in case it\\n     *      happens, this function allows for their recovery.\\n     * @param _token Token whose balance is going to be transferred.\\n     */\\n    function recoverToVault(address _token) external isInitialized transitionsPeriod {\\n        uint256 amount = _token == ETH ? address(this).balance : ERC20(_token).staticBalanceOf(address(this));\\n        require(amount > 0, ERROR_RECOVER_AMOUNT_ZERO);\\n\\n        _deposit(\\n            _token,\\n            amount,\\n            \\\"Recover to Vault\\\",\\n            address(this),\\n            false\\n        );\\n    }\\n\\n    /**\\n    * @notice Transition accounting period if needed\\n    * @dev Transitions accounting periods if needed. For preventing OOG attacks, a maxTransitions\\n    *      param is provided. If more than the specified number of periods need to be transitioned,\\n    *      it will return false.\\n    * @param _maxTransitions Maximum periods that can be transitioned\\n    * @return success Boolean indicating whether the accounting period is the correct one (if false,\\n    *                 maxTransitions was surpased and another call is needed)\\n    */\\n    function tryTransitionAccountingPeriod(uint64 _maxTransitions) external isInitialized returns (bool success) {\\n        return _tryTransitionAccountingPeriod(_maxTransitions);\\n    }\\n\\n    // Getter fns\\n\\n    /**\\n    * @dev Disable recovery escape hatch if the app has been initialized, as it could be used\\n    *      maliciously to transfer funds in the Finance app to another Vault\\n    *      finance#recoverToVault() should be used to recover funds to the Finance's vault\\n    */\\n    function allowRecoverability(address) public view returns (bool) {\\n        return !hasInitialized();\\n    }\\n\\n    function getPayment(uint256 _paymentId)\\n        public\\n        view\\n        scheduledPaymentExists(_paymentId)\\n        returns (\\n            address token,\\n            address receiver,\\n            uint256 amount,\\n            uint64 initialPaymentTime,\\n            uint64 interval,\\n            uint64 maxExecutions,\\n            bool inactive,\\n            uint64 executions,\\n            address createdBy\\n        )\\n    {\\n        ScheduledPayment storage payment = scheduledPayments[_paymentId];\\n\\n        token = payment.token;\\n        receiver = payment.receiver;\\n        amount = payment.amount;\\n        initialPaymentTime = payment.initialPaymentTime;\\n        interval = payment.interval;\\n        maxExecutions = payment.maxExecutions;\\n        executions = payment.executions;\\n        inactive = payment.inactive;\\n        createdBy = payment.createdBy;\\n    }\\n\\n    function getTransaction(uint256 _transactionId)\\n        public\\n        view\\n        transactionExists(_transactionId)\\n        returns (\\n            uint64 periodId,\\n            uint256 amount,\\n            uint256 paymentId,\\n            uint64 paymentExecutionNumber,\\n            address token,\\n            address entity,\\n            bool isIncoming,\\n            uint64 date\\n        )\\n    {\\n        Transaction storage transaction = transactions[_transactionId];\\n\\n        token = transaction.token;\\n        entity = transaction.entity;\\n        isIncoming = transaction.isIncoming;\\n        date = transaction.date;\\n        periodId = transaction.periodId;\\n        amount = transaction.amount;\\n        paymentId = transaction.paymentId;\\n        paymentExecutionNumber = transaction.paymentExecutionNumber;\\n    }\\n\\n    function getPeriod(uint64 _periodId)\\n        public\\n        view\\n        periodExists(_periodId)\\n        returns (\\n            bool isCurrent,\\n            uint64 startTime,\\n            uint64 endTime,\\n            uint256 firstTransactionId,\\n            uint256 lastTransactionId\\n        )\\n    {\\n        Period storage period = periods[_periodId];\\n\\n        isCurrent = _currentPeriodId() == _periodId;\\n\\n        startTime = period.startTime;\\n        endTime = period.endTime;\\n        firstTransactionId = period.firstTransactionId;\\n        lastTransactionId = period.lastTransactionId;\\n    }\\n\\n    function getPeriodTokenStatement(uint64 _periodId, address _token)\\n        public\\n        view\\n        periodExists(_periodId)\\n        returns (uint256 expenses, uint256 income)\\n    {\\n        TokenStatement storage tokenStatement = periods[_periodId].tokenStatement[_token];\\n        expenses = tokenStatement.expenses;\\n        income = tokenStatement.income;\\n    }\\n\\n    /**\\n    * @dev We have to check for initialization as periods are only valid after initializing\\n    */\\n    function currentPeriodId() public view isInitialized returns (uint64) {\\n        return _currentPeriodId();\\n    }\\n\\n    /**\\n    * @dev We have to check for initialization as periods are only valid after initializing\\n    */\\n    function getPeriodDuration() public view isInitialized returns (uint64) {\\n        return settings.periodDuration;\\n    }\\n\\n    /**\\n    * @dev We have to check for initialization as budgets are only valid after initializing\\n    */\\n    function getBudget(address _token) public view isInitialized returns (uint256 budget, bool hasBudget) {\\n        budget = settings.budgets[_token];\\n        hasBudget = settings.hasBudget[_token];\\n    }\\n\\n    /**\\n    * @dev We have to check for initialization as budgets are only valid after initializing\\n    */\\n    function getRemainingBudget(address _token) public view isInitialized returns (uint256) {\\n        return _getRemainingBudget(_token);\\n    }\\n\\n    /**\\n    * @dev We have to check for initialization as budgets are only valid after initializing\\n    */\\n    function canMakePayment(address _token, uint256 _amount) public view isInitialized returns (bool) {\\n        return _canMakePayment(_token, _amount);\\n    }\\n\\n    /**\\n    * @dev Initialization check is implicitly provided by `scheduledPaymentExists()` as new\\n    *      scheduled payments can only be created via `newScheduledPayment(),` which requires initialization\\n    */\\n    function nextPaymentTime(uint256 _paymentId) public view scheduledPaymentExists(_paymentId) returns (uint64) {\\n        return _nextPaymentTime(_paymentId);\\n    }\\n\\n    // Internal fns\\n\\n    function _deposit(address _token, uint256 _amount, string _reference, address _sender, bool _isExternalDeposit) internal {\\n        _recordIncomingTransaction(\\n            _token,\\n            _sender,\\n            _amount,\\n            _reference\\n        );\\n\\n        if (_token == ETH) {\\n            vault.deposit.value(_amount)(ETH, _amount);\\n        } else {\\n            // First, transfer the tokens to Finance if necessary\\n            // External deposit will be false when the assets were already in the Finance app\\n            // and just need to be transferred to the Vault\\n            if (_isExternalDeposit) {\\n                // This assumes the sender has approved the tokens for Finance\\n                require(\\n                    ERC20(_token).safeTransferFrom(msg.sender, address(this), _amount),\\n                    ERROR_TOKEN_TRANSFER_FROM_REVERTED\\n                );\\n            }\\n            // Approve the tokens for the Vault (it does the actual transferring)\\n            require(ERC20(_token).safeApprove(vault, _amount), ERROR_TOKEN_APPROVE_FAILED);\\n            // Finally, initiate the deposit\\n            vault.deposit(_token, _amount);\\n        }\\n    }\\n\\n    function _executePayment(uint256 _paymentId) internal returns (uint256) {\\n        ScheduledPayment storage payment = scheduledPayments[_paymentId];\\n        require(!payment.inactive, ERROR_PAYMENT_INACTIVE);\\n\\n        uint64 paid = 0;\\n        while (_nextPaymentTime(_paymentId) <= getTimestamp64() && paid < MAX_SCHEDULED_PAYMENTS_PER_TX) {\\n            if (!_canMakePayment(payment.token, payment.amount)) {\\n                emit PaymentFailure(_paymentId);\\n                break;\\n            }\\n\\n            // The while() predicate prevents these two from ever overflowing\\n            payment.executions += 1;\\n            paid += 1;\\n\\n            // We've already checked the remaining budget with `_canMakePayment()`\\n            _unsafeMakePaymentTransaction(\\n                payment.token,\\n                payment.receiver,\\n                payment.amount,\\n                _paymentId,\\n                payment.executions,\\n                \\\"\\\"\\n            );\\n        }\\n\\n        return paid;\\n    }\\n\\n    function _executePaymentAtLeastOnce(uint256 _paymentId) internal {\\n        uint256 paid = _executePayment(_paymentId);\\n        if (paid == 0) {\\n            if (_nextPaymentTime(_paymentId) <= getTimestamp64()) {\\n                revert(ERROR_EXECUTE_PAYMENT_NUM);\\n            } else {\\n                revert(ERROR_EXECUTE_PAYMENT_TIME);\\n            }\\n        }\\n    }\\n\\n    function _makePaymentTransaction(\\n        address _token,\\n        address _receiver,\\n        uint256 _amount,\\n        uint256 _paymentId,\\n        uint64 _paymentExecutionNumber,\\n        string _reference\\n    )\\n        internal\\n    {\\n        require(_getRemainingBudget(_token) >= _amount, ERROR_REMAINING_BUDGET);\\n        _unsafeMakePaymentTransaction(_token, _receiver, _amount, _paymentId, _paymentExecutionNumber, _reference);\\n    }\\n\\n    /**\\n    * @dev Unsafe version of _makePaymentTransaction that assumes you have already checked the\\n    *      remaining budget\\n    */\\n    function _unsafeMakePaymentTransaction(\\n        address _token,\\n        address _receiver,\\n        uint256 _amount,\\n        uint256 _paymentId,\\n        uint64 _paymentExecutionNumber,\\n        string _reference\\n    )\\n        internal\\n    {\\n        _recordTransaction(\\n            false,\\n            _token,\\n            _receiver,\\n            _amount,\\n            _paymentId,\\n            _paymentExecutionNumber,\\n            _reference\\n        );\\n\\n        vault.transfer(_token, _receiver, _amount);\\n    }\\n\\n    function _newPeriod(uint64 _startTime) internal returns (Period storage) {\\n        // There should be no way for this to overflow since each period is at least one day\\n        uint64 newPeriodId = periodsLength++;\\n\\n        Period storage period = periods[newPeriodId];\\n        period.startTime = _startTime;\\n\\n        // Be careful here to not overflow; if startTime + periodDuration overflows, we set endTime\\n        // to MAX_UINT64 (let's assume that's the end of time for now).\\n        uint64 endTime = _startTime + settings.periodDuration - 1;\\n        if (endTime < _startTime) { // overflowed\\n            endTime = MAX_UINT64;\\n        }\\n        period.endTime = endTime;\\n\\n        emit NewPeriod(newPeriodId, period.startTime, period.endTime);\\n\\n        return period;\\n    }\\n\\n    function _recordIncomingTransaction(\\n        address _token,\\n        address _sender,\\n        uint256 _amount,\\n        string _reference\\n    )\\n        internal\\n    {\\n        _recordTransaction(\\n            true, // incoming transaction\\n            _token,\\n            _sender,\\n            _amount,\\n            NO_SCHEDULED_PAYMENT, // unrelated to any existing payment\\n            0, // and no payment executions\\n            _reference\\n        );\\n    }\\n\\n    function _recordTransaction(\\n        bool _incoming,\\n        address _token,\\n        address _entity,\\n        uint256 _amount,\\n        uint256 _paymentId,\\n        uint64 _paymentExecutionNumber,\\n        string _reference\\n    )\\n        internal\\n    {\\n        uint64 periodId = _currentPeriodId();\\n        TokenStatement storage tokenStatement = periods[periodId].tokenStatement[_token];\\n        if (_incoming) {\\n            tokenStatement.income = tokenStatement.income.add(_amount);\\n        } else {\\n            tokenStatement.expenses = tokenStatement.expenses.add(_amount);\\n        }\\n\\n        uint256 transactionId = transactionsNextIndex++;\\n\\n        Transaction storage transaction = transactions[transactionId];\\n        transaction.token = _token;\\n        transaction.entity = _entity;\\n        transaction.isIncoming = _incoming;\\n        transaction.amount = _amount;\\n        transaction.paymentId = _paymentId;\\n        transaction.paymentExecutionNumber = _paymentExecutionNumber;\\n        transaction.date = getTimestamp64();\\n        transaction.periodId = periodId;\\n\\n        Period storage period = periods[periodId];\\n        if (period.firstTransactionId == NO_TRANSACTION) {\\n            period.firstTransactionId = transactionId;\\n        }\\n\\n        emit NewTransaction(transactionId, _incoming, _entity, _amount, _reference);\\n    }\\n\\n    function _tryTransitionAccountingPeriod(uint64 _maxTransitions) internal returns (bool success) {\\n        Period storage currentPeriod = periods[_currentPeriodId()];\\n        uint64 timestamp = getTimestamp64();\\n\\n        // Transition periods if necessary\\n        while (timestamp > currentPeriod.endTime) {\\n            if (_maxTransitions == 0) {\\n                // Required number of transitions is over allowed number, return false indicating\\n                // it didn't fully transition\\n                return false;\\n            }\\n            // We're already protected from underflowing above\\n            _maxTransitions -= 1;\\n\\n            // If there were any transactions in period, record which was the last\\n            // In case 0 transactions occured, first and last tx id will be 0\\n            if (currentPeriod.firstTransactionId != NO_TRANSACTION) {\\n                currentPeriod.lastTransactionId = transactionsNextIndex.sub(1);\\n            }\\n\\n            // New period starts at end time + 1\\n            currentPeriod = _newPeriod(currentPeriod.endTime.add(1));\\n        }\\n\\n        return true;\\n    }\\n\\n    function _canMakePayment(address _token, uint256 _amount) internal view returns (bool) {\\n        return _getRemainingBudget(_token) >= _amount && vault.balance(_token) >= _amount;\\n    }\\n\\n    function _currentPeriodId() internal view returns (uint64) {\\n        // There is no way for this to overflow if protected by an initialization check\\n        return periodsLength - 1;\\n    }\\n\\n    function _getRemainingBudget(address _token) internal view returns (uint256) {\\n        if (!settings.hasBudget[_token]) {\\n            return MAX_UINT256;\\n        }\\n\\n        uint256 budget = settings.budgets[_token];\\n        uint256 spent = periods[_currentPeriodId()].tokenStatement[_token].expenses;\\n\\n        // A budget decrease can cause the spent amount to be greater than period budget\\n        // If so, return 0 to not allow more spending during period\\n        if (spent >= budget) {\\n            return 0;\\n        }\\n\\n        // We're already protected from the overflow above\\n        return budget - spent;\\n    }\\n\\n    function _nextPaymentTime(uint256 _paymentId) internal view returns (uint64) {\\n        ScheduledPayment storage payment = scheduledPayments[_paymentId];\\n\\n        if (payment.executions >= payment.maxExecutions) {\\n            return MAX_UINT64; // re-executes in some billions of years time... should not need to worry\\n        }\\n\\n        // Split in multiple lines to circumvent linter warning\\n        uint64 increase = payment.executions.mul(payment.interval);\\n        uint64 nextPayment = payment.initialPaymentTime.add(increase);\\n        return nextPayment;\\n    }\\n\\n    // Syntax sugar\\n\\n    function _arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e, uint256 _f) internal pure returns (uint256[] r) {\\n        r = new uint256[](6);\\n        r[0] = uint256(_a);\\n        r[1] = uint256(_b);\\n        r[2] = _c;\\n        r[3] = _d;\\n        r[4] = _e;\\n        r[5] = _f;\\n    }\\n\\n    // Mocked fns (overrided during testing)\\n    // Must be view for mocking purposes\\n\\n    function getMaxPeriodTransitions() internal view returns (uint64) { return MAX_UINT64; }\\n}\\n\"\r\n    },\r\n    \"@aragon/apps-vault/contracts/Vault.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"@aragon/os/contracts/common/DepositableStorage.sol\\\";\\nimport \\\"@aragon/os/contracts/common/EtherTokenConstant.sol\\\";\\nimport \\\"@aragon/os/contracts/common/SafeERC20.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/token/ERC20.sol\\\";\\n\\n\\ncontract Vault is EtherTokenConstant, AragonApp, DepositableStorage {\\n    using SafeERC20 for ERC20;\\n\\n    bytes32 public constant TRANSFER_ROLE = keccak256(\\\"TRANSFER_ROLE\\\");\\n\\n    string private constant ERROR_DATA_NON_ZERO = \\\"VAULT_DATA_NON_ZERO\\\";\\n    string private constant ERROR_NOT_DEPOSITABLE = \\\"VAULT_NOT_DEPOSITABLE\\\";\\n    string private constant ERROR_DEPOSIT_VALUE_ZERO = \\\"VAULT_DEPOSIT_VALUE_ZERO\\\";\\n    string private constant ERROR_TRANSFER_VALUE_ZERO = \\\"VAULT_TRANSFER_VALUE_ZERO\\\";\\n    string private constant ERROR_SEND_REVERTED = \\\"VAULT_SEND_REVERTED\\\";\\n    string private constant ERROR_VALUE_MISMATCH = \\\"VAULT_VALUE_MISMATCH\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_FROM_REVERTED = \\\"VAULT_TOKEN_TRANSFER_FROM_REVERT\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_REVERTED = \\\"VAULT_TOKEN_TRANSFER_REVERTED\\\";\\n\\n    event VaultTransfer(address indexed token, address indexed to, uint256 amount);\\n    event VaultDeposit(address indexed token, address indexed sender, uint256 amount);\\n\\n    /**\\n    * @dev On a normal send() or transfer() this fallback is never executed as it will be\\n    *      intercepted by the Proxy (see aragonOS#281)\\n    */\\n    function () external payable isInitialized {\\n        require(msg.data.length == 0, ERROR_DATA_NON_ZERO);\\n        _deposit(ETH, msg.value);\\n    }\\n\\n    /**\\n    * @notice Initialize Vault app\\n    * @dev As an AragonApp it needs to be initialized in order for roles (`auth` and `authP`) to work\\n    */\\n    function initialize() external onlyInit {\\n        initialized();\\n        setDepositable(true);\\n    }\\n\\n    /**\\n    * @notice Deposit `_value` `_token` to the vault\\n    * @param _token Address of the token being transferred\\n    * @param _value Amount of tokens being transferred\\n    */\\n    function deposit(address _token, uint256 _value) external payable isInitialized {\\n        _deposit(_token, _value);\\n    }\\n\\n    /**\\n    * @notice Transfer `_value` `_token` from the Vault to `_to`\\n    * @param _token Address of the token being transferred\\n    * @param _to Address of the recipient of tokens\\n    * @param _value Amount of tokens being transferred\\n    */\\n    /* solium-disable-next-line function-order */\\n    function transfer(address _token, address _to, uint256 _value)\\n        external\\n        authP(TRANSFER_ROLE, arr(_token, _to, _value))\\n    {\\n        require(_value > 0, ERROR_TRANSFER_VALUE_ZERO);\\n\\n        if (_token == ETH) {\\n            require(_to.send(_value), ERROR_SEND_REVERTED);\\n        } else {\\n            require(ERC20(_token).safeTransfer(_to, _value), ERROR_TOKEN_TRANSFER_REVERTED);\\n        }\\n\\n        emit VaultTransfer(_token, _to, _value);\\n    }\\n\\n    function balance(address _token) public view returns (uint256) {\\n        if (_token == ETH) {\\n            return address(this).balance;\\n        } else {\\n            return ERC20(_token).staticBalanceOf(address(this));\\n        }\\n    }\\n\\n    /**\\n    * @dev Disable recovery escape hatch, as it could be used\\n    *      maliciously to transfer funds away from the vault\\n    */\\n    function allowRecoverability(address) public view returns (bool) {\\n        return false;\\n    }\\n\\n    function _deposit(address _token, uint256 _value) internal {\\n        require(isDepositable(), ERROR_NOT_DEPOSITABLE);\\n        require(_value > 0, ERROR_DEPOSIT_VALUE_ZERO);\\n\\n        if (_token == ETH) {\\n            // Deposit is implicit in this case\\n            require(msg.value == _value, ERROR_VALUE_MISMATCH);\\n        } else {\\n            require(\\n                ERC20(_token).safeTransferFrom(msg.sender, address(this), _value),\\n                ERROR_TOKEN_TRANSFER_FROM_REVERTED\\n            );\\n        }\\n\\n        emit VaultDeposit(_token, msg.sender, _value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/DepositableStorage.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"./UnstructuredStorage.sol\\\";\\n\\n\\ncontract DepositableStorage {\\n    using UnstructuredStorage for bytes32;\\n\\n    // keccak256(\\\"aragonOS.depositableStorage.depositable\\\")\\n    bytes32 internal constant DEPOSITABLE_POSITION = 0x665fd576fbbe6f247aff98f5c94a561e3f71ec2d3c988d56f12d342396c50cea;\\n\\n    function isDepositable() public view returns (bool) {\\n        return DEPOSITABLE_POSITION.getStorageBool();\\n    }\\n\\n    function setDepositable(bool _depositable) internal {\\n        DEPOSITABLE_POSITION.setStorageBool(_depositable);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/kernel/Kernel.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"./IKernel.sol\\\";\\nimport \\\"./KernelConstants.sol\\\";\\nimport \\\"./KernelStorage.sol\\\";\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\nimport \\\"../common/ConversionHelpers.sol\\\";\\nimport \\\"../common/IsContract.sol\\\";\\nimport \\\"../common/Petrifiable.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../factory/AppProxyFactory.sol\\\";\\nimport \\\"../lib/misc/ERCProxy.sol\\\";\\n\\n\\n// solium-disable-next-line max-len\\ncontract Kernel is IKernel, KernelStorage, KernelAppIds, KernelNamespaceConstants, Petrifiable, IsContract, VaultRecoverable, AppProxyFactory, ACLSyntaxSugar {\\n    /* Hardcoded constants to save gas\\n    bytes32 public constant APP_MANAGER_ROLE = keccak256(\\\"APP_MANAGER_ROLE\\\");\\n    */\\n    bytes32 public constant APP_MANAGER_ROLE = 0xb6d92708f3d4817afc106147d969e229ced5c46e65e0a5002a0d391287762bd0;\\n\\n    string private constant ERROR_APP_NOT_CONTRACT = \\\"KERNEL_APP_NOT_CONTRACT\\\";\\n    string private constant ERROR_INVALID_APP_CHANGE = \\\"KERNEL_INVALID_APP_CHANGE\\\";\\n    string private constant ERROR_AUTH_FAILED = \\\"KERNEL_AUTH_FAILED\\\";\\n\\n    /**\\n    * @dev Constructor that allows the deployer to choose if the base instance should be petrified immediately.\\n    * @param _shouldPetrify Immediately petrify this instance so that it can never be initialized\\n    */\\n    constructor(bool _shouldPetrify) public {\\n        if (_shouldPetrify) {\\n            petrify();\\n        }\\n    }\\n\\n    /**\\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\\n    * @notice Initialize this kernel instance along with its ACL and set `_permissionsCreator` as the entity that can create other permissions\\n    * @param _baseAcl Address of base ACL app\\n    * @param _permissionsCreator Entity that will be given permission over createPermission\\n    */\\n    function initialize(IACL _baseAcl, address _permissionsCreator) public onlyInit {\\n        initialized();\\n\\n        // Set ACL base\\n        _setApp(KERNEL_APP_BASES_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID, _baseAcl);\\n\\n        // Create ACL instance and attach it as the default ACL app\\n        IACL acl = IACL(newAppProxy(this, KERNEL_DEFAULT_ACL_APP_ID));\\n        acl.initialize(_permissionsCreator);\\n        _setApp(KERNEL_APP_ADDR_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID, acl);\\n\\n        recoveryVaultAppId = KERNEL_DEFAULT_VAULT_APP_ID;\\n    }\\n\\n    /**\\n    * @dev Create a new instance of an app linked to this kernel\\n    * @notice Create a new upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`\\n    * @param _appId Identifier for app\\n    * @param _appBase Address of the app's base implementation\\n    * @return AppProxy instance\\n    */\\n    function newAppInstance(bytes32 _appId, address _appBase)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\\n        returns (ERCProxy appProxy)\\n    {\\n        return newAppInstance(_appId, _appBase, new bytes(0), false);\\n    }\\n\\n    /**\\n    * @dev Create a new instance of an app linked to this kernel and set its base\\n    *      implementation if it was not already set\\n    * @notice Create a new upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`. `_setDefault ? 'Also sets it as the default app instance.':''`\\n    * @param _appId Identifier for app\\n    * @param _appBase Address of the app's base implementation\\n    * @param _initializePayload Payload for call made by the proxy during its construction to initialize\\n    * @param _setDefault Whether the app proxy app is the default one.\\n    *        Useful when the Kernel needs to know of an instance of a particular app,\\n    *        like Vault for escape hatch mechanism.\\n    * @return AppProxy instance\\n    */\\n    function newAppInstance(bytes32 _appId, address _appBase, bytes _initializePayload, bool _setDefault)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\\n        returns (ERCProxy appProxy)\\n    {\\n        _setAppIfNew(KERNEL_APP_BASES_NAMESPACE, _appId, _appBase);\\n        appProxy = newAppProxy(this, _appId, _initializePayload);\\n        // By calling setApp directly and not the internal functions, we make sure the params are checked\\n        // and it will only succeed if sender has permissions to set something to the namespace.\\n        if (_setDefault) {\\n            setApp(KERNEL_APP_ADDR_NAMESPACE, _appId, appProxy);\\n        }\\n    }\\n\\n    /**\\n    * @dev Create a new pinned instance of an app linked to this kernel\\n    * @notice Create a new non-upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`.\\n    * @param _appId Identifier for app\\n    * @param _appBase Address of the app's base implementation\\n    * @return AppProxy instance\\n    */\\n    function newPinnedAppInstance(bytes32 _appId, address _appBase)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\\n        returns (ERCProxy appProxy)\\n    {\\n        return newPinnedAppInstance(_appId, _appBase, new bytes(0), false);\\n    }\\n\\n    /**\\n    * @dev Create a new pinned instance of an app linked to this kernel and set\\n    *      its base implementation if it was not already set\\n    * @notice Create a new non-upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`. `_setDefault ? 'Also sets it as the default app instance.':''`\\n    * @param _appId Identifier for app\\n    * @param _appBase Address of the app's base implementation\\n    * @param _initializePayload Payload for call made by the proxy during its construction to initialize\\n    * @param _setDefault Whether the app proxy app is the default one.\\n    *        Useful when the Kernel needs to know of an instance of a particular app,\\n    *        like Vault for escape hatch mechanism.\\n    * @return AppProxy instance\\n    */\\n    function newPinnedAppInstance(bytes32 _appId, address _appBase, bytes _initializePayload, bool _setDefault)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\\n        returns (ERCProxy appProxy)\\n    {\\n        _setAppIfNew(KERNEL_APP_BASES_NAMESPACE, _appId, _appBase);\\n        appProxy = newAppProxyPinned(this, _appId, _initializePayload);\\n        // By calling setApp directly and not the internal functions, we make sure the params are checked\\n        // and it will only succeed if sender has permissions to set something to the namespace.\\n        if (_setDefault) {\\n            setApp(KERNEL_APP_ADDR_NAMESPACE, _appId, appProxy);\\n        }\\n    }\\n\\n    /**\\n    * @dev Set the resolving address of an app instance or base implementation\\n    * @notice Set the resolving address of `_appId` in namespace `_namespace` to `_app`\\n    * @param _namespace App namespace to use\\n    * @param _appId Identifier for app\\n    * @param _app Address of the app instance or base implementation\\n    * @return ID of app\\n    */\\n    function setApp(bytes32 _namespace, bytes32 _appId, address _app)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(_namespace, _appId))\\n    {\\n        _setApp(_namespace, _appId, _app);\\n    }\\n\\n    /**\\n    * @dev Set the default vault id for the escape hatch mechanism\\n    * @param _recoveryVaultAppId Identifier of the recovery vault app\\n    */\\n    function setRecoveryVaultAppId(bytes32 _recoveryVaultAppId)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_ADDR_NAMESPACE, _recoveryVaultAppId))\\n    {\\n        recoveryVaultAppId = _recoveryVaultAppId;\\n    }\\n\\n    // External access to default app id and namespace constants to mimic default getters for constants\\n    /* solium-disable function-order, mixedcase */\\n    function CORE_NAMESPACE() external pure returns (bytes32) { return KERNEL_CORE_NAMESPACE; }\\n    function APP_BASES_NAMESPACE() external pure returns (bytes32) { return KERNEL_APP_BASES_NAMESPACE; }\\n    function APP_ADDR_NAMESPACE() external pure returns (bytes32) { return KERNEL_APP_ADDR_NAMESPACE; }\\n    function KERNEL_APP_ID() external pure returns (bytes32) { return KERNEL_CORE_APP_ID; }\\n    function DEFAULT_ACL_APP_ID() external pure returns (bytes32) { return KERNEL_DEFAULT_ACL_APP_ID; }\\n    /* solium-enable function-order, mixedcase */\\n\\n    /**\\n    * @dev Get the address of an app instance or base implementation\\n    * @param _namespace App namespace to use\\n    * @param _appId Identifier for app\\n    * @return Address of the app\\n    */\\n    function getApp(bytes32 _namespace, bytes32 _appId) public view returns (address) {\\n        return apps[_namespace][_appId];\\n    }\\n\\n    /**\\n    * @dev Get the address of the recovery Vault instance (to recover funds)\\n    * @return Address of the Vault\\n    */\\n    function getRecoveryVault() public view returns (address) {\\n        return apps[KERNEL_APP_ADDR_NAMESPACE][recoveryVaultAppId];\\n    }\\n\\n    /**\\n    * @dev Get the installed ACL app\\n    * @return ACL app\\n    */\\n    function acl() public view returns (IACL) {\\n        return IACL(getApp(KERNEL_APP_ADDR_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID));\\n    }\\n\\n    /**\\n    * @dev Function called by apps to check ACL on kernel or to check permission status\\n    * @param _who Sender of the original call\\n    * @param _where Address of the app\\n    * @param _what Identifier for a group of actions in app\\n    * @param _how Extra data for ACL auth\\n    * @return Boolean indicating whether the ACL allows the role or not.\\n    *         Always returns false if the kernel hasn't been initialized yet.\\n    */\\n    function hasPermission(address _who, address _where, bytes32 _what, bytes _how) public view returns (bool) {\\n        IACL defaultAcl = acl();\\n        return address(defaultAcl) != address(0) && // Poor man's initialization check (saves gas)\\n            defaultAcl.hasPermission(_who, _where, _what, _how);\\n    }\\n\\n    function _setApp(bytes32 _namespace, bytes32 _appId, address _app) internal {\\n        require(isContract(_app), ERROR_APP_NOT_CONTRACT);\\n        apps[_namespace][_appId] = _app;\\n        emit SetApp(_namespace, _appId, _app);\\n    }\\n\\n    function _setAppIfNew(bytes32 _namespace, bytes32 _appId, address _app) internal {\\n        address app = getApp(_namespace, _appId);\\n        if (app != address(0)) {\\n            // The only way to set an app is if it passes the isContract check, so no need to check it again\\n            require(app == _app, ERROR_INVALID_APP_CHANGE);\\n        } else {\\n            _setApp(_namespace, _appId, _app);\\n        }\\n    }\\n\\n    modifier auth(bytes32 _role, uint256[] memory _params) {\\n        require(\\n            hasPermission(msg.sender, address(this), _role, ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)),\\n            ERROR_AUTH_FAILED\\n        );\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/kernel/KernelStorage.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\n\\ncontract KernelStorage {\\n    // namespace => app id => address\\n    mapping (bytes32 => mapping (bytes32 => address)) public apps;\\n    bytes32 public recoveryVaultAppId;\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/factory/AppProxyFactory.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"../apps/AppProxyUpgradeable.sol\\\";\\nimport \\\"../apps/AppProxyPinned.sol\\\";\\n\\n\\ncontract AppProxyFactory {\\n    event NewAppProxy(address proxy, bool isUpgradeable, bytes32 appId);\\n\\n    /**\\n    * @notice Create a new upgradeable app instance on `_kernel` with identifier `_appId`\\n    * @param _kernel App's Kernel reference\\n    * @param _appId Identifier for app\\n    * @return AppProxyUpgradeable\\n    */\\n    function newAppProxy(IKernel _kernel, bytes32 _appId) public returns (AppProxyUpgradeable) {\\n        return newAppProxy(_kernel, _appId, new bytes(0));\\n    }\\n\\n    /**\\n    * @notice Create a new upgradeable app instance on `_kernel` with identifier `_appId` and initialization payload `_initializePayload`\\n    * @param _kernel App's Kernel reference\\n    * @param _appId Identifier for app\\n    * @return AppProxyUpgradeable\\n    */\\n    function newAppProxy(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyUpgradeable) {\\n        AppProxyUpgradeable proxy = new AppProxyUpgradeable(_kernel, _appId, _initializePayload);\\n        emit NewAppProxy(address(proxy), true, _appId);\\n        return proxy;\\n    }\\n\\n    /**\\n    * @notice Create a new pinned app instance on `_kernel` with identifier `_appId`\\n    * @param _kernel App's Kernel reference\\n    * @param _appId Identifier for app\\n    * @return AppProxyPinned\\n    */\\n    function newAppProxyPinned(IKernel _kernel, bytes32 _appId) public returns (AppProxyPinned) {\\n        return newAppProxyPinned(_kernel, _appId, new bytes(0));\\n    }\\n\\n    /**\\n    * @notice Create a new pinned app instance on `_kernel` with identifier `_appId` and initialization payload `_initializePayload`\\n    * @param _kernel App's Kernel reference\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Proxy initialization payload\\n    * @return AppProxyPinned\\n    */\\n    function newAppProxyPinned(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyPinned) {\\n        AppProxyPinned proxy = new AppProxyPinned(_kernel, _appId, _initializePayload);\\n        emit NewAppProxy(address(proxy), false, _appId);\\n        return proxy;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/lib/misc/ERCProxy.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ERCProxy {\\n    uint256 internal constant FORWARDING = 1;\\n    uint256 internal constant UPGRADEABLE = 2;\\n\\n    function proxyType() public pure returns (uint256 proxyTypeId);\\n    function implementation() public view returns (address codeAddr);\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/apps/AppProxyUpgradeable.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"./AppProxyBase.sol\\\";\\n\\n\\ncontract AppProxyUpgradeable is AppProxyBase {\\n    /**\\n    * @dev Initialize AppProxyUpgradeable (makes it an upgradeable Aragon app)\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    constructor(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\\n        AppProxyBase(_kernel, _appId, _initializePayload)\\n        public // solium-disable-line visibility-first\\n    {\\n        // solium-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev ERC897, the address the proxy would delegate calls to\\n     */\\n    function implementation() public view returns (address) {\\n        return getAppBase(appId());\\n    }\\n\\n    /**\\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\\n     */\\n    function proxyType() public pure returns (uint256 proxyTypeId) {\\n        return UPGRADEABLE;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/apps/AppProxyPinned.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\nimport \\\"../common/IsContract.sol\\\";\\nimport \\\"./AppProxyBase.sol\\\";\\n\\n\\ncontract AppProxyPinned is IsContract, AppProxyBase {\\n    using UnstructuredStorage for bytes32;\\n\\n    // keccak256(\\\"aragonOS.appStorage.pinnedCode\\\")\\n    bytes32 internal constant PINNED_CODE_POSITION = 0xdee64df20d65e53d7f51cb6ab6d921a0a6a638a91e942e1d8d02df28e31c038e;\\n\\n    /**\\n    * @dev Initialize AppProxyPinned (makes it an un-upgradeable Aragon app)\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    constructor(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\\n        AppProxyBase(_kernel, _appId, _initializePayload)\\n        public // solium-disable-line visibility-first\\n    {\\n        setPinnedCode(getAppBase(_appId));\\n        require(isContract(pinnedCode()));\\n    }\\n\\n    /**\\n     * @dev ERC897, the address the proxy would delegate calls to\\n     */\\n    function implementation() public view returns (address) {\\n        return pinnedCode();\\n    }\\n\\n    /**\\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\\n     */\\n    function proxyType() public pure returns (uint256 proxyTypeId) {\\n        return FORWARDING;\\n    }\\n\\n    function setPinnedCode(address _pinnedCode) internal {\\n        PINNED_CODE_POSITION.setStorageAddress(_pinnedCode);\\n    }\\n\\n    function pinnedCode() internal view returns (address) {\\n        return PINNED_CODE_POSITION.getStorageAddress();\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/apps/AppProxyBase.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../common/DepositableDelegateProxy.sol\\\";\\nimport \\\"../kernel/KernelConstants.sol\\\";\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppProxyBase is AppStorage, DepositableDelegateProxy, KernelNamespaceConstants {\\n    /**\\n    * @dev Initialize AppProxy\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    constructor(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public {\\n        setKernel(_kernel);\\n        setAppId(_appId);\\n\\n        // Implicit check that kernel is actually a Kernel\\n        // The EVM doesn't actually provide a way for us to make sure, but we can force a revert to\\n        // occur if the kernel is set to 0x0 or a non-code address when we try to call a method on\\n        // it.\\n        address appCode = getAppBase(_appId);\\n\\n        // If initialize payload is provided, it will be executed\\n        if (_initializePayload.length > 0) {\\n            require(isContract(appCode));\\n            // Cannot make delegatecall as a delegateproxy.delegatedFwd as it\\n            // returns ending execution context and halts contract deployment\\n            require(appCode.delegatecall(_initializePayload));\\n        }\\n    }\\n\\n    function getAppBase(bytes32 _appId) internal view returns (address) {\\n        return kernel().getApp(KERNEL_APP_BASES_NAMESPACE, _appId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/DepositableDelegateProxy.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"./DelegateProxy.sol\\\";\\nimport \\\"./DepositableStorage.sol\\\";\\n\\n\\ncontract DepositableDelegateProxy is DepositableStorage, DelegateProxy {\\n    event ProxyDeposit(address sender, uint256 value);\\n\\n    function () external payable {\\n        uint256 forwardGasThreshold = FWD_GAS_LIMIT;\\n        bytes32 isDepositablePosition = DEPOSITABLE_POSITION;\\n\\n        // Optimized assembly implementation to prevent EIP-1884 from breaking deposits, reference code in Solidity:\\n        // https://github.com/aragon/aragonOS/blob/v4.2.1/contracts/common/DepositableDelegateProxy.sol#L10-L20\\n        assembly {\\n            // Continue only if the gas left is lower than the threshold for forwarding to the implementation code,\\n            // otherwise continue outside of the assembly block.\\n            if lt(gas, forwardGasThreshold) {\\n                // Only accept the deposit and emit an event if all of the following are true:\\n                // the proxy accepts deposits (isDepositable), msg.data.length == 0, and msg.value > 0\\n                if and(and(sload(isDepositablePosition), iszero(calldatasize)), gt(callvalue, 0)) {\\n                    // Equivalent Solidity code for emitting the event:\\n                    // emit ProxyDeposit(msg.sender, msg.value);\\n\\n                    let logData := mload(0x40) // free memory pointer\\n                    mstore(logData, caller) // add 'msg.sender' to the log data (first event param)\\n                    mstore(add(logData, 0x20), callvalue) // add 'msg.value' to the log data (second event param)\\n\\n                    // Emit an event with one topic to identify the event: keccak256('ProxyDeposit(address,uint256)') = 0x15ee...dee1\\n                    log1(logData, 0x40, 0x15eeaa57c7bd188c1388020bcadc2c436ec60d647d36ef5b9eb3c742217ddee1)\\n\\n                    stop() // Stop. Exits execution context\\n                }\\n\\n                // If any of above checks failed, revert the execution (if ETH was sent, it is returned to the sender)\\n                revert(0, 0)\\n            }\\n        }\\n\\n        address target = implementation();\\n        delegatedFwd(target, msg.data);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/DelegateProxy.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"../common/IsContract.sol\\\";\\nimport \\\"../lib/misc/ERCProxy.sol\\\";\\n\\n\\ncontract DelegateProxy is ERCProxy, IsContract {\\n    uint256 internal constant FWD_GAS_LIMIT = 10000;\\n\\n    /**\\n    * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire context execution will return!)\\n    * @param _dst Destination address to perform the delegatecall\\n    * @param _calldata Calldata for the delegatecall\\n    */\\n    function delegatedFwd(address _dst, bytes _calldata) internal {\\n        require(isContract(_dst));\\n        uint256 fwdGasLimit = FWD_GAS_LIMIT;\\n\\n        assembly {\\n            let result := delegatecall(sub(gas, fwdGasLimit), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)\\n            let size := returndatasize\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, size)\\n\\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\\n            // if the call returned error data, forward it\\n            switch result case 0 { revert(ptr, size) }\\n            default { return(ptr, size) }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/factory/EVMScriptRegistryFactory.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"../evmscript/IEVMScriptExecutor.sol\\\";\\nimport \\\"../evmscript/EVMScriptRegistry.sol\\\";\\n\\nimport \\\"../evmscript/executors/CallsScript.sol\\\";\\n\\nimport \\\"../kernel/Kernel.sol\\\";\\nimport \\\"../acl/ACL.sol\\\";\\n\\n\\ncontract EVMScriptRegistryFactory is EVMScriptRegistryConstants {\\n    EVMScriptRegistry public baseReg;\\n    IEVMScriptExecutor public baseCallScript;\\n\\n    /**\\n    * @notice Create a new EVMScriptRegistryFactory.\\n    */\\n    constructor() public {\\n        baseReg = new EVMScriptRegistry();\\n        baseCallScript = IEVMScriptExecutor(new CallsScript());\\n    }\\n\\n    /**\\n    * @notice Install a new pinned instance of EVMScriptRegistry on `_dao`.\\n    * @param _dao Kernel\\n    * @return Installed EVMScriptRegistry\\n    */\\n    function newEVMScriptRegistry(Kernel _dao) public returns (EVMScriptRegistry reg) {\\n        bytes memory initPayload = abi.encodeWithSelector(reg.initialize.selector);\\n        reg = EVMScriptRegistry(_dao.newPinnedAppInstance(EVMSCRIPT_REGISTRY_APP_ID, baseReg, initPayload, true));\\n\\n        ACL acl = ACL(_dao.acl());\\n\\n        acl.createPermission(this, reg, reg.REGISTRY_ADD_EXECUTOR_ROLE(), this);\\n\\n        reg.addScriptExecutor(baseCallScript);     // spec 1 = CallsScript\\n\\n        // Clean up the permissions\\n        acl.revokePermission(this, reg, reg.REGISTRY_ADD_EXECUTOR_ROLE());\\n        acl.removePermissionManager(reg, reg.REGISTRY_ADD_EXECUTOR_ROLE());\\n\\n        return reg;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/evmscript/EVMScriptRegistry.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"../apps/AragonApp.sol\\\";\\nimport \\\"./ScriptHelpers.sol\\\";\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\n\\n/* solium-disable function-order */\\n// Allow public initialize() to be first\\ncontract EVMScriptRegistry is IEVMScriptRegistry, EVMScriptRegistryConstants, AragonApp {\\n    using ScriptHelpers for bytes;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 public constant REGISTRY_ADD_EXECUTOR_ROLE = keccak256(\\\"REGISTRY_ADD_EXECUTOR_ROLE\\\");\\n    bytes32 public constant REGISTRY_MANAGER_ROLE = keccak256(\\\"REGISTRY_MANAGER_ROLE\\\");\\n    */\\n    bytes32 public constant REGISTRY_ADD_EXECUTOR_ROLE = 0xc4e90f38eea8c4212a009ca7b8947943ba4d4a58d19b683417f65291d1cd9ed2;\\n    // WARN: Manager can censor all votes and the like happening in an org\\n    bytes32 public constant REGISTRY_MANAGER_ROLE = 0xf7a450ef335e1892cb42c8ca72e7242359d7711924b75db5717410da3f614aa3;\\n\\n    uint256 internal constant SCRIPT_START_LOCATION = 4;\\n\\n    string private constant ERROR_INEXISTENT_EXECUTOR = \\\"EVMREG_INEXISTENT_EXECUTOR\\\";\\n    string private constant ERROR_EXECUTOR_ENABLED = \\\"EVMREG_EXECUTOR_ENABLED\\\";\\n    string private constant ERROR_EXECUTOR_DISABLED = \\\"EVMREG_EXECUTOR_DISABLED\\\";\\n    string private constant ERROR_SCRIPT_LENGTH_TOO_SHORT = \\\"EVMREG_SCRIPT_LENGTH_TOO_SHORT\\\";\\n\\n    struct ExecutorEntry {\\n        IEVMScriptExecutor executor;\\n        bool enabled;\\n    }\\n\\n    uint256 private executorsNextIndex;\\n    mapping (uint256 => ExecutorEntry) public executors;\\n\\n    event EnableExecutor(uint256 indexed executorId, address indexed executorAddress);\\n    event DisableExecutor(uint256 indexed executorId, address indexed executorAddress);\\n\\n    modifier executorExists(uint256 _executorId) {\\n        require(_executorId > 0 && _executorId < executorsNextIndex, ERROR_INEXISTENT_EXECUTOR);\\n        _;\\n    }\\n\\n    /**\\n    * @notice Initialize the registry\\n    */\\n    function initialize() public onlyInit {\\n        initialized();\\n        // Create empty record to begin executor IDs at 1\\n        executorsNextIndex = 1;\\n    }\\n\\n    /**\\n    * @notice Add a new script executor with address `_executor` to the registry\\n    * @param _executor Address of the IEVMScriptExecutor that will be added to the registry\\n    * @return id Identifier of the executor in the registry\\n    */\\n    function addScriptExecutor(IEVMScriptExecutor _executor) external auth(REGISTRY_ADD_EXECUTOR_ROLE) returns (uint256 id) {\\n        uint256 executorId = executorsNextIndex++;\\n        executors[executorId] = ExecutorEntry(_executor, true);\\n        emit EnableExecutor(executorId, _executor);\\n        return executorId;\\n    }\\n\\n    /**\\n    * @notice Disable script executor with ID `_executorId`\\n    * @param _executorId Identifier of the executor in the registry\\n    */\\n    function disableScriptExecutor(uint256 _executorId)\\n        external\\n        authP(REGISTRY_MANAGER_ROLE, arr(_executorId))\\n    {\\n        // Note that we don't need to check for an executor's existence in this case, as only\\n        // existing executors can be enabled\\n        ExecutorEntry storage executorEntry = executors[_executorId];\\n        require(executorEntry.enabled, ERROR_EXECUTOR_DISABLED);\\n        executorEntry.enabled = false;\\n        emit DisableExecutor(_executorId, executorEntry.executor);\\n    }\\n\\n    /**\\n    * @notice Enable script executor with ID `_executorId`\\n    * @param _executorId Identifier of the executor in the registry\\n    */\\n    function enableScriptExecutor(uint256 _executorId)\\n        external\\n        authP(REGISTRY_MANAGER_ROLE, arr(_executorId))\\n        executorExists(_executorId)\\n    {\\n        ExecutorEntry storage executorEntry = executors[_executorId];\\n        require(!executorEntry.enabled, ERROR_EXECUTOR_ENABLED);\\n        executorEntry.enabled = true;\\n        emit EnableExecutor(_executorId, executorEntry.executor);\\n    }\\n\\n    /**\\n    * @dev Get the script executor that can execute a particular script based on its first 4 bytes\\n    * @param _script EVMScript being inspected\\n    */\\n    function getScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        require(_script.length >= SCRIPT_START_LOCATION, ERROR_SCRIPT_LENGTH_TOO_SHORT);\\n        uint256 id = _script.getSpecId();\\n\\n        // Note that we don't need to check for an executor's existence in this case, as only\\n        // existing executors can be enabled\\n        ExecutorEntry storage entry = executors[id];\\n        return entry.enabled ? entry.executor : IEVMScriptExecutor(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/evmscript/executors/CallsScript.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\n// Inspired by https://github.com/reverendus/tx-manager\\n\\nimport \\\"../ScriptHelpers.sol\\\";\\nimport \\\"./BaseEVMScriptExecutor.sol\\\";\\n\\n\\ncontract CallsScript is BaseEVMScriptExecutor {\\n    using ScriptHelpers for bytes;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant EXECUTOR_TYPE = keccak256(\\\"CALLS_SCRIPT\\\");\\n    */\\n    bytes32 internal constant EXECUTOR_TYPE = 0x2dc858a00f3e417be1394b87c07158e989ec681ce8cc68a9093680ac1a870302;\\n\\n    string private constant ERROR_BLACKLISTED_CALL = \\\"EVMCALLS_BLACKLISTED_CALL\\\";\\n    string private constant ERROR_INVALID_LENGTH = \\\"EVMCALLS_INVALID_LENGTH\\\";\\n\\n    /* This is manually crafted in assembly\\n    string private constant ERROR_CALL_REVERTED = \\\"EVMCALLS_CALL_REVERTED\\\";\\n    */\\n\\n    event LogScriptCall(address indexed sender, address indexed src, address indexed dst);\\n\\n    /**\\n    * @notice Executes a number of call scripts\\n    * @param _script [ specId (uint32) ] many calls with this structure ->\\n    *    [ to (address: 20 bytes) ] [ calldataLength (uint32: 4 bytes) ] [ calldata (calldataLength bytes) ]\\n    * @param _blacklist Addresses the script cannot call to, or will revert.\\n    * @return Always returns empty byte array\\n    */\\n    function execScript(bytes _script, bytes, address[] _blacklist) external isInitialized returns (bytes) {\\n        uint256 location = SCRIPT_START_LOCATION; // first 32 bits are spec id\\n        while (location < _script.length) {\\n            // Check there's at least address + calldataLength available\\n            require(_script.length - location >= 0x18, ERROR_INVALID_LENGTH);\\n\\n            address contractAddress = _script.addressAt(location);\\n            // Check address being called is not blacklist\\n            for (uint256 i = 0; i < _blacklist.length; i++) {\\n                require(contractAddress != _blacklist[i], ERROR_BLACKLISTED_CALL);\\n            }\\n\\n            // logged before execution to ensure event ordering in receipt\\n            // if failed entire execution is reverted regardless\\n            emit LogScriptCall(msg.sender, address(this), contractAddress);\\n\\n            uint256 calldataLength = uint256(_script.uint32At(location + 0x14));\\n            uint256 startOffset = location + 0x14 + 0x04;\\n            uint256 calldataStart = _script.locationOf(startOffset);\\n\\n            // compute end of script / next location\\n            location = startOffset + calldataLength;\\n            require(location <= _script.length, ERROR_INVALID_LENGTH);\\n\\n            bool success;\\n            assembly {\\n                success := call(\\n                    sub(gas, 5000),       // forward gas left - 5000\\n                    contractAddress,      // address\\n                    0,                    // no value\\n                    calldataStart,        // calldata start\\n                    calldataLength,       // calldata length\\n                    0,                    // don't write output\\n                    0                     // don't write output\\n                )\\n\\n                switch success\\n                case 0 {\\n                    let ptr := mload(0x40)\\n\\n                    switch returndatasize\\n                    case 0 {\\n                        // No error data was returned, revert with \\\"EVMCALLS_CALL_REVERTED\\\"\\n                        // See remix: doing a `revert(\\\"EVMCALLS_CALL_REVERTED\\\")` always results in\\n                        // this memory layout\\n                        mstore(ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\\n                        mstore(add(ptr, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\\n                        mstore(add(ptr, 0x24), 0x0000000000000000000000000000000000000000000000000000000000000016) // reason length\\n                        mstore(add(ptr, 0x44), 0x45564d43414c4c535f43414c4c5f524556455254454400000000000000000000) // reason\\n\\n                        revert(ptr, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\\n                    }\\n                    default {\\n                        // Forward the full error data\\n                        returndatacopy(ptr, 0, returndatasize)\\n                        revert(ptr, returndatasize)\\n                    }\\n                }\\n                default { }\\n            }\\n        }\\n        // No need to allocate empty bytes for the return as this can only be called via an delegatecall\\n        // (due to the isInitialized modifier)\\n    }\\n\\n    function executorType() external pure returns (bytes32) {\\n        return EXECUTOR_TYPE;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/acl/ACL.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"../apps/AragonApp.sol\\\";\\nimport \\\"../common/ConversionHelpers.sol\\\";\\nimport \\\"../common/TimeHelpers.sol\\\";\\nimport \\\"./ACLSyntaxSugar.sol\\\";\\nimport \\\"./IACL.sol\\\";\\nimport \\\"./IACLOracle.sol\\\";\\n\\n\\n/* solium-disable function-order */\\n// Allow public initialize() to be first\\ncontract ACL is IACL, TimeHelpers, AragonApp, ACLHelpers {\\n    /* Hardcoded constants to save gas\\n    bytes32 public constant CREATE_PERMISSIONS_ROLE = keccak256(\\\"CREATE_PERMISSIONS_ROLE\\\");\\n    */\\n    bytes32 public constant CREATE_PERMISSIONS_ROLE = 0x0b719b33c83b8e5d300c521cb8b54ae9bd933996a14bef8c2f4e0285d2d2400a;\\n\\n    enum Op { NONE, EQ, NEQ, GT, LT, GTE, LTE, RET, NOT, AND, OR, XOR, IF_ELSE } // op types\\n\\n    struct Param {\\n        uint8 id;\\n        uint8 op;\\n        uint240 value; // even though value is an uint240 it can store addresses\\n        // in the case of 32 byte hashes losing 2 bytes precision isn't a huge deal\\n        // op and id take less than 1 byte each so it can be kept in 1 sstore\\n    }\\n\\n    uint8 internal constant BLOCK_NUMBER_PARAM_ID = 200;\\n    uint8 internal constant TIMESTAMP_PARAM_ID    = 201;\\n    // 202 is unused\\n    uint8 internal constant ORACLE_PARAM_ID       = 203;\\n    uint8 internal constant LOGIC_OP_PARAM_ID     = 204;\\n    uint8 internal constant PARAM_VALUE_PARAM_ID  = 205;\\n    // TODO: Add execution times param type?\\n\\n    /* Hardcoded constant to save gas\\n    bytes32 public constant EMPTY_PARAM_HASH = keccak256(uint256(0));\\n    */\\n    bytes32 public constant EMPTY_PARAM_HASH = 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563;\\n    bytes32 public constant NO_PERMISSION = bytes32(0);\\n    address public constant ANY_ENTITY = address(-1);\\n    address public constant BURN_ENTITY = address(1); // address(0) is already used as \\\"no permission manager\\\"\\n\\n    string private constant ERROR_AUTH_INIT_KERNEL = \\\"ACL_AUTH_INIT_KERNEL\\\";\\n    string private constant ERROR_AUTH_NO_MANAGER = \\\"ACL_AUTH_NO_MANAGER\\\";\\n    string private constant ERROR_EXISTENT_MANAGER = \\\"ACL_EXISTENT_MANAGER\\\";\\n\\n    // Whether someone has a permission\\n    mapping (bytes32 => bytes32) internal permissions; // permissions hash => params hash\\n    mapping (bytes32 => Param[]) internal permissionParams; // params hash => params\\n\\n    // Who is the manager of a permission\\n    mapping (bytes32 => address) internal permissionManager;\\n\\n    event SetPermission(address indexed entity, address indexed app, bytes32 indexed role, bool allowed);\\n    event SetPermissionParams(address indexed entity, address indexed app, bytes32 indexed role, bytes32 paramsHash);\\n    event ChangePermissionManager(address indexed app, bytes32 indexed role, address indexed manager);\\n\\n    modifier onlyPermissionManager(address _app, bytes32 _role) {\\n        require(msg.sender == getPermissionManager(_app, _role), ERROR_AUTH_NO_MANAGER);\\n        _;\\n    }\\n\\n    modifier noPermissionManager(address _app, bytes32 _role) {\\n        // only allow permission creation (or re-creation) when there is no manager\\n        require(getPermissionManager(_app, _role) == address(0), ERROR_EXISTENT_MANAGER);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\\n    * @notice Initialize an ACL instance and set `_permissionsCreator` as the entity that can create other permissions\\n    * @param _permissionsCreator Entity that will be given permission over createPermission\\n    */\\n    function initialize(address _permissionsCreator) public onlyInit {\\n        initialized();\\n        require(msg.sender == address(kernel()), ERROR_AUTH_INIT_KERNEL);\\n\\n        _createPermission(_permissionsCreator, this, CREATE_PERMISSIONS_ROLE, _permissionsCreator);\\n    }\\n\\n    /**\\n    * @dev Creates a permission that wasn't previously set and managed.\\n    *      If a created permission is removed it is possible to reset it with createPermission.\\n    *      This is the **ONLY** way to create permissions and set managers to permissions that don't\\n    *      have a manager.\\n    *      In terms of the ACL being initialized, this function implicitly protects all the other\\n    *      state-changing external functions, as they all require the sender to be a manager.\\n    * @notice Create a new permission granting `_entity` the ability to perform actions requiring `_role` on `_app`, setting `_manager` as the permission's manager\\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\\n    * @param _role Identifier for the group of actions in app given access to perform\\n    * @param _manager Address of the entity that will be able to grant and revoke the permission further.\\n    */\\n    function createPermission(address _entity, address _app, bytes32 _role, address _manager)\\n        external\\n        auth(CREATE_PERMISSIONS_ROLE)\\n        noPermissionManager(_app, _role)\\n    {\\n        _createPermission(_entity, _app, _role, _manager);\\n    }\\n\\n    /**\\n    * @dev Grants permission if allowed. This requires `msg.sender` to be the permission manager\\n    * @notice Grant `_entity` the ability to perform actions requiring `_role` on `_app`\\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\\n    * @param _role Identifier for the group of actions in app given access to perform\\n    */\\n    function grantPermission(address _entity, address _app, bytes32 _role)\\n        external\\n    {\\n        grantPermissionP(_entity, _app, _role, new uint256[](0));\\n    }\\n\\n    /**\\n    * @dev Grants a permission with parameters if allowed. This requires `msg.sender` to be the permission manager\\n    * @notice Grant `_entity` the ability to perform actions requiring `_role` on `_app`\\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\\n    * @param _role Identifier for the group of actions in app given access to perform\\n    * @param _params Permission parameters\\n    */\\n    function grantPermissionP(address _entity, address _app, bytes32 _role, uint256[] _params)\\n        public\\n        onlyPermissionManager(_app, _role)\\n    {\\n        bytes32 paramsHash = _params.length > 0 ? _saveParams(_params) : EMPTY_PARAM_HASH;\\n        _setPermission(_entity, _app, _role, paramsHash);\\n    }\\n\\n    /**\\n    * @dev Revokes permission if allowed. This requires `msg.sender` to be the the permission manager\\n    * @notice Revoke from `_entity` the ability to perform actions requiring `_role` on `_app`\\n    * @param _entity Address of the whitelisted entity to revoke access from\\n    * @param _app Address of the app in which the role will be revoked\\n    * @param _role Identifier for the group of actions in app being revoked\\n    */\\n    function revokePermission(address _entity, address _app, bytes32 _role)\\n        external\\n        onlyPermissionManager(_app, _role)\\n    {\\n        _setPermission(_entity, _app, _role, NO_PERMISSION);\\n    }\\n\\n    /**\\n    * @notice Set `_newManager` as the manager of `_role` in `_app`\\n    * @param _newManager Address for the new manager\\n    * @param _app Address of the app in which the permission management is being transferred\\n    * @param _role Identifier for the group of actions being transferred\\n    */\\n    function setPermissionManager(address _newManager, address _app, bytes32 _role)\\n        external\\n        onlyPermissionManager(_app, _role)\\n    {\\n        _setPermissionManager(_newManager, _app, _role);\\n    }\\n\\n    /**\\n    * @notice Remove the manager of `_role` in `_app`\\n    * @param _app Address of the app in which the permission is being unmanaged\\n    * @param _role Identifier for the group of actions being unmanaged\\n    */\\n    function removePermissionManager(address _app, bytes32 _role)\\n        external\\n        onlyPermissionManager(_app, _role)\\n    {\\n        _setPermissionManager(address(0), _app, _role);\\n    }\\n\\n    /**\\n    * @notice Burn non-existent `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)\\n    * @param _app Address of the app in which the permission is being burned\\n    * @param _role Identifier for the group of actions being burned\\n    */\\n    function createBurnedPermission(address _app, bytes32 _role)\\n        external\\n        auth(CREATE_PERMISSIONS_ROLE)\\n        noPermissionManager(_app, _role)\\n    {\\n        _setPermissionManager(BURN_ENTITY, _app, _role);\\n    }\\n\\n    /**\\n    * @notice Burn `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)\\n    * @param _app Address of the app in which the permission is being burned\\n    * @param _role Identifier for the group of actions being burned\\n    */\\n    function burnPermissionManager(address _app, bytes32 _role)\\n        external\\n        onlyPermissionManager(_app, _role)\\n    {\\n        _setPermissionManager(BURN_ENTITY, _app, _role);\\n    }\\n\\n    /**\\n     * @notice Get parameters for permission array length\\n     * @param _entity Address of the whitelisted entity that will be able to perform the role\\n     * @param _app Address of the app\\n     * @param _role Identifier for a group of actions in app\\n     * @return Length of the array\\n     */\\n    function getPermissionParamsLength(address _entity, address _app, bytes32 _role) external view returns (uint) {\\n        return permissionParams[permissions[permissionHash(_entity, _app, _role)]].length;\\n    }\\n\\n    /**\\n    * @notice Get parameter for permission\\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\\n    * @param _app Address of the app\\n    * @param _role Identifier for a group of actions in app\\n    * @param _index Index of parameter in the array\\n    * @return Parameter (id, op, value)\\n    */\\n    function getPermissionParam(address _entity, address _app, bytes32 _role, uint _index)\\n        external\\n        view\\n        returns (uint8, uint8, uint240)\\n    {\\n        Param storage param = permissionParams[permissions[permissionHash(_entity, _app, _role)]][_index];\\n        return (param.id, param.op, param.value);\\n    }\\n\\n    /**\\n    * @dev Get manager for permission\\n    * @param _app Address of the app\\n    * @param _role Identifier for a group of actions in app\\n    * @return address of the manager for the permission\\n    */\\n    function getPermissionManager(address _app, bytes32 _role) public view returns (address) {\\n        return permissionManager[roleHash(_app, _role)];\\n    }\\n\\n    /**\\n    * @dev Function called by apps to check ACL on kernel or to check permission statu\\n    * @param _who Sender of the original call\\n    * @param _where Address of the app\\n    * @param _where Identifier for a group of actions in app\\n    * @param _how Permission parameters\\n    * @return boolean indicating whether the ACL allows the role or not\\n    */\\n    function hasPermission(address _who, address _where, bytes32 _what, bytes memory _how) public view returns (bool) {\\n        return hasPermission(_who, _where, _what, ConversionHelpers.dangerouslyCastBytesToUintArray(_how));\\n    }\\n\\n    function hasPermission(address _who, address _where, bytes32 _what, uint256[] memory _how) public view returns (bool) {\\n        bytes32 whoParams = permissions[permissionHash(_who, _where, _what)];\\n        if (whoParams != NO_PERMISSION && evalParams(whoParams, _who, _where, _what, _how)) {\\n            return true;\\n        }\\n\\n        bytes32 anyParams = permissions[permissionHash(ANY_ENTITY, _where, _what)];\\n        if (anyParams != NO_PERMISSION && evalParams(anyParams, ANY_ENTITY, _where, _what, _how)) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function hasPermission(address _who, address _where, bytes32 _what) public view returns (bool) {\\n        uint256[] memory empty = new uint256[](0);\\n        return hasPermission(_who, _where, _what, empty);\\n    }\\n\\n    function evalParams(\\n        bytes32 _paramsHash,\\n        address _who,\\n        address _where,\\n        bytes32 _what,\\n        uint256[] _how\\n    ) public view returns (bool)\\n    {\\n        if (_paramsHash == EMPTY_PARAM_HASH) {\\n            return true;\\n        }\\n\\n        return _evalParam(_paramsHash, 0, _who, _where, _what, _how);\\n    }\\n\\n    /**\\n    * @dev Internal createPermission for access inside the kernel (on instantiation)\\n    */\\n    function _createPermission(address _entity, address _app, bytes32 _role, address _manager) internal {\\n        _setPermission(_entity, _app, _role, EMPTY_PARAM_HASH);\\n        _setPermissionManager(_manager, _app, _role);\\n    }\\n\\n    /**\\n    * @dev Internal function called to actually save the permission\\n    */\\n    function _setPermission(address _entity, address _app, bytes32 _role, bytes32 _paramsHash) internal {\\n        permissions[permissionHash(_entity, _app, _role)] = _paramsHash;\\n        bool entityHasPermission = _paramsHash != NO_PERMISSION;\\n        bool permissionHasParams = entityHasPermission && _paramsHash != EMPTY_PARAM_HASH;\\n\\n        emit SetPermission(_entity, _app, _role, entityHasPermission);\\n        if (permissionHasParams) {\\n            emit SetPermissionParams(_entity, _app, _role, _paramsHash);\\n        }\\n    }\\n\\n    function _saveParams(uint256[] _encodedParams) internal returns (bytes32) {\\n        bytes32 paramHash = keccak256(abi.encodePacked(_encodedParams));\\n        Param[] storage params = permissionParams[paramHash];\\n\\n        if (params.length == 0) { // params not saved before\\n            for (uint256 i = 0; i < _encodedParams.length; i++) {\\n                uint256 encodedParam = _encodedParams[i];\\n                Param memory param = Param(decodeParamId(encodedParam), decodeParamOp(encodedParam), uint240(encodedParam));\\n                params.push(param);\\n            }\\n        }\\n\\n        return paramHash;\\n    }\\n\\n    function _evalParam(\\n        bytes32 _paramsHash,\\n        uint32 _paramId,\\n        address _who,\\n        address _where,\\n        bytes32 _what,\\n        uint256[] _how\\n    ) internal view returns (bool)\\n    {\\n        if (_paramId >= permissionParams[_paramsHash].length) {\\n            return false; // out of bounds\\n        }\\n\\n        Param memory param = permissionParams[_paramsHash][_paramId];\\n\\n        if (param.id == LOGIC_OP_PARAM_ID) {\\n            return _evalLogic(param, _paramsHash, _who, _where, _what, _how);\\n        }\\n\\n        uint256 value;\\n        uint256 comparedTo = uint256(param.value);\\n\\n        // get value\\n        if (param.id == ORACLE_PARAM_ID) {\\n            value = checkOracle(IACLOracle(param.value), _who, _where, _what, _how) ? 1 : 0;\\n            comparedTo = 1;\\n        } else if (param.id == BLOCK_NUMBER_PARAM_ID) {\\n            value = getBlockNumber();\\n        } else if (param.id == TIMESTAMP_PARAM_ID) {\\n            value = getTimestamp();\\n        } else if (param.id == PARAM_VALUE_PARAM_ID) {\\n            value = uint256(param.value);\\n        } else {\\n            if (param.id >= _how.length) {\\n                return false;\\n            }\\n            value = uint256(uint240(_how[param.id])); // force lost precision\\n        }\\n\\n        if (Op(param.op) == Op.RET) {\\n            return uint256(value) > 0;\\n        }\\n\\n        return compare(value, Op(param.op), comparedTo);\\n    }\\n\\n    function _evalLogic(Param _param, bytes32 _paramsHash, address _who, address _where, bytes32 _what, uint256[] _how)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (Op(_param.op) == Op.IF_ELSE) {\\n            uint32 conditionParam;\\n            uint32 successParam;\\n            uint32 failureParam;\\n\\n            (conditionParam, successParam, failureParam) = decodeParamsList(uint256(_param.value));\\n            bool result = _evalParam(_paramsHash, conditionParam, _who, _where, _what, _how);\\n\\n            return _evalParam(_paramsHash, result ? successParam : failureParam, _who, _where, _what, _how);\\n        }\\n\\n        uint32 param1;\\n        uint32 param2;\\n\\n        (param1, param2,) = decodeParamsList(uint256(_param.value));\\n        bool r1 = _evalParam(_paramsHash, param1, _who, _where, _what, _how);\\n\\n        if (Op(_param.op) == Op.NOT) {\\n            return !r1;\\n        }\\n\\n        if (r1 && Op(_param.op) == Op.OR) {\\n            return true;\\n        }\\n\\n        if (!r1 && Op(_param.op) == Op.AND) {\\n            return false;\\n        }\\n\\n        bool r2 = _evalParam(_paramsHash, param2, _who, _where, _what, _how);\\n\\n        if (Op(_param.op) == Op.XOR) {\\n            return r1 != r2;\\n        }\\n\\n        return r2; // both or and and depend on result of r2 after checks\\n    }\\n\\n    function compare(uint256 _a, Op _op, uint256 _b) internal pure returns (bool) {\\n        if (_op == Op.EQ)  return _a == _b;                              // solium-disable-line lbrace\\n        if (_op == Op.NEQ) return _a != _b;                              // solium-disable-line lbrace\\n        if (_op == Op.GT)  return _a > _b;                               // solium-disable-line lbrace\\n        if (_op == Op.LT)  return _a < _b;                               // solium-disable-line lbrace\\n        if (_op == Op.GTE) return _a >= _b;                              // solium-disable-line lbrace\\n        if (_op == Op.LTE) return _a <= _b;                              // solium-disable-line lbrace\\n        return false;\\n    }\\n\\n    function checkOracle(IACLOracle _oracleAddr, address _who, address _where, bytes32 _what, uint256[] _how) internal view returns (bool) {\\n        bytes4 sig = _oracleAddr.canPerform.selector;\\n\\n        // a raw call is required so we can return false if the call reverts, rather than reverting\\n        bytes memory checkCalldata = abi.encodeWithSelector(sig, _who, _where, _what, _how);\\n\\n        bool ok;\\n        assembly {\\n            // send all available gas; if the oracle eats up all the gas, we will eventually revert\\n            // note that we are currently guaranteed to still have some gas after the call from\\n            // EIP-150's 63/64 gas forward rule\\n            ok := staticcall(gas, _oracleAddr, add(checkCalldata, 0x20), mload(checkCalldata), 0, 0)\\n        }\\n\\n        if (!ok) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := returndatasize }\\n        if (size != 32) {\\n            return false;\\n        }\\n\\n        bool result;\\n        assembly {\\n            let ptr := mload(0x40)       // get next free memory ptr\\n            returndatacopy(ptr, 0, size) // copy return from above `staticcall`\\n            result := mload(ptr)         // read data at ptr and set it to result\\n            mstore(ptr, 0)               // set pointer memory to 0 so it still is the next free ptr\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n    * @dev Internal function that sets management\\n    */\\n    function _setPermissionManager(address _newManager, address _app, bytes32 _role) internal {\\n        permissionManager[roleHash(_app, _role)] = _newManager;\\n        emit ChangePermissionManager(_app, _role, _newManager);\\n    }\\n\\n    function roleHash(address _where, bytes32 _what) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"ROLE\\\", _where, _what));\\n    }\\n\\n    function permissionHash(address _who, address _where, bytes32 _what) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"PERMISSION\\\", _who, _where, _what));\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/evmscript/ScriptHelpers.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\nlibrary ScriptHelpers {\\n    function getSpecId(bytes _script) internal pure returns (uint32) {\\n        return uint32At(_script, 0);\\n    }\\n\\n    function uint256At(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mload(add(_data, add(0x20, _location)))\\n        }\\n    }\\n\\n    function addressAt(bytes _data, uint256 _location) internal pure returns (address result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000),\\n            0x1000000000000000000000000)\\n        }\\n    }\\n\\n    function uint32At(bytes _data, uint256 _location) internal pure returns (uint32 result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000),\\n            0x100000000000000000000000000000000000000000000000000000000)\\n        }\\n    }\\n\\n    function locationOf(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := add(_data, add(0x20, _location))\\n        }\\n    }\\n\\n    function toBytes(bytes4 _sig) internal pure returns (bytes) {\\n        bytes memory payload = new bytes(4);\\n        assembly { mstore(add(payload, 0x20), _sig) }\\n        return payload;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/evmscript/executors/BaseEVMScriptExecutor.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../../common/Autopetrified.sol\\\";\\nimport \\\"../IEVMScriptExecutor.sol\\\";\\n\\n\\ncontract BaseEVMScriptExecutor is IEVMScriptExecutor, Autopetrified {\\n    uint256 internal constant SCRIPT_START_LOCATION = 4;\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/acl/IACLOracle.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IACLOracle {\\n    function canPerform(address who, address where, bytes32 what, uint256[] how) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/apm/APMRegistry.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"../lib/ens/AbstractENS.sol\\\";\\nimport \\\"../ens/ENSSubdomainRegistrar.sol\\\";\\nimport \\\"../factory/AppProxyFactory.sol\\\";\\nimport \\\"../apps/AragonApp.sol\\\";\\nimport \\\"../acl/ACL.sol\\\";\\nimport \\\"./Repo.sol\\\";\\n\\n\\ncontract APMInternalAppNames {\\n    string internal constant APM_APP_NAME = \\\"apm-registry\\\";\\n    string internal constant REPO_APP_NAME = \\\"apm-repo\\\";\\n    string internal constant ENS_SUB_APP_NAME = \\\"apm-enssub\\\";\\n}\\n\\n\\ncontract APMRegistry is AragonApp, AppProxyFactory, APMInternalAppNames {\\n    /* Hardcoded constants to save gas\\n    bytes32 public constant CREATE_REPO_ROLE = keccak256(\\\"CREATE_REPO_ROLE\\\");\\n    */\\n    bytes32 public constant CREATE_REPO_ROLE = 0x2a9494d64846c9fdbf0158785aa330d8bc9caf45af27fa0e8898eb4d55adcea6;\\n\\n    string private constant ERROR_INIT_PERMISSIONS = \\\"APMREG_INIT_PERMISSIONS\\\";\\n    string private constant ERROR_EMPTY_NAME = \\\"APMREG_EMPTY_NAME\\\";\\n\\n    AbstractENS public ens;\\n    ENSSubdomainRegistrar public registrar;\\n\\n    event NewRepo(bytes32 id, string name, address repo);\\n\\n    /**\\n    * NEEDS CREATE_NAME_ROLE and POINT_ROOTNODE_ROLE permissions on registrar\\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized\\n    * @notice Initialize this APMRegistry instance and set `_registrar` as the ENS subdomain registrar\\n    * @param _registrar ENSSubdomainRegistrar instance that holds registry root node ownership\\n    */\\n    function initialize(ENSSubdomainRegistrar _registrar) public onlyInit {\\n        initialized();\\n\\n        registrar = _registrar;\\n        ens = registrar.ens();\\n\\n        registrar.pointRootNode(this);\\n\\n        // Check APM has all permissions it needss\\n        ACL acl = ACL(kernel().acl());\\n        require(acl.hasPermission(this, registrar, registrar.CREATE_NAME_ROLE()), ERROR_INIT_PERMISSIONS);\\n        require(acl.hasPermission(this, acl, acl.CREATE_PERMISSIONS_ROLE()), ERROR_INIT_PERMISSIONS);\\n    }\\n\\n    /**\\n    * @notice Create new repo in registry with `_name`\\n    * @param _name Repo name, must be ununsed\\n    * @param _dev Address that will be given permission to create versions\\n    */\\n    function newRepo(string _name, address _dev) public auth(CREATE_REPO_ROLE) returns (Repo) {\\n        return _newRepo(_name, _dev);\\n    }\\n\\n    /**\\n    * @notice Create new repo in registry with `_name` and publish a first version with contract `_contractAddress` and content `@fromHex(_contentURI)`\\n    * @param _name Repo name\\n    * @param _dev Address that will be given permission to create versions\\n    * @param _initialSemanticVersion Semantic version for new repo version\\n    * @param _contractAddress address for smart contract logic for version (if set to 0, it uses last versions' contractAddress)\\n    * @param _contentURI External URI for fetching new version's content\\n    */\\n    function newRepoWithVersion(\\n        string _name,\\n        address _dev,\\n        uint16[3] _initialSemanticVersion,\\n        address _contractAddress,\\n        bytes _contentURI\\n    ) public auth(CREATE_REPO_ROLE) returns (Repo)\\n    {\\n        Repo repo = _newRepo(_name, this); // need to have permissions to create version\\n        repo.newVersion(_initialSemanticVersion, _contractAddress, _contentURI);\\n\\n        // Give permissions to _dev\\n        ACL acl = ACL(kernel().acl());\\n        acl.revokePermission(this, repo, repo.CREATE_VERSION_ROLE());\\n        acl.grantPermission(_dev, repo, repo.CREATE_VERSION_ROLE());\\n        acl.setPermissionManager(_dev, repo, repo.CREATE_VERSION_ROLE());\\n        return repo;\\n    }\\n\\n    function _newRepo(string _name, address _dev) internal returns (Repo) {\\n        require(bytes(_name).length > 0, ERROR_EMPTY_NAME);\\n\\n        Repo repo = newClonedRepo();\\n\\n        ACL(kernel().acl()).createPermission(_dev, repo, repo.CREATE_VERSION_ROLE(), _dev);\\n\\n        // Creates [name] subdomain in the rootNode and sets registry as resolver\\n        // This will fail if repo name already exists\\n        bytes32 node = registrar.createNameAndPoint(keccak256(abi.encodePacked(_name)), repo);\\n\\n        emit NewRepo(node, _name, repo);\\n\\n        return repo;\\n    }\\n\\n    function newClonedRepo() internal returns (Repo repo) {\\n        repo = Repo(newAppProxy(kernel(), repoAppId()));\\n        repo.initialize();\\n    }\\n\\n    function repoAppId() internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(registrar.rootNode(), keccak256(abi.encodePacked(REPO_APP_NAME))));\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/lib/ens/AbstractENS.sol\": {\r\n      \"content\": \"// See https://github.com/ensdomains/ens/blob/7e377df83f/contracts/AbstractENS.sol\\n\\npragma solidity ^0.4.15;\\n\\n\\ninterface AbstractENS {\\n    function owner(bytes32 _node) public constant returns (address);\\n    function resolver(bytes32 _node) public constant returns (address);\\n    function ttl(bytes32 _node) public constant returns (uint64);\\n    function setOwner(bytes32 _node, address _owner) public;\\n    function setSubnodeOwner(bytes32 _node, bytes32 label, address _owner) public;\\n    function setResolver(bytes32 _node, address _resolver) public;\\n    function setTTL(bytes32 _node, uint64 _ttl) public;\\n\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed _node, bytes32 indexed _label, address _owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed _node, address _owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed _node, address _resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed _node, uint64 _ttl);\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/ens/ENSSubdomainRegistrar.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"../lib/ens/AbstractENS.sol\\\";\\nimport \\\"../lib/ens/PublicResolver.sol\\\";\\nimport \\\"./ENSConstants.sol\\\";\\n\\nimport \\\"../apps/AragonApp.sol\\\";\\n\\n\\n/* solium-disable function-order */\\n// Allow public initialize() to be first\\ncontract ENSSubdomainRegistrar is AragonApp, ENSConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 public constant CREATE_NAME_ROLE = keccak256(\\\"CREATE_NAME_ROLE\\\");\\n    bytes32 public constant DELETE_NAME_ROLE = keccak256(\\\"DELETE_NAME_ROLE\\\");\\n    bytes32 public constant POINT_ROOTNODE_ROLE = keccak256(\\\"POINT_ROOTNODE_ROLE\\\");\\n    */\\n    bytes32 public constant CREATE_NAME_ROLE = 0xf86bc2abe0919ab91ef714b2bec7c148d94f61fdb069b91a6cfe9ecdee1799ba;\\n    bytes32 public constant DELETE_NAME_ROLE = 0x03d74c8724218ad4a99859bcb2d846d39999449fd18013dd8d69096627e68622;\\n    bytes32 public constant POINT_ROOTNODE_ROLE = 0x9ecd0e7bddb2e241c41b595a436c4ea4fd33c9fa0caa8056acf084fc3aa3bfbe;\\n\\n    string private constant ERROR_NO_NODE_OWNERSHIP = \\\"ENSSUB_NO_NODE_OWNERSHIP\\\";\\n    string private constant ERROR_NAME_EXISTS = \\\"ENSSUB_NAME_EXISTS\\\";\\n    string private constant ERROR_NAME_DOESNT_EXIST = \\\"ENSSUB_DOESNT_EXIST\\\";\\n\\n    AbstractENS public ens;\\n    bytes32 public rootNode;\\n\\n    event NewName(bytes32 indexed node, bytes32 indexed label);\\n    event DeleteName(bytes32 indexed node, bytes32 indexed label);\\n\\n    /**\\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized. This contract must be the owner of the `_rootNode` node so that it can create subdomains.\\n    * @notice Initialize this ENSSubdomainRegistrar instance with `_ens` as the root ENS registry and `_rootNode` as the node to allocate subdomains under\\n    * @param _ens Address of ENS registry\\n    * @param _rootNode Node to allocate subdomains under\\n    */\\n    function initialize(AbstractENS _ens, bytes32 _rootNode) public onlyInit {\\n        initialized();\\n\\n        // We need ownership to create subnodes\\n        require(_ens.owner(_rootNode) == address(this), ERROR_NO_NODE_OWNERSHIP);\\n\\n        ens = _ens;\\n        rootNode = _rootNode;\\n    }\\n\\n    /**\\n    * @notice Create a new ENS subdomain record for `_label` and assign ownership to `_owner`\\n    * @param _label Label of new subdomain\\n    * @param _owner Owner of new subdomain\\n    * @return node Hash of created node\\n    */\\n    function createName(bytes32 _label, address _owner) external auth(CREATE_NAME_ROLE) returns (bytes32 node) {\\n        return _createName(_label, _owner);\\n    }\\n\\n    /**\\n    * @notice Create a new ENS subdomain record for `_label` that resolves to `_target` and is owned by this ENSSubdomainRegistrar\\n    * @param _label Label of new subdomain\\n    * @param _target Ethereum address this new subdomain label will point to\\n    * @return node Hash of created node\\n    */\\n    function createNameAndPoint(bytes32 _label, address _target) external auth(CREATE_NAME_ROLE) returns (bytes32 node) {\\n        node = _createName(_label, this);\\n        _pointToResolverAndResolve(node, _target);\\n    }\\n\\n    /**\\n    * @notice Deregister ENS subdomain record for `_label`\\n    * @param _label Label of subdomain to deregister\\n    */\\n    function deleteName(bytes32 _label) external auth(DELETE_NAME_ROLE) {\\n        bytes32 node = getNodeForLabel(_label);\\n\\n        address currentOwner = ens.owner(node);\\n\\n        require(currentOwner != address(0), ERROR_NAME_DOESNT_EXIST); // fail if deleting unset name\\n\\n        if (currentOwner != address(this)) { // needs to reclaim ownership so it can set resolver\\n            ens.setSubnodeOwner(rootNode, _label, this);\\n        }\\n\\n        ens.setResolver(node, address(0)); // remove resolver so it ends resolving\\n        ens.setOwner(node, address(0));\\n\\n        emit DeleteName(node, _label);\\n    }\\n\\n    /**\\n    * @notice Resolve this ENSSubdomainRegistrar's root node to `_target`\\n    * @param _target Ethereum address root node will point to\\n    */\\n    function pointRootNode(address _target) external auth(POINT_ROOTNODE_ROLE) {\\n        _pointToResolverAndResolve(rootNode, _target);\\n    }\\n\\n    function _createName(bytes32 _label, address _owner) internal returns (bytes32 node) {\\n        node = getNodeForLabel(_label);\\n        require(ens.owner(node) == address(0), ERROR_NAME_EXISTS); // avoid name reset\\n\\n        ens.setSubnodeOwner(rootNode, _label, _owner);\\n\\n        emit NewName(node, _label);\\n\\n        return node;\\n    }\\n\\n    function _pointToResolverAndResolve(bytes32 _node, address _target) internal {\\n        address publicResolver = getAddr(PUBLIC_RESOLVER_NODE);\\n        ens.setResolver(_node, publicResolver);\\n\\n        PublicResolver(publicResolver).setAddr(_node, _target);\\n    }\\n\\n    function getAddr(bytes32 node) internal view returns (address) {\\n        address resolver = ens.resolver(node);\\n        return PublicResolver(resolver).addr(node);\\n    }\\n\\n    function getNodeForLabel(bytes32 _label) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(rootNode, _label));\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/apm/Repo.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"../apps/AragonApp.sol\\\";\\n\\n\\n/* solium-disable function-order */\\n// Allow public initialize() to be first\\ncontract Repo is AragonApp {\\n    /* Hardcoded constants to save gas\\n    bytes32 public constant CREATE_VERSION_ROLE = keccak256(\\\"CREATE_VERSION_ROLE\\\");\\n    */\\n    bytes32 public constant CREATE_VERSION_ROLE = 0x1f56cfecd3595a2e6cc1a7e6cb0b20df84cdbd92eff2fee554e70e4e45a9a7d8;\\n\\n    string private constant ERROR_INVALID_BUMP = \\\"REPO_INVALID_BUMP\\\";\\n    string private constant ERROR_INVALID_VERSION = \\\"REPO_INVALID_VERSION\\\";\\n    string private constant ERROR_INEXISTENT_VERSION = \\\"REPO_INEXISTENT_VERSION\\\";\\n\\n    struct Version {\\n        uint16[3] semanticVersion;\\n        address contractAddress;\\n        bytes contentURI;\\n    }\\n\\n    uint256 internal versionsNextIndex;\\n    mapping (uint256 => Version) internal versions;\\n    mapping (bytes32 => uint256) internal versionIdForSemantic;\\n    mapping (address => uint256) internal latestVersionIdForContract;\\n\\n    event NewVersion(uint256 versionId, uint16[3] semanticVersion);\\n\\n    /**\\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\\n    * @notice Initialize this Repo\\n    */\\n    function initialize() public onlyInit {\\n        initialized();\\n        versionsNextIndex = 1;\\n    }\\n\\n    /**\\n    * @notice Create new version with contract `_contractAddress` and content `@fromHex(_contentURI)`\\n    * @param _newSemanticVersion Semantic version for new repo version\\n    * @param _contractAddress address for smart contract logic for version (if set to 0, it uses last versions' contractAddress)\\n    * @param _contentURI External URI for fetching new version's content\\n    */\\n    function newVersion(\\n        uint16[3] _newSemanticVersion,\\n        address _contractAddress,\\n        bytes _contentURI\\n    ) public auth(CREATE_VERSION_ROLE)\\n    {\\n        address contractAddress = _contractAddress;\\n        uint256 lastVersionIndex = versionsNextIndex - 1;\\n\\n        uint16[3] memory lastSematicVersion;\\n\\n        if (lastVersionIndex > 0) {\\n            Version storage lastVersion = versions[lastVersionIndex];\\n            lastSematicVersion = lastVersion.semanticVersion;\\n\\n            if (contractAddress == address(0)) {\\n                contractAddress = lastVersion.contractAddress;\\n            }\\n            // Only allows smart contract change on major version bumps\\n            require(\\n                lastVersion.contractAddress == contractAddress || _newSemanticVersion[0] > lastVersion.semanticVersion[0],\\n                ERROR_INVALID_VERSION\\n            );\\n        }\\n\\n        require(isValidBump(lastSematicVersion, _newSemanticVersion), ERROR_INVALID_BUMP);\\n\\n        uint256 versionId = versionsNextIndex++;\\n        versions[versionId] = Version(_newSemanticVersion, contractAddress, _contentURI);\\n        versionIdForSemantic[semanticVersionHash(_newSemanticVersion)] = versionId;\\n        latestVersionIdForContract[contractAddress] = versionId;\\n\\n        emit NewVersion(versionId, _newSemanticVersion);\\n    }\\n\\n    function getLatest() public view returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI) {\\n        return getByVersionId(versionsNextIndex - 1);\\n    }\\n\\n    function getLatestForContractAddress(address _contractAddress)\\n        public\\n        view\\n        returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI)\\n    {\\n        return getByVersionId(latestVersionIdForContract[_contractAddress]);\\n    }\\n\\n    function getBySemanticVersion(uint16[3] _semanticVersion)\\n        public\\n        view\\n        returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI)\\n    {\\n        return getByVersionId(versionIdForSemantic[semanticVersionHash(_semanticVersion)]);\\n    }\\n\\n    function getByVersionId(uint _versionId) public view returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI) {\\n        require(_versionId > 0 && _versionId < versionsNextIndex, ERROR_INEXISTENT_VERSION);\\n        Version storage version = versions[_versionId];\\n        return (version.semanticVersion, version.contractAddress, version.contentURI);\\n    }\\n\\n    function getVersionsCount() public view returns (uint256) {\\n        return versionsNextIndex - 1;\\n    }\\n\\n    function isValidBump(uint16[3] _oldVersion, uint16[3] _newVersion) public pure returns (bool) {\\n        bool hasBumped;\\n        uint i = 0;\\n        while (i < 3) {\\n            if (hasBumped) {\\n                if (_newVersion[i] != 0) {\\n                    return false;\\n                }\\n            } else if (_newVersion[i] != _oldVersion[i]) {\\n                if (_oldVersion[i] > _newVersion[i] || _newVersion[i] - _oldVersion[i] != 1) {\\n                    return false;\\n                }\\n                hasBumped = true;\\n            }\\n            i++;\\n        }\\n        return hasBumped;\\n    }\\n\\n    function semanticVersionHash(uint16[3] version) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(version[0], version[1], version[2]));\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/lib/ens/PublicResolver.sol\": {\r\n      \"content\": \"// See https://github.com/ensdomains/ens/blob/7e377df83f/contracts/PublicResolver.sol\\n\\npragma solidity ^0.4.0;\\n\\nimport \\\"./AbstractENS.sol\\\";\\n\\n/**\\n * A simple resolver anyone can use; only allows the owner of a node to set its\\n * address.\\n */\\ncontract PublicResolver {\\n    bytes4 constant INTERFACE_META_ID = 0x01ffc9a7;\\n    bytes4 constant ADDR_INTERFACE_ID = 0x3b3b57de;\\n    bytes4 constant CONTENT_INTERFACE_ID = 0xd8389dc5;\\n    bytes4 constant NAME_INTERFACE_ID = 0x691f3431;\\n    bytes4 constant ABI_INTERFACE_ID = 0x2203ab56;\\n    bytes4 constant PUBKEY_INTERFACE_ID = 0xc8690233;\\n    bytes4 constant TEXT_INTERFACE_ID = 0x59d1d43c;\\n\\n    event AddrChanged(bytes32 indexed node, address a);\\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\\n    event NameChanged(bytes32 indexed node, string name);\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\\n\\n    struct PublicKey {\\n        bytes32 x;\\n        bytes32 y;\\n    }\\n\\n    struct Record {\\n        address addr;\\n        bytes32 content;\\n        string name;\\n        PublicKey pubkey;\\n        mapping(string=>string) text;\\n        mapping(uint256=>bytes) abis;\\n    }\\n\\n    AbstractENS ens;\\n    mapping(bytes32=>Record) records;\\n\\n    modifier only_owner(bytes32 node) {\\n        if (ens.owner(node) != msg.sender) throw;\\n        _;\\n    }\\n\\n    /**\\n     * Constructor.\\n     * @param ensAddr The ENS registrar contract.\\n     */\\n    function PublicResolver(AbstractENS ensAddr) public {\\n        ens = ensAddr;\\n    }\\n\\n    /**\\n     * Returns true if the resolver implements the interface specified by the provided hash.\\n     * @param interfaceID The ID of the interface to check for.\\n     * @return True if the contract implements the requested interface.\\n     */\\n    function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n        return interfaceID == ADDR_INTERFACE_ID ||\\n               interfaceID == CONTENT_INTERFACE_ID ||\\n               interfaceID == NAME_INTERFACE_ID ||\\n               interfaceID == ABI_INTERFACE_ID ||\\n               interfaceID == PUBKEY_INTERFACE_ID ||\\n               interfaceID == TEXT_INTERFACE_ID ||\\n               interfaceID == INTERFACE_META_ID;\\n    }\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) public constant returns (address ret) {\\n        ret = records[node].addr;\\n    }\\n\\n    /**\\n     * Sets the address associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param addr The address to set.\\n     */\\n    function setAddr(bytes32 node, address addr) only_owner(node) public {\\n        records[node].addr = addr;\\n        AddrChanged(node, addr);\\n    }\\n\\n    /**\\n     * Returns the content hash associated with an ENS node.\\n     * Note that this resource type is not standardized, and will likely change\\n     * in future to a resource type based on multihash.\\n     * @param node The ENS node to query.\\n     * @return The associated content hash.\\n     */\\n    function content(bytes32 node) public constant returns (bytes32 ret) {\\n        ret = records[node].content;\\n    }\\n\\n    /**\\n     * Sets the content hash associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * Note that this resource type is not standardized, and will likely change\\n     * in future to a resource type based on multihash.\\n     * @param node The node to update.\\n     * @param hash The content hash to set\\n     */\\n    function setContent(bytes32 node, bytes32 hash) only_owner(node) public {\\n        records[node].content = hash;\\n        ContentChanged(node, hash);\\n    }\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) public constant returns (string ret) {\\n        ret = records[node].name;\\n    }\\n\\n    /**\\n     * Sets the name associated with an ENS node, for reverse records.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param name The name to set.\\n     */\\n    function setName(bytes32 node, string name) only_owner(node) public {\\n        records[node].name = name;\\n        NameChanged(node, name);\\n    }\\n\\n    /**\\n     * Returns the ABI associated with an ENS node.\\n     * Defined in EIP205.\\n     * @param node The ENS node to query\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n     * @return contentType The content type of the return value\\n     * @return data The ABI data\\n     */\\n    function ABI(bytes32 node, uint256 contentTypes) public constant returns (uint256 contentType, bytes data) {\\n        var record = records[node];\\n        for(contentType = 1; contentType <= contentTypes; contentType <<= 1) {\\n            if ((contentType & contentTypes) != 0 && record.abis[contentType].length > 0) {\\n                data = record.abis[contentType];\\n                return;\\n            }\\n        }\\n        contentType = 0;\\n    }\\n\\n    /**\\n     * Sets the ABI associated with an ENS node.\\n     * Nodes may have one ABI of each content type. To remove an ABI, set it to\\n     * the empty string.\\n     * @param node The node to update.\\n     * @param contentType The content type of the ABI\\n     * @param data The ABI data.\\n     */\\n    function setABI(bytes32 node, uint256 contentType, bytes data) only_owner(node) public {\\n        // Content types must be powers of 2\\n        if (((contentType - 1) & contentType) != 0) throw;\\n\\n        records[node].abis[contentType] = data;\\n        ABIChanged(node, contentType);\\n    }\\n\\n    /**\\n     * Returns the SECP256k1 public key associated with an ENS node.\\n     * Defined in EIP 619.\\n     * @param node The ENS node to query\\n     * @return x, y the X and Y coordinates of the curve point for the public key.\\n     */\\n    function pubkey(bytes32 node) public constant returns (bytes32 x, bytes32 y) {\\n        return (records[node].pubkey.x, records[node].pubkey.y);\\n    }\\n\\n    /**\\n     * Sets the SECP256k1 public key associated with an ENS node.\\n     * @param node The ENS node to query\\n     * @param x the X coordinate of the curve point for the public key.\\n     * @param y the Y coordinate of the curve point for the public key.\\n     */\\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) only_owner(node) public {\\n        records[node].pubkey = PublicKey(x, y);\\n        PubkeyChanged(node, x, y);\\n    }\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(bytes32 node, string key) public constant returns (string ret) {\\n        ret = records[node].text[key];\\n    }\\n\\n    /**\\n     * Sets the text data associated with an ENS node and key.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param key The key to set.\\n     * @param value The text data value to set.\\n     */\\n    function setText(bytes32 node, string key, string value) only_owner(node) public {\\n        records[node].text[key] = value;\\n        TextChanged(node, key, key);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/ens/ENSConstants.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ENSConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant ENS_ROOT = bytes32(0);\\n    bytes32 internal constant ETH_TLD_LABEL = keccak256(\\\"eth\\\");\\n    bytes32 internal constant ETH_TLD_NODE = keccak256(abi.encodePacked(ENS_ROOT, ETH_TLD_LABEL));\\n    bytes32 internal constant PUBLIC_RESOLVER_LABEL = keccak256(\\\"resolver\\\");\\n    bytes32 internal constant PUBLIC_RESOLVER_NODE = keccak256(abi.encodePacked(ETH_TLD_NODE, PUBLIC_RESOLVER_LABEL));\\n    */\\n    bytes32 internal constant ENS_ROOT = bytes32(0);\\n    bytes32 internal constant ETH_TLD_LABEL = 0x4f5b812789fc606be1b3b16908db13fc7a9adf7ca72641f84d75b47069d3d7f0;\\n    bytes32 internal constant ETH_TLD_NODE = 0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae;\\n    bytes32 internal constant PUBLIC_RESOLVER_LABEL = 0x329539a1d23af1810c48a07fe7fc66a3b34fbc8b37e9b3cdb97bb88ceab7e4bf;\\n    bytes32 internal constant PUBLIC_RESOLVER_NODE = 0xfdd5d5de6dd63db72bbc2d487944ba13bf775b50a80805fe6fcaba9b0fba88f5;\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/factory/APMRegistryFactory.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\n\\nimport \\\"../apm/APMRegistry.sol\\\";\\nimport \\\"../apm/Repo.sol\\\";\\nimport \\\"../ens/ENSSubdomainRegistrar.sol\\\";\\n\\nimport \\\"./DAOFactory.sol\\\";\\nimport \\\"./ENSFactory.sol\\\";\\nimport \\\"./AppProxyFactory.sol\\\";\\n\\n\\ncontract APMRegistryFactory is APMInternalAppNames {\\n    DAOFactory public daoFactory;\\n    APMRegistry public registryBase;\\n    Repo public repoBase;\\n    ENSSubdomainRegistrar public ensSubdomainRegistrarBase;\\n    ENS public ens;\\n\\n    event DeployAPM(bytes32 indexed node, address apm);\\n\\n    /**\\n    * @notice Create a new factory for deploying Aragon Package Managers (aragonPM)\\n    * @dev Requires either a given ENS registrar or ENSFactory (used for generating a new ENS in test environments).\\n    * @param _daoFactory Base factory for deploying DAOs\\n    * @param _registryBase APMRegistry base contract location\\n    * @param _repoBase Repo base contract location\\n    * @param _ensSubBase ENSSubdomainRegistrar base contract location\\n    * @param _ens ENS instance\\n    * @param _ensFactory ENSFactory (used to generated a new ENS if no ENS is given)\\n    */\\n    constructor(\\n        DAOFactory _daoFactory,\\n        APMRegistry _registryBase,\\n        Repo _repoBase,\\n        ENSSubdomainRegistrar _ensSubBase,\\n        ENS _ens,\\n        ENSFactory _ensFactory\\n    ) public // DAO initialized without evmscript run support\\n    {\\n        daoFactory = _daoFactory;\\n        registryBase = _registryBase;\\n        repoBase = _repoBase;\\n        ensSubdomainRegistrarBase = _ensSubBase;\\n\\n        // Either the ENS address provided is used, if any.\\n        // Or we use the ENSFactory to generate a test instance of ENS\\n        // If not the ENS address nor factory address are provided, this will revert\\n        ens = _ens != address(0) ? _ens : _ensFactory.newENS(this);\\n    }\\n\\n    /**\\n    * @notice Create a new Aragon Package Manager (aragonPM) DAO, holding the `_label` subdomain from parent `_tld` and controlled by `_root`\\n    * @param _tld The parent node of the controlled subdomain\\n    * @param _label The subdomain label\\n    * @param _root Manager for the new aragonPM DAO\\n    * @return The new aragonPM's APMRegistry app\\n    */\\n    function newAPM(bytes32 _tld, bytes32 _label, address _root) public returns (APMRegistry) {\\n        bytes32 node = keccak256(abi.encodePacked(_tld, _label));\\n\\n        // Assume it is the test ENS\\n        if (ens.owner(node) != address(this)) {\\n            // If we weren't in test ens and factory doesn't have ownership, will fail\\n            require(ens.owner(_tld) == address(this));\\n            ens.setSubnodeOwner(_tld, _label, this);\\n        }\\n\\n        Kernel dao = daoFactory.newDAO(this);\\n        ACL acl = ACL(dao.acl());\\n\\n        acl.createPermission(this, dao, dao.APP_MANAGER_ROLE(), this);\\n\\n        // Deploy app proxies\\n        bytes memory noInit = new bytes(0);\\n        ENSSubdomainRegistrar ensSub = ENSSubdomainRegistrar(\\n            dao.newAppInstance(\\n                keccak256(abi.encodePacked(node, keccak256(abi.encodePacked(ENS_SUB_APP_NAME)))),\\n                ensSubdomainRegistrarBase,\\n                noInit,\\n                false\\n            )\\n        );\\n        APMRegistry apm = APMRegistry(\\n            dao.newAppInstance(\\n                keccak256(abi.encodePacked(node, keccak256(abi.encodePacked(APM_APP_NAME)))),\\n                registryBase,\\n                noInit,\\n                false\\n            )\\n        );\\n\\n        // APMRegistry controls Repos\\n        bytes32 repoAppId = keccak256(abi.encodePacked(node, keccak256(abi.encodePacked(REPO_APP_NAME))));\\n        dao.setApp(dao.APP_BASES_NAMESPACE(), repoAppId, repoBase);\\n\\n        emit DeployAPM(node, apm);\\n\\n        // Grant permissions needed for APM on ENSSubdomainRegistrar\\n        acl.createPermission(apm, ensSub, ensSub.CREATE_NAME_ROLE(), _root);\\n        acl.createPermission(apm, ensSub, ensSub.POINT_ROOTNODE_ROLE(), _root);\\n\\n        // allow apm to create permissions for Repos in Kernel\\n        bytes32 permRole = acl.CREATE_PERMISSIONS_ROLE();\\n\\n        acl.grantPermission(apm, acl, permRole);\\n\\n        // Initialize\\n        ens.setOwner(node, ensSub);\\n        ensSub.initialize(ens, node);\\n        apm.initialize(ensSub);\\n\\n        uint16[3] memory firstVersion;\\n        firstVersion[0] = 1;\\n\\n        acl.createPermission(this, apm, apm.CREATE_REPO_ROLE(), this);\\n\\n        apm.newRepoWithVersion(APM_APP_NAME, _root, firstVersion, registryBase, b(\\\"ipfs:apm\\\"));\\n        apm.newRepoWithVersion(ENS_SUB_APP_NAME, _root, firstVersion, ensSubdomainRegistrarBase, b(\\\"ipfs:enssub\\\"));\\n        apm.newRepoWithVersion(REPO_APP_NAME, _root, firstVersion, repoBase, b(\\\"ipfs:repo\\\"));\\n\\n        configureAPMPermissions(acl, apm, _root);\\n\\n        // Permission transition to _root\\n        acl.setPermissionManager(_root, dao, dao.APP_MANAGER_ROLE());\\n        acl.revokePermission(this, acl, permRole);\\n        acl.grantPermission(_root, acl, permRole);\\n        acl.setPermissionManager(_root, acl, permRole);\\n\\n        return apm;\\n    }\\n\\n    function b(string memory x) internal pure returns (bytes memory y) {\\n        y = bytes(x);\\n    }\\n\\n    // Factory can be subclassed and permissions changed\\n    function configureAPMPermissions(ACL _acl, APMRegistry _apm, address _root) internal {\\n        _acl.grantPermission(_root, _apm, _apm.CREATE_REPO_ROLE());\\n        _acl.setPermissionManager(_root, _apm, _apm.CREATE_REPO_ROLE());\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/factory/DAOFactory.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"../kernel/IKernel.sol\\\";\\nimport \\\"../kernel/Kernel.sol\\\";\\nimport \\\"../kernel/KernelProxy.sol\\\";\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../acl/ACL.sol\\\";\\n\\nimport \\\"./EVMScriptRegistryFactory.sol\\\";\\n\\n\\ncontract DAOFactory {\\n    IKernel public baseKernel;\\n    IACL public baseACL;\\n    EVMScriptRegistryFactory public regFactory;\\n\\n    event DeployDAO(address dao);\\n    event DeployEVMScriptRegistry(address reg);\\n\\n    /**\\n    * @notice Create a new DAOFactory, creating DAOs with Kernels proxied to `_baseKernel`, ACLs proxied to `_baseACL`, and new EVMScriptRegistries created from `_regFactory`.\\n    * @param _baseKernel Base Kernel\\n    * @param _baseACL Base ACL\\n    * @param _regFactory EVMScriptRegistry factory\\n    */\\n    constructor(IKernel _baseKernel, IACL _baseACL, EVMScriptRegistryFactory _regFactory) public {\\n        // No need to init as it cannot be killed by devops199\\n        if (address(_regFactory) != address(0)) {\\n            regFactory = _regFactory;\\n        }\\n\\n        baseKernel = _baseKernel;\\n        baseACL = _baseACL;\\n    }\\n\\n    /**\\n    * @notice Create a new DAO with `_root` set as the initial admin\\n    * @param _root Address that will be granted control to setup DAO permissions\\n    * @return Newly created DAO\\n    */\\n    function newDAO(address _root) public returns (Kernel) {\\n        Kernel dao = Kernel(new KernelProxy(baseKernel));\\n\\n        if (address(regFactory) == address(0)) {\\n            dao.initialize(baseACL, _root);\\n        } else {\\n            dao.initialize(baseACL, this);\\n\\n            ACL acl = ACL(dao.acl());\\n            bytes32 permRole = acl.CREATE_PERMISSIONS_ROLE();\\n            bytes32 appManagerRole = dao.APP_MANAGER_ROLE();\\n\\n            acl.grantPermission(regFactory, acl, permRole);\\n\\n            acl.createPermission(regFactory, dao, appManagerRole, this);\\n\\n            EVMScriptRegistry reg = regFactory.newEVMScriptRegistry(dao);\\n            emit DeployEVMScriptRegistry(address(reg));\\n\\n            // Clean up permissions\\n            // First, completely reset the APP_MANAGER_ROLE\\n            acl.revokePermission(regFactory, dao, appManagerRole);\\n            acl.removePermissionManager(dao, appManagerRole);\\n\\n            // Then, make root the only holder and manager of CREATE_PERMISSIONS_ROLE\\n            acl.revokePermission(regFactory, acl, permRole);\\n            acl.revokePermission(this, acl, permRole);\\n            acl.grantPermission(_root, acl, permRole);\\n            acl.setPermissionManager(_root, acl, permRole);\\n        }\\n\\n        emit DeployDAO(address(dao));\\n\\n        return dao;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/factory/ENSFactory.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"../lib/ens/ENS.sol\\\";\\nimport \\\"../lib/ens/PublicResolver.sol\\\";\\nimport \\\"../ens/ENSConstants.sol\\\";\\n\\n\\n// WARNING: This is an incredibly trustful ENS deployment, do NOT use in production!\\n// This contract is NOT meant to be deployed to a live network.\\n// Its only purpose is to easily create ENS instances for testing aragonPM.\\ncontract ENSFactory is ENSConstants {\\n    event DeployENS(address ens);\\n\\n    /**\\n    * @notice Create a new ENS and set `_owner` as the owner of the top level domain.\\n    * @param _owner Owner of .eth\\n    * @return ENS\\n    */\\n    function newENS(address _owner) public returns (ENS) {\\n        ENS ens = new ENS();\\n\\n        // Setup .eth TLD\\n        ens.setSubnodeOwner(ENS_ROOT, ETH_TLD_LABEL, this);\\n\\n        // Setup public resolver\\n        PublicResolver resolver = new PublicResolver(ens);\\n        ens.setSubnodeOwner(ETH_TLD_NODE, PUBLIC_RESOLVER_LABEL, this);\\n        ens.setResolver(PUBLIC_RESOLVER_NODE, resolver);\\n        resolver.setAddr(PUBLIC_RESOLVER_NODE, resolver);\\n\\n        ens.setOwner(ETH_TLD_NODE, _owner);\\n        ens.setOwner(ENS_ROOT, _owner);\\n\\n        emit DeployENS(ens);\\n\\n        return ens;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/kernel/KernelProxy.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"./IKernel.sol\\\";\\nimport \\\"./KernelConstants.sol\\\";\\nimport \\\"./KernelStorage.sol\\\";\\nimport \\\"../common/DepositableDelegateProxy.sol\\\";\\nimport \\\"../common/IsContract.sol\\\";\\n\\n\\ncontract KernelProxy is IKernelEvents, KernelStorage, KernelAppIds, KernelNamespaceConstants, IsContract, DepositableDelegateProxy {\\n    /**\\n    * @dev KernelProxy is a proxy contract to a kernel implementation. The implementation\\n    *      can update the reference, which effectively upgrades the contract\\n    * @param _kernelImpl Address of the contract used as implementation for kernel\\n    */\\n    constructor(IKernel _kernelImpl) public {\\n        require(isContract(address(_kernelImpl)));\\n        apps[KERNEL_CORE_NAMESPACE][KERNEL_CORE_APP_ID] = _kernelImpl;\\n\\n        // Note that emitting this event is important for verifying that a KernelProxy instance\\n        // was never upgraded to a malicious Kernel logic contract over its lifespan.\\n        // This starts the \\\"chain of trust\\\", that can be followed through later SetApp() events\\n        // emitted during kernel upgrades.\\n        emit SetApp(KERNEL_CORE_NAMESPACE, KERNEL_CORE_APP_ID, _kernelImpl);\\n    }\\n\\n    /**\\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\\n     */\\n    function proxyType() public pure returns (uint256 proxyTypeId) {\\n        return UPGRADEABLE;\\n    }\\n\\n    /**\\n    * @dev ERC897, the address the proxy would delegate calls to\\n    */\\n    function implementation() public view returns (address) {\\n        return apps[KERNEL_CORE_NAMESPACE][KERNEL_CORE_APP_ID];\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/lib/ens/ENS.sol\": {\r\n      \"content\": \"// See https://github.com/ensdomains/ens/blob/7e377df83f/contracts/ENS.sol\\n\\npragma solidity ^0.4.0;\\n\\n\\nimport \\\"./AbstractENS.sol\\\";\\n\\n/**\\n * The ENS registry contract.\\n */\\ncontract ENS is AbstractENS {\\n    struct Record {\\n        address owner;\\n        address resolver;\\n        uint64 ttl;\\n    }\\n\\n    mapping(bytes32=>Record) records;\\n\\n    // Permits modifications only by the owner of the specified node.\\n    modifier only_owner(bytes32 node) {\\n        if (records[node].owner != msg.sender) throw;\\n        _;\\n    }\\n\\n    /**\\n     * Constructs a new ENS registrar.\\n     */\\n    function ENS() public {\\n        records[0].owner = msg.sender;\\n    }\\n\\n    /**\\n     * Returns the address that owns the specified node.\\n     */\\n    function owner(bytes32 node) public constant returns (address) {\\n        return records[node].owner;\\n    }\\n\\n    /**\\n     * Returns the address of the resolver for the specified node.\\n     */\\n    function resolver(bytes32 node) public constant returns (address) {\\n        return records[node].resolver;\\n    }\\n\\n    /**\\n     * Returns the TTL of a node, and any records associated with it.\\n     */\\n    function ttl(bytes32 node) public constant returns (uint64) {\\n        return records[node].ttl;\\n    }\\n\\n    /**\\n     * Transfers ownership of a node to a new address. May only be called by the current\\n     * owner of the node.\\n     * @param node The node to transfer ownership of.\\n     * @param owner The address of the new owner.\\n     */\\n    function setOwner(bytes32 node, address owner) only_owner(node) public {\\n        Transfer(node, owner);\\n        records[node].owner = owner;\\n    }\\n\\n    /**\\n     * Transfers ownership of a subnode keccak256(node, label) to a new address. May only be\\n     * called by the owner of the parent node.\\n     * @param node The parent node.\\n     * @param label The hash of the label specifying the subnode.\\n     * @param owner The address of the new owner.\\n     */\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) only_owner(node) public {\\n        var subnode = keccak256(node, label);\\n        NewOwner(node, label, owner);\\n        records[subnode].owner = owner;\\n    }\\n\\n    /**\\n     * Sets the resolver address for the specified node.\\n     * @param node The node to update.\\n     * @param resolver The address of the resolver.\\n     */\\n    function setResolver(bytes32 node, address resolver) only_owner(node) public {\\n        NewResolver(node, resolver);\\n        records[node].resolver = resolver;\\n    }\\n\\n    /**\\n     * Sets the TTL for the specified node.\\n     * @param node The node to update.\\n     * @param ttl The TTL in seconds.\\n     */\\n    function setTTL(bytes32 node, uint64 ttl) only_owner(node) public {\\n        NewTTL(node, ttl);\\n        records[node].ttl = ttl;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/0.4.24/test_helpers/AragonVaultMock.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/apps/UnsafeAragonApp.sol\\\";\\nimport \\\"@aragon/os/contracts/common/DepositableStorage.sol\\\";\\n\\n\\ncontract AragonVaultMock is UnsafeAragonApp, DepositableStorage {\\n    event LogFund(address sender, uint256 amount);\\n\\n    function initialize() external {\\n        initialized();\\n        setDepositable(true);\\n    }\\n\\n    function () external payable {\\n        emit LogFund(msg.sender, msg.value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/0.4.24/nos/NodeOperatorsRegistry.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2020 Lido <info@lido.fi>\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\n/* See contracts/COMPILERS.md */\\npragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"@aragon/os/contracts/common/IsContract.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath64.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\nimport \\\"../interfaces/INodeOperatorsRegistry.sol\\\";\\nimport \\\"../lib/MemUtils.sol\\\";\\n\\n\\n/**\\n  * @title Node Operator registry implementation\\n  *\\n  * See the comment of `INodeOperatorsRegistry`.\\n  *\\n  * NOTE: the code below assumes moderate amount of node operators, e.g. up to 50.\\n  */\\ncontract NodeOperatorsRegistry is INodeOperatorsRegistry, IsContract, AragonApp {\\n    using SafeMath for uint256;\\n    using SafeMath64 for uint64;\\n    using UnstructuredStorage for bytes32;\\n\\n    /// ACL\\n    bytes32 constant public MANAGE_SIGNING_KEYS = keccak256(\\\"MANAGE_SIGNING_KEYS\\\");\\n    bytes32 constant public ADD_NODE_OPERATOR_ROLE = keccak256(\\\"ADD_NODE_OPERATOR_ROLE\\\");\\n    bytes32 constant public SET_NODE_OPERATOR_ACTIVE_ROLE = keccak256(\\\"SET_NODE_OPERATOR_ACTIVE_ROLE\\\");\\n    bytes32 constant public SET_NODE_OPERATOR_NAME_ROLE = keccak256(\\\"SET_NODE_OPERATOR_NAME_ROLE\\\");\\n    bytes32 constant public SET_NODE_OPERATOR_ADDRESS_ROLE = keccak256(\\\"SET_NODE_OPERATOR_ADDRESS_ROLE\\\");\\n    bytes32 constant public SET_NODE_OPERATOR_LIMIT_ROLE = keccak256(\\\"SET_NODE_OPERATOR_LIMIT_ROLE\\\");\\n    bytes32 constant public REPORT_STOPPED_VALIDATORS_ROLE = keccak256(\\\"REPORT_STOPPED_VALIDATORS_ROLE\\\");\\n\\n    uint256 constant public PUBKEY_LENGTH = 48;\\n    uint256 constant public SIGNATURE_LENGTH = 96;\\n\\n    uint256 internal constant UINT64_MAX = uint256(uint64(-1));\\n\\n    bytes32 internal constant SIGNING_KEYS_MAPPING_NAME = keccak256(\\\"lido.NodeOperatorsRegistry.signingKeysMappingName\\\");\\n\\n\\n    /// @dev Node Operator parameters and internal state\\n    struct NodeOperator {\\n        bool active;    // a flag indicating if the operator can participate in further staking and reward distribution\\n        address rewardAddress;  // Ethereum 1 address which receives steth rewards for this operator\\n        string name;    // human-readable name\\n        uint64 stakingLimit;    // the maximum number of validators to stake for this operator\\n        uint64 stoppedValidators;   // number of signing keys which stopped validation (e.g. were slashed)\\n\\n        uint64 totalSigningKeys;    // total amount of signing keys of this operator\\n        uint64 usedSigningKeys;     // number of signing keys of this operator which were used in deposits to the Ethereum 2\\n    }\\n\\n    /// @dev Memory cache entry used in the assignNextKeys function\\n    struct DepositLookupCacheEntry {\\n        // Makes no sense to pack types since reading memory is as fast as any op\\n        uint256 id;\\n        uint256 stakingLimit;\\n        uint256 stoppedValidators;\\n        uint256 totalSigningKeys;\\n        uint256 usedSigningKeys;\\n        uint256 initialUsedSigningKeys;\\n    }\\n\\n    /// @dev Mapping of all node operators. Mapping is used to be able to extend the struct.\\n    mapping(uint256 => NodeOperator) internal operators;\\n\\n    // @dev Total number of operators\\n    bytes32 internal constant TOTAL_OPERATORS_COUNT_POSITION = keccak256(\\\"lido.NodeOperatorsRegistry.totalOperatorsCount\\\");\\n\\n    // @dev Cached number of active operators\\n    bytes32 internal constant ACTIVE_OPERATORS_COUNT_POSITION = keccak256(\\\"lido.NodeOperatorsRegistry.activeOperatorsCount\\\");\\n\\n    /// @dev link to the Lido contract\\n    bytes32 internal constant LIDO_POSITION = keccak256(\\\"lido.NodeOperatorsRegistry.lido\\\");\\n\\n    /// @dev link to the index of operations with keys\\n    bytes32 internal constant KEYS_OP_INDEX_POSITION = keccak256(\\\"lido.NodeOperatorsRegistry.keysOpIndex\\\");\\n\\n\\n    modifier onlyLido() {\\n        require(msg.sender == LIDO_POSITION.getStorageAddress(), \\\"APP_AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    modifier validAddress(address _a) {\\n        require(_a != address(0), \\\"EMPTY_ADDRESS\\\");\\n        _;\\n    }\\n\\n    modifier operatorExists(uint256 _id) {\\n        require(_id < getNodeOperatorsCount(), \\\"NODE_OPERATOR_NOT_FOUND\\\");\\n        _;\\n    }\\n\\n    function initialize(address _lido) public onlyInit {\\n        TOTAL_OPERATORS_COUNT_POSITION.setStorageUint256(0);\\n        ACTIVE_OPERATORS_COUNT_POSITION.setStorageUint256(0);\\n        KEYS_OP_INDEX_POSITION.setStorageUint256(0);\\n        LIDO_POSITION.setStorageAddress(_lido);\\n        initialized();\\n    }\\n\\n    /**\\n      * @notice Add node operator named `_name` with reward address `_rewardAddress` and staking limit = 0\\n      * @param _name Human-readable name\\n      * @param _rewardAddress Ethereum 1 address which receives stETH rewards for this operator\\n      * @return a unique key of the added operator\\n      */\\n    function addNodeOperator(string _name, address _rewardAddress) external\\n        auth(ADD_NODE_OPERATOR_ROLE)\\n        validAddress(_rewardAddress)\\n        returns (uint256 id)\\n    {\\n        id = getNodeOperatorsCount();\\n        TOTAL_OPERATORS_COUNT_POSITION.setStorageUint256(id.add(1));\\n\\n        NodeOperator storage operator = operators[id];\\n\\n        uint256 activeOperatorsCount = getActiveNodeOperatorsCount();\\n        ACTIVE_OPERATORS_COUNT_POSITION.setStorageUint256(activeOperatorsCount.add(1));\\n\\n        operator.active = true;\\n        operator.name = _name;\\n        operator.rewardAddress = _rewardAddress;\\n        operator.stakingLimit = 0;\\n\\n        emit NodeOperatorAdded(id, _name, _rewardAddress, 0);\\n\\n        return id;\\n    }\\n\\n    /**\\n      * @notice `_active ? 'Enable' : 'Disable'` the node operator #`_id`\\n      */\\n    function setNodeOperatorActive(uint256 _id, bool _active) external\\n        authP(SET_NODE_OPERATOR_ACTIVE_ROLE, arr(_id, _active ? uint256(1) : uint256(0)))\\n        operatorExists(_id)\\n    {\\n        _increaseKeysOpIndex();\\n        if (operators[_id].active != _active) {\\n            uint256 activeOperatorsCount = getActiveNodeOperatorsCount();\\n            if (_active)\\n                ACTIVE_OPERATORS_COUNT_POSITION.setStorageUint256(activeOperatorsCount.add(1));\\n            else\\n                ACTIVE_OPERATORS_COUNT_POSITION.setStorageUint256(activeOperatorsCount.sub(1));\\n        }\\n\\n        operators[_id].active = _active;\\n\\n        emit NodeOperatorActiveSet(_id, _active);\\n    }\\n\\n    /**\\n      * @notice Change human-readable name of the node operator #`_id` to `_name`\\n      */\\n    function setNodeOperatorName(uint256 _id, string _name) external\\n        authP(SET_NODE_OPERATOR_NAME_ROLE, arr(_id))\\n        operatorExists(_id)\\n    {\\n        operators[_id].name = _name;\\n        emit NodeOperatorNameSet(_id, _name);\\n    }\\n\\n    /**\\n      * @notice Change reward address of the node operator #`_id` to `_rewardAddress`\\n      */\\n    function setNodeOperatorRewardAddress(uint256 _id, address _rewardAddress) external\\n        authP(SET_NODE_OPERATOR_ADDRESS_ROLE, arr(_id, uint256(_rewardAddress)))\\n        operatorExists(_id)\\n        validAddress(_rewardAddress)\\n    {\\n        operators[_id].rewardAddress = _rewardAddress;\\n        emit NodeOperatorRewardAddressSet(_id, _rewardAddress);\\n    }\\n\\n    /**\\n      * @notice Set the maximum number of validators to stake for the node operator #`_id` to `_stakingLimit`\\n      */\\n    function setNodeOperatorStakingLimit(uint256 _id, uint64 _stakingLimit) external\\n        authP(SET_NODE_OPERATOR_LIMIT_ROLE, arr(_id, uint256(_stakingLimit)))\\n        operatorExists(_id)\\n    {\\n        _increaseKeysOpIndex();\\n        operators[_id].stakingLimit = _stakingLimit;\\n        emit NodeOperatorStakingLimitSet(_id, _stakingLimit);\\n    }\\n\\n    /**\\n      * @notice Report `_stoppedIncrement` more stopped validators of the node operator #`_id`\\n      */\\n    function reportStoppedValidators(uint256 _id, uint64 _stoppedIncrement) external\\n        authP(REPORT_STOPPED_VALIDATORS_ROLE, arr(_id, uint256(_stoppedIncrement)))\\n        operatorExists(_id)\\n    {\\n        require(0 != _stoppedIncrement, \\\"EMPTY_VALUE\\\");\\n        operators[_id].stoppedValidators = operators[_id].stoppedValidators.add(_stoppedIncrement);\\n        require(operators[_id].stoppedValidators <= operators[_id].usedSigningKeys, \\\"STOPPED_MORE_THAN_LAUNCHED\\\");\\n\\n        emit NodeOperatorTotalStoppedValidatorsReported(_id, operators[_id].stoppedValidators);\\n    }\\n\\n    /**\\n      * @notice Remove unused signing keys\\n      * @dev Function is used by the Lido contract\\n      */\\n    function trimUnusedKeys() external onlyLido {\\n        uint256 length = getNodeOperatorsCount();\\n        for (uint256 operatorId = 0; operatorId < length; ++operatorId) {\\n            uint64 totalSigningKeys = operators[operatorId].totalSigningKeys;\\n            uint64 usedSigningKeys = operators[operatorId].usedSigningKeys;\\n            if (totalSigningKeys != usedSigningKeys) { // write only if update is needed\\n                operators[operatorId].totalSigningKeys = usedSigningKeys;  // discard unused keys\\n                emit NodeOperatorTotalKeysTrimmed(operatorId, totalSigningKeys - usedSigningKeys);\\n            }\\n        }\\n    }\\n\\n    /**\\n      * @notice Add `_quantity` validator signing keys of operator #`_id` to the set of usable keys. Concatenated keys are: `_pubkeys`. Can be done by the DAO in question by using the designated rewards address.\\n      * @dev Along with each key the DAO has to provide a signatures for the\\n      *      (pubkey, withdrawal_credentials, 32000000000) message.\\n      *      Given that information, the contract'll be able to call\\n      *      deposit_contract.deposit on-chain.\\n      * @param _operator_id Node Operator id\\n      * @param _quantity Number of signing keys provided\\n      * @param _pubkeys Several concatenated validator signing keys\\n      * @param _signatures Several concatenated signatures for (pubkey, withdrawal_credentials, 32000000000) messages\\n      */\\n    function addSigningKeys(uint256 _operator_id, uint256 _quantity, bytes _pubkeys, bytes _signatures) external\\n        authP(MANAGE_SIGNING_KEYS, arr(_operator_id))\\n    {\\n        _addSigningKeys(_operator_id, _quantity, _pubkeys, _signatures);\\n    }\\n\\n    /**\\n      * @notice Add `_quantity` validator signing keys of operator #`_id` to the set of usable keys. Concatenated keys are: `_pubkeys`. Can be done by node operator in question by using the designated rewards address.\\n      * @dev Along with each key the DAO has to provide a signatures for the\\n      *      (pubkey, withdrawal_credentials, 32000000000) message.\\n      *      Given that information, the contract'll be able to call\\n      *      deposit_contract.deposit on-chain.\\n      * @param _operator_id Node Operator id\\n      * @param _quantity Number of signing keys provided\\n      * @param _pubkeys Several concatenated validator signing keys\\n      * @param _signatures Several concatenated signatures for (pubkey, withdrawal_credentials, 32000000000) messages\\n      */\\n    function addSigningKeysOperatorBH(\\n        uint256 _operator_id,\\n        uint256 _quantity,\\n        bytes _pubkeys,\\n        bytes _signatures\\n    )\\n        external\\n    {\\n        require(msg.sender == operators[_operator_id].rewardAddress, \\\"APP_AUTH_FAILED\\\");\\n        _addSigningKeys(_operator_id, _quantity, _pubkeys, _signatures);\\n    }\\n\\n    /**\\n      * @notice Removes a validator signing key #`_index` of operator #`_id` from the set of usable keys. Executed on behalf of DAO.\\n      * @param _operator_id Node Operator id\\n      * @param _index Index of the key, starting with 0\\n      */\\n    function removeSigningKey(uint256 _operator_id, uint256 _index)\\n        external\\n        authP(MANAGE_SIGNING_KEYS, arr(_operator_id))\\n    {\\n        _removeSigningKey(_operator_id, _index);\\n    }\\n\\n    /**\\n      * @notice Removes an #`_amount` of validator signing keys starting from #`_index` of operator #`_id` usable keys. Executed on behalf of DAO.\\n      * @param _operator_id Node Operator id\\n      * @param _index Index of the key, starting with 0\\n      * @param _amount Number of keys to remove\\n      */\\n    function removeSigningKeys(uint256 _operator_id, uint256 _index, uint256 _amount)\\n        external\\n        authP(MANAGE_SIGNING_KEYS, arr(_operator_id))\\n    {\\n        // removing from the last index to the highest one, so we won't get outside the array\\n        for (uint256 i = _index + _amount; i > _index ; --i) {\\n            _removeSigningKey(_operator_id, i - 1);\\n        }\\n    }\\n\\n    /**\\n      * @notice Removes a validator signing key #`_index` of operator #`_id` from the set of usable keys. Executed on behalf of Node Operator.\\n      * @param _operator_id Node Operator id\\n      * @param _index Index of the key, starting with 0\\n      */\\n    function removeSigningKeyOperatorBH(uint256 _operator_id, uint256 _index) external {\\n        require(msg.sender == operators[_operator_id].rewardAddress, \\\"APP_AUTH_FAILED\\\");\\n        _removeSigningKey(_operator_id, _index);\\n    }\\n\\n    /**\\n      * @notice Removes an #`_amount` of validator signing keys starting from #`_index` of operator #`_id` usable keys. Executed on behalf of Node Operator.\\n      * @param _operator_id Node Operator id\\n      * @param _index Index of the key, starting with 0\\n      * @param _amount Number of keys to remove\\n      */\\n    function removeSigningKeysOperatorBH(uint256 _operator_id, uint256 _index, uint256 _amount) external {\\n        require(msg.sender == operators[_operator_id].rewardAddress, \\\"APP_AUTH_FAILED\\\");\\n        // removing from the last index to the highest one, so we won't get outside the array\\n        for (uint256 i = _index + _amount; i > _index ; --i) {\\n            _removeSigningKey(_operator_id, i - 1);\\n        }\\n    }\\n\\n    /**\\n     * @notice Selects and returns at most `_numKeys` signing keys (as well as the corresponding\\n     *         signatures) from the set of active keys and marks the selected keys as used.\\n     *         May only be called by the Lido contract.\\n     *\\n     * @param _numKeys The number of keys to select. The actual number of selected keys may be less\\n     *        due to the lack of active keys.\\n     */\\n    function assignNextSigningKeys(uint256 _numKeys) external onlyLido returns (bytes memory pubkeys, bytes memory signatures) {\\n        // Memory is very cheap, although you don't want to grow it too much\\n        DepositLookupCacheEntry[] memory cache = _loadOperatorCache();\\n        if (0 == cache.length)\\n            return (new bytes(0), new bytes(0));\\n\\n        uint256 numAssignedKeys = 0;\\n        DepositLookupCacheEntry memory entry;\\n\\n        while (numAssignedKeys < _numKeys) {\\n            // Finding the best suitable operator\\n            uint256 bestOperatorIdx = cache.length;   // 'not found' flag\\n            uint256 smallestStake;\\n            // The loop is ligthweight comparing to an ether transfer and .deposit invocation\\n            for (uint256 idx = 0; idx < cache.length; ++idx) {\\n                entry = cache[idx];\\n\\n                assert(entry.usedSigningKeys <= entry.totalSigningKeys);\\n                if (entry.usedSigningKeys == entry.totalSigningKeys)\\n                    continue;\\n\\n                uint256 stake = entry.usedSigningKeys.sub(entry.stoppedValidators);\\n                if (stake + 1 > entry.stakingLimit)\\n                    continue;\\n\\n                if (bestOperatorIdx == cache.length || stake < smallestStake) {\\n                    bestOperatorIdx = idx;\\n                    smallestStake = stake;\\n                }\\n            }\\n\\n            if (bestOperatorIdx == cache.length)  // not found\\n                break;\\n\\n            entry = cache[bestOperatorIdx];\\n            assert(entry.usedSigningKeys < UINT64_MAX);\\n\\n            ++entry.usedSigningKeys;\\n            ++numAssignedKeys;\\n        }\\n\\n        if (numAssignedKeys == 0) {\\n            return (new bytes(0), new bytes(0));\\n        }\\n\\n        if (numAssignedKeys > 1) {\\n            // we can allocate without zeroing out since we're going to rewrite the whole array\\n            pubkeys = MemUtils.unsafeAllocateBytes(numAssignedKeys * PUBKEY_LENGTH);\\n            signatures = MemUtils.unsafeAllocateBytes(numAssignedKeys * SIGNATURE_LENGTH);\\n        }\\n\\n        uint256 numLoadedKeys = 0;\\n\\n        for (uint256 i = 0; i < cache.length; ++i) {\\n            entry = cache[i];\\n\\n            if (entry.usedSigningKeys == entry.initialUsedSigningKeys) {\\n                continue;\\n            }\\n\\n            operators[entry.id].usedSigningKeys = uint64(entry.usedSigningKeys);\\n\\n            for (uint256 keyIndex = entry.initialUsedSigningKeys; keyIndex < entry.usedSigningKeys; ++keyIndex) {\\n                (bytes memory pubkey, bytes memory signature) = _loadSigningKey(entry.id, keyIndex);\\n                if (numAssignedKeys == 1) {\\n                    return (pubkey, signature);\\n                } else {\\n                    MemUtils.copyBytes(pubkey, pubkeys, numLoadedKeys * PUBKEY_LENGTH);\\n                    MemUtils.copyBytes(signature, signatures, numLoadedKeys * SIGNATURE_LENGTH);\\n                    ++numLoadedKeys;\\n                }\\n            }\\n\\n            if (numLoadedKeys == numAssignedKeys) {\\n                break;\\n            }\\n        }\\n\\n        assert(numLoadedKeys == numAssignedKeys);\\n        return (pubkeys, signatures);\\n    }\\n\\n    /**\\n      * @notice Returns the rewards distribution proportional to the effective stake for each node operator.\\n      * @param _totalRewardShares Total amount of reward shares to distribute.\\n      */\\n    function getRewardsDistribution(uint256 _totalRewardShares) external view\\n        returns (\\n            address[] memory recipients,\\n            uint256[] memory shares\\n        )\\n    {\\n        uint256 nodeOperatorCount = getNodeOperatorsCount();\\n\\n        uint256 activeCount = getActiveNodeOperatorsCount();\\n        recipients = new address[](activeCount);\\n        shares = new uint256[](activeCount);\\n        uint256 idx = 0;\\n\\n        uint256 effectiveStakeTotal = 0;\\n        for (uint256 operatorId = 0; operatorId < nodeOperatorCount; ++operatorId) {\\n            NodeOperator storage operator = operators[operatorId];\\n            if (!operator.active)\\n                continue;\\n\\n            uint256 effectiveStake = operator.usedSigningKeys.sub(operator.stoppedValidators);\\n            effectiveStakeTotal = effectiveStakeTotal.add(effectiveStake);\\n\\n            recipients[idx] = operator.rewardAddress;\\n            shares[idx] = effectiveStake;\\n\\n            ++idx;\\n        }\\n\\n        if (effectiveStakeTotal == 0)\\n            return (recipients, shares);\\n\\n        uint256 perValidatorReward = _totalRewardShares.div(effectiveStakeTotal);\\n\\n        for (idx = 0; idx < activeCount; ++idx) {\\n            shares[idx] = shares[idx].mul(perValidatorReward);\\n        }\\n\\n        return (recipients, shares);\\n    }\\n\\n    /**\\n      * @notice Returns number of active node operators\\n      */\\n    function getActiveNodeOperatorsCount() public view returns (uint256) {\\n        return ACTIVE_OPERATORS_COUNT_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n      * @notice Returns the n-th node operator\\n      * @param _id Node Operator id\\n      * @param _fullInfo If true, name will be returned as well\\n      */\\n    function getNodeOperator(uint256 _id, bool _fullInfo) external view\\n        operatorExists(_id)\\n        returns\\n        (\\n            bool active,\\n            string name,\\n            address rewardAddress,\\n            uint64 stakingLimit,\\n            uint64 stoppedValidators,\\n            uint64 totalSigningKeys,\\n            uint64 usedSigningKeys\\n        )\\n    {\\n        NodeOperator storage operator = operators[_id];\\n\\n        active = operator.active;\\n        name = _fullInfo ? operator.name : \\\"\\\";    // reading name is 2+ SLOADs\\n        rewardAddress = operator.rewardAddress;\\n        stakingLimit = operator.stakingLimit;\\n        stoppedValidators = operator.stoppedValidators;\\n        totalSigningKeys = operator.totalSigningKeys;\\n        usedSigningKeys = operator.usedSigningKeys;\\n    }\\n\\n    /**\\n      * @notice Returns total number of signing keys of the node operator #`_operator_id`\\n      */\\n    function getTotalSigningKeyCount(uint256 _operator_id) external view operatorExists(_operator_id) returns (uint256) {\\n        return operators[_operator_id].totalSigningKeys;\\n    }\\n\\n    /**\\n      * @notice Returns number of usable signing keys of the node operator #`_operator_id`\\n      */\\n    function getUnusedSigningKeyCount(uint256 _operator_id) external view operatorExists(_operator_id) returns (uint256) {\\n        return operators[_operator_id].totalSigningKeys.sub(operators[_operator_id].usedSigningKeys);\\n    }\\n\\n    /**\\n      * @notice Returns n-th signing key of the node operator #`_operator_id`\\n      * @param _operator_id Node Operator id\\n      * @param _index Index of the key, starting with 0\\n      * @return key Key\\n      * @return depositSignature Signature needed for a deposit_contract.deposit call\\n      * @return used Flag indication if the key was used in the staking\\n      */\\n    function getSigningKey(uint256 _operator_id, uint256 _index) external view\\n        operatorExists(_operator_id)\\n        returns (bytes key, bytes depositSignature, bool used)\\n    {\\n        require(_index < operators[_operator_id].totalSigningKeys, \\\"KEY_NOT_FOUND\\\");\\n\\n        (bytes memory key_, bytes memory signature) = _loadSigningKey(_operator_id, _index);\\n\\n        return (key_, signature, _index < operators[_operator_id].usedSigningKeys);\\n    }\\n\\n    /**\\n      * @notice Returns total number of node operators\\n      */\\n    function getNodeOperatorsCount() public view returns (uint256) {\\n        return TOTAL_OPERATORS_COUNT_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n     * @notice Returns a monotonically increasing counter that gets incremented when any of the following happens:\\n     *   1. a node operator's key(s) is added;\\n     *   2. a node operator's key(s) is removed;\\n     *   3. a node operator's approved keys limit is changed.\\n     *   4. a node operator was activated/deactivated. Activation or deactivation of node operator\\n     *      might lead to usage of unvalidated keys in the assignNextSigningKeys method.\\n     */\\n    function getKeysOpIndex() public view returns (uint256) {\\n        return KEYS_OP_INDEX_POSITION.getStorageUint256();\\n    }\\n\\n    function _isEmptySigningKey(bytes memory _key) internal pure returns (bool) {\\n        assert(_key.length == PUBKEY_LENGTH);\\n        // algorithm applicability constraint\\n        assert(PUBKEY_LENGTH >= 32 && PUBKEY_LENGTH <= 64);\\n\\n        uint256 k1;\\n        uint256 k2;\\n        assembly {\\n            k1 := mload(add(_key, 0x20))\\n            k2 := mload(add(_key, 0x40))\\n        }\\n\\n        return 0 == k1 && 0 == (k2 >> ((2 * 32 - PUBKEY_LENGTH) * 8));\\n    }\\n\\n    function to64(uint256 v) internal pure returns (uint64) {\\n        assert(v <= uint256(uint64(-1)));\\n        return uint64(v);\\n    }\\n\\n    function _signingKeyOffset(uint256 _operator_id, uint256 _keyIndex) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(SIGNING_KEYS_MAPPING_NAME, _operator_id, _keyIndex)));\\n    }\\n\\n    function _storeSigningKey(uint256 _operator_id, uint256 _keyIndex, bytes memory _key, bytes memory _signature) internal {\\n        assert(_key.length == PUBKEY_LENGTH);\\n        assert(_signature.length == SIGNATURE_LENGTH);\\n        // algorithm applicability constraints\\n        assert(PUBKEY_LENGTH >= 32 && PUBKEY_LENGTH <= 64);\\n        assert(0 == SIGNATURE_LENGTH % 32);\\n\\n        // key\\n        uint256 offset = _signingKeyOffset(_operator_id, _keyIndex);\\n        uint256 keyExcessBits = (2 * 32 - PUBKEY_LENGTH) * 8;\\n        assembly {\\n            sstore(offset, mload(add(_key, 0x20)))\\n            sstore(add(offset, 1), shl(keyExcessBits, shr(keyExcessBits, mload(add(_key, 0x40)))))\\n        }\\n        offset += 2;\\n\\n        // signature\\n        for (uint256 i = 0; i < SIGNATURE_LENGTH; i += 32) {\\n            assembly {\\n                sstore(offset, mload(add(_signature, add(0x20, i))))\\n            }\\n            offset++;\\n        }\\n    }\\n\\n    function _addSigningKeys(uint256 _operator_id, uint256 _quantity, bytes _pubkeys, bytes _signatures) internal\\n        operatorExists(_operator_id)\\n    {\\n        require(_quantity != 0, \\\"NO_KEYS\\\");\\n        require(_pubkeys.length == _quantity.mul(PUBKEY_LENGTH), \\\"INVALID_LENGTH\\\");\\n        require(_signatures.length == _quantity.mul(SIGNATURE_LENGTH), \\\"INVALID_LENGTH\\\");\\n\\n        _increaseKeysOpIndex();\\n\\n        for (uint256 i = 0; i < _quantity; ++i) {\\n            bytes memory key = BytesLib.slice(_pubkeys, i * PUBKEY_LENGTH, PUBKEY_LENGTH);\\n            require(!_isEmptySigningKey(key), \\\"EMPTY_KEY\\\");\\n            bytes memory sig = BytesLib.slice(_signatures, i * SIGNATURE_LENGTH, SIGNATURE_LENGTH);\\n\\n            _storeSigningKey(_operator_id, operators[_operator_id].totalSigningKeys + i, key, sig);\\n            emit SigningKeyAdded(_operator_id, key);\\n        }\\n\\n        operators[_operator_id].totalSigningKeys = operators[_operator_id].totalSigningKeys.add(to64(_quantity));\\n    }\\n\\n    function _removeSigningKey(uint256 _operator_id, uint256 _index) internal\\n        operatorExists(_operator_id)\\n    {\\n        require(_index < operators[_operator_id].totalSigningKeys, \\\"KEY_NOT_FOUND\\\");\\n        require(_index >= operators[_operator_id].usedSigningKeys, \\\"KEY_WAS_USED\\\");\\n\\n        _increaseKeysOpIndex();\\n\\n        (bytes memory removedKey, ) = _loadSigningKey(_operator_id, _index);\\n\\n        uint256 lastIndex = operators[_operator_id].totalSigningKeys.sub(1);\\n        if (_index < lastIndex) {\\n            (bytes memory key, bytes memory signature) = _loadSigningKey(_operator_id, lastIndex);\\n            _storeSigningKey(_operator_id, _index, key, signature);\\n        }\\n\\n        _deleteSigningKey(_operator_id, lastIndex);\\n        operators[_operator_id].totalSigningKeys = operators[_operator_id].totalSigningKeys.sub(1);\\n\\n        if (_index < operators[_operator_id].stakingLimit) {\\n            // decreasing the staking limit so the key at _index can't be used anymore\\n            operators[_operator_id].stakingLimit = uint64(_index);\\n        }\\n\\n        emit SigningKeyRemoved(_operator_id, removedKey);\\n    }\\n\\n    function _deleteSigningKey(uint256 _operator_id, uint256 _keyIndex) internal {\\n        uint256 offset = _signingKeyOffset(_operator_id, _keyIndex);\\n        for (uint256 i = 0; i < (PUBKEY_LENGTH + SIGNATURE_LENGTH) / 32 + 1; ++i) {\\n            assembly {\\n                sstore(add(offset, i), 0)\\n            }\\n        }\\n    }\\n\\n    function _loadSigningKey(uint256 _operator_id, uint256 _keyIndex) internal view returns (bytes memory key, bytes memory signature) {\\n        // algorithm applicability constraints\\n        assert(PUBKEY_LENGTH >= 32 && PUBKEY_LENGTH <= 64);\\n        assert(0 == SIGNATURE_LENGTH % 32);\\n\\n        uint256 offset = _signingKeyOffset(_operator_id, _keyIndex);\\n\\n        // key\\n        bytes memory tmpKey = new bytes(64);\\n        assembly {\\n            mstore(add(tmpKey, 0x20), sload(offset))\\n            mstore(add(tmpKey, 0x40), sload(add(offset, 1)))\\n        }\\n        offset += 2;\\n        key = BytesLib.slice(tmpKey, 0, PUBKEY_LENGTH);\\n\\n        // signature\\n        signature = new bytes(SIGNATURE_LENGTH);\\n        for (uint256 i = 0; i < SIGNATURE_LENGTH; i += 32) {\\n            assembly {\\n                mstore(add(signature, add(0x20, i)), sload(offset))\\n            }\\n            offset++;\\n        }\\n\\n        return (key, signature);\\n    }\\n\\n    function _loadOperatorCache() internal view returns (DepositLookupCacheEntry[] memory cache) {\\n        cache = new DepositLookupCacheEntry[](getActiveNodeOperatorsCount());\\n        if (0 == cache.length)\\n            return cache;\\n\\n        uint256 totalOperators = getNodeOperatorsCount();\\n        uint256 idx = 0;\\n        for (uint256 operatorId = 0; operatorId < totalOperators; ++operatorId) {\\n            NodeOperator storage operator = operators[operatorId];\\n\\n            if (!operator.active)\\n                continue;\\n\\n            DepositLookupCacheEntry memory entry = cache[idx++];\\n            entry.id = operatorId;\\n            entry.stakingLimit = operator.stakingLimit;\\n            entry.stoppedValidators = operator.stoppedValidators;\\n            entry.totalSigningKeys = operator.totalSigningKeys;\\n            entry.usedSigningKeys = operator.usedSigningKeys;\\n            entry.initialUsedSigningKeys = entry.usedSigningKeys;\\n        }\\n        require(idx == cache.length, \\\"INCOSISTENT_ACTIVE_COUNT\\\");\\n\\n        return cache;\\n    }\\n\\n    function _increaseKeysOpIndex() internal {\\n        uint256 keysOpIndex = getKeysOpIndex();\\n        KEYS_OP_INDEX_POSITION.setStorageUint256(keysOpIndex + 1);\\n        emit KeysOpIndexSet(keysOpIndex + 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/0.4.24/lib/MemUtils.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2020 Lido <info@lido.fi>\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\n/* See contracts/COMPILERS.md */\\npragma solidity 0.4.24;\\n\\n\\nlibrary MemUtils {\\n    /**\\n     * @dev Allocates a memory byte array of `_len` bytes without zeroing it out.\\n     */\\n    function unsafeAllocateBytes(uint256 _len) internal pure returns (bytes memory result) {\\n        assembly {\\n            result := mload(0x40)\\n            mstore(result, _len)\\n            mstore(0x40, add(add(result, _len), 32))\\n        }\\n    }\\n\\n    /**\\n     * Performs a memory copy of `_len` bytes from position `_src` to position `_dst`.\\n     */\\n    function memcpy(uint256 _src, uint256 _dst, uint256 _len) internal pure {\\n        assembly {\\n            // while al least 32 bytes left, copy in 32-byte chunks\\n            for { } gt(_len, 31) { } {\\n                mstore(_dst, mload(_src))\\n                _src := add(_src, 32)\\n                _dst := add(_dst, 32)\\n                _len := sub(_len, 32)\\n            }\\n            if gt(_len, 0) {\\n                // read the next 32-byte chunk from _dst, replace the first N bytes\\n                // with those left in the _src, and write the transformed chunk back\\n                let mask := sub(shl(1, mul(8, sub(32, _len))), 1) // 2 ** (8 * (32 - _len)) - 1\\n                let srcMasked := and(mload(_src), not(mask))\\n                let dstMasked := and(mload(_dst), mask)\\n                mstore(_dst, or(dstMasked, srcMasked))\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Copies bytes from `_src` to `_dst`, starting at position `_dstStart` into `_dst`.\\n     */\\n    function copyBytes(bytes memory _src, bytes memory _dst, uint256 _dstStart) internal pure {\\n        require(_dstStart + _src.length <= _dst.length, \\\"BYTES_ARRAY_OUT_OF_BOUNDS\\\");\\n        uint256 srcStartPos;\\n        uint256 dstStartPos;\\n        assembly {\\n            srcStartPos := add(_src, 32)\\n            dstStartPos := add(add(_dst, 32), _dstStart)\\n        }\\n        memcpy(srcStartPos, dstStartPos, _src.length);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/0.4.24/nos/test_helpers/PoolMock.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"../../interfaces/INodeOperatorsRegistry.sol\\\";\\n\\n\\n/**\\n  * @dev This is a mock. Don't use in production.\\n  */\\ncontract PoolMock {\\n    event KeysAssigned(bytes pubkeys, bytes signatures);\\n\\n    INodeOperatorsRegistry private operators;\\n\\n    constructor(address _operators) public {\\n        operators = INodeOperatorsRegistry(_operators);\\n    }\\n\\n    function assignNextSigningKeys(uint256 _numKeys) external {\\n        (bytes memory pubkeys, bytes memory signatures) = operators.assignNextSigningKeys(_numKeys);\\n        emit KeysAssigned(pubkeys, signatures);\\n    }\\n\\n    function trimUnusedKeys() external {\\n        operators.trimUnusedKeys();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/0.4.24/template/Imports.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2020 Lido <info@lido.fi>\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/acl/ACL.sol\\\";\\nimport \\\"@aragon/os/contracts/kernel/Kernel.sol\\\";\\nimport \\\"@aragon/os/contracts/factory/DAOFactory.sol\\\";\\nimport \\\"@aragon/os/contracts/factory/APMRegistryFactory.sol\\\";\\nimport \\\"@aragon/os/contracts/factory/ENSFactory.sol\\\";\\nimport \\\"@aragon/os/contracts/apm/APMRegistry.sol\\\";\\nimport \\\"@aragon/os/contracts/apm/Repo.sol\\\";\\nimport \\\"@aragon/os/contracts/ens/ENSSubdomainRegistrar.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/ens/ENS.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/ens/AbstractENS.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/ens/PublicResolver.sol\\\";\\nimport \\\"@aragon/id/contracts/FIFSResolvingRegistrar.sol\\\";\\n\\nimport \\\"@aragon/apps-vault/contracts/Vault.sol\\\";\\nimport \\\"@aragon/apps-voting/contracts/Voting.sol\\\";\\nimport \\\"@aragon/apps-finance/contracts/Finance.sol\\\";\\nimport \\\"@aragon/apps-token-manager/contracts/TokenManager.sol\\\";\\n\\ncontract Imports {} /* solium-disable-line no-empty-blocks */\\n\"\r\n    },\r\n    \"@aragon/id/contracts/FIFSResolvingRegistrar.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/lib/ens/AbstractENS.sol\\\";\\nimport \\\"./ens/IPublicResolver.sol\\\";\\nimport \\\"./IFIFSResolvingRegistrar.sol\\\";\\n\\n\\n/**\\n * A registrar that allocates subdomains and sets resolvers to the first person to claim them.\\n *\\n * Adapted from ENS' FIFSRegistrar:\\n *   https://github.com/ethereum/ens/blob/master/contracts/FIFSRegistrar.sol\\n */\\ncontract FIFSResolvingRegistrar is IFIFSResolvingRegistrar {\\n    bytes32 public rootNode;\\n    AbstractENS internal ens;\\n    IPublicResolver internal defaultResolver;\\n\\n    bytes4 private constant ADDR_INTERFACE_ID = 0x3b3b57de;\\n\\n    event ClaimSubdomain(bytes32 indexed subnode, address indexed owner, address indexed resolver);\\n\\n    /**\\n     * Constructor.\\n     * @param _ensAddr The address of the ENS registry.\\n     * @param _defaultResolver The address of the default resolver to use for subdomains.\\n     * @param _node The node that this registrar administers.\\n     */\\n    constructor(AbstractENS _ensAddr, IPublicResolver _defaultResolver, bytes32 _node)\\n        public\\n    {\\n        ens = _ensAddr;\\n        defaultResolver = _defaultResolver;\\n        rootNode = _node;\\n    }\\n\\n    /**\\n     * Register a subdomain with the default resolver if it hasn't been claimed yet.\\n     * @param _subnode The hash of the label to register.\\n     * @param _owner The address of the new owner.\\n     */\\n    function register(bytes32 _subnode, address _owner) external {\\n        registerWithResolver(_subnode, _owner, defaultResolver);\\n    }\\n\\n    /**\\n     * Register a subdomain if it hasn't been claimed yet.\\n     * @param _subnode The hash of the label to register.\\n     * @param _owner The address of the new owner.\\n     * @param _resolver The address of the resolver.\\n     *                  If the resolver supports the address interface, the subdomain's address will\\n     *                  be set to the new owner.\\n     */\\n    function registerWithResolver(bytes32 _subnode, address _owner, IPublicResolver _resolver) public {\\n        bytes32 node = keccak256(rootNode, _subnode);\\n        address currentOwner = ens.owner(node);\\n        require(currentOwner == address(0));\\n\\n        ens.setSubnodeOwner(rootNode, _subnode, address(this));\\n        ens.setResolver(node, _resolver);\\n        if (_resolver.supportsInterface(ADDR_INTERFACE_ID)) {\\n            _resolver.setAddr(node, _owner);\\n        }\\n\\n        // Give ownership to the claimer\\n        ens.setOwner(node, _owner);\\n\\n        emit ClaimSubdomain(_subnode, _owner, address(_resolver));\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/id/contracts/ens/IPublicResolver.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.0;\\n\\n\\ninterface IPublicResolver {\\n    function supportsInterface(bytes4 interfaceID) constant returns (bool);\\n    function addr(bytes32 node) constant returns (address ret);\\n    function setAddr(bytes32 node, address addr);\\n    function hash(bytes32 node) constant returns (bytes32 ret);\\n    function setHash(bytes32 node, bytes32 hash);\\n}\\n\"\r\n    },\r\n    \"@aragon/id/contracts/IFIFSResolvingRegistrar.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"./ens/IPublicResolver.sol\\\";\\n\\n\\ninterface IFIFSResolvingRegistrar {\\n    function register(bytes32 _subnode, address _owner) external;\\n    function registerWithResolver(bytes32 _subnode, address _owner, IPublicResolver _resolver) public;\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.24;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract ERC20 is IERC20 {\\n  using SafeMath for uint256;\\n\\n  mapping (address => uint256) private _balances;\\n\\n  mapping (address => mapping (address => uint256)) private _allowed;\\n\\n  uint256 private _totalSupply;\\n\\n  /**\\n  * @dev Total number of tokens in existence\\n  */\\n  function totalSupply() public view returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param owner The address to query the balance of.\\n  * @return An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address owner) public view returns (uint256) {\\n    return _balances[owner];\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param owner address The address which owns the funds.\\n   * @param spender address The address which will spend the funds.\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(\\n    address owner,\\n    address spender\\n   )\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return _allowed[owner][spender];\\n  }\\n\\n  /**\\n  * @dev Transfer token for a specified address\\n  * @param to The address to transfer to.\\n  * @param value The amount to be transferred.\\n  */\\n  function transfer(address to, uint256 value) public returns (bool) {\\n    _transfer(msg.sender, to, value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param spender The address which will spend the funds.\\n   * @param value The amount of tokens to be spent.\\n   */\\n  function approve(address spender, uint256 value) public returns (bool) {\\n    require(spender != address(0));\\n\\n    _allowed[msg.sender][spender] = value;\\n    emit Approval(msg.sender, spender, value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param from address The address which you want to send tokens from\\n   * @param to address The address which you want to transfer to\\n   * @param value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    public\\n    returns (bool)\\n  {\\n    require(value <= _allowed[from][msg.sender]);\\n\\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\n    _transfer(from, to, value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n   * approve should be called when allowed_[_spender] == 0. To increment\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param spender The address which will spend the funds.\\n   * @param addedValue The amount of tokens to increase the allowance by.\\n   */\\n  function increaseAllowance(\\n    address spender,\\n    uint256 addedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    require(spender != address(0));\\n\\n    _allowed[msg.sender][spender] = (\\n      _allowed[msg.sender][spender].add(addedValue));\\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n   * approve should be called when allowed_[_spender] == 0. To decrement\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param spender The address which will spend the funds.\\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\\n   */\\n  function decreaseAllowance(\\n    address spender,\\n    uint256 subtractedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    require(spender != address(0));\\n\\n    _allowed[msg.sender][spender] = (\\n      _allowed[msg.sender][spender].sub(subtractedValue));\\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Transfer token for a specified addresses\\n  * @param from The address to transfer from.\\n  * @param to The address to transfer to.\\n  * @param value The amount to be transferred.\\n  */\\n  function _transfer(address from, address to, uint256 value) internal {\\n    require(value <= _balances[from]);\\n    require(to != address(0));\\n\\n    _balances[from] = _balances[from].sub(value);\\n    _balances[to] = _balances[to].add(value);\\n    emit Transfer(from, to, value);\\n  }\\n\\n  /**\\n   * @dev Internal function that mints an amount of the token and assigns it to\\n   * an account. This encapsulates the modification of balances such that the\\n   * proper events are emitted.\\n   * @param account The account that will receive the created tokens.\\n   * @param value The amount that will be created.\\n   */\\n  function _mint(address account, uint256 value) internal {\\n    require(account != 0);\\n    _totalSupply = _totalSupply.add(value);\\n    _balances[account] = _balances[account].add(value);\\n    emit Transfer(address(0), account, value);\\n  }\\n\\n  /**\\n   * @dev Internal function that burns an amount of the token of a given\\n   * account.\\n   * @param account The account whose tokens will be burnt.\\n   * @param value The amount that will be burnt.\\n   */\\n  function _burn(address account, uint256 value) internal {\\n    require(account != 0);\\n    require(value <= _balances[account]);\\n\\n    _totalSupply = _totalSupply.sub(value);\\n    _balances[account] = _balances[account].sub(value);\\n    emit Transfer(account, address(0), value);\\n  }\\n\\n  /**\\n   * @dev Internal function that burns an amount of the token of a given\\n   * account, deducting from the sender's allowance for said account. Uses the\\n   * internal burn function.\\n   * @param account The account whose tokens will be burnt.\\n   * @param value The amount that will be burnt.\\n   */\\n  function _burnFrom(address account, uint256 value) internal {\\n    require(value <= _allowed[account][msg.sender]);\\n\\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\\n    // this function needs to emit an event with the updated approval.\\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\\n      value);\\n    _burn(account, value);\\n  }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.24;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, reverts on overflow.\\n  */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b);\\n\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n  */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, reverts on overflow.\\n  */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a);\\n\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n  * reverts when dividing by zero.\\n  */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0);\\n    return a % b;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/0.4.24/nos/test_helpers/ERC20Mock.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\\";\\n\\n\\n/**\\n  * @dev This is a mock. Don't use in production.\\n  */\\ncontract ERC20Mock is ERC20 {\\n    function mint(address account, uint256 value) public {\\n        _mint(account, value);\\n    }\\n\\n    function burn(address account, uint256 value) public {\\n        _burn(account, value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/0.4.24/test_helpers/DepositContractMock.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2020 Lido <info@lido.fi>\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"../interfaces/IDepositContract.sol\\\";\\n\\n\\n/**\\n  * @dev This is a mock. Don't use in production.\\n  */\\ncontract DepositContractMock is IDepositContract {\\n    struct Call {\\n        bytes pubkey;\\n        bytes withdrawal_credentials;\\n        bytes signature;\\n        bytes32 deposit_data_root;\\n        uint256 value;\\n    }\\n\\n    Call[] public calls;\\n    bytes32 internal depositRoot;\\n\\n    function deposit(\\n        bytes /* 48 */ pubkey,\\n        bytes /* 32 */ withdrawal_credentials,\\n        bytes /* 96 */ signature,\\n        bytes32 deposit_data_root\\n    )\\n        external\\n        payable\\n    {\\n        calls.push(Call(pubkey, withdrawal_credentials, signature, deposit_data_root, msg.value));\\n    }\\n\\n    function totalCalls() external view returns (uint256) {\\n        return calls.length;\\n    }\\n\\n    function reset() external {\\n        calls.length = 0;\\n    }\\n\\n    function get_deposit_root() external view returns (bytes32) {\\n        return depositRoot;\\n    }\\n\\n    function set_deposit_root(bytes32 _newRoot) external {\\n        depositRoot = _newRoot;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"constantinople\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"depositContract\",\"type\":\"address\"},{\"name\":\"_oracle\",\"type\":\"address\"},{\"name\":\"_operators\",\"type\":\"address\"},{\"name\":\"_treasury\",\"type\":\"address\"},{\"name\":\"_insuranceFund\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInsuranceFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"getSharesByPooledEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperators\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEPOSIT_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEPOSIT_SIZE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalPooledEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PAUSE_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SET_ORACLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MANAGE_WITHDRAWAL_KEY\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBufferedEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SIGNATURE_LENGTH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWithdrawalCredentials\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFeeDistribution\",\"outputs\":[{\"name\":\"treasuryFeeBasisPoints\",\"type\":\"uint16\"},{\"name\":\"insuranceFeeBasisPoints\",\"type\":\"uint16\"},{\"name\":\"operatorsFeeBasisPoints\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sharesAmount\",\"type\":\"uint256\"}],\"name\":\"getPooledEthByShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_treasuryFeeBasisPoints\",\"type\":\"uint16\"},{\"name\":\"_insuranceFeeBasisPoints\",\"type\":\"uint16\"},{\"name\":\"_operatorsFeeBasisPoints\",\"type\":\"uint16\"}],\"name\":\"setFeeDistribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeBasisPoints\",\"type\":\"uint16\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxDeposits\",\"type\":\"uint256\"}],\"name\":\"depositBufferedEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MANAGE_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SET_TREASURY\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"submit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WITHDRAWAL_CREDENTIALS_LENGTH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PUBKEY_LENGTH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_pubkeyHash\",\"type\":\"bytes32\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDepositContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBeaconStat\",\"outputs\":[{\"name\":\"depositedValidators\",\"type\":\"uint256\"},{\"name\":\"beaconValidators\",\"type\":\"uint256\"},{\"name\":\"beaconBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BURN_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_insuranceFund\",\"type\":\"address\"}],\"name\":\"setInsuranceFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"name\":\"feeBasisPoints\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SET_INSURANCE_FUND\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_withdrawalCredentials\",\"type\":\"bytes32\"}],\"name\":\"setWithdrawalCredentials\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositBufferedEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_sharesAmount\",\"type\":\"uint256\"}],\"name\":\"burnShares\",\"outputs\":[{\"name\":\"newTotalShares\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beaconValidators\",\"type\":\"uint256\"},{\"name\":\"_beaconBalance\",\"type\":\"uint256\"}],\"name\":\"pushBeacon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"sharesOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Stopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Resumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"feeBasisPoints\",\"type\":\"uint16\"}],\"name\":\"FeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"treasuryFeeBasisPoints\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"insuranceFeeBasisPoints\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"operatorsFeeBasisPoints\",\"type\":\"uint16\"}],\"name\":\"FeeDistributionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"withdrawalCredentials\",\"type\":\"bytes32\"}],\"name\":\"WithdrawalCredentialsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"Submitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unbuffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sentFromBuffer\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"pubkeyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"}]","ContractName":"Lido","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"constantinople","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}