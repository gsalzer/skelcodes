{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright 2017-2021, bZeroX, LLC <https://bzx.network/>. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0.\r\n */\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/// @title A proxy interface for The Protocol\r\n/// @author bZeroX\r\n/// @notice This is just an interface, not to be deployed itself.\r\n/// @dev This interface is to be used for the protocol interactions.\r\ninterface IBZx {\r\n    ////// Protocol //////\r\n\r\n    /// @dev adds or replaces existing proxy module\r\n    /// @param target target proxy module address\r\n    function replaceContract(address target) external;\r\n\r\n    /// @dev updates all proxy modules addreses and function signatures.\r\n    /// sigsArr and targetsArr should be of equal length\r\n    /// @param sigsArr array of function signatures\r\n    /// @param targetsArr array of target proxy module addresses\r\n    function setTargets(\r\n        string[] calldata sigsArr,\r\n        address[] calldata targetsArr\r\n    ) external;\r\n\r\n    /// @dev returns protocol module address given a function signature\r\n    /// @return module address\r\n    function getTarget(string calldata sig) external view returns (address);\r\n\r\n    ////// Protocol Settings //////\r\n\r\n    /// @dev sets price feed contract address. The contract on the addres should implement IPriceFeeds interface\r\n    /// @param newContract module address for the IPriceFeeds implementation\r\n    function setPriceFeedContract(address newContract) external;\r\n\r\n    /// @dev sets swaps contract address. The contract on the addres should implement ISwapsImpl interface\r\n    /// @param newContract module address for the ISwapsImpl implementation\r\n    function setSwapsImplContract(address newContract) external;\r\n\r\n    /// @dev sets loan pool with assets. Accepts two arrays of equal length\r\n    /// @param pools array of address of pools\r\n    /// @param assets array of addresses of assets\r\n    function setLoanPool(address[] calldata pools, address[] calldata assets)\r\n        external;\r\n\r\n    /// @dev updates list of supported tokens, it can be use also to disable or enable particualr token\r\n    /// @param addrs array of address of pools\r\n    /// @param toggles array of addresses of assets\r\n    /// @param withApprovals resets tokens to unlimited approval with the swaps integration (kyber, etc.)\r\n    function setSupportedTokens(\r\n        address[] calldata addrs,\r\n        bool[] calldata toggles,\r\n        bool withApprovals\r\n    ) external;\r\n\r\n    /// @dev sets lending fee with WEI_PERCENT_PRECISION\r\n    /// @param newValue lending fee percent\r\n    function setLendingFeePercent(uint256 newValue) external;\r\n\r\n    /// @dev sets trading fee with WEI_PERCENT_PRECISION\r\n    /// @param newValue trading fee percent\r\n    function setTradingFeePercent(uint256 newValue) external;\r\n\r\n    /// @dev sets borrowing fee with WEI_PERCENT_PRECISION\r\n    /// @param newValue borrowing fee percent\r\n    function setBorrowingFeePercent(uint256 newValue) external;\r\n\r\n    /// @dev sets affiliate fee with WEI_PERCENT_PRECISION\r\n    /// @param newValue affiliate fee percent\r\n    function setAffiliateFeePercent(uint256 newValue) external;\r\n\r\n    /// @dev sets liquidation inncetive percent per loan per token. This is the profit percent\r\n    /// that liquidator gets in the process of liquidating.\r\n    /// @param loanTokens array list of loan tokens\r\n    /// @param collateralTokens array list of collateral tokens\r\n    /// @param amounts array list of liquidation inncetive amount\r\n    function setLiquidationIncentivePercent(\r\n        address[] calldata loanTokens,\r\n        address[] calldata collateralTokens,\r\n        uint256[] calldata amounts\r\n    ) external;\r\n\r\n    /// @dev sets max swap rate slippage percent.\r\n    /// @param newAmount max swap rate slippage percent.\r\n    function setMaxDisagreement(uint256 newAmount) external;\r\n\r\n    /// TODO\r\n    function setSourceBufferPercent(uint256 newAmount) external;\r\n\r\n    /// @dev sets maximum supported swap size in ETH\r\n    /// @param newAmount max swap size in ETH.\r\n    function setMaxSwapSize(uint256 newAmount) external;\r\n\r\n    /// @dev sets fee controller address\r\n    /// @param newController address of the new fees controller\r\n    function setFeesController(address newController) external;\r\n\r\n    /// @dev withdraws lending fees to receiver. Only can be called by feesController address\r\n    /// @param tokens array of token addresses.\r\n    /// @param receiver fees receiver address\r\n    /// @return amounts array of amounts withdrawn\r\n    function withdrawFees(\r\n        address[] calldata tokens,\r\n        address receiver,\r\n        FeeClaimType feeType\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    /// @dev withdraw protocol token (BZRX) from vesting contract vBZRX\r\n    /// @param receiver address of BZRX tokens claimed\r\n    /// @param amount of BZRX token to be claimed. max is claimed if amount is greater than balance.\r\n    /// @return rewardToken reward token address\r\n    /// @return withdrawAmount amount\r\n    function withdrawProtocolToken(address receiver, uint256 amount)\r\n        external\r\n        returns (address rewardToken, uint256 withdrawAmount);\r\n\r\n    /// @dev depozit protocol token (BZRX)\r\n    /// @param amount address of BZRX tokens to deposit\r\n    function depositProtocolToken(uint256 amount) external;\r\n\r\n    function grantRewards(address[] calldata users, uint256[] calldata amounts)\r\n        external\r\n        returns (uint256 totalAmount);\r\n\r\n    // NOTE: this doesn't sanitize inputs -> inaccurate values may be returned if there are duplicates tokens input\r\n    function queryFees(address[] calldata tokens, FeeClaimType feeType)\r\n        external\r\n        view\r\n        returns (uint256[] memory amountsHeld, uint256[] memory amountsPaid);\r\n\r\n    function priceFeeds() external view returns (address);\r\n\r\n    function swapsImpl() external view returns (address);\r\n\r\n    function logicTargets(bytes4) external view returns (address);\r\n\r\n    function loans(bytes32) external view returns (Loan memory);\r\n\r\n    function loanParams(bytes32) external view returns (LoanParams memory);\r\n\r\n    // we don't use this yet\r\n    // function lenderOrders(address, bytes32) external returns (Order memory);\r\n    // function borrowerOrders(address, bytes32) external returns (Order memory);\r\n\r\n    function delegatedManagers(bytes32, address) external view returns (bool);\r\n\r\n    function lenderInterest(address, address)\r\n        external\r\n        view\r\n        returns (LenderInterest memory);\r\n\r\n    function loanInterest(bytes32) external view returns (LoanInterest memory);\r\n\r\n    function feesController() external view returns (address);\r\n\r\n    function lendingFeePercent() external view returns (uint256);\r\n\r\n    function lendingFeeTokensHeld(address) external view returns (uint256);\r\n\r\n    function lendingFeeTokensPaid(address) external view returns (uint256);\r\n\r\n    function borrowingFeePercent() external view returns (uint256);\r\n\r\n    function borrowingFeeTokensHeld(address) external view returns (uint256);\r\n\r\n    function borrowingFeeTokensPaid(address) external view returns (uint256);\r\n\r\n    function protocolTokenHeld() external view returns (uint256);\r\n\r\n    function protocolTokenPaid() external view returns (uint256);\r\n\r\n    function affiliateFeePercent() external view returns (uint256);\r\n\r\n    function liquidationIncentivePercent(address, address)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function loanPoolToUnderlying(address) external view returns (address);\r\n\r\n    function underlyingToLoanPool(address) external view returns (address);\r\n\r\n    function supportedTokens(address) external view returns (bool);\r\n\r\n    function maxDisagreement() external view returns (uint256);\r\n\r\n    function sourceBufferPercent() external view returns (uint256);\r\n\r\n    function maxSwapSize() external view returns (uint256);\r\n\r\n    /// @dev get list of loan pools in the system. Ordering is not guaranteed\r\n    /// @param start start index\r\n    /// @param count number of pools to return\r\n    /// @return loanPoolsList array of loan pools\r\n    function getLoanPoolsList(uint256 start, uint256 count)\r\n        external\r\n        view\r\n        returns (address[] memory loanPoolsList);\r\n\r\n    /// @dev checks whether addreess is a loan pool address\r\n    /// @return boolean\r\n    function isLoanPool(address loanPool) external view returns (bool);\r\n\r\n    ////// Loan Settings //////\r\n\r\n    /// @dev creates new loan param settings\r\n    /// @param loanParamsList array of LoanParams\r\n    /// @return loanParamsIdList array of loan ids created\r\n    function setupLoanParams(LoanParams[] calldata loanParamsList)\r\n        external\r\n        returns (bytes32[] memory loanParamsIdList);\r\n\r\n    /// @dev Deactivates LoanParams for future loans. Active loans using it are unaffected.\r\n    /// @param loanParamsIdList array of loan ids\r\n    function disableLoanParams(bytes32[] calldata loanParamsIdList) external;\r\n\r\n    /// @dev gets array of LoanParams by given ids\r\n    /// @param loanParamsIdList array of loan ids\r\n    /// @return loanParamsList array of LoanParams\r\n    function getLoanParams(bytes32[] calldata loanParamsIdList)\r\n        external\r\n        view\r\n        returns (LoanParams[] memory loanParamsList);\r\n\r\n    /// @dev Enumerates LoanParams in the system by owner\r\n    /// @param owner of the loan params\r\n    /// @param start number of loans to return\r\n    /// @param count total number of the items\r\n    /// @return loanParamsList array of LoanParams\r\n    function getLoanParamsList(\r\n        address owner,\r\n        uint256 start,\r\n        uint256 count\r\n    ) external view returns (bytes32[] memory loanParamsList);\r\n\r\n    /// @dev returns total loan principal for token address\r\n    /// @param lender address\r\n    /// @param loanToken address\r\n    /// @return total principal of the loan\r\n    function getTotalPrincipal(address lender, address loanToken)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    ////// Loan Openings //////\r\n\r\n    /// @dev This is THE function that borrows or trades on the protocol\r\n    /// @param loanParamsId id of the LoanParam created beforehand by setupLoanParams function\r\n    /// @param loanId id of existing loan, if 0, start a new loan\r\n    /// @param isTorqueLoan boolean whether it is toreque or non torque loan\r\n    /// @param initialMargin in WEI_PERCENT_PRECISION\r\n    /// @param sentAddresses array of size 4:\r\n    ///         lender: must match loan if loanId provided\r\n    ///         borrower: must match loan if loanId provided\r\n    ///         receiver: receiver of funds (address(0) assumes borrower address)\r\n    ///         manager: delegated manager of loan unless address(0)\r\n    /// @param sentValues array of size 5:\r\n    ///         newRate: new loan interest rate\r\n    ///         newPrincipal: new loan size (borrowAmount + any borrowed interest)\r\n    ///         torqueInterest: new amount of interest to escrow for Torque loan (determines initial loan length)\r\n    ///         loanTokenReceived: total loanToken deposit (amount not sent to borrower in the case of Torque loans)\r\n    ///         collateralTokenReceived: total collateralToken deposit\r\n    /// @param loanDataBytes required when sending ether\r\n    /// @return principal of the loan and collateral amount\r\n    function borrowOrTradeFromPool(\r\n        bytes32 loanParamsId,\r\n        bytes32 loanId,\r\n        bool isTorqueLoan,\r\n        uint256 initialMargin,\r\n        address[4] calldata sentAddresses,\r\n        uint256[5] calldata sentValues,\r\n        bytes calldata loanDataBytes\r\n    ) external payable returns (LoanOpenData memory);\r\n\r\n    /// @dev sets/disables/enables the delegated manager for the loan\r\n    /// @param loanId id of the loan\r\n    /// @param delegated delegated manager address\r\n    /// @param toggle boolean set enabled or disabled\r\n    function setDelegatedManager(\r\n        bytes32 loanId,\r\n        address delegated,\r\n        bool toggle\r\n    ) external;\r\n\r\n    /// @dev estimates margin exposure for simulated position\r\n    /// @param loanToken address of the loan token\r\n    /// @param collateralToken address of collateral token\r\n    /// @param loanTokenSent amout of loan token sent\r\n    /// @param collateralTokenSent amount of collateral token sent\r\n    /// @param interestRate yearly interest rate\r\n    /// @param newPrincipal principal amount of the loan\r\n    /// @return estimated margin exposure amount\r\n    function getEstimatedMarginExposure(\r\n        address loanToken,\r\n        address collateralToken,\r\n        uint256 loanTokenSent,\r\n        uint256 collateralTokenSent,\r\n        uint256 interestRate,\r\n        uint256 newPrincipal\r\n    ) external view returns (uint256);\r\n\r\n    /// @dev calculates required collateral for simulated position\r\n    /// @param loanToken address of loan token\r\n    /// @param collateralToken address of collateral token\r\n    /// @param newPrincipal principal amount of the loan\r\n    /// @param marginAmount margin amount of the loan\r\n    /// @param isTorqueLoan boolean torque or non torque loan\r\n    /// @return collateralAmountRequired amount required\r\n    function getRequiredCollateral(\r\n        address loanToken,\r\n        address collateralToken,\r\n        uint256 newPrincipal,\r\n        uint256 marginAmount,\r\n        bool isTorqueLoan\r\n    ) external view returns (uint256 collateralAmountRequired);\r\n\r\n    function getRequiredCollateralByParams(\r\n        bytes32 loanParamsId,\r\n        uint256 newPrincipal\r\n    ) external view returns (uint256 collateralAmountRequired);\r\n\r\n    /// @dev calculates borrow amount for simulated position\r\n    /// @param loanToken address of loan token\r\n    /// @param collateralToken address of collateral token\r\n    /// @param collateralTokenAmount amount of collateral token sent\r\n    /// @param marginAmount margin amount\r\n    /// @param isTorqueLoan boolean torque or non torque loan\r\n    /// @return borrowAmount possible borrow amount\r\n    function getBorrowAmount(\r\n        address loanToken,\r\n        address collateralToken,\r\n        uint256 collateralTokenAmount,\r\n        uint256 marginAmount,\r\n        bool isTorqueLoan\r\n    ) external view returns (uint256 borrowAmount);\r\n\r\n    function getBorrowAmountByParams(\r\n        bytes32 loanParamsId,\r\n        uint256 collateralTokenAmount\r\n    ) external view returns (uint256 borrowAmount);\r\n\r\n    ////// Loan Closings //////\r\n\r\n    /// @dev liquidates unhealty loans\r\n    /// @param loanId id of the loan\r\n    /// @param receiver address receiving liquidated loan collateral\r\n    /// @param closeAmount amount to close denominated in loanToken\r\n    /// @return loanCloseAmount amount of the collateral token of the loan\r\n    /// @return seizedAmount sezied amount in the collateral token\r\n    /// @return seizedToken loan token address\r\n    function liquidate(\r\n        bytes32 loanId,\r\n        address receiver,\r\n        uint256 closeAmount\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 loanCloseAmount,\r\n            uint256 seizedAmount,\r\n            address seizedToken\r\n        );\r\n\r\n    /// @dev rollover loan\r\n    /// @param loanId id of the loan\r\n    /// @param loanDataBytes reserved for future use.\r\n    function rollover(bytes32 loanId, bytes calldata loanDataBytes)\r\n        external\r\n        returns (address rebateToken, uint256 gasRebate);\r\n\r\n    /// @dev close position with loan token deposit\r\n    /// @param loanId id of the loan\r\n    /// @param receiver collateral token reciever address\r\n    /// @param depositAmount amount of loan token to deposit\r\n    /// @return loanCloseAmount loan close amount\r\n    /// @return withdrawAmount loan token withdraw amount\r\n    /// @return withdrawToken loan token address\r\n    function closeWithDeposit(\r\n        bytes32 loanId,\r\n        address receiver,\r\n        uint256 depositAmount // denominated in loanToken\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 loanCloseAmount,\r\n            uint256 withdrawAmount,\r\n            address withdrawToken\r\n        );\r\n\r\n    /// @dev close position with swap\r\n    /// @param loanId id of the loan\r\n    /// @param receiver collateral token reciever address\r\n    /// @param swapAmount amount of loan token to swap\r\n    /// @param returnTokenIsCollateral boolean whether to return tokens is collateral\r\n    /// @param loanDataBytes reserved for future use\r\n    /// @return loanCloseAmount loan close amount\r\n    /// @return withdrawAmount loan token withdraw amount\r\n    /// @return withdrawToken loan token address\r\n    function closeWithSwap(\r\n        bytes32 loanId,\r\n        address receiver,\r\n        uint256 swapAmount, // denominated in collateralToken\r\n        bool returnTokenIsCollateral, // true: withdraws collateralToken, false: withdraws loanToken\r\n        bytes calldata loanDataBytes\r\n    )\r\n        external\r\n        returns (\r\n            uint256 loanCloseAmount,\r\n            uint256 withdrawAmount,\r\n            address withdrawToken\r\n        );\r\n\r\n    ////// Loan Closings With Gas Token //////\r\n\r\n    /// @dev liquidates unhealty loans by using Gas token\r\n    /// @param loanId id of the loan\r\n    /// @param receiver address receiving liquidated loan collateral\r\n    /// @param gasTokenUser user address of the GAS token\r\n    /// @param closeAmount amount to close denominated in loanToken\r\n    /// @return loanCloseAmount loan close amount\r\n    /// @return seizedAmount loan token withdraw amount\r\n    /// @return seizedToken loan token address\r\n    function liquidateWithGasToken(\r\n        bytes32 loanId,\r\n        address receiver,\r\n        address gasTokenUser,\r\n        uint256 closeAmount // denominated in loanToken\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 loanCloseAmount,\r\n            uint256 seizedAmount,\r\n            address seizedToken\r\n        );\r\n\r\n    /// @dev rollover loan\r\n    /// @param loanId id of the loan\r\n    /// @param gasTokenUser user address of the GAS token\r\n    function rolloverWithGasToken(\r\n        bytes32 loanId,\r\n        address gasTokenUser,\r\n        bytes calldata /*loanDataBytes*/\r\n    ) external returns (address rebateToken, uint256 gasRebate);\r\n\r\n    /// @dev close position with loan token deposit\r\n    /// @param loanId id of the loan\r\n    /// @param receiver collateral token reciever address\r\n    /// @param gasTokenUser user address of the GAS token\r\n    /// @param depositAmount amount of loan token to deposit denominated in loanToken\r\n    /// @return loanCloseAmount loan close amount\r\n    /// @return withdrawAmount loan token withdraw amount\r\n    /// @return withdrawToken loan token address\r\n    function closeWithDepositWithGasToken(\r\n        bytes32 loanId,\r\n        address receiver,\r\n        address gasTokenUser,\r\n        uint256 depositAmount\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 loanCloseAmount,\r\n            uint256 withdrawAmount,\r\n            address withdrawToken\r\n        );\r\n\r\n    /// @dev close position with swap\r\n    /// @param loanId id of the loan\r\n    /// @param receiver collateral token reciever address\r\n    /// @param gasTokenUser user address of the GAS token\r\n    /// @param swapAmount amount of loan token to swap denominated in collateralToken\r\n    /// @param returnTokenIsCollateral  true: withdraws collateralToken, false: withdraws loanToken\r\n    /// @return loanCloseAmount loan close amount\r\n    /// @return withdrawAmount loan token withdraw amount\r\n    /// @return withdrawToken loan token address\r\n    function closeWithSwapWithGasToken(\r\n        bytes32 loanId,\r\n        address receiver,\r\n        address gasTokenUser,\r\n        uint256 swapAmount,\r\n        bool returnTokenIsCollateral,\r\n        bytes calldata loanDataBytes\r\n    )\r\n        external\r\n        returns (\r\n            uint256 loanCloseAmount,\r\n            uint256 withdrawAmount,\r\n            address withdrawToken\r\n        );\r\n\r\n    ////// Loan Maintenance //////\r\n\r\n    /// @dev deposit collateral to existing loan\r\n    /// @param loanId existing loan id\r\n    /// @param depositAmount amount to deposit which must match msg.value if ether is sent\r\n    function depositCollateral(bytes32 loanId, uint256 depositAmount)\r\n        external\r\n        payable;\r\n\r\n    /// @dev withdraw collateral from existing loan\r\n    /// @param loanId existing lona id\r\n    /// @param receiver address of withdrawn tokens\r\n    /// @param withdrawAmount amount to withdraw\r\n    /// @return actualWithdrawAmount actual amount withdrawn\r\n    function withdrawCollateral(\r\n        bytes32 loanId,\r\n        address receiver,\r\n        uint256 withdrawAmount\r\n    ) external returns (uint256 actualWithdrawAmount);\r\n\r\n    /// @dev withdraw accrued interest rate for a loan given token address\r\n    /// @param loanToken loan token address\r\n    function withdrawAccruedInterest(address loanToken) external;\r\n\r\n    /// @dev extends loan duration by depositing more collateral\r\n    /// @param loanId id of the existing loan\r\n    /// @param depositAmount amount to deposit\r\n    /// @param useCollateral boolean whether to extend using collateral or deposit amount\r\n    /// @return secondsExtended by that number of seconds loan duration was extended\r\n    function extendLoanDuration(\r\n        bytes32 loanId,\r\n        uint256 depositAmount,\r\n        bool useCollateral,\r\n        bytes calldata // for future use /*loanDataBytes*/\r\n    ) external payable returns (uint256 secondsExtended);\r\n\r\n    /// @dev reduces loan duration by withdrawing collateral\r\n    /// @param loanId id of the existing loan\r\n    /// @param receiver address to receive tokens\r\n    /// @param withdrawAmount amount to withdraw\r\n    /// @return secondsReduced by that number of seconds loan duration was extended\r\n    function reduceLoanDuration(\r\n        bytes32 loanId,\r\n        address receiver,\r\n        uint256 withdrawAmount\r\n    ) external returns (uint256 secondsReduced);\r\n\r\n    function setDepositAmount(\r\n        bytes32 loanId,\r\n        uint256 depositValueAsLoanToken,\r\n        uint256 depositValueAsCollateralToken\r\n    ) external;\r\n\r\n    function claimRewards(address receiver)\r\n        external\r\n        returns (uint256 claimAmount);\r\n\r\n    function transferLoan(bytes32 loanId, address newOwner) external;\r\n\r\n    function rewardsBalanceOf(address user)\r\n        external\r\n        view\r\n        returns (uint256 rewardsBalance);\r\n\r\n    /// @dev Gets current lender interest data totals for all loans with a specific oracle and interest token\r\n    /// @param lender The lender address\r\n    /// @param loanToken The loan token address\r\n    /// @return interestPaid The total amount of interest that has been paid to a lender so far\r\n    /// @return interestPaidDate The date of the last interest pay out, or 0 if no interest has been withdrawn yet\r\n    /// @return interestOwedPerDay The amount of interest the lender is earning per day\r\n    /// @return interestUnPaid The total amount of interest the lender is owned and not yet withdrawn\r\n    /// @return interestFeePercent The fee retained by the protocol before interest is paid to the lender\r\n    /// @return principalTotal The total amount of outstading principal the lender has loaned\r\n    function getLenderInterestData(address lender, address loanToken)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 interestPaid,\r\n            uint256 interestPaidDate,\r\n            uint256 interestOwedPerDay,\r\n            uint256 interestUnPaid,\r\n            uint256 interestFeePercent,\r\n            uint256 principalTotal\r\n        );\r\n\r\n    /// @dev Gets current interest data for a loan\r\n    /// @param loanId A unique id representing the loan\r\n    /// @return loanToken The loan token that interest is paid in\r\n    /// @return interestOwedPerDay The amount of interest the borrower is paying per day\r\n    /// @return interestDepositTotal The total amount of interest the borrower has deposited\r\n    /// @return interestDepositRemaining The amount of deposited interest that is not yet owed to a lender\r\n    function getLoanInterestData(bytes32 loanId)\r\n        external\r\n        view\r\n        returns (\r\n            address loanToken,\r\n            uint256 interestOwedPerDay,\r\n            uint256 interestDepositTotal,\r\n            uint256 interestDepositRemaining\r\n        );\r\n\r\n    /// @dev gets list of loans of particular user address\r\n    /// @param user address of the loans\r\n    /// @param start of the index\r\n    /// @param count number of loans to return\r\n    /// @param loanType type of the loan: All(0), Margin(1), NonMargin(2)\r\n    /// @param isLender whether to list lender loans or borrower loans\r\n    /// @param unsafeOnly booleat if true return only unsafe loans that are open for liquidation\r\n    /// @return loansData LoanReturnData array of loans\r\n    function getUserLoans(\r\n        address user,\r\n        uint256 start,\r\n        uint256 count,\r\n        LoanType loanType,\r\n        bool isLender,\r\n        bool unsafeOnly\r\n    ) external view returns (LoanReturnData[] memory loansData);\r\n\r\n    function getUserLoansCount(address user, bool isLender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /// @dev gets existing loan\r\n    /// @param loanId id of existing loan\r\n    /// @return loanData array of loans\r\n    function getLoan(bytes32 loanId)\r\n        external\r\n        view\r\n        returns (LoanReturnData memory loanData);\r\n\r\n    /// @dev get current active loans in the system\r\n    /// @param start of the index\r\n    /// @param count number of loans to return\r\n    /// @param unsafeOnly boolean if true return unsafe loan only (open for liquidation)\r\n    function getActiveLoans(\r\n        uint256 start,\r\n        uint256 count,\r\n        bool unsafeOnly\r\n    ) external view returns (LoanReturnData[] memory loansData);\r\n\r\n    /// @dev get current active loans in the system\r\n    /// @param start of the index\r\n    /// @param count number of loans to return\r\n    /// @param unsafeOnly boolean if true return unsafe loan only (open for liquidation)\r\n    /// @param isLiquidatable boolean if true return liquidatable loans only\r\n    function getActiveLoansAdvanced(\r\n        uint256 start,\r\n        uint256 count,\r\n        bool unsafeOnly,\r\n        bool isLiquidatable\r\n    ) external view returns (LoanReturnData[] memory loansData);\r\n\r\n    function getActiveLoansCount() external view returns (uint256);\r\n\r\n    ////// Swap External //////\r\n\r\n    /// @dev swap thru external integration\r\n    /// @param sourceToken source token address\r\n    /// @param destToken destintaion token address\r\n    /// @param receiver address to receive tokens\r\n    /// @param returnToSender TODO\r\n    /// @param sourceTokenAmount source token amount\r\n    /// @param requiredDestTokenAmount destination token amount\r\n    /// @param swapData TODO\r\n    /// @return destTokenAmountReceived destination token received\r\n    /// @return sourceTokenAmountUsed source token amount used\r\n    function swapExternal(\r\n        address sourceToken,\r\n        address destToken,\r\n        address receiver,\r\n        address returnToSender,\r\n        uint256 sourceTokenAmount,\r\n        uint256 requiredDestTokenAmount,\r\n        bytes calldata swapData\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 destTokenAmountReceived,\r\n            uint256 sourceTokenAmountUsed\r\n        );\r\n\r\n    /// @dev swap thru external integration using GAS\r\n    /// @param sourceToken source token address\r\n    /// @param destToken destintaion token address\r\n    /// @param receiver address to receive tokens\r\n    /// @param returnToSender TODO\r\n    /// @param gasTokenUser user address of the GAS token\r\n    /// @param sourceTokenAmount source token amount\r\n    /// @param requiredDestTokenAmount destination token amount\r\n    /// @param swapData TODO\r\n    /// @return destTokenAmountReceived destination token received\r\n    /// @return sourceTokenAmountUsed source token amount used\r\n    function swapExternalWithGasToken(\r\n        address sourceToken,\r\n        address destToken,\r\n        address receiver,\r\n        address returnToSender,\r\n        address gasTokenUser,\r\n        uint256 sourceTokenAmount,\r\n        uint256 requiredDestTokenAmount,\r\n        bytes calldata swapData\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 destTokenAmountReceived,\r\n            uint256 sourceTokenAmountUsed\r\n        );\r\n\r\n    /// @dev calculate simulated return of swap\r\n    /// @param sourceToken source token address\r\n    /// @param destToken destination token address\r\n    /// @param sourceTokenAmount source token amount\r\n    /// @return amoun denominated in destination token\r\n    function getSwapExpectedReturn(\r\n        address sourceToken,\r\n        address destToken,\r\n        uint256 sourceTokenAmount\r\n    ) external view returns (uint256);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    struct LoanParams {\r\n        bytes32 id;\r\n        bool active;\r\n        address owner;\r\n        address loanToken;\r\n        address collateralToken;\r\n        uint256 minInitialMargin;\r\n        uint256 maintenanceMargin;\r\n        uint256 maxLoanTerm;\r\n    }\r\n\r\n    struct LoanOpenData {\r\n        bytes32 loanId;\r\n        uint256 principal;\r\n        uint256 collateral;\r\n    }\r\n\r\n    enum LoanType {\r\n        All,\r\n        Margin,\r\n        NonMargin\r\n    }\r\n\r\n    struct LoanReturnData {\r\n        bytes32 loanId;\r\n        uint96 endTimestamp;\r\n        address loanToken;\r\n        address collateralToken;\r\n        uint256 principal;\r\n        uint256 collateral;\r\n        uint256 interestOwedPerDay;\r\n        uint256 interestDepositRemaining;\r\n        uint256 startRate;\r\n        uint256 startMargin;\r\n        uint256 maintenanceMargin;\r\n        uint256 currentMargin;\r\n        uint256 maxLoanTerm;\r\n        uint256 maxLiquidatable;\r\n        uint256 maxSeizable;\r\n        uint256 depositValueAsLoanToken;\r\n        uint256 depositValueAsCollateralToken;\r\n    }\r\n\r\n    enum FeeClaimType {\r\n        All,\r\n        Lending,\r\n        Trading,\r\n        Borrowing\r\n    }\r\n\r\n    struct Loan {\r\n        bytes32 id; // id of the loan\r\n        bytes32 loanParamsId; // the linked loan params id\r\n        bytes32 pendingTradesId; // the linked pending trades id\r\n        uint256 principal; // total borrowed amount outstanding\r\n        uint256 collateral; // total collateral escrowed for the loan\r\n        uint256 startTimestamp; // loan start time\r\n        uint256 endTimestamp; // for active loans, this is the expected loan end time, for in-active loans, is the actual (past) end time\r\n        uint256 startMargin; // initial margin when the loan opened\r\n        uint256 startRate; // reference rate when the loan opened for converting collateralToken to loanToken\r\n        address borrower; // borrower of this loan\r\n        address lender; // lender of this loan\r\n        bool active; // if false, the loan has been fully closed\r\n    }\r\n\r\n    struct LenderInterest {\r\n        uint256 principalTotal; // total borrowed amount outstanding of asset\r\n        uint256 owedPerDay; // interest owed per day for all loans of asset\r\n        uint256 owedTotal; // total interest owed for all loans of asset (assuming they go to full term)\r\n        uint256 paidTotal; // total interest paid so far for asset\r\n        uint256 updatedTimestamp; // last update\r\n    }\r\n\r\n    struct LoanInterest {\r\n        uint256 owedPerDay; // interest owed per day for loan\r\n        uint256 depositTotal; // total escrowed interest for loan\r\n        uint256 updatedTimestamp; // last update\r\n    }\r\n}\r\n\r\ninterface IERC20Burnable is IERC20 {\r\n    function burn(uint256 amount) external;\r\n}\r\n\r\ncontract Upgradeable is Ownable {\r\n    address public implementation;\r\n}\r\n\r\ninterface IWeth {\r\n    function deposit() external payable;\r\n    function withdraw(uint256 wad) external;\r\n}\r\n\r\ninterface IWethERC20 is IWeth, IERC20 {}\r\n\r\ninterface IUniswapV2Router {\r\n    // 0x38ed1739\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline)\r\n        external\r\n        returns (uint256[] memory amounts);\r\n\r\n    // 0x8803dbee\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline)\r\n        external\r\n        returns (uint256[] memory amounts);\r\n\r\n    // 0x1f00ca74\r\n    function getAmountsIn(\r\n        uint256 amountOut,\r\n        address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    // 0xd06ca61f\r\n    function getAmountsOut(\r\n        uint256 amountIn,\r\n        address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IMasterChefPartial {\r\n    function addExternalReward(\r\n        uint256 _amount)\r\n        external;\r\n\r\n    function addAltReward()\r\n        external\r\n        payable;\r\n\r\n    event AddExternalReward(\r\n        address indexed sender,\r\n        uint256 indexed pid,\r\n        uint256 amount\r\n    );\r\n\r\n    event AddAltReward(\r\n        address indexed sender,\r\n        uint256 indexed pid,\r\n        uint256 amount\r\n    );\r\n}\r\n\r\ninterface IPriceFeeds {\r\n    function queryRate(\r\n        address sourceToken,\r\n        address destToken)\r\n        external\r\n        view\r\n        returns (uint256 rate, uint256 precision);\r\n\r\n    function queryReturn(\r\n        address sourceToken,\r\n        address destToken,\r\n        uint256 sourceAmount)\r\n        external\r\n        view\r\n        returns (uint256 destAmount);\r\n}\r\n\r\ninterface IStakingPartial {\r\n\r\n    function pendingSushiRewards(address _user)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getCurrentFeeTokens()\r\n        external\r\n        view\r\n        returns (address[] memory);\r\n\r\n    function maxUniswapDisagreement()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    //Temporary, will remove it after migrationn\r\n    function stakingRewards(address)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function isPaused()\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function fundsWallet()\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n\r\n    function callerRewardDivisor()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n\r\n    function maxCurveDisagreement()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function rewardPercent()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function addRewards(uint256 newBZRX, uint256 newStableCoin)\r\n        external;\r\n\r\n    function stake(\r\n        address[] calldata tokens,\r\n        uint256[] calldata values\r\n    )\r\n        external;\r\n\r\n    function stake(\r\n        address[] calldata tokens,\r\n        uint256[] calldata values,\r\n        bool claimSushi\r\n    )\r\n        external;\r\n\r\n    function unstake(\r\n        address[] calldata tokens,\r\n        uint256[] calldata values\r\n    )\r\n        external;\r\n\r\n    function unstake(\r\n        address[] memory tokens,\r\n        uint256[] memory values,\r\n        bool claimSushi\r\n    )\r\n        external;\r\n\r\n    function earned(address account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 bzrxRewardsEarned,\r\n            uint256 stableCoinRewardsEarned,\r\n            uint256 bzrxRewardsVesting,\r\n            uint256 stableCoinRewardsVesting\r\n        );\r\n\r\n    function getVariableWeights()\r\n        external\r\n        view\r\n        returns (uint256 vBZRXWeight, uint256 iBZRXWeight, uint256 LPTokenWeight);\r\n\r\n    function balanceOfByAsset(\r\n        address token,\r\n        address account)\r\n        external\r\n        view\r\n        returns (uint256 balance);\r\n\r\n    function balanceOfByAssets(\r\n        address account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 bzrxBalance,\r\n            uint256 iBZRXBalance,\r\n            uint256 vBZRXBalance,\r\n            uint256 LPTokenBalance,\r\n            uint256 LPTokenBalanceOld\r\n        );\r\n\r\n    function balanceOfStored(\r\n        address account)\r\n        external\r\n        view\r\n        returns (uint256 vestedBalance, uint256 vestingBalance);\r\n\r\n    function totalSupplyStored()\r\n        external\r\n        view\r\n        returns (uint256 supply);\r\n\r\n    function vestedBalanceForAmount(\r\n        uint256 tokenBalance,\r\n        uint256 lastUpdate,\r\n        uint256 vestingEndTime)\r\n        external\r\n        view\r\n        returns (uint256 vested);\r\n\r\n    function votingBalanceOf(\r\n        address account,\r\n        uint256 proposalId)\r\n        external\r\n        view\r\n        returns (uint256 totalVotes);\r\n\r\n    function votingBalanceOfNow(\r\n        address account)\r\n        external\r\n        view\r\n        returns (uint256 totalVotes);\r\n\r\n    function _setProposalVals(\r\n        address account,\r\n        uint256 proposalId)\r\n        external\r\n        returns (uint256);\r\n\r\n    function exit()\r\n        external;\r\n\r\n    function addAltRewards(address token, uint256 amount)\r\n        external;\r\n\r\n    function pendingAltRewards(address token, address _user)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n}\r\n\r\ninterface ICurve3Pool {\r\n    function add_liquidity(\r\n        uint256[3] calldata amounts,\r\n        uint256 min_mint_amount)\r\n        external;\r\n\r\n    function get_virtual_price()\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\ncontract FeeExtractAndDistribute_ETH is Upgradeable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IStakingPartial public constant STAKING = IStakingPartial(0xe95Ebce2B02Ee07dEF5Ed6B53289801F7Fc137A4);\r\n\r\n    address public constant BZRX = 0x56d811088235F11C8920698a204A5010a788f4b3;\r\n    address public constant vBZRX = 0xB72B31907C1C95F3650b64b2469e08EdACeE5e8F;\r\n    address public constant iBZRX = 0x18240BD9C07fA6156Ce3F3f61921cC82b2619157;\r\n    address public constant LPToken = 0xa30911e072A0C88D55B5D0A0984B66b0D04569d0; // sushiswap\r\n    address public constant LPTokenOld = 0xe26A220a341EAca116bDa64cF9D5638A935ae629; // balancer\r\n    IERC20 public constant curve3Crv = IERC20(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\r\n\r\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address public constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    address public constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address public constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    address public constant SUSHI = 0x6B3595068778DD592e39A122f4f5a5cF09C90fE2;\r\n\r\n    IUniswapV2Router public constant uniswapRouter = IUniswapV2Router(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F); // sushiswap\r\n    ICurve3Pool public constant curve3pool = ICurve3Pool(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\r\n    IBZx public constant bZx = IBZx(0xD8Ee69652E4e4838f2531732a46d1f7F584F0b7f);\r\n\r\n    mapping(address => address[]) public swapPaths;\r\n    mapping(address => uint256) public stakingRewards;\r\n\r\n    event ExtractAndDistribute();\r\n\r\n    event WithdrawFees(\r\n        address indexed sender\r\n    );\r\n\r\n    event DistributeFees(\r\n        address indexed sender,\r\n        uint256 bzrxRewards,\r\n        uint256 stableCoinRewards\r\n    );\r\n\r\n    event ConvertFees(\r\n        address indexed sender,\r\n        uint256 bzrxOutput,\r\n        uint256 stableCoinOutput\r\n    );\r\n\r\n    modifier onlyEOA() {\r\n        require(msg.sender == tx.origin, \"unauthorized\");\r\n        _;\r\n    }\r\n\r\n    modifier checkPause() {\r\n        require(!STAKING.isPaused() || msg.sender == owner(), \"paused\");\r\n        _;\r\n    }\r\n\r\n\r\n\r\n    // Fee Conversion Logic //\r\n\r\n    function sweepFees()\r\n        public\r\n        // sweepFeesByAsset() does checkPause\r\n        returns (uint256 bzrxRewards, uint256 crv3Rewards)\r\n    {\r\n        return sweepFeesByAsset(STAKING.getCurrentFeeTokens());\r\n    }\r\n\r\n    function sweepFeesByAsset(address[] memory assets)\r\n        public\r\n        checkPause\r\n        onlyEOA\r\n        returns (uint256 bzrxRewards, uint256 crv3Rewards)\r\n    {\r\n        uint256[] memory amounts = _withdrawFees(assets);\r\n        _convertFees(assets, amounts);\r\n        (bzrxRewards, crv3Rewards) = _distributeFees();\r\n    }\r\n\r\n    function _withdrawFees(address[] memory assets)\r\n        internal\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256[] memory amounts = bZx.withdrawFees(assets, address(this), IBZx.FeeClaimType.All);\r\n\r\n        for (uint256 i = 0; i < assets.length; i++) {\r\n            stakingRewards[assets[i]] = stakingRewards[assets[i]].add(amounts[i]);\r\n        }\r\n\r\n        emit WithdrawFees(\r\n            msg.sender\r\n        );\r\n\r\n        return amounts;\r\n    }\r\n\r\n    function _convertFees(\r\n        address[] memory assets,\r\n        uint256[] memory amounts)\r\n        internal\r\n        returns (uint256 bzrxOutput, uint256 crv3Output)\r\n    {\r\n        require(assets.length == amounts.length, \"count mismatch\");\r\n\r\n        IPriceFeeds priceFeeds = IPriceFeeds(bZx.priceFeeds());\r\n        (uint256 bzrxRate,) = priceFeeds.queryRate(\r\n            BZRX,\r\n            WETH\r\n        );\r\n        uint256 maxDisagreement = STAKING.maxUniswapDisagreement();\r\n\r\n        address asset;\r\n        uint256 daiAmount;\r\n        uint256 usdcAmount;\r\n        uint256 usdtAmount;\r\n        for (uint256 i = 0; i < assets.length; i++) {\r\n            asset = assets[i];\r\n            if (asset == BZRX) {\r\n                continue;\r\n            } else if (asset == DAI) {\r\n                daiAmount = daiAmount.add(amounts[i]);\r\n                continue;\r\n            } else if (asset == USDC) {\r\n                usdcAmount = usdcAmount.add(amounts[i]);\r\n                continue;\r\n            } else if (asset == USDT) {\r\n                usdtAmount = usdtAmount.add(amounts[i]);\r\n                continue;\r\n            }\r\n\r\n            if (amounts[i] != 0) {\r\n                bzrxOutput += _convertFeeWithUniswap(asset, amounts[i], priceFeeds, bzrxRate, maxDisagreement);\r\n            }\r\n        }\r\n        if (bzrxOutput != 0) {\r\n            stakingRewards[BZRX] = stakingRewards[BZRX].add(bzrxOutput);\r\n        }\r\n\r\n        if (daiAmount != 0 || usdcAmount != 0 || usdtAmount != 0) {\r\n            crv3Output = _convertFeesWithCurve(\r\n                daiAmount,\r\n                usdcAmount,\r\n                usdtAmount\r\n            );\r\n            stakingRewards[address(curve3Crv)] = stakingRewards[address(curve3Crv)].add(crv3Output);\r\n        }\r\n\r\n        emit ConvertFees(\r\n            msg.sender,\r\n            bzrxOutput,\r\n            crv3Output\r\n        );\r\n    }\r\n\r\n    function _distributeFees()\r\n        internal\r\n        returns (uint256 bzrxRewards, uint256 crv3Rewards)\r\n    {\r\n        bzrxRewards = stakingRewards[BZRX];\r\n        crv3Rewards = stakingRewards[address(curve3Crv)];\r\n        if (bzrxRewards != 0 || crv3Rewards != 0) {\r\n            address _fundsWallet = STAKING.fundsWallet();\r\n            uint256 rewardAmount;\r\n            uint256 callerReward;\r\n            if (bzrxRewards != 0) {\r\n                stakingRewards[BZRX] = 0;\r\n                rewardAmount = bzrxRewards\r\n                    .mul(STAKING.rewardPercent())\r\n                    .div(1e20);\r\n                IERC20(BZRX).transfer(\r\n                    _fundsWallet,\r\n                    bzrxRewards - rewardAmount\r\n                );\r\n                bzrxRewards = rewardAmount;\r\n\r\n                callerReward = bzrxRewards / STAKING.callerRewardDivisor();\r\n                IERC20(BZRX).transfer(\r\n                    msg.sender,\r\n                    callerReward\r\n                );\r\n                bzrxRewards = bzrxRewards\r\n                    .sub(callerReward);\r\n            }\r\n            if (crv3Rewards != 0) {\r\n                stakingRewards[address(curve3Crv)] = 0;\r\n\r\n                rewardAmount = crv3Rewards\r\n                    .mul(STAKING.rewardPercent())\r\n                    .div(1e20);\r\n                curve3Crv.transfer(\r\n                    _fundsWallet,\r\n                    crv3Rewards - rewardAmount\r\n                );\r\n                crv3Rewards = rewardAmount;\r\n\r\n                callerReward = crv3Rewards / STAKING.callerRewardDivisor();\r\n                curve3Crv.transfer(\r\n                    msg.sender,\r\n                    callerReward\r\n                );\r\n                crv3Rewards = crv3Rewards\r\n                    .sub(callerReward);\r\n            }\r\n            STAKING.addRewards(bzrxRewards, crv3Rewards);\r\n        }\r\n\r\n        emit DistributeFees(\r\n            msg.sender,\r\n            bzrxRewards,\r\n            crv3Rewards\r\n        );\r\n    }\r\n\r\n    function _convertFeeWithUniswap(\r\n        address asset,\r\n        uint256 amount,\r\n        IPriceFeeds priceFeeds,\r\n        uint256 bzrxRate,\r\n        uint256 maxDisagreement)\r\n        internal\r\n        returns (uint256 returnAmount)\r\n    {\r\n        uint256 stakingReward = stakingRewards[asset];\r\n        if (stakingReward != 0) {\r\n            if (amount > stakingReward) {\r\n                amount = stakingReward;\r\n            }\r\n            stakingRewards[asset] = stakingReward.sub(amount);\r\n\r\n            uint256[] memory amounts = uniswapRouter.swapExactTokensForTokens(\r\n                amount,\r\n                1, // amountOutMin\r\n                swapPaths[asset],\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n\r\n            returnAmount = amounts[amounts.length - 1];\r\n\r\n            // will revert if disagreement found\r\n            _checkUniDisagreement(\r\n                asset,\r\n                amount,\r\n                returnAmount,\r\n                priceFeeds,\r\n                bzrxRate,\r\n                maxDisagreement\r\n            );\r\n        }\r\n    }\r\n\r\n    function _convertFeesWithCurve(\r\n        uint256 daiAmount,\r\n        uint256 usdcAmount,\r\n        uint256 usdtAmount)\r\n        internal\r\n        returns (uint256 returnAmount)\r\n    {\r\n        uint256[3] memory curveAmounts;\r\n        uint256 curveTotal;\r\n        uint256 stakingReward;\r\n\r\n        if (daiAmount != 0) {\r\n            stakingReward = stakingRewards[DAI];\r\n            if (stakingReward != 0) {\r\n                if (daiAmount > stakingReward) {\r\n                    daiAmount = stakingReward;\r\n                }\r\n                stakingRewards[DAI] = stakingReward.sub(daiAmount);\r\n                curveAmounts[0] = daiAmount;\r\n                curveTotal = daiAmount;\r\n            }\r\n        }\r\n        if (usdcAmount != 0) {\r\n            stakingReward = stakingRewards[USDC];\r\n            if (stakingReward != 0) {\r\n                if (usdcAmount > stakingReward) {\r\n                    usdcAmount = stakingReward;\r\n                }\r\n                stakingRewards[USDC] = stakingReward.sub(usdcAmount);\r\n                curveAmounts[1] = usdcAmount;\r\n                curveTotal = curveTotal.add(usdcAmount.mul(1e12)); // normalize to 18 decimals\r\n            }\r\n        }\r\n        if (usdtAmount != 0) {\r\n            stakingReward = stakingRewards[USDT];\r\n            if (stakingReward != 0) {\r\n                if (usdtAmount > stakingReward) {\r\n                    usdtAmount = stakingReward;\r\n                }\r\n                stakingRewards[USDT] = stakingReward.sub(usdtAmount);\r\n                curveAmounts[2] = usdtAmount;\r\n                curveTotal = curveTotal.add(usdtAmount.mul(1e12)); // normalize to 18 decimals\r\n            }\r\n        }\r\n\r\n        uint256 beforeBalance = curve3Crv.balanceOf(address(this));\r\n        curve3pool.add_liquidity(curveAmounts, 0);\r\n\r\n        returnAmount = curve3Crv.balanceOf(address(this)) - beforeBalance;\r\n\r\n        // will revert if disagreement found\r\n        _checkCurveDisagreement(\r\n            curveTotal,\r\n            returnAmount,\r\n            STAKING.maxCurveDisagreement()\r\n        );\r\n    }\r\n\r\n    function _checkUniDisagreement(\r\n        address asset,\r\n        uint256 assetAmount,\r\n        uint256 bzrxAmount,\r\n        IPriceFeeds priceFeeds,\r\n        uint256 bzrxRate,\r\n        uint256 maxDisagreement)\r\n        internal\r\n        view\r\n    {\r\n        (uint256 rate, uint256 precision) = priceFeeds.queryRate(\r\n            asset,\r\n            WETH\r\n        );\r\n\r\n        rate = rate\r\n            .mul(1e36)\r\n            .div(precision)\r\n            .div(bzrxRate);\r\n\r\n        uint256 sourceToDestSwapRate = bzrxAmount\r\n            .mul(1e18)\r\n            .div(assetAmount);\r\n\r\n        uint256 spreadValue = sourceToDestSwapRate > rate ?\r\n            sourceToDestSwapRate - rate :\r\n            rate - sourceToDestSwapRate;\r\n\r\n        if (spreadValue != 0) {\r\n            spreadValue = spreadValue\r\n                .mul(1e20)\r\n                .div(sourceToDestSwapRate);\r\n\r\n            require(\r\n                spreadValue <= maxDisagreement,\r\n                \"uniswap price disagreement\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function _checkCurveDisagreement(\r\n        uint256 sendAmount, // deposit tokens\r\n        uint256 actualReturn, // returned lp token\r\n        uint256 maxDisagreement)\r\n        internal\r\n        view\r\n    {\r\n        uint256 expectedReturn = sendAmount\r\n            .mul(1e18)\r\n            .div(curve3pool.get_virtual_price());\r\n\r\n        uint256 spreadValue = actualReturn > expectedReturn ?\r\n            actualReturn - expectedReturn :\r\n            expectedReturn - actualReturn;\r\n\r\n        if (spreadValue != 0) {\r\n            spreadValue = spreadValue\r\n                .mul(1e20)\r\n                .div(actualReturn);\r\n\r\n            require(\r\n                spreadValue <= maxDisagreement,\r\n                \"curve price disagreement\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function setApprovals()\r\n        external\r\n        onlyOwner\r\n    {\r\n        IERC20(DAI).safeApprove(address(curve3pool), uint256(-1));\r\n        IERC20(USDC).safeApprove(address(curve3pool), uint256(-1));\r\n        IERC20(USDT).safeApprove(address(curve3pool), uint256(-1));\r\n\r\n        IERC20(BZRX).safeApprove(address(STAKING), uint256(-1));\r\n        curve3Crv.safeApprove(address(STAKING), uint256(-1));\r\n    }\r\n\r\n    // path should start with the asset to swap and end with BZRX\r\n    // only one path allowed per asset\r\n    // ex: asset -> WETH -> BZRX\r\n    function setPaths(\r\n        address[][] calldata paths)\r\n        external\r\n        onlyOwner\r\n    {\r\n        address[] memory path;\r\n        for (uint256 i = 0; i < paths.length; i++) {\r\n            path = paths[i];\r\n            require(path.length >= 2 &&\r\n            path[0] != path[path.length - 1] &&\r\n            path[path.length - 1] == BZRX,\r\n                \"invalid path\"\r\n            );\r\n\r\n            // check that the path exists\r\n            uint256[] memory amountsOut = uniswapRouter.getAmountsOut(1e10, path);\r\n            require(amountsOut[amountsOut.length - 1] != 0, \"path does not exist\");\r\n\r\n            swapPaths[path[0]] = path;\r\n            IERC20(path[0]).safeApprove(address(uniswapRouter), 0);\r\n            IERC20(path[0]).safeApprove(address(uniswapRouter), uint256(-1));\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bzrxOutput\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableCoinOutput\",\"type\":\"uint256\"}],\"name\":\"ConvertFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bzrxRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableCoinRewards\",\"type\":\"uint256\"}],\"name\":\"DistributeFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ExtractAndDistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"WithdrawFees\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BZRX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPTokenOld\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING\",\"outputs\":[{\"internalType\":\"contract IStakingPartial\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUSHI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bZx\",\"outputs\":[{\"internalType\":\"contract IBZx\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curve3Crv\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curve3pool\",\"outputs\":[{\"internalType\":\"contract ICurve3Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iBZRX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setApprovals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[][]\",\"name\":\"paths\",\"type\":\"address[][]\"}],\"name\":\"setPaths\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapPaths\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bzrxRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crv3Rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"sweepFeesByAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bzrxRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crv3Rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vBZRX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FeeExtractAndDistribute_ETH","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://309072ca0fbd312dd432286aa784eb9b19590f784ec864de8a350ab1a034cbc5"}]}