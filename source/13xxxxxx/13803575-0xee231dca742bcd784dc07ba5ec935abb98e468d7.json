{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/wndgame/WnDGameTG.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IWnDGame.sol\\\";\\nimport \\\"./interfaces/ITrainingGrounds.sol\\\";\\nimport \\\"./interfaces/ITraits.sol\\\";\\nimport \\\"./interfaces/IGP.sol\\\";\\nimport \\\"./interfaces/IWnD.sol\\\";\\nimport \\\"./interfaces/ISacrificialAlter.sol\\\";\\n\\n\\ncontract WnDGameTG is IWnDGame, Ownable, ReentrancyGuard, Pausable {\\n\\n  struct MintCommit {\\n    address recipient;\\n    bool stake;\\n    uint16 amount;\\n  }\\n\\n  struct TrainingCommit {\\n    address tokenOwner;\\n    uint16 tokenId;\\n    bool isAdding; // If false, the commit is for claiming rewards\\n    bool isUnstaking; // If !isAdding, this will determine if user is unstaking\\n    bool isTraining; // If !isAdding, this will define where the staked token is (only necessary for wizards)\\n  }\\n\\n  uint256 public constant TREASURE_CHEST = 5;\\n  // max $GP cost \\n  uint256 private maxGpCost = 72000 ether;\\n\\n  /** =========== MINTING COMMIT AND REVEAL VARIABLES =========== */\\n  // commitId -> array of all pending commits\\n  mapping(uint16 => MintCommit[]) private commitQueueMints;\\n  // Track when a commitId started accepting commits\\n  mapping(uint16 => uint256) private commitIdStartTimeMints;\\n  mapping(address => uint16) private pendingMintCommitsForAddr;\\n  // Tracks the current commitId batch to put new commits into\\n  uint16 private _commitIdCurMints = 1;\\n  // tracks the oldest commitId that has commits needing to be revealed\\n  uint16 private _commitIdPendingMints = 0;\\n  /** =========== TRAINING COMMIT AND REVEAL VARIABLES =========== */\\n  // commitId -> array of all pending commits\\n  mapping(uint16 => TrainingCommit[]) private commitQueueTraining;\\n  // Track when a commitId started accepting commits\\n  mapping(uint16 => uint256) private commitIdStartTimeTraining;\\n  mapping(address => uint16) private pendingTrainingCommitsForAddr;\\n  mapping(uint256 => bool) private tokenHasPendingCommit;\\n  // Tracks the current commitId batch to put new commits into\\n  uint16 private _commitIdCurTraining = 1;\\n  // tracks the oldest commitId that has commits needing to be revealed\\n  uint16 private _commitIdPendingTraining = 0;\\n\\n  // Time from starting a commit batch to allow new commits to enter\\n  uint64 private timePerCommitBatch = 5 minutes;\\n  // Time from starting a commit batch to allow users to reveal these in exchange for $GP\\n  uint64 private timeToAllowArb = 1 hours;\\n  uint16 private pendingMintAmt;\\n  bool public allowCommits = true;\\n\\n  uint256 private revealRewardAmt = 36000 ether;\\n  uint256 private stakingCost = 8000 ether;\\n\\n  // reference to the TrainingGrounds\\n  ITrainingGrounds public trainingGrounds;\\n  // reference to $GP for burning on mint\\n  IGP public gpToken;\\n  // reference to Traits\\n  ITraits public traits;\\n  // reference to NFT collection\\n  IWnD public wndNFT;\\n  // reference to alter collection\\n  ISacrificialAlter public alter;\\n\\n  constructor() {\\n    _pause();\\n  }\\n\\n  /** CRITICAL TO SETUP */\\n\\n  modifier requireContractsSet() {\\n      require(address(gpToken) != address(0) && address(traits) != address(0) \\n        && address(wndNFT) != address(0) && address(alter) != address(0)\\n         && address(trainingGrounds) != address(0)\\n        , \\\"Contracts not set\\\");\\n      _;\\n  }\\n\\n  function setContracts(address _gp, address _traits, address _wnd, address _alter, address _trainingGrounds) external onlyOwner {\\n    gpToken = IGP(_gp);\\n    traits = ITraits(_traits);\\n    wndNFT = IWnD(_wnd);\\n    alter = ISacrificialAlter(_alter);\\n    trainingGrounds = ITrainingGrounds(_trainingGrounds);\\n  }\\n\\n  /** EXTERNAL */\\n\\n  function getPendingMintCommits(address addr) external view returns (uint16) {\\n    return pendingMintCommitsForAddr[addr];\\n  }\\n  function getPendingTrainingCommits(address addr) external view returns (uint16) {\\n    return pendingTrainingCommitsForAddr[addr];\\n  }\\n  function isTokenPendingReveal(uint256 tokenId) external view returns (bool) {\\n    return tokenHasPendingCommit[tokenId];\\n  }\\n  function hasStaleMintCommit() external view returns (bool) {\\n    uint16 pendingId = _commitIdPendingMints;\\n    // Check if the revealable commitId has anything to commit and increment it until it does, or is the same as the current commitId\\n    while(commitQueueMints[pendingId].length == 0 && pendingId < _commitIdCurMints) {\\n      // Only iterate if the commit pending is empty and behind the current id.\\n      // This is to prevent it from being in front of the current id and missing commits.\\n      pendingId += 1;\\n    }\\n    return commitIdStartTimeMints[pendingId] < block.timestamp - timeToAllowArb && commitQueueMints[pendingId].length > 0;\\n  }\\n  function hasStaleTrainingCommit() external view returns (bool) {\\n    uint16 pendingId = _commitIdPendingTraining;\\n    // Check if the revealable commitId has anything to commit and increment it until it does, or is the same as the current commitId\\n    while(commitQueueTraining[pendingId].length == 0 && pendingId < _commitIdCurTraining) {\\n      // Only iterate if the commit pending is empty and behind the current id.\\n      // This is to prevent it from being in front of the current id and missing commits.\\n      pendingId += 1;\\n    }\\n    return commitIdStartTimeTraining[pendingId] < block.timestamp - timeToAllowArb && commitQueueTraining[pendingId].length > 0;\\n  }\\n\\n  /** Allow users to reveal the oldest commit for GP. Mints commits must be stale to be able to be revealed this way */\\n  function revealOldestMint() external whenNotPaused {\\n    require(tx.origin == _msgSender(), \\\"Only EOA\\\");\\n\\n    // Check if the revealable commitId has anything to commit and increment it until it does, or is the same as the current commitId\\n    while(commitQueueMints[_commitIdPendingMints].length == 0 && _commitIdPendingMints < _commitIdCurMints) {\\n      // Only iterate if the commit pending is empty and behind the current id.\\n      // This is to prevent it from being in front of the current id and missing commits.\\n      _commitIdPendingMints += 1;\\n    }\\n    // Check if there is a commit in a revealable batch and pop/reveal it\\n    require(commitIdStartTimeMints[_commitIdPendingMints] < block.timestamp - timeToAllowArb && commitQueueMints[_commitIdPendingMints].length > 0, \\\"No stale commits to reveal\\\");\\n    // If the pending batch is old enough to be revealed and has stuff in it, mine one.\\n    MintCommit memory commit = commitQueueMints[_commitIdPendingMints][commitQueueMints[_commitIdPendingMints].length - 1];\\n    commitQueueMints[_commitIdPendingMints].pop();\\n    revealMint(commit);\\n    gpToken.mint(_msgSender(), revealRewardAmt * commit.amount);\\n  }\\n\\n  /** Allow users to reveal the oldest commit for GP. Mints commits must be stale to be able to be revealed this way */\\n  function skipOldestMint() external onlyOwner {\\n    // Check if the revealable commitId has anything to commit and increment it until it does, or is the same as the current commitId\\n    while(commitQueueMints[_commitIdPendingMints].length == 0 && _commitIdPendingMints < _commitIdCurMints) {\\n      // Only iterate if the commit pending is empty and behind the current id.\\n      // This is to prevent it from being in front of the current id and missing commits.\\n      _commitIdPendingMints += 1;\\n    }\\n    // Check if there is a commit in a revealable batch and pop/reveal it\\n    require(commitQueueMints[_commitIdPendingMints].length > 0, \\\"No stale commits to reveal\\\");\\n    // If the pending batch is old enough to be revealed and has stuff in it, mine one.\\n    commitQueueMints[_commitIdPendingMints].pop();\\n    // Do not reveal the commit, only pop it from the queue and move on.\\n    // revealMint(commit);\\n  }\\n\\n  function revealOldestTraining() external whenNotPaused {\\n    require(tx.origin == _msgSender(), \\\"Only EOA\\\");\\n\\n    // Check if the revealable commitId has anything to commit and increment it until it does, or is the same as the current commitId\\n    while(commitQueueTraining[_commitIdPendingTraining].length == 0 && _commitIdPendingTraining < _commitIdCurTraining) {\\n      // Only iterate if the commit pending is empty and behind the current id.\\n      // This is to prevent it from being in front of the current id and missing commits.\\n      _commitIdPendingTraining += 1;\\n    }\\n    // Check if there is a commit in a revealable batch and pop/reveal it\\n    require(commitIdStartTimeTraining[_commitIdPendingTraining] < block.timestamp - timeToAllowArb && commitQueueTraining[_commitIdPendingTraining].length > 0, \\\"No stale commits to reveal\\\");\\n    // If the pending batch is old enough to be revealed and has stuff in it, mine one.\\n    TrainingCommit memory commit = commitQueueTraining[_commitIdPendingTraining][commitQueueTraining[_commitIdPendingTraining].length - 1];\\n    commitQueueTraining[_commitIdPendingTraining].pop();\\n    revealTraining(commit);\\n    gpToken.mint(_msgSender(), revealRewardAmt);\\n  }\\n\\n  function skipOldestTraining() external onlyOwner {\\n    // Check if the revealable commitId has anything to commit and increment it until it does, or is the same as the current commitId\\n    while(commitQueueTraining[_commitIdPendingTraining].length == 0 && _commitIdPendingTraining < _commitIdCurTraining) {\\n      // Only iterate if the commit pending is empty and behind the current id.\\n      // This is to prevent it from being in front of the current id and missing commits.\\n      _commitIdPendingTraining += 1;\\n    }\\n    // Check if there is a commit in a revealable batch and pop/reveal it\\n    require(commitQueueTraining[_commitIdPendingTraining].length > 0, \\\"No stale commits to reveal\\\");\\n    // If the pending batch is old enough to be revealed and has stuff in it, mine one.\\n    TrainingCommit memory commit = commitQueueTraining[_commitIdPendingTraining][commitQueueTraining[_commitIdPendingTraining].length - 1];\\n    commitQueueTraining[_commitIdPendingTraining].pop();\\n    // Do not reveal the commit, only pop it from the queue and move on.\\n    // revealTraining(commit);\\n    tokenHasPendingCommit[commit.tokenId] = false;\\n  }\\n\\n  /** Initiate the start of a mint. This action burns $GP, as the intent of committing is that you cannot back out once you've started.\\n    * This will add users into the pending queue, to be revealed after a random seed is generated and assigned to the commit id this\\n    * commit was added to. */\\n  function mintCommit(uint256 amount, bool stake) external whenNotPaused nonReentrant {\\n    require(allowCommits, \\\"adding commits disallowed\\\");\\n    require(tx.origin == _msgSender(), \\\"Only EOA\\\");\\n    uint16 minted = wndNFT.minted();\\n    uint256 maxTokens = wndNFT.getMaxTokens();\\n    require(minted + pendingMintAmt + amount <= maxTokens, \\\"All tokens minted\\\");\\n    require(amount > 0 && amount <= 10, \\\"Invalid mint amount\\\");\\n    if(commitIdStartTimeMints[_commitIdCurMints] == 0) {\\n      commitIdStartTimeMints[_commitIdCurMints] = block.timestamp;\\n    }\\n\\n    // Check if current commit batch is past the threshold for time and increment commitId if so\\n    if(commitIdStartTimeMints[_commitIdCurMints] < block.timestamp - timePerCommitBatch) {\\n      // increment commitId to start a new batch\\n      _commitIdCurMints += 1;\\n      commitIdStartTimeMints[_commitIdCurMints] = block.timestamp;\\n    }\\n\\n    // Add this mint request to the commit queue for the current commitId\\n    uint256 totalGpCost = 0;\\n    // Loop through the amount of \\n    for (uint i = 1; i <= amount; i++) {\\n      // Add N number of commits to the queue. This is so people reveal the same number of commits as they added.\\n      commitQueueMints[_commitIdCurMints].push(MintCommit(_msgSender(), stake, 1));\\n      totalGpCost += mintCost(minted + pendingMintAmt + i, maxTokens);\\n    }\\n    if (totalGpCost > 0) {\\n      gpToken.burn(_msgSender(), totalGpCost);\\n      gpToken.updateOriginAccess();\\n    }\\n    uint16 amt = uint16(amount);\\n    pendingMintCommitsForAddr[_msgSender()] += amt;\\n    pendingMintAmt += amt;\\n\\n    // Check if the revealable commitId has anything to commit and increment it until it does, or is the same as the current commitId\\n    while(commitQueueMints[_commitIdPendingMints].length == 0 && _commitIdPendingMints < _commitIdCurMints) {\\n      // Only iterate if the commit pending is empty and behind the current id.\\n      // This is to prevent it from being in front of the current id and missing commits.\\n      _commitIdPendingMints += 1;\\n    }\\n    // Check if there is a commit in a revealable batch and pop/reveal it\\n    if(commitIdStartTimeMints[_commitIdPendingMints] < block.timestamp - timePerCommitBatch && commitQueueMints[_commitIdPendingMints].length > 0) {\\n      // If the pending batch is old enough to be revealed and has stuff in it, mine the number that was added to the queue.\\n      for (uint256 i = 0; i < amount; i++) {\\n        // First iteration is guaranteed to have 1 commit to mine, so we can always retroactively check that we can continue to reveal after\\n        MintCommit memory commit = commitQueueMints[_commitIdPendingMints][commitQueueMints[_commitIdPendingMints].length - 1];\\n        commitQueueMints[_commitIdPendingMints].pop();\\n        revealMint(commit);\\n        // Check to see if we are able to continue mining commits\\n        if(commitQueueMints[_commitIdPendingMints].length == 0 && _commitIdPendingMints < _commitIdCurMints) {\\n          _commitIdPendingMints += 1;\\n          if(commitIdStartTimeMints[_commitIdPendingMints] > block.timestamp - timePerCommitBatch \\n            || commitQueueMints[_commitIdPendingMints].length == 0\\n            || _commitIdPendingMints == _commitIdCurMints)\\n          {\\n            // If there are no more commits to reveal, exit\\n            break;\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  function revealMint(MintCommit memory commit) internal {\\n    uint16 minted = wndNFT.minted();\\n    pendingMintAmt -= commit.amount;\\n    uint16[] memory tokenIds = new uint16[](commit.amount);\\n    uint16[] memory tokenIdsToStake = new uint16[](commit.amount);\\n    uint256 seed = uint256(keccak256(abi.encode(commit.recipient, minted, commitIdStartTimeMints[_commitIdPendingMints])));\\n    for (uint k = 0; k < commit.amount; k++) {\\n      minted++;\\n      // scramble the random so the steal / treasure mechanic are different per mint\\n      seed = uint256(keccak256(abi.encode(seed, commit.recipient)));\\n      address recipient = selectRecipient(seed, commit.recipient);\\n      if(recipient != commit.recipient && alter.balanceOf(commit.recipient, TREASURE_CHEST) > 0) {\\n        // If the mint is going to be stolen, there's a 50% chance \\n        //  a dragon will prefer a treasure chest over it\\n        if(seed & 1 == 1) {\\n          alter.safeTransferFrom(commit.recipient, recipient, TREASURE_CHEST, 1, \\\"\\\");\\n          recipient = commit.recipient;\\n        }\\n      }\\n      tokenIds[k] = minted;\\n      if (!commit.stake || recipient != commit.recipient) {\\n        wndNFT.mint(recipient, seed);\\n      } else {\\n        wndNFT.mint(address(trainingGrounds), seed);\\n        tokenIdsToStake[k] = minted;\\n      }\\n    }\\n    wndNFT.updateOriginAccess(tokenIds);\\n    // mints are revealed 1 at a time. Because of this, we only need to check if the first tokenId is stolen\\n    // Don't call add many if there is no token to add.\\n    if(commit.stake && tokenIdsToStake[0] != 0) {\\n      trainingGrounds.addManyToTowerAndFlight(commit.recipient, tokenIdsToStake);\\n    }\\n    pendingMintCommitsForAddr[commit.recipient] -= commit.amount;\\n  }\\n\\n  function addToTower(uint16[] calldata tokenIds) external whenNotPaused {\\n    require(_msgSender() == tx.origin, \\\"Only EOA\\\");\\n    for (uint256 i = 0; i < tokenIds.length; i++) {\\n      require(!tokenHasPendingCommit[tokenIds[i]], \\\"token has pending commit\\\");\\n    }\\n    trainingGrounds.addManyToTowerAndFlight(tx.origin, tokenIds);\\n  }\\n\\n  function addToTrainingCommit(uint16[] calldata tokenIds) external whenNotPaused {\\n    require(allowCommits, \\\"adding commits disallowed\\\");\\n    require(tx.origin == _msgSender(), \\\"Only EOA\\\");\\n    if(commitIdStartTimeTraining[_commitIdCurTraining] == 0) {\\n      commitIdStartTimeTraining[_commitIdCurTraining] = block.timestamp;\\n    }\\n\\n    // Check if current commit batch is past the threshold for time and increment commitId if so\\n    if(commitIdStartTimeTraining[_commitIdCurTraining] < block.timestamp - timePerCommitBatch) {\\n      // increment commitId to start a new batch\\n      _commitIdCurTraining += 1;\\n      commitIdStartTimeTraining[_commitIdCurTraining] = block.timestamp;\\n    }\\n    // Loop through the amount of tokens being added\\n    uint16 numDragons;\\n    for (uint i = 0; i < tokenIds.length; i++) {\\n      require(address(trainingGrounds) != wndNFT.ownerOf(tokenIds[i]), \\\"token already staked\\\");\\n      require(!tokenHasPendingCommit[tokenIds[i]], \\\"token has pending commit\\\");\\n      require(_msgSender() == wndNFT.ownerOf(tokenIds[i]), \\\"not owner of token\\\");\\n      if(!wndNFT.isWizard(tokenIds[i])) {\\n        numDragons += 1;\\n      }\\n      tokenHasPendingCommit[tokenIds[i]] = true;\\n      // Add N number of commits to the queue. This is so people reveal the same number of commits as they added.\\n      commitQueueTraining[_commitIdCurTraining].push(TrainingCommit(_msgSender(), tokenIds[i], true, false, true));\\n    }\\n    gpToken.burn(_msgSender(), stakingCost * (tokenIds.length - numDragons)); // Dragons are free to stake\\n    gpToken.updateOriginAccess();\\n    pendingTrainingCommitsForAddr[_msgSender()] += uint16(tokenIds.length);\\n    tryRevealTraining(tokenIds.length);\\n  }\\n\\n  function claimTrainingsCommit(uint16[] calldata tokenIds, bool isUnstaking, bool isTraining) external whenNotPaused {\\n    require(allowCommits, \\\"adding commits disallowed\\\");\\n    require(tx.origin == _msgSender(), \\\"Only EOA\\\");\\n    if(commitIdStartTimeTraining[_commitIdCurTraining] == 0) {\\n      commitIdStartTimeTraining[_commitIdCurTraining] = block.timestamp;\\n    }\\n\\n    // Check if current commit batch is past the threshold for time and increment commitId if so\\n    if(commitIdStartTimeTraining[_commitIdCurTraining] < block.timestamp - timePerCommitBatch) {\\n      // increment commitId to start a new batch\\n      _commitIdCurTraining += 1;\\n      commitIdStartTimeTraining[_commitIdCurTraining] = block.timestamp;\\n    }\\n    uint16 numDragons;\\n    // Loop through the amount of tokens being added\\n    for (uint i = 0; i < tokenIds.length; i++) {\\n      require(!tokenHasPendingCommit[tokenIds[i]], \\\"token has pending commit\\\");\\n      require(trainingGrounds.isTokenStaked(tokenIds[i], isTraining) && trainingGrounds.ownsToken(tokenIds[i])\\n      , \\\"Token not in staking pool\\\");\\n      if(isUnstaking) {\\n        if(wndNFT.isWizard(tokenIds[i])) {\\n          // Check to see if the wizard has earned enough to withdraw.\\n          // If emissions run out, allow them to attempt to withdraw anyways.\\n          if(isTraining) {\\n            require(trainingGrounds.curWhipsEmitted() >= 16000\\n              || trainingGrounds.calculateErcEmissionRewards(tokenIds[i]) > 0, \\\"can't unstake wizard yet\\\");\\n          }\\n          else {\\n            require(trainingGrounds.totalGPEarned() > 500000000 ether - 4000 ether\\n              || trainingGrounds.calculateGpRewards(tokenIds[i]) >= 4000 ether, \\\"can't unstake wizard yet\\\");\\n          }\\n        }\\n        else {\\n          numDragons += 1;\\n        }\\n      }\\n      tokenHasPendingCommit[tokenIds[i]] = true;\\n      // Add N number of commits to the queue. This is so people reveal the same number of commits as they added.\\n      commitQueueTraining[_commitIdCurTraining].push(TrainingCommit(_msgSender(), tokenIds[i], false, isUnstaking, isTraining));\\n    }\\n    if(isUnstaking) {\\n      gpToken.burn(_msgSender(), stakingCost * (tokenIds.length - numDragons)); // Dragons are free to stake\\n      gpToken.updateOriginAccess();\\n    }\\n    pendingTrainingCommitsForAddr[_msgSender()] += uint16(tokenIds.length);\\n    tryRevealTraining(tokenIds.length);\\n  }\\n\\n  function tryRevealTraining(uint256 amount) internal {\\n    // Check if the revealable commitId has anything to commit and increment it until it does, or is the same as the current commitId\\n    while(commitQueueTraining[_commitIdPendingTraining].length == 0 && _commitIdPendingTraining < _commitIdCurTraining) {\\n      // Only iterate if the commit pending is empty and behind the current id.\\n      // This is to prevent it from being in front of the current id and missing commits.\\n      _commitIdPendingTraining += 1;\\n    }\\n    // Check if there is a commit in a revealable batch and pop/reveal it\\n    if(commitIdStartTimeTraining[_commitIdPendingTraining] < block.timestamp - timePerCommitBatch && commitQueueTraining[_commitIdPendingTraining].length > 0) {\\n      // If the pending batch is old enough to be revealed and has stuff in it, mine the number that was added to the queue.\\n      for (uint256 i = 0; i < amount; i++) {\\n        // First iteration is guaranteed to have 1 commit to mine, so we can always retroactively check that we can continue to reveal after\\n        TrainingCommit memory commit = commitQueueTraining[_commitIdPendingTraining][commitQueueTraining[_commitIdPendingTraining].length - 1];\\n        commitQueueTraining[_commitIdPendingTraining].pop();\\n        revealTraining(commit);\\n        // Check to see if we are able to continue mining commits\\n        if(commitQueueTraining[_commitIdPendingTraining].length == 0 && _commitIdPendingTraining < _commitIdCurTraining) {\\n          _commitIdPendingTraining += 1;\\n          if(commitIdStartTimeTraining[_commitIdPendingTraining] > block.timestamp - timePerCommitBatch \\n            || commitQueueTraining[_commitIdPendingTraining].length == 0\\n            || _commitIdPendingTraining == _commitIdCurTraining)\\n          {\\n            // If there are no more commits to reveal, exit\\n            break;\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  function revealTraining(TrainingCommit memory commit) internal {\\n    uint16[] memory idSingle = new uint16[](1);\\n    idSingle[0] = commit.tokenId;\\n    tokenHasPendingCommit[commit.tokenId] = false;\\n    if(commit.isAdding) {\\n      if(wndNFT.ownerOf(commit.tokenId) != commit.tokenOwner) {\\n        // The owner has transferred their token and can no longer be staked. We can simply skip this reveal.\\n        return;\\n      }\\n      if(wndNFT.isWizard(commit.tokenId)) {\\n        // Add to training since tower staking doesn't need C+R\\n        uint256 seed = random(commit.tokenId, commitIdStartTimeTraining[_commitIdPendingTraining], commit.tokenOwner);\\n        trainingGrounds.addManyToTrainingAndFlight(seed, commit.tokenOwner, idSingle);\\n      }\\n      else {\\n        // Dragons go to the tower but really they are in both pools. This just avoids the stealing logic.\\n        trainingGrounds.addManyToTowerAndFlight(commit.tokenOwner, idSingle);\\n      }\\n    }\\n    else {\\n      if(!trainingGrounds.isTokenStaked(commit.tokenId, commit.isTraining)) {\\n        // Skip reveals if the token has already been claimed since committing to this tx (like claiming multiple times unknowingly)\\n        return;\\n      }\\n      if(commit.isTraining) {\\n        uint256 seed = random(commit.tokenId, commitIdStartTimeTraining[_commitIdPendingTraining], commit.tokenOwner);\\n        trainingGrounds.claimManyFromTrainingAndFlight(seed, commit.tokenOwner, idSingle, commit.isUnstaking);\\n      }\\n      else {\\n        trainingGrounds.claimManyFromTowerAndFlight(commit.tokenOwner, idSingle, commit.isUnstaking);\\n      }\\n    }\\n    pendingTrainingCommitsForAddr[commit.tokenOwner] -= 1;\\n  }\\n\\n  /** Deterministically random. This assumes the call was a part of commit+reveal design \\n   * that disallowed the benefactor of this outcome to make this call */\\n  function random(uint16 tokenId, uint256 time, address owner) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encodePacked(\\n      owner,\\n      tokenId,\\n      time\\n    )));\\n  }\\n\\n  /** \\n   * @param tokenId the ID to check the cost of to mint\\n   * @return the cost of the given token ID\\n   */\\n  function mintCost(uint256 tokenId, uint256 maxTokens) public view returns (uint256) {\\n    if (tokenId <= maxTokens * 8 / 20) return 24000 ether;\\n    if (tokenId <= maxTokens * 11 / 20) return 36000 ether;\\n    if (tokenId <= maxTokens * 14 / 20) return 48000 ether;\\n    if (tokenId <= maxTokens * 17 / 20) return 60000 ether; \\n    // if (tokenId > maxTokens * 17 / 20)\\n    return maxGpCost;\\n  }\\n\\n  function makeTreasureChests(uint16 qty) external whenNotPaused {\\n    require(tx.origin == _msgSender(), \\\"Only EOA\\\");\\n    // $GP exchange amount handled within alter contract\\n    // Will fail if sender doesn't have enough $GP\\n    // Transfer does not need approved,\\n    //  as there is established trust between this contract and the alter contract \\n    alter.mint(TREASURE_CHEST, qty, _msgSender());\\n  }\\n\\n  function sellTreasureChests(uint16 qty) external whenNotPaused {\\n    require(tx.origin == _msgSender(), \\\"Only EOA\\\");\\n    // $GP exchange amount handled within alter contract\\n    alter.burn(TREASURE_CHEST, qty, _msgSender());\\n  }\\n\\n  /** INTERNAL */\\n\\n  /**\\n   * the first 25% (ETH purchases) go to the minter\\n   * the remaining 80% have a 10% chance to be given to a random staked dragon\\n   * @param seed a random value to select a recipient from\\n   * @return the address of the recipient (either the minter or the Dragon thief's owner)\\n   */\\n  function selectRecipient(uint256 seed, address committer) internal view returns (address) {\\n    if (((seed >> 245) % 10) != 0) return committer; // top 10 bits haven't been used\\n    address thief = trainingGrounds.randomDragonOwner(seed >> 144); // 144 bits reserved for trait selection\\n    if (thief == address(0x0)) return committer;\\n    return thief;\\n  }\\n\\n  /** ADMIN */\\n\\n  /**\\n   * enables owner to pause / unpause contract\\n   */\\n  function setPaused(bool _paused) external requireContractsSet onlyOwner {\\n    if (_paused) _pause();\\n    else _unpause();\\n  }\\n\\n  function setMaxGpCost(uint256 _amount) external requireContractsSet onlyOwner {\\n    maxGpCost = _amount;\\n  }\\n\\n  function setAllowCommits(bool allowed) external onlyOwner {\\n    allowCommits = allowed;\\n  }\\n\\n  function setRevealRewardAmt(uint256 rewardAmt) external onlyOwner {\\n    revealRewardAmt = rewardAmt;\\n  }\\n\\n  /** Allow the contract owner to set the pending mint amount.\\n    * This allows any long-standing pending commits to be overwritten, say for instance if the max supply has been \\n    *  reached but there are many stale pending commits, it could be used to free up those spaces if needed/desired by the community.\\n    * This function should not be called lightly, this will have negative consequences on the game. */\\n  function setPendingMintAmt(uint256 pendingAmt) external onlyOwner {\\n    pendingMintAmt = uint16(pendingAmt);\\n  }\\n\\n  /**\\n   * allows owner to withdraw funds from minting\\n   */\\n  function withdraw() external onlyOwner {\\n    payable(owner()).transfer(address(this).balance);\\n  }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/wndgame/interfaces/IWnDGame.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWnDGame {\\n  \\n}\"\r\n    },\r\n    \"contracts/wndgame/interfaces/ITrainingGrounds.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE \\n\\npragma solidity ^0.8.0;\\n\\ninterface ITrainingGrounds {\\n  function addManyToTowerAndFlight(address tokenOwner, uint16[] calldata tokenIds) external;\\n  function claimManyFromTowerAndFlight(address tokenOwner, uint16[] calldata tokenIds, bool unstake) external;\\n  function addManyToTrainingAndFlight(uint256 seed, address tokenOwner, uint16[] calldata tokenIds) external;\\n  function claimManyFromTrainingAndFlight(uint256 seed, address tokenOwner, uint16[] calldata tokenIds, bool unstake) external;\\n  function randomDragonOwner(uint256 seed) external view returns (address);\\n  function isTokenStaked(uint256 tokenId, bool isTraining) external view returns (bool);\\n  function ownsToken(uint256 tokenId) external view returns (bool);\\n  function calculateGpRewards(uint256 tokenId) external view returns (uint256 owed);\\n  function calculateErcEmissionRewards(uint256 tokenId) external view returns (uint256 owed);\\n  function curWhipsEmitted() external view returns (uint16);\\n  function curMagicRunesEmitted() external view returns (uint16);\\n  function totalGPEarned() external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/wndgame/interfaces/ITraits.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE \\n\\npragma solidity ^0.8.0;\\n\\ninterface ITraits {\\n  function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\"\r\n    },\r\n    \"contracts/wndgame/interfaces/IGP.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface IGP {\\n    function mint(address to, uint256 amount) external;\\n    function burn(address from, uint256 amount) external;\\n    function updateOriginAccess() external;\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/wndgame/interfaces/IWnD.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IWnD is IERC721Enumerable {\\n\\n    // game data storage\\n    struct WizardDragon {\\n        bool isWizard;\\n        uint8 body;\\n        uint8 head;\\n        uint8 spell;\\n        uint8 eyes;\\n        uint8 neck;\\n        uint8 mouth;\\n        uint8 wand;\\n        uint8 tail;\\n        uint8 rankIndex;\\n    }\\n\\n    function minted() external returns (uint16);\\n    function updateOriginAccess(uint16[] memory tokenIds) external;\\n    function mint(address recipient, uint256 seed) external;\\n    function burn(uint256 tokenId) external;\\n    function getMaxTokens() external view returns (uint256);\\n    function getPaidTokens() external view returns (uint256);\\n    function getTokenTraits(uint256 tokenId) external view returns (WizardDragon memory);\\n    function getTokenWriteBlock(uint256 tokenId) external view returns(uint64);\\n    function isWizard(uint256 tokenId) external view returns(bool);\\n  \\n}\"\r\n    },\r\n    \"contracts/wndgame/interfaces/ISacrificialAlter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISacrificialAlter {\\n    function mint(uint256 typeId, uint16 qty, address recipient) external;\\n    function burn(uint256 typeId, uint16 qty, address burnFrom) external;\\n    function updateOriginAccess() external;\\n    function balanceOf(address account, uint256 id) external returns (uint256);\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes memory data) external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TREASURE_CHEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"addToTower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"addToTrainingCommit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowCommits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alter\",\"outputs\":[{\"internalType\":\"contract ISacrificialAlter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"},{\"internalType\":\"bool\",\"name\":\"isUnstaking\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isTraining\",\"type\":\"bool\"}],\"name\":\"claimTrainingsCommit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPendingMintCommits\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPendingTrainingCommits\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gpToken\",\"outputs\":[{\"internalType\":\"contract IGP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasStaleMintCommit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasStaleTrainingCommit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isTokenPendingReveal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"qty\",\"type\":\"uint16\"}],\"name\":\"makeTreasureChests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"stake\",\"type\":\"bool\"}],\"name\":\"mintCommit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokens\",\"type\":\"uint256\"}],\"name\":\"mintCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealOldestMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealOldestTraining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"qty\",\"type\":\"uint16\"}],\"name\":\"sellTreasureChests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setAllowCommits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_traits\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wnd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_alter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trainingGrounds\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxGpCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingAmt\",\"type\":\"uint256\"}],\"name\":\"setPendingMintAmt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmt\",\"type\":\"uint256\"}],\"name\":\"setRevealRewardAmt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skipOldestMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skipOldestTraining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trainingGrounds\",\"outputs\":[{\"internalType\":\"contract ITrainingGrounds\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traits\",\"outputs\":[{\"internalType\":\"contract ITraits\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wndNFT\",\"outputs\":[{\"internalType\":\"contract IWnD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"WnDGameTG","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}