{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\n\n\n\n// Part: IRandom\n\ninterface IRandom {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function requestChainLinkEntropy() external returns (bytes32 requestId);\n}\n\n// Part: IRarity\n\ninterface IRarity {\n    //enum Rarity {Simple, SimpleUpgraded, Rare, Legendary, F1, F2, F3}\n    function getRarity(address _contract, uint256 _tokenId) external view returns(uint8 r);\n    function getRarity2(address _contract, uint256 _tokenId) external view returns(uint8 r);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.0/Context\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.0/IERC165\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.0/IERC721\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n\n// Part: IHero\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IHero is IERC721 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function multiMint() external;\n    function setPartner(address _partner, uint256 _limit) external;\n    function transferOwnership(address newOwner) external; \n    function partnersLimit(address _partner) external view returns(uint256, uint256);\n    function totalSupply() external view returns(uint256);\n    function reservedForPartners() external view returns(uint256);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.0/ERC165\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.0/IERC1155\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.0/IERC1155Receiver\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.0/Ownable\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.0/ERC1155Receiver\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n\n// File: HeroesUpgraderV2.sol\n\ncontract HeroesUpgraderV2  is ERC1155Receiver, Ownable {\n\n    // F1, F2, F3 rarity types reserved for future game play\n    enum Rarity {Simple, SimpleUpgraded, Rare, Legendary, F1, F2, F3}\n    struct Modification {\n        address sourceContract;\n        Rarity  sourceRarity;\n        address destinitionContract;\n        Rarity  destinitionRarity;\n        uint256 balanceForUpgrade;\n        bool enabled;\n    }\n\n    bool internal chainLink;\n    address public chainLinkAdapter;\n    address internal whiteListBalancer = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address public externalStorage;\n\n    // Mapping of enabled modifications\n    // From modifier contract address and tokenId to Modification\n    mapping(address => mapping(uint256 => Modification)) public enabledModifications;\n\n    // Mapping of enabled source conatracts\n    mapping(address => bool) public sourceContracts;\n    \n    //Mapping from upgradING contract address and tokenId to token \n    //rarity. By default (token was not upgrade) any token has Simple rarity\n    mapping(address => mapping(uint256 => Rarity)) public rarity;\n    \n    event Upgraded(address destinitionContract, uint256 oldHero, uint256 newHero, Rarity newRarity);\n    event ModificationChange(address modifierContract, uint256 modifierId);\n    \n\n    \n    function upgrade(uint256 oldHero, address modifierContract, uint256 modifierId) public {\n        //1.0 Check that modification is registered\n        require(\n            enabledModifications[modifierContract][modifierId].enabled\n            , \"Unknown modificator\"\n        );\n        // 1.1. Check that this hero is not rare o legendary\n        // In more common sence that modification from current oldHero rariry is enabled\n        require(\n            rarity[\n              enabledModifications[modifierContract][modifierId].sourceContract\n            ][oldHero] == enabledModifications[modifierContract][modifierId].sourceRarity,\n            \"Cant modify twice or from your rarity\"\n        );\n\n        require(\n            IHero(\n               enabledModifications[modifierContract][modifierId].sourceContract\n            ).ownerOf(oldHero) == msg.sender,\n            \"You need own hero for upgrade\"\n        );\n        //2.Charge modificator from user\n        IERC1155(modifierContract).safeTransferFrom(\n            msg.sender,\n            address(this),\n            modifierId,\n            enabledModifications[modifierContract][modifierId].balanceForUpgrade,\n            '0'\n        );\n\n        //3.Mint new hero  and save rarity\n        // get existing mint limit for this conatrct\n        (uint256 limit, uint256 minted) =\n            IHero(\n               enabledModifications[modifierContract][modifierId].destinitionContract\n            ).partnersLimit(address(this));\n        \n        // increase and set new free limit mint for this contract\n        IHero(\n            enabledModifications[modifierContract][modifierId].destinitionContract\n        ).setPartner(address(this), limit + 1);\n        \n        \n         \n        //get tokenId of token thet will mint\n        uint256 newToken = IHero(\n            enabledModifications[modifierContract][modifierId].destinitionContract\n        ).totalSupply();\n        \n        // mint with white list\n        IHero(\n            enabledModifications[modifierContract][modifierId].destinitionContract\n        ).multiMint();\n        \n        // transfer new token to sender\n        IHero(\n            enabledModifications[modifierContract][modifierId].destinitionContract\n        ).transferFrom(address(this), msg.sender, newToken);\n\n        \n        /////////////////////////////////////////////////////////////////////\n        // correct whitelist balance\n        // For use  this functionalite Heroes Owner must manualy set limit\n        // for whiteListBalancer (two tx with same limit)\n        // (uint256 wl_limit, uint256 wl_minted) = IHero(\n        //        enabledModifications[modifierContract][modifierId].destinitionContract\n        //    ).partnersLimit(whiteListBalancer); \n\n        //if (limit != 0) {\n        IHero(\n            enabledModifications[modifierContract][modifierId].destinitionContract\n        ).setPartner(whiteListBalancer, limit);\n        IHero(\n            enabledModifications[modifierContract][modifierId].destinitionContract\n        ).setPartner(whiteListBalancer, limit);\n        IHero(\n            enabledModifications[modifierContract][modifierId].destinitionContract\n        ).setPartner(whiteListBalancer, limit);\n        IHero(\n            enabledModifications[modifierContract][modifierId].destinitionContract\n        ).setPartner(whiteListBalancer, 0);\n        //}\n        /////////////////////////////////////////////////////////////////////\n\n        \n        //safe rarity of upgradING token\n        rarity[\n            enabledModifications[modifierContract][modifierId].sourceContract\n        ][oldHero] = Rarity.SimpleUpgraded;\n\n        //safe rarity of new minted token\n        rarity[\n            enabledModifications[modifierContract][modifierId].sourceContract\n        ][newToken] = enabledModifications[modifierContract][modifierId].destinitionRarity;\n        //4.transfer new hero to msg.sender\n        emit Upgraded(\n            enabledModifications[modifierContract][modifierId].destinitionContract, \n            oldHero,\n            newToken, \n            enabledModifications[modifierContract][modifierId].destinitionRarity\n        );\n        \n        if (chainLink) {\n            IRandom(chainLinkAdapter).requestChainLinkEntropy();    \n        }\n        \n\n    }\n\n    function upgradeBatch(uint256[] memory oldHeroes, address modifierContract, uint256 modifierId) public {\n        require(oldHeroes.length <= 10, \"Not more then 10\");\n        for (uint256 i; i < oldHeroes.length; i ++) {\n            upgrade(oldHeroes[i], modifierContract, modifierId);\n        }\n    }\n\n\n    /// Return rarity of given  token\n    function getRarity(address _contract, uint256 _tokenId) public view returns(Rarity r) {\n        r = rarity[_contract][_tokenId];\n        if (externalStorage != address(0)) {\n            uint8 extRar = IRarity(externalStorage).getRarity(_contract, _tokenId);\n            if (Rarity(extRar) > r) {\n                r = Rarity(extRar);\n            }\n        }\n        return r;\n    }\n\n\n    /// Return rarity of given  token\n    function getRarity2(address _contract, uint256 _tokenId) public view returns(Rarity r) {\n        require(sourceContracts[_contract], \"Unknown source contract\");\n        require(\n            IHero(_contract).ownerOf(_tokenId) != address(0),\n            \"Seems like token not exist\"\n        );\n        return getRarity(_contract, _tokenId);\n        // r = rarity[_contract][_tokenId];\n        //         if (externalStorage != address(0)) {\n        //     Rarity extRar = IRarity(externalStorage).getRarity(_contract, _tokenId);\n        //     if (extRar > r) {\n        //         r = extRar;\n        //     }\n        // }\n        // return r;\n    }\n\n\n    \n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    )\n        external\n        override\n        returns(bytes4)\n    {\n        return bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"));  \n    }    \n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    )\n        external\n        override\n        returns(bytes4)\n    {\n        return bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256,uint256,bytes)\"));  \n    }\n    \n    //////////////////////////////////////////////////////\n    ///   Admin Functions                             ////\n    //////////////////////////////////////////////////////\n    function setModification(\n        address _modifierContract,\n        uint256 _modifierId,\n        address _sourceContract,\n        Rarity  _sourceRarity,\n        address _destinitionContract,\n        Rarity  _destinitionRarity,\n        uint256 _balanceForUpgrade,\n        bool    _isEnabled\n    ) external onlyOwner {\n        require(_modifierContract != address(0), \"No zero\");\n        enabledModifications[_modifierContract][_modifierId].sourceContract = _sourceContract;\n        enabledModifications[_modifierContract][_modifierId].sourceRarity = _sourceRarity;\n        enabledModifications[_modifierContract][_modifierId].destinitionContract = _destinitionContract;\n        enabledModifications[_modifierContract][_modifierId].destinitionRarity = _destinitionRarity;\n        enabledModifications[_modifierContract][_modifierId].balanceForUpgrade = _balanceForUpgrade;\n        enabledModifications[_modifierContract][_modifierId].enabled = _isEnabled;\n        sourceContracts[_sourceContract] = _isEnabled;\n        emit ModificationChange(_modifierContract, _modifierId);\n    }\n\n    function setModificationState(\n        address _modifierContract,\n        uint256 _modifierId,\n        bool    _isEnabled\n    ) external onlyOwner {\n        require(_modifierContract != address(0), \"No zero\");\n        enabledModifications[_modifierContract][_modifierId].enabled = _isEnabled;\n        sourceContracts[\n            enabledModifications[_modifierContract][_modifierId].sourceContract\n        ] = _isEnabled;\n        emit ModificationChange(_modifierContract, _modifierId);\n    }\n\n    function revokeOwnership(address _contract) external onlyOwner {\n        IHero(_contract).transferOwnership(owner());\n    }\n\n    function setChainLink(bool _isOn) external onlyOwner {\n        require(chainLinkAdapter != address(0), \"Set adapter address first\");\n        chainLink = _isOn;\n    }\n\n    function setChainLinkAdapter(address _adapter) external onlyOwner {\n        chainLinkAdapter = _adapter;\n    } \n\n    function setPartnerProxy(\n        address _contract, \n        address _partner, \n        uint256 _newLimit\n    ) \n        external \n        onlyOwner \n    {\n        IHero(_contract).setPartner(_partner, _newLimit);\n    } \n\n    function setWLBalancer(address _balancer) external onlyOwner {\n        require(_balancer != address(0));\n        whiteListBalancer = _balancer;\n    }\n\n    function loadRaritiesBatch(address _contract, uint256[] memory _tokens, Rarity[] memory _rarities) external onlyOwner {\n        require(_contract != address(0), \"No Zero Address\");\n        require(_tokens.length == _rarities.length);\n         for (uint256 i; i < _tokens.length; i ++) {\n            rarity[_contract][_tokens[i]] = _rarities[i];\n        }\n    }\n\n    function setExternalStorage(address _storage) external onlyOwner {\n        externalStorage = _storage;\n    }\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"modifierContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"modifierId\",\"type\":\"uint256\"}],\"name\":\"ModificationChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destinitionContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldHero\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newHero\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum HeroesUpgraderV2.Rarity\",\"name\":\"newRarity\",\"type\":\"uint8\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"chainLinkAdapter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"enabledModifications\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sourceContract\",\"type\":\"address\"},{\"internalType\":\"enum HeroesUpgraderV2.Rarity\",\"name\":\"sourceRarity\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"destinitionContract\",\"type\":\"address\"},{\"internalType\":\"enum HeroesUpgraderV2.Rarity\",\"name\":\"destinitionRarity\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"balanceForUpgrade\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"externalStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRarity\",\"outputs\":[{\"internalType\":\"enum HeroesUpgraderV2.Rarity\",\"name\":\"r\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRarity2\",\"outputs\":[{\"internalType\":\"enum HeroesUpgraderV2.Rarity\",\"name\":\"r\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokens\",\"type\":\"uint256[]\"},{\"internalType\":\"enum HeroesUpgraderV2.Rarity[]\",\"name\":\"_rarities\",\"type\":\"uint8[]\"}],\"name\":\"loadRaritiesBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rarity\",\"outputs\":[{\"internalType\":\"enum HeroesUpgraderV2.Rarity\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"revokeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isOn\",\"type\":\"bool\"}],\"name\":\"setChainLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"setChainLinkAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"}],\"name\":\"setExternalStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_modifierContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_modifierId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sourceContract\",\"type\":\"address\"},{\"internalType\":\"enum HeroesUpgraderV2.Rarity\",\"name\":\"_sourceRarity\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_destinitionContract\",\"type\":\"address\"},{\"internalType\":\"enum HeroesUpgraderV2.Rarity\",\"name\":\"_destinitionRarity\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_balanceForUpgrade\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isEnabled\",\"type\":\"bool\"}],\"name\":\"setModification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_modifierContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_modifierId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isEnabled\",\"type\":\"bool\"}],\"name\":\"setModificationState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"setPartnerProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_balancer\",\"type\":\"address\"}],\"name\":\"setWLBalancer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sourceContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldHero\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"modifierContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modifierId\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"oldHeroes\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"modifierContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modifierId\",\"type\":\"uint256\"}],\"name\":\"upgradeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HeroesUpgraderV2","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}