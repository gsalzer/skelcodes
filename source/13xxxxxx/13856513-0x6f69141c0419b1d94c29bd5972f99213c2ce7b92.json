{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SyncXColors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\\nimport 'base64-sol/base64.sol';\\nimport './legacy_colors/TheColors.sol';\\nimport './legacy_colors/INFTOwner.sol';\\n\\n/**\\n * @title Sync x Colors contract\\n * @dev Extends ERC721 Non-Fungible Token Standard basic implementation\\n */\\ncontract SyncXColors is ERC721Enumerable, Ownable {\\n  using Strings for uint256;\\n  using Strings for uint16;\\n  using Strings for uint8;\\n\\n  uint256 public constant TotalReservedAmount = 17; // Amount reserved for promotions (giveaways, team)\\n  uint256 public constant MAX_SUPPLY = 4317 - TotalReservedAmount;\\n\\n  // Declare Public\\n  address public constant THE_COLORS = \\n    address(0x9fdb31F8CE3cB8400C7cCb2299492F2A498330a4);\\n\\n  uint256 public constant mintPrice = 0.05 ether; // Price per mint\\n  uint256 public constant resyncPrice = 0.005 ether; // Price per color resync\\n  uint256 public constant maxMintAmount = 10; // Max amount of mints per transaction\\n  uint256 public MintedReserves = 0; // Total Promotional Reserves Minted\\n\\n  // Declare Private\\n  address private constant TREASURY =\\n    address(0x48aE900E9Df45441B2001dB4dA92CE0E7C08c6d2);\\n  address private constant TEAM =\\n    address(0x263853ef2C3Dd98a986799aB72E3b78334EB88cb);\\n\\n  mapping(uint256 => uint16[]) private _colorTokenIds;\\n  mapping(uint256 => uint256) private _seed; // Trait seed is generated at time of mint and stored on-chain\\n  mapping(uint256 => uint8) private _resync_count; //Store count of color resyncs applied\\n  \\n  // Struct for NFT traits\\n  struct SyncTraitsStruct {\\n    uint8[] shape_color;\\n    uint8[] shape_type;\\n    uint16[] shape_x;\\n    uint16[] shape_y;\\n    uint16[] shape_sizey;\\n    uint16[] shape_sizex;\\n    uint16[] shape_r;\\n    uint16 rarity_roll;\\n    bytes[] baseColors;\\n    bytes[] bgColors;\\n    bytes[] infColors;\\n    bytes logoColors;\\n    bytes driftColors;\\n    bytes theme;\\n    bytes7 sigil;\\n  }\\n\\n  // Constructor\\n  constructor() ERC721('Sync x Colors', 'SyncXColors') {}\\n\\n  /**\\n   * Returns NFT tokenURI JSON\\n   */\\n  function tokenURI(uint256 tokenId)\\n    public\\n    view\\n    virtual\\n    override(ERC721)\\n    returns (string memory)\\n  {\\n    require(_exists(tokenId), 'ERC721: operator query for nonexistent token');\\n\\n    SyncTraitsStruct memory syncTraits = generateTraits(tokenId);\\n\\n    string memory svgData = generateSVGImage(tokenId, syncTraits);\\n    string memory image = Base64.encode(bytes(svgData));\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          'data:application/json;base64,',\\n          Base64.encode(\\n            bytes(\\n              abi.encodePacked(\\n                '{',\\n                '\\\"image\\\":\\\"',\\n                'data:image/svg+xml;base64,',\\n                image,\\n                '\\\",',\\n                generateNameDescription(),\\n                ',',\\n                generateAttributes(tokenId, syncTraits),\\n                '}'\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  /**\\n   * Withdraw accrued funds from contract. 50% treasury, 10% to each team member\\n   */\\n  function withdraw() internal {\\n    bool sent;\\n    uint256 balance = address(this).balance;\\n    (sent, ) = payable(TEAM).call{value: (balance * 50) / 100}('');\\n    require(sent);\\n    (sent, ) = payable(TREASURY).call{value: (balance * 50) / 100}('');\\n    require(sent);\\n  }\\n\\n  /**\\n   * Withdraw by owner\\n   */\\n  function withdrawOwner() external onlyOwner {\\n    withdraw();\\n  }\\n\\n  /**\\n   * Withdraw by team\\n   */\\n  function withdrawTeam() external {\\n    require(msg.sender == TEAM, 'Only team can withdraw');\\n    withdraw();\\n  }\\n\\n  /**\\n   * Mint 1 or multiple NFTs\\n   */\\n  function mint(uint256 _mintAmount, uint16[] calldata colorTokenIds)\\n    external\\n    payable\\n  {\\n    // Requires\\n    uint256 _mintIndex = totalSupply();\\n    require(\\n      _mintAmount > 0 && _mintAmount <= maxMintAmount,\\n      'Max mint 10 per tx'\\n    );\\n    require(colorTokenIds.length <= 3, '# COLORS tokenIds must be <=3');\\n    if (msg.sender == TEAM) {\\n      require(\\n        MintedReserves + _mintAmount <= TotalReservedAmount,\\n        'Not enough reserve tokens'\\n      );\\n      // Update reserve count\\n      MintedReserves += _mintAmount;\\n    } else {\\n      require(_mintIndex + _mintAmount <= MAX_SUPPLY, 'Exceeds supply');\\n      require(msg.value == (mintPrice * _mintAmount), 'Insufficient funds');\\n      // Validate colorTokenIds\\n      require(isHolder(colorTokenIds), 'COLORS not owned by sender.');\\n    }\\n\\n    for (uint256 i = _mintIndex; i < (_mintIndex + _mintAmount); i++) {\\n      // Update states\\n      _colorTokenIds[i] = colorTokenIds;\\n      _seed[i] = _rng(i);\\n\\n      // Mint\\n      _safeMint(msg.sender, i);\\n    }\\n  }\\n\\n  /**\\n   * Store mapping between tokenId and applied tokenIdColors\\n   */\\n  function updateColors(uint256 tokenId, uint16[] calldata colorTokenIds)\\n    external\\n    payable\\n  {\\n    require(msg.sender == ownerOf(tokenId), 'Only NFT holder can updateColors');\\n    require(colorTokenIds.length <= 3, '# COLORS tokenIds must be <=3');\\n    require(msg.value >= resyncPrice, 'Insufficient funds');\\n    // Validate colorTokenIds\\n    require(isHolder(colorTokenIds), 'COLORS not owned by sender.');\\n    // Update state\\n    _colorTokenIds[tokenId] = colorTokenIds;\\n    _resync_count[tokenId] += 1;\\n  }\\n\\n  /**\\n   * Verify that sender holds supplied colorTokenIds\\n   */\\n  function isHolder(uint16[] calldata colorTokenIds)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    address colors_address = THE_COLORS;\\n    for (uint256 i = 0; i < colorTokenIds.length; i++) {\\n      if (\\n        msg.sender !=\\n        INFTOwner(colors_address).ownerOf(uint256(colorTokenIds[i]))\\n      ) {\\n        return false;\\n      }\\n    }\\n    return true;\\n  }\\n\\n  /**\\n   * Return NFT description\\n   */\\n  function generateNameDescription()\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '\\\"external_url\\\":\\\"https://syncxcolors.xyz\\\",',\\n          unicode'\\\"description\\\":\\\"Sync X Colors is a unique, on-chain generative collection of Syncs on Ethereum. Each Sync can be re-colored with new Colors at any time.\\\"'\\n        )\\n      );\\n  }\\n\\n  /**\\n   * Generate attributes json\\n   */\\n  function generateAttributes(\\n    uint256 tokenId,\\n    SyncTraitsStruct memory syncTraits\\n  ) internal view returns (string memory) {\\n    uint16[] memory colorTokenIds = _colorTokenIds[tokenId];\\n    uint256 length = colorTokenIds.length;\\n    bytes[] memory colorArray = new bytes[](3);\\n    for (uint256 i = 0; i < length; i++) {\\n      colorArray[i] = bytes(\\n        TheColors(THE_COLORS).getHexColor(uint256(colorTokenIds[i]))\\n      );\\n    }\\n    // fixing assembly overflow error, too much params\\n    string memory attributes = string(\\n        abi.encodePacked(\\n          '\\\"attributes\\\":[',\\n          '{\\\"trait_type\\\":\\\"Rarity\\\",\\\"value\\\":\\\"',\\n          syncTraits.theme,\\n          '\\\"},',\\n          '{\\\"trait_type\\\":\\\"Sigil\\\",\\\"value\\\":\\\"',\\n          syncTraits.sigil,\\n          '\\\"},'\\n        )\\n    );\\n    attributes = string(\\n        abi.encodePacked(\\n          attributes,\\n          '{\\\"trait_type\\\":\\\"Color 1\\\",\\\"value\\\":\\\"',\\n          colorArray[0],\\n          '\\\"},',\\n          '{\\\"trait_type\\\":\\\"Color 2\\\",\\\"value\\\":\\\"',\\n          colorArray[1],\\n          '\\\"},',\\n          '{\\\"trait_type\\\":\\\"Color 3\\\",\\\"value\\\":\\\"',\\n          colorArray[2],\\n          '\\\"},',\\n          '{\\\"trait_type\\\":\\\"Resyncs\\\",\\\"value\\\":',\\n          _resync_count[tokenId].toString(),\\n          '}]'\\n      )\\n    );\\n    return attributes;\\n  }\\n\\n  /**\\n   * Returns hex strings representing colorTokenIDs as an array\\n   */\\n  function getColorsHexStrings(uint256 tokenId)\\n    internal\\n    view\\n    returns (bytes[] memory)\\n  {\\n    uint16[] memory colorTokenIds = _colorTokenIds[tokenId];\\n    uint256 length = _colorTokenIds[tokenId].length;\\n    bytes[] memory hexColors = new bytes[](3);\\n    hexColors[0] = '#222222'; // Defaults (grayscale)\\n    hexColors[1] = '#777777';\\n    hexColors[2] = '#AAAAAA';\\n    for (uint256 i = 0; i < length; i++) {\\n      hexColors[i] = bytes(\\n        TheColors(THE_COLORS).getHexColor(uint256(colorTokenIds[i]))\\n      );\\n    }\\n    return hexColors;\\n  }\\n\\n  /**\\n   * Generates the SVG\\n   */\\n  function generateSVGImage(uint256 tokenId, SyncTraitsStruct memory syncTraits)\\n    private\\n    pure\\n    returns (string memory)\\n  {\\n    bytes memory svgBG = generateSVGBG(syncTraits);\\n    bytes memory svgInfinity = generateSVGInfinity(syncTraits.infColors);\\n    bytes memory svgLogo = generateSVGLogo(\\n      syncTraits.baseColors,\\n      syncTraits.logoColors,\\n      syncTraits.rarity_roll,\\n      tokenId.toString()\\n    );\\n    bytes memory svgDrift = generateSVGDrift(\\n      syncTraits.baseColors,\\n      syncTraits.driftColors,\\n      syncTraits.rarity_roll,\\n      syncTraits.sigil,\\n      tokenId.toString()\\n    );\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"500\\\" height=\\\"500\\\" viewbox=\\\"0 0 500 500\\\" style=\\\"background-color:#111111\\\">',\\n          svgBG,\\n          svgInfinity,\\n          svgLogo,\\n          svgDrift,\\n          '</svg>'\\n        )\\n      );\\n  }\\n\\n  /**\\n   * Generates the SVG Background\\n   */\\n  function generateSVGBG(SyncTraitsStruct memory syncTraits)\\n    private\\n    pure\\n    returns (bytes memory)\\n  {\\n    bytes memory newShape;\\n    bytes memory svgBG = '<g fill-opacity=\\\"0.3\\\">';\\n\\n    for (uint256 i = 0; i < 15; i++) {\\n      if (syncTraits.shape_type[i] == 0) {\\n        newShape = abi.encodePacked(\\n          '<circle fill=\\\"',\\n          syncTraits.bgColors[syncTraits.shape_color[i]],\\n          '\\\" cx=\\\"',\\n          syncTraits.shape_x[i].toString(),\\n          '\\\" cy=\\\"',\\n          syncTraits.shape_y[i].toString(),\\n          '\\\" r=\\\"',\\n          syncTraits.shape_sizex[i].toString(),\\n          '\\\"'\\n        );\\n      } else if (syncTraits.shape_type[i] == 1) {\\n        newShape = abi.encodePacked(\\n          '<rect fill=\\\"',\\n          syncTraits.bgColors[syncTraits.shape_color[i]],\\n          '\\\" x=\\\"',\\n          (syncTraits.shape_x[i] / 2).toString(),\\n          '\\\" y=\\\"',\\n          (syncTraits.shape_y[i] / 2).toString(),\\n          '\\\" width=\\\"',\\n          (syncTraits.shape_sizex[i] * 2).toString(),\\n          '\\\" height=\\\"',\\n          (syncTraits.shape_sizey[i] * 2).toString(),\\n          '\\\" transform=\\\"rotate(',\\n          syncTraits.shape_r[i].toString(),\\n          ')\\\"'\\n        );\\n      }\\n      if (\\n        (syncTraits.rarity_roll % 19 == 0 &&\\n          syncTraits.rarity_roll % 95 != 0) ||\\n        (syncTraits.rarity_roll % 13 == 0)\\n      ) {\\n        // Silver or Mosaic\\n        // Add strokes to background elements\\n        newShape = abi.encodePacked(\\n          newShape,\\n          ' stroke=\\\"',\\n          syncTraits.infColors[syncTraits.shape_color[i]],\\n          '\\\"/>'\\n        );\\n      } else {\\n        newShape = abi.encodePacked(newShape, '/>');\\n      }\\n\\n      svgBG = abi.encodePacked(svgBG, newShape);\\n    }\\n    return abi.encodePacked(svgBG, '</g>');\\n  }\\n\\n  /**\\n   * Generates the infinity\\n   */\\n  function generateSVGInfinity(bytes[] memory infColors)\\n    private\\n    pure\\n    returns (bytes memory)\\n  {\\n    bytes memory infinity1 = abi.encodePacked(\\n      '<g><path stroke-dasharray=\\\"0\\\" stroke-dashoffset=\\\"0\\\" stroke-width=\\\"16\\\" ',\\n      'd=\\\"M195.5 248c0 30 37.5 30 52.5 0s 52.5-30 52.5 0s-37.5 30-52.5 0s-52.5-30-52.5 0\\\" fill=\\\"none\\\">',\\n      '<animate begin=\\\"s.begin\\\" attributeType=\\\"XML\\\" attributeName=\\\"stroke\\\" values=\\\"',\\n      infColors[0],\\n      ';',\\n      infColors[1],\\n      ';',\\n      infColors[0],\\n      '\\\" dur=\\\"4s\\\" fill=\\\"freeze\\\"/>'\\n    );\\n    bytes memory infinity2 = abi.encodePacked(\\n      '<animate begin=\\\"s.begin\\\" attributeType=\\\"XML\\\" attributeName=\\\"stroke-dasharray\\\" values=\\\"0;50;0\\\" dur=\\\"6s\\\" fill=\\\"freeze\\\"/>',\\n      '<animate begin=\\\"a.begin\\\" attributeType=\\\"XML\\\" attributeName=\\\"stroke-width\\\" values=\\\"16;20;16\\\" dur=\\\"1s\\\" fill=\\\"freeze\\\"/>',\\n      '</path><path stroke-dasharray=\\\"300\\\" stroke-dashoffset=\\\"300\\\" stroke-width=\\\"16\\\" ',\\n      'd=\\\"M195.5 248c0 30 37.5 30 52.5 0s 52.5-30 52.5 0s-37.5 30-52.5 0s-52.5-30-52.5 0\\\" fill=\\\"none\\\">'\\n    );\\n    bytes memory infinity3 = abi.encodePacked(\\n      '<animate begin=\\\"s.begin\\\" attributeType=\\\"XML\\\" attributeName=\\\"stroke\\\" values=\\\"',\\n      infColors[2],\\n      ';',\\n      infColors[0],\\n      ';',\\n      infColors[2],\\n      '\\\" dur=\\\"4s\\\" fill=\\\"freeze\\\"/>',\\n      '<animate id=\\\"a\\\" begin=\\\"s.begin;a.end\\\" attributeType=\\\"XML\\\" attributeName=\\\"stroke-width\\\" values=\\\"16;20;16\\\" dur=\\\"1s\\\" fill=\\\"freeze\\\"/>',\\n      '<animate id=\\\"s\\\" attributeType=\\\"XML\\\" attributeName=\\\"stroke-dashoffset\\\" begin=\\\"0s;s.end\\\" to= \\\"-1800\\\" dur=\\\"6s\\\"/></path></g>'\\n    );\\n    return abi.encodePacked(infinity1, infinity2, infinity3);\\n  }\\n\\n  /**\\n   * Generates the logo\\n   */\\n  function generateSVGLogo(\\n    bytes[] memory baseColors,\\n    bytes memory logoColors,\\n    uint16 rarity_roll,\\n    string memory tokenId\\n  ) private pure returns (bytes memory) {\\n    \\n    bytes memory logo = abi.encodePacked(\\n      '<g id=\\\"',tokenId,'b\\\">',\\n      '<path d=\\\"M194 179H131c-34 65 0 143 0 143h63C132 251 194 179 194 179Zm-26 128H144s-25-35 0-111h23S126 245 168 307Z\\\" ',\\n      'stroke=\\\"black\\\" fill-opacity=\\\"0.9\\\" stroke-width=\\\"0.7\\\">'\\n    );\\n\\n    if (\\n      rarity_roll % 333 == 0 || rarity_roll % 241 == 0 || rarity_roll % 19 == 0\\n    ) {\\n      //Shimmer\\n      logo = abi.encodePacked(\\n        logo,\\n        '<set attributeName=\\\"stroke-dasharray\\\" to=\\\"20\\\"/>',\\n        '<set attributeName=\\\"stroke-width\\\" to=\\\"2\\\"/>',\\n        '<set attributeName=\\\"fill\\\" to=\\\"',\\n        logoColors,\\n        '\\\"/>',\\n        '<animate begin=\\\"s.begin\\\" attributeType=\\\"XML\\\" attributeName=\\\"stroke-dashoffset\\\" from=\\\"0\\\" to=\\\"280\\\" dur=\\\"6s\\\" fill=\\\"freeze\\\"/>',\\n        '<animate begin=\\\"s.begin\\\" attributeType=\\\"XML\\\" attributeName=\\\"stroke\\\" values=\\\"',\\n        baseColors[0],\\n        ';',\\n        baseColors[1],\\n        ';',\\n        baseColors[2],\\n        ';',\\n        baseColors[0],\\n        '\\\" dur=\\\"6s\\\" fill=\\\"freeze\\\"/>'\\n      );\\n    } else {\\n      logo = abi.encodePacked(\\n        logo,\\n        '<animate begin=\\\"s.begin\\\" attributeName=\\\"fill\\\" dur=\\\"6s\\\" '\\n        'values=\\\"black;',\\n        baseColors[0],\\n        ';black;',\\n        baseColors[1],\\n        ';black;',\\n        baseColors[2],\\n        ';black\\\"/>'\\n      );\\n    }\\n    return logo;\\n  }\\n\\n  /**\\n   * Generates the drift\\n   */\\n  function generateSVGDrift(\\n    bytes[] memory baseColors,\\n    bytes memory driftColors,\\n    uint16 rarity_roll,\\n    bytes7 sigil,\\n    string memory tokenId\\n  ) private pure returns (bytes memory) {\\n    if (rarity_roll % 11 != 0) {\\n      // Drift is colored as a single color unless Tokyo Drift trait\\n      baseColors[0] = driftColors;\\n      baseColors[1] = driftColors;\\n      baseColors[2] = driftColors;\\n    }\\n    bytes memory borders1 = abi.encodePacked(\\n      '</path><text x=\\\"2\\\" y=\\\"40\\\" font-size=\\\"3em\\\" fill-opacity=\\\"0.3\\\" fill=\\\"',\\n      'black\\\">',\\n      sigil,\\n      '</text>',\\n      '<path d=\\\"M90 203c-21 41 0 91 0 91h11c0 0-16-42 0-91z\\\" stroke-opacity=\\\"0.7\\\" fill-opacity=\\\"0.7\\\" fill=\\\"transparent\\\">'\\n      '<animate id=\\\"w\\\" attributeName=\\\"fill\\\" values=\\\"transparent;',\\n      baseColors[0],\\n      ';transparent\\\" begin=\\\"s.begin+.17s;s.begin+2.17s;s.begin+4.17s\\\" dur=\\\"1s\\\"/>',\\n      '<animate begin=\\\"w.begin\\\" attributeName=\\\"stroke\\\" values=\\\"transparent;black;transparent\\\" dur=\\\"1s\\\"/>',\\n      '</path>'\\n    );\\n\\n    bytes memory borders2 = abi.encodePacked(\\n      '<path d=\\\"M60 212c-17 34 0 74 0 74h9c0-1-13-34 0-74z\\\" stroke-opacity=\\\"0.5\\\" fill-opacity=\\\"0.5\\\" fill=\\\"transparent\\\">',\\n      '<animate attributeName=\\\"fill\\\" values=\\\"transparent;',\\n      baseColors[1],\\n      ';transparent\\\" begin=\\\"w.begin+0.2s\\\" dur=\\\"1s\\\"/>',\\n      '<animate attributeName=\\\"stroke\\\" values=\\\"transparent;black;transparent\\\" begin=\\\"w.begin+0.2s\\\" dur=\\\"1s\\\"/>',\\n      '</path>'\\n    );\\n\\n    bytes memory borders3 = abi.encodePacked(\\n      '<path d=\\\"M37 221c-13 26 0 57 0 57h7c0 0-10-26 0-57z\\\" stroke-opacity=\\\"0.3\\\" fill-opacity=\\\"0.3\\\" fill=\\\"transparent\\\">',\\n      '<animate attributeName=\\\"fill\\\" values=\\\"transparent;',\\n      baseColors[2],\\n      ';transparent\\\" begin=\\\"w.begin+0.4s\\\" dur=\\\"1s\\\"/>',\\n      '<animate attributeName=\\\"stroke\\\" values=\\\"transparent;black;transparent\\\" begin=\\\"w.begin+0.4s\\\" dur=\\\"1s\\\"/>',\\n      '</path></g><use href=\\\"#',tokenId,'b\\\" x=\\\"-500\\\" y=\\\"-500\\\" transform=\\\"rotate(180)\\\"/>'\\n    );\\n\\n    return abi.encodePacked(borders1, borders2, borders3);\\n  }\\n\\n  /**\\n   * Generates the NFT traits by stored seed (note: seed generated and stored at mint)\\n   */\\n  function generateTraits(uint256 tokenId)\\n    private\\n    view\\n    returns (SyncTraitsStruct memory)\\n  {\\n    // Initialize struct arrays\\n    SyncTraitsStruct memory syncTraits;\\n    syncTraits.shape_x = new uint16[](15);\\n    syncTraits.shape_y = new uint16[](15);\\n    syncTraits.shape_sizex = new uint16[](15);\\n    syncTraits.shape_sizey = new uint16[](15);\\n    syncTraits.shape_r = new uint16[](15);\\n    syncTraits.shape_type = new uint8[](15);\\n    syncTraits.shape_color = new uint8[](15);\\n    syncTraits.bgColors = new bytes[](3);\\n    syncTraits.infColors = new bytes[](3);\\n\\n    // Retrieve seed from storage\\n    uint256 seed = _seed[tokenId];\\n    syncTraits.rarity_roll = uint16(\\n      1 + ((seed & 0x3FF) % 1000) // range 1 to 2047 % 1000 - ~ slightly bottom heavy but round numbers nicer\\n    );\\n\\n    // Calculate traits\\n    syncTraits.baseColors = getColorsHexStrings(tokenId);\\n\\n    if (syncTraits.rarity_roll % 333 == 0) {\\n      // 0.3% probability (3 in 1000)\\n      syncTraits.theme = 'Concave';\\n      syncTraits.sigil = '\\\\xE2\\\\x9D\\\\xAA\\\\x20\\\\xE2\\\\x9D\\\\xAB'; //( )\\n      syncTraits.bgColors[0] = '#214F70'; //Light Blue\\n      syncTraits.bgColors[1] = '#2E2E3F'; //Dark Blue\\n      syncTraits.bgColors[2] = '#2E2E3F'; //Dark Blue\\n      syncTraits.infColors[0] = '#FAF7C0'; //Con-yellow\\n      syncTraits.infColors[1] = '#214F70'; //Light Blue\\n      syncTraits.infColors[2] = '#FAF7C0'; //Con-yellow\\n      syncTraits.logoColors = '#FAF7C0'; //Con-yellow\\n      syncTraits.driftColors = '#FAF7C0';\\n    } else if (syncTraits.rarity_roll % 241 == 0) {\\n      // 0.4% probability (4 in 1000)\\n      syncTraits.theme = 'Olympus';\\n      syncTraits.sigil = '\\\\xF0\\\\x9D\\\\x9B\\\\x80\\\\x20\\\\x20\\\\x20'; // OMEGA\\n      syncTraits.bgColors[0] = '#80A6AF'; // Oly Blue\\n      syncTraits.bgColors[1] = '#3A424F'; // Dark Blue\\n      syncTraits.bgColors[2] = '#80A6AF'; // Oly Blue\\n      syncTraits.infColors[0] = '#FFC768'; // Oly yellow\\n      syncTraits.infColors[1] = '#3A424F'; // Dark Blue\\n      syncTraits.infColors[2] = '#FFC768'; // Oly yellow\\n      syncTraits.logoColors = '#FFC768'; // Oly-yellow\\n      syncTraits.driftColors = '#FFC768';\\n    } else if (syncTraits.rarity_roll % 19 == 0) {\\n      // ~4% probability (50-10 in 1000)\\n      syncTraits.theme = 'Silver';\\n      syncTraits.sigil = '\\\\xE2\\\\x98\\\\x86\\\\x20\\\\x20\\\\x20\\\\x20'; // Empty Star\\n      syncTraits.bgColors[0] = '#c0c0c0'; // Silver\\n      syncTraits.bgColors[1] = '#e5e4e2'; // Platinum\\n      syncTraits.bgColors[2] = '#c0c0c0'; // Silver\\n      syncTraits.infColors[0] = 'white';\\n      syncTraits.infColors[1] = '#C0C0C0'; // silver\\n      syncTraits.infColors[2] = '#CD7F32'; // Gold\\n      syncTraits.logoColors = 'black';\\n      syncTraits.driftColors = 'black';\\n      // Silver has 1 in 4 chance of upgrading to gold\\n      // (contract memory usage happened to be more efficient this way)\\n      if (syncTraits.rarity_roll % 95 == 0) {\\n        // `~1% probability (10 in 1000)\\n        syncTraits.theme = 'Gold'; // Gold\\n        syncTraits.sigil = '\\\\xE2\\\\x98\\\\x85\\\\x20\\\\x20\\\\x20\\\\x20'; // Full star\\n        syncTraits.bgColors[0] = '#CD7F32'; // Gold\\n        syncTraits.bgColors[2] = '#725d18'; // Darker Gold\\n        syncTraits.infColors[0] = 'black';\\n        syncTraits.infColors[2] = '#E5E4E2'; // Platinum\\n      }\\n    } else {\\n      syncTraits.theme = 'Common'; // Common\\n      syncTraits.sigil = '\\\\xE2\\\\x97\\\\x8F\\\\x20\\\\x20\\\\x20\\\\x20'; // Circle \\n      syncTraits.driftColors = 'white';\\n      syncTraits.bgColors = syncTraits.baseColors;\\n      syncTraits.infColors = syncTraits.baseColors;\\n\\n      bytes[] memory upgrades = new bytes[](3);\\n      upgrades[0] = '#214F70';\\n      upgrades[1] = '#FAF7C0';\\n      upgrades[2] = '#222222';\\n      \\n      if (syncTraits.rarity_roll % 13 == 0) {\\n        // 7.7% probability ((77 in 1000)\\n        syncTraits.theme = 'Mosaic';\\n        syncTraits.sigil = '\\\\xE2\\\\x9C\\\\xA6\\\\x20\\\\x20\\\\x20\\\\x20'; // Full Diamond\\n        upgrades[2] = '#3A424F';\\n      } else if (syncTraits.rarity_roll % 11 == 0) {\\n        // 9% probability (91 in 1000)\\n        syncTraits.theme = 'Tokyo Drift';\\n        syncTraits.sigil = '\\\\xE2\\\\x9C\\\\xA7\\\\x20\\\\x20\\\\x20\\\\x20'; //Empty Diamond\\n        upgrades[2] = '#3A424F';\\n      }\\n      if (_colorTokenIds[tokenId].length == 0){\\n        syncTraits.baseColors[0] = upgrades[syncTraits.rarity_roll % 3];\\n      }\\n    }\\n    //Background generation\\n    for (uint256 i = 0; i < 15; i++) {\\n      syncTraits.shape_x[i] = uint16(1 + ((seed & 0x3FF) % 500));\\n      syncTraits.shape_y[i] = uint16(1 + (((seed & 0x3FF0000) / 2**4) % 500));\\n      syncTraits.shape_sizex[i] = uint16(\\n        250 + (((seed & 0x1FF00000000) / 2**5) % 151)\\n      );\\n      syncTraits.shape_sizey[i] = uint16(\\n        250 + (((seed & 0x1FF000000000000) >> 48) % 151)\\n      );\\n      syncTraits.shape_r[i] = uint16(\\n        1 + (((seed & 0x1FF0000000000000000) / 2**6) % 360)\\n      );\\n      syncTraits.shape_type[i] = uint8(\\n        ((seed & 0x1FF00000000000000000000) >> 80) % 2\\n      );\\n      syncTraits.shape_color[i] = uint8(\\n        ((seed & 0x1FF000000000000000000000000) >> 96) % 3\\n      );\\n      seed = seed >> 2;\\n    }\\n    return syncTraits;\\n  }\\n\\n  /**\\n   * Produce a PRNG uint256 as hash of several inputs\\n   */\\n  function _rng(uint256 tokenId) private view returns (uint256) {\\n    uint256 _tokenId = tokenId + 1;\\n    uint256 seed = uint256(uint160(THE_COLORS));\\n    return\\n      uint256(\\n        keccak256(\\n          abi.encodePacked(\\n            _tokenId.toString(),\\n            block.timestamp,\\n            block.difficulty,\\n            seed\\n          )\\n        )\\n      ) + uint256(_tokenId * seed);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"base64-sol/base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/legacy_colors/TheColors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\\nimport 'base64-sol/base64.sol';\\nimport './INFTOwner.sol';\\n\\n\\n/**\\n * @title TheColors contract\\n * @dev Extends ERC721 Non-Fungible Token Standard basic implementation\\n */\\ncontract TheColors is ERC721Enumerable, Ownable {\\n  using Strings for uint256;\\n  using Strings for uint32;\\n\\n  string public PROVENANCE_HASH = '';\\n\\n  /*address constant public THE_COLORS_LEGACY = address(0xc22f6c6f04c24Fac546A43Eb2E2eB10b1D2953DA);*/\\n\\n  uint256 public constant MAX_COLORS = 4317;\\n\\n  mapping(uint256 => uint32) private _hexColors;\\n  mapping(uint32 => bool) public existingHexColors;\\n\\n  constructor() ERC721('The Colors (thecolors.art)', 'COLORS') {}\\n\\n  function tokenURI(uint256 tokenId)\\n    public\\n    view\\n    virtual\\n    override(ERC721)\\n    returns (string memory)\\n  {\\n    require(\\n      _hexColors[tokenId] > 0,\\n      'ERC721Metadata: URI query for nonexistent token'\\n    );\\n\\n    uint32 hexColor = _hexColors[tokenId];\\n    string memory hexString = uintToHexString(hexColor);\\n    string memory image = Base64.encode(bytes(generateSVGImage(hexString)));\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          'data:application/json;base64,',\\n          Base64.encode(\\n            bytes(\\n              abi.encodePacked(\\n                '{',\\n                '\\\"image\\\":\\\"',\\n                'data:image/svg+xml;base64,',\\n                image,\\n                '\\\",',\\n                '\\\"image_data\\\":\\\"',\\n                escapeQuotes(generateSVGImage(hexString)),\\n                '\\\",',\\n                generateNameDescription(tokenId, hexString),\\n                generateAttributes(hexColor, hexString),\\n                '}'\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function getTokenMetadata(uint256 tokenId)\\n    public\\n    view\\n    returns (string memory)\\n  {\\n    uint32 hexColor = _hexColors[tokenId];\\n    string memory hexString = uintToHexString(hexColor);\\n    string memory image = Base64.encode(bytes(generateSVGImage(hexString)));\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          'data:application/json',\\n          '{',\\n          '\\\"image\\\":\\\"',\\n          'data:image/svg+xml;base64,',\\n          image,\\n          '\\\",',\\n          '\\\"image_data\\\":\\\"',\\n          escapeQuotes(generateSVGImage(hexString)),\\n          '\\\",',\\n          generateNameDescription(tokenId, hexString),\\n          generateAttributes(hexColor, hexString),\\n          '}'\\n        )\\n      );\\n  }\\n\\n  function getTokenSVG(uint256 tokenId) public view returns (string memory) {\\n    uint32 hexColor = _hexColors[tokenId];\\n    string memory hexString = uintToHexString(hexColor);\\n    return generateSVGImage(hexString);\\n  }\\n\\n  function getBase64TokenSVG(uint256 tokenId)\\n    public\\n    view\\n    returns (string memory)\\n  {\\n    uint32 hexColor = _hexColors[tokenId];\\n    string memory hexString = uintToHexString(hexColor);\\n    string memory image = Base64.encode(bytes(generateSVGImage(hexString)));\\n    return string(abi.encodePacked('data:application/json;base64', image));\\n  }\\n\\n  function getHexColor(uint256 tokenId) public view returns (string memory) {\\n    uint32 hexColor = _hexColors[tokenId];\\n    string memory hexString = uintToHexString(hexColor);\\n    return string(abi.encodePacked('#', hexString));\\n  }\\n\\n  function getRGB(uint256 tokenId) public view returns (string memory) {\\n    string memory r = getRed(tokenId).toString();\\n    string memory g = getGreen(tokenId).toString();\\n    string memory b = getBlue(tokenId).toString();\\n\\n    return string(abi.encodePacked('rgb(', r, ',', g, ',', b, ')'));\\n  }\\n\\n  function getRed(uint256 tokenId) public view returns (uint32) {\\n    uint32 hexColor = _hexColors[tokenId];\\n    return ((hexColor >> 16) & 0xFF); // Extract the RR byte\\n  }\\n\\n  function getGreen(uint256 tokenId) public view returns (uint32) {\\n    uint32 hexColor = _hexColors[tokenId];\\n    return ((hexColor >> 8) & 0xFF); // Extract the GG byte\\n  }\\n\\n  function getBlue(uint256 tokenId) public view returns (uint32) {\\n    uint32 hexColor = _hexColors[tokenId];\\n    return ((hexColor) & 0xFF); // Extract the BB byte\\n  }\\n\\n  /*\\n   * Set provenance once it's calculated\\n   */\\n  function setProvenanceHash(string memory provenanceHash) public onlyOwner {\\n    PROVENANCE_HASH = provenanceHash;\\n  }\\n\\n  /**\\n   * Mints The Colors to The Colors Legacy holders\\n   */\\n  function mintNextColors(uint256 numberOfTokens) public {\\n    require(\\n      totalSupply() + numberOfTokens <= MAX_COLORS,\\n      'Purchase would exceed max supply of Colors'\\n    );\\n\\n    uint256 mintIndex;\\n    /*address tokenOwner;*/\\n    for (uint256 i = 0; i < numberOfTokens; i++) {\\n      mintIndex = totalSupply();\\n\\n      if (totalSupply() < MAX_COLORS) {\\n        /*tokenOwner = INFTOwner(THE_COLORS_LEGACY).ownerOf(mintIndex);*/\\n\\n        _safeMint(msg.sender, mintIndex);\\n        generateRandomHexColor(mintIndex);\\n      }\\n    }\\n  }\\n\\n  function generateNameDescription(uint256 tokenId, string memory hexString)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '\\\"external_url\\\":\\\"https://thecolors.art\\\",',\\n          unicode'\\\"description\\\":\\\"The Colors are a set of 8,888 iconic shades generated and stored entirely on-chain to be used as a primitive and for color field vibes. ~ A Color is Forever ∞',\\n          '\\\\\\\\nHex: #',\\n          hexString,\\n          '\\\\\\\\n\\\\\\\\nToken id: #',\\n          tokenId.toString(),\\n          '\\\",',\\n          '\\\"name\\\":\\\"#',\\n          hexString,\\n          '\\\",'\\n        )\\n      );\\n  }\\n\\n  function generateAttributes(uint32 hexColor, string memory hexString)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    string memory r = ((hexColor >> 16) & 0xFF).toString(); // Extract the RR byte\\n    string memory g = ((hexColor >> 8) & 0xFF).toString(); // Extract the GG byte\\n    string memory b = ((hexColor) & 0xFF).toString(); // Extract the BB byte\\n\\n    string memory rgb = string(\\n      abi.encodePacked('rgb(', r, ',', g, ',', b, ')')\\n    );\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          '\\\"attributes\\\":[',\\n          '{\\\"trait_type\\\":\\\"Hex code\\\",\\\"value\\\":\\\"#',\\n          hexString,\\n          '\\\"},'\\n          '{\\\"trait_type\\\":\\\"RGB\\\",\\\"value\\\":\\\"',\\n          rgb,\\n          '\\\"},',\\n          '{\\\"trait_type\\\":\\\"Red\\\",\\\"value\\\":\\\"',\\n          r,\\n          '\\\"},',\\n          '{\\\"trait_type\\\":\\\"Green\\\",\\\"value\\\":\\\"',\\n          g,\\n          '\\\"},',\\n          '{\\\"trait_type\\\":\\\"Blue\\\",\\\"value\\\":\\\"',\\n          b,\\n          '\\\"}',\\n          ']'\\n        )\\n      );\\n  }\\n\\n  function generateSVGImage(string memory hexString)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<svg width=\\\"690\\\" height=\\\"690\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" style=\\\"background-color:#',\\n          hexString,\\n          '\\\">',\\n          '</svg>'\\n        )\\n      );\\n  }\\n\\n  function generateRandomHexColor(uint256 tokenId) internal returns (uint32) {\\n    uint32 hexColor = uint32(_rng() % 16777215);\\n\\n    while (existingHexColors[hexColor]) {\\n      hexColor = uint32(\\n        uint256(hexColor + block.timestamp * tokenId) % 16777215\\n      );\\n    }\\n\\n    existingHexColors[hexColor] = true;\\n    _hexColors[tokenId] = hexColor;\\n\\n    return hexColor;\\n  }\\n\\n  function uintToHexString(uint256 number) public pure returns (string memory) {\\n    bytes32 value = bytes32(number);\\n    bytes memory alphabet = '0123456789abcdef';\\n\\n    bytes memory str = new bytes(6);\\n    for (uint256 i = 0; i < 3; i++) {\\n      str[i * 2] = alphabet[uint256(uint8(value[i + 29] >> 4))];\\n      str[1 + i * 2] = alphabet[uint256(uint8(value[i + 29] & 0x0f))];\\n    }\\n\\n    return string(str);\\n  }\\n\\n  function escapeQuotes(string memory symbol)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    bytes memory symbolBytes = bytes(symbol);\\n    uint256 quotesCount = 0;\\n    for (uint256 i = 0; i < symbolBytes.length; i++) {\\n      if (symbolBytes[i] == '\\\"') {\\n        quotesCount++;\\n      }\\n    }\\n    if (quotesCount > 0) {\\n      bytes memory escapedBytes = new bytes(symbolBytes.length + (quotesCount));\\n      uint256 index;\\n      for (uint256 i = 0; i < symbolBytes.length; i++) {\\n        if (symbolBytes[i] == '\\\"') {\\n          escapedBytes[index++] = '\\\\\\\\';\\n        }\\n        escapedBytes[index++] = symbolBytes[i];\\n      }\\n      return string(escapedBytes);\\n    }\\n    return symbol;\\n  }\\n\\n  function _rng() internal view returns (uint256) {\\n    return\\n      uint256(keccak256(abi.encodePacked(block.timestamp + block.difficulty)));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/legacy_colors/INFTOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface INFTOwner {\\n  function ownerOf(uint256 tokenId) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 5\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MintedReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THE_COLORS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalReservedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"colorTokenIds\",\"type\":\"uint16[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resyncPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"colorTokenIds\",\"type\":\"uint16[]\"}],\"name\":\"updateColors\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SyncXColors","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"5","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}