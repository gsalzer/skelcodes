{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Invasion.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/// @title: Metavaders - Invasion\\r\\n/// @author: PxGnome\\r\\n/// @notice: Used to interact with metavaders NFT contract\\r\\n/// @dev: This is Version 1.0\\r\\n//\\r\\n// ███╗   ███╗███████╗████████╗ █████╗ ██╗   ██╗ █████╗ ██████╗ ███████╗██████╗ ███████╗\\r\\n// ████╗ ████║██╔════╝╚══██╔══╝██╔══██╗██║   ██║██╔══██╗██╔══██╗██╔════╝██╔══██╗██╔════╝\\r\\n// ██╔████╔██║█████╗     ██║   ███████║██║   ██║███████║██║  ██║█████╗  ██████╔╝███████╗\\r\\n// ██║╚██╔╝██║██╔══╝     ██║   ██╔══██║╚██╗ ██╔╝██╔══██║██║  ██║██╔══╝  ██╔══██╗╚════██║\\r\\n// ██║ ╚═╝ ██║███████╗   ██║   ██║  ██║ ╚████╔╝ ██║  ██║██████╔╝███████╗██║  ██║███████║\\r\\n// ╚═╝     ╚═╝╚══════╝   ╚═╝   ╚═╝  ╚═╝  ╚═══╝  ╚═╝  ╚═╝╚═════╝ ╚══════╝╚═╝  ╚═╝╚══════╝\\r\\n//\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n// Abstract Contract Used for Inheriting\\r\\nabstract contract IMetavader {\\r\\n    function changeMode(uint256 tokenId, string memory mode) public virtual;\\r\\n    function ownerOf(uint256 tokenId) public view virtual returns (address);\\r\\n    function getBaseURI() public view virtual returns (string memory);\\r\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory);\\r\\n}\\r\\n\\r\\n// Abstract Contract Used for Inheriting\\r\\nabstract contract mvCustomIERC721 {\\r\\n    function balanceOf(address owner) public view virtual returns (uint256);\\r\\n    function ownerOf(uint256 tokenId) public view virtual returns (address);\\r\\n    function approve(address to, uint256 tokenId) public virtual;\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual;\\r\\n}\\r\\n\\r\\ncontract Invasion is \\r\\n    Ownable\\r\\n{   \\r\\n    using Strings for uint256;\\r\\n\\r\\n    address public vaultAddress;\\r\\n    address public invadeAddress;\\r\\n    address public metavadersAddress;\\r\\n    bool public paused = true;\\r\\n\\r\\n    IMetavader MetavaderContract;\\r\\n    mvCustomIERC721 InvasionContract;\\r\\n\\r\\n    // -- CONSTRUCTOR FUNCTIONS -- //\\r\\n    // 10101 Metavaders in total\\r\\n    constructor(address _metavadersAddress, address _invadeAddress) {\\r\\n        metavadersAddress = _metavadersAddress;\\r\\n        invadeAddress = _invadeAddress;\\r\\n        vaultAddress = owner();\\r\\n        MetavaderContract = IMetavader(_metavadersAddress);\\r\\n        InvasionContract = mvCustomIERC721(_invadeAddress);\\r\\n    }\\r\\n\\r\\n    // // -- UTILITY FUNCTIONS -- //\\r\\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\\r\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\r\\n    }\\r\\n\\r\\n    // -- SMART CONTRACT OWNER ONLY FUNCTIONS -- //\\r\\n    // Change Vault Address For Future Use\\r\\n    function updateVaultAddress(address _address) public onlyOwner {\\r\\n        vaultAddress = _address;\\r\\n    }\\r\\n    // Update Invade Address Incase There Is an Issue\\r\\n    function updateInvadeAddress(address _address) public onlyOwner {\\r\\n        invadeAddress = _address;\\r\\n    }\\r\\n    // Update Invade Address Incase There Is an Issue\\r\\n    function updateMetavadersAddress(address _address) public onlyOwner {\\r\\n        metavadersAddress = _address;\\r\\n    }\\r\\n\\r\\n    // Withdraw to owner addresss\\r\\n    function withdrawAll() public payable onlyOwner returns (uint256) {\\r\\n        uint256 balance = address(this).balance;\\r\\n        require(payable(owner()).send(balance)); \\r\\n        return balance;\\r\\n    }\\r\\n\\r\\n    // Pause sale/mint in case of special reason\\r\\n    function pause(bool val) public onlyOwner {\\r\\n        paused = val;\\r\\n    }\\r\\n\\r\\n    // -- INVADER RELATED FUNCTIONS -- //\\r\\n    // In this case relates to Animetas\\r\\n    function getInvadeAddress() public view returns (address) {\\r\\n        return invadeAddress;\\r\\n    }\\r\\n    function getInvaderBalance() public view returns (uint256) {\\r\\n        return InvasionContract.balanceOf(_msgSender());\\r\\n    }\\r\\n    function getInvaderOwnerOf(uint256 tokenId) public view returns (address) {\\r\\n        return InvasionContract.ownerOf(tokenId);\\r\\n    }\\r\\n\\r\\n    // -- CUSTOM ADD ONS  --//\\r\\n    // // // Change back the Metavaders' mode to normal\\r\\n    function changeModeMetavaders_Normal(uint256 tokenId) public virtual {\\r\\n        require(!paused, \\\"Invasion is on hold\\\");\\r\\n        require(MetavaderContract.ownerOf(tokenId) == _msgSender(), \\\"Must be the owner of the Metavader to execute\\\");\\r\\n        require(!compareStrings(MetavaderContract.tokenURI(tokenId), string(abi.encodePacked(MetavaderContract.getBaseURI(), tokenId.toString(), \\\"C\\\"))), \\\"Metavader has transformed and cannot revert\\\");\\r\\n        MetavaderContract.changeMode(tokenId, \\\"\\\"); \\r\\n    }\\r\\n\\r\\n    // // // Changes the Metavaders' mode when also own an Invaded NFT\\r\\n    function changeModeMetavaders_Animetas(uint256 tokenId) public virtual {\\r\\n        require(!paused, \\\"Invasion is on hold\\\");\\r\\n        require(MetavaderContract.ownerOf(tokenId) == _msgSender(), \\\"Must be the owner of the Metavader to execute\\\");\\r\\n        require(InvasionContract.balanceOf(_msgSender()) > 0,  \\\"You needs to own Animetas NFT to activate\\\");\\r\\n        require(!compareStrings(MetavaderContract.tokenURI(tokenId), string(abi.encodePacked(MetavaderContract.getBaseURI(), tokenId.toString(), \\\"C\\\"))), \\\"Metavader has transformed and cannot revert\\\");\\r\\n        MetavaderContract.changeMode(tokenId, \\\"A\\\"); \\r\\n    }\\r\\n\\r\\n    // // // Permenanetly changes the Metavaders' mode if willing to give up the Invaded NFT -- NOTE: NEED APPROVAL PRIOR\\r\\n    function transformMetavaders(uint256 tokenId, uint256 animetas_tokenId) public virtual {\\r\\n        require(MetavaderContract.ownerOf(tokenId) == _msgSender(), \\\"Must be the owner of the Metavader to execute\\\");\\r\\n        require(InvasionContract.ownerOf(animetas_tokenId) == _msgSender(), \\\"Sender is not owner nor approved for Animetas Token\\\");\\r\\n        require(!compareStrings(MetavaderContract.tokenURI(tokenId), string(abi.encodePacked(MetavaderContract.getBaseURI(), tokenId.toString(), \\\"C\\\"))), \\\"Metavader has transformed and cannot revert\\\");\\r\\n        InvasionContract.safeTransferFrom(_msgSender(),  vaultAddress, animetas_tokenId);\\r\\n        MetavaderContract.changeMode(tokenId, \\\"B\\\"); \\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_metavadersAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_invadeAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"changeModeMetavaders_Animetas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"changeModeMetavaders_Normal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInvadeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInvaderBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getInvaderOwnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invadeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metavadersAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"animetas_tokenId\",\"type\":\"uint256\"}],\"name\":\"transformMetavaders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateInvadeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateMetavadersAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateVaultAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"Invasion","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000085a44587136c551c7fdf1f3e99dc68bde1ba3a2b00000000000000000000000018df6c571f6fe9283b87f910e41dc5c8b77b7da5","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}