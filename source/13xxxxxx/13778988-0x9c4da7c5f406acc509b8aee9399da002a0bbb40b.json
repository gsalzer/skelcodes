{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/duckHouseV4.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\n\\n// okay#1746\\n// ▁ ▂ ▄ ▅ 𝔇𝔦𝔞𝔷𝔈𝔱𝔬 ▅ ▄ ▂ ▁#6666\\n/*          \\n                                            ██████████                                  \\n                                      ░░  ██░░░░░░░░░░██                                \\n                                        ██░░░░░░░░░░░░░░██                              \\n                                        ██░░░░░░░░████░░██████████                      \\n                            ██          ██░░░░░░░░████░░██▒▒▒▒▒▒██                      \\n                          ██░░██        ██░░░░░░░░░░░░░░██▒▒▒▒▒▒██                      \\n                          ██░░░░██      ██░░░░░░░░░░░░░░████████                        \\n                        ██░░░░░░░░██      ██░░░░░░░░░░░░██                              \\n                        ██░░░░░░░░████████████░░░░░░░░██                                \\n                        ██░░░░░░░░██░░░░░░░░░░░░░░░░░░░░██                              \\n                        ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██                            \\n                        ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██                            \\n                        ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██                            \\n                        ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██                            \\n                        ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██                            \\n                        ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██                              \\n                          ██░░░░░░░░░░░░░░░░░░░░░░░░░░██                                \\n                            ██████░░░░░░░░░░░░░░░░████                                  \\n                                  ████████████████                                      \\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\n\\nimport \\\"./iquack.sol\\\";\\nimport \\\"./iDuckGen2.sol\\\";\\n\\ncontract DuckHouseV4 is Initializable, IERC721ReceiverUpgradeable, OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable {\\n    // Ref dopey duck contract\\n    IERC721Enumerable public dd;\\n    // Ref quack contract\\n    IQuack public quack;\\n\\n    uint256 public minStakeTime;\\n    uint256 public stakeRewardDefault;\\n    uint256 public stakeRewardBoosted;\\n\\n    mapping(uint256 => bool) tokenIsBoosted;\\n\\n    struct StakeStatus {\\n        bool staked;\\n        uint88 since;\\n        address user;\\n    }\\n\\n    mapping(uint256=>StakeStatus) public steak;\\n\\n    uint256 public version;\\n\\n    // V3 changes\\n    // support claim without unstake\\n    mapping(uint256=>uint256) public gen1TokenLastClaimedAt;        // time that a staked token last had its balance claimed at.  gen1 only.\\n    mapping(uint256=>uint256) public gen2TokenLastClaimedAt;        // time that a staked token last had its balance claimed at.  gen2 only.\\n    // lower gas for checking if an owner has a staked duck for hunter mint;\\n    mapping(address=>uint256) public stakedDuckCountByOwner;        // get the stakedDuckCount by owner (for easy ref for minting hunters)\\n    mapping(address=>uint256) public stakedGen2DuckCountByOwner;    // get the stakedDuckCount by owner (for easy ref for minting hunters)\\n    mapping(address=>uint256[]) private stakedGen2DuckIdsByOwner;\\n\\n    iDD2 public dd2;\\n    mapping(uint256=>StakeStatus) private steak2;    // stake status for gen2 ducks\\n    uint256[] deathstamps;                          // timestamps for duck deaths - to calculate hunter reward bonuses\\n    mapping(address=>bool) admins;\\n    uint256 quackGenInterval;\\n\\n    // Staking options ===\\n    function setMinimumStakeTime(uint256 minTime) public onlyOwner {\\n        minStakeTime = minTime;\\n    }\\n\\n    function setStakeRewardDefault(uint256 defaultReward) public onlyOwner {\\n        stakeRewardDefault = defaultReward;\\n    }\\n\\n    function setStakeRewardBoosted(uint256 boostedReward) public onlyOwner {\\n        stakeRewardBoosted = boostedReward;\\n    }\\n\\n    function setQuackGenerationInterval(uint256 interval) public onlyOwner {\\n        quackGenInterval = interval;\\n    }\\n    // End staking options ===\\n\\n    modifier onlyFromDD2() {\\n        require(_msgSender() == address(dd2) || _msgSender() == owner());\\n        _;\\n    }\\n\\n    constructor(){}\\n    function initialize(address _dd, address _quack, uint256[] calldata boostedTokens) public initializer {\\n        // __ERC721Holder_init();\\n        __ReentrancyGuard_init();\\n        __Ownable_init();\\n        __Pausable_init();\\n\\n        dd = IERC721Enumerable(_dd);\\n        quack = IQuack(_quack);\\n        quack.initialize(\\\"Quack\\\", \\\"QUACK\\\");\\n        \\n        minStakeTime = 2 days;\\n        stakeRewardDefault = 1 ether;\\n        stakeRewardBoosted = 4 ether;\\n\\n        for (uint256 i = 0; i < boostedTokens.length; i++) {\\n            tokenIsBoosted[boostedTokens[i]] = true;\\n        }\\n    }\\n\\n    function upgradeFromV1() public {\\n        require(version < 2, \\\"this contract is already v2+\\\");\\n        version = 2;\\n    }\\n\\n    function upgradeFromV2(address _dd2) public {\\n        require(version < 3, \\\"this contract is already v3+\\\");\\n        version = 3;\\n        \\n        dd2 = iDD2(_dd2);\\n        quack.grantRole(0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6, _dd2);\\n\\n        // Add all current staked duck owners to mapping\\n        for (uint256 i = 0; i < dd.totalSupply(); i++){\\n            if (steak[i].staked) {\\n                stakedDuckCountByOwner[steak[i].user]++;\\n            }\\n        }\\n\\n        admins[owner()] = true;\\n        admins[address(dd2)] = true;\\n    }\\n\\n    function upgradeFromV3(address admin) public {\\n        require(version < 4, \\\"already upgraded\\\");\\n        version = 4;\\n        quack.grantRole(0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6, admin);\\n        quackGenInterval = 1 days;\\n    }\\n\\n    // Staking ====\\n    function stake(uint256[] calldata ids) whenNotPaused public {\\n        for (uint256 i=0; i < ids.length; i++) {\\n            _stake(ids[i]);\\n        }\\n    }\\n\\n    function unstake(uint256[] calldata ids) whenNotPaused public{\\n        for (uint256 i=0; i < ids.length; i++) {\\n            _unstake(ids[i]);\\n        }\\n    }\\n\\n    function _stake(uint256 id) private {\\n        StakeStatus memory stakeStatus = steak[id];\\n        require(stakeStatus.staked == false, \\\"Duck already staked\\\");\\n        dd.transferFrom(_msgSender(), address(this), id);\\n\\n        steak[id] = StakeStatus({\\n            staked:true,\\n            user: _msgSender(),\\n            since: uint88(block.timestamp)\\n        });\\n        stakedDuckCountByOwner[_msgSender()]++;\\n    }\\n\\n    // quackOwed for gen1 tokens\\n    function quackOwed(uint256 id) view public returns (uint256) {\\n        StakeStatus memory stakeStatus = steak[id];\\n        if (!stakeStatus.staked) {\\n            return 0;\\n        }\\n        uint256 lastClaimed;\\n        lastClaimed = stakeStatus.since;\\n        if (gen1TokenLastClaimedAt[id] > stakeStatus.since) {\\n            lastClaimed = gen1TokenLastClaimedAt[id];\\n        }\\n        uint256 diff = (block.timestamp - lastClaimed) / quackGenInterval;\\n\\n        uint256 rate = stakeRewardDefault;\\n        if (tokenIsBoosted[id]) {\\n            rate = stakeRewardBoosted;\\n        }\\n        uint256 owed = diff * rate;\\n        return owed;\\n    }\\n\\n    // quackOwed for gen2 tokens\\n    function quackOwedGen2(uint256 id) humansOnly view public returns (uint256) {\\n        StakeStatus memory stakeStatus = steak2[id];\\n        if (!stakeStatus.staked) {\\n            return 0;\\n        }\\n        uint256 lastClaimed;\\n        lastClaimed = stakeStatus.since;\\n        if (gen2TokenLastClaimedAt[id] > stakeStatus.since) {\\n            lastClaimed = gen2TokenLastClaimedAt[id];\\n        }\\n\\n        uint256 owed;\\n        if (id > 2000) { // non hunter case;\\n            uint256 diff = (block.timestamp - lastClaimed) / quackGenInterval;\\n            owed = diff * 1 ether;\\n        } else { // hunter case\\n            uint256 dayDiff;\\n\\n            // no ducks killed or last deathstamp is before this duck was staked/lastclaimed\\n            if (deathstamps.length == 0 || deathstamps[deathstamps.length-1] < lastClaimed) {\\n                (dayDiff, lastClaimed) = _calculateDayDiff(lastClaimed, block.timestamp);\\n                return dayDiff * 1 ether;\\n            }\\n\\n            // normal case\\n            for (uint256 i = 0; i < deathstamps.length; i++) {\\n                if (deathstamps[i] > lastClaimed) {\\n                    // calculate how much would have been owed by then\\n                    (dayDiff, lastClaimed) = _calculateDayDiff(lastClaimed, deathstamps[i]);\\n                    owed += dayDiff * 1 ether;\\n                    \\n                    // apply bonus\\n                    owed = _applyBonusReward(owed);\\n                }\\n            }\\n\\n        }\\n        return owed;\\n    }\\n\\n    /*\\n    Calculate the difference in days between two timestamps, rounding down.\\n    Also calculate the timestamp of the actual reward time of the last day.\\n    */\\n    function _calculateDayDiff(uint256 timestamp1, uint256 timestamp2) view private returns (uint256 dayDiff, uint256 lastRewardTimestamp) {\\n        dayDiff = (timestamp2 - timestamp1) / quackGenInterval;\\n        lastRewardTimestamp = (60*60*24) * dayDiff + timestamp1;\\n        return (dayDiff, lastRewardTimestamp);\\n    }\\n\\n    function _applyBonusReward(uint256 owed) pure private returns (uint256) {\\n        return owed + 0.25 ether;\\n    }\\n\\n    // only claim for gen1\\n    function onlyClaimQuackForStakedDucks(uint256[] calldata ids) public {\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            require(steak[ids[i]].user == _msgSender(), \\\"Can't claim quack for duck you don't own\\\");\\n            _claimQuack(ids[i]);\\n        }\\n    }\\n\\n    // only claim for gen2\\n    function onlyClaimQuackForStakedGen2Ducks(uint256[] calldata ids) humansOnly public {\\n        require(!dd2.checkLockedAddress(_msgSender()), \\\"Y?\\\");\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            require(steak2[ids[i]].user == _msgSender(), \\\"Gen2: Can't claim quack for duck you don't own\\\");\\n            _claimGen2Quack(ids[i]);\\n        }\\n    }\\n\\n    function _claimQuack(uint256 id) nonReentrant private {\\n        uint256 owed = quackOwed(id);\\n        quack.mint(msg.sender, owed);\\n        // steak[id].since = uint88(block.timestamp);\\n        gen1TokenLastClaimedAt[id] = uint88(block.timestamp);\\n    }\\n\\n    function _claimGen2Quack(uint256 id) nonReentrant private {\\n        uint256 owed = quackOwedGen2(id);\\n        quack.mint(msg.sender, owed);\\n        // steak[id].since = uint88(block.timestamp);\\n        gen2TokenLastClaimedAt[id] = uint88(block.timestamp);\\n    }\\n\\n    function _unstake(uint256 id) private {\\n        StakeStatus memory stakeStatus = steak[id];\\n        require(stakeStatus.staked == true, \\\"Duck not staked\\\");\\n        require(stakeStatus.user == _msgSender(), \\\"This ain't your duck\\\");\\n        require(block.timestamp - stakeStatus.since > minStakeTime, \\\"Min stake time not reached\\\");\\n        dd.transferFrom(address(this), stakeStatus.user, id);\\n\\n        _claimQuack(id);\\n\\n        // set stake status \\n        steak[id] = StakeStatus({\\n            staked: false,\\n            user: _msgSender(),\\n            since: uint88(block.timestamp)\\n        });\\n        stakedDuckCountByOwner[_msgSender()]--;\\n    }\\n    // End Staking ====\\n\\n    // Staking for gen 2 ===\\n    function _setStakeForGen2Token(uint256 id, address originalOwner) public onlyFromDD2 {\\n        require(dd2.ownerOf(id) == address(this), \\\"Not my token :/\\\");\\n        stakedGen2DuckCountByOwner[originalOwner]++;\\n        stakedGen2DuckIdsByOwner[originalOwner].push(id);\\n        steak2[id] = StakeStatus({\\n            staked: true,\\n            user: originalOwner,\\n            since: uint88(block.timestamp)\\n        });\\n    }\\n\\n    function stakeGen2(uint256[] calldata ids) humansOnly public {\\n        require(!dd2.checkLockedAddress(_msgSender()), \\\"Y?\\\");\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _stakeGen2(ids[i]);\\n            // dd2._duckHouseStakingCallback(ids[i], true);\\n        }\\n        dd2._duckHouseStakingCallback();\\n    }\\n\\n    function _stakeGen2(uint256 id) private {\\n        StakeStatus memory stakeStatus = steak2[id];\\n        require(stakeStatus.staked == false, \\\"Gen2: Duck already staked\\\");\\n        require(dd2.ownerOf(id) == _msgSender(), \\\"Gen2: Not your duck\\\");\\n        dd2.transferFrom(_msgSender(), address(this), id);\\n\\n        stakedGen2DuckCountByOwner[_msgSender()]++;\\n        stakedGen2DuckIdsByOwner[_msgSender()].push(id);\\n        steak2[id] = StakeStatus({\\n            staked:true,\\n            user: _msgSender(),\\n            since: uint88(block.timestamp)\\n        });\\n    }\\n\\n    function unstakeGen2(uint256[] calldata ids) humansOnly public {\\n        require(!dd2.checkLockedAddress(_msgSender()), \\\"Y?\\\");\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _unstakeGen2(ids[i]);\\n            // dd2._duckHouseStakingCallback(ids[i], false);\\n        }\\n        dd2._duckHouseStakingCallback();\\n    }\\n\\n    function _unstakeGen2(uint256 id) private {\\n        require(steak2[id].staked == true, \\\"Gen2: Duck not staked\\\");\\n        require(steak2[id].user == _msgSender(), \\\"Gen2: This ain't your duck\\\");\\n        require(block.timestamp - steak2[id].since > minStakeTime, \\\"Gen2: Min stake time not reached\\\");\\n        _claimGen2Quack(id);\\n        dd2.transferFrom(address(this), steak2[id].user, id);\\n        \\n        stakedGen2DuckCountByOwner[steak2[id].user]--;\\n        _removeIdFromGen2OwnerList(_msgSender(), id);\\n        steak2[id] = StakeStatus({\\n            staked: false,\\n            user: address(0),\\n            since: uint88(block.timestamp)\\n        });\\n    }\\n\\n    function _removeIdFromGen2OwnerList(address _owner, uint256 tokenId) private {\\n        uint256 pos;\\n        bool found;\\n        for(uint256 i; i < stakedGen2DuckIdsByOwner[_owner].length; i++) {\\n            if (stakedGen2DuckIdsByOwner[_owner][i] == tokenId) {\\n                found = true;\\n                pos = i;\\n                break;\\n            }\\n        }\\n        if (found) {\\n            delete stakedGen2DuckIdsByOwner[_owner][pos];\\n            stakedGen2DuckIdsByOwner[_owner][pos] = stakedGen2DuckIdsByOwner[_owner][stakedGen2DuckIdsByOwner[_owner].length-1];\\n            stakedGen2DuckIdsByOwner[_owner].pop();\\n        }\\n    }\\n    // End Staking for gen 2 ===\\n\\n    // Staked enumeration\\n    function getStakedDuckCountByOwner(address _owner) public view returns (uint256) {\\n        uint256 count = 0;\\n        StakeStatus memory stakeStatus;\\n        for (uint256 i = 1; i < dd.totalSupply(); i++) {\\n            stakeStatus = steak[i];\\n            if (stakeStatus.user == _owner && stakeStatus.staked == true) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n\\n    function getStakedDuckOfOwnerByIndex(address _owner, uint256 index) public view returns (uint256) {\\n        uint256 count = 0;\\n        for (uint256 i = 1; i < dd.totalSupply(); i++) {\\n            if (steak[i].user == _owner && steak[i].staked == true) {\\n                if (count == index) return i;\\n                count++;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function getGen2StakeStatus(uint256 id) view public humansOnly returns(StakeStatus memory) {\\n        return steak2[id];\\n    }\\n    \\n    function killCallback() public onlyFromDD2 {\\n        deathstamps.push(block.timestamp);\\n    }\\n\\n    function getStakedGen2DuckIdsByOwner(address _owner) view public humansOnly returns(uint256[] memory){\\n        return stakedGen2DuckIdsByOwner[_owner];\\n    }\\n    // end staked enumeration\\n\\n    // admin\\n    function togglePaused() onlyOwner public{\\n        if (paused()) {\\n            _unpause();\\n        } else {\\n            _pause();\\n        }\\n    }\\n    // end admin\\n\\n    modifier humansOnly() {\\n        uint256 size;\\n        address account = _msgSender();\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        require(admins[_msgSender()] || size == 0, \\\"Humans only\\\");\\n        _;\\n    }\\n\\n  function onERC721Received(\\n        address,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata\\n    ) pure external override returns (bytes4) {\\n        require(from == address(0), \\\"Don't stake dux by sending them here\\\");\\n        return IERC721ReceiverUpgradeable.onERC721Received.selector;\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\\n    function __ERC721Holder_init() internal initializer {\\n        __ERC721Holder_init_unchained();\\n    }\\n\\n    function __ERC721Holder_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/iquack.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IQuack is IERC20Upgradeable {\\n    function burnFrom(address from, uint256 amount) external;\\n    function initialize(string memory, string memory) external;\\n    function mint(address, uint256) external;\\n    function grantRole(bytes32, address) external;\\n    // function balanceOf(address account) external;\\n}\"\r\n    },\r\n    \"contracts/iDuckGen2.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface iDD2 is IERC721Enumerable {\\n    function _duckHouseStakingCallback(uint256 id, bool staked) external;\\n    function _duckHouseStakingCallback() external;\\n    function checkLockedAddress(address) external returns(bool);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originalOwner\",\"type\":\"address\"}],\"name\":\"_setStakeForGen2Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dd\",\"outputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dd2\",\"outputs\":[{\"internalType\":\"contract iDD2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gen1TokenLastClaimedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gen2TokenLastClaimedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getGen2StakeStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"uint88\",\"name\":\"since\",\"type\":\"uint88\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"internalType\":\"struct DuckHouseV4.StakeStatus\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getStakedDuckCountByOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getStakedDuckOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getStakedGen2DuckIdsByOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quack\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"boostedTokens\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"onlyClaimQuackForStakedDucks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"onlyClaimQuackForStakedGen2Ducks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quack\",\"outputs\":[{\"internalType\":\"contract IQuack\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"quackOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"quackOwedGen2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTime\",\"type\":\"uint256\"}],\"name\":\"setMinimumStakeTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"setQuackGenerationInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boostedReward\",\"type\":\"uint256\"}],\"name\":\"setStakeRewardBoosted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"defaultReward\",\"type\":\"uint256\"}],\"name\":\"setStakeRewardDefault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"stakeGen2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeRewardBoosted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeRewardDefault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedDuckCountByOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedGen2DuckCountByOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"steak\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"uint88\",\"name\":\"since\",\"type\":\"uint88\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"unstakeGen2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeFromV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dd2\",\"type\":\"address\"}],\"name\":\"upgradeFromV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"upgradeFromV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DuckHouseV4","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}