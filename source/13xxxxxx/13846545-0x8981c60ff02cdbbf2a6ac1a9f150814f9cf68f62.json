{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/miningFixRangeBoost/miningFixRangeBoost.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.4;\\n\\n// Uncomment if needed.\\n// import \\\"hardhat/console.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\nimport \\\"../multicall.sol\\\";\\n\\n/// @title Simple math library for Max and Min.\\nlibrary Math {\\n    function max(int24 a, int24 b) internal pure returns (int24) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(int24 a, int24 b) internal pure returns (int24) {\\n        return a < b ? a : b;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\\n/// @title Uniswap V3 Nonfungible Position Manager Interface\\ninterface PositionManagerV3 {\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n}\\n\\n/// @title Uniswap V3 Liquidity Mining Main Contract\\ncontract MiningFixRangeBoost is Ownable, Multicall, ReentrancyGuard, IERC721Receiver {\\n    using Math for int24;\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    struct PoolInfo {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @dev Contract of the uniV3 Nonfungible Position Manager.\\n    PositionManagerV3 uniV3NFTManager;\\n    PoolInfo public rewardPool;\\n\\n    /// @dev The reward range of this mining contract.\\n    int24 rewardUpperTick;\\n    int24 rewardLowerTick;\\n\\n    /// @dev Last block number that the accRewardRerShare is touched.\\n    uint256 lastTouchBlock;\\n\\n    /// @dev The block number when NFT mining rewards starts/ends.\\n    uint256 startBlock;\\n    uint256 endBlock;\\n\\n    struct RewardInfo {\\n        /// @dev Contract of the reward erc20 token.\\n        address rewardToken;\\n        /// @dev who provides reward\\n        address provider;\\n        /// @dev Accumulated Reward Tokens per share, times 1e128.\\n        uint256 accRewardPerShare;\\n        /// @dev Reward amount for each block.\\n        uint256 rewardPerBlock;\\n    }\\n\\n    mapping(uint256 => RewardInfo) public rewardInfos;\\n    uint256 public rewardInfosLen;\\n\\n    /// @dev Store the owner of the NFT token\\n    mapping(uint256 => address) public owners;\\n    /// @dev The inverse mapping of owners.\\n    mapping(address => EnumerableSet.UintSet) private tokenIds;\\n\\n    /// @dev Record the status for a certain token for the last touched time.\\n    struct TokenStatus {\\n        uint256 vLiquidity;\\n        uint256 validVLiquidity;\\n        uint256 nIZI;\\n        uint256 lastTouchBlock;\\n        uint256[] lastTouchAccRewardPerShare;\\n    }\\n\\n    mapping(uint256 => TokenStatus) public tokenStatus;\\n\\n    function lastTouchAccRewardPerShare(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256[] memory lta)\\n    {\\n        TokenStatus memory t = tokenStatus[tokenId];\\n        uint256 len = t.lastTouchAccRewardPerShare.length;\\n        lta = new uint256[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            lta[i] = t.lastTouchAccRewardPerShare[i];\\n        }\\n        return lta;\\n    }\\n\\n    /// @dev token to lock, 0 for not boost\\n    IERC20 public iziToken;\\n    /// @dev current total nIZI.\\n    uint256 public totalNIZI;\\n\\n    /// @dev Current total virtual liquidity.\\n    uint256 public totalVLiquidity;\\n\\n    /// @dev 2 << 128\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n\\n    // Events\\n    event Deposit(address indexed user, uint256 tokenId, uint256 nIZI);\\n    event Withdraw(address indexed user, uint256 tokenId);\\n    event CollectReward(address indexed user, uint256 tokenId, address token, uint256 amount);\\n    event ModifyEndBlock(uint256 endBlock);\\n    event ModifyRewardPerBlock(address indexed rewardToken, uint256 rewardPerBlock);\\n    event ModifyProvider(address indexed rewardToken, address provider);\\n\\n    constructor(\\n        address _uniV3NFTManager,\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        RewardInfo[] memory _rewardInfos,\\n        address iziTokenAddr,\\n        int24 _rewardUpperTick,\\n        int24 _rewardLowerTick,\\n        uint256 _startBlock,\\n        uint256 _endBlock\\n    ) {\\n        uniV3NFTManager = PositionManagerV3(_uniV3NFTManager);\\n        require(_rewardLowerTick < _rewardUpperTick, \\\"L<U\\\");\\n        require(token0 < token1, \\\"TOKEN0 < TOKEN1 NOT MATCH\\\");\\n        rewardPool.token0 = token0;\\n        rewardPool.token1 = token1;\\n        rewardPool.fee = fee;\\n\\n        rewardInfosLen = _rewardInfos.length;\\n        require(rewardInfosLen > 0, \\\"NO REWARD\\\");\\n        require(rewardInfosLen < 3, \\\"AT MOST 2 REWARDS\\\");\\n\\n        for (uint256 i = 0; i < rewardInfosLen; i++) {\\n            rewardInfos[i] = _rewardInfos[i];\\n            rewardInfos[i].accRewardPerShare = 0;\\n        }\\n\\n        // iziTokenAddr == 0 means not boost\\n        iziToken = IERC20(iziTokenAddr);\\n\\n        rewardUpperTick = _rewardUpperTick;\\n        rewardLowerTick = _rewardLowerTick;\\n\\n        startBlock = _startBlock;\\n        endBlock = _endBlock;\\n\\n        lastTouchBlock = startBlock;\\n\\n        totalVLiquidity = 0;\\n        totalNIZI = 0;\\n    }\\n\\n    /// @notice Used for ERC721 safeTransferFrom\\n    function onERC721Received(address, address, uint256, bytes memory) \\n        public \\n        virtual \\n        override \\n        returns (bytes4) \\n    {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /// @notice Get the overall info for the mining contract.\\n    function getMiningContractInfo()\\n        external\\n        view\\n        returns (\\n            address token0_,\\n            address token1_,\\n            uint24 fee_,\\n            RewardInfo[] memory rewardInfos_,\\n            address iziTokenAddr_,\\n            int24 rewardUpperTick_,\\n            int24 rewardLowerTick_,\\n            uint256 lastTouchBlock_,\\n            uint256 totalVLiquidity_,\\n            uint256 startBlock_,\\n            uint256 endBlock_\\n        )\\n    {\\n        rewardInfos_ = new RewardInfo[](rewardInfosLen);\\n        for (uint256 i = 0; i < rewardInfosLen; i++) {\\n            rewardInfos_[i] = rewardInfos[i];\\n        }\\n        return (\\n            rewardPool.token0,\\n            rewardPool.token1,\\n            rewardPool.fee,\\n            rewardInfos_,\\n            address(iziToken),\\n            rewardUpperTick,\\n            rewardLowerTick,\\n            lastTouchBlock,\\n            totalVLiquidity,\\n            startBlock,\\n            endBlock\\n        );\\n    }\\n\\n    /// @notice Compute the virtual liquidity from a position's parameters.\\n    /// @param tickLower The lower tick of a position.\\n    /// @param tickUpper The upper tick of a position.\\n    /// @param liquidity The liquidity of a a position.\\n    /// @dev vLiquidity = liquidity * validRange^2 / 1e6, where the validRange is the tick amount of the\\n    /// intersection between the position and the reward range.\\n    /// We divided it by 1e6 to keep vLiquidity smaller than Q128 in most cases. This is safe since liqudity is usually a large number.\\n    function _getVLiquidityForNFT(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 liquidity\\n    ) internal view returns (uint256 vLiquidity) {\\n        // liquidity is roughly equals to sqrt(amountX*amountY)\\n        require(liquidity >= 1e6, \\\"LIQUIDITY TOO SMALL\\\");\\n        uint256 validRange = uint24(\\n            Math.max(\\n                Math.min(rewardUpperTick, tickUpper) - Math.max(rewardLowerTick, tickLower),\\n                0\\n            )\\n        );\\n        vLiquidity = (validRange * validRange * uint256(liquidity)) / 1e6;\\n        return vLiquidity;\\n    }\\n\\n    /// @notice new a token status when touched.\\n    function _newTokenStatus(\\n        uint256 tokenId,\\n        uint256 vLiquidity,\\n        uint256 validVLiquidity,\\n        uint256 nIZI\\n    ) internal {\\n        TokenStatus storage t = tokenStatus[tokenId];\\n\\n        t.vLiquidity = vLiquidity;\\n        t.validVLiquidity = validVLiquidity;\\n        t.nIZI = nIZI;\\n\\n        t.lastTouchBlock = lastTouchBlock;\\n        t.lastTouchAccRewardPerShare = new uint256[](rewardInfosLen);\\n        for (uint256 i = 0; i < rewardInfosLen; i++) {\\n            t.lastTouchAccRewardPerShare[i] = rewardInfos[i].accRewardPerShare;\\n        }\\n    }\\n\\n    /// @notice update a token status when touched\\n    function _updateTokenStatus(\\n        uint256 tokenId,\\n        uint256 vLiquidity,\\n        uint256 validVLiquidity,\\n        uint256 nIZI\\n    ) internal {\\n        TokenStatus storage t = tokenStatus[tokenId];\\n\\n        t.vLiquidity = vLiquidity;\\n        // when not boost, validVL == vL\\n        t.validVLiquidity = validVLiquidity;\\n        t.nIZI = nIZI;\\n\\n        t.lastTouchBlock = lastTouchBlock;\\n        for (uint256 i = 0; i < rewardInfosLen; i++) {\\n            t.lastTouchAccRewardPerShare[i] = rewardInfos[i].accRewardPerShare;\\n        }\\n    }\\n\\n    /// @notice Update reward variables to be up-to-date.\\n    function _updateVLiquidity(uint256 vLiquidity, bool isAdd) internal {\\n        if (isAdd) {\\n            totalVLiquidity = totalVLiquidity + vLiquidity;\\n        } else {\\n            totalVLiquidity = totalVLiquidity - vLiquidity;\\n        }\\n\\n        // Q128 is enough for 10^5 * 10^5 * 10^18 * 10^10\\n        require(totalVLiquidity <= Q128, \\\"TOO MUCH LIQUIDITY STAKED\\\");\\n    }\\n\\n    function _updateNIZI(uint256 nIZI, bool isAdd) internal {\\n        if (isAdd) {\\n            totalNIZI = totalNIZI + nIZI;\\n        } else {\\n            totalNIZI = totalNIZI - nIZI;\\n        }\\n\\n        // totalNIZI is always < Q96\\n    }\\n\\n    /// @notice Update the global status.\\n    function _updateGlobalStatus() internal {\\n        if (block.number <= lastTouchBlock) {\\n            return;\\n        }\\n        if (lastTouchBlock >= endBlock) {\\n            return;\\n        }\\n        uint256 currBlockNumber = Math.min(block.number, endBlock);\\n        if (totalVLiquidity == 0) {\\n            lastTouchBlock = currBlockNumber;\\n            return;\\n        }\\n\\n        for (uint256 i = 0; i < rewardInfosLen; i++) {\\n            uint256 tokenReward = (currBlockNumber - lastTouchBlock) * rewardInfos[i].rewardPerBlock;\\n            rewardInfos[i].accRewardPerShare = rewardInfos[i].accRewardPerShare + ((tokenReward * Q128) / totalVLiquidity);\\n        }\\n        lastTouchBlock = currBlockNumber;\\n    }\\n\\n    function _computeValidVLiquidity(uint256 vLiquidity, uint256 nIZI)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (totalNIZI == 0) {\\n            return vLiquidity;\\n        }\\n        uint256 iziVLiquidity = (vLiquidity * 4 + (totalVLiquidity * nIZI * 6) / totalNIZI) / 10;\\n        return Math.min(iziVLiquidity, vLiquidity);\\n    }\\n\\n    /// @notice Deposit a single position.\\n    /// @param tokenId The related position id.\\n    /// @param nIZI the amount of izi to lock\\n    function deposit(uint256 tokenId, uint256 nIZI)\\n        external\\n        returns (uint256 vLiquidity)\\n    {\\n        address owner = uniV3NFTManager.ownerOf(tokenId);\\n        require(owner == msg.sender, \\\"NOT OWNER\\\");\\n\\n        (\\n            ,\\n            ,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            ,\\n            ,\\n            ,\\n\\n        ) = uniV3NFTManager.positions(tokenId);\\n\\n        // alternatively we can compute the pool address with tokens and fee and compare the address directly\\n        require(token0 == rewardPool.token0, \\\"TOEKN0 NOT MATCH\\\");\\n        require(token1 == rewardPool.token1, \\\"TOKEN1 NOT MATCH\\\");\\n        require(fee == rewardPool.fee, \\\"FEE NOT MATCH\\\");\\n\\n        // require the NFT token has interaction with [rewardLowerTick, rewardUpperTick]\\n        vLiquidity = _getVLiquidityForNFT(tickLower, tickUpper, liquidity);\\n        require(vLiquidity > 0, \\\"INVALID TOKEN\\\");\\n\\n        uniV3NFTManager.safeTransferFrom(msg.sender, address(this), tokenId);\\n        owners[tokenId] = msg.sender;\\n        bool res = tokenIds[msg.sender].add(tokenId);\\n        require(res);\\n\\n        // the execution order for the next three lines is crutial\\n        _updateGlobalStatus();\\n        _updateVLiquidity(vLiquidity, true);\\n        if (address(iziToken) == address(0)) {\\n            // boost is not enabled\\n            nIZI = 0;\\n        }\\n        _updateNIZI(nIZI, true);\\n        uint256 validVLiquidity = _computeValidVLiquidity(vLiquidity, nIZI);\\n        require(nIZI < Q128 / 6, \\\"NIZI O\\\");\\n        _newTokenStatus(tokenId, vLiquidity, validVLiquidity, nIZI);\\n        if (nIZI > 0) {\\n            // lock izi in this contract\\n            iziToken.safeTransferFrom(msg.sender, address(this), nIZI);\\n        }\\n\\n        emit Deposit(msg.sender, tokenId, nIZI);\\n        return vLiquidity;\\n    }\\n\\n    /// @notice deposit iZi to an nft token\\n    /// @param tokenId nft already deposited\\n    /// @param deltaNIZI amount of izi to deposit\\n    function depositIZI(uint256 tokenId, uint256 deltaNIZI)\\n        external\\n        nonReentrant\\n    {\\n        require(owners[tokenId] == msg.sender, \\\"NOT OWNER OR NOT EXIST\\\");\\n        require(address(iziToken) != address(0), \\\"NOT BOOST\\\");\\n        require(deltaNIZI > 0, \\\"DEPOSIT IZI MUST BE POSITIVE\\\");\\n        _collectReward(tokenId);\\n        TokenStatus memory t = tokenStatus[tokenId];\\n        _updateNIZI(deltaNIZI, true);\\n        uint256 nIZI = t.nIZI + deltaNIZI;\\n        // update validVLiquidity\\n        uint256 validVLiquidity = _computeValidVLiquidity(t.vLiquidity, nIZI);\\n        _updateTokenStatus(tokenId, t.vLiquidity, validVLiquidity, nIZI);\\n\\n        // transfer iZi from user\\n        iziToken.safeTransferFrom(msg.sender, address(this), deltaNIZI);\\n    }\\n\\n    /// @notice withdraw a single position.\\n    /// @param tokenId The related position id.\\n    /// @param noReward true if donot collect reward\\n    function withdraw(uint256 tokenId, bool noReward) external nonReentrant {\\n        require(owners[tokenId] == msg.sender, \\\"NOT OWNER OR NOT EXIST\\\");\\n\\n        if (noReward) {\\n            _updateGlobalStatus();\\n        } else {\\n            _collectReward(tokenId);\\n        }\\n        uint256 vLiquidity = tokenStatus[tokenId].vLiquidity;\\n        _updateVLiquidity(vLiquidity, false);\\n        uint256 nIZI = tokenStatus[tokenId].nIZI;\\n        if (nIZI > 0) {\\n            _updateNIZI(nIZI, false);\\n            // refund iZi to user\\n            iziToken.safeTransfer(msg.sender, nIZI);\\n        }\\n\\n        uniV3NFTManager.safeTransferFrom(address(this), msg.sender, tokenId);\\n        owners[tokenId] = address(0);\\n        bool res = tokenIds[msg.sender].remove(tokenId);\\n        require(res);\\n\\n        emit Withdraw(msg.sender, tokenId);\\n    }\\n\\n    /// @notice Collect pending reward for a single position.\\n    /// @param tokenId The related position id.\\n    function _collectReward(uint256 tokenId) internal {\\n        TokenStatus memory t = tokenStatus[tokenId];\\n\\n        _updateGlobalStatus();\\n        for (uint256 i = 0; i < rewardInfosLen; i++) {\\n            uint256 _reward = (t.validVLiquidity * (rewardInfos[i].accRewardPerShare - t.lastTouchAccRewardPerShare[i])) / Q128;\\n            if (_reward > 0) {\\n                IERC20(rewardInfos[i].rewardToken).safeTransferFrom(\\n                    rewardInfos[i].provider,\\n                    msg.sender,\\n                    _reward\\n                );\\n            }\\n            emit CollectReward(\\n                msg.sender,\\n                tokenId,\\n                rewardInfos[i].rewardToken,\\n                _reward\\n            );\\n        }\\n\\n        uint256 nIZI = t.nIZI;\\n        // update validVLiquidity\\n        uint256 validVLiquidity = _computeValidVLiquidity(t.vLiquidity, nIZI);\\n        _updateTokenStatus(tokenId, t.vLiquidity, validVLiquidity, nIZI);\\n    }\\n\\n    /// @notice Collect pending reward for a single position.\\n    /// @param tokenId The related position id.\\n    function collectReward(uint256 tokenId) external nonReentrant {\\n        require(owners[tokenId] == msg.sender, \\\"NOT OWNER OR NOT EXIST\\\");\\n        _collectReward(tokenId);\\n    }\\n\\n    /// @notice Collect all pending rewards.\\n    function collectRewards() external nonReentrant {\\n        EnumerableSet.UintSet storage ids = tokenIds[msg.sender];\\n        for (uint256 i = 0; i < ids.length(); i++) {\\n            require(owners[ids.at(i)] == msg.sender, \\\"NOT OWNER\\\");\\n            _collectReward(ids.at(i));\\n        }\\n    }\\n\\n    /// @notice View function to get position ids staked here for an user.\\n    /// @param _user The related address.\\n    function getTokenIds(address _user)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        EnumerableSet.UintSet storage ids = tokenIds[_user];\\n        // push could not be used in memory array\\n        // we set the tokenIdList into a fixed-length array rather than dynamic\\n        uint256[] memory tokenIdList = new uint256[](ids.length());\\n        for (uint256 i = 0; i < ids.length(); i++) {\\n            tokenIdList[i] = ids.at(i);\\n        }\\n        return tokenIdList;\\n    }\\n\\n    /// @notice Return reward multiplier over the given _from to _to block.\\n    /// @param _from The start block.\\n    /// @param _to The end block.\\n    function _getMultiplier(uint256 _from, uint256 _to)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (_from > _to) {\\n            return 0;\\n        }\\n        if (_to <= endBlock) {\\n            return _to - _from;\\n        } else if (_from >= endBlock) {\\n            return 0;\\n        } else {\\n            return endBlock - _from;\\n        }\\n    }\\n\\n    /// @notice View function to see pending Reward for a single position.\\n    /// @param tokenId The related position id.\\n    function pendingReward(uint256 tokenId)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        TokenStatus memory t = tokenStatus[tokenId];\\n        uint256[] memory _reward = new uint256[](rewardInfosLen);\\n        for (uint256 i = 0; i < rewardInfosLen; i++) {\\n            uint256 multiplier = _getMultiplier(lastTouchBlock, block.number);\\n            uint256 tokenReward = multiplier * rewardInfos[i].rewardPerBlock;\\n            uint256 rewardPerShare = rewardInfos[i].accRewardPerShare + (tokenReward * Q128) / totalVLiquidity;\\n            // l * (currentAcc - lastAcc)\\n            _reward[i] = (t.validVLiquidity * (rewardPerShare - t.lastTouchAccRewardPerShare[i])) / Q128;\\n        }\\n        return _reward;\\n    }\\n\\n    /// @notice View function to see pending Rewards for an address.\\n    /// @param _user The related address.\\n    function pendingRewards(address _user)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory _reward = new uint256[](rewardInfosLen);\\n        for (uint256 j = 0; j < rewardInfosLen; j++) {\\n            _reward[j] = 0;\\n        }\\n\\n        for (uint256 i = 0; i < tokenIds[_user].length(); i++) {\\n            uint256[] memory r = pendingReward(tokenIds[_user].at(i));\\n            for (uint256 j = 0; j < rewardInfosLen; j++) {\\n                _reward[j] += r[j];\\n            }\\n        }\\n        return _reward;\\n    }\\n\\n    // Control fuctions for the contract owner and operators.\\n\\n    /// @notice If something goes wrong, we can send back user's nft and locked iZi\\n    /// @param tokenId The related position id.\\n    function emergenceWithdraw(uint256 tokenId) external onlyOwner {\\n        address owner = owners[tokenId];\\n        require(owner != address(0));\\n        uniV3NFTManager.safeTransferFrom(\\n            address(this),\\n            owners[tokenId],\\n            tokenId\\n        );\\n        uint256 nIZI = tokenStatus[tokenId].nIZI;\\n        if (nIZI > 0) {\\n            // we should ensure nft refund to user\\n            // omit the case when transfer() returns false unexpectedly\\n            iziToken.transfer(owner, nIZI);\\n        }\\n        // make sure user cannot withdraw/depositIZI or collect reward on this nft\\n        owners[tokenId] = address(0);\\n    }\\n\\n    /// @notice Set new reward end block.\\n    /// @param _endBlock New end block.\\n    function modifyEndBlock(uint256 _endBlock) external onlyOwner {\\n        require(_endBlock > block.number, \\\"OUT OF DATE\\\");\\n        _updateGlobalStatus();\\n        // jump if origin endBlock < block.number\\n        lastTouchBlock = block.number;\\n        endBlock = _endBlock;\\n        emit ModifyEndBlock(endBlock);\\n    }\\n\\n    /// @notice Set new reward per block.\\n    /// @param rewardIdx which rewardInfo to modify\\n    /// @param _rewardPerBlock new reward per block\\n    function modifyRewardPerBlock(uint256 rewardIdx, uint256 _rewardPerBlock)\\n        external\\n        onlyOwner\\n    {\\n        require(rewardIdx < rewardInfosLen, \\\"OUT OF REWARD INFO RANGE\\\");\\n        _updateGlobalStatus();\\n        rewardInfos[rewardIdx].rewardPerBlock = _rewardPerBlock;\\n        emit ModifyRewardPerBlock(\\n            rewardInfos[rewardIdx].rewardToken,\\n            _rewardPerBlock\\n        );\\n    }\\n\\n    /// @notice Set new reward provider.\\n    /// @param rewardIdx which rewardInfo to modify\\n    /// @param provider New provider\\n    function modifyProvider(uint256 rewardIdx, address provider)\\n        external\\n        onlyOwner\\n    {\\n        require(rewardIdx < rewardInfosLen, \\\"OUT OF REWARD INFO RANGE\\\");\\n        rewardInfos[rewardIdx].provider = provider;\\n        emit ModifyProvider(rewardInfos[rewardIdx].rewardToken, provider);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/multicall.sol\": {\r\n      \"content\": \"//  SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/// @title Multicall\\n/// @notice Enables calling multiple methods in a single call to the contract\\nabstract contract Multicall {\\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n\\n            if (!success) {\\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n                if (result.length < 68) revert();\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n                revert(abi.decode(result, (string)));\\n            }\\n\\n            results[i] = result;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniV3NFTManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct MiningFixRangeBoost.RewardInfo[]\",\"name\":\"_rewardInfos\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"iziTokenAddr\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"_rewardUpperTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"_rewardLowerTick\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollectReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nIZI\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"ModifyEndBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"ModifyProvider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"ModifyRewardPerBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"collectReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nIZI\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deltaNIZI\",\"type\":\"uint256\"}],\"name\":\"depositIZI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"emergenceWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMiningContractInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1_\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee_\",\"type\":\"uint24\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct MiningFixRangeBoost.RewardInfo[]\",\"name\":\"rewardInfos_\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"iziTokenAddr_\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"rewardUpperTick_\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"rewardLowerTick_\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"lastTouchBlock_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVLiquidity_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iziToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"lastTouchAccRewardPerShare\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"lta\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"modifyEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"modifyProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"modifyRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardInfos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardInfosLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validVLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nIZI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTouchBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNIZI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"noReward\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MiningFixRangeBoost","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000c36442b4a4522e871399cd717abdd847ab11fe88000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000001400000000000000000000000009ad37205d608b8b219e6a2573f922094cec5c200000000000000000000000000000000000000000000000000000000000000000afffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60000000000000000000000000000000000000000000000000000000000d349050000000000000000000000000000000000000000000000000000000000d6042000000000000000000000000000000000000000000000000000000000000000010000000000000000000000009ad37205d608b8b219e6a2573f922094cec5c200000000000000000000000000ee264e74a2fd2c7a55da705b80e092f05dae5b5d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d02ab486cedc0000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}