{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/renderer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/gear_types.sol\\\";\\nimport \\\"./libraries/base64.sol\\\";\\n\\npragma solidity 0.8.7;\\npragma abicoder v2;\\n\\ncontract ChainRunnerGearRenderer is Ownable {\\n  using Strings for uint256;\\n  using Strings for uint8;\\n\\n  struct TraitImageInput {\\n    uint8 armamentId;\\n    uint8 classId;\\n    uint8 rarityId;\\n    string image;\\n  }\\n\\n  uint256 internal constant MAX = 5000;\\n  string[7] internal _traits = [\\n    \\\"Background\\\",\\n    \\\"Armament\\\",\\n    \\\"Class\\\",\\n    \\\"Means of Acquisition\\\",\\n    \\\"Faction\\\",\\n    \\\"Rarity\\\",\\n    \\\"Power Level\\\"\\n  ];\\n\\n  mapping(uint8 => mapping(uint8 => mapping(uint8 => string))) public traitImages;\\n  mapping(uint8 => mapping(uint8 => string)) public traitNames;\\n  mapping(uint8 => string) public factionImages;\\n\\n  function uploadTraitNames(\\n    uint8 traitType,\\n    uint8[] calldata traitIds,\\n    string[] calldata traits\\n  ) external onlyOwner {\\n    require(traitIds.length == traits.length, \\\"Mismatched inputs\\\");\\n    for (uint i = 0; i < traits.length; i++) {\\n      traitNames[traitType][traitIds[i]] = traits[i];\\n    }\\n  }\\n\\n  function uploadTraitImages(TraitImageInput[] calldata inputs) external onlyOwner {\\n    for (uint8 i = 0; i < inputs.length; i++) {\\n      TraitImageInput memory inp = inputs[i];\\n      traitImages[inp.armamentId][inp.classId][inp.rarityId] = inp.image;\\n    }\\n  }\\n\\n  function uploadFactionImages(string[] calldata inputs) external onlyOwner {\\n    for (uint8 i = 0; i < inputs.length; i++) {\\n      factionImages[i] = inputs[i];\\n    }\\n  }\\n\\n  function tokenURI(uint256 tokenId, GearTypes.Gear memory g) external view returns (string memory) {\\n    string memory image = Base64.encode(bytes(generateSVGImage(g)));\\n\\n    return string(\\n      abi.encodePacked(\\n        \\\"data:application/json;base64,\\\",\\n        Base64.encode(\\n          bytes(\\n            abi.encodePacked(\\n              '{\\\"name\\\":\\\"',\\n              traitNames[5][g.rarity],\\n              ' ',\\n              traitNames[3][g.meansOfAcquisition],\\n              ' ',\\n              traitNames[4][g.faction],\\n              ' ',\\n              traitNames[1][g.armament],\\n              ' ',\\n              traitNames[2][g.class],\\n              ' #',\\n              tokenId.toString(),\\n              '\\\", ',\\n              '\\\"attributes\\\": ',\\n              compileAttributes(g),\\n              ', \\\"image\\\": \\\"',\\n              \\\"data:image/svg+xml;base64,\\\",\\n              image,\\n              '\\\"}'\\n            )\\n          )\\n        )\\n      )\\n    );\\n  }\\n\\n  function generateSVGImage(GearTypes.Gear memory params) internal view returns (string memory) {\\n    return string(\\n      abi.encodePacked(\\n        generateSVGHeader(),\\n        generateBackground(params.background),\\n        generateArmament(params),\\n        generateFaction(params),\\n        \\\"</svg>\\\"\\n      )\\n    );\\n  }\\n\\n  function generateSVGHeader() private pure returns (string memory) {\\n    return\\n    string(\\n      abi.encodePacked(\\n        '<svg version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" x=\\\"0px\\\" y=\\\"0px\\\"',\\n        ' viewBox=\\\"0 0 480 480\\\" style=\\\"enable-background:new 0 0 480 480;\\\" xml:space=\\\"preserve\\\">'\\n      )\\n    );\\n  }\\n\\n  function generateArmament(GearTypes.Gear memory gear) internal view returns (string memory) {\\n    bytes memory svgString = abi.encodePacked(\\n      '<image x=\\\"0\\\" y=\\\"0\\\" width=\\\"480\\\" height=\\\"480\\\" image-rendering=\\\"pixelated\\\" preserveAspectRatio=\\\"xMidYMid\\\" href=\\\"data:image/png;base64,',\\n      traitImages[gear.armament][gear.class][gear.rarity],\\n      '\\\"/>'\\n    );\\n    return string(svgString);\\n  }\\n\\n  function generateFaction(GearTypes.Gear memory gear) internal view returns (string memory) {\\n    bytes memory svgString = abi.encodePacked(\\n      '<image x=\\\"0\\\" y=\\\"0\\\" width=\\\"480\\\" height=\\\"480\\\" image-rendering=\\\"pixelated\\\" preserveAspectRatio=\\\"xMidYMid\\\" href=\\\"data:image/png;base64,',\\n      factionImages[gear.faction],\\n      '\\\"/>'\\n    );\\n    return string(svgString);\\n  }\\n\\n  function generateBackground(uint8 backgroundId) internal view returns (string memory) {\\n    return string(\\n      abi.encodePacked(\\n        '<rect x=\\\"0\\\" y=\\\"0\\\" style=\\\"width:480px;height: 480px;\\\" fill=\\\"#',\\n        traitNames[0][backgroundId],\\n        '\\\"></rect>'\\n      )\\n    );\\n  }\\n\\n  function compileAttributes(GearTypes.Gear memory g) public view returns (string memory) {\\n    string memory traits;\\n    traits = string(abi.encodePacked(\\n      attributeForTypeAndValue(_traits[0], traitNames[0][g.background]),',',\\n      attributeForTypeAndValue(_traits[1], traitNames[1][g.armament]),',',\\n      attributeForTypeAndValue(_traits[2], traitNames[2][g.class]),',',\\n      attributeForTypeAndValue(_traits[3], traitNames[3][g.meansOfAcquisition]),',',\\n      attributeForTypeAndValue(_traits[4], traitNames[4][g.faction]),',',\\n      attributeForTypeAndValue(_traits[5], traitNames[5][g.rarity]),',',\\n      attributeForNumberAndValue(_traits[6], g.powerLevel)\\n    ));\\n    return string(abi.encodePacked(\\n      '[',\\n      traits,\\n      ']'\\n    ));\\n  }\\n\\n  function attributeForTypeAndValue(string memory traitType, string memory value) internal pure returns (string memory) {\\n    return string(abi.encodePacked(\\n      '{\\\"trait_type\\\":\\\"',\\n      traitType,\\n      '\\\",\\\"value\\\":\\\"',\\n      value,\\n      '\\\"}'\\n    ));\\n  }\\n\\n  function attributeForNumberAndValue(string memory traitType, uint8 value) internal pure returns (string memory) {\\n    return string(abi.encodePacked(\\n      '{\\\"display_type\\\":\\\"number\\\",\\\"trait_type\\\":\\\"',\\n      traitType,\\n      '\\\",\\\"value\\\": ',\\n      value.toString(),\\n      '}'\\n    ));\\n  }\\n}\"\r\n    },\r\n    \"contracts/libraries/base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/// [MIT License]\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\n\\npragma solidity ^0.8.0;\\nlibrary Base64 {\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/gear_types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface GearTypes {\\n  struct Gear {\\n    uint8 background;\\n    uint8 armament;\\n    uint8 class;\\n    uint8 rarity;\\n    uint8 meansOfAcquisition;\\n    uint8 faction;\\n    uint8 powerLevel;\\n  }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"background\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"armament\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"class\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"meansOfAcquisition\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"faction\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"powerLevel\",\"type\":\"uint8\"}],\"internalType\":\"struct GearTypes.Gear\",\"name\":\"g\",\"type\":\"tuple\"}],\"name\":\"compileAttributes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"factionImages\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"background\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"armament\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"class\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"meansOfAcquisition\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"faction\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"powerLevel\",\"type\":\"uint8\"}],\"internalType\":\"struct GearTypes.Gear\",\"name\":\"g\",\"type\":\"tuple\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"traitImages\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"traitNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"inputs\",\"type\":\"string[]\"}],\"name\":\"uploadFactionImages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"armamentId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"classId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rarityId\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"}],\"internalType\":\"struct ChainRunnerGearRenderer.TraitImageInput[]\",\"name\":\"inputs\",\"type\":\"tuple[]\"}],\"name\":\"uploadTraitImages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"traitType\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"traitIds\",\"type\":\"uint8[]\"},{\"internalType\":\"string[]\",\"name\":\"traits\",\"type\":\"string[]\"}],\"name\":\"uploadTraitNames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ChainRunnerGearRenderer","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}