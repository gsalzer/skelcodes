{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/libraries/PotenzaUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\nimport \\\"../interfaces/IN.sol\\\";\\n\\nlibrary PotenzaUtils {\\n\\n    function getZeroOrFourteenScore(uint256 tokenId, IN n) public view returns(uint256) {\\n        if(n.getFirst(tokenId) == 0 || n.getFirst(tokenId) == 14 ||\\n        n.getSecond(tokenId) == 0 || n.getSecond(tokenId) == 14 ||\\n        n.getThird(tokenId) == 0 || n.getThird(tokenId) == 14 ||\\n        n.getFourth(tokenId) == 0 || n.getFourth(tokenId) == 14 ||\\n        n.getFifth(tokenId) == 0 || n.getFifth(tokenId) == 14 ||\\n        n.getSixth(tokenId) == 0 || n.getSixth(tokenId) == 14 ||\\n        n.getSeventh(tokenId) == 0 || n.getSeventh(tokenId) == 14 ||\\n        n.getEight(tokenId) == 0 || n.getEight(tokenId) == 14) {\\n            return 20;\\n        }\\n        return 0;\\n    }\\n\\n    function getMaxSequence(uint256 tokenId,IN n) public view returns(uint256) {\\n        uint256 count = 1;\\n        uint256 highest = 1;\\n        uint256[8] memory  sequenceArray = [n.getFirst(tokenId),n.getSecond(tokenId),n.getThird(tokenId),n.getFourth(tokenId),n.getFifth(tokenId),n.getSixth(tokenId),n.getSeventh(tokenId),n.getEight(tokenId)];\\n        for(uint256 i = 1; i < sequenceArray.length;i++) {\\n            if(sequenceArray[i-1] == sequenceArray[i]) {\\n                count += 1;\\n                if(i == sequenceArray.length-1 && count > highest) {\\n                    highest = count;\\n                }\\n            } else {\\n                if(count > highest) {\\n                    highest = count;\\n                }\\n                count = 1;\\n            }\\n        }\\n        return highest;\\n    }\\n\\n    function getSum(uint256 tokenId,IN n) public view returns(uint256) {\\n        return n.getFirst(tokenId)+\\n        n.getSecond(tokenId)+\\n        n.getThird(tokenId)+\\n        n.getFourth(tokenId)+\\n        n.getFifth(tokenId)+\\n        n.getSixth(tokenId)+\\n        n.getSeventh(tokenId)+\\n        n.getEight(tokenId);\\n    }\\n\\n    function getHighestFrequency(uint256 tokenId, IN n) public view returns(uint256[3] memory) {\\n        uint256[15] memory set;\\n        set[n.getFirst(tokenId)] = set[n.getFirst(tokenId)]+1;\\n        set[n.getSecond(tokenId)] = set[n.getSecond(tokenId)]+1;\\n        set[n.getThird(tokenId)] = set[n.getThird(tokenId)]+1;\\n        set[n.getFourth(tokenId)] = set[n.getFourth(tokenId)]+1;\\n        set[n.getFifth(tokenId)] = set[n.getFifth(tokenId)]+1;\\n        set[n.getSixth(tokenId)] = set[n.getSixth(tokenId)]+1;\\n        set[n.getSeventh(tokenId)] = set[n.getSeventh(tokenId)]+1;\\n        set[n.getEight(tokenId)] = set[n.getEight(tokenId)]+1;\\n        uint256[3] memory highest;\\n\\n        for(uint256 i = 1; i < set.length;i++) {\\n            if(set[i] > highest[0]) {\\n                highest[2] = highest[1];\\n                highest[1] = highest[0];\\n                highest[0] = set[i];\\n            } else {\\n                if(set[i] > highest[1]) {\\n                    highest[2] = highest[1];\\n                    highest[1] = set[i];\\n                } else {\\n                    if(set[i] > highest[2]) {\\n                        highest[2] = set[i];\\n                    }\\n                }\\n            }\\n        }\\n        return highest;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IN.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\ninterface IN is IERC721Enumerable, IERC721Metadata {\\n    function getFirst(uint256 tokenId) external view returns (uint256);\\n\\n    function getSecond(uint256 tokenId) external view returns (uint256);\\n\\n    function getThird(uint256 tokenId) external view returns (uint256);\\n\\n    function getFourth(uint256 tokenId) external view returns (uint256);\\n\\n    function getFifth(uint256 tokenId) external view returns (uint256);\\n\\n    function getSixth(uint256 tokenId) external view returns (uint256);\\n\\n    function getSeventh(uint256 tokenId) external view returns (uint256);\\n\\n    function getEight(uint256 tokenId) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"contract IN\",\"name\":\"n\",\"type\":\"IN\"}],\"name\":\"getHighestFrequency\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"contract IN\",\"name\":\"n\",\"type\":\"IN\"}],\"name\":\"getMaxSequence\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"contract IN\",\"name\":\"n\",\"type\":\"IN\"}],\"name\":\"getSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"contract IN\",\"name\":\"n\",\"type\":\"IN\"}],\"name\":\"getZeroOrFourteenScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PotenzaUtils","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}