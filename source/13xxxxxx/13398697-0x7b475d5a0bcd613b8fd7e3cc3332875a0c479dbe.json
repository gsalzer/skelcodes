{"status":"1","message":"OK","result":[{"SourceCode":"{\"CartelOreClaim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\n\\nimport \\\"./ILandCollection.sol\\\";\\nimport \\\"./IOre.sol\\\";\\n\\n\\ncontract CartelOreClaim is Ownable, ReentrancyGuard {\\n  // Collection token contract interface\\n  ILandCollection public collection;\\n  // Ore token contract interface\\n  IOre public ore;\\n\\n  mapping (uint256 =\\u003e bool) public claimedByTokenId;\\n\\n  uint256 public orePerToken;\\n  uint256 public orePerSet;\\n\\n  uint256 public totalTokenClaim;\\n  uint256 public totalSetClaim;\\n\\n  constructor(address _ore, address _collection, uint256 _orePerToken, uint256 _orePerSet) {\\n    ore = IOre(_ore);\\n    collection = ILandCollection(_collection);\\n    orePerToken = _orePerToken;\\n    orePerSet = _orePerSet;\\n  }\\n\\n  function unclaimedTokenIds(address _address) external view returns (uint256[] memory) {\\n    uint256 owned = collection.balanceOf(_address);\\n    uint256 count = 0;\\n\\n    for (uint256 i = 0; i \\u003c owned; i++) {\\n      uint256 tokenId = collection.tokenOfOwnerByIndex(_address, i);\\n      uint256 groupId = tokenId / 100000;\\n\\n      if ((groupId == 1000 || groupId == 1002) \\u0026\\u0026 !claimedByTokenId[tokenId]) {\\n        count++;\\n      }\\n    }\\n\\n    uint256[] memory tokenIds = new uint256[](count);\\n    uint256 j = 0;\\n    for (uint256 i = 0; i \\u003c owned; i++) {\\n      uint256 tokenId = collection.tokenOfOwnerByIndex(_address, i);\\n      uint256 groupId = tokenId / 100000;\\n\\n      if ((groupId == 1000 || groupId == 1002) \\u0026\\u0026 !claimedByTokenId[tokenId]) {\\n        tokenIds[j++] = tokenId;\\n      }\\n    }\\n\\n    return tokenIds;\\n  }\\n\\n  function claim(uint256[] calldata _tokenIds) external nonReentrant {\\n    // Limit up to 50 tokens to be processed\\n    uint256 maxCount = (_tokenIds.length \\u003e 50 ? 50 : _tokenIds.length);\\n    uint256 tokenCount = 0;\\n    uint256[] memory setCounter = new uint256[](7);\\n\\n    // Iterate through all owned land-genesis collection tokens and calculate claimable ore\\n    // Then track the claims properly\\n    for (uint256 i = 0; i \\u003c maxCount; i++) {\\n      uint256 tokenId = _tokenIds[i];\\n      require(collection.ownerOf(tokenId) == msg.sender, \\\"Invalid Tokens Specified\\\");\\n\\n      if (!claimedByTokenId[tokenId]) {\\n        tokenCount++;\\n        \\n        // Check for any claimable set bonus\\n        uint256 memberType;\\n        uint256 groupId = tokenId / 100000;\\n        uint256 memberId = tokenId % 100000;\\n        uint256 num;\\n\\n        require(groupId == 1000 || groupId == 1002, \\\"Invalid Token Id\\\");\\n\\n        if (groupId == 1000) {\\n          num = memberId - 1;\\n        } else if (groupId == 1002) {\\n          num = memberId + 1255;\\n        }\\n\\n        if (num % 9 == 0) {\\n          memberType = num % 5;\\n        } else if (num % 10 == 0) {\\n          memberType = num % 6;\\n        } else {\\n          memberType = num % 7;\\n        }\\n\\n        setCounter[memberType]++;\\n        claimedByTokenId[tokenId] = true;\\n      }\\n    }\\n\\n    uint256 totalOre = 0;\\n\\n    if (tokenCount \\u003e 0) {\\n      totalTokenClaim += tokenCount;\\n      totalOre += tokenCount * orePerToken;\\n    }\\n\\n    // Calculate the total number of set eligible for bonus\\n    uint256 setCount = maxCount;\\n    for (uint256 i = 0; i \\u003c 7; i++) {\\n      if (setCount \\u003e setCounter[i]) {\\n        setCount = setCounter[i];\\n      }\\n    }\\n\\n    if (setCount \\u003e 0) {\\n      totalSetClaim += setCount;\\n      totalOre += setCount * orePerSet;\\n    }\\n\\n    require(totalOre \\u003e 0, \\\"Insufficient Claimable Ore\\\");\\n    \\n    ore.mint(msg.sender, totalOre);\\n  }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"ILandCollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\ninterface ILandCollection {\\n  function totalMinted(uint256 groupId) external view returns (uint256);\\n  function maximumSupply(uint256 groupId) external view returns (uint256);\\n  function mintToken(address account, uint256 groupId, uint256 count, uint256 seed) external;\\n  function balanceOf(address owner) external view returns (uint256);\\n  function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n  function ownerOf(uint256 tokenId) external view returns (address);\\n}\\n\"},\"IOre.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\ninterface IOre {\\n  function balanceOf(address owner) external view returns (uint256);\\n  function mint(address account, uint256 amount) external;\\n  function burn(address account, uint256 amount) external;\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ore\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orePerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orePerSet\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimedByTokenId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collection\",\"outputs\":[{\"internalType\":\"contract ILandCollection\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ore\",\"outputs\":[{\"internalType\":\"contract IOre\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orePerSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orePerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSetClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unclaimedTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CartelOreClaim","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000c40107e23c285d9cc9759f7c656805d6e5c88a3c0000000000000000000000007f0ab6a57cfd191a202ab3f813ef9b851c77e6180000000000000000000000000000000000000000000000056bc75e2d6310000000000000000000000000000000000000000000000000001043561a8829300000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2d63efa265d004d349c35e9349b97aff259d5107afb73b3abbdfe60b8236b365"}]}