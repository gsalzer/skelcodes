{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Validator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@airswap/light/contracts/Light.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title AirSwap Validator: Validate Prior to Submitting Transactions\\n * @notice contains helper method that checks whether\\n * a Light Order is well-formed and counterparty criteria is met\\n */\\n\\ncontract Validator is Ownable {\\n  using SafeMath for uint256;\\n\\n  struct OrderDetails {\\n    uint256 nonce;\\n    uint256 expiry;\\n    uint256 signerAmount;\\n    uint256 senderAmount;\\n    IERC20 signerToken;\\n    IERC20 senderToken;\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n    address senderWallet;\\n    address signerWallet;\\n  }\\n  address public light;\\n  bytes32 public constant LIGHT_ORDER_TYPEHASH =\\n    keccak256(\\n      abi.encodePacked(\\n        \\\"LightOrder(\\\",\\n        \\\"uint256 nonce,\\\",\\n        \\\"uint256 expiry,\\\",\\n        \\\"address signerWallet,\\\",\\n        \\\"address signerToken,\\\",\\n        \\\"uint256 signerAmount,\\\",\\n        \\\"uint256 signerFee,\\\",\\n        \\\"address senderWallet,\\\",\\n        \\\"address senderToken,\\\",\\n        \\\"uint256 senderAmount\\\",\\n        \\\")\\\"\\n      )\\n    );\\n  // size of fixed array that holds max returning error messages\\n  uint256 internal constant MAX_ERROR_COUNT = 8;\\n\\n  constructor(address _lightAddress) Ownable() {\\n    light = _lightAddress;\\n  }\\n\\n  /**\\n   * @notice sets the address for the current light contract\\n   * @param _lightAddress address new address to be set\\n   */\\n\\n  function setLightAddress(address _lightAddress) public onlyOwner {\\n    light = _lightAddress;\\n  }\\n\\n  /**\\n   * @notice Checks Light Order for any potential errors\\n   * @param nonce uint256 Unique and should be sequential\\n   * @param expiry uint256 Expiry in seconds since 1 January 1970\\n   * @param signerWallet address Wallet of the signer\\n   * @param signerToken address ERC20 token transferred from the signer\\n   * @param signerAmount uint256 Amount transferred from the signer\\n   * @param senderToken address ERC20 token transferred from the sender\\n   * @param senderAmount uint256 Amount transferred from the sender\\n   * @param v uint8 \\\"v\\\" value of the ECDSA signature\\n   * @param r bytes32 \\\"r\\\" value of the ECDSA signature\\n   * @param s bytes32 \\\"s\\\" value of the ECDSA signature\\n   * @param senderWallet address Wallet of the sender\\n   * @return tuple of error count and bytes32[] memory array of error messages\\n   */\\n  function checkSwap(\\n    uint256 nonce,\\n    uint256 expiry,\\n    address signerWallet,\\n    IERC20 signerToken,\\n    uint256 signerAmount,\\n    IERC20 senderToken,\\n    uint256 senderAmount,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s,\\n    address senderWallet\\n  ) public view returns (uint256, bytes32[] memory) {\\n    bytes32[] memory errors = new bytes32[](MAX_ERROR_COUNT);\\n    OrderDetails memory details;\\n    uint256 errCount;\\n    details.nonce = nonce;\\n    details.expiry = expiry;\\n    details.signerWallet = signerWallet;\\n    details.signerToken = signerToken;\\n    details.signerAmount = signerAmount;\\n    details.senderToken = senderToken;\\n    details.senderAmount = senderAmount;\\n    details.v = v;\\n    details.r = r;\\n    details.s = s;\\n    details.senderWallet = senderWallet;\\n    bytes32 hashed = _getOrderHash(details);\\n    address signatory = _getSignatory(hashed, v, r, s);\\n    uint256 swapFee = details.signerAmount.mul(Light(light).signerFee()).div(\\n      Light(light).FEE_DIVISOR()\\n    );\\n    // Ensure the signatory is not null\\n    if (signatory == address(0)) {\\n      errors[errCount] = \\\"INVALID_SIG\\\";\\n      errCount++;\\n    }\\n    //expiry check\\n    if (details.expiry < block.timestamp) {\\n      errors[errCount] = \\\"EXPIRY_PASSED\\\";\\n      errCount++;\\n    }\\n    //if signatory is not the signerWallet, then it must have been authorized\\n    if (details.signerWallet != signatory) {\\n      if (Light(light).authorized(details.signerWallet) != signatory) {\\n        errors[errCount] = \\\"UNAUTHORIZED\\\";\\n        errCount++;\\n      }\\n    }\\n    //accounts & balances check\\n    uint256 senderBalance = IERC20(details.senderToken).balanceOf(\\n      details.senderWallet\\n    );\\n    uint256 signerBalance = IERC20(details.signerToken).balanceOf(\\n      details.signerWallet\\n    );\\n    uint256 senderAllowance = IERC20(details.senderToken).allowance(\\n      details.senderWallet,\\n      light\\n    );\\n    uint256 signerAllowance = IERC20(details.signerToken).allowance(\\n      details.signerWallet,\\n      light\\n    );\\n\\n    if (senderAllowance < details.senderAmount) {\\n      errors[errCount] = \\\"SENDER_ALLOWANCE_LOW\\\";\\n      errCount++;\\n    }\\n    if (signerAllowance < details.signerAmount + swapFee) {\\n      errors[errCount] = \\\"SIGNER_ALLOWANCE_LOW\\\";\\n      errCount++;\\n    }\\n    if (senderBalance < details.senderAmount) {\\n      errors[errCount] = \\\"SENDER_BALANCE_LOW\\\";\\n      errCount++;\\n    }\\n    if (signerBalance < details.signerAmount + swapFee) {\\n      errors[errCount] = \\\"SIGNER_BALANCE_LOW\\\";\\n      errCount++;\\n    }\\n    //nonce check\\n    if (Light(light).nonceUsed(details.signerWallet, details.nonce)) {\\n      errors[errCount] = \\\"NONCE_ALREADY_USED\\\";\\n      errCount++;\\n    }\\n    return (errCount, errors);\\n  }\\n\\n  /**\\n   * @notice Hash order parameters\\n   * @param _details OrderDetails\\n   * @return bytes32\\n   */\\n  function _getOrderHash(OrderDetails memory _details)\\n    internal\\n    view\\n    returns (bytes32)\\n  {\\n    return\\n      keccak256(\\n        abi.encode(\\n          LIGHT_ORDER_TYPEHASH,\\n          _details.nonce,\\n          _details.expiry,\\n          _details.signerWallet,\\n          _details.signerToken,\\n          _details.signerAmount,\\n          Light(light).signerFee(),\\n          _details.senderWallet,\\n          _details.senderToken,\\n          _details.senderAmount\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @notice Recover the signatory from a signature\\n   * @param hash bytes32\\n   * @param v uint8\\n   * @param r bytes32\\n   * @param s bytes32\\n   */\\n  function _getSignatory(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal view returns (address) {\\n    bytes32 digest = keccak256(\\n      abi.encodePacked(\\\"\\\\x19\\\\x01\\\", Light(light).DOMAIN_SEPARATOR(), hash)\\n    );\\n    address signatory = ecrecover(digest, v, r, s);\\n    return signatory;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@airswap/light/contracts/Light.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/* solhint-disable var-name-mixedcase */\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/ILight.sol\\\";\\n\\n/**\\n * @title AirSwap Light: Atomic Swap between Tokens\\n * @notice https://www.airswap.io/\\n */\\ncontract Light is ILight, Ownable {\\n  using SafeERC20 for IERC20;\\n  using SafeMath for uint256;\\n\\n  bytes32 public constant DOMAIN_TYPEHASH =\\n    keccak256(\\n      abi.encodePacked(\\n        \\\"EIP712Domain(\\\",\\n        \\\"string name,\\\",\\n        \\\"string version,\\\",\\n        \\\"uint256 chainId,\\\",\\n        \\\"address verifyingContract\\\",\\n        \\\")\\\"\\n      )\\n    );\\n\\n  bytes32 public constant LIGHT_ORDER_TYPEHASH =\\n    keccak256(\\n      abi.encodePacked(\\n        \\\"LightOrder(\\\",\\n        \\\"uint256 nonce,\\\",\\n        \\\"uint256 expiry,\\\",\\n        \\\"address signerWallet,\\\",\\n        \\\"address signerToken,\\\",\\n        \\\"uint256 signerAmount,\\\",\\n        \\\"uint256 signerFee,\\\",\\n        \\\"address senderWallet,\\\",\\n        \\\"address senderToken,\\\",\\n        \\\"uint256 senderAmount\\\",\\n        \\\")\\\"\\n      )\\n    );\\n\\n  bytes32 public constant DOMAIN_NAME = keccak256(\\\"SWAP_LIGHT\\\");\\n  bytes32 public constant DOMAIN_VERSION = keccak256(\\\"3\\\");\\n  uint256 public immutable DOMAIN_CHAIN_ID;\\n  bytes32 public immutable DOMAIN_SEPARATOR;\\n\\n  uint256 public constant FEE_DIVISOR = 10000;\\n  uint256 public signerFee;\\n\\n  /**\\n   * @notice Double mapping of signers to nonce groups to nonce states\\n   * @dev The nonce group is computed as nonce / 256, so each group of 256 sequential nonces uses the same key\\n   * @dev The nonce states are encoded as 256 bits, for each nonce in the group 0 means available and 1 means used\\n   */\\n  mapping(address => mapping(uint256 => uint256)) internal _nonceGroups;\\n\\n  mapping(address => address) public override authorized;\\n\\n  address public feeWallet;\\n\\n  constructor(address _feeWallet, uint256 _fee) {\\n    // Ensure the fee wallet is not null\\n    require(_feeWallet != address(0), \\\"INVALID_FEE_WALLET\\\");\\n    // Ensure the fee is less than divisor\\n    require(_fee < FEE_DIVISOR, \\\"INVALID_FEE\\\");\\n    uint256 currentChainId = getChainId();\\n    DOMAIN_CHAIN_ID = currentChainId;\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        DOMAIN_TYPEHASH,\\n        DOMAIN_NAME,\\n        DOMAIN_VERSION,\\n        currentChainId,\\n        this\\n      )\\n    );\\n\\n    feeWallet = _feeWallet;\\n    signerFee = _fee;\\n  }\\n\\n  /**\\n   * @notice Atomic ERC20 Swap\\n   * @param nonce uint256 Unique and should be sequential\\n   * @param expiry uint256 Expiry in seconds since 1 January 1970\\n   * @param signerWallet address Wallet of the signer\\n   * @param signerToken address ERC20 token transferred from the signer\\n   * @param signerAmount uint256 Amount transferred from the signer\\n   * @param senderToken address ERC20 token transferred from the sender\\n   * @param senderAmount uint256 Amount transferred from the sender\\n   * @param v uint8 \\\"v\\\" value of the ECDSA signature\\n   * @param r bytes32 \\\"r\\\" value of the ECDSA signature\\n   * @param s bytes32 \\\"s\\\" value of the ECDSA signature\\n   */\\n  function swap(\\n    uint256 nonce,\\n    uint256 expiry,\\n    address signerWallet,\\n    address signerToken,\\n    uint256 signerAmount,\\n    address senderToken,\\n    uint256 senderAmount,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override {\\n    swapWithRecipient(\\n      msg.sender,\\n      nonce,\\n      expiry,\\n      signerWallet,\\n      signerToken,\\n      signerAmount,\\n      senderToken,\\n      senderAmount,\\n      v,\\n      r,\\n      s\\n    );\\n  }\\n\\n  /**\\n   * @notice Set the fee wallet\\n   * @param newFeeWallet address Wallet to transfer signerFee to\\n   */\\n  function setFeeWallet(address newFeeWallet) external onlyOwner {\\n    // Ensure the new fee wallet is not null\\n    require(newFeeWallet != address(0), \\\"INVALID_FEE_WALLET\\\");\\n    feeWallet = newFeeWallet;\\n    emit SetFeeWallet(newFeeWallet);\\n  }\\n\\n  /**\\n   * @notice Set the fee\\n   * @param newSignerFee uint256 Value of the fee in basis points\\n   */\\n  function setFee(uint256 newSignerFee) external onlyOwner {\\n    // Ensure the fee is less than divisor\\n    require(newSignerFee < FEE_DIVISOR, \\\"INVALID_FEE\\\");\\n    signerFee = newSignerFee;\\n    emit SetFee(newSignerFee);\\n  }\\n\\n  /**\\n   * @notice Authorize a signer\\n   * @param signer address Wallet of the signer to authorize\\n   * @dev Emits an Authorize event\\n   */\\n  function authorize(address signer) external override {\\n    authorized[msg.sender] = signer;\\n    emit Authorize(signer, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Revoke authorization of a signer\\n   * @dev Emits a Revoke event\\n   */\\n  function revoke() external override {\\n    address tmp = authorized[msg.sender];\\n    delete authorized[msg.sender];\\n    emit Revoke(tmp, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Cancel one or more nonces\\n   * @dev Cancelled nonces are marked as used\\n   * @dev Emits a Cancel event\\n   * @dev Out of gas may occur in arrays of length > 400\\n   * @param nonces uint256[] List of nonces to cancel\\n   */\\n  function cancel(uint256[] calldata nonces) external override {\\n    for (uint256 i = 0; i < nonces.length; i++) {\\n      uint256 nonce = nonces[i];\\n      if (_markNonceAsUsed(msg.sender, nonce)) {\\n        emit Cancel(nonce, msg.sender);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Atomic ERC20 Swap with Recipient\\n   * @param recipient Wallet of the recipient\\n   * @param nonce uint256 Unique and should be sequential\\n   * @param expiry uint256 Expiry in seconds since 1 January 1970\\n   * @param signerWallet address Wallet of the signer\\n   * @param signerToken address ERC20 token transferred from the signer\\n   * @param signerAmount uint256 Amount transferred from the signer\\n   * @param senderToken address ERC20 token transferred from the sender\\n   * @param senderAmount uint256 Amount transferred from the sender\\n   * @param v uint8 \\\"v\\\" value of the ECDSA signature\\n   * @param r bytes32 \\\"r\\\" value of the ECDSA signature\\n   * @param s bytes32 \\\"s\\\" value of the ECDSA signature\\n   */\\n  function swapWithRecipient(\\n    address recipient,\\n    uint256 nonce,\\n    uint256 expiry,\\n    address signerWallet,\\n    address signerToken,\\n    uint256 signerAmount,\\n    address senderToken,\\n    uint256 senderAmount,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public override {\\n    require(DOMAIN_CHAIN_ID == getChainId(), \\\"CHAIN_ID_CHANGED\\\");\\n\\n    // Ensure the expiry is not passed\\n    require(expiry > block.timestamp, \\\"EXPIRY_PASSED\\\");\\n\\n    bytes32 hashed =\\n      _getOrderHash(\\n        nonce,\\n        expiry,\\n        signerWallet,\\n        signerToken,\\n        signerAmount,\\n        msg.sender,\\n        senderToken,\\n        senderAmount\\n      );\\n\\n    // Recover the signatory from the hash and signature\\n    address signatory = _getSignatory(hashed, v, r, s);\\n\\n    // Ensure the nonce is not yet used and if not mark it used\\n    require(_markNonceAsUsed(signatory, nonce), \\\"NONCE_ALREADY_USED\\\");\\n\\n    // Ensure the signatory is authorized by the signer wallet\\n    if (signerWallet != signatory) {\\n      require(authorized[signerWallet] == signatory, \\\"UNAUTHORIZED\\\");\\n    }\\n\\n    // Transfer token from sender to signer\\n    IERC20(senderToken).safeTransferFrom(\\n      msg.sender,\\n      signerWallet,\\n      senderAmount\\n    );\\n\\n    // Transfer token from signer to recipient\\n    IERC20(signerToken).safeTransferFrom(signerWallet, recipient, signerAmount);\\n\\n    // Transfer fee from signer to feeWallet\\n    uint256 feeAmount = signerAmount.mul(signerFee).div(FEE_DIVISOR);\\n    if (feeAmount > 0) {\\n      IERC20(signerToken).safeTransferFrom(signerWallet, feeWallet, feeAmount);\\n    }\\n\\n    // Emit a Swap event\\n    emit Swap(\\n      nonce,\\n      block.timestamp,\\n      signerWallet,\\n      signerToken,\\n      signerAmount,\\n      signerFee,\\n      msg.sender,\\n      senderToken,\\n      senderAmount\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns true if the nonce has been used\\n   * @param signer address Address of the signer\\n   * @param nonce uint256 Nonce being checked\\n   */\\n  function nonceUsed(address signer, uint256 nonce)\\n    public\\n    view\\n    override\\n    returns (bool)\\n  {\\n    uint256 groupKey = nonce / 256;\\n    uint256 indexInGroup = nonce % 256;\\n    return (_nonceGroups[signer][groupKey] >> indexInGroup) & 1 == 1;\\n  }\\n\\n  /**\\n   * @notice Returns the current chainId using the chainid opcode\\n   * @return id uint256 The chain id\\n   */\\n  function getChainId() public view returns (uint256 id) {\\n    // no-inline-assembly\\n    assembly {\\n      id := chainid()\\n    }\\n  }\\n\\n  /**\\n   * @notice Marks a nonce as used for the given signer\\n   * @param signer address Address of the signer for which to mark the nonce as used\\n   * @param nonce uint256 Nonce to be marked as used\\n   * @return bool True if the nonce was not marked as used already\\n   */\\n  function _markNonceAsUsed(address signer, uint256 nonce)\\n    internal\\n    returns (bool)\\n  {\\n    uint256 groupKey = nonce / 256;\\n    uint256 indexInGroup = nonce % 256;\\n    uint256 group = _nonceGroups[signer][groupKey];\\n\\n    // If it is already used, return false\\n    if ((group >> indexInGroup) & 1 == 1) {\\n      return false;\\n    }\\n\\n    _nonceGroups[signer][groupKey] = group | (uint256(1) << indexInGroup);\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Hash order parameters\\n   * @param nonce uint256\\n   * @param expiry uint256\\n   * @param signerWallet address\\n   * @param signerToken address\\n   * @param signerAmount uint256\\n   * @param senderToken address\\n   * @param senderAmount uint256\\n   * @return bytes32\\n   */\\n  function _getOrderHash(\\n    uint256 nonce,\\n    uint256 expiry,\\n    address signerWallet,\\n    address signerToken,\\n    uint256 signerAmount,\\n    address senderWallet,\\n    address senderToken,\\n    uint256 senderAmount\\n  ) internal view returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encode(\\n          LIGHT_ORDER_TYPEHASH,\\n          nonce,\\n          expiry,\\n          signerWallet,\\n          signerToken,\\n          signerAmount,\\n          signerFee,\\n          senderWallet,\\n          senderToken,\\n          senderAmount\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @notice Recover the signatory from a signature\\n   * @param hash bytes32\\n   * @param v uint8\\n   * @param r bytes32\\n   * @param s bytes32\\n   */\\n  function _getSignatory(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal view returns (address) {\\n    bytes32 digest =\\n      keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, hash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    // Ensure the signatory is not null\\n    require(signatory != address(0), \\\"INVALID_SIG\\\");\\n    return signatory;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@airswap/light/contracts/interfaces/ILight.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ILight {\\n  event Swap(\\n    uint256 indexed nonce,\\n    uint256 timestamp,\\n    address indexed signerWallet,\\n    address signerToken,\\n    uint256 signerAmount,\\n    uint256 signerFee,\\n    address indexed senderWallet,\\n    address senderToken,\\n    uint256 senderAmount\\n  );\\n\\n  event Cancel(uint256 indexed nonce, address indexed signerWallet);\\n\\n  event Authorize(address indexed signer, address indexed signerWallet);\\n\\n  event Revoke(address indexed signer, address indexed signerWallet);\\n\\n  event SetFee(uint256 indexed signerFee);\\n\\n  event SetFeeWallet(address indexed feeWallet);\\n\\n  function swap(\\n    uint256 nonce,\\n    uint256 expiry,\\n    address signerWallet,\\n    address signerToken,\\n    uint256 signerAmount,\\n    address senderToken,\\n    uint256 senderAmount,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  function swapWithRecipient(\\n    address recipient,\\n    uint256 nonce,\\n    uint256 expiry,\\n    address signerWallet,\\n    address signerToken,\\n    uint256 signerAmount,\\n    address senderToken,\\n    uint256 senderAmount,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  function authorize(address sender) external;\\n\\n  function revoke() external;\\n\\n  function cancel(uint256[] calldata nonces) external;\\n\\n  function nonceUsed(address, uint256) external view returns (bool);\\n\\n  function authorized(address) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lightAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LIGHT_ORDER_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signerWallet\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"signerToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"signerAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"senderToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"senderWallet\",\"type\":\"address\"}],\"name\":\"checkSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"light\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lightAddress\",\"type\":\"address\"}],\"name\":\"setLightAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Validator","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"000000000000000000000000c549a5c701cb6e6cbc091007a80c089c49595468","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}