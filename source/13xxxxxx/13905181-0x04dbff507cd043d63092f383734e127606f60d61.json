{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract MinePrivateVesting {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public token;\r\n\r\n    uint256 public startDate = 1640995201; // 2022-01-01 00:00:01\r\n\r\n    uint256 public endDate =   1659312001; // 2022-08-01 00:00:01\r\n    \r\n    uint256 public unlockAmountTotal;\r\n    \r\n    uint256 public tokenDecimals;\r\n    \r\n    uint256 public maxUnlockTimes;\r\n\r\n    address msgSender;\r\n    \r\n    mapping(address => UserVestingInfo) public UserVesting;\r\n\r\n    struct UserVestingInfo {\r\n        uint256 totalAmount;\r\n        uint256 firstAmount;\r\n        uint256 unlockAmount;\r\n        uint256 secondUnlock;\r\n        uint256 lastUnlockTime;\r\n    }\r\n\r\n    event FirstBySenderEvent(address indexed sender, uint256 amount);\r\n\r\n    event UnlockBySenderEvent(address indexed sender, uint256 amount);\r\n\r\n    constructor(address _token) public {\r\n        msgSender = msg.sender;\r\n        token = IERC20(_token);\r\n        tokenDecimals = token.decimals();\r\n        maxUnlockTimes = endDate.sub(startDate);\r\n        //add user vesting\r\n        addUserVestingInfo(0x046a5A1FA5986767ec460B998cC78F59c6ee03Ef, 593_750);\r\n        addUserVestingInfo(0x05404219D412C7B5A986Be58BC3a4ee3cE56d6ca, 3_437_500);\r\n        addUserVestingInfo(0x105167FD4edF441cc39113eD43E2169E27687C0F, 593_750);\r\n        addUserVestingInfo(0x11EfF19DC599ee676b6D65bae0A60479a87e889A, 593_750);\r\n        addUserVestingInfo(0x15943509d0C216a9aa36fbFe0095948065433df7, 593_750);\r\n        addUserVestingInfo(0x16E110beD33c0445BE68B957cbbef5cd7e1BBD4f, 1_187_500);\r\n        addUserVestingInfo(0x1cAD40D5c7302249f4cd76B8C6cdaB1d059AcfF1, 1_187_500);\r\n        addUserVestingInfo(0x21d426655A41c0874048DD0a3E29B1cFF5Ec5FB6, 2_375_000);\r\n        addUserVestingInfo(0x2286aa3d41aAd0f901cb94B6e158C86CcCeEcaa1, 875_000);\r\n        addUserVestingInfo(0x29958CbFbE4c73bF3f97fa40cdC9C75290E382db, 2_000_000);\r\n        addUserVestingInfo(0x299ea82E5C48160A623AaBa870Cd9D6E1552B991, 6_250_000);\r\n        addUserVestingInfo(0x2d946C881d2D28b005857658DE1D3a6D48438c3B, 2_968_750);\r\n        addUserVestingInfo(0x2EbD34Bd6E0fB0672B81cB6F721856Fc4145DD68, 1_250_000);\r\n        addUserVestingInfo(0x30A15B722DE7Fb242a54a8497D0Fc84528d3f156, 2_000_000);\r\n        addUserVestingInfo(0x30b8A82c7014454Be3bF67bb172F6312e2639b63, 1_543_750);\r\n        addUserVestingInfo(0x38ADfcfF7ed4496362ba8FdBDBE07b7C0E756537, 593_750);\r\n        addUserVestingInfo(0x38dF87028C451AD521B2FB1576732e9637A66e6f, 1_250_000);\r\n        addUserVestingInfo(0x3904eFc39b16e9CE6483E8bEAC623fca370286D1, 3_750_000);\r\n        addUserVestingInfo(0x3940eb694f814Ddb6C3593C8D35CC61B26904b2B, 1_250_000);\r\n        addUserVestingInfo(0x43BC45bE9cba81F2dc29700D79704cAd69f28b9F, 2_500_000);\r\n        addUserVestingInfo(0x43f4759153292Ac675ec7ff56439c60065ACbC51, 1_187_500);\r\n        addUserVestingInfo(0x440631dbdC0753E45241569C6d63552eAC8E3130, 1_781_250);\r\n        addUserVestingInfo(0x464F0f0842c419001F99cd97a3349e14269e8AF6, 593_750);\r\n        addUserVestingInfo(0x466822e78F979f6285aa40F978cC55A499965dC0, 593_750);\r\n        addUserVestingInfo(0x4B9dC74F34635556eF99Aafb101AF5a6ADCC59B9, 500_000);\r\n        addUserVestingInfo(0x4c59E1B80ca11215c2a53b39651825663048a7ED, 1_781_250);\r\n        addUserVestingInfo(0x4D904df422Ec729d627A289D6913c34D8c347b1D, 1_875_000);\r\n        addUserVestingInfo(0x57ef2a07b9e70cE289e3E6754fcf20512C8403b4, 593_750);\r\n        addUserVestingInfo(0x588384e142E5e1a841137B3d4E73b16E3858450d, 1_781_250);\r\n        addUserVestingInfo(0x58a252cc4073daCC7eaE81e7Ea193FAA13099849, 14_093_750);\r\n        addUserVestingInfo(0x66c109f9A10627D0ac0068b272Da01F61DAB2b25, 1_250_000);\r\n        addUserVestingInfo(0x6Aa80bCA0e8047eac7AF3D47c6983a6611F0DB4C, 2_462_500);\r\n        addUserVestingInfo(0x6cb8e395D1F7c7B00D6594deD6Aa03C5f7cA13C8, 593_750);\r\n        addUserVestingInfo(0x6CDB0A4902C81E9C63De8c486F31e8d5DDc0A9f7, 593_750);\r\n        addUserVestingInfo(0x71d1f0a05F82c0EBd02b8704E3d2337b517a6B3A, 1_625_000);\r\n        addUserVestingInfo(0x72540C9142cd326d2b60a464801D99c04D361dCF, 593_750);\r\n        addUserVestingInfo(0x7a6D0261da79ACa3564E7D6da146774C14259e1d, 1_250_000);\r\n        addUserVestingInfo(0x7cd50d621dE372a92f324b5D62173F4Ba344CE50, 593_750);\r\n        addUserVestingInfo(0x7fCBf5cb2a9dD1BD1e148bF0aa9b049cC0a9e938, 2_137_500);\r\n        addUserVestingInfo(0x82Ba7508f7F1995AB1623258D66Cb4E2B2b8F467, 593_750);\r\n        addUserVestingInfo(0x8317Ff8a1B35F331046395f84B5f6A3eC511a8c1, 296_875);\r\n        addUserVestingInfo(0x84dcCfB3F3e044229fa00e216E2829725579D97f, 2_375_000);\r\n        addUserVestingInfo(0x8522ABD5E2c17722bF046A6d0af75B60ed579546, 500_000);\r\n        addUserVestingInfo(0x8663381606Edfc0F2d5136f7e763b91A6d76ed22, 593_750);\r\n        addUserVestingInfo(0x8937E56f926C04205C27DCe54e273C0dd171Aa36, 593_750);\r\n        addUserVestingInfo(0x8B6Bbd8e858CC515352E5846a9E5b607Ad43826F, 1_187_500);\r\n        addUserVestingInfo(0x8bB948CE8D46ffAc5712247B4a501E874cB9c468, 1_187_500);\r\n        addUserVestingInfo(0x8E2A75e4a07149149C1787d3a55a1736A0c8DDEb, 375_000);\r\n        addUserVestingInfo(0x91406B5d57893E307f042D71C91e223a7058Eb72, 593_750);\r\n        addUserVestingInfo(0x9773d0dA32f0Ef40F3346dFD02f9BAF9f945BbA0, 593_750);\r\n        addUserVestingInfo(0x99DC041D9aDbe5b183efE17586049fa3848df311, 6_250_000);\r\n        addUserVestingInfo(0x9c2D043aAd476515da882DaA28e70C0dc7A63d67, 593_750);\r\n        addUserVestingInfo(0x9E6d8980BC9fc98c5d2db48c46237d12d9873ab0, 950_000);\r\n        addUserVestingInfo(0x9Edc3668e4e990F23663341d0a667EFFdd6F1f56, 593_750);\r\n        addUserVestingInfo(0xa69303D076dFb54d50589C4D018205a409Aa4293, 831_250);\r\n        addUserVestingInfo(0xb1e8fd06A5406262e420662bb22e3B9Bb6daD1a6, 2_937_500);\r\n        addUserVestingInfo(0xb5018Bc174321fFE9e0A38d262e9A448FBD21cdb, 593_750);\r\n        addUserVestingInfo(0xb72D959a9670b546a5759a9d50E8CdB59187F1b5, 1_781_250);\r\n        addUserVestingInfo(0xB7adC067507e9485345C96d1f92ECD9fC9345253, 625_000);\r\n        addUserVestingInfo(0xBA3d570535360bc9383B28691C872959d4A34061, 1_250_000);\r\n        addUserVestingInfo(0xbCd4cB80Ba69376E10082427D6b50a181abCd307, 1_843_750);\r\n        addUserVestingInfo(0xc89F9Ba72752b9d9AC33220dBce309f38316730D, 2_500_000);\r\n        addUserVestingInfo(0xd1B8aD0Dbc972AfC88e68902320100f52bFCF8d8, 593_750);\r\n        addUserVestingInfo(0xD22108e8681D20227DdAaF5722E5C76B34f62c8B, 7_312_500);\r\n        addUserVestingInfo(0xD58E6A2B3Baca952D1f937a4C0F1e88Aa92e4772, 1_562_500);\r\n        addUserVestingInfo(0xDC0D74171B31051d4BFA88de496Ba5Dc700614D1, 593_750);\r\n        addUserVestingInfo(0xe4bcbFD6E636B15eaff352c867b33603a126ADae, 3_562_500);\r\n        addUserVestingInfo(0xe585A1A683214A2504Ef36350f72E8E613048660, 593_750);\r\n        addUserVestingInfo(0xE58Ea0ceD4417f0551Fb82ddF4F6477072DFb430, 1_781_250);\r\n        addUserVestingInfo(0xe5ab3737Ea9214428A3a3320fFc4C3a1Ed0810c8, 375_000);\r\n        addUserVestingInfo(0xE816c2932724655782A81009CAb64BC45446afB0, 1_068_750);\r\n        addUserVestingInfo(0xF1D5f83cAdFB8527E1Ec32bD934FCa87d288de7C, 593_750);\r\n        addUserVestingInfo(0xf41399aAc0D78cC955108E12916204d90FAff875, 7_500_000);\r\n        addUserVestingInfo(0xF5f6a4A2a3466b26C7f161258fc47Ff5800c0116, 5_000_000);\r\n        addUserVestingInfo(0xF76dbc5d9A7465EcEc49700054bF27f88cf9ad05, 1_187_500);\r\n        addUserVestingInfo(0xF789C8fb4349Ba8762b159Ecd29Ac1b65E327bD3, 1_250_000);\r\n        addUserVestingInfo(0xf7B496c0178b1Ee935ea3307188B5b1FbB0cDa59, 890_625);\r\n        addUserVestingInfo(0xfCD1c642a8f73866EbF8526b470a72B31A7e9404, 11_250_000);\r\n        addUserVestingInfo(0xFDa4723b9b4E7ebaa08E38C64Ea7d73A8E0AAc9B, 593_750);\r\n        addUserVestingInfo(0xa5013Bce0182E74FfEf440B3B5dd7173ddCb52cE, 500_000);\r\n    }\r\n\r\n    function addUserVestingInfo(address _address, uint256 _totalAmount) public {\r\n        require(msgSender == msg.sender, \"You do not have permission to operate\");\r\n        require(_address != address(0), \"The lock address cannot be a black hole address\");\r\n        UserVestingInfo storage _userVestingInfo = UserVesting[_address];\r\n        require(_totalAmount > 0, \"Lock up amount cannot be 0\");\r\n        require(_userVestingInfo.totalAmount == 0, \"Lock has been added\");\r\n        _userVestingInfo.totalAmount = _totalAmount.mul(10 ** tokenDecimals);\r\n        _userVestingInfo.firstAmount = _userVestingInfo.totalAmount.mul(125).div(1000); //12.5%\r\n        _userVestingInfo.secondUnlock = _userVestingInfo.totalAmount.sub(_userVestingInfo.firstAmount).div(maxUnlockTimes);\r\n        unlockAmountTotal = unlockAmountTotal.add(_userVestingInfo.totalAmount);\r\n    }\r\n\r\n    function blockTimestamp() public virtual view returns(uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function getUnlockTimes() public virtual view returns(uint256) {\r\n        if(blockTimestamp() > startDate) {\r\n            return blockTimestamp().sub(startDate);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function unlockFirstBySender() public {\r\n        UserVestingInfo storage _userVestingInfo = UserVesting[msg.sender];\r\n        require(_userVestingInfo.totalAmount > 0, \"The user has no lock record\");\r\n        require(_userVestingInfo.firstAmount > 0, \"The user has unlocked the first token\");\r\n        require(_userVestingInfo.totalAmount > _userVestingInfo.unlockAmount, \"The user has unlocked the first token\");\r\n        require(blockTimestamp() > startDate, \"It's not time to lock and unlock\");\r\n        _safeTransfer(msg.sender, _userVestingInfo.firstAmount);\r\n        _userVestingInfo.unlockAmount = _userVestingInfo.unlockAmount.add(_userVestingInfo.firstAmount);\r\n\r\n        emit FirstBySenderEvent(msg.sender, _userVestingInfo.firstAmount);\r\n        _userVestingInfo.firstAmount = 0;\r\n    }\r\n\r\n    function unlockBySender() public {\r\n        UserVestingInfo storage _userVestingInfo = UserVesting[msg.sender];\r\n        require(_userVestingInfo.totalAmount > 0, \"The user has no lock record\");\r\n        uint256 unlockAmount = 0;\r\n        if(blockTimestamp() > endDate) {\r\n            require(_userVestingInfo.totalAmount > _userVestingInfo.unlockAmount, \"The user has no unlocked quota\");\r\n            unlockAmount = _userVestingInfo.totalAmount.sub(_userVestingInfo.unlockAmount);\r\n        } else {\r\n            uint256 unlockTimes = getUnlockTimes();\r\n            require(unlockTimes > _userVestingInfo.lastUnlockTime, \"The user has no lock record\");\r\n            unlockAmount = unlockTimes.sub(_userVestingInfo.lastUnlockTime).mul(_userVestingInfo.secondUnlock);\r\n            _userVestingInfo.lastUnlockTime = unlockTimes;\r\n        }\r\n        _safeTransfer(msg.sender, unlockAmount);\r\n        _userVestingInfo.unlockAmount = _userVestingInfo.unlockAmount.add(unlockAmount);\r\n\r\n        emit UnlockBySenderEvent(msg.sender, unlockAmount);\r\n    }\r\n\r\n    function _safeTransfer(address _unlockAddress, uint256 _unlockToken) private {\r\n        require(balanceOf() >= _unlockToken, \"Insufficient available balance for transfer\");\r\n        token.transfer(_unlockAddress, _unlockToken);\r\n    }\r\n\r\n    function balanceOf() public view returns(uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOfBySender() public view returns(uint256) {\r\n        return token.balanceOf(msg.sender);\r\n    }\r\n\r\n    function balanceOfByAddress(address _address) public view returns(uint256) {\r\n        return token.balanceOf(_address);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FirstBySenderEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockBySenderEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondUnlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUnlockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"}],\"name\":\"addUserVestingInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOfByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfBySender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUnlockTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockAmountTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockBySender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockFirstBySender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MinePrivateVesting","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000829c97092c0cc92efe7397dd3ddb831cc5835bae","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://466f83f2e488564994e3a65b96d43efe97cbdcbd6ef928da4f03896d55941752"}]}