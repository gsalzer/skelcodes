{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * Returns the address of the current owner.\r\n     */\r\n    function governance() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyGovernance() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferGovernance(address newOwner) internal virtual onlyGovernance {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/ReethMonetaryPolicyV2.sol\r\n\r\npragma solidity =0.6.6;\r\n\r\n// This monetary policy controls the rebase mechanism in the reeth token\r\n// Rebase can only be called once a day by a non-contract\r\n// To incentivize rebase, the policy will mint reeth to the delegatecaller equal to up to the fast gas price (determined by Chainlink)\r\n// There is an absolute max price however\r\n\r\ninterface PriceOracle {\r\n    function getLatestREETHPrice() external view returns (uint256);\r\n    function updateREETHPrice() external; // Update price oracle upon every token transfer\r\n    function mainLiquidity() external view returns (address); // Returns address of REETH/ETH LP pair\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n  function latestRoundData() external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\r\n}\r\n\r\ninterface UniswapLikeLPToken {\r\n    function sync() external; // Call sync right after rebase call\r\n}\r\n\r\ninterface ReethToken {\r\n    function mint(address, uint256) external returns (bool);\r\n    function isRebaseable() external view returns (bool);\r\n    function reethScalingFactor() external view returns (uint256);\r\n    function maxScalingFactor() external view returns (uint256);\r\n    function rebase(uint256 _price, uint256 _indexDelta, bool _positive) external returns (uint256); // Epoch is stored in the token\r\n}\r\n\r\ncontract ReethMonetaryPolicyV2 is Ownable, ReentrancyGuard {\r\n    // Adopted from YamRebaserV2\r\n    using SafeMath for uint256;\r\n\r\n    /// @notice an event emitted when deviationThreshold is changed\r\n    event NewDeviationThreshold(uint256 oldDeviationThreshold, uint256 newDeviationThreshold);\r\n    \r\n    /// @notice Spreads out getting to the target price\r\n    uint256 public rebaseLag;\r\n\r\n    /// @notice Peg target\r\n    uint256 public targetRate;\r\n    \r\n    // If the current exchange rate is within this fractional distance from the target, no supply\r\n    // update is performed. Fixed point number--same format as the rate.\r\n    // (ie) abs(rate - targetRate) / targetRate < deviationThreshold, then no supply change.\r\n    uint256 public deviationThreshold;\r\n    \r\n    /// @notice More than this much time must pass between rebase operations.\r\n    uint256 public minRebaseTimeIntervalSec;\r\n\r\n    /// @notice Block timestamp of last rebase operation\r\n    uint256 public lastRebaseTimestampSec;\r\n\r\n    /// @notice The rebase window begins this many seconds into the minRebaseTimeInterval period.\r\n    // For example if minRebaseTimeInterval is 24hrs, it represents the time of day in seconds.\r\n    uint256 public rebaseWindowOffsetSec;\r\n\r\n    /// @notice The length of the time window where a rebase operation is allowed to execute, in seconds.\r\n    uint256 public rebaseWindowLengthSec;\r\n\r\n    /// @notice The number of rebase cycles since inception\r\n    uint256 public epoch;\r\n    \r\n    /// @notice Reeth token address\r\n    address public reethAddress;\r\n    \r\n    // price oracle address\r\n    address public reethPriceOracle;\r\n    \r\n    /// @notice list of uniswap like pairs to sync\r\n    address[] public uniSyncPairs;\r\n    \r\n    // Used for division scaling math\r\n    uint256 constant BASE = 1e18;\r\n    \r\n    address constant GAS_ORACLE_ADDRESS = address(0x169E633A2D1E6c10dD91238Ba11c4A708dfEF37C); // Chainlink address for fast gas oracle\r\n    \r\n    // Gas price maximum\r\n    uint256 public maxGasPrice = 200000000000; // 200 Gwei\r\n    \r\n    uint256 public callerBonus = 5000; // Rebase caller gets a initial bonus of 5%\r\n    \r\n    event RebaseMint(uint256 _gasCost, uint256 _reethMinted, address _receiver);\r\n    \r\n    constructor(\r\n        address _reethAddress,\r\n        address _priceOracle\r\n    )\r\n        public\r\n    {\r\n        reethAddress = _reethAddress;\r\n        reethPriceOracle = _priceOracle;\r\n        \r\n        minRebaseTimeIntervalSec = 1 days;\r\n        rebaseWindowOffsetSec = 12 hours; // 12:00 UTC rebase\r\n        \r\n        // 1 REETH = 1 ETH\r\n        targetRate = BASE;\r\n        \r\n        // once daily rebase, with targeting reaching peg in 10 days\r\n        rebaseLag = 10;\r\n        \r\n        // 5%\r\n        deviationThreshold = 5 * 10**16;\r\n        \r\n        // 60 minutes\r\n        rebaseWindowLengthSec = 1 hours;\r\n\r\n    }\r\n    \r\n    // This is an optional function that is ran anytime a reeth transfer is made\r\n    function reethTransferActions() external {\r\n        require(_msgSender() == reethAddress, \"Not sent from REETH token\");\r\n        // We are running the price oracle update\r\n        if(reethPriceOracle != address(0)){\r\n            PriceOracle oracle = PriceOracle(reethPriceOracle);\r\n            oracle.updateREETHPrice(); // Update the price of reeth            \r\n        }\r\n    }\r\n    \r\n    // Rebase function\r\n    /**\r\n     * @notice Initiates a new rebase operation, provided the minimum time period has elapsed.\r\n     *\r\n     * @dev The supply adjustment equals (_totalSupply * DeviationFromTargetRate) / rebaseLag\r\n     *      Where DeviationFromTargetRate is (MarketOracleRate - targetRate) / targetRate\r\n     *      and targetRate is 1e18\r\n     */\r\n     // Users can give their gas spent to another user if they choose to (in case of bot calls)\r\n    function rebase(address _delegateCaller)\r\n        public\r\n    {\r\n        // Users will be recognized for 1.5x the eth they spend when using this oracle\r\n        uint256 gasUsed = gasleft(); // Start calculate gas spent\r\n        \r\n        // EOA only or gov\r\n        require(_msgSender() == tx.origin || _msgSender() == governance(), \"Contract call not allowed unless governance\");\r\n        // ensure rebasing at correct time\r\n        require(inRebaseWindow() == true, \"Not in rebase window\");\r\n\r\n        // This comparison also ensures there is no reentrancy.\r\n        require(lastRebaseTimestampSec.add(minRebaseTimeIntervalSec) < now, \"Call already executed for this epoch\");\r\n\r\n        // Snap the rebase time to the start of this window.\r\n        lastRebaseTimestampSec = now.sub(\r\n            now.mod(minRebaseTimeIntervalSec)).add(rebaseWindowOffsetSec);\r\n\r\n        PriceOracle oracle = PriceOracle(reethPriceOracle);\r\n        oracle.updateREETHPrice(); // Update the price of reeth\r\n        \r\n        uint256 exchangeRate = oracle.getLatestREETHPrice();\r\n        require(exchangeRate > 0, \"Bad oracle price\");\r\n\r\n        // calculates % change to supply\r\n        (uint256 offPegPerc, bool positive) = computeOffPegPerc(exchangeRate);\r\n\r\n        uint256 indexDelta = offPegPerc;\r\n\r\n        // Apply the Dampening factor.\r\n        indexDelta = indexDelta.div(rebaseLag);\r\n\r\n        ReethToken reeth = ReethToken(reethAddress);\r\n\r\n        if (positive) {\r\n            require(reeth.reethScalingFactor().mul(BASE.add(indexDelta)).div(BASE) < reeth.maxScalingFactor(), \"new scaling factor will be too big\");\r\n        }\r\n\r\n        // rebase the token\r\n        reeth.rebase(exchangeRate, indexDelta, positive);\r\n\r\n        // sync the pools\r\n        {\r\n            // first sync the main pool\r\n            address mainLP = oracle.mainLiquidity();\r\n            UniswapLikeLPToken lp = UniswapLikeLPToken(mainLP);\r\n            lp.sync(); // Sync this pool post rebase\r\n            \r\n            // And any additional pairs to sync\r\n            for(uint256 i = 0; i < uniSyncPairs.length; i++){\r\n                lp = UniswapLikeLPToken(uniSyncPairs[i]);\r\n                lp.sync();\r\n            }\r\n        }\r\n        \r\n        // Determine what gas price to use when minting reeth\r\n        // We do this instead of updating the spent ETH oracle to incentivize calling rebase\r\n        uint256 gasPrice = tx.gasprice;\r\n        {\r\n            uint256 fastPrice = getFastGasPrice();\r\n            if(gasPrice > fastPrice){\r\n                gasPrice = fastPrice;\r\n            }\r\n            if(gasPrice > maxGasPrice){\r\n                gasPrice = maxGasPrice;\r\n            }\r\n        }\r\n        \r\n        if(_delegateCaller == address(0)){\r\n            _delegateCaller = _msgSender();\r\n        }\r\n        \r\n        gasUsed = gasUsed.sub(gasleft()).mul(gasPrice).mul(callerBonus).div(100000); // The amount of ETH reimbursed for this transaction with bonus\r\n\r\n        // Convert ETH units to REETH units and mint to delegated caller\r\n        uint256 reethReturn = gasUsed.mul(10**uint256(IERC20(reethAddress).decimals())).div(1e18);\r\n        reethReturn = reethReturn.mul(1e18).div(exchangeRate);\r\n        \r\n        if(reethReturn > 0){\r\n            reeth.mint(_delegateCaller, reethReturn);\r\n            emit RebaseMint(gasUsed, reethReturn, _delegateCaller);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return If the latest block timestamp is within the rebase time window it, returns true.\r\n     *         Otherwise, returns false.\r\n     */\r\n    function inRebaseWindow() public view returns (bool) {\r\n        // First check if reeth token is active for rebasing\r\n        if(ReethToken(reethAddress).isRebaseable() == false){return false;}\r\n        \r\n        return (block.timestamp.mod(minRebaseTimeIntervalSec) >= rebaseWindowOffsetSec &&\r\n            block.timestamp.mod(minRebaseTimeIntervalSec) <\r\n            (rebaseWindowOffsetSec.add(rebaseWindowLengthSec)));\r\n    }\r\n\r\n    /**\r\n     * @return Computes in % how far off market is from peg\r\n     */\r\n    function computeOffPegPerc(uint256 rate)\r\n        private\r\n        view\r\n        returns (uint256, bool)\r\n    {\r\n        if (withinDeviationThreshold(rate)) {\r\n            return (0, false);\r\n        }\r\n\r\n        // indexDelta =  (rate - targetRate) / targetRate\r\n        if (rate > targetRate) {\r\n            return (rate.sub(targetRate).mul(BASE).div(targetRate), true);\r\n        } else {\r\n            return (targetRate.sub(rate).mul(BASE).div(targetRate), false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param rate The current exchange rate, an 18 decimal fixed point number.\r\n     * @return If the rate is within the deviation threshold from the target rate, returns true.\r\n     *         Otherwise, returns false.\r\n     */\r\n    function withinDeviationThreshold(uint256 rate)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint256 absoluteDeviationThreshold = targetRate.mul(deviationThreshold)\r\n            .div(10 ** 18);\r\n\r\n        return (rate >= targetRate && rate.sub(targetRate) < absoluteDeviationThreshold)\r\n            || (rate < targetRate && targetRate.sub(rate) < absoluteDeviationThreshold);\r\n    }\r\n    \r\n    function getFastGasPrice() public view returns (uint256) {\r\n        AggregatorV3Interface gasOracle = AggregatorV3Interface(GAS_ORACLE_ADDRESS);\r\n        ( , int intGasPrice, , , ) = gasOracle.latestRoundData(); // We only want the answer \r\n        return uint256(intGasPrice);\r\n    }\r\n\r\n    // Governance only functions\r\n    \r\n    // Timelock variables\r\n    \r\n    uint256 private _timelockStart; // The start of the timelock to change governance variables\r\n    uint256 private _timelockType; // The function that needs to be changed\r\n    uint256 constant TIMELOCK_DURATION = 86400; // Timelock is 24 hours\r\n    \r\n    // Reusable timelock variables\r\n    address private _timelock_address;\r\n    uint256[3] private _timelock_data;\r\n    \r\n    modifier timelockConditionsMet(uint256 _type) {\r\n        require(_timelockType == _type, \"Timelock not acquired for this function\");\r\n        _timelockType = 0; // Reset the type once the timelock is used\r\n        require(now >= _timelockStart + TIMELOCK_DURATION, \"Timelock time not met\");\r\n        _;\r\n    }\r\n    \r\n    // Change the owner of the token contract\r\n    // --------------------\r\n    function startGovernanceChange(address _address) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 1;\r\n        _timelock_address = _address;       \r\n    }\r\n    \r\n    function finishGovernanceChange() external onlyGovernance timelockConditionsMet(1) {\r\n        transferGovernance(_timelock_address);\r\n    }\r\n    // --------------------\r\n    \r\n    // Add to the synced pairs\r\n    // --------------------\r\n    function startAddSyncPair(address _address) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 2;\r\n        _timelock_address = _address;\r\n    }\r\n    \r\n    function finishAddSyncPair() external onlyGovernance timelockConditionsMet(2) {\r\n        uniSyncPairs.push(_timelock_address);\r\n    }\r\n    // --------------------\r\n    \r\n    // Remove from synced pairs\r\n    // --------------------\r\n    function startRemoveSyncPair(address _address) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 3;\r\n        _timelock_address = _address;\r\n    }\r\n    \r\n    function finishRemoveSyncPair() external onlyGovernance timelockConditionsMet(3) {\r\n        uint256 length = uniSyncPairs.length;\r\n        for(uint256 i = 0; i < length; i++){\r\n            if(uniSyncPairs[i] == _timelock_address){\r\n                for(uint256 i2 = i; i2 < length-1; i2++){\r\n                    uniSyncPairs[i2] =uniSyncPairs[i2 + 1]; // Shift the data down one\r\n                }\r\n                uniSyncPairs.pop(); //Remove last element\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the deviation threshold\r\n    // --------------------\r\n    function startChangeDeviationThreshold(uint256 _threshold) external onlyGovernance {\r\n        require(_threshold > 0);\r\n        _timelockStart = now;\r\n        _timelockType = 4;\r\n        _timelock_data[0] = _threshold;\r\n    }\r\n    \r\n    function finishChangeDeviationThreshold() external onlyGovernance timelockConditionsMet(4) {\r\n        deviationThreshold = _timelock_data[0];\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the rebase lag\r\n    // --------------------\r\n    function startChangeRebaseLag(uint256 _lag) external onlyGovernance {\r\n        require(_lag > 1);\r\n        _timelockStart = now;\r\n        _timelockType = 5;\r\n        _timelock_data[0] = _lag;\r\n    }\r\n    \r\n    function finishChangeRebaseLag() external onlyGovernance timelockConditionsMet(5) {\r\n        rebaseLag = _timelock_data[0];\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the target rate\r\n    // --------------------\r\n    function startChangeTargetRate(uint256 _rate) external onlyGovernance {\r\n        require(_rate > 0);\r\n        _timelockStart = now;\r\n        _timelockType = 6;\r\n        _timelock_data[0] = _rate;\r\n    }\r\n    \r\n    function finishChangeTargetRate() external onlyGovernance timelockConditionsMet(6) {\r\n        targetRate = _timelock_data[0];\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the rebase times\r\n    // --------------------\r\n    function startChangeRebaseTimes(uint256 _UTCOffset, uint256 _windowLength, uint256 _frequency) external onlyGovernance {\r\n        require(_frequency > 0);\r\n        require(_UTCOffset < _frequency);\r\n        require(_UTCOffset + _windowLength < _frequency);\r\n        _timelockStart = now;\r\n        _timelockType = 7;\r\n        _timelock_data[0] = _UTCOffset;\r\n        _timelock_data[1] = _windowLength;\r\n        _timelock_data[2] = _frequency;\r\n    }\r\n    \r\n    function finishChangeRebaseTimes() external onlyGovernance timelockConditionsMet(7) {\r\n        rebaseWindowOffsetSec = _timelock_data[0];\r\n        rebaseWindowLengthSec = _timelock_data[1];\r\n        minRebaseTimeIntervalSec = _timelock_data[2];\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the max gas allowed\r\n    // --------------------\r\n    function startChangeMaxGasPrice(uint256 _gas) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 8;\r\n        _timelock_data[0] = _gas;\r\n    }\r\n    \r\n    function finishChangeMaxGasPrice() external onlyGovernance timelockConditionsMet(8) {\r\n        maxGasPrice = _timelock_data[0];\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the caller bonus\r\n    // --------------------\r\n    function startChangeCallerBonus(uint256 _bonus) external onlyGovernance {\r\n        require(_bonus < 100000, \"Bonus is too high\");\r\n        _timelockStart = now;\r\n        _timelockType = 9;\r\n        _timelock_data[0] = _bonus;\r\n    }\r\n    \r\n    function finishChangeCallerBonus() external onlyGovernance timelockConditionsMet(9) {\r\n        callerBonus = _timelock_data[0];\r\n    }\r\n    // --------------------\r\n   \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reethAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDeviationThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeviationThreshold\",\"type\":\"uint256\"}],\"name\":\"NewDeviationThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_gasCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reethMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"RebaseMint\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"callerBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deviationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishAddSyncPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeCallerBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeDeviationThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeMaxGasPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeRebaseLag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeRebaseTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeTargetRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishGovernanceChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishRemoveSyncPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFastGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inRebaseWindow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebaseTimestampSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRebaseTimeIntervalSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegateCaller\",\"type\":\"address\"}],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseLag\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseWindowLengthSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseWindowOffsetSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reethPriceOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reethTransferActions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"startAddSyncPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"startChangeCallerBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"startChangeDeviationThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"startChangeMaxGasPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lag\",\"type\":\"uint256\"}],\"name\":\"startChangeRebaseLag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_UTCOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_windowLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_frequency\",\"type\":\"uint256\"}],\"name\":\"startChangeRebaseTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"startChangeTargetRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"startGovernanceChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"startRemoveSyncPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniSyncPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ReethMonetaryPolicyV2","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e804964c296e9fb666fbe67767838c1ff9ab32090000000000000000000000000f1f24bdccb632e33888feaf73d05dd851b811ec","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://765a23b68905474e2d7d10e6028f121980b5b59303dbe2da609865829ae23413"}]}