{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-06-21\r\n */\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2021-06-09\r\n */\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2021-06-07\r\n */\r\n\r\n// SPDX-License-Identifier: AGPL-3.0-or-later\r\n\r\npragma solidity 0.7.5;\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(\r\n            value\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrrt(uint256 a) internal pure returns (uint256 c) {\r\n        if (a > 3) {\r\n            c = a;\r\n            uint256 b = add(div(a, 2), 1);\r\n            while (b < c) {\r\n                c = b;\r\n                b = div(add(div(a, b), b), 2);\r\n            }\r\n        } else if (a != 0) {\r\n            c = 1;\r\n        }\r\n    }\r\n\r\n    function percentageAmount(uint256 total_, uint8 percentage_)\r\n        internal\r\n        pure\r\n        returns (uint256 percentAmount_)\r\n    {\r\n        return div(mul(total_, percentage_), 1000);\r\n    }\r\n\r\n    function substractPercentage(uint256 total_, uint8 percentageToSub_)\r\n        internal\r\n        pure\r\n        returns (uint256 result_)\r\n    {\r\n        return sub(total_, div(mul(total_, percentageToSub_), 1000));\r\n    }\r\n\r\n    function percentageOfTotal(uint256 part_, uint256 total_)\r\n        internal\r\n        pure\r\n        returns (uint256 percent_)\r\n    {\r\n        return div(mul(part_, 100), total_);\r\n    }\r\n\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\r\n    }\r\n\r\n    function quadraticPricing(uint256 payment_, uint256 multiplier_)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return sqrrt(mul(multiplier_, payment_));\r\n    }\r\n\r\n    function bondingCurve(uint256 supply_, uint256 multiplier_)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return mul(multiplier_, supply_);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addressToString(address _address)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        bytes32 _bytes = bytes32(uint256(_address));\r\n        bytes memory HEX = \"0123456789abcdef\";\r\n        bytes memory _addr = new bytes(42);\r\n\r\n        _addr[0] = \"0\";\r\n        _addr[1] = \"x\";\r\n\r\n        for (uint256 i = 0; i < 20; i++) {\r\n            _addr[2 + i * 2] = HEX[uint8(_bytes[i + 12] >> 4)];\r\n            _addr[3 + i * 2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\r\n        }\r\n\r\n        return string(_addr);\r\n    }\r\n}\r\n\r\ninterface IPolicy {\r\n    function policy() external view returns (address);\r\n\r\n    function renouncePolicy() external;\r\n\r\n    function pushPolicy(address newPolicy_) external;\r\n\r\n    function pullPolicy() external;\r\n}\r\n\r\ncontract Policy is IPolicy {\r\n    address internal _policy;\r\n    address internal _newPolicy;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _policy = msg.sender;\r\n        emit OwnershipTransferred(address(0), _policy);\r\n    }\r\n\r\n    function policy() public view override returns (address) {\r\n        return _policy;\r\n    }\r\n\r\n    modifier onlyPolicy() {\r\n        require(_policy == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renouncePolicy() public virtual override onlyPolicy {\r\n        emit OwnershipTransferred(_policy, address(0));\r\n        _policy = address(0);\r\n    }\r\n\r\n    function pushPolicy(address newPolicy_) public virtual override onlyPolicy {\r\n        require(\r\n            newPolicy_ != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _newPolicy = newPolicy_;\r\n    }\r\n\r\n    function pullPolicy() public virtual override {\r\n        require(msg.sender == _newPolicy);\r\n        emit OwnershipTransferred(_policy, _newPolicy);\r\n        _policy = _newPolicy;\r\n    }\r\n}\r\n\r\ninterface ITreasury {\r\n    function mintRewards(address _recipient, uint256 _amount) external;\r\n}\r\n\r\ncontract Distributor is Policy {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /* ====== VARIABLES ====== */\r\n\r\n    address public immutable ASG;\r\n    address public immutable treasury;\r\n\r\n    uint256 public immutable epochLength;\r\n    uint256 public nextEpochBlock;\r\n\r\n    mapping(uint256 => Adjust) public adjustments;\r\n\r\n    /* ====== STRUCTS ====== */\r\n\r\n    struct Info {\r\n        uint256 rate; // in ten-thousandths ( 5000 = 0.5% )\r\n        address recipient;\r\n    }\r\n    Info[] public info;\r\n\r\n    struct Adjust {\r\n        bool add;\r\n        uint256 rate;\r\n        uint256 target;\r\n    }\r\n\r\n    /* ====== CONSTRUCTOR ====== */\r\n\r\n    constructor(\r\n        address _treasury,\r\n        address _asg,\r\n        uint256 _epochLength,\r\n        uint256 _nextEpochBlock\r\n    ) {\r\n        require(_treasury != address(0));\r\n        treasury = _treasury;\r\n        require(_asg != address(0));\r\n        ASG = _asg;\r\n        epochLength = _epochLength;\r\n        nextEpochBlock = _nextEpochBlock;\r\n    }\r\n\r\n    /* ====== PUBLIC FUNCTIONS ====== */\r\n\r\n    /**\r\n        @notice send epoch reward to staking contract\r\n     */\r\n    function distribute() external returns (bool) {\r\n        if (nextEpochBlock <= block.number) {\r\n            nextEpochBlock = nextEpochBlock.add(epochLength); // set next epoch block\r\n\r\n            // distribute rewards to each recipient\r\n            for (uint256 i = 0; i < info.length; i++) {\r\n                if (info[i].rate > 0) {\r\n                    ITreasury(treasury).mintRewards( // mint and send from treasury\r\n                        info[i].recipient,\r\n                        nextRewardAt(info[i].rate)\r\n                    );\r\n                    adjust(i); // check for adjustment\r\n                }\r\n            }\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /* ====== INTERNAL FUNCTIONS ====== */\r\n\r\n    /**\r\n        @notice increment reward rate for collector\r\n     */\r\n    function adjust(uint256 _index) internal {\r\n        Adjust memory adjustment = adjustments[_index];\r\n        if (adjustment.rate != 0) {\r\n            if (adjustment.add) {\r\n                // if rate should increase\r\n                info[_index].rate = info[_index].rate.add(adjustment.rate); // raise rate\r\n                if (info[_index].rate >= adjustment.target) {\r\n                    // if target met\r\n                    adjustments[_index].rate = 0; // turn off adjustment\r\n                }\r\n            } else {\r\n                // if rate should decrease\r\n                info[_index].rate = info[_index].rate.sub(adjustment.rate); // lower rate\r\n                if (info[_index].rate <= adjustment.target) {\r\n                    // if target met\r\n                    adjustments[_index].rate = 0; // turn off adjustment\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /* ====== VIEW FUNCTIONS ====== */\r\n\r\n    /**\r\n        @notice view function for next reward at given rate\r\n        @param _rate uint\r\n        @return uint\r\n     */\r\n    function nextRewardAt(uint256 _rate) public view returns (uint256) {\r\n        return IERC20(ASG).totalSupply().mul(_rate).div(1000000);\r\n    }\r\n\r\n    /**\r\n        @notice view function for next reward for specified address\r\n        @param _recipient address\r\n        @return uint\r\n     */\r\n    function nextRewardFor(address _recipient) public view returns (uint256) {\r\n        uint256 reward;\r\n        for (uint256 i = 0; i < info.length; i++) {\r\n            if (info[i].recipient == _recipient) {\r\n                reward = nextRewardAt(info[i].rate);\r\n            }\r\n        }\r\n        return reward;\r\n    }\r\n\r\n    /* ====== POLICY FUNCTIONS ====== */\r\n\r\n    /**\r\n        @notice adds recipient for distributions\r\n        @param _recipient address\r\n        @param _rewardRate uint\r\n     */\r\n    function addRecipient(address _recipient, uint256 _rewardRate)\r\n        external\r\n        onlyPolicy\r\n    {\r\n        require(_recipient != address(0));\r\n        info.push(Info({recipient: _recipient, rate: _rewardRate}));\r\n    }\r\n\r\n    /**\r\n        @notice removes recipient for distributions\r\n        @param _index uint\r\n        @param _recipient address\r\n     */\r\n    function removeRecipient(uint256 _index, address _recipient)\r\n        external\r\n        onlyPolicy\r\n    {\r\n        require(_recipient == info[_index].recipient);\r\n        info[_index].recipient = address(0);\r\n        info[_index].rate = 0;\r\n    }\r\n\r\n    /**\r\n        @notice set adjustment info for a collector's reward rate\r\n        @param _index uint\r\n        @param _add bool\r\n        @param _rate uint\r\n        @param _target uint\r\n     */\r\n    function setAdjustment(\r\n        uint256 _index,\r\n        bool _add,\r\n        uint256 _rate,\r\n        uint256 _target\r\n    ) external onlyPolicy {\r\n        adjustments[_index] = Adjust({add: _add, rate: _rate, target: _target});\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asg\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epochLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextEpochBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ASG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"name\":\"addRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adjustments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"info\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"nextRewardAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"nextRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPolicy_\",\"type\":\"address\"}],\"name\":\"pushPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"removeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_add\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"}],\"name\":\"setAdjustment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Distributor","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009d5818af130705f95444d78a55b4f3d85cbfcc130000000000000000000000000dc5189ec8cde5732a01f0f592e927b30437055100000000000000000000000000000000000000000000000000000000000008980000000000000000000000000000000000000000000000000000000000c6a185","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e7bd86abe8865b1ff71e3de4e553f231a2ad0f3441fb6f369e81814563f8b07c"}]}