{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\ncontract Deposit {\r\n\r\n    uint256 private constant ONE_DAY_SEC = 1 days;\r\n    uint256 private constant ALL_PERCENT = 100;\r\n    uint256 private constant ONE_DAY_PERCENT = 2;\r\n    uint256 private constant REFERER_PERCENT = 20;\r\n    uint256 private constant PAYMENT_FOR_WITHDRAW = 0.001 ether;\r\n\r\n    struct Payment {\r\n        uint256 value;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    struct Member {\r\n        Payment payments;\r\n        address referer;\r\n        uint256 withdrawn;\r\n        uint256 deposit;\r\n        bool active;\r\n    }\r\n\r\n    mapping(address => Member) private members;\r\n    address private owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event MemberWithdrawn(address indexed member, uint256 amount);\r\n    event OwnerWithdrawn(address indexed owner, uint256 amount);\r\n    event MemberDeposit(address indexed member, uint256 amount, bytes data);\r\n    event SendToReferer(address indexed member, uint256 amount);\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    modifier isOwner() {\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier isNotMember() {\r\n        require(!members[msg.sender].active, 'You have already made a deposit');\r\n        _;\r\n    }\r\n\r\n    modifier isMember() {\r\n        require(members[msg.sender].active, 'You have not made a deposit yet');\r\n        _;\r\n    }\r\n\r\n    receive() external payable {\r\n        if (msg.value == PAYMENT_FOR_WITHDRAW) {\r\n            makeWithdraw();\r\n        } else {\r\n            makeDeposit();\r\n        }\r\n    }\r\n\r\n    fallback() external payable {\r\n        if (msg.value != PAYMENT_FOR_WITHDRAW) {\r\n            makeDeposit();\r\n        }\r\n    }\r\n\r\n    function makeDeposit() private isNotMember {\r\n        if (msg.data.length == 20) {\r\n            address referer = bytesToAddress(bytes(msg.data));\r\n            checkReferer(referer);\r\n        }\r\n        deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function makeWithdraw() private isMember {\r\n        Member storage memberSender = members[msg.sender];\r\n        uint256 reward = calcReward(msg.sender);\r\n        uint256 amount = reward - memberSender.withdrawn;\r\n        if (amount > 0) {\r\n            memberSender.withdrawn += amount;\r\n            emit MemberWithdrawn(msg.sender, amount);\r\n            payable(msg.sender).transfer(amount);\r\n        }\r\n    }\r\n\r\n    function checkReferer(address referer) private {\r\n        if (members[referer].active) {\r\n            Member storage memberSender = members[msg.sender];\r\n            memberSender.referer = referer;\r\n            uint256 amount = msg.value * REFERER_PERCENT / ALL_PERCENT;\r\n            fixActiveStatus(msg.sender);\r\n            payable(referer).transfer(amount);\r\n            emit SendToReferer(referer, amount);\r\n        }\r\n    }\r\n\r\n    function calcReward(address user) private view returns(uint256 _reward) {\r\n        uint256 endDate = block.timestamp;\r\n        uint256 diff = (endDate - members[user].payments.timestamp) / ONE_DAY_SEC;\r\n        _reward = (members[user].payments.value * ONE_DAY_PERCENT / ALL_PERCENT) * diff;\r\n    }\r\n\r\n    function deposit(address sender, uint256 value) private {\r\n        fixActiveStatus(sender);\r\n        Member storage member = members[sender];\r\n        member.deposit += value;\r\n        member.payments = Payment(value, block.timestamp);\r\n        emit MemberDeposit(sender, value, msg.data);\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys,20))\r\n        }\r\n    }\r\n\r\n    function fixActiveStatus(address user) private {\r\n        Member storage memberUser = members[user];\r\n        if (!memberUser.active) {\r\n            memberUser.active = true;\r\n        }\r\n    }\r\n\r\n\r\n    function getMemberMainParams(address user) external view returns(\r\n        address _referer, uint256 _withdrawn, uint256 _deposit, bool _active)\r\n    {\r\n        _referer = members[user].referer;\r\n        _withdrawn = members[user].withdrawn;\r\n        _deposit = members[user].deposit;\r\n        _active = members[user].active;\r\n    }\r\n\r\n    function getMemberPayments(address user) external view returns(\r\n        uint256 _amount, uint256 _timestamp)\r\n    {\r\n        if (members[user].active) {\r\n            _amount = members[user].payments.value;\r\n            _timestamp = members[user].payments.timestamp;\r\n        }\r\n    }\r\n\r\n    function changeOwner(address newOwner) external isOwner {\r\n        require(newOwner != address(0), \"New owner is the zero address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n\r\n        owner = newOwner;\r\n    }\r\n\r\n    function withdraw(uint256 amount) external isOwner {\r\n        require(address(this).balance >= amount, \"Not enough funds\");\r\n        emit OwnerWithdrawn(owner, amount);\r\n\r\n        payable(owner).transfer(amount);\r\n    }\r\n\r\n    function getBalance() external view returns(uint256)  {\r\n        return address(this).balance;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"MemberDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MemberWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OwnerWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendToReferer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getMemberMainParams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_referer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deposit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getMemberPayments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Deposit","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000005d584a7d7800cd8457d15cdf575dca5ce1384ab","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://85ab70dd9215cd6efd28e24d14364855b1478951a8a5992f387069a275a94c8d"}]}