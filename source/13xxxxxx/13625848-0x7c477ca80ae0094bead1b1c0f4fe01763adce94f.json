{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary C {\r\n  function add(uint256 a, uint256 b) pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract SuperSimple202Demonstration {\r\n    \r\n    // two functions\r\n    // one which returns false because we swap around the parameters\r\n    // the other which returns true, since we do not apply SuperSimple202Demonstration\r\n    \r\n    \r\n    // this one returns false, as in reality, 2, 1 is passed to executeAndReturnResult\r\n    // it works something like: /*startu202e....../*end*/u202d\r\n    function With202E() public pure returns (bool) {\r\n        return executeAndReturnResult(/*start‮‮‮‮/*dne*/ 2,1 /*‭\r\n                  /*additional comment here to escape comment block, not having this will comment the rest of the code*/);\r\n    }\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n    // this one returns true per normal\r\n    function Without202E() public pure returns (bool) {\r\n        return executeAndReturnResult(1, 2);\r\n    }\r\n    \r\n    function executeAndReturnResult(int p, int n) internal pure returns (bool) {\r\n        if (p == 1 && n == 2) {\r\n            return true;\r\n        } else if (p == 2 && n == 1) {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    function a() constant returns (uint256) {\r\n        uint256 x = 50;\r\n        return C.add(50, x);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"a\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Without202E\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"With202E\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"SuperSimple202Demonstration","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"C:0f12c03321772b86029384cd990902f84cf663bc","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://6a9590ed83f854dbdc29a215c83c0058cf3dd9a87f45074f941ffe0632743b69"}]}