{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IUniswapV2Router01.sol\r\n\r\npragma solidity >=0.6.6;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: contracts/interfaces/IUniswapV2Router02.sol\r\n\r\npragma solidity >=0.6.6;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: contracts/BuyBack.sol\r\n\r\npragma solidity ^0.7.2;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @title IERC20Extended \r\n* @notice just ERC20 but with decimals()\r\n */\r\n interface IERC20Extended is IERC20{\r\n     function decimals() external view returns(uint256);\r\n}\r\n\r\n/**\r\n* @title BuyBack: for Governor Dao\r\n* @author Carson Case carsonpcase@gmail.com\r\n */\r\ncontract BuyBack is Ownable{\r\n\r\n    uint48 internal constant PERCENT_PRECISION = 10**12;\r\n    uint48 internal constant ONE_HUNDRED_PERCENT = 100 * PERCENT_PRECISION;\r\n    //FundPlan percent variables (uint48 for packing gas optimization)\r\n    uint48 public gasReimbursement;\r\n    uint48 public forGovVault;\r\n    uint48 public forLPool;\r\n    uint48 public forTreasury;\r\n    uint256 public minGDAO = 0;\r\n\r\n    //config variables\r\n    uint256 public sweepMax;      //if zero. No limit\r\n    uint256 public sweepMin;        //^^^\r\n    uint256 public sweepTimeLock;\r\n    uint256 public lastSweep;\r\n\r\n    address public WETH;\r\n    address payable public TREASURY;\r\n    address public GOV_VAULT;\r\n    address public immutable GDAO;\r\n    address[] public tokensReceived;    //ERC20s that have ever been received\r\n\r\n    IUniswapV2Router02 immutable uniswapRouter; \r\n\r\n    /**\r\n    * @param _treasury contract\r\n    * @param _gov_vault contract\r\n    * @param _uniswapV2Router02 contract\r\n    * @param _GDAO token contract\r\n     */\r\n    constructor(\r\n        address payable _treasury,\r\n        address _gov_vault, \r\n        address _uniswapV2Router02, \r\n        address _GDAO) \r\n        Ownable()\r\n        {\r\n        TREASURY = _treasury;\r\n        GOV_VAULT = _gov_vault;\r\n        uniswapRouter = IUniswapV2Router02(_uniswapV2Router02);\r\n        GDAO = _GDAO;\r\n        WETH = IUniswapV2Router02(_uniswapV2Router02).WETH();\r\n\r\n        gasReimbursement = 25 * (PERCENT_PRECISION/10);\r\n        forGovVault = 50 * PERCENT_PRECISION;\r\n        forLPool = 40 * PERCENT_PRECISION;\r\n        forTreasury = 75 * (PERCENT_PRECISION/10);\r\n\r\n        sweepTimeLock = 259200;\r\n        lastSweep = 1638064184;\r\n    }\r\n\r\n    event Receive(address sender, uint amount);\r\n    event ReceiveERC20(address token, address sender, uint amount);\r\n    \r\n    /**\r\n    * @dev receive function for uniswap to send eth to\r\n     */\r\n    receive() external payable{\r\n        emit Receive(msg.sender, msg.value);\r\n    }\r\n    \r\n    /**\r\n    * @notice functon to receive a token. Use this instead of sending directly\r\n    * @dev must approve the token before transfer\r\n    * @param _coin is the address of the ERC20 to send\r\n    * @param _amm is the ammount of the token to send\r\n     */\r\n    function receiveERC20(address _coin, uint256 _amm) external{\r\n        tokensReceived.push(_coin);\r\n        IERC20(_coin).transferFrom(msg.sender, address(this), _amm);\r\n        emit ReceiveERC20(_coin, msg.sender, _amm);\r\n    }\r\n\r\n    /**\r\n    * @notice owners function to update the percent rewards\r\n    * @dev notice, the rewards must sum to 100%. denominated as 10^14\r\n     */\r\n    function updateFundPlan(uint48 _gasReimbursement, uint48 _forGovVault, uint48 _forLPool, uint48 _forTreasury) public onlyOwner {\r\n        require((_forGovVault + _forLPool + _forTreasury + _gasReimbursement) == \r\n        ONE_HUNDRED_PERCENT, \r\n        \"All inputs must sum to 10^14 (100%)\"\r\n        );\r\n        gasReimbursement = _gasReimbursement;\r\n        forGovVault = _forGovVault;\r\n        forLPool = _forLPool;\r\n        forTreasury = _forTreasury;\r\n    }\r\n\r\n    function updateConfig(uint256 _min, uint256 _max, uint256 _timelock) external onlyOwner{\r\n        sweepMin = _min;\r\n        sweepMax = _max;\r\n        sweepTimeLock = _timelock;\r\n    }\r\n\r\n    /// @dev can update treasury as there are migration plans for it in the future\r\n    function updateTreasury(address payable _new) external onlyOwner{\r\n        TREASURY = _new;\r\n    }\r\n\r\n    /// @dev can update treasury as there are migration plans for it in the future\r\n    function updateVault(address payable _new) external onlyOwner{\r\n        GOV_VAULT = _new;\r\n    }\r\n\r\n    /// @notice is called automatically for sweepAll/sweepMany but not if you do an individual sweep\r\n    function distributeGDAO() external {\r\n        _distributeGDAO();\r\n    }\r\n\r\n    /**\r\n    * @notice function sweeps all tokens ever deposited to contract\r\n    */\r\n    function sweepAll() external {\r\n        sweepMany(tokensReceived);\r\n    }\r\n\r\n    function emergencyWithdrawal(address _coin, address _receiver) external onlyOwner{\r\n        _emergencyWithdrawl(_coin, _receiver);\r\n    }\r\n\r\n    /// NOTE may be needed depending on price of GDAO. As ETH may pile up in the contract when adding liquidity \r\n    function emergencyWithdrawalETH(address _receiver) external onlyOwner{\r\n        payable(_receiver).transfer(address(this).balance);\r\n    }\r\n\r\n    function emergencyWithdrawalAll(address _receiver) external onlyOwner{\r\n             for(uint i = 0; i < tokensReceived.length; i++){\r\n            _emergencyWithdrawl(tokensReceived[i], _receiver);\r\n        }\r\n  \r\n    }\r\n\r\n    function defeatMEV(uint256 minGDAOtoReceive) external onlyOwner{\r\n        minGDAO = minGDAOtoReceive;\r\n    }\r\n\r\n    /**\r\n    * @notice sweeps any ammount of tokens\r\n     */\r\n    function sweepMany(address[] memory _erc20sToSweep) public {\r\n        for(uint i = 0; i < _erc20sToSweep.length; i++){\r\n            sweepERC20(_erc20sToSweep[i]);\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * @notice sweeps a token according to the percents defined through uniswap\r\n    * @return false if there's a 0 balance of that token\r\n     */\r\n    function sweepERC20(address _erc20ToSweep) public payable returns(bool){\r\n        uint256 totalBal = IERC20(_erc20ToSweep).balanceOf(address(this));\r\n        if(totalBal == 0 || _erc20ToSweep == GDAO) {return false;}\r\n\r\n        address[] memory path;\r\n        path = new address[](2);\r\n        path[0] = address(_erc20ToSweep);\r\n        path[1] = address(WETH);\r\n        \r\n        IERC20(_erc20ToSweep).approve(address(uniswapRouter),totalBal);\r\n        uniswapRouter.swapExactTokensForETH(totalBal, 0, path, address(this), block.timestamp + 30);\r\n        return true;\r\n    }\r\n\r\n    function sweepGDAO(uint256 _amm) external returns(bool){\r\n        require(address(this).balance >= _amm, \"_amm is larger than the contract eth balance\");\r\n        require(lastSweep + sweepTimeLock <= block.timestamp, \"Sweep is locked for a period of time\");\r\n        if(_amm == 0){return false;}\r\n        require(_isSweepLimit(_amm),\"Does not fit within sweep bounds\");\r\n\r\n        //Send out some eth to caller for gas reimbursement\r\n        uint256 gasETH = _applyPercent(_amm, gasReimbursement);\r\n        payable(tx.origin).transfer(gasETH);\r\n\r\n        //Send out treasury ETH\r\n        uint256 treasuryETH = _applyPercent(_amm, forTreasury);\r\n        TREASURY.transfer(treasuryETH);\r\n\r\n        // Half of the allocated tokens for LP are to be swapped for GDAO\r\n        uint256 toSwap = _applyPercent(_amm, forLPool)/2;\r\n        // instead of calculating percent do subtraction here to avoid rounding errors\r\n        toSwap = (_amm - toSwap - gasETH - treasuryETH);\r\n\r\n        require(toSwap > 0, \"Balance is not large enough to swap and provide liquidity/gas reimbursement\");\r\n        address[] memory path;\r\n        path = new address[](2);\r\n        path[0] = address(WETH);\r\n        path[1] = address(GDAO);\r\n\r\n        uniswapRouter.swapExactETHForTokens\r\n        {value: toSwap}\r\n        (minGDAO, path, address(this), block.timestamp + 30);\r\n        \r\n        _distributeGDAO();\r\n        \r\n        lastSweep = block.timestamp;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice stolen from Stack Overflow. A way to look up a token's price in eth */\r\n    function getTokenPrice(address pairAddress, uint amount) internal view returns(uint){\r\n        IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\r\n        IERC20Extended token1 = IERC20Extended(pair.token1());\r\n        (uint Res0, uint Res1,) = pair.getReserves();\r\n\r\n        // decimals\r\n        uint res0 = Res0*(10**token1.decimals());\r\n        return((amount*res0)/Res1); // return amount of token0 needed to buy token1\r\n    }\r\n\r\n    function _distributeGDAO() internal{\r\n\r\n        //Add the GDAO to gov Vault\r\n        uint256 GDAOBal = IERC20(GDAO).balanceOf(address(this));\r\n        //So what's going on here. The amount of GDAO to go to the vault is actually NOT it's percentage. Because that is\r\n        //percent of ETH not GDAO. Sooo what is going on here, is we are finding the proportion of forGovVault out of \r\n        //the other GDAO percentages (forLPool). Instead of dividing by 100 we are dividing by the sum of all gdao percents\r\n        //so GDAO is split in the same proportion as if we were measuring it in ETH.\r\n        //Also it's worth noting that forLPool is divided by 2 because half of it's percent deals with ETH and the other half GDAO\r\n        _sendGDAO(GOV_VAULT, (GDAOBal * forGovVault) / (forGovVault + (forLPool/2)));\r\n\r\n        // Add LP with remaining GDAO\r\n        GDAOBal = IERC20(GDAO).balanceOf(address(this));\r\n        uint256 ETHBal = address(this).balance;\r\n        _addLP(ETHBal, GDAOBal);\r\n\r\n    }\r\n\r\n\r\n    /// @dev helper function to apply percents\r\n    function _applyPercent(uint256 _num, uint48 _percent) internal pure returns(uint256){\r\n        return ((_num * _percent) / ONE_HUNDRED_PERCENT);\r\n    }\r\n\r\n    function _isSweepLimit(uint256 _amm) internal view returns(bool){\r\n        if(sweepMax == 0){\r\n            if(sweepMin == 0){\r\n                return true;\r\n            }\r\n            return _amm >= sweepMin;\r\n        }\r\n        if(sweepMin == 0){\r\n            return _amm <= sweepMax;\r\n        }\r\n        return(_amm <= sweepMax && _amm >= sweepMin);\r\n    }\r\n\r\n    /**\r\n    * @dev helper slightly cleans up sending GDAO \r\n    */\r\n    function _sendGDAO(address _who, uint256 _amm) private{\r\n        IERC20(GDAO).transfer(_who,_amm);\r\n    }\r\n\r\n    function _emergencyWithdrawl(address _coin, address _receiver) internal onlyOwner{\r\n        IERC20 token = IERC20(_coin);\r\n        token.transfer(_receiver, token.balanceOf(address(this)));\r\n    }\r\n\r\n    /// @dev adds LP to uniswap with WETH and GDAO\r\n    function _addLP(uint256 _ETH, uint256 _GDAO) private{\r\n        IERC20(GDAO).approve(address(uniswapRouter),_GDAO);\r\n        uniswapRouter.addLiquidityETH{value:_ETH}(GDAO, _GDAO, 0, 0, TREASURY, block.timestamp + 30);\r\n    }\r\n\r\n\r\n \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gov_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2Router02\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_GDAO\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Receive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceiveERC20\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GDAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOV_VAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TREASURY\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minGDAOtoReceive\",\"type\":\"uint256\"}],\"name\":\"defeatMEV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeGDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawalAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawalETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forGovVault\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forLPool\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forTreasury\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasReimbursement\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSweep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minGDAO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amm\",\"type\":\"uint256\"}],\"name\":\"receiveERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20ToSweep\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amm\",\"type\":\"uint256\"}],\"name\":\"sweepGDAO\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_erc20sToSweep\",\"type\":\"address[]\"}],\"name\":\"sweepMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepTimeLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensReceived\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timelock\",\"type\":\"uint256\"}],\"name\":\"updateConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"_gasReimbursement\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"_forGovVault\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"_forLPool\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"_forTreasury\",\"type\":\"uint48\"}],\"name\":\"updateFundPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"updateVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BuyBack","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000026e76280f0c4477726b8a1dd9ac4996c5c7badf8000000000000000000000000306978da6ebee060375f35418744f85c1cb6b3530000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000515d7e9d75e2b76db60f8a051cd890eba23286bc","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2d5400bb73d934318b870225e2faadcdec03d263906f8139fcb4f4643a9173a9"}]}