{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.6.8 https://hardhat.org\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol@v3.4.1-solc-0.7-2\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/Initializable.sol@v3.4.1-solc-0.7-2\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity >=0.4.24 <0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        return !AddressUpgradeable.isContract(address(this));\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol@v3.4.1-solc-0.7-2\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol@v3.4.1-solc-0.7-2\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol@v3.4.1-solc-0.7-2\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol@v3.4.1-solc-0.7-2\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMathUpgradeable {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol@v3.4.1-solc-0.7-2\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20Upgradeable {\r\n    using SafeMathUpgradeable for uint256;\r\n    using AddressUpgradeable for address;\r\n\r\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/Math.sol@v3.4.1-solc-0.7-2\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.4.1-solc-0.7-2\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IDistributor.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IDistributor {\r\n  /// @dev distribute ALD reward to Aladdin Staking contract.\r\n  function distribute() external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IStaking.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IStaking {\r\n  function stake(uint256 _amount) external;\r\n\r\n  function stakeFor(address _recipient, uint256 _amount) external;\r\n\r\n  function unstake(address _recipient, uint256 _amount) external;\r\n\r\n  function unstakeAll(address _recipient) external;\r\n\r\n  function bondFor(address _recipient, uint256 _amount) external;\r\n\r\n  function rewardBond(address _vault, uint256 _amount) external;\r\n\r\n  function rebase() external;\r\n\r\n  function redeem(address _recipient, bool _withdraw) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.4.1-solc-0.7-2\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IXALD.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IXALD is IERC20 {\r\n  function stake(address _recipient, uint256 _aldAmount) external;\r\n\r\n  function unstake(address _account, uint256 _xALDAmount) external;\r\n\r\n  function rebase(uint256 epoch, uint256 profit) external;\r\n\r\n  function getSharesByALD(uint256 _aldAmount) external view returns (uint256);\r\n\r\n  function getALDByShares(uint256 _sharesAmount) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IWXALD.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IWXALD {\r\n  function wrap(uint256 _xALDAmount) external returns (uint256);\r\n\r\n  function unwrap(uint256 _wxALDAmount) external returns (uint256);\r\n\r\n  function wrappedXALDToXALD(uint256 _wxALDAmount) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IRewardBondDepositor.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IRewardBondDepositor {\r\n  function currentEpoch()\r\n    external\r\n    view\r\n    returns (\r\n      uint64 epochNumber,\r\n      uint64 startBlock,\r\n      uint64 nextBlock,\r\n      uint64 epochLength\r\n    );\r\n\r\n  function rewardShares(uint256 _epoch, address _vault) external view returns (uint256);\r\n\r\n  function getVaultsFromAccount(address _user) external view returns (address[] memory);\r\n\r\n  function getAccountRewardShareSince(\r\n    uint256 _epoch,\r\n    address _user,\r\n    address _vault\r\n  ) external view returns (uint256[] memory);\r\n\r\n  function bond(address _vault) external;\r\n\r\n  function rebase() external;\r\n\r\n  function notifyRewards(address _user, uint256[] memory _amounts) external;\r\n}\r\n\r\n\r\n// File contracts/stake/Staking.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Staking is OwnableUpgradeable, IStaking {\r\n  using SafeMath for uint256;\r\n  using SafeERC20Upgradeable for IERC20Upgradeable;\r\n\r\n  event Bond(address indexed recipient, uint256 aldAmount, uint256 wxALDAmount);\r\n  event RewardBond(address indexed vault, uint256 aldAmount, uint256 wxALDAmount);\r\n  event Stake(address indexed caller, address indexed recipient, uint256 amount);\r\n  event Unstake(address indexed caller, address indexed recipient, uint256 amount);\r\n  event Redeem(address indexed caller, address indexed recipient, uint256 amount);\r\n\r\n  struct UserLockedBalance {\r\n    // The amount of wxALD locked.\r\n    uint192 amount;\r\n    // The block number when the lock starts.\r\n    uint32 lockedBlock;\r\n    // The block number when the lock ends.\r\n    uint32 unlockBlock;\r\n  }\r\n\r\n  struct RewardBondBalance {\r\n    // The block number when the lock starts.\r\n    uint32 lockedBlock;\r\n    // The block number when the lock ends.\r\n    uint32 unlockBlock;\r\n    // Mapping from vault address to the amount of wxALD locked.\r\n    mapping(address => uint256) amounts;\r\n  }\r\n\r\n  struct Checkpoint {\r\n    uint128 epochNumber;\r\n    uint128 blockNumber;\r\n  }\r\n\r\n  // The address of governor.\r\n  address public governor;\r\n\r\n  // The address of ALD token.\r\n  address public ALD;\r\n  // The address of xALD token.\r\n  address public xALD;\r\n  // The address of wxALD token.\r\n  address public wxALD;\r\n  // The address of direct bond contract.\r\n  address public directBondDepositor;\r\n  // The address of vault reward bond contract.\r\n  address public rewardBondDepositor;\r\n\r\n  // The address of distributor.\r\n  address public distributor;\r\n\r\n  // Whether staking is paused.\r\n  bool public paused;\r\n\r\n  // Whether to enable whitelist mode.\r\n  bool public enableWhitelist;\r\n  mapping(address => bool) public isWhitelist;\r\n\r\n  // Whether an address is in black list\r\n  mapping(address => bool) public blacklist;\r\n\r\n  // The default locking period in epoch.\r\n  uint256 public defaultLockingPeriod;\r\n  // The bond locking period in epoch.\r\n  uint256 public bondLockingPeriod;\r\n  // Mapping from user address to locking period in epoch.\r\n  mapping(address => uint256) public lockingPeriod;\r\n\r\n  // Mapping from user address to staked ald balances.\r\n  mapping(address => UserLockedBalance[]) private userStakedLocks;\r\n  // Mapping from user address to asset bond ald balances.\r\n  mapping(address => UserLockedBalance[]) private userDirectBondLocks;\r\n  // Mapping from user address to reward bond ald balances.\r\n  mapping(address => UserLockedBalance[]) private userRewardBondLocks;\r\n\r\n  // The list of reward bond ald locks.\r\n  // 65536 epoch is about 170 year, assuming 1 epoch = 1 day.\r\n  RewardBondBalance[65536] public rewardBondLocks;\r\n\r\n  // Mapping from user address to lastest interacted epoch/block number.\r\n  mapping(address => Checkpoint) private checkpoint;\r\n\r\n  modifier notPaused() {\r\n    require(!paused, \"Staking: paused\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyGovernor() {\r\n    require(msg.sender == governor || msg.sender == owner(), \"Treasury: only governor\");\r\n    _;\r\n  }\r\n\r\n  /// @param _ALD The address of ALD token.\r\n  /// @param _xALD The address of xALD token.\r\n  /// @param _wxALD The address of wxALD token.\r\n  /// @param _rewardBondDepositor The address of reward bond contract.\r\n  function initialize(\r\n    address _ALD,\r\n    address _xALD,\r\n    address _wxALD,\r\n    address _rewardBondDepositor\r\n  ) external initializer {\r\n    OwnableUpgradeable.__Ownable_init();\r\n\r\n    require(_ALD != address(0), \"Treasury: zero address\");\r\n    require(_xALD != address(0), \"Treasury: zero address\");\r\n    require(_wxALD != address(0), \"Treasury: zero address\");\r\n    require(_rewardBondDepositor != address(0), \"Treasury: zero address\");\r\n\r\n    ALD = _ALD;\r\n    xALD = _xALD;\r\n    wxALD = _wxALD;\r\n\r\n    IERC20Upgradeable(_xALD).safeApprove(_wxALD, uint256(-1));\r\n\r\n    paused = true;\r\n    enableWhitelist = true;\r\n\r\n    defaultLockingPeriod = 90;\r\n    bondLockingPeriod = 5;\r\n\r\n    rewardBondDepositor = _rewardBondDepositor;\r\n  }\r\n\r\n  /********************************** View Functions **********************************/\r\n\r\n  /// @dev return the full vested block (staking and bond) for given user\r\n  /// @param _user The address of user;\r\n  function fullyVestedBlock(address _user) external view returns (uint256, uint256) {\r\n    uint256 stakeVestedBlock;\r\n    {\r\n      UserLockedBalance[] storage _locks = userStakedLocks[_user];\r\n      for (uint256 i = 0; i < _locks.length; i++) {\r\n        UserLockedBalance storage _lock = _locks[i];\r\n        if (_lock.amount > 0) {\r\n          stakeVestedBlock = Math.max(stakeVestedBlock, _lock.unlockBlock);\r\n        }\r\n      }\r\n    }\r\n    uint256 bondVestedBlock;\r\n    {\r\n      UserLockedBalance[] storage _locks = userDirectBondLocks[_user];\r\n      for (uint256 i = 0; i < _locks.length; i++) {\r\n        UserLockedBalance storage _lock = _locks[i];\r\n        if (_lock.amount > 0) {\r\n          bondVestedBlock = Math.max(bondVestedBlock, _lock.unlockBlock);\r\n        }\r\n      }\r\n    }\r\n    return (stakeVestedBlock, bondVestedBlock);\r\n  }\r\n\r\n  /// @dev return the pending xALD amount including locked and unlocked.\r\n  /// @param _user The address of user.\r\n  function pendingXALD(address _user) external view returns (uint256) {\r\n    // be carefull when no checkpoint for _user\r\n    uint256 _lastBlock = checkpoint[_user].blockNumber;\r\n    uint256 _lastEpoch = checkpoint[_user].epochNumber;\r\n\r\n    uint256 pendingAmount = _getPendingWithList(userStakedLocks[_user], _lastBlock);\r\n    pendingAmount = pendingAmount.add(_getPendingWithList(userDirectBondLocks[_user], _lastBlock));\r\n    pendingAmount = pendingAmount.add(_getPendingWithList(userRewardBondLocks[_user], _lastBlock));\r\n    pendingAmount = pendingAmount.add(_getPendingRewardBond(_user, _lastEpoch, _lastBlock));\r\n\r\n    return IWXALD(wxALD).wrappedXALDToXALD(pendingAmount);\r\n  }\r\n\r\n  /// @dev return the pending xALD amount from user staking, including locked and unlocked.\r\n  /// @param _user The address of user.\r\n  function pendingStakedXALD(address _user) external view returns (uint256) {\r\n    // be carefull when no checkpoint for _user\r\n    uint256 _lastBlock = checkpoint[_user].blockNumber;\r\n\r\n    uint256 pendingAmount = _getPendingWithList(userStakedLocks[_user], _lastBlock);\r\n\r\n    return IWXALD(wxALD).wrappedXALDToXALD(pendingAmount);\r\n  }\r\n\r\n  /// @dev return the pending xALD amount from user bond, including locked and unlocked.\r\n  /// @param _user The address of user.\r\n  function pendingBondXALD(address _user) external view returns (uint256) {\r\n    // be carefull when no checkpoint for _user\r\n    uint256 _lastBlock = checkpoint[_user].blockNumber;\r\n\r\n    uint256 pendingAmount = _getPendingWithList(userDirectBondLocks[_user], _lastBlock);\r\n\r\n    return IWXALD(wxALD).wrappedXALDToXALD(pendingAmount);\r\n  }\r\n\r\n  /// @dev return the pending xALD amount from user vault reward, including locked and unlocked.\r\n  /// @param _user The address of user.\r\n  /// @param _vault The address of vault.\r\n  function pendingXALDByVault(address _user, address _vault) external view returns (uint256) {\r\n    // be carefull when no checkpoint for _user\r\n    uint256 _lastBlock = checkpoint[_user].blockNumber;\r\n    uint256 _startEpoch = _findPossibleStartEpoch(_user, _lastBlock);\r\n\r\n    uint256 pendingAmount = _getPendingRewardBondByVault(_user, _vault, _startEpoch, _lastBlock);\r\n\r\n    return IWXALD(wxALD).wrappedXALDToXALD(pendingAmount);\r\n  }\r\n\r\n  /// @dev return the unlocked xALD amount.\r\n  /// @param _user The address of user.\r\n  function unlockedXALD(address _user) external view returns (uint256) {\r\n    // be carefull when no checkpoint for _user\r\n    uint256 _lastBlock = checkpoint[_user].blockNumber;\r\n    uint256 _lastEpoch = checkpoint[_user].epochNumber;\r\n\r\n    uint256 unlockedAmount = _getRedeemableWithList(userStakedLocks[_user], _lastBlock);\r\n    unlockedAmount = unlockedAmount.add(_getRedeemableWithList(userDirectBondLocks[_user], _lastBlock));\r\n    unlockedAmount = unlockedAmount.add(_getRedeemableWithList(userRewardBondLocks[_user], _lastBlock));\r\n    unlockedAmount = unlockedAmount.add(_getRedeemableRewardBond(_user, _lastEpoch, _lastBlock));\r\n\r\n    return IWXALD(wxALD).wrappedXALDToXALD(unlockedAmount);\r\n  }\r\n\r\n  /// @dev return the unlocked xALD amount from user staking.\r\n  /// @param _user The address of user.\r\n  function unlockedStakedXALD(address _user) external view returns (uint256) {\r\n    // be carefull when no checkpoint for _user\r\n    uint256 _lastBlock = checkpoint[_user].blockNumber;\r\n\r\n    uint256 unlockedAmount = _getRedeemableWithList(userStakedLocks[_user], _lastBlock);\r\n\r\n    return IWXALD(wxALD).wrappedXALDToXALD(unlockedAmount);\r\n  }\r\n\r\n  /// @dev return the unlocked xALD amount from user bond.\r\n  /// @param _user The address of user.\r\n  function unlockedBondXALD(address _user) external view returns (uint256) {\r\n    // be carefull when no checkpoint for _user\r\n    uint256 _lastBlock = checkpoint[_user].blockNumber;\r\n\r\n    uint256 unlockedAmount = _getRedeemableWithList(userDirectBondLocks[_user], _lastBlock);\r\n\r\n    return IWXALD(wxALD).wrappedXALDToXALD(unlockedAmount);\r\n  }\r\n\r\n  /// @dev return the unlocked xALD amount from user vault reward.\r\n  /// @param _user The address of user.\r\n  /// @param _vault The address of vault.\r\n  function unlockedXALDByVault(address _user, address _vault) external view returns (uint256) {\r\n    // be carefull when no checkpoint for _user\r\n    uint256 _lastBlock = checkpoint[_user].blockNumber;\r\n    uint256 _startEpoch = _findPossibleStartEpoch(_user, _lastBlock);\r\n\r\n    uint256 pendingAmount = _getRedeemableRewardBondByVault(_user, _vault, _startEpoch, _lastBlock);\r\n\r\n    return IWXALD(wxALD).wrappedXALDToXALD(pendingAmount);\r\n  }\r\n\r\n  /********************************** Mutated Functions **********************************/\r\n\r\n  /// @dev stake all ALD for xALD.\r\n  function stakeAll() external notPaused {\r\n    if (enableWhitelist) {\r\n      require(isWhitelist[msg.sender], \"Staking: not whitelist\");\r\n    }\r\n\r\n    uint256 _amount = IERC20Upgradeable(ALD).balanceOf(msg.sender);\r\n    _amount = _transferAndWrap(msg.sender, _amount);\r\n    _stakeFor(msg.sender, _amount);\r\n  }\r\n\r\n  /// @dev stake ALD for xALD.\r\n  /// @param _amount The amount of ALD to stake.\r\n  function stake(uint256 _amount) external override notPaused {\r\n    if (enableWhitelist) {\r\n      require(isWhitelist[msg.sender], \"Staking: not whitelist\");\r\n    }\r\n\r\n    _amount = _transferAndWrap(msg.sender, _amount);\r\n    _stakeFor(msg.sender, _amount);\r\n  }\r\n\r\n  /// @dev stake ALD for others.\r\n  /// @param _recipient The address to receipt xALD.\r\n  /// @param _amount The amount of ALD to stake.\r\n  function stakeFor(address _recipient, uint256 _amount) external override notPaused {\r\n    if (enableWhitelist) {\r\n      require(isWhitelist[msg.sender], \"Staking: not whitelist\");\r\n    }\r\n\r\n    _amount = _transferAndWrap(msg.sender, _amount);\r\n    _stakeFor(_recipient, _amount);\r\n  }\r\n\r\n  /// @dev unstake xALD to ALD.\r\n  /// @param _recipient The address to receipt ALD.\r\n  /// @param _amount The amount of xALD to unstake.\r\n  function unstake(address _recipient, uint256 _amount) external override notPaused {\r\n    _unstake(_recipient, _amount);\r\n  }\r\n\r\n  /// @dev unstake all xALD to ALD.\r\n  /// @param _recipient The address to receipt ALD.\r\n  function unstakeAll(address _recipient) external override notPaused {\r\n    uint256 _amount = IXALD(xALD).balanceOf(msg.sender);\r\n    _unstake(_recipient, _amount);\r\n  }\r\n\r\n  /// @dev bond ALD from direct asset. only called by DirectBondDepositor contract.\r\n  /// @notice all bond on the same epoch are grouped at the expected start block of next epoch.\r\n  /// @param _recipient The address to receipt xALD.\r\n  /// @param _amount The amount of ALD to stake.\r\n  function bondFor(address _recipient, uint256 _amount) external override notPaused {\r\n    require(directBondDepositor == msg.sender, \"Staking: not approved\");\r\n    uint256 _wxALDAmount = _transferAndWrap(msg.sender, _amount);\r\n\r\n    // bond lock logic\r\n    (, , uint256 nextBlock, uint256 epochLength) = IRewardBondDepositor(rewardBondDepositor).currentEpoch();\r\n    UserLockedBalance[] storage _locks = userDirectBondLocks[_recipient];\r\n    uint256 length = _locks.length;\r\n\r\n    if (length == 0 || _locks[length - 1].lockedBlock != nextBlock) {\r\n      _locks.push(\r\n        UserLockedBalance({\r\n          amount: uint192(_wxALDAmount),\r\n          lockedBlock: uint32(nextBlock),\r\n          unlockBlock: uint32(nextBlock + epochLength * bondLockingPeriod)\r\n        })\r\n      );\r\n    } else {\r\n      _locks[length - 1].amount = uint192(uint256(_locks[length - 1].amount).add(_wxALDAmount));\r\n    }\r\n\r\n    emit Bond(_recipient, _amount, _wxALDAmount);\r\n  }\r\n\r\n  /// @dev bond ALD from vault reward. only called by RewardBondDepositor contract.\r\n  /// @notice all bond on the same epoch are grouped at the expected start block of next epoch.\r\n  /// @param _vault The address of vault.\r\n  /// @param _amount The amount of ALD to stake.\r\n  function rewardBond(address _vault, uint256 _amount) external override notPaused {\r\n    require(rewardBondDepositor == msg.sender, \"Staking: not approved\");\r\n    uint256 _wxALDAmount = _transferAndWrap(msg.sender, _amount);\r\n\r\n    (uint256 epochNumber, , uint256 nextBlock, uint256 epochLength) = IRewardBondDepositor(rewardBondDepositor)\r\n      .currentEpoch();\r\n    RewardBondBalance storage _lock = rewardBondLocks[epochNumber];\r\n\r\n    if (_lock.lockedBlock == 0) {\r\n      // first bond in current epoch\r\n      _lock.lockedBlock = uint32(nextBlock);\r\n      _lock.unlockBlock = uint32(nextBlock + epochLength * bondLockingPeriod);\r\n    }\r\n    _lock.amounts[_vault] = _lock.amounts[_vault].add(_wxALDAmount);\r\n\r\n    emit RewardBond(_vault, _amount, _wxALDAmount);\r\n  }\r\n\r\n  /// @dev mint ALD reward for stakers.\r\n  /// @notice assume it is called in `rebase()` from contract `rewardBondDepositor`.\r\n  function rebase() external override notPaused {\r\n    require(rewardBondDepositor == msg.sender, \"Staking: not approved\");\r\n\r\n    if (distributor != address(0)) {\r\n      uint256 _pool = IERC20Upgradeable(ALD).balanceOf(address(this));\r\n      IDistributor(distributor).distribute();\r\n      uint256 _distributed = IERC20Upgradeable(ALD).balanceOf(address(this)).sub(_pool);\r\n\r\n      (uint256 epochNumber, , , ) = IRewardBondDepositor(rewardBondDepositor).currentEpoch();\r\n      IXALD(xALD).rebase(epochNumber, _distributed);\r\n    }\r\n  }\r\n\r\n  /// @dev redeem unlocked xALD from contract.\r\n  /// @param _recipient The address to receive xALD/ALD.\r\n  /// @param __unstake Whether to unstake xALD to ALD.\r\n  function redeem(address _recipient, bool __unstake) external override notPaused {\r\n    require(!blacklist[msg.sender], \"Staking: blacklist\");\r\n\r\n    // be carefull when no checkpoint for msg.sender\r\n    uint256 _lastBlock = checkpoint[msg.sender].blockNumber;\r\n    uint256 _lastEpoch = checkpoint[msg.sender].epochNumber;\r\n    if (_lastBlock == block.number) {\r\n      return;\r\n    }\r\n\r\n    uint256 unlockedAmount = _redeemWithList(userStakedLocks[msg.sender], _lastBlock);\r\n    unlockedAmount = unlockedAmount.add(_redeemWithList(userDirectBondLocks[msg.sender], _lastBlock));\r\n    unlockedAmount = unlockedAmount.add(_redeemWithList(userRewardBondLocks[msg.sender], _lastBlock));\r\n    unlockedAmount = unlockedAmount.add(_redeemRewardBondLocks(msg.sender, _lastEpoch, _lastBlock));\r\n\r\n    // find the unlocked xALD amount\r\n    unlockedAmount = IWXALD(wxALD).unwrap(unlockedAmount);\r\n\r\n    emit Redeem(msg.sender, _recipient, unlockedAmount);\r\n\r\n    if (__unstake) {\r\n      IXALD(xALD).unstake(address(this), unlockedAmount);\r\n      IERC20Upgradeable(ALD).safeTransfer(_recipient, unlockedAmount);\r\n      emit Unstake(msg.sender, _recipient, unlockedAmount);\r\n    } else {\r\n      IERC20Upgradeable(xALD).safeTransfer(_recipient, unlockedAmount);\r\n    }\r\n\r\n    (uint256 epochNumber, , , ) = IRewardBondDepositor(rewardBondDepositor).currentEpoch();\r\n\r\n    checkpoint[msg.sender] = Checkpoint({ blockNumber: uint128(block.number), epochNumber: uint128(epochNumber) });\r\n  }\r\n\r\n  /********************************** Restricted Functions **********************************/\r\n\r\n  function updateGovernor(address _governor) external onlyOwner {\r\n    governor = _governor;\r\n  }\r\n\r\n  function updateDistributor(address _distributor) external onlyOwner {\r\n    distributor = _distributor;\r\n  }\r\n\r\n  function updatePaused(bool _paused) external onlyGovernor {\r\n    paused = _paused;\r\n  }\r\n\r\n  function updateEnableWhitelist(bool _enableWhitelist) external onlyOwner {\r\n    enableWhitelist = _enableWhitelist;\r\n  }\r\n\r\n  function updateWhitelist(address[] memory _users, bool status) external onlyOwner {\r\n    for (uint256 i = 0; i < _users.length; i++) {\r\n      isWhitelist[_users[i]] = status;\r\n    }\r\n  }\r\n\r\n  function updateBlacklist(address[] memory _users, bool status) external onlyOwner {\r\n    for (uint256 i = 0; i < _users.length; i++) {\r\n      blacklist[_users[i]] = status;\r\n    }\r\n  }\r\n\r\n  function updateBongLockingPeriod(uint256 _bondLockingPeriod) external onlyOwner {\r\n    bondLockingPeriod = _bondLockingPeriod;\r\n  }\r\n\r\n  function updateDefaultLockingPeriod(uint256 _defaultLockingPeriod) external onlyOwner {\r\n    defaultLockingPeriod = _defaultLockingPeriod;\r\n  }\r\n\r\n  function updateLockingPeriod(address[] memory _users, uint256[] memory _periods) external onlyOwner {\r\n    require(_users.length == _periods.length, \"Staking: length mismatch\");\r\n    for (uint256 i = 0; i < _users.length; i++) {\r\n      lockingPeriod[_users[i]] = _periods[i];\r\n    }\r\n  }\r\n\r\n  function updateDirectBondDepositor(address _directBondDepositor) external onlyOwner {\r\n    require(_directBondDepositor != address(0), \"Treasury: zero address\");\r\n\r\n    directBondDepositor = _directBondDepositor;\r\n  }\r\n\r\n  /********************************** Internal Functions **********************************/\r\n\r\n  /// @dev all stakes on the same epoch are grouped at the expected start block of next epoch.\r\n  /// @param _recipient The address of recipient who receives xALD.\r\n  /// @param _amount The amount of wxALD for the recipient.\r\n  function _stakeFor(address _recipient, uint256 _amount) internal {\r\n    (, , uint256 nextBlock, uint256 epochLength) = IRewardBondDepositor(rewardBondDepositor).currentEpoch();\r\n    UserLockedBalance[] storage _locks = userStakedLocks[_recipient];\r\n    uint256 length = _locks.length;\r\n\r\n    // stake lock logic\r\n    if (length == 0 || _locks[length - 1].lockedBlock != nextBlock) {\r\n      uint256 _period = _lockingPeriod(_recipient);\r\n\r\n      _locks.push(\r\n        UserLockedBalance({\r\n          amount: uint192(_amount),\r\n          lockedBlock: uint32(nextBlock),\r\n          unlockBlock: uint32(nextBlock + epochLength * _period)\r\n        })\r\n      );\r\n    } else {\r\n      _locks[length - 1].amount = uint192(uint256(_locks[length - 1].amount).add(_amount));\r\n    }\r\n\r\n    emit Stake(msg.sender, _recipient, _amount);\r\n  }\r\n\r\n  function _unstake(address _recipient, uint256 _amount) internal {\r\n    IXALD(xALD).unstake(msg.sender, _amount);\r\n    IERC20Upgradeable(ALD).safeTransfer(_recipient, _amount);\r\n\r\n    emit Unstake(msg.sender, _recipient, _amount);\r\n  }\r\n\r\n  function _lockingPeriod(address _user) internal view returns (uint256) {\r\n    uint256 _period = lockingPeriod[_user];\r\n    if (_period == 0) return defaultLockingPeriod;\r\n    else return _period;\r\n  }\r\n\r\n  function _transferAndWrap(address _sender, uint256 _amount) internal returns (uint256) {\r\n    IERC20Upgradeable(ALD).safeTransferFrom(_sender, address(this), _amount);\r\n    IXALD(xALD).stake(address(this), _amount);\r\n    return IWXALD(wxALD).wrap(_amount);\r\n  }\r\n\r\n  function _redeemRewardBondLocks(\r\n    address _user,\r\n    uint256 _lastEpoch,\r\n    uint256 _lastBlock\r\n  ) internal returns (uint256) {\r\n    uint256 unlockedAmount;\r\n\r\n    address[] memory _vaults = IRewardBondDepositor(rewardBondDepositor).getVaultsFromAccount(_user);\r\n    for (uint256 i = 0; i < _vaults.length; i++) {\r\n      unlockedAmount = unlockedAmount.add(_redeemRewardBondLocksByVault(_user, _vaults[i], _lastEpoch, _lastBlock));\r\n    }\r\n\r\n    return unlockedAmount;\r\n  }\r\n\r\n  function _redeemRewardBondLocksByVault(\r\n    address _user,\r\n    address _vault,\r\n    uint256 _startEpoch,\r\n    uint256 _lastBlock\r\n  ) internal returns (uint256) {\r\n    IRewardBondDepositor _depositor = IRewardBondDepositor(rewardBondDepositor); // gas saving\r\n    UserLockedBalance[] storage _locks = userRewardBondLocks[_user];\r\n    uint256 unlockedAmount;\r\n\r\n    uint256[] memory _shares = _depositor.getAccountRewardShareSince(_startEpoch, _user, _vault);\r\n    for (uint256 i = 0; i < _shares.length; i++) {\r\n      if (_shares[i] == 0) continue;\r\n\r\n      uint256 _epoch = _startEpoch + i;\r\n      uint256 _amount = rewardBondLocks[_epoch].amounts[_vault];\r\n      {\r\n        uint256 _totalShare = _depositor.rewardShares(_epoch, _vault);\r\n        _amount = _amount.mul(_shares[i]).div(_totalShare);\r\n      }\r\n      uint256 _lockedBlock = rewardBondLocks[_epoch].lockedBlock;\r\n      uint256 _unlockBlock = rewardBondLocks[_epoch].unlockBlock;\r\n\r\n      // [_lockedBlock, _unlockBlock), [_lastBlock + 1, block.number + 1)\r\n      uint256 _left = Math.max(_lockedBlock, _lastBlock + 1);\r\n      uint256 _right = Math.min(_unlockBlock, block.number + 1);\r\n      if (_left < _right) {\r\n        unlockedAmount = unlockedAmount.add(_amount.mul(_right - _left).div(_unlockBlock - _lockedBlock));\r\n      }\r\n      // some reward unlocked\r\n      if (_unlockBlock > block.number + 1) {\r\n        _locks.push(\r\n          UserLockedBalance({\r\n            amount: uint192(_amount),\r\n            lockedBlock: uint32(_lockedBlock),\r\n            unlockBlock: uint32(_unlockBlock)\r\n          })\r\n        );\r\n      }\r\n    }\r\n    return unlockedAmount;\r\n  }\r\n\r\n  function _redeemWithList(UserLockedBalance[] storage _locks, uint256 _lastBlock) internal returns (uint256) {\r\n    uint256 length = _locks.length;\r\n    uint256 unlockedAmount = 0;\r\n\r\n    for (uint256 i = 0; i < length; ) {\r\n      uint256 _amount = _locks[i].amount;\r\n      uint256 _startBlock = _locks[i].lockedBlock;\r\n      uint256 _endBlock = _locks[i].unlockBlock;\r\n      if (_amount > 0 && _startBlock <= block.number) {\r\n        // in this case: _endBlock must greater than _lastBlock\r\n        uint256 _left = Math.max(_lastBlock + 1, _startBlock);\r\n        uint256 _right = Math.min(block.number + 1, _endBlock);\r\n        unlockedAmount = unlockedAmount.add(_amount.mul(_right - _left).div(_endBlock - _startBlock));\r\n        if (_endBlock <= block.number) {\r\n          // since the order is not important\r\n          // use swap and delete to reduce the length of array\r\n          length -= 1;\r\n          _locks[i] = _locks[length];\r\n          delete _locks[length];\r\n          _locks.pop();\r\n        } else {\r\n          i++;\r\n        }\r\n      }\r\n    }\r\n\r\n    return unlockedAmount;\r\n  }\r\n\r\n  function _getRedeemableWithList(UserLockedBalance[] storage _locks, uint256 _lastBlock)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n  {\r\n    uint256 length = _locks.length;\r\n    uint256 unlockedAmount = 0;\r\n\r\n    for (uint256 i = 0; i < length; i++) {\r\n      uint256 _amount = _locks[i].amount;\r\n      uint256 _startBlock = _locks[i].lockedBlock;\r\n      uint256 _endBlock = _locks[i].unlockBlock;\r\n      if (_amount > 0 && _startBlock <= block.number) {\r\n        // in this case: _endBlock must greater than _lastBlock\r\n        uint256 _left = Math.max(_lastBlock + 1, _startBlock);\r\n        uint256 _right = Math.min(block.number + 1, _endBlock);\r\n        unlockedAmount = unlockedAmount.add(_amount.mul(_right - _left).div(_endBlock - _startBlock));\r\n      }\r\n    }\r\n\r\n    return unlockedAmount;\r\n  }\r\n\r\n  function _getPendingWithList(UserLockedBalance[] storage _locks, uint256 _lastBlock) internal view returns (uint256) {\r\n    uint256 length = _locks.length;\r\n    uint256 pendingAmount = 0;\r\n\r\n    for (uint256 i = 0; i < length; i++) {\r\n      uint256 _amount = _locks[i].amount;\r\n      uint256 _startBlock = _locks[i].lockedBlock;\r\n      uint256 _endBlock = _locks[i].unlockBlock;\r\n      // [_startBlock, _endBlock), [_lastBlock + 1, oo)\r\n      if (_amount > 0 && _endBlock > _lastBlock + 1) {\r\n        // in this case: _endBlock must greater than _lastBlock\r\n        uint256 _left = Math.max(_lastBlock + 1, _startBlock);\r\n        pendingAmount = pendingAmount.add(_amount.mul(_endBlock - _left).div(_endBlock - _startBlock));\r\n      }\r\n    }\r\n\r\n    return pendingAmount;\r\n  }\r\n\r\n  function _getRedeemableRewardBond(\r\n    address _user,\r\n    uint256 _lastEpoch,\r\n    uint256 _lastBlock\r\n  ) internal view returns (uint256) {\r\n    uint256 unlockedAmount;\r\n    address[] memory _vaults = IRewardBondDepositor(rewardBondDepositor).getVaultsFromAccount(_user);\r\n\r\n    for (uint256 i = 0; i < _vaults.length; i++) {\r\n      unlockedAmount = unlockedAmount.add(_getRedeemableRewardBondByVault(_user, _vaults[i], _lastEpoch, _lastBlock));\r\n    }\r\n\r\n    return unlockedAmount;\r\n  }\r\n\r\n  function _getPendingRewardBond(\r\n    address _user,\r\n    uint256 _lastEpoch,\r\n    uint256 _lastBlock\r\n  ) internal view returns (uint256) {\r\n    uint256 pendingAmount;\r\n    address[] memory _vaults = IRewardBondDepositor(rewardBondDepositor).getVaultsFromAccount(_user);\r\n\r\n    for (uint256 i = 0; i < _vaults.length; i++) {\r\n      pendingAmount = pendingAmount.add(_getPendingRewardBondByVault(_user, _vaults[i], _lastEpoch, _lastBlock));\r\n    }\r\n\r\n    return pendingAmount;\r\n  }\r\n\r\n  function _getRedeemableRewardBondByVault(\r\n    address _user,\r\n    address _vault,\r\n    uint256 _startEpoch,\r\n    uint256 _lastBlock\r\n  ) internal view returns (uint256) {\r\n    IRewardBondDepositor _depositor = IRewardBondDepositor(rewardBondDepositor); // gas saving\r\n    uint256 unlockedAmount;\r\n\r\n    uint256[] memory _shares = _depositor.getAccountRewardShareSince(_startEpoch, _user, _vault);\r\n    for (uint256 i = 0; i < _shares.length; i++) {\r\n      if (_shares[i] == 0) continue;\r\n\r\n      uint256 _epoch = _startEpoch + i;\r\n      uint256 _unlockBlock = rewardBondLocks[_epoch].unlockBlock;\r\n      if (_unlockBlock <= _lastBlock + 1) continue;\r\n\r\n      uint256 _amount = rewardBondLocks[_epoch].amounts[_vault];\r\n      uint256 _lockedBlock = rewardBondLocks[_epoch].lockedBlock;\r\n      {\r\n        uint256 _totalShare = _depositor.rewardShares(_epoch, _vault);\r\n        _amount = _amount.mul(_shares[i]).div(_totalShare);\r\n      }\r\n      // [_lockedBlock, _unlockBlock), [_lastBlock + 1, block.number + 1)\r\n      uint256 _left = Math.max(_lockedBlock, _lastBlock + 1);\r\n      uint256 _right = Math.min(_unlockBlock, block.number + 1);\r\n      if (_left < _right) {\r\n        unlockedAmount = unlockedAmount.add(_amount.mul(_right - _left).div(_unlockBlock - _lockedBlock));\r\n      }\r\n    }\r\n    return unlockedAmount;\r\n  }\r\n\r\n  function _getPendingRewardBondByVault(\r\n    address _user,\r\n    address _vault,\r\n    uint256 _startEpoch,\r\n    uint256 _lastBlock\r\n  ) internal view returns (uint256) {\r\n    IRewardBondDepositor _depositor = IRewardBondDepositor(rewardBondDepositor); // gas saving\r\n    uint256 pendingAmount;\r\n\r\n    uint256[] memory _shares = _depositor.getAccountRewardShareSince(_startEpoch, _user, _vault);\r\n    for (uint256 i = 0; i < _shares.length; i++) {\r\n      if (_shares[i] == 0) continue;\r\n\r\n      uint256 _epoch = _startEpoch + i;\r\n      uint256 _unlockBlock = rewardBondLocks[_epoch].unlockBlock;\r\n      if (_unlockBlock <= _lastBlock + 1) continue;\r\n\r\n      uint256 _amount = rewardBondLocks[_epoch].amounts[_vault];\r\n      uint256 _lockedBlock = rewardBondLocks[_epoch].lockedBlock;\r\n      {\r\n        uint256 _totalShare = _depositor.rewardShares(_epoch, _vault);\r\n        _amount = _amount.mul(_shares[i]).div(_totalShare);\r\n      }\r\n      // [_lockedBlock, _unlockBlock), [_lastBlock + 1, oo)\r\n      uint256 _left = Math.max(_lockedBlock, _lastBlock + 1);\r\n      if (_left < _unlockBlock) {\r\n        pendingAmount = pendingAmount.add(_amount.mul(_unlockBlock - _left).div(_unlockBlock - _lockedBlock));\r\n      }\r\n    }\r\n    return pendingAmount;\r\n  }\r\n\r\n  /// @dev Find the possible start epoch for current user to calculate pending/unlocked ALD for vault.\r\n  /// @param _user The address of user.\r\n  /// @param _lastBlock The last block user interacted with the contract.\r\n  function _findPossibleStartEpoch(address _user, uint256 _lastBlock) internal view returns (uint256) {\r\n    uint256 _minLockedBlock = _findEarlistRewardLockedBlock(_user);\r\n    uint256 _lastEpoch = checkpoint[_user].epochNumber;\r\n    if (_minLockedBlock == 0) {\r\n      // No locks available or all locked ALD are redeemed, in this case,\r\n      //  + _lastBlock = 0: user didn't interact with the contract, we should calculate from the first epoch\r\n      //  + _lastBlock != 0: user has interacted with the contract, we should calculate from the last epoch\r\n      if (_lastBlock == 0) return 0;\r\n      else return _lastEpoch;\r\n    } else {\r\n      // Locks available, we should find the epoch number by searching _minLockedBlock\r\n      return _findEpochByLockedBlock(_minLockedBlock, _lastEpoch);\r\n    }\r\n  }\r\n\r\n  /// @dev find the epoch whose lockedBlock is `_lockedBlock`.\r\n  /// @param _lockedBlock the epoch to find\r\n  /// @param _epochHint the hint for search the epoch\r\n  function _findEpochByLockedBlock(uint256 _lockedBlock, uint256 _epochHint) internal view returns (uint256) {\r\n    // usually at most `bondLockingPeriod` loop is enough.\r\n    while (_epochHint > 0) {\r\n      if (rewardBondLocks[_epochHint].lockedBlock == _lockedBlock) break;\r\n      _epochHint = _epochHint - 1;\r\n    }\r\n    return _epochHint;\r\n  }\r\n\r\n  /// @dev find the earlist reward locked block, which will be used to find possible start epoch\r\n  /// @param _user The address of user.\r\n  function _findEarlistRewardLockedBlock(address _user) internal view returns (uint256) {\r\n    UserLockedBalance[] storage _locks = userRewardBondLocks[_user];\r\n    uint256 length = _locks.length;\r\n    // no locks or all unlocked and redeemed\r\n    if (length == 0) return 0;\r\n\r\n    uint256 _minLockedBlock = _locks[0].lockedBlock;\r\n    for (uint256 i = 1; i < length; i++) {\r\n      uint256 _lockedBlock = _locks[i].lockedBlock;\r\n      if (_lockedBlock < _minLockedBlock) {\r\n        _minLockedBlock = _lockedBlock;\r\n      }\r\n    }\r\n    return _minLockedBlock;\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wxALDAmount\",\"type\":\"uint256\"}],\"name\":\"Bond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wxALDAmount\",\"type\":\"uint256\"}],\"name\":\"RewardBond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ALD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bondFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondLockingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultLockingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directBondDepositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"fullyVestedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ALD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xALD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wxALD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardBondDepositor\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingBondXALD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingStakedXALD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingXALD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"pendingXALDByVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"__unstake\",\"type\":\"bool\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rewardBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBondDepositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardBondLocks\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"lockedBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"unlockBlock\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"unlockedBondXALD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"unlockedStakedXALD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"unlockedXALD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"unlockedXALDByVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"unstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondLockingPeriod\",\"type\":\"uint256\"}],\"name\":\"updateBongLockingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultLockingPeriod\",\"type\":\"uint256\"}],\"name\":\"updateDefaultLockingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_directBondDepositor\",\"type\":\"address\"}],\"name\":\"updateDirectBondDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"updateDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enableWhitelist\",\"type\":\"bool\"}],\"name\":\"updateEnableWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"updateGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_periods\",\"type\":\"uint256[]\"}],\"name\":\"updateLockingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"updatePaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wxALD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xALD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Staking","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6acfa1b724924df5121676759249659c49460ece6e0af7fcf9b9deabb2178f00"}]}