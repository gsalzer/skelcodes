{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/HowlStore.sol\r\n\r\n\r\npragma solidity ^0.8.2;\r\n\r\n\r\ninterface IHowl {\r\n    function equipProperties(\r\n        address _caller,\r\n        uint256 _tokenId,\r\n        uint16[8] calldata _w\r\n    ) external;\r\n}\r\n\r\ninterface ISoul {\r\n    function mint(address _address, uint256 _amount) external;\r\n\r\n    function collectAndBurn(address _address, uint256 _amount) external;\r\n}\r\n\r\ncontract HowlStore is Ownable {\r\n    constructor(address _howlContractAddress, address _soulContractAddress)\r\n        Ownable()\r\n    {\r\n        howlContractAddress = _howlContractAddress;\r\n        soulContractAddress = _soulContractAddress;\r\n    }\r\n\r\n    address public howlContractAddress;\r\n    address public soulContractAddress;\r\n\r\n    function setHowlContractAddress(address _address) external onlyOwner {\r\n        howlContractAddress = _address;\r\n    }\r\n\r\n    function setSoulContractAddress(address _address) external onlyOwner {\r\n        soulContractAddress = _address;\r\n    }\r\n\r\n    event StorePurchase(\r\n        uint256 indexed _tokenId,\r\n        address indexed _address,\r\n        uint16[8] _properties,\r\n        uint16 _remainingQty\r\n    );\r\n\r\n    struct StoreItem {\r\n        uint16[8] properties;\r\n        uint16 qty;\r\n        uint128 soulPrice;\r\n    }\r\n\r\n    mapping(uint256 => StoreItem) public store;\r\n\r\n    function addStoreItem(\r\n        uint256 _slot,\r\n        uint16[8] calldata properties,\r\n        uint16 _qty,\r\n        uint128 _soulPrice\r\n    ) external onlyOwner {\r\n        store[_slot] = StoreItem(properties, _qty, _soulPrice);\r\n    }\r\n\r\n    function deleteStoreItems(uint256[] calldata _slotsToDelete)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < _slotsToDelete.length; i++) {\r\n            delete store[_slotsToDelete[i]];\r\n        }\r\n    }\r\n\r\n    function buyStoreItem(uint256 _tokenId, uint256 _slot) external {\r\n        StoreItem storage item = store[_slot];\r\n\r\n        require(item.qty > 0, \"HOWL Store: item is sold out or doesn't exist\");\r\n        item.qty -= 1;\r\n\r\n        ISoul(soulContractAddress).collectAndBurn(msg.sender, item.soulPrice);\r\n        IHowl(howlContractAddress).equipProperties(\r\n            msg.sender, // howl will verify that this address owns the token\r\n            _tokenId,\r\n            item.properties\r\n        );\r\n\r\n        emit StorePurchase(_tokenId, msg.sender, item.properties, item.qty);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_howlContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_soulContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16[8]\",\"name\":\"_properties\",\"type\":\"uint16[8]\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remainingQty\",\"type\":\"uint16\"}],\"name\":\"StorePurchase\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"},{\"internalType\":\"uint16[8]\",\"name\":\"properties\",\"type\":\"uint16[8]\"},{\"internalType\":\"uint16\",\"name\":\"_qty\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"_soulPrice\",\"type\":\"uint128\"}],\"name\":\"addStoreItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"}],\"name\":\"buyStoreItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_slotsToDelete\",\"type\":\"uint256[]\"}],\"name\":\"deleteStoreItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"howlContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setHowlContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSoulContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soulContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"store\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"qty\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"soulPrice\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HowlStore","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008d2071a02608f337baae8da64f93b37abd6bde390000000000000000000000009c4e2efce0ef12b9a9f18eb66590b861bb5e9774","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3168113ea59cb3cb939013eff56bf356e2523d05cb048dd2d35d132ea427dbeb"}]}