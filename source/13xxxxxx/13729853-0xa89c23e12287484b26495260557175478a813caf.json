{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/logic/InteropBetaImplementation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ownable.sol\\\";\\nimport \\\"./variables.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"./events.sol\\\";\\nimport \\\"./interfaces.sol\\\";\\nimport \\\"./helpers.sol\\\";\\n\\ncontract InteropBetaImplementation is Variables, Initializable, Helpers, Events {\\n    ListInterface public immutable list;\\n    IndexInterface public immutable instaIndex;\\n\\n    constructor(\\n        address _instaIndex\\n    ) {\\n        instaIndex = IndexInterface(_instaIndex);\\n        list = ListInterface(IndexInterface(_instaIndex).list());\\n    }\\n\\n    function initialize(address owner_) public initializer {\\n        _owner = owner_;\\n    }\\n\\n    function submitAction(\\n        Position memory position,\\n        address sourceDsaSender,\\n        string memory actionId,\\n        uint64 targetDsaId,\\n        uint256 targetChainId,\\n        bytes memory metadata\\n    ) external {\\n        uint256 sourceChainId = getChainID();\\n        address dsaAddr = msg.sender;\\n        uint256 sourceDsaId = list.accountID(dsaAddr);\\n        require(sourceDsaId != 0, \\\"msg.sender-not-dsa\\\");\\n\\n        bytes32 key = keccak256(abi.encode(sourceChainId, targetChainId, vnonce));\\n        \\n        emit LogSubmit(\\n            position,\\n            actionId,\\n            keccak256(abi.encodePacked(actionId)),\\n            sourceDsaSender,\\n            sourceDsaId,\\n            targetDsaId,\\n            sourceChainId,\\n            targetChainId,\\n            vnonce,\\n            metadata\\n        );\\n        \\n        actionDsaAddress[key] = dsaAddr;\\n        vnonce++;\\n    }\\n\\n    function submitSystemAction(\\n        string memory systemActionId,\\n        Position memory position,\\n        bytes memory metadata\\n    ) external {\\n        uint256 sourceChainId = getChainID();\\n        require(IGnosisSafe(owner()).isOwner(msg.sender), \\\"not-gnosis-safe-owner\\\");\\n\\n        bytes32 key = keccak256(abi.encode(sourceChainId, vnonce));\\n\\n        emit LogSubmitSystem(\\n            position,\\n            systemActionId,\\n            keccak256(abi.encodePacked(systemActionId)),\\n            owner(),\\n            msg.sender,\\n            vnonce,\\n            metadata\\n        );\\n\\n        vnonce++;\\n    }\\n\\n    function submitRevertAction(\\n        Position memory position,\\n        address sourceDsaSender,\\n        string memory actionId,\\n        uint64 sourceDsaId,\\n        uint64 targetDsaId,\\n        uint256 targetChainId,\\n        uint256 _vnonce,\\n        bytes memory metadata\\n    ) external {\\n        uint256 sourceChainId = getChainID();\\n        address sourceDsaAddr = list.accountAddr(sourceDsaId);\\n        require(sourceDsaAddr != address(0), \\\"dsa-not-valid\\\");\\n\\n        bytes32 key = keccak256(abi.encode(sourceChainId, targetChainId, _vnonce));\\n\\n        require(IGnosisSafe(owner()).isOwner(msg.sender), \\\"not-gnosis-safe-owner\\\");\\n\\n        if (executeMapping[key] == false) executeMapping[key] = false;\\n        \\n        emit LogRevert(\\n            position,\\n            actionId,\\n            keccak256(abi.encodePacked(actionId)),\\n            sourceDsaSender,\\n            sourceDsaId,\\n            targetDsaId,\\n            sourceChainId,\\n            targetChainId,\\n            _vnonce,\\n            metadata\\n        );\\n    }\\n\\n    /**\\n     * @dev cast sourceAction\\n     */\\n    function sourceAction(\\n        Spell[] memory sourceSpells,\\n        Position memory position,\\n        string memory actionId,\\n        address sourceDsaSender,\\n        uint64 sourceDsaId,\\n        uint64 targetDsaId,\\n        uint256 sourceChainId,\\n        uint256 targetChainId,\\n        uint256 _vnonce,\\n        bytes memory metadata\\n    ) \\n        external \\n        onlyOwner\\n    {\\n        ActionVariables memory s;\\n\\n        s.key = keccak256(abi.encode(sourceChainId, targetChainId, _vnonce));\\n\\n        require(executeMapping[s.key] == false, \\\"already-executed\\\");\\n\\n        s.dsa = AccountInterface(list.accountAddr(sourceDsaId));\\n        require(address(s.dsa) != address(0), \\\"dsa-not-valid\\\");\\n        \\n        sendSourceTokens(position.withdraw, address(s.dsa));\\n\\n        s.success = cast(s.dsa, sourceSpells);\\n        if (s.success) {\\n            executeMapping[s.key] = true;\\n            emit LogValidate(\\n                sourceSpells,\\n                position,\\n                actionId,\\n                keccak256(abi.encodePacked(actionId)),\\n                sourceDsaSender,\\n                sourceDsaId,\\n                targetDsaId,\\n                sourceChainId,\\n                targetChainId,\\n                _vnonce,\\n                metadata\\n            );\\n        } else {\\n            revert ErrorSourceFailed({\\n                vnonce: vnonce,\\n                sourceChainId: sourceChainId,\\n                targetChainId: targetChainId\\n            });\\n        }\\n\\n        require(s.dsa.isAuth(sourceDsaSender), \\\"source-dsa-sender-not-auth\\\");\\n    }\\n\\n    function sourceSystemAction(\\n        string memory systemActionId,\\n        Position memory position,\\n        uint256 _vnonce,\\n        bytes memory metadata\\n    ) external onlyOwner {\\n        uint256 sourceChainId = getChainID();\\n\\n        bytes32 key = keccak256(abi.encode(sourceChainId, _vnonce));\\n        require(executeMapping[key] == false, \\\"already-executed\\\");\\n        executeMapping[key] = true;\\n\\n        sendSourceTokens(position.withdraw, address(owner()));\\n\\n        emit LogRebalanceSystem(\\n            position,\\n            systemActionId,\\n            keccak256(abi.encodePacked(systemActionId)),\\n            owner(),\\n            msg.sender,\\n            _vnonce,\\n            metadata\\n        );\\n    }\\n\\n    /**\\n     * @dev cast sourceActionRevert\\n     */\\n    function sourceRevertAction(\\n        Spell[] memory sourceSpells,\\n        Spell[] memory sourceRevertSpells,\\n        Position memory position,\\n        string memory actionId,\\n        address sourceDsaSender,\\n        uint64 sourceDsaId,\\n        uint64 targetDsaId,\\n        uint256 sourceChainId,\\n        uint256 targetChainId,\\n        uint256 _vnonce,\\n        bytes memory metadata\\n    )\\n        external\\n        onlyOwner\\n    {\\n        ActionVariables memory s;\\n\\n        bool revertSpells = sourceRevertSpells.length > 0;\\n\\n        s.key = keccak256(abi.encode(sourceChainId, targetChainId, _vnonce));\\n\\n        require((revertSpells && executeMapping[s.key] == true) || executeMapping[s.key] == false, \\\"revertSpells || executeMapping[s.key] == false\\\");\\n        s.dsa = AccountInterface(list.accountAddr(sourceDsaId));\\n        require(address(s.dsa) != address(0), \\\"invalid-dsa\\\");\\n\\n        sendSourceTokens(position.supply, address(s.dsa));\\n\\n        if (revertSpells) {\\n            s.success = cast(s.dsa, sourceRevertSpells);\\n\\n            if (s.success) {\\n                emit LogSourceRevert(\\n                    sourceSpells,\\n                    sourceRevertSpells,\\n                    position,\\n                    actionId,\\n                    keccak256(abi.encodePacked(actionId)),\\n                    sourceDsaSender,\\n                    sourceDsaId,\\n                    targetDsaId,\\n                    sourceChainId,\\n                    targetChainId,\\n                    _vnonce,\\n                    metadata\\n                );\\n            } else {\\n                revert();\\n            }\\n        } else {\\n            executeMapping[s.key] = true;\\n        }\\n\\n        require(s.dsa.isAuth(sourceDsaSender), \\\"source-dsa-sender-not-auth\\\");\\n    }\\n\\n    /**\\n     * @dev cast targetAction\\n     */\\n    function targetAction(\\n        Spell[] memory sourceSpells,\\n        Spell[] memory targetSpells,\\n        Position memory position,\\n        string memory actionId,\\n        address sourceDsaSender,\\n        uint64 sourceDsaId,\\n        uint64 targetDsaId,\\n        uint256 sourceChainId,\\n        uint256 targetChainId,\\n        uint256 _vnonce,\\n        bytes memory metadata\\n    )\\n        external\\n        onlyOwner\\n    {\\n        ActionVariables memory t;\\n\\n        t.key = keccak256(abi.encode(sourceChainId, targetChainId, _vnonce));\\n\\n        require(executeMapping[t.key] == false, \\\"already-executed\\\");\\n        \\n        if (targetDsaId == 0) targetDsaId = uint64(list.accounts());\\n        t.dsa = AccountInterface(list.accountAddr(targetDsaId));\\n        require(address(t.dsa) != address(0), \\\"invalid-dsa\\\");\\n\\n        sendTargetTokens(position.supply, address(t.dsa));\\n\\n        {\\n            t.success = cast(t.dsa, targetSpells);\\n\\n            if (t.success) {\\n                executeMapping[t.key] = true;\\n                emit LogExecute(\\n                    sourceSpells,\\n                    targetSpells,\\n                    position,\\n                    actionId,\\n                    keccak256(abi.encodePacked(actionId)),\\n                    sourceDsaSender,\\n                    sourceDsaId,\\n                    targetDsaId,\\n                    sourceChainId,\\n                    targetChainId,\\n                    _vnonce,\\n                    metadata\\n                );\\n            } else {\\n                revert ErrorTargetFailed({\\n                    vnonce: vnonce,\\n                    sourceChainId: sourceChainId,\\n                    targetChainId: targetChainId\\n                });\\n            }\\n        }\\n\\n        require(t.dsa.isAuth(sourceDsaSender), \\\"source-dsa-sender-not-auth\\\");\\n    }\\n\\n     /**\\n     * @dev cast targetRevertAction\\n     */\\n    function targetRevertAction(\\n        Spell[] memory sourceSpells,\\n        Position memory position,\\n        string memory actionId,\\n        address sourceDsaSender,\\n        uint64 sourceDsaId,\\n        uint64 targetDsaId,\\n        uint256 sourceChainId,\\n        uint256 targetChainId,\\n        uint256 _vnonce,\\n        bytes memory metadata\\n    )\\n        external\\n        onlyOwner\\n    {\\n        ActionVariables memory t;\\n\\n        t.key = keccak256(abi.encode(sourceChainId, targetChainId, _vnonce));\\n\\n        require(executeMapping[t.key] == false, \\\"already-executed\\\");\\n        executeMapping[t.key] = true;\\n        emit LogTargetRevert(\\n            sourceSpells,\\n            position,\\n            actionId,\\n            keccak256(abi.encodePacked(actionId)),\\n            sourceDsaSender,\\n            sourceDsaId,\\n            targetDsaId,\\n            sourceChainId,\\n            targetChainId,\\n            _vnonce,\\n            metadata\\n        );\\n    }\\n}\"\r\n    },\r\n    \"contracts/logic/ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport { Variables } from \\\"./variables.sol\\\";\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\nabstract contract Ownable is Context, Variables {\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/logic/variables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ncontract Variables {\\n    address internal _owner;\\n\\n    mapping(bytes32 => bool) public executeMapping;\\n\\n    mapping(bytes32 => address) public actionDsaAddress;\\n\\n    uint256 public vnonce;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/logic/events.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\npragma abicoder v2;\\n\\nimport \\\"./helpers.sol\\\";\\n\\ncontract Events is Helpers {\\n    event LogSubmit(\\n        Position position,\\n        string actionId,\\n        bytes32 indexed actionIdHashHash,\\n        address sourceDsaSender,\\n        uint256 sourceDsaId,\\n        uint256 targetDsaId,\\n        uint256 sourceChainId,\\n        uint256 targetChainId,\\n        uint256 indexed vnonce,\\n        bytes metadata\\n    );\\n\\n    event LogSubmitSystem(\\n        Position position,\\n        string systemActionId,\\n        bytes32 indexed systemActionIdHash,\\n        address gnosisSafe,\\n        address indexed sender,\\n        uint256 indexed vnonceSystem,\\n        bytes metadata\\n    );\\n\\n    event LogRebalanceSystem(\\n        Position position,\\n        string systemActionId,\\n        bytes32 indexed systemActionIdHash,\\n        address gnosisSafe,\\n        address indexed sender,\\n        uint256 indexed vnonceSystem,\\n        bytes metadata\\n    );\\n\\n    event LogRevert(\\n        Position position,\\n        string actionId,\\n        bytes32 indexed actionIdHashHash,\\n        address sourceDsaSender,\\n        uint256 sourceDsaId,\\n        uint256 targetDsaId,\\n        uint256 sourceChainId,\\n        uint256 targetChainId,\\n        uint256 indexed vnonce,\\n        bytes metadata\\n    );\\n    \\n    event LogValidate(\\n        Spell[] sourceSpells,\\n        Position position,\\n        string actionId,\\n        bytes32 indexed actionIdHash,\\n        address sourceDsaSender,\\n        uint256 sourceDsaId,\\n        uint256 targetDsaId,\\n        uint256 sourceChainId,\\n        uint256 targetChainId,\\n        uint256 indexed vnonce,\\n        bytes metadata\\n    );\\n\\n    event LogSourceRevert(\\n        Spell[] sourceSpells,\\n        Spell[] sourceRevertSpells,\\n        Position position,\\n        string actionId,\\n        bytes32 indexed actionIdHash,\\n        address sourceDsaSender,\\n        uint256 sourceDsaId,\\n        uint256 targetDsaId,\\n        uint256 sourceChainId,\\n        uint256 targetChainId,\\n        uint256 indexed vnonce,\\n        bytes metadata\\n    );\\n    \\n    event LogExecute(\\n        Spell[] sourceSpells,\\n        Spell[] targetSpells,\\n        Position position,\\n        string actionId,\\n        bytes32 indexed actionIdHash,\\n        address sourceDsaSender,\\n        uint256 sourceDsaId,\\n        uint256 targetDsaId,\\n        uint256 sourceChainId,\\n        uint256 targetChainId,\\n        uint256 indexed vnonce,\\n        bytes metadata\\n    );\\n\\n    event LogTargetRevert(\\n        Spell[] sourceSpells,\\n        Position position,\\n        string actionId,\\n        bytes32 indexed actionIdHash,\\n        address sourceDsaSender,\\n        uint256 sourceDsaId,\\n        uint256 targetDsaId,\\n        uint256 sourceChainId,\\n        uint256 targetChainId,\\n        uint256 indexed vnonce,\\n        bytes metadata\\n    );\\n\\n    error ErrorSourceFailed(uint256 vnonce, uint256 sourceChainId, uint256 targetChainId);\\n    error ErrorTargetFailed(uint256 vnonce, uint256 sourceChainId, uint256 targetChainId);\\n}\"\r\n    },\r\n    \"contracts/logic/interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\npragma abicoder v2;\\n\\ninterface IndexInterface {\\n    function list() external view returns (address);\\n}\\ninterface ListInterface {\\n    struct UserLink {\\n        uint64 first;\\n        uint64 last;\\n        uint64 count;\\n    }\\n\\n    struct UserList {\\n        uint64 prev;\\n        uint64 next;\\n    }\\n\\n    struct AccountLink {\\n        address first;\\n        address last;\\n        uint64 count;\\n    }\\n\\n    struct AccountList {\\n        address prev;\\n        address next;\\n    }\\n\\n    function accounts() external view returns (uint);\\n    function accountID(address) external view returns (uint64);\\n    function accountAddr(uint64) external view returns (address);\\n    function userLink(address) external view returns (UserLink memory);\\n    function userList(address, uint64) external view returns (UserList memory);\\n    function accountLink(uint64) external view returns (AccountLink memory);\\n    function accountList(uint64, address) external view returns (AccountList memory);\\n}\\n\\ninterface AccountInterface {\\n\\n    function version() external view returns (uint);\\n\\n    function cast(\\n        string[] calldata _targetNames,\\n        bytes[] calldata _datas,\\n        address _origin\\n    )\\n    external\\n    payable \\n    returns (bytes32);\\n\\n    function isAuth(address) external view returns (bool);\\n}\\n\\ninterface IGnosisSafe {\\n\\n    function isOwner(address) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/logic/helpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./ownable.sol\\\";\\nimport \\\"./interfaces.sol\\\";\\n\\n\\ncontract Helpers is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    struct ActionVariables {\\n        bytes32 key;\\n        AccountInterface dsa;\\n        string[] connectors;\\n        bytes[] callData;\\n        bool success;\\n    }\\n\\n    struct Spell {\\n        string connector;\\n        bytes data;\\n    }\\n\\n    struct TokenInfo {\\n        address sourceToken;\\n        address targetToken;\\n        uint256 amount;\\n    }\\n    \\n    struct Position {\\n        TokenInfo[] supply;\\n        TokenInfo[] withdraw;\\n    }\\n\\n    address constant internal nativeToken = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n     \\n    /**\\n     * @dev Return chain Id\\n     */\\n    function getChainID() internal view returns (uint256) {\\n        return block.chainid;\\n    }\\n\\n    function sendSourceTokens(TokenInfo[] memory tokens, address dsa) internal onlyOwner {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            IERC20 token = IERC20(tokens[i].sourceToken);\\n            uint256 amount = tokens[i].amount;\\n            if (address(token) == nativeToken) {\\n                Address.sendValue(payable(dsa), amount);\\n            } else {\\n                token.safeTransfer(dsa, amount);\\n            }\\n        }\\n    }\\n\\n    function sendTargetTokens(TokenInfo[] memory tokens, address dsa) internal onlyOwner {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            IERC20 token = IERC20(tokens[i].targetToken);\\n            uint256 amount = tokens[i].amount;\\n            if (address(token) == nativeToken) {\\n                Address.sendValue(payable(dsa), amount);\\n            } else {\\n                token.safeTransfer(dsa, amount);\\n            }\\n        }\\n    }\\n\\n    function cast(AccountInterface dsa, Spell[] memory spells) internal onlyOwner returns (bool success) {\\n        string[] memory connectors = new string[](spells.length);\\n        bytes[] memory callData = new bytes[](spells.length);\\n        for (uint256 i = 0; i < spells.length; i++) {\\n            connectors[i] = spells[i].connector;\\n            callData[i] = spells[i].data;\\n        }\\n        (success, ) = address(dsa).call(\\n            abi.encodeWithSignature(\\n                \\\"cast(string[],bytes[],address)\\\",\\n                connectors,\\n                callData,\\n                address(this)\\n            )\\n        );\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_instaIndex\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vnonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"}],\"name\":\"ErrorSourceFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vnonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"}],\"name\":\"ErrorTargetFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"connector\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct Helpers.Spell[]\",\"name\":\"sourceSpells\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"connector\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct Helpers.Spell[]\",\"name\":\"targetSpells\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"supply\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"withdraw\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct Helpers.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"actionId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"actionIdHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceDsaSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceDsaId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetDsaId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vnonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"LogExecute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"supply\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"withdraw\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct Helpers.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"systemActionId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"systemActionIdHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gnosisSafe\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vnonceSystem\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"LogRebalanceSystem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"supply\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"withdraw\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct Helpers.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"actionId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"actionIdHashHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceDsaSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceDsaId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetDsaId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vnonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"LogRevert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"connector\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct Helpers.Spell[]\",\"name\":\"sourceSpells\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"connector\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct Helpers.Spell[]\",\"name\":\"sourceRevertSpells\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"supply\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"withdraw\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct Helpers.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"actionId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"actionIdHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceDsaSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceDsaId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetDsaId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vnonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"LogSourceRevert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"supply\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"withdraw\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct Helpers.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"actionId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"actionIdHashHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceDsaSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceDsaId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetDsaId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vnonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"LogSubmit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"supply\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"withdraw\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct Helpers.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"systemActionId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"systemActionIdHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gnosisSafe\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vnonceSystem\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"LogSubmitSystem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"connector\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct Helpers.Spell[]\",\"name\":\"sourceSpells\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"supply\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"withdraw\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct Helpers.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"actionId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"actionIdHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceDsaSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceDsaId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetDsaId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vnonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"LogTargetRevert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"connector\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct Helpers.Spell[]\",\"name\":\"sourceSpells\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"supply\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"withdraw\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct Helpers.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"actionId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"actionIdHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceDsaSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceDsaId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetDsaId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vnonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"LogValidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"actionDsaAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"executeMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instaIndex\",\"outputs\":[{\"internalType\":\"contract IndexInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"list\",\"outputs\":[{\"internalType\":\"contract ListInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"connector\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Helpers.Spell[]\",\"name\":\"sourceSpells\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"supply\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"withdraw\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Helpers.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"actionId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"sourceDsaSender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"sourceDsaId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"targetDsaId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vnonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"sourceAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"connector\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Helpers.Spell[]\",\"name\":\"sourceSpells\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"connector\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Helpers.Spell[]\",\"name\":\"sourceRevertSpells\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"supply\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"withdraw\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Helpers.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"actionId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"sourceDsaSender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"sourceDsaId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"targetDsaId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vnonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"sourceRevertAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"systemActionId\",\"type\":\"string\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"supply\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"withdraw\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Helpers.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_vnonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"sourceSystemAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"supply\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"withdraw\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Helpers.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"sourceDsaSender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"actionId\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"targetDsaId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"submitAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"supply\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"withdraw\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Helpers.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"sourceDsaSender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"actionId\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"sourceDsaId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"targetDsaId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vnonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"submitRevertAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"systemActionId\",\"type\":\"string\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"supply\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"withdraw\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Helpers.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"submitSystemAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"connector\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Helpers.Spell[]\",\"name\":\"sourceSpells\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"connector\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Helpers.Spell[]\",\"name\":\"targetSpells\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"supply\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"withdraw\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Helpers.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"actionId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"sourceDsaSender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"sourceDsaId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"targetDsaId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vnonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"targetAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"connector\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Helpers.Spell[]\",\"name\":\"sourceSpells\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"supply\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.TokenInfo[]\",\"name\":\"withdraw\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Helpers.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"actionId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"sourceDsaSender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"sourceDsaId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"targetDsaId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vnonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"targetRevertAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vnonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InteropBetaImplementation","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002971adfa57b20e5a416ae5a708a8655a9c74f723","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}