{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AokiForge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title: Steve Aoki\\n/// @author: manifold.xyz\\n\\nimport \\\"./burnNRedeem/ERC721BurnRedeem.sol\\\";\\nimport \\\"./burnNRedeem/ERC721OwnerEnumerableSingleCreatorExtension.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./burnNRedeem/extensions/ICreatorExtensionTokenURI.sol\\\";\\n\\ncontract AokiForge is\\n    ERC721BurnRedeem,\\n    ERC721OwnerEnumerableSingleCreatorExtension,\\n    ICreatorExtensionTokenURI\\n{\\n    using Strings for uint256;\\n\\n    address public creator;\\n    mapping(uint256 => bool) private canClaim;\\n    event forgeWith(uint16 _checkToken, uint16 _burnToken);\\n\\n    int256 private _offset = 0;\\n\\n    string private _endpoint =\\n        \\\"https://client-metadata.ether.cards/api/aoki/BridgeOverTroubledWater/\\\";\\n\\n    uint256 public forge_start = 1631638800; // 10:30pm - 1631629824 . 1am- 1631638800\\n\\n    modifier forgeActive() {\\n        require(block.timestamp >= forge_start, \\\"forge not started.\\\");\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721BurnRedeem, IERC165 ,ERC721CreatorExtensionApproveTransfer)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(ICreatorExtensionTokenURI).interfaceId ||\\n            super.supportsInterface(interfaceId) ||\\n            ERC721CreatorExtensionApproveTransfer.supportsInterface(\\n                interfaceId\\n            );\\n    }\\n\\n    constructor(\\n        address _creator, //  0x01Ba93514e5Eb642Ec63E95EF7787b0eDd403ADd\\n        uint16 redemptionRate, // 1\\n        uint16 redemptionMax // 83\\n    )\\n        ERC721OwnerEnumerableSingleCreatorExtension(_creator)\\n        ERC721BurnRedeem(_creator, redemptionRate, redemptionMax)\\n    {\\n        creator = _creator;\\n    }\\n\\n    function checkClaim(uint256 _tokenID) public view returns (bool) {\\n        return (canClaim[_tokenID]);\\n    }\\n\\n    function setup() external onlyOwner {\\n        super._activate();\\n\\n        uint256 baseFormat = 708;\\n        for (uint256 i = 0; i <= 84; i++) {\\n            canClaim[baseFormat + i] = true;\\n        }\\n    }\\n\\n    function forge(uint16 _checkToken, uint16 _burnToken) public forgeActive() {\\n        // Attempt Burn\\n        // Check that we can burn\\n        require(redeemable(creator, _burnToken), \\\"BurnRedeem: Invalid NFT\\\");\\n        require(canClaim[_checkToken] == true, \\\"Forged\\\");\\n        canClaim[_checkToken] = false;\\n\\n        try IERC721(creator).ownerOf(_checkToken) returns (\\n            address ownerOfAddress\\n        ) {\\n            require(\\n                ownerOfAddress == msg.sender,\\n                \\\"checkTokenRedeem: Caller must own NFTs\\\"\\n            );\\n        } catch (bytes memory) {\\n            revert(\\\"checkTokenRedeem: Bad token contract\\\");\\n        }\\n\\n        try IERC721(creator).ownerOf(_burnToken) returns (\\n            address ownerOfAddress\\n        ) {\\n            require(\\n                ownerOfAddress == msg.sender,\\n                \\\"BurnRedeem: Caller must own NFTs\\\"\\n            );\\n        } catch (bytes memory) {\\n            revert(\\\"BurnRedeem: Bad token contract\\\");\\n        }\\n\\n        try IERC721(creator).getApproved(_burnToken) returns (\\n            address approvedAddress\\n        ) {\\n            require(\\n                approvedAddress == address(this),\\n                \\\"BurnRedeem: Contract must be given approval to burn NFT\\\"\\n            );\\n        } catch (bytes memory) {\\n            revert(\\\"BurnRedeem: Bad token contract\\\");\\n        }\\n\\n        // Then burn\\n        try\\n            IERC721(creator).transferFrom(\\n                msg.sender,\\n                address(0xdEaD),\\n                _burnToken\\n            )\\n        {} catch (bytes memory) {\\n            revert(\\\"BurnRedeem: Burn failure\\\");\\n        }\\n\\n        // Mint reward\\n        _mintRedemption(msg.sender);\\n        emit forgeWith(_checkToken, _burnToken);\\n    }\\n\\n    // tokenURI extension\\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\\n        require(_mintNumbers[tokenId] != 0, \\\"Invalid token\\\");\\n        return\\n            string(\\n                abi.encodePacked(\\n                    _endpoint,\\n                    uint256(int256(_mintNumbers[tokenId]) + _offset).toString()\\n                )\\n            );\\n    }\\n\\n    function tokenURI(address creator, uint256 tokenId) public view override returns (string memory) {\\n        return tokenURI(tokenId);\\n    }\\n    function drain(IERC20 _token) external onlyOwner {\\n        if (address(_token) == 0x0000000000000000000000000000000000000000) {\\n            payable(owner()).transfer(address(this).balance);\\n        } else {\\n            _token.transfer(owner(), _token.balanceOf(address(this)));\\n        }\\n    }\\n\\n    function retrieve721(address _tracker, uint256 _id) external onlyOwner {\\n        IERC721(_tracker).transferFrom(address(this), msg.sender, _id);\\n    }\\n\\n    function how_long_more()\\n        public\\n        view\\n        returns (\\n            uint256 Days,\\n            uint256 Hours,\\n            uint256 Minutes,\\n            uint256 Seconds\\n        )\\n    {\\n        require(block.timestamp < forge_start, \\\"Started\\\");\\n        uint256 gap = forge_start - block.timestamp;\\n        Days = gap / (24 * 60 * 60);\\n        gap = gap % (24 * 60 * 60);\\n        Hours = gap / (60 * 60);\\n        gap = gap % (60 * 60);\\n        Minutes = gap / 60;\\n        Seconds = gap % 60;\\n        return (Days, Hours, Minutes, Seconds);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/burnNRedeem/ERC721BurnRedeem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./core/IERC721CreatorCore.sol\\\";\\n\\nimport \\\"./ERC721RedeemBase.sol\\\";\\nimport \\\"./IERC721BurnRedeem.sol\\\";\\n\\n/**\\n * @dev Burn NFT's to receive another lazy minted NFT\\n */\\ncontract ERC721BurnRedeem is\\n    ReentrancyGuard,\\n    ERC721RedeemBase,\\n    IERC721BurnRedeem\\n{\\n    //using EnumerableSet for EnumerableSet.UintSet;\\n\\n    //  mapping(address => mapping(uint256 => address)) private _recoverableERC721;\\n\\n    constructor(\\n        address creator,\\n        uint16 redemptionRate,\\n        uint16 redemptionMax\\n    ) ERC721RedeemBase(creator, redemptionRate, redemptionMax) {}\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721RedeemBase, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721BurnRedeem).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721BurnRedeem-setERC721Recoverable}\\n     */\\n    function setERC721Recoverable(\\n        address contract_,\\n        uint256 tokenId,\\n        address recoverer\\n    ) external virtual override adminRequired {}\\n\\n    /**\\n     * @dev See {IERC721BurnRedeem-recoverERC721}\\n     */\\n    function recoverERC721(address contract_, uint256 tokenId)\\n        external\\n        virtual\\n        override\\n    {}\\n\\n    /**\\n     * @dev See {IERC721BurnRedeem-redeemERC721}\\n     \\n    function redeemERC721(\\n        address[] calldata contracts,\\n        uint256[] calldata tokenIds\\n    ) external virtual override nonReentrant {\\n        require(\\n            contracts.length == tokenIds.length,\\n            \\\"BurnRedeem: Invalid parameters\\\"\\n        );\\n        require(\\n            contracts.length == _redemptionRate,\\n            \\\"BurnRedeem: Incorrect number of NFTs being redeemed\\\"\\n        );\\n\\n        // Attempt Burn\\n        for (uint256 i = 0; i < contracts.length; i++) {\\n            // Check that we can burn\\n            require(\\n                redeemable(contracts[i], tokenIds[i]),\\n                \\\"BurnRedeem: Invalid NFT\\\"\\n            );\\n\\n            try IERC721(contracts[i]).ownerOf(tokenIds[i]) returns (\\n                address ownerOfAddress\\n            ) {\\n                require(\\n                    ownerOfAddress == msg.sender,\\n                    \\\"BurnRedeem: Caller must own NFTs\\\"\\n                );\\n            } catch (bytes memory) {\\n                revert(\\\"BurnRedeem: Bad token contract\\\");\\n            }\\n\\n            try IERC721(contracts[i]).getApproved(tokenIds[i]) returns (\\n                address approvedAddress\\n            ) {\\n                require(\\n                    approvedAddress == address(this),\\n                    \\\"BurnRedeem: Contract must be given approval to burn NFT\\\"\\n                );\\n            } catch (bytes memory) {\\n                revert(\\\"BurnRedeem: Bad token contract\\\");\\n            }\\n\\n            // Then burn\\n            try\\n                IERC721(contracts[i]).transferFrom(\\n                    msg.sender,\\n                    address(0xdEaD),\\n                    tokenIds[i]\\n                )\\n            {} catch (bytes memory) {\\n                revert(\\\"BurnRedeem: Burn failure\\\");\\n            }\\n        }\\n\\n        // Mint reward\\n        _mintRedemption(msg.sender);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     */\\n    function onERC721Received(\\n        address,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external override nonReentrant returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/burnNRedeem/ERC721OwnerEnumerableSingleCreatorExtension.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./core/IERC721CreatorCore.sol\\\";\\n\\nimport \\\"./extensions/ERC721/ERC721CreatorExtensionApproveTransfer.sol\\\";\\n\\nimport \\\"./libraries/SingleCreatorBase.sol\\\";\\n\\n/**\\n * Provide token enumeration functionality (Base Class. Use if you are using multiple inheritance where other contracts\\n * already derive from either ERC721SingleCreatorExtension or ERC1155SingleCreatorExtension).\\n *\\n * IMPORTANT: You must call _activate in order for enumeration to work\\n */\\nabstract contract ERC721OwnerEnumerableSingleCreatorBase is\\n    SingleCreatorBase,\\n    ERC721CreatorExtensionApproveTransfer\\n{\\n    mapping(address => uint256) private _ownerBalance;\\n    mapping(address => mapping(uint256 => uint256)) private _tokensByOwner;\\n    mapping(uint256 => uint256) private _tokensIndex;\\n\\n    /**\\n     * @dev must call this to activate enumeration capability\\n     */\\n    function _activate() internal {\\n        IERC721CreatorCore(_creator).setApproveTransferExtension(true);\\n    }\\n\\n    /**\\n     * @dev Get the token for an owner by index\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        require(\\n            index < _ownerBalance[owner],\\n            \\\"ERC721Enumerable: owner index out of bounds\\\"\\n        );\\n        return _tokensByOwner[owner][index];\\n    }\\n\\n    /**\\n     * @dev Get the balance for the owner for this extension\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        return _ownerBalance[owner];\\n    }\\n\\n    function approveTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external override returns (bool) {\\n        require(msg.sender == _creator, \\\"Invalid caller\\\");\\n        if (from != address(0) && from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to != address(0) && to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n        return true;\\n    }\\n\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = _ownerBalance[to];\\n        _tokensByOwner[to][length] = tokenId;\\n        _tokensIndex[tokenId] = length;\\n        _ownerBalance[to] += 1;\\n    }\\n\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId)\\n        private\\n    {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _ownerBalance[from] - 1;\\n        uint256 tokenIndex = _tokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _tokensByOwner[from][lastTokenIndex];\\n\\n            _tokensByOwner[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _tokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _tokensIndex[tokenId];\\n        delete _tokensByOwner[from][lastTokenIndex];\\n        _ownerBalance[from] -= 1;\\n    }\\n}\\n\\n/**\\n * Provide token enumeration functionality (Extension)\\n *\\n * IMPORTANT: You must call _activate in order for enumeration to work\\n */\\nabstract contract ERC721OwnerEnumerableSingleCreatorExtension is\\n    ERC721OwnerEnumerableSingleCreatorBase,\\n    ERC721SingleCreatorExtension\\n{\\n    constructor(address creator) ERC721SingleCreatorExtension(creator) {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/burnNRedeem/extensions/ICreatorExtensionTokenURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Implement this if you want your extension to have overloadable URI's\\n */\\ninterface ICreatorExtensionTokenURI is IERC165 {\\n    /**\\n     * Get the uri for a given creator/tokenId\\n     */\\n    function tokenURI(address creator, uint256 tokenId)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) &&\\n            _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165(account).supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{ gas: 30000 }(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/burnNRedeem/core/IERC721CreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"./ICreatorCore.sol\\\";\\n\\n/**\\n * @dev Core ERC721 creator interface\\n */\\ninterface IERC721CreatorCore is ICreatorCore {\\n    /**\\n     * @dev mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBase(address to) external returns (uint256);\\n\\n    /**\\n     * @dev mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBase(address to, string calldata uri)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @dev batch mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBaseBatch(address to, uint16 count)\\n        external\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBaseBatch(address to, string[] calldata uris)\\n        external\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev mint a token. Can only be called by a registered extension.\\n     * Returns tokenId minted\\n     */\\n    function mintExtension(address to) external returns (uint256);\\n\\n    /**\\n     * @dev mint a token. Can only be called by a registered extension.\\n     * Returns tokenId minted\\n     */\\n    function mintExtension(address to, string calldata uri)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @dev batch mint a token. Can only be called by a registered extension.\\n     * Returns tokenIds minted\\n     */\\n    function mintExtensionBatch(address to, uint16 count)\\n        external\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint a token. Can only be called by a registered extension.\\n     * Returns tokenId minted\\n     */\\n    function mintExtensionBatch(address to, string[] calldata uris)\\n        external\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev burn a token. Can only be called by token owner or approved address.\\n     * On burn, calls back to the registered extension's onBurn method\\n     */\\n    function burn(uint256 tokenId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/burnNRedeem/ERC721RedeemBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\nimport \\\"./core/IERC721CreatorCore.sol\\\";\\nimport \\\"./extensions/CreatorExtension.sol\\\";\\n\\nimport \\\"./libraries/LegacyInterfaces.sol\\\";\\nimport \\\"./RedeemBase.sol\\\";\\nimport \\\"./IERC721RedeemBase.sol\\\";\\n\\n/**\\n * @dev Burn NFT's to receive another lazy minted NFT\\n */\\nabstract contract ERC721RedeemBase is\\n    RedeemBase,\\n    CreatorExtension,\\n    IERC721RedeemBase\\n{\\n    // The creator mint contract\\n    address private _creator;\\n\\n    uint16 internal immutable _redemptionRate;\\n    uint16 private _redemptionMax;\\n    uint16 private _redemptionCount;\\n    uint256[] private _mintedTokens;\\n    mapping(uint256 => uint256) internal _mintNumbers;\\n\\n    constructor(\\n        address creator,\\n        uint16 redemptionRate_,\\n        uint16 redemptionMax_\\n    ) {\\n        require(\\n            ERC165Checker.supportsInterface(\\n                creator,\\n                type(IERC721CreatorCore).interfaceId\\n            ) ||\\n                ERC165Checker.supportsInterface(\\n                    creator,\\n                    LegacyInterfaces.IERC721CreatorCore_v1\\n                ),\\n            \\\"Redeem: Minting reward contract must implement IERC721CreatorCore\\\"\\n        );\\n        _redemptionRate = redemptionRate_;\\n        _redemptionMax = redemptionMax_;\\n        _creator = creator;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(RedeemBase, CreatorExtension, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721RedeemBase).interfaceId ||\\n            RedeemBase.supportsInterface(interfaceId) ||\\n            CreatorExtension.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721RedeemBase-redemptionMax}\\n     */\\n    function redemptionMax() external view virtual override returns (uint16) {\\n        return _redemptionMax;\\n    }\\n\\n    /**\\n     * @dev See {IERC721RedeemBase-redemptionRate}\\n     */\\n    function redemptionRate() external view virtual override returns (uint16) {\\n        return _redemptionRate;\\n    }\\n\\n    /**\\n     * @dev See {IERC721RedeemBase-redemptionRemaining}\\n     */\\n    function redemptionRemaining()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint16)\\n    {\\n        return _redemptionMax - _redemptionCount;\\n    }\\n\\n    /**\\n     * @dev See {IERC721RedeemBase-mintNumber}.\\n     */\\n    function mintNumber(uint256 tokenId)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _mintNumbers[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721RedeemBase-mintedTokens}.\\n     */\\n    function mintedTokens() external view override returns (uint256[] memory) {\\n        return _mintedTokens;\\n    }\\n\\n    /**\\n     * @dev mint token that was redeemed for\\n     */\\n    function _mintRedemption(address to) internal {\\n        require(\\n            _redemptionCount < _redemptionMax,\\n            \\\"Redeem: No redemptions remaining\\\"\\n        );\\n        _redemptionCount++;\\n\\n        // Mint token\\n        uint256 tokenId = _mint(to, _redemptionCount);\\n\\n        _mintedTokens.push(tokenId);\\n        _mintNumbers[tokenId] = _redemptionCount;\\n    }\\n\\n    /**\\n     * @dev override if you want to perform different mint functionality\\n     */\\n    function _mint(address to, uint16) internal returns (uint256) {\\n        return IERC721CreatorCore(_creator).mintExtension(to);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/burnNRedeem/IERC721BurnRedeem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\nimport \\\"./IERC721RedeemBase.sol\\\";\\n\\n/**\\n * @dev Burn NFT's to receive another lazy minted NFT\\n */\\ninterface IERC721BurnRedeem is IERC721RedeemBase, IERC721Receiver {\\n    /**\\n     * @dev Enable recovery of a given token. Can only be called by contract owner/admin.\\n     * This is a special function used in case someone accidentally sends a token to this contract.\\n     */\\n    function setERC721Recoverable(\\n        address contract_,\\n        uint256 tokenId,\\n        address recoverer\\n    ) external;\\n\\n    /**\\n     * @dev Recover a token.  Returns it to the recoverer set by setERC721Recoverable\\n     * This is a special function used in case someone accidentally sends a token to this contract.\\n     */\\n    function recoverERC721(address contract_, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Redeem ERC721 tokens for redemption reward NFT.\\n     * Requires the user to grant approval beforehand by calling contract's 'approve' function.\\n     * If the it cannot redeem the NFT, it will clear approvals\\n     \\n    function redeemERC721(\\n        address[] calldata contracts,\\n        uint256[] calldata tokenIds\\n    ) external;\\n    */\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/burnNRedeem/core/ICreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Core creator interface\\n */\\ninterface ICreatorCore is IERC165 {\\n    event ExtensionRegistered(\\n        address indexed extension,\\n        address indexed sender\\n    );\\n    event ExtensionUnregistered(\\n        address indexed extension,\\n        address indexed sender\\n    );\\n    event ExtensionBlacklisted(\\n        address indexed extension,\\n        address indexed sender\\n    );\\n    event MintPermissionsUpdated(\\n        address indexed extension,\\n        address indexed permissions,\\n        address indexed sender\\n    );\\n    event RoyaltiesUpdated(\\n        uint256 indexed tokenId,\\n        address payable[] receivers,\\n        uint256[] basisPoints\\n    );\\n    event DefaultRoyaltiesUpdated(\\n        address payable[] receivers,\\n        uint256[] basisPoints\\n    );\\n    event ExtensionRoyaltiesUpdated(\\n        address indexed extension,\\n        address payable[] receivers,\\n        uint256[] basisPoints\\n    );\\n    event ExtensionApproveTransferUpdated(\\n        address indexed extension,\\n        bool enabled\\n    );\\n\\n    /**\\n     * @dev gets address of all extensions\\n     */\\n    function getExtensions() external view returns (address[] memory);\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * extension address must point to a contract implementing ICreatorExtension.\\n     * Returns True if newly added, False if already added.\\n     */\\n    function registerExtension(address extension, string calldata baseURI)\\n        external;\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * extension address must point to a contract implementing ICreatorExtension.\\n     * Returns True if newly added, False if already added.\\n     */\\n    function registerExtension(\\n        address extension,\\n        string calldata baseURI,\\n        bool baseURIIdentical\\n    ) external;\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * Returns True if removed, False if already removed.\\n     */\\n    function unregisterExtension(address extension) external;\\n\\n    /**\\n     * @dev blacklist an extension.  Can only be called by contract owner or admin.\\n     * This function will destroy all ability to reference the metadata of any tokens created\\n     * by the specified extension. It will also unregister the extension if needed.\\n     * Returns True if removed, False if already removed.\\n     */\\n    function blacklistExtension(address extension) external;\\n\\n    /**\\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\\n     */\\n    function setBaseTokenURIExtension(string calldata uri) external;\\n\\n    /**\\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\\n     * For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\\n     */\\n    function setBaseTokenURIExtension(string calldata uri, bool identical)\\n        external;\\n\\n    /**\\n     * @dev set the common prefix of an extension.  Can only be called by extension.\\n     * If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\"\\n     * Useful if you want to use ipfs/arweave\\n     */\\n    function setTokenURIPrefixExtension(string calldata prefix) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token extension.  Can only be called by extension that minted token.\\n     */\\n    function setTokenURIExtension(uint256 tokenId, string calldata uri)\\n        external;\\n\\n    /**\\n     * @dev set the tokenURI of a token extension for multiple tokens.  Can only be called by extension that minted token.\\n     */\\n    function setTokenURIExtension(\\n        uint256[] memory tokenId,\\n        string[] calldata uri\\n    ) external;\\n\\n    /**\\n     * @dev set the baseTokenURI for tokens with no extension.  Can only be called by owner/admin.\\n     * For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\\n     */\\n    function setBaseTokenURI(string calldata uri) external;\\n\\n    /**\\n     * @dev set the common prefix for tokens with no extension.  Can only be called by owner/admin.\\n     * If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\"\\n     * Useful if you want to use ipfs/arweave\\n     */\\n    function setTokenURIPrefix(string calldata prefix) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token with no extension.  Can only be called by owner/admin.\\n     */\\n    function setTokenURI(uint256 tokenId, string calldata uri) external;\\n\\n    /**\\n     * @dev set the tokenURI of multiple tokens with no extension.  Can only be called by owner/admin.\\n     */\\n    function setTokenURI(uint256[] memory tokenIds, string[] calldata uris)\\n        external;\\n\\n    /**\\n     * @dev set a permissions contract for an extension.  Used to control minting.\\n     */\\n    function setMintPermissions(address extension, address permissions)\\n        external;\\n\\n    /**\\n     * @dev Configure so transfers of tokens created by the caller (must be extension) gets approval\\n     * from the extension before transferring\\n     */\\n    function setApproveTransferExtension(bool enabled) external;\\n\\n    /**\\n     * @dev get the extension of a given token\\n     */\\n    function tokenExtension(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Set default royalties\\n     */\\n    function setRoyalties(\\n        address payable[] calldata receivers,\\n        uint256[] calldata basisPoints\\n    ) external;\\n\\n    /**\\n     * @dev Set royalties of a token\\n     */\\n    function setRoyalties(\\n        uint256 tokenId,\\n        address payable[] calldata receivers,\\n        uint256[] calldata basisPoints\\n    ) external;\\n\\n    /**\\n     * @dev Set royalties of an extension\\n     */\\n    function setRoyaltiesExtension(\\n        address extension,\\n        address payable[] calldata receivers,\\n        uint256[] calldata basisPoints\\n    ) external;\\n\\n    /**\\n     * @dev Get royalites of a token.  Returns list of receivers and basisPoints\\n     */\\n    function getRoyalties(uint256 tokenId)\\n        external\\n        view\\n        returns (address payable[] memory, uint256[] memory);\\n\\n    // Royalty support for various other standards\\n    function getFeeRecipients(uint256 tokenId)\\n        external\\n        view\\n        returns (address payable[] memory);\\n\\n    function getFeeBps(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getFees(uint256 tokenId)\\n        external\\n        view\\n        returns (address payable[] memory, uint256[] memory);\\n\\n    function royaltyInfo(uint256 tokenId, uint256 value)\\n        external\\n        view\\n        returns (address, uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/burnNRedeem/extensions/CreatorExtension.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Base creator extension variables\\n */\\nabstract contract CreatorExtension is ERC165 {\\n    /**\\n     * @dev Legacy extension interface identifiers\\n     *\\n     * {IERC165-supportsInterface} needs to return 'true' for this interface\\n     * in order backwards compatible with older creator contracts\\n     */\\n    bytes4 internal constant LEGACY_EXTENSION_INTERFACE = 0x7005caad;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == LEGACY_EXTENSION_INTERFACE ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/burnNRedeem/libraries/LegacyInterfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\n/**\\n * Library of legacy interface constants\\n */\\nlibrary LegacyInterfaces {\\n    // LEGACY ERC721CreatorCore interface\\n    bytes4 internal constant IERC721CreatorCore_v1 = 0x478c8530;\\n}\\n\"\r\n    },\r\n    \"contracts/burnNRedeem/RedeemBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./access/AdminControl.sol\\\";\\n\\nimport \\\"./IRedeemBase.sol\\\";\\n\\nstruct range {\\n    uint256 min;\\n    uint256 max;\\n}\\n\\n/**\\n * @dev Burn NFT's to receive another lazy minted NFT\\n */\\nabstract contract RedeemBase is AdminControl, IRedeemBase {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    // approved contract tokens\\n    mapping(address => bool) private _approvedContracts;\\n\\n    // approved specific tokens\\n    mapping(address => EnumerableSet.UintSet) private _approvedTokens;\\n    mapping(address => range[]) private _approvedTokenRange;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AdminControl, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IRedeemBase).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IRedeemBase-updateApprovedContracts}\\n     */\\n    function updateApprovedContracts(\\n        address[] memory contracts,\\n        bool[] memory approved\\n    ) public virtual override adminRequired {\\n        require(\\n            contracts.length == approved.length,\\n            \\\"Redeem: Invalid input parameters\\\"\\n        );\\n        for (uint256 i = 0; i < contracts.length; i++) {\\n            _approvedContracts[contracts[i]] = approved[i];\\n        }\\n        emit UpdateApprovedContracts(contracts, approved);\\n    }\\n\\n    /**\\n     * @dev See {IRedeemBase-updateApprovedTokens}\\n     */\\n    function updateApprovedTokens(\\n        address contract_,\\n        uint256[] memory tokenIds,\\n        bool[] memory approved\\n    ) public virtual override adminRequired {\\n        require(\\n            tokenIds.length == approved.length,\\n            \\\"Redeem: Invalid input parameters\\\"\\n        );\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            if (\\n                approved[i] && !_approvedTokens[contract_].contains(tokenIds[i])\\n            ) {\\n                _approvedTokens[contract_].add(tokenIds[i]);\\n            } else if (\\n                !approved[i] && _approvedTokens[contract_].contains(tokenIds[i])\\n            ) {\\n                _approvedTokens[contract_].remove(tokenIds[i]);\\n            }\\n        }\\n        emit UpdateApprovedTokens(contract_, tokenIds, approved);\\n    }\\n\\n    /**\\n     * @dev See {IRedeemBase-updateApprovedTokenRanges}\\n     */\\n    function updateApprovedTokenRanges(\\n        address contract_,\\n        uint256[] memory minTokenIds,\\n        uint256[] memory maxTokenIds\\n    ) public virtual override adminRequired {\\n        require(\\n            minTokenIds.length == maxTokenIds.length,\\n            \\\"Redeem: Invalid input parameters\\\"\\n        );\\n\\n        uint256 existingRangesLength = _approvedTokenRange[contract_].length;\\n        for (uint256 i = 0; i < existingRangesLength; i++) {\\n            _approvedTokenRange[contract_][i].min = 0;\\n            _approvedTokenRange[contract_][i].max = 0;\\n        }\\n\\n        for (uint256 i = 0; i < minTokenIds.length; i++) {\\n            require(\\n                minTokenIds[i] < maxTokenIds[i],\\n                \\\"Redeem: min must be less than max\\\"\\n            );\\n            if (i < existingRangesLength) {\\n                _approvedTokenRange[contract_][i].min = minTokenIds[i];\\n                _approvedTokenRange[contract_][i].max = maxTokenIds[i];\\n            } else {\\n                _approvedTokenRange[contract_].push(\\n                    range(minTokenIds[i], maxTokenIds[i])\\n                );\\n            }\\n        }\\n        emit UpdateApprovedTokenRanges(contract_, minTokenIds, maxTokenIds);\\n    }\\n\\n    /**\\n     * @dev See {IRedeemBase-redeemable}\\n     */\\n    function redeemable(address contract_, uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        if (_approvedContracts[contract_]) {\\n            return true;\\n        }\\n        if (_approvedTokens[contract_].contains(tokenId)) {\\n            return true;\\n        }\\n        if (_approvedTokenRange[contract_].length > 0) {\\n            for (\\n                uint256 i = 0;\\n                i < _approvedTokenRange[contract_].length;\\n                i++\\n            ) {\\n                if (\\n                    _approvedTokenRange[contract_][i].max != 0 &&\\n                    tokenId >= _approvedTokenRange[contract_][i].min &&\\n                    tokenId <= _approvedTokenRange[contract_][i].max\\n                ) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/burnNRedeem/IERC721RedeemBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"./IRedeemBase.sol\\\";\\n\\n/**\\n * @dev Base redemption interface\\n */\\ninterface IERC721RedeemBase is IRedeemBase {\\n    /**\\n     * @dev Get the max number of redemptions\\n     */\\n    function redemptionMax() external view returns (uint16);\\n\\n    /**\\n     * @dev Get the redemption rate\\n     */\\n    function redemptionRate() external view returns (uint16);\\n\\n    /**\\n     * @dev Get number of redemptions left\\n     */\\n    function redemptionRemaining() external view returns (uint16);\\n\\n    /**\\n     * @dev Get the mint number of a created token id\\n     */\\n    function mintNumber(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @dev Get list of all minted tokens\\n     */\\n    function mintedTokens() external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/burnNRedeem/access/AdminControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./IAdminControl.sol\\\";\\n\\nabstract contract AdminControl is Ownable, IAdminControl, ERC165 {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Track registered admins\\n    EnumerableSet.AddressSet private _admins;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IAdminControl).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Only allows approved admins to call the specified function\\n     */\\n    modifier adminRequired() {\\n        require(\\n            owner() == msg.sender || _admins.contains(msg.sender),\\n            \\\"AdminControl: Must be owner or admin\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-getAdmins}.\\n     */\\n    function getAdmins()\\n        external\\n        view\\n        override\\n        returns (address[] memory admins)\\n    {\\n        admins = new address[](_admins.length());\\n        for (uint256 i = 0; i < _admins.length(); i++) {\\n            admins[i] = _admins.at(i);\\n        }\\n        return admins;\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-approveAdmin}.\\n     */\\n    function approveAdmin(address admin) external override onlyOwner {\\n        if (!_admins.contains(admin)) {\\n            emit AdminApproved(admin, msg.sender);\\n            _admins.add(admin);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-revokeAdmin}.\\n     */\\n    function revokeAdmin(address admin) external override onlyOwner {\\n        if (_admins.contains(admin)) {\\n            emit AdminRevoked(admin, msg.sender);\\n            _admins.remove(admin);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-isAdmin}.\\n     */\\n    function isAdmin(address admin) public view override returns (bool) {\\n        return (owner() == admin || _admins.contains(admin));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/burnNRedeem/IRedeemBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"./access/IAdminControl.sol\\\";\\n\\n/**\\n * @dev Base redemption interface\\n */\\ninterface IRedeemBase is IAdminControl {\\n    event UpdateApprovedContracts(address[] contracts, bool[] approved);\\n    event UpdateApprovedTokens(\\n        address contract_,\\n        uint256[] tokenIds,\\n        bool[] approved\\n    );\\n    event UpdateApprovedTokenRanges(\\n        address contract_,\\n        uint256[] minTokenIds,\\n        uint256[] maxTokenIds\\n    );\\n\\n    /**\\n     * @dev Update approved contracts that can be used to redeem. Can only be called by contract owner/admin.\\n     */\\n    function updateApprovedContracts(\\n        address[] calldata contracts,\\n        bool[] calldata approved\\n    ) external;\\n\\n    /**\\n     * @dev Update approved tokens that can be used to redeem. Can only be called by contract owner/admin.\\n     */\\n    function updateApprovedTokens(\\n        address contract_,\\n        uint256[] calldata tokenIds,\\n        bool[] calldata approved\\n    ) external;\\n\\n    /**\\n     * @dev Update approved token ranges that can be used to redeem. Can only be called by contract owner/admin.\\n     * Clears out old ranges\\n     */\\n    function updateApprovedTokenRanges(\\n        address contract_,\\n        uint256[] calldata minTokenIds,\\n        uint256[] calldata maxTokenIds\\n    ) external;\\n\\n    /**\\n     * @dev Check if an NFT is redeemable\\n     */\\n    function redeemable(address contract_, uint256 tokenId)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/burnNRedeem/access/IAdminControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for admin control\\n */\\ninterface IAdminControl is IERC165 {\\n    event AdminApproved(address indexed account, address indexed sender);\\n    event AdminRevoked(address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev gets address of all admins\\n     */\\n    function getAdmins() external view returns (address[] memory);\\n\\n    /**\\n     * @dev add an admin.  Can only be called by contract owner.\\n     */\\n    function approveAdmin(address admin) external;\\n\\n    /**\\n     * @dev remove an admin.  Can only be called by contract owner.\\n     */\\n    function revokeAdmin(address admin) external;\\n\\n    /**\\n     * @dev checks whether or not given address is an admin\\n     * Returns True if they are\\n     */\\n    function isAdmin(address admin) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/burnNRedeem/extensions/ERC721/ERC721CreatorExtensionApproveTransfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"../../access/AdminControl.sol\\\";\\n\\nimport \\\"../../core/IERC721CreatorCore.sol\\\";\\nimport \\\"./ERC721CreatorExtension.sol\\\";\\nimport \\\"./IERC721CreatorExtensionApproveTransfer.sol\\\";\\n\\n/**\\n * @dev Suggested implementation for extensions that require the creator to\\n * check with it before a transfer occurs\\n */\\nabstract contract ERC721CreatorExtensionApproveTransfer is\\n    AdminControl,\\n    ERC721CreatorExtension,\\n    IERC721CreatorExtensionApproveTransfer\\n{\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AdminControl, CreatorExtension, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId ==\\n            type(IERC721CreatorExtensionApproveTransfer).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721CreatorExtensionApproveTransfer-setApproveTransfer}\\n     */\\n    function setApproveTransfer(address creator, bool enabled)\\n        external\\n        override\\n        adminRequired\\n    {\\n        require(\\n            ERC165Checker.supportsInterface(\\n                creator,\\n                type(IERC721CreatorCore).interfaceId\\n            ),\\n            \\\"creator must implement IERC721CreatorCore\\\"\\n        );\\n        IERC721CreatorCore(creator).setApproveTransferExtension(enabled);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/burnNRedeem/libraries/SingleCreatorBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"../core/IERC721CreatorCore.sol\\\";\\n\\nimport \\\"./LegacyInterfaces.sol\\\";\\n\\nabstract contract SingleCreatorBase {\\n    address internal _creator;\\n}\\n\\n/**\\n * @dev Extension that only uses a single creator contract instance\\n */\\nabstract contract ERC721SingleCreatorExtension is SingleCreatorBase {\\n    constructor(address creator) {\\n        require(\\n            ERC165Checker.supportsInterface(\\n                creator,\\n                type(IERC721CreatorCore).interfaceId\\n            ) ||\\n                ERC165Checker.supportsInterface(\\n                    creator,\\n                    LegacyInterfaces.IERC721CreatorCore_v1\\n                ),\\n            \\\"Redeem: Minting reward contract must implement IERC721CreatorCore\\\"\\n        );\\n        _creator = creator;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/burnNRedeem/extensions/ERC721/ERC721CreatorExtension.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"../CreatorExtension.sol\\\";\\n\\n/**\\n * @dev Base ERC721 creator extension variables\\n */\\nabstract contract ERC721CreatorExtension is CreatorExtension {\\n    /**\\n     * @dev Legacy extension interface identifiers (see CreatorExtension for more)\\n     *\\n     * {IERC165-supportsInterface} needs to return 'true' for this interface\\n     * in order backwards compatible with older creator contracts\\n     */\\n\\n    // Required to be recognized as a contract to receive onBurn for older creator contracts\\n    bytes4 internal constant LEGACY_ERC721_EXTENSION_BURNABLE_INTERFACE =\\n        0xf3f4e68b;\\n}\\n\"\r\n    },\r\n    \"contracts/burnNRedeem/extensions/ERC721/IERC721CreatorExtensionApproveTransfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * Implement this if you want your extension to approve a transfer\\n */\\ninterface IERC721CreatorExtensionApproveTransfer is IERC165 {\\n    /**\\n     * @dev Set whether or not the creator will check the extension for approval of token transfer\\n     */\\n    function setApproveTransfer(address creator, bool enabled) external;\\n\\n    /**\\n     * @dev Called by creator contract to approve a transfer\\n     */\\n    function approveTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"redemptionRate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"redemptionMax\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AdminApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AdminRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"approved\",\"type\":\"bool[]\"}],\"name\":\"UpdateApprovedContracts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"minTokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"maxTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"UpdateApprovedTokenRanges\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"approved\",\"type\":\"bool[]\"}],\"name\":\"UpdateApprovedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_checkToken\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_burnToken\",\"type\":\"uint16\"}],\"name\":\"forgeWith\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"approveAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approveTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"checkClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"drain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_checkToken\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_burnToken\",\"type\":\"uint16\"}],\"name\":\"forge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forge_start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmins\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"how_long_more\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Days\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Hours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Minutes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Seconds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mintNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"recoverERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"redeemable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionMax\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionRemaining\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tracker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"retrieve721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"revokeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setApproveTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recoverer\",\"type\":\"address\"}],\"name\":\"setERC721Recoverable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"approved\",\"type\":\"bool[]\"}],\"name\":\"updateApprovedContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"minTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"updateApprovedTokenRanges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"approved\",\"type\":\"bool[]\"}],\"name\":\"updateApprovedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AokiForge","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000001ba93514e5eb642ec63e95ef7787b0edd403add00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000053","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}