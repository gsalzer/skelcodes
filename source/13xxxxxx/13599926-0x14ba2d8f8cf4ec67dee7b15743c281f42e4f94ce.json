{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-10-30\r\n*/\r\n\r\n// File: contracts/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    // constructor () internal {\r\n    //     _owner = msg.sender;\r\n    //     emit OwnershipTransferred(address(0), _owner);\r\n    // }\r\n    function ownerInit() internal {\r\n         _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function mint(address recipient, uint256 amount) external returns(bool);\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n      function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function blindBox(address seller, string calldata tokenURI, bool flag, address to, string calldata ownerId) external returns (uint256);\r\n    function mintAliaForNonCrypto(uint256 price, address from) external returns (bool);\r\n    function nonCryptoNFTVault() external returns(address);\r\n    function mainPerecentage() external returns(uint256);\r\n    function authorPercentage() external returns(uint256);\r\n    function platformPerecentage() external returns(uint256);\r\n    function updateAliaBalance(string calldata stringId, uint256 amount) external returns(bool);\r\n    function getSellDetail(uint256 tokenId) external view returns (address, uint256, uint256, address, uint256, uint256, uint256);\r\n    function getNonCryptoWallet(string calldata ownerId) external view returns(uint256);\r\n    function getNonCryptoOwner(uint256 tokenId) external view returns(string memory);\r\n    function adminOwner(address _address) external view returns(bool);\r\n     function getAuthor(uint256 tokenIdFunction) external view returns (address);\r\n     function _royality(uint256 tokenId) external view returns (uint256);\r\n     function getrevenueAddressBlindBox(string calldata info) external view returns(address);\r\n     function getboxNameByToken(uint256 token) external view returns(string memory);\r\n    //Revenue share\r\n    function addNonCryptoAuthor(string calldata artistId, uint256 tokenId, bool _isArtist) external returns(bool);\r\n    function transferAliaArtist(address buyer, uint256 price, address nftVaultAddress, uint256 tokenId ) external returns(bool);\r\n    function checkArtistOwner(string calldata artistId, uint256 tokenId) external returns(bool);\r\n    function checkTokenAuthorIsArtist(uint256 tokenId) external returns(bool);\r\n    function withdraw(uint) external;\r\n    function deposit() payable external;\r\n    // function approve(address spender, uint256 rawAmount) external;\r\n\r\n    // BlindBox ref:https://noborderz.slack.com/archives/C0236PBG601/p1633942033011800?thread_ts=1633941154.010300&cid=C0236PBG601\r\n    function isSellable (string calldata name) external view returns(bool);\r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n\r\n    function burn (uint256 tokenId) external;\r\n\r\n}\r\n\r\n// File: contracts/INFT.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n// import \"../openzeppelin-solidity/contracts/token/ERC721/IERC721Full.sol\";\r\n\r\ninterface INFT {\r\n    function transferFromAdmin(address owner, address to, uint256 tokenId) external;\r\n    function mintWithTokenURI(address to, string calldata tokenURI) external returns (uint256);\r\n    function getAuthor(uint256 tokenIdFunction) external view returns (address);\r\n    function updateTokenURI(uint256 tokenIdT, string calldata uriT) external;\r\n    //\r\n    function mint(address to, string calldata tokenURI) external returns (uint256);\r\n    function transferOwnership(address newOwner) external;\r\n    function ownerOf(uint256 tokenId) external view returns(address);\r\n    function transferFrom(address owner, address to, uint256 tokenId) external;\r\n}\r\n\r\n// File: contracts/IFactory.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract IFactory {\r\n    function create(string calldata name_, string calldata symbol_, address owner_) external returns(address);\r\n    function getCollections(address owner_) external view returns(address [] memory);\r\n}\r\n\r\n// File: contracts/LPInterface.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface LPInterface {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n   \r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/Proxy/DexStorage.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n/**\r\n * @title DexStorage\r\n * @dev Defining dex storage for the proxy contract.\r\n */\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\ncontract DexStorage {\r\n  using SafeMath for uint256;\r\n   address x; // dummy variable, never set or use its value in any logic contracts. It keeps garbage value & append it with any value set on it.\r\n   IERC20 ALIA;\r\n   INFT XNFT;\r\n   IFactory factory;\r\n   IERC20 OldNFTDex;\r\n   IERC20 BUSD;\r\n   IERC20 BNB;\r\n   struct RDetails {\r\n       address _address;\r\n       uint256 percentage;\r\n   }\r\n  struct AuthorDetails {\r\n    address _address;\r\n    uint256 royalty;\r\n    string ownerId;\r\n    bool isSecondry;\r\n  }\r\n  // uint256[] public sellList; // this violates generlization as not tracking tokenIds agains nftContracts/collections but ignoring as not using it in logic anywhere (uncommented)\r\n  mapping (uint256 => mapping(address => AuthorDetails)) internal _tokenAuthors;\r\n  mapping (address => bool) public adminOwner;\r\n  address payable public platform;\r\n  address payable public authorVault;\r\n  uint256 internal platformPerecentage;\r\n  struct fixedSell {\r\n  //  address nftContract; // adding to support multiple NFT contracts buy/sell \r\n    address seller;\r\n    uint256 price;\r\n    uint256 timestamp;\r\n    bool isDollar;\r\n    uint256 currencyType;\r\n  }\r\n  // stuct for auction\r\n  struct auctionSell {\r\n    address seller;\r\n    address nftContract;\r\n    address bidder;\r\n    uint256 minPrice;\r\n    uint256 startTime;\r\n    uint256 endTime;\r\n    uint256 bidAmount;\r\n    bool isDollar;\r\n    uint256 currencyType;\r\n    // address nftAddress;\r\n  }\r\n\r\n  \r\n  // tokenId => nftContract => fixedSell\r\n  mapping (uint256 => mapping (address  => fixedSell)) internal _saleTokens;\r\n  mapping(address => bool) public _supportNft;\r\n  // tokenId => nftContract => auctionSell\r\n  mapping(uint256 => mapping ( address => auctionSell)) internal _auctionTokens;\r\n  address payable public nonCryptoNFTVault;\r\n  // tokenId => nftContract => ownerId\r\n  mapping (uint256=> mapping (address => string)) internal _nonCryptoOwners;\r\n  struct balances{\r\n    uint256 bnb;\r\n    uint256 Alia;\r\n    uint256 BUSD;\r\n  }\r\n  mapping (string => balances) internal _nonCryptoWallet;\r\n \r\n  LPInterface LPAlia;\r\n  LPInterface LPBNB;\r\n  uint256 public adminDiscount;\r\n  address admin;\r\n  mapping (string => address) internal revenueAddressBlindBox;\r\n  mapping (uint256=>string) internal boxNameByToken;\r\n   bool public collectionConfig;\r\n  uint256 public countCopy;\r\n  mapping (uint256=> mapping( address => mapping(uint256 => bool))) _allowedCurrencies;\r\n  IERC20 token;\r\n//   struct offer {\r\n//       address _address;\r\n//       string ownerId;\r\n//       uint256 currencyType;\r\n//       uint256 price;\r\n//   }\r\n//   struct offers {\r\n//       uint256 count;\r\n//       mapping (uint256 => offer) _offer;\r\n//   }\r\n//   mapping(uint256 => mapping(address => offers)) _offers;\r\n  uint256[] allowedArray;\r\n\r\n}\r\n\r\n// File: contracts/CollectionDex.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract CollectionDex is Ownable, DexStorage {\r\n   \r\n  event SellNFT(address indexed from, address nft_a, uint256 tokenId, address seller, uint256 price, uint256 royalty, uint256 baseCurrency, uint256[] allowedCurrencies);\r\n  event OnAuction(address indexed seller, address nftContract, uint256 indexed tokenId, uint256 startPrice, uint256 endTime, uint256 baseCurrency);\r\n\r\n  event Collection(address indexed creater, address collection, string name, string symbol);\r\n  event CollectionsConfigured(address indexed xCollection, address factory);\r\n  event MintWithTokenURI(address indexed collection, uint256 indexed tokenId, address minter, string tokenURI);\r\n\r\n\r\n  function() external payable {}\r\n\r\n  /***\r\n* @dev function to create & deploy user-defined collection\r\n* @param name_ - name of the collection\r\n* @param symbol_ - symbol of collection\r\n*\r\n */\r\n  function createCollection(string memory name_, string memory symbol_) public {\r\n    address col = factory.create(name_, symbol_, msg.sender);\r\n    _supportNft[col] = true;\r\n    emit Collection(msg.sender, col, name_, symbol_);\r\n  }\r\n  /***\r\n* @dev function to mint NFTs on given user-defined collection\r\n* @param collection - address of collection to whom NFT to be created/minted\r\n* @param to - receiving account of minted NFT\r\n* @param tokenURI - metadata URI link of NFT\r\n*\r\n */\r\n  function mintAndSellCollectionNFT(address collection, address to, string memory tokenURI, uint256 price, uint256 baseCurrency, uint256[] memory allowedCurrencies ) isValid(collection) public {\r\n \r\n    address[] memory collections = factory.getCollections(msg.sender);\r\n   \r\n    bool flag;\r\n    for (uint256 i = 0; i < collections.length; i++){\r\n        if (collections[i] == collection){\r\n          flag = true;\r\n          break;\r\n        }\r\n    }\r\n    require(flag, \"unauthorized: invalid owner/collection\");\r\n    // for (uint256 j = 0; j < quantity; j++){\r\n       uint256 tokenId =  INFT(collection).mint(to, string(abi.encodePacked(\"https://ipfs.infura.io:5001/api/v0/cat?arg=\", tokenURI)));\r\n        sellNFT(collection, tokenId, to, price, baseCurrency, allowedCurrencies);\r\n    // }\r\n    emit MintWithTokenURI(collection, tokenId, msg.sender, tokenURI);\r\n  }\r\n  function mintWithCollection(address collection, address to, string memory tokenURI ) isValid(collection) public {\r\n \r\n    address[] memory collections = factory.getCollections(msg.sender);\r\n   \r\n    bool flag;\r\n    for (uint256 i = 0; i < collections.length; i++){\r\n        if (collections[i] == collection){\r\n          flag = true;\r\n          break;\r\n        }\r\n    }\r\n    require(flag, \"unauthorized: invalid owner/collection\");\r\n    // for (uint256 j = 0; j < quantity; j++){\r\n       uint256 tokenId =  INFT(collection).mint(to, string(abi.encodePacked(\"https://ipfs.infura.io:5001/api/v0/cat?arg=\", tokenURI)));\r\n    // }\r\n    emit MintWithTokenURI(collection, tokenId, msg.sender, tokenURI);\r\n  }\r\n  function mintAndAuctionCollectionNFT(address collection, address to, string memory tokenURI, uint256 _minPrice, uint256 baseCurrency, uint256 _endTime ) isValid(collection) public {\r\n \r\n    address[] memory collections = factory.getCollections(msg.sender);\r\n   \r\n    bool flag;\r\n    for (uint256 i = 0; i < collections.length; i++){\r\n        if (collections[i] == collection){\r\n          flag = true;\r\n          break;\r\n        }\r\n    }\r\n    require(flag, \"unauthorized: invalid owner/collection\");\r\n    // for (uint256 j = 0; j < quantity; j++){\r\n       uint256 tokenId =  INFT(collection).mint(to, string(abi.encodePacked(\"https://ipfs.infura.io:5001/api/v0/cat?arg=\", tokenURI)));\r\n       setOnAuction(collection, tokenId, _minPrice, baseCurrency, _endTime);\r\n    // }\r\n       emit MintWithTokenURI(collection, tokenId, msg.sender, tokenURI);\r\n\r\n  }\r\n  /***\r\n* @dev function to transfer ownership of user-defined collection\r\n* @param collection - address of collection whose ownership to be transferred\r\n* @param newOwner - new owner to whom ownerhsip to be transferred\r\n* @notice only owner of DEX can invoke this function\r\n*\r\n */\r\n  function transferCollectionOwnership(address collection, address newOwner) onlyOwner isValid(collection) public {\r\n\r\n    INFT(collection).transferOwnership(newOwner);\r\n  }\r\n  \r\n  // modifier to check if given collection is supported by DEX\r\n  modifier isValid( address collection_) {\r\n    require(_supportNft[collection_],\"unsupported collection\");\r\n    _;\r\n  }\r\n  \r\n  function sellNFT(address nft_a,uint256 tokenId, address seller, uint256 price, uint256 baseCurrency, uint256[] memory allowedCurrencies) isValid(nft_a) public{\r\n    require(msg.sender == admin || (msg.sender == seller && INFT(nft_a).ownerOf(tokenId) == seller), \"101\");\r\n    // string storage boxName = boxNameByToken[tokenId];\r\n    uint256 royality;\r\n    require(baseCurrency <= 1, \"121\");\r\n    // require(revenueAddressBlindBox[boxName] == address(0x0) || IERC20(0x313Df3fE7c83d927D633b9a75e8A9580F59ae79B).isSellable(boxName), \"112\");\r\n    bool isValid = true;\r\n    for(uint256 i = 0; i< allowedCurrencies.length; i++){\r\n      if(allowedCurrencies[i] > 1){\r\n        isValid = false;\r\n      }\r\n      _allowedCurrencies[tokenId][nft_a][allowedCurrencies[i]] = true;\r\n    }\r\n    require(isValid,\"122\");\r\n    _saleTokens[tokenId][nft_a].seller = seller;\r\n    _saleTokens[tokenId][nft_a].price = price;\r\n    _saleTokens[tokenId][nft_a].timestamp = now;\r\n    // _saleTokens[tokenId][nft_a].isDollar = isDollar;\r\n    _saleTokens[tokenId][nft_a].currencyType = baseCurrency;\r\n    // need to check if it voilates generalization\r\n    // sellList.push(tokenId);\r\n    // dealing special case of escrowing for xanalia collection i.e XNFT\r\n    if(nft_a == address(XNFT)){\r\n         msg.sender == admin ? XNFT.transferFromAdmin(seller, address(this), tokenId) : XNFT.transferFrom(seller, address(this), tokenId);        \r\n          royality =  _tokenAuthors[tokenId][nft_a].royalty;\r\n    } else {\r\n      INFT(nft_a).transferFrom(seller, address(this), tokenId);\r\n      royality =  0; // making it zero as not setting royality for user defined collection's NFT\r\n    }\r\n    \r\n    emit SellNFT(msg.sender, nft_a, tokenId, seller, price, royality, baseCurrency, allowedCurrencies);\r\n  }\r\n\r\n\r\n\r\n function setOnAuction(address _contract,uint256 _tokenId, uint256 _minPrice, uint256 baseCurrency, uint256 _endTime) isValid(_contract) public {\r\n  require(INFT(_contract).ownerOf(_tokenId) == msg.sender, \"102\");\r\n  string storage boxName = boxNameByToken[_tokenId];\r\n//   require(revenueAddressBlindBox[boxName] == address(0x0) || IERC20(0x313Df3fE7c83d927D633b9a75e8A9580F59ae79B).isSellable(boxName), \"112\");\r\n  require(baseCurrency <= 1, \"121\");\r\n    // require(revenueAddressBlindBox[boxName] == address(0x0) || IERC20(0x313Df3fE7c83d927D633b9a75e8A9580F59ae79B).isSellable(boxName), \"112\");\r\n  _auctionTokens[_tokenId][_contract].seller = msg.sender;\r\n      _auctionTokens[_tokenId][_contract].nftContract = _contract;\r\n      _auctionTokens[_tokenId][_contract].minPrice = _minPrice;\r\n      _auctionTokens[_tokenId][_contract].startTime = now;\r\n      _auctionTokens[_tokenId][_contract].endTime = _endTime;\r\n      _auctionTokens[_tokenId][_contract].currencyType = baseCurrency;\r\n      INFT(_contract).transferFrom(msg.sender, address(this), _tokenId);\r\n    emit OnAuction(msg.sender, _contract, _tokenId, _minPrice, _endTime, baseCurrency);\r\n }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"name_\",\"type\":\"string\"},{\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"createCollection\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"collection\",\"type\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferCollectionOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_supportNft\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"name\":\"baseCurrency\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setOnAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"collection\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenURI\",\"type\":\"string\"},{\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"name\":\"baseCurrency\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"mintAndAuctionCollectionNFT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"collection\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenURI\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"baseCurrency\",\"type\":\"uint256\"},{\"name\":\"allowedCurrencies\",\"type\":\"uint256[]\"}],\"name\":\"mintAndSellCollectionNFT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countCopy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectionConfig\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonCryptoNFTVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nft_a\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"baseCurrency\",\"type\":\"uint256\"},{\"name\":\"allowedCurrencies\",\"type\":\"uint256[]\"}],\"name\":\"sellNFT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminDiscount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"collection\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mintWithCollection\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nft_a\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"royalty\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"baseCurrency\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"allowedCurrencies\",\"type\":\"uint256[]\"}],\"name\":\"SellNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"baseCurrency\",\"type\":\"uint256\"}],\"name\":\"OnAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"creater\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"Collection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"xCollection\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"CollectionsConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"MintWithTokenURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CollectionDex","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a3c6a35e28682199cf656cb6493250b069938b5f382262350fb67b461999ae82"}]}