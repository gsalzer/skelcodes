{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CozyInvestRibbon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/ICozy.sol\\\";\\nimport \\\"./interfaces/ICozyInvest.sol\\\";\\nimport \\\"./lib/CozyInvestHelpers.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ninterface IRibbon {\\n  function depositETH() external payable;\\n\\n  function initiateWithdraw(uint256 numShares) external;\\n\\n  function withdrawInstantly(uint256 amount) external;\\n\\n  function completeWithdraw() external;\\n}\\n\\n/**\\n * @notice On-chain scripts for borrowing from Cozy and using the borrowed funds to\\n * supply to curve and then deposit into Ribbon\\n * @dev This contract is intended to be used by delegatecalling to it from a DSProxy\\n */\\ncontract CozyInvestRibbon is CozyInvestHelpers, ICozyInvest2 {\\n  using Address for address payable;\\n  using SafeERC20 for IERC20;\\n\\n  /// @notice The unprotected money market we borrow from / repay to\\n  address public immutable moneyMarket;\\n\\n  /// @notice The protection market we borrow from / repay to\\n  address public immutable protectionMarket;\\n\\n  /// @notice Maximillion contract for repaying ETH debt\\n  IMaximillion public constant maximillion = IMaximillion(0xf859A1AD94BcF445A406B892eF0d3082f4174088);\\n\\n  /// @notice Ribbon ETH theta vault contract address\\n  address public immutable ribbon = 0x25751853Eab4D0eB3652B5eB6ecB102A2789644B;\\n\\n  constructor(address _moneyMarket, address _protectionMarket) {\\n    moneyMarket = _moneyMarket;\\n    protectionMarket = _protectionMarket;\\n  }\\n\\n  /**\\n   * @notice Invest method for borrowing ETH and depositing it to Ribbon\\n   * @param _market Address of the market to borrow from\\n   * @param _borrowAmount Amount of underlying to borrow and invest\\n   */\\n  function invest(address _market, uint256 _borrowAmount) external {\\n    require((_market == address(moneyMarket) || _market == address(protectionMarket)), \\\"Invalid borrow market\\\");\\n    require(ICozyToken(_market).borrow(_borrowAmount) == 0, \\\"Borrow failed\\\");\\n\\n    IRibbon _ribbon = IRibbon(ribbon);\\n    _ribbon.depositETH{value: _borrowAmount}();\\n  }\\n\\n  /**\\n   * @notice Instantly withdraws funds from Ribbon that are available to withdraw.\\n   * @param _market Address of the market to repay debt to\\n   * @param _recipient Address where any leftover funds should be transferred\\n   * @param _withdrawAmount Amount of Curve receipt tokens to redeem\\n   */\\n  function withdrawInstantly(\\n    address _market,\\n    address _recipient,\\n    uint256 _withdrawAmount\\n  ) external payable {\\n    // 1. Borrow underlying from cozy\\n    require((_market == address(moneyMarket) || _market == address(protectionMarket)), \\\"Invalid borrow market\\\");\\n\\n    // 2. Withdraws instantly from ribbon\\n    IRibbon _ribbon = IRibbon(ribbon);\\n    _ribbon.withdrawInstantly(_withdrawAmount);\\n\\n    // 3. Pay back as much of the borrow as possible, excess ETH is refunded to `recipient`\\n    maximillion.repayBehalfExplicit{value: address(this).balance}(address(this), ICozyEther(_market));\\n\\n    // 4. Transfer any remaining funds to the user\\n    payable(_recipient).sendValue(address(this).balance);\\n  }\\n\\n  /**\\n   * @notice Initiates two-step divest method from Ribbon. completeWithdraw() must be called later once the next round has started.\\n   * @param _numShares Number of shares to divest\\n   */\\n  function divest(uint256 _numShares) external {\\n    IRibbon _ribbon = IRibbon(ribbon);\\n    _ribbon.initiateWithdraw(_numShares);\\n  }\\n\\n  /**\\n   * @notice Instantly withdraws funds from Ribbon that are available to withdraw. divest() must be called beforehand.\\n   * @param _market Address of the market to repay debt to\\n   * @param _recipient Address where any leftover funds should be transferred\\n   */\\n  function completeWithdraw(address _market, address _recipient) external {\\n    require((_market == address(moneyMarket) || _market == address(protectionMarket)), \\\"Invalid borrow market\\\");\\n\\n    // 1. Completes withdraw from Ribbon\\n    IRibbon _ribbon = IRibbon(ribbon);\\n    _ribbon.completeWithdraw();\\n\\n    // 2. Pay back as much of the borrow as possible, excess ETH is refunded to `recipient`\\n    maximillion.repayBehalfExplicit{value: address(this).balance}(address(this), ICozyEther(_market));\\n\\n    // 3. Transfer any remaining funds to the user\\n    payable(_recipient).sendValue(address(this).balance);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICozy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interfaces for Cozy contracts\\n */\\n\\ninterface ICozyShared {\\n  function underlying() external view returns (address);\\n\\n  function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n  function borrowBalanceCurrent(address account) external returns (uint256);\\n}\\n\\ninterface ICozyToken is ICozyShared {\\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n  function repayBorrow(uint256 repayAmount) external returns (uint256);\\n}\\n\\ninterface ICozyEther is ICozyShared {\\n  function repayBorrowBehalf(address borrower) external payable;\\n}\\n\\ninterface IMaximillion {\\n  function repayBehalfExplicit(address borrower, ICozyEther market) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICozyInvest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n/**\\n * @notice Interfaces for developing on-chain scripts for borrowing from the Cozy markets then supplying to\\n * investment opportunities in a single transaction\\n * @dev Contract developed from this interface are intended to be used by delegatecalling to it from a DSProxy\\n * @dev For interactions with the Cozy Protocol, ensure the return value is zero and revert otherwise. See\\n * the Cozy Protocol documentation on error codes for more info\\n */\\ninterface ICozyInvest1 {\\n  function invest(\\n    address _ethMarket,\\n    uint256 _borrowAmount,\\n    uint256 _minAmountOut\\n  ) external payable;\\n}\\n\\ninterface ICozyInvest2 {\\n  function invest(address _market, uint256 _borrowAmount) external;\\n}\\n\\ninterface ICozyInvest3 {\\n  // NOTE: Same signature as ICozyInvest1, but without the payable modifier\\n  function invest(\\n    address _ethMarket,\\n    uint256 _borrowAmount,\\n    uint256 _minAmountOut\\n  ) external;\\n}\\n\\ninterface ICozyInvest4 {\\n  function invest(\\n    address _market,\\n    uint256 _borrowAmount,\\n    uint256 _minToMint,\\n    uint256 _deadline\\n  ) external;\\n}\\n\\ninterface ICozyInvest5 {\\n  function invest(\\n    address _ethMarket,\\n    uint256 _borrowAmount,\\n    uint256 _minAmountOut\\n  ) external;\\n}\\n\\ninterface ICozyDivest1 {\\n  function divest(\\n    address _marketAddress,\\n    address _recipient,\\n    uint256 _redeemAmount,\\n    uint256 _curveMinAmountOut\\n  ) external payable;\\n}\\n\\ninterface ICozyDivest2 {\\n  // NOTE: Same signature as above (except for the payable part), but with different meanings of each input\\n  function divest(\\n    address _marketAddress,\\n    address _recipient,\\n    uint256 _withdrawAmount,\\n    uint256 _excessTokens\\n  ) external;\\n}\\n\\ninterface ICozyDivest3 {\\n  function divest(\\n    address _market,\\n    address _recipient,\\n    uint256 _yearnRedeemAmount,\\n    uint256 _curveMinAmountOut,\\n    uint256 _excessTokens\\n  ) external;\\n}\\n\\ninterface ICozyDivest4 {\\n  function divest(\\n    address _marketAddress,\\n    address _recipient,\\n    uint256 _withdrawAmount,\\n    uint256 _minWithdrawAmount,\\n    uint256 _deadline\\n  ) external payable;\\n}\\n\\ninterface ICozyDivest5 {\\n  function divest(\\n    address _marketAddress,\\n    address _recipient,\\n    uint256 _withdrawAmount,\\n    uint256 _excessTokens,\\n    uint256 _curveMinAmountOut\\n  ) external;\\n}\\n\\ninterface ICozyDivest6 {\\n  function divest(\\n    address _marketAddress,\\n    address _recipient,\\n    uint256 _withdrawAmount\\n  ) external payable;\\n}\\n\\ninterface ICozyReward {\\n  function claimRewards(address _recipient) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/CozyInvestHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/ICozy.sol\\\";\\nimport \\\"./TransferHelper.sol\\\";\\n\\nabstract contract CozyInvestHelpers {\\n\\n  /**\\n   * @notice Repays as much token debt as possible\\n   * @param _market Market to repay\\n   * @param _underlying That market's underlying token (can be obtained by a call, but passing it in saves gas)\\n   * @param _excessTokens Quantity to transfer from the caller into this address to ensure\\n   * the borrow can be repaid in full. Only required if you want to repay the full borrow amount and the\\n   * amount obtained from withdrawing from the invest opportunity will not cover the full debt. A value of zero\\n   * will not attempt to transfer tokens from the caller, and the transfer will not be attempted if it's not required\\n   */\\n  function executeMaxRepay(\\n    address _market,\\n    address _underlying,\\n    uint256 _excessTokens\\n  ) internal {\\n    // Pay back as much of the borrow as possible, excess is refunded to `recipient`\\n    uint256 _borrowBalance = ICozyToken(_market).borrowBalanceCurrent(address(this));\\n    uint256 _initialBalance = IERC20(_underlying).balanceOf(address(this));\\n    if (_initialBalance < _borrowBalance && _excessTokens > 0) {\\n      TransferHelper.safeTransferFrom(_underlying, msg.sender, address(this), _excessTokens);\\n    }\\n    uint256 _balance = _initialBalance + _excessTokens; // this contract's current balance\\n    uint256 _repayAmount = _balance >= _borrowBalance ? type(uint256).max : _balance;\\n\\n    TransferHelper.safeApprove(_underlying, address(_market), _repayAmount);\\n    require(ICozyToken(_market).repayBorrow(_repayAmount) == 0, \\\"Repay failed\\\");\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Based on https://github.com/Uniswap/v3-periphery/blob/80f26c86c57b8a5e4b913f42844d4c8bd274d058/contracts/libraries/TransferHelper.sol\\n */\\nlibrary TransferHelper {\\n  /**\\n   * @notice Transfers tokens from the targeted address to the given destination\\n   * @notice Errors with 'STF' if transfer fails\\n   * @param token The contract address of the token to be transferred\\n   * @param from The originating address from which the tokens will be transferred\\n   * @param to The destination address of the transfer\\n   * @param value The amount to be transferred\\n   */\\n  function safeTransferFrom(\\n      address token,\\n      address from,\\n      address to,\\n      uint256 value\\n  ) internal {\\n      (bool success, bytes memory data) =\\n          token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n      require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"Transfer from failed\\\");\\n  }\\n\\n  /**\\n   * @notice Transfers tokens from msg.sender to a recipient\\n   * @dev Errors with ST if transfer fails\\n   * @param token The contract address of the token which will be transferred\\n   * @param to The recipient of the transfer\\n   * @param value The value of the transfer\\n   */\\n  function safeTransfer(\\n      address token,\\n      address to,\\n      uint256 value\\n  ) internal {\\n      (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n      require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"Transfer failed\\\");\\n  }\\n\\n  /**\\n   * @notice Approves the stipulated contract to spend the given allowance in the given token\\n   * @dev Errors with 'SA' if transfer fails\\n   * @param token The contract address of the token to be approved\\n   * @param to The target of the approval\\n   * @param value The amount of the given token the target will be allowed to spend\\n   */\\n  function safeApprove(\\n      address token,\\n      address to,\\n      uint256 value\\n  ) internal {\\n      (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n      require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"Approve failed\\\");\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_moneyMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protectionMarket\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"completeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numShares\",\"type\":\"uint256\"}],\"name\":\"divest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximillion\",\"outputs\":[{\"internalType\":\"contract IMaximillion\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moneyMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ribbon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawInstantly\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"CozyInvestRibbon","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"000000000000000000000000f8ec0f87036565d6b2b19780a54996c3b03e91ea00000000000000000000000040340fdce2310fdea42589c4a9fe029f1ed80730","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}