{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Exchange_V7.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"./interface/IAzimuth.sol\\\";\\nimport \\\"./interface/IEcliptic.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ncontract UrbitexExchangeV2 is Context, Ownable {\\n\\n    // updated 2021-12-30\\n    // urbitex.io \\n\\n    //  azimuth: points state data store\\n    //\\n    IAzimuth public azimuth;\\n    \\n    // fee: exchange transaction fee \\n    // \\n    uint32 public fee;\\n\\n    // ListedAsset: struct which stores the price and seller's address for a point listed in the marketplace\\n    // price as uint96 will pack 160 bit address and 96 bit price into one storage slot, saving gas\\n    struct ListedAsset {\\n        address addr;\\n        uint96 price;\\n        address reservedBuyer;\\n    }\\n\\n    // assets: registry which stores the ListedAsset entries\\n    //\\n    mapping(uint32 => ListedAsset) assets;\\n\\n    // EVENTS\\n\\n    event MarketPurchase(\\n        address indexed _from,\\n        address indexed _to,\\n        uint32 _point,\\n        uint96 _price\\n    );\\n\\n    event ListingRemoved(\\n        uint32 _point\\n    );\\n\\n    event ListingAdded(\\n        uint32 _point,\\n        uint96 _price \\n    );\\n\\n    // IMPLEMENTATION\\n\\n    //  constructor(): configure the points data store and set exchange fee\\n    //\\n    constructor(IAzimuth _azimuth, uint32 _fee) \\n        payable \\n    {     \\n        azimuth = _azimuth;\\n        fee = _fee;\\n    }\\n\\n    // setRegistryEntry(): utility function to add or remove entries in the registry\\n    function setRegistryEntry(uint32 _point, address _address, uint96 _price, address _reservedBuyer) internal\\n    {\\n        ListedAsset storage asset = assets[_point];\\n\\n        asset.addr = _address;\\n        asset.price = _price;\\n        asset.reservedBuyer = _reservedBuyer;\\n    }\\n\\n    //  purchase(): purchase and transfer point from the seller to the buyer\\n    //\\n    function purchase(uint32 _point)\\n        external\\n        payable\\n    {\\n        IEcliptic ecliptic = IEcliptic(azimuth.owner());\\n        \\n        // get the point's owner \\n        address payable seller = payable(azimuth.getOwner(_point));\\n\\n        // get the point's information from the registry\\n        ListedAsset storage asset = assets[_point];\\n\\n        address reservedBuyer = asset.reservedBuyer;\\n        address addr = asset.addr;\\n        uint96 price = asset.price;\\n\\n        // if a reserved buyer has been set, check that it matches _msgSender()\\n        require(reservedBuyer == address(0) || reservedBuyer == _msgSender());\\n        \\n        // check that the seller's address in the registry matches the point's current owner\\n        require(addr == seller);\\n\\n        // buyer must pay the exact price as what's stored in the registry for that point\\n        require(uint96(msg.value) == price);\\n\\n        // in order to save on gas fees, a check that the seller has approved the exchange as a \\n        // transfer proxy can happen off-chain. \\n\\n        // when all conditions are met, transfer the point from the seller to the buyer\\n        ecliptic.transferFrom(seller, _msgSender(), _point); \\n\\n        // clear the values for that point in the registry\\n        delete assets[_point];\\n\\n        // deduct exchange fee and transfer remaining amount to the seller\\n        Address.sendValue(seller, (1e4 - fee) / 1e4);\\n\\n        emit MarketPurchase(seller, _msgSender(), _point, price);\\n    }\\n\\n    //  safePurchase(): Exactly like the purchase() function except with validation checks\\n    //\\n    function safePurchase(uint32 _point, bool _unbooted, uint32 _spawnCount)\\n        external\\n        payable\\n    {\\n\\n        // make sure the booted status matches the buyer's expectations\\n        require(_unbooted == (azimuth.getKeyRevisionNumber(_point) == 0));\\n\\n        // make sure the number of spawned child points matches the buyer's expectations\\n        require(_spawnCount == azimuth.getSpawnCount(_point));\\n\\n        // get the current ecliptic contract\\n        IEcliptic ecliptic = IEcliptic(azimuth.owner());        \\n\\n        // get the point's owner \\n        address payable seller = payable(azimuth.getOwner(_point));\\n\\n        // get the point's information from the registry\\n        ListedAsset storage asset = assets[_point];\\n        \\n        address reservedBuyer = asset.reservedBuyer;\\n        address addr = asset.addr;\\n        uint96 price = asset.price;\\n\\n        // if a reserved buyer has been set, check that it matches _msgSender()\\n        require(reservedBuyer == address(0) || reservedBuyer == _msgSender(), \\\"Not reserved buyer\\\");\\n\\n        // check that the address in the registry matches the point's current owner\\n        require(addr == seller, \\\"invalid listing\\\");\\n\\n        // buyer must pay the exact price as what's stored in the registry for that point\\n        require(msg.value == price, \\\"invalid price\\\");\\n\\n        // in order to save on gas fees, a check that the seller has approved the exchange as a \\n        // transfer proxy can happen off-chain. \\n\\n        // when all conditions are met, transfer the point from the seller to the buyer\\n        ecliptic.transferFrom(seller, _msgSender(), _point); \\n\\n        // clear the values for that point in the registry\\n        delete assets[_point];\\n\\n        // deduct exchange fee and transfer remaining amount to the seller\\n        Address.sendValue(seller, (1e4 - fee) / 1e4);\\n\\n        emit MarketPurchase(seller, _msgSender(), _point, price);\\n    }\\n\\n    // addListing(): add a point to the registry, including its corresponding price and owner address.\\n    // optional reserved buyer address can be included. \\n    //\\n    function addListing(uint32 _point, uint96 _price, address _reservedBuyer) external\\n    {\\n        // intentionally using isOwner() instead of canTransfer(), which excludes third-party proxy addresses.\\n        // the exchange owner also has no ability to list anyone else's assets, it can strictly only be the point owner.\\n        // \\n        require(azimuth.isOwner(_point, _msgSender()), \\\"not owner\\\");\\n\\n        // add the price of the point and the seller address to the registry\\n        //         \\n        setRegistryEntry(_point, _msgSender(), _price, _reservedBuyer);        \\n        \\n        emit ListingAdded(_point, _price);\\n\\n    }\\n\\n    // removeListing(): clear the information for this point in the registry. This function has also been made available\\n    // to the exchange owner to remove stale listings.\\n    //\\n    function removeListing(uint32 _point) external \\n    {   \\n        require(azimuth.isOwner(_point, _msgSender()) || _msgSender() == owner(), \\\"not owner\\\");\\n        \\n        delete assets[_point];\\n\\n        emit ListingRemoved(_point);\\n    }\\n\\n    // getAssetInfo(): check the listed price and seller address of a point \\n    // \\n    function getAssetInfo(uint32 _point) external view returns (address, uint96, address) {\\n        return (assets[_point].addr, assets[_point].price, assets[_point].reservedBuyer);\\n    }\\n\\n    // EXCHANGE OWNER OPERATIONS\\n             \\n    function withdraw(address payable _target) external onlyOwner  {\\n        require(address(0) != _target);\\n        Address.sendValue(_target, address(this).balance);\\n    }\\n\\n    function close(address payable _target) external onlyOwner  {\\n        require(address(0) != _target);\\n        selfdestruct(_target);\\n    }\\n}\"\r\n    },\r\n    \"contracts/interface/IAzimuth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\ninterface IAzimuth {\\n    function owner() external returns (address);\\n    function isSpawnProxy(uint32, address) external returns (bool);\\n    function hasBeenLinked(uint32) external returns (bool);\\n    function getPrefix(uint32) external returns (uint16);\\n    function getOwner(uint32) view external returns (address);\\n    function canTransfer(uint32, address) view external returns (bool);\\n    function isOwner(uint32, address) view external returns (bool);\\n    function getKeyRevisionNumber(uint32 _point) view external returns(uint32);\\n    function getSpawnCount(uint32 _point) view external returns(uint32);\\n}    \\n\"\r\n    },\r\n    \"contracts/interface/IEcliptic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\ninterface IEcliptic {\\n    function isApprovedForAll(address, address) external returns (bool);\\n    function transferFrom(address, address, uint256) external;\\n    function spawn(uint32, address) external;\\n    function transferPoint(uint32, address, bool) external;\\n\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IAzimuth\",\"name\":\"_azimuth\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_fee\",\"type\":\"uint32\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_point\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"_price\",\"type\":\"uint96\"}],\"name\":\"ListingAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_point\",\"type\":\"uint32\"}],\"name\":\"ListingRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_point\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"_price\",\"type\":\"uint96\"}],\"name\":\"MarketPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_point\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"_price\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_reservedBuyer\",\"type\":\"address\"}],\"name\":\"addListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"azimuth\",\"outputs\":[{\"internalType\":\"contract IAzimuth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_point\",\"type\":\"uint32\"}],\"name\":\"getAssetInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_point\",\"type\":\"uint32\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_point\",\"type\":\"uint32\"}],\"name\":\"removeListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_point\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"_unbooted\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"_spawnCount\",\"type\":\"uint32\"}],\"name\":\"safePurchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UrbitexExchangeV2","CompilerVersion":"v0.8.11+commit.d7f03943","OptimizationUsed":"1","Runs":"100000","ConstructorArguments":"000000000000000000000000223c067f8cf28ae173ee5cafea60ca44c335fecb000000000000000000000000000000000000000000000000000000000000000f","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}