{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/registry/index.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title StakeAllIndex\\n * @dev Main Contract For DeFi Smart Accounts. This is also a factory contract, Which deploys new Smart Account.\\n * Also Registry for DeFi Smart Accounts.\\n */\\n\\ninterface AccountInterface {\\n    function version() external view returns (uint256);\\n\\n    function enable(address authority) external;\\n\\n    function cast(\\n        address[] calldata _targets,\\n        bytes[] calldata _datas,\\n        address _origin\\n    ) external payable returns (bytes32[] memory responses);\\n}\\n\\ninterface ListInterface {\\n    function init(address _account) external;\\n}\\n\\ncontract AddressIndex {\\n    event LogNewMaster(address indexed master);\\n    event LogUpdateMaster(address indexed master);\\n    event LogNewCheck(uint256 indexed accountVersion, address indexed check);\\n    event LogNewAccount(\\n        address indexed _newAccount,\\n        address indexed _connectors,\\n        address indexed _check\\n    );\\n\\n    // New Master Address.\\n    address private newMaster;\\n    // Master Address.\\n    address public master;\\n    // List Registry Address.\\n    address public list;\\n\\n    // Connectors Modules(Account Module Version => Connectors Registry Module Address).\\n    mapping(uint256 => address) public connectors;\\n    // Check Modules(Account Module Version => Check Module Address).\\n    mapping(uint256 => address) public check;\\n    // Account Modules(Account Module Version => Account Module Address).\\n    mapping(uint256 => address) public account;\\n    // Version Count of Account Modules.\\n    uint256 public versionCount;\\n\\n    /**\\n     * @dev Throws if the sender not is Master Address.\\n     */\\n    modifier isMaster() {\\n        require(msg.sender == master, \\\"not-master\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Change the Master Address.\\n     * @param _newMaster New Master Address.\\n     */\\n    function changeMaster(address _newMaster) external isMaster {\\n        require(_newMaster != master, \\\"already-a-master\\\");\\n        require(_newMaster != address(0), \\\"not-valid-address\\\");\\n        require(newMaster != _newMaster, \\\"already-a-new-master\\\");\\n        newMaster = _newMaster;\\n        emit LogNewMaster(_newMaster);\\n    }\\n\\n    function updateMaster() external {\\n        require(newMaster != address(0), \\\"not-valid-address\\\");\\n        require(msg.sender == newMaster, \\\"not-master\\\");\\n        master = newMaster;\\n        newMaster = address(0);\\n        emit LogUpdateMaster(master);\\n    }\\n\\n    /**\\n     * @dev Change the Check Address of a specific Account Module version.\\n     * @param accountVersion Account Module version.\\n     * @param _newCheck The New Check Address.\\n     */\\n    function changeCheck(uint256 accountVersion, address _newCheck)\\n        external\\n        isMaster\\n    {\\n        require(_newCheck != check[accountVersion], \\\"already-a-check\\\");\\n        check[accountVersion] = _newCheck;\\n        emit LogNewCheck(accountVersion, _newCheck);\\n    }\\n\\n    /**\\n     * @dev Add New Account Module.\\n     * @param _newAccount The New Account Module Address.\\n     * @param _connectors Connectors Registry Module Address.\\n     * @param _check Check Module Address.\\n     */\\n    function addNewAccount(\\n        address _newAccount,\\n        address _connectors,\\n        address _check\\n    ) external isMaster {\\n        require(_newAccount != address(0), \\\"not-valid-address\\\");\\n        versionCount++;\\n        require(\\n            AccountInterface(_newAccount).version() == versionCount,\\n            \\\"not-valid-version\\\"\\n        );\\n        account[versionCount] = _newAccount;\\n        if (_connectors != address(0)) connectors[versionCount] = _connectors;\\n        if (_check != address(0)) check[versionCount] = _check;\\n        emit LogNewAccount(_newAccount, _connectors, _check);\\n    }\\n}\\n\\ncontract CloneFactory is AddressIndex {\\n    /**\\n     * @dev Clone a new Account Module.\\n     * @param version Account Module version to clone.\\n     */\\n    function createClone(uint256 version) internal returns (address result) {\\n        bytes20 targetBytes = bytes20(account[version]);\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(\\n                clone,\\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\\n            )\\n            mstore(add(clone, 0x14), targetBytes)\\n            mstore(\\n                add(clone, 0x28),\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\n            )\\n            result := create(0, clone, 0x37)\\n        }\\n    }\\n\\n    /**\\n     * @dev Check if Account Module is a clone.\\n     * @param version Account Module version.\\n     * @param query Account Module Address.\\n     */\\n    function isClone(uint256 version, address query)\\n        external\\n        view\\n        returns (bool result)\\n    {\\n        bytes20 targetBytes = bytes20(account[version]);\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(\\n                clone,\\n                0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000\\n            )\\n            mstore(add(clone, 0xa), targetBytes)\\n            mstore(\\n                add(clone, 0x1e),\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\n            )\\n\\n            let other := add(clone, 0x40)\\n            extcodecopy(query, other, 0, 0x2d)\\n            result := and(\\n                eq(mload(clone), mload(other)),\\n                eq(mload(add(clone, 0xd)), mload(add(other, 0xd)))\\n            )\\n        }\\n    }\\n}\\n\\ncontract StakeAllIndex is CloneFactory {\\n    event LogAccountCreated(\\n        address sender,\\n        address indexed owner,\\n        address indexed account,\\n        address indexed origin\\n    );\\n\\n    /**\\n     * @dev Create a new DeFi Smart Account for a user and run cast function in the new Smart Account.\\n     * @param _owner Owner of the Smart Account.\\n     * @param accountVersion Account Module version.\\n     * @param _targets Array of Target to run cast function.\\n     * @param _datas Array of Data(callData) to run cast function.\\n     * @param _origin Where Smart Account is created.\\n     */\\n    function buildWithCast(\\n        address _owner,\\n        uint256 accountVersion,\\n        address[] calldata _targets,\\n        bytes[] calldata _datas,\\n        address _origin\\n    ) external payable returns (address _account) {\\n        _account = build(_owner, accountVersion, _origin);\\n        if (_targets.length > 0)\\n            AccountInterface(_account).cast{value: msg.value}(\\n                _targets,\\n                _datas,\\n                _origin\\n            );\\n    }\\n\\n    /**\\n     * @dev Create a new DeFi Smart Account for a user.\\n     * @param _owner Owner of the Smart Account.\\n     * @param accountVersion Account Module version.\\n     * @param _origin Where Smart Account is created.\\n     */\\n    function build(\\n        address _owner,\\n        uint256 accountVersion,\\n        address _origin\\n    ) public returns (address _account) {\\n        require(\\n            accountVersion != 0 && accountVersion <= versionCount,\\n            \\\"not-valid-account\\\"\\n        );\\n        _account = createClone(accountVersion);\\n        ListInterface(list).init(_account);\\n        AccountInterface(_account).enable(_owner);\\n        emit LogAccountCreated(msg.sender, _owner, _account, _origin);\\n    }\\n\\n    /**\\n     * @dev Setup Initial things for StakeAllIndex, after its been deployed and can be only run once.\\n     * @param _master The Master Address.\\n     * @param _list The List Address.\\n     * @param _account The Account Module Address.\\n     * @param _connectors The Connectors Registry Module Address.\\n     */\\n    function setBasics(\\n        address _master,\\n        address _list,\\n        address _account,\\n        address _connectors\\n    ) external {\\n        require(\\n            master == address(0) &&\\n                list == address(0) &&\\n                account[1] == address(0) &&\\n                connectors[1] == address(0) &&\\n                versionCount == 0,\\n            \\\"already-defined\\\"\\n        );\\n\\n        master = _master;\\n        list = _list;\\n        versionCount++;\\n        account[versionCount] = _account;\\n        connectors[versionCount] = _connectors;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"}],\"name\":\"LogAccountCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_connectors\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_check\",\"type\":\"address\"}],\"name\":\"LogNewAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"accountVersion\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"check\",\"type\":\"address\"}],\"name\":\"LogNewCheck\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"master\",\"type\":\"address\"}],\"name\":\"LogNewMaster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"master\",\"type\":\"address\"}],\"name\":\"LogUpdateMaster\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"account\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_connectors\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_check\",\"type\":\"address\"}],\"name\":\"addNewAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"accountVersion\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_origin\",\"type\":\"address\"}],\"name\":\"build\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"accountVersion\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_datas\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"_origin\",\"type\":\"address\"}],\"name\":\"buildWithCast\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accountVersion\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newCheck\",\"type\":\"address\"}],\"name\":\"changeCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMaster\",\"type\":\"address\"}],\"name\":\"changeMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"connectors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"query\",\"type\":\"address\"}],\"name\":\"isClone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"list\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_master\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_list\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_connectors\",\"type\":\"address\"}],\"name\":\"setBasics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakeAllIndex","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}