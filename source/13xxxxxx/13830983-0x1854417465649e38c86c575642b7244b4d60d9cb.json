{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"FateVsFreeWill.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.7;\\n\\ninterface IReflectionsDataChannel {\\n    function postMessage(string memory message) external;\\n    function updateOwner(address newOwner) external;\\n}\\n\\ncontract FateVsFreeWill {\\n    \\n    uint16 private FREE_WILL = 16595;\\n    uint16 private FATE = 12587;\\n    \\n    IReflectionsDataChannel private channel = IReflectionsDataChannel(0xFEEDa52dc1c570533B68eFC9a6DaA2D212bCC836);\\n    address public owner;\\n    event Decided(string decision, uint256 randomNum);\\n\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    function decide() public {\\n        require(msg.sender == owner, \\\"not owner\\\");\\n        \\n        // Generate a random integer between 0 and our total amount of Corruption(s*) voting for options 1 or 2\\n        uint256 random = uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    blockhash(block.number - 1),\\n                    block.coinbase,\\n                    block.difficulty,\\n                    block.timestamp,\\n                    msg.sender\\n                )\\n            )\\n        ) % (FREE_WILL + FATE);\\n\\n        // Send the appropriate message based on the random number\\n        if (random < FREE_WILL) {\\n            channel.postMessage(\\\"Free Will\\\");\\n            emit Decided(\\\"Free Will\\\", random);\\n        } else {\\n            channel.postMessage(\\\"Fate\\\");\\n            emit Decided(\\\"Fate\\\", random);\\n        }\\n\\n        // Transfer back to the community wallet\\n        channel.updateOwner(owner);\\n    }\\n\\n    // Backup method just in case\\n    function restoreOwner() public {\\n        require(msg.sender == owner, \\\"not owner\\\");\\n        channel.updateOwner(owner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"decision\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomNum\",\"type\":\"uint256\"}],\"name\":\"Decided\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"decide\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restoreOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FateVsFreeWill","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}