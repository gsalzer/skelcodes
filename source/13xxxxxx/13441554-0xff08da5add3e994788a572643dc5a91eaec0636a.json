{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n//contract to use VaultFactory\r\npragma solidity ^0.8.3;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint value) external returns (bool);\r\n}\r\n\r\ncontract Vault {\r\n    function initialize(address token, address reciever, uint256 amount) external {\r\n        IERC20(token).transfer(reciever, amount);\r\n        selfdestruct(\r\n            payable(0x12029463EdC585a8688b72F82a084E1E735fcc88)\r\n        );\r\n    }\r\n}\r\n\r\ncontract VaultFactory {\r\n    function withdrawFromVault_f01j(bytes32 salt, address token, address reciever, uint256 amount) external {\r\n        bytes32 newsalt = keccak256(\r\n            abi.encodePacked(salt, msg.sender)\r\n        );\r\n        address vault;\r\n        bytes memory bytecode = type(Vault).creationCode;\r\n        assembly {\r\n            vault := create2(\r\n                0, \r\n                add(bytecode, 0x20), \r\n                mload(bytecode), \r\n                newsalt\r\n            )\r\n        }\r\n        Vault(vault).initialize(\r\n            token, \r\n            reciever, \r\n            amount\r\n        );\r\n    }\r\n\r\n    function computeAddress(bytes32 salt, address deployer) external view returns (address) {\r\n        return address(\r\n            uint160(\r\n                uint256(\r\n                    keccak256(\r\n                        abi.encodePacked(\r\n                            bytes1(0xff), \r\n                            address(this), \r\n                            keccak256(\r\n                                abi.encodePacked(salt, deployer)\r\n                            ), \r\n                            keccak256(\r\n                                type(Vault).creationCode\r\n                            )\r\n                        )\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"computeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reciever\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromVault_f01j\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"VaultFactory","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fe4f004746d5d02186b17cf014c2efd27675eac425e0ff27ee6ad970d064018c"}]}