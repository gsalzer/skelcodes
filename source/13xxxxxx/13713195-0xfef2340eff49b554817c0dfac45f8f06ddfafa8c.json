{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-02-23\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call{ value : amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract hETHVaultV1_3 {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n    \r\n    uint256 public totalDeposit;\r\n\r\n    address payable public feeAddress;\r\n    address payable public adminAddress;\r\n    string public vaultName;\r\n    uint32 public depositFeePermill = 69;\r\n    uint32 public withdrawFeePermill = 69;\r\n    address public gov;\r\n    bool public paused = false;\r\n\r\n    event Deposited(address indexed user, uint256 amount, string htrAddress, uint256 entryFeeAmount);\r\n    event Withdrawn(address indexed user, uint256 amount, string htrAddress, uint256 estimatedFeeAmount, uint256 exitFeeAmount);\r\n    \r\n    constructor (address payable _adminAddress, address payable _feeAddress, string memory _vaultName) {\r\n        adminAddress = _adminAddress;\r\n        feeAddress = _feeAddress;\r\n        vaultName = _vaultName;\r\n        gov = msg.sender;\r\n    }\r\n    \r\n    modifier onlyGov() {\r\n        require(msg.sender==gov, \"!governance\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyAdmin() {\r\n        require(msg.sender==adminAddress, \"!admin\");\r\n        _;\r\n    }\r\n    \r\n    function pause(bool _state) external onlyGov {\r\n        paused = _state;\r\n    }\r\n\r\n    function setGovernance(address _gov)\r\n        external\r\n        onlyGov\r\n    {\r\n        gov = _gov;\r\n    }\r\n    \r\n    function setFeeAddress(address payable _feeAddress)\r\n        external\r\n        onlyGov\r\n    {\r\n        feeAddress = _feeAddress;\r\n    }\r\n    \r\n    function setAdminAddress(address payable _adminAddress)\r\n        external\r\n        onlyGov\r\n    {\r\n        adminAddress = _adminAddress;\r\n    }\r\n    \r\n    function setVaultName(string memory _vaultName)\r\n        external\r\n        onlyGov\r\n    {\r\n        vaultName = _vaultName;\r\n    }\r\n    \r\n    function setDepositFeePermill(uint32 _feePermill)\r\n        external\r\n        onlyGov\r\n    {\r\n        depositFeePermill = _feePermill;    \r\n    }\r\n    \r\n    function setWithdrawFeePermill(uint32 _feePermill)\r\n        external\r\n        onlyGov\r\n    {\r\n        withdrawFeePermill = _feePermill;    \r\n    }\r\n    \r\n    function deposit(string memory _htrAddress) external payable {\r\n        require(!paused, \"Vault is paused now\");\r\n        require(msg.value > 0, \"can't deposit 0\");\r\n        \r\n        uint256 _amount = msg.value;\r\n        \r\n        uint256 _feeAmount = _amount.mul(depositFeePermill).div(10000);\r\n        uint256 _returnAmount = _amount.sub(_feeAmount) % (10 ** 16);\r\n        uint256 _realAmount = _amount.sub(_feeAmount).sub(_returnAmount);\r\n        \r\n        require(_realAmount > 0, \"can't deposit less than 0.01\");\r\n        \r\n        if (!feeAddress.send(_feeAmount)) {\r\n            feeAddress.transfer(_feeAmount);\r\n        }\r\n        if (!msg.sender.send(_returnAmount)) {\r\n            msg.sender.transfer(_returnAmount);\r\n        }\r\n        \r\n        totalDeposit = totalDeposit.add(_realAmount);\r\n        emit Deposited(msg.sender, _realAmount, _htrAddress, _feeAmount);\r\n    }\r\n    \r\n    function withdraw(uint256 _amount, uint256 _estimatedGasFeeAmount, address payable _receiverAddress, string memory _htrAddress)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        require(!paused, \"Vault is paused now\");\r\n        require(_amount > 0, \"can't withdraw 0\");\r\n\r\n        require(_amount <= address(this).balance, \"!balance\");\r\n        require(_amount > _estimatedGasFeeAmount, \"!gasfee\");\r\n        \r\n        uint256 _tmpAmount = _amount.sub(_estimatedGasFeeAmount);\r\n        uint256 _feeAmount = _tmpAmount.mul(withdrawFeePermill).div(10000);\r\n        uint256 _realAmount = _tmpAmount.sub(_feeAmount);\r\n        \r\n        if (!feeAddress.send(_feeAmount)) {\r\n            feeAddress.transfer(_feeAmount);\r\n        }\r\n        if (!_receiverAddress.send(_realAmount)) {\r\n            _receiverAddress.transfer(_realAmount);\r\n        }\r\n        if (!adminAddress.send(_estimatedGasFeeAmount)) {\r\n            adminAddress.transfer(_estimatedGasFeeAmount);\r\n        }\r\n        \r\n        totalDeposit = totalDeposit.sub(_amount);\r\n        emit Withdrawn(_receiverAddress, _realAmount, _htrAddress, _estimatedGasFeeAmount, _feeAmount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_adminAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_vaultName\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"htrAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryFeeAmount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"htrAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"estimatedFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitFeeAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adminAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_htrAddress\",\"type\":\"string\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFeePermill\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"setAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_feePermill\",\"type\":\"uint32\"}],\"name\":\"setDepositFeePermill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_vaultName\",\"type\":\"string\"}],\"name\":\"setVaultName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_feePermill\",\"type\":\"uint32\"}],\"name\":\"setWithdrawFeePermill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_estimatedGasFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_receiverAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_htrAddress\",\"type\":\"string\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeePermill\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"hETHVaultV1_3","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000468d29a98bf948f10831f9f0053ed54f0a3311e2000000000000000000000000f4651951fdbf1ee2334925f20a5aec362558f1090000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000a484554485f5641554c5400000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8a179f5f3d7e63e941649812da0f5cf7e0844c8f48f90eda1368bebda910e762"}]}