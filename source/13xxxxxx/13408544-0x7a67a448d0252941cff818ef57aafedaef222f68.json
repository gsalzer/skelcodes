{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.5.0 https://hardhat.org\r\n\r\n// File contracts/interfaces/IHedgeMapping.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev The interface defines methods for Hedge builtin contract address mapping\r\ninterface IHedgeMapping {\r\n\r\n    /// @dev Set the built-in contract address of the system\r\n    /// @param dcuToken Address of dcu token contract\r\n    /// @param hedgeDAO IHedgeDAO implementation contract address\r\n    /// @param hedgeOptions IHedgeOptions implementation contract address\r\n    /// @param hedgeFutures IHedgeFutures implementation contract address\r\n    /// @param hedgeVaultForStaking IHedgeVaultForStaking implementation contract address\r\n    /// @param nestPriceFacade INestPriceFacade implementation contract address\r\n    function setBuiltinAddress(\r\n        address dcuToken,\r\n        address hedgeDAO,\r\n        address hedgeOptions,\r\n        address hedgeFutures,\r\n        address hedgeVaultForStaking,\r\n        address nestPriceFacade\r\n    ) external;\r\n\r\n    /// @dev Get the built-in contract address of the system\r\n    /// @return dcuToken Address of dcu token contract\r\n    /// @return hedgeDAO IHedgeDAO implementation contract address\r\n    /// @return hedgeOptions IHedgeOptions implementation contract address\r\n    /// @return hedgeFutures IHedgeFutures implementation contract address\r\n    /// @return hedgeVaultForStaking IHedgeVaultForStaking implementation contract address\r\n    /// @return nestPriceFacade INestPriceFacade implementation contract address\r\n    function getBuiltinAddress() external view returns (\r\n        address dcuToken,\r\n        address hedgeDAO,\r\n        address hedgeOptions,\r\n        address hedgeFutures,\r\n        address hedgeVaultForStaking,\r\n        address nestPriceFacade\r\n    );\r\n\r\n    /// @dev Get address of dcu token contract\r\n    /// @return Address of dcu token contract\r\n    function getDCUTokenAddress() external view returns (address);\r\n\r\n    /// @dev Get IHedgeDAO implementation contract address\r\n    /// @return IHedgeDAO implementation contract address\r\n    function getHedgeDAOAddress() external view returns (address);\r\n\r\n    /// @dev Get IHedgeOptions implementation contract address\r\n    /// @return IHedgeOptions implementation contract address\r\n    function getHedgeOptionsAddress() external view returns (address);\r\n\r\n    /// @dev Get IHedgeFutures implementation contract address\r\n    /// @return IHedgeFutures implementation contract address\r\n    function getHedgeFuturesAddress() external view returns (address);\r\n\r\n    /// @dev Get IHedgeVaultForStaking implementation contract address\r\n    /// @return IHedgeVaultForStaking implementation contract address\r\n    function getHedgeVaultForStakingAddress() external view returns (address);\r\n\r\n    /// @dev Get INestPriceFacade implementation contract address\r\n    /// @return INestPriceFacade implementation contract address\r\n    function getNestPriceFacade() external view returns (address);\r\n\r\n    /// @dev Registered address. The address registered here is the address accepted by Hedge system\r\n    /// @param key The key\r\n    /// @param addr Destination address. 0 means to delete the registration information\r\n    function registerAddress(string calldata key, address addr) external;\r\n\r\n    /// @dev Get registered address\r\n    /// @param key The key\r\n    /// @return Destination address. 0 means empty\r\n    function checkAddress(string calldata key) external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IHedgeGovernance.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev This interface defines the governance methods\r\ninterface IHedgeGovernance is IHedgeMapping {\r\n\r\n    /// @dev Set governance authority\r\n    /// @param addr Destination address\r\n    /// @param flag Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function setGovernance(address addr, uint flag) external;\r\n\r\n    /// @dev Get governance rights\r\n    /// @param addr Destination address\r\n    /// @return Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function getGovernance(address addr) external view returns (uint);\r\n\r\n    /// @dev Check whether the target address has governance rights for the given target\r\n    /// @param addr Destination address\r\n    /// @param flag Permission weight. The permission of the target address must be greater than this weight \r\n    /// to pass the check\r\n    /// @return True indicates permission\r\n    function checkGovernance(address addr, uint flag) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.2.0\r\n\r\n// MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/libs/TransferHelper.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IHedgeDAO.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev This interface defines the DAO methods\r\ninterface IHedgeDAO {\r\n\r\n    /// @dev Application Flag Changed event\r\n    /// @param addr DAO application contract address\r\n    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    event ApplicationChanged(address addr, uint flag);\r\n    \r\n    /// @dev Set DAO application\r\n    /// @param addr DAO application contract address\r\n    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    function setApplication(address addr, uint flag) external;\r\n\r\n    /// @dev Check DAO application flag\r\n    /// @param addr DAO application contract address\r\n    /// @return Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    function checkApplication(address addr) external view returns (uint);\r\n\r\n    /// @dev Add reward\r\n    /// @param pool Destination pool\r\n    function addETHReward(address pool) external payable;\r\n\r\n    /// @dev The function returns eth rewards of specified pool\r\n    /// @param pool Destination pool\r\n    function totalETHRewards(address pool) external view returns (uint);\r\n\r\n    /// @dev Settlement\r\n    /// @param pool Destination pool. Indicates which pool to pay with\r\n    /// @param tokenAddress Token address of receiving funds (0 means ETH)\r\n    /// @param to Address to receive\r\n    /// @param value Amount to receive\r\n    function settle(address pool, address tokenAddress, address to, uint value) external payable;\r\n}\r\n\r\n\r\n// File contracts/HedgeBase.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev Base contract of Hedge\r\ncontract HedgeBase {\r\n\r\n    /// @dev IHedgeGovernance implementation contract address\r\n    address public _governance;\r\n\r\n    /// @dev To support open-zeppelin/upgrades\r\n    /// @param governance IHedgeGovernance implementation contract address\r\n    function initialize(address governance) public virtual {\r\n        require(_governance == address(0), \"Hedge:!initialize\");\r\n        _governance = governance;\r\n    }\r\n\r\n    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call \r\n    ///      super.update(newGovernance) when overriding, and override method without onlyGovernance\r\n    /// @param newGovernance IHedgeGovernance implementation contract address\r\n    function update(address newGovernance) public virtual {\r\n\r\n        address governance = _governance;\r\n        require(governance == msg.sender || IHedgeGovernance(governance).checkGovernance(msg.sender, 0), \"Hedge:!gov\");\r\n        _governance = newGovernance;\r\n    }\r\n\r\n    /// @dev Migrate funds from current contract to HedgeDAO\r\n    /// @param tokenAddress Destination token address.(0 means eth)\r\n    /// @param value Migrate amount\r\n    function migrate(address tokenAddress, uint value) external onlyGovernance {\r\n\r\n        address to = IHedgeGovernance(_governance).getHedgeDAOAddress();\r\n        if (tokenAddress == address(0)) {\r\n            IHedgeDAO(to).addETHReward { value: value } (address(0));\r\n        } else {\r\n            TransferHelper.safeTransfer(tokenAddress, to, value);\r\n        }\r\n    }\r\n\r\n    //---------modifier------------\r\n\r\n    modifier onlyGovernance() {\r\n        require(IHedgeGovernance(_governance).checkGovernance(msg.sender, 0), \"Hedge:!gov\");\r\n        _;\r\n    }\r\n\r\n    modifier noContract() {\r\n        require(msg.sender == tx.origin, \"Hedge:!contract\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/HedgeMapping.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev The contract is for Hedge builtin contract address mapping\r\nabstract contract HedgeMapping is HedgeBase, IHedgeMapping {\r\n\r\n    /// @dev Address of dcu token contract\r\n    address _dcuToken;\r\n\r\n    /// @dev IHedgeDAO implementation contract address\r\n    address _hedgeDAO;\r\n\r\n    /// @dev IHedgeOptions implementation contract address\r\n    address _hedgeOptions;\r\n\r\n    /// @dev IHedgeFutures implementation contract address\r\n    address _hedgeFutures;\r\n\r\n    /// @dev IHedgeVaultForStaking implementation contract address\r\n    address _hedgeVaultForStaking;\r\n\r\n    /// @dev INestPriceFacade implementation contract address\r\n    address _nestPriceFacade;\r\n\r\n    /// @dev Address registered in the system\r\n    mapping(string=>address) _registeredAddress;\r\n\r\n    /// @dev Set the built-in contract address of the system\r\n    /// @param dcuToken Address of dcu token contract\r\n    /// @param hedgeDAO IHedgeDAO implementation contract address\r\n    /// @param hedgeOptions IHedgeOptions implementation contract address for Hedge\r\n    /// @param hedgeFutures IHedgeFutures implementation contract address\r\n    /// @param hedgeVaultForStaking IHedgeVaultForStaking implementation contract address\r\n    /// @param nestPriceFacade INestPriceFacade implementation contract address\r\n    function setBuiltinAddress(\r\n        address dcuToken,\r\n        address hedgeDAO,\r\n        address hedgeOptions,\r\n        address hedgeFutures,\r\n        address hedgeVaultForStaking,\r\n        address nestPriceFacade\r\n    ) external override onlyGovernance {\r\n\r\n        if (dcuToken != address(0)) {\r\n            _dcuToken = dcuToken;\r\n        }\r\n        if (hedgeDAO != address(0)) {\r\n            _hedgeDAO = hedgeDAO;\r\n        }\r\n        if (hedgeOptions != address(0)) {\r\n            _hedgeOptions = hedgeOptions;\r\n        }\r\n        if (hedgeFutures != address(0)) {\r\n            _hedgeFutures = hedgeFutures;\r\n        }\r\n        if (hedgeVaultForStaking != address(0)) {\r\n            _hedgeVaultForStaking = hedgeVaultForStaking;\r\n        }\r\n        if (nestPriceFacade != address(0)) {\r\n            _nestPriceFacade = nestPriceFacade;\r\n        }\r\n    }\r\n\r\n    /// @dev Get the built-in contract address of the system\r\n    /// @return dcuToken Address of dcu token contract\r\n    /// @return hedgeDAO IHedgeDAO implementation contract address\r\n    /// @return hedgeOptions IHedgeOptions implementation contract address\r\n    /// @return hedgeFutures IHedgeFutures implementation contract address\r\n    /// @return hedgeVaultForStaking IHedgeVaultForStaking implementation contract address\r\n    /// @return nestPriceFacade INestPriceFacade implementation contract address\r\n    function getBuiltinAddress() external view override returns (\r\n        address dcuToken,\r\n        address hedgeDAO,\r\n        address hedgeOptions,\r\n        address hedgeFutures,\r\n        address hedgeVaultForStaking,\r\n        address nestPriceFacade\r\n    ) {\r\n        return (\r\n            _dcuToken,\r\n            _hedgeDAO,\r\n            _hedgeOptions,\r\n            _hedgeFutures,\r\n            _hedgeVaultForStaking,\r\n            _nestPriceFacade\r\n        );\r\n    }\r\n\r\n    /// @dev Get address of dcu token contract\r\n    /// @return Address of dcu token contract\r\n    function getDCUTokenAddress() external view override returns (address) { return _dcuToken; }\r\n\r\n    /// @dev Get IHedgeDAO implementation contract address\r\n    /// @return IHedgeDAO implementation contract address\r\n    function getHedgeDAOAddress() external view override returns (address) { return _hedgeDAO; }\r\n\r\n    /// @dev Get IHedgeOptions implementation contract address\r\n    /// @return IHedgeOptions implementation contract address\r\n    function getHedgeOptionsAddress() external view override returns (address) { return _hedgeOptions; }\r\n\r\n    /// @dev Get IHedgeFutures implementation contract address\r\n    /// @return IHedgeFutures implementation contract address\r\n    function getHedgeFuturesAddress() external view override returns (address) { return _hedgeFutures; }\r\n\r\n    /// @dev Get IHedgeVaultForStaking implementation contract address\r\n    /// @return IHedgeVaultForStaking implementation contract address\r\n    function getHedgeVaultForStakingAddress() external view override returns (address) { return _hedgeVaultForStaking; }\r\n\r\n    /// @dev Get INestPriceFacade implementation contract address\r\n    /// @return INestPriceFacade implementation contract address\r\n    function getNestPriceFacade() external view override returns (address) { return _nestPriceFacade; }\r\n\r\n    /// @dev Registered address. The address registered here is the address accepted by Hedge system\r\n    /// @param key The key\r\n    /// @param addr Destination address. 0 means to delete the registration information\r\n    function registerAddress(string calldata key, address addr) external override onlyGovernance {\r\n        _registeredAddress[key] = addr;\r\n    }\r\n\r\n    /// @dev Get registered address\r\n    /// @param key The key\r\n    /// @return Destination address. 0 means empty\r\n    function checkAddress(string calldata key) external view override returns (address) {\r\n        return _registeredAddress[key];\r\n    }\r\n}\r\n\r\n\r\n// File contracts/HedgeGovernance.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev Hedge governance contract\r\ncontract HedgeGovernance is HedgeMapping, IHedgeGovernance {\r\n\r\n    /// @dev To support open-zeppelin/upgrades\r\n    /// @param governance IHedgeGovernance implementation contract address\r\n    function initialize(address governance) public override {\r\n\r\n        // While initialize HedgeGovernance, newGovernance is address(this),\r\n        // So must let newGovernance to 0\r\n        require(governance == address(0), \"HedgeGovernance:!address\");\r\n\r\n        // newGovernance is address(this)\r\n        super.initialize(address(this));\r\n\r\n        // Add msg.sender to governance\r\n        _governanceMapping[msg.sender] = GovernanceInfo(msg.sender, uint96(0xFFFFFFFFFFFFFFFFFFFFFFFF));\r\n    }\r\n\r\n    /// @dev Structure of governance address information\r\n    struct GovernanceInfo {\r\n        address addr;\r\n        uint96 flag;\r\n    }\r\n\r\n    /// @dev Governance address information\r\n    mapping(address=>GovernanceInfo) _governanceMapping;\r\n\r\n    /// @dev Set governance authority\r\n    /// @param addr Destination address\r\n    /// @param flag Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function setGovernance(address addr, uint flag) external override onlyGovernance {\r\n        \r\n        if (flag > 0) {\r\n            _governanceMapping[addr] = GovernanceInfo(addr, uint96(flag));\r\n        } else {\r\n            _governanceMapping[addr] = GovernanceInfo(address(0), uint96(0));\r\n        }\r\n    }\r\n\r\n    /// @dev Get governance rights\r\n    /// @param addr Destination address\r\n    /// @return Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function getGovernance(address addr) external view override returns (uint) {\r\n        return _governanceMapping[addr].flag;\r\n    }\r\n\r\n    /// @dev Check whether the target address has governance rights for the given target\r\n    /// @param addr Destination address\r\n    /// @param flag Permission weight. The permission of the target address must be greater than this \r\n    /// weight to pass the check\r\n    /// @return True indicates permission\r\n    function checkGovernance(address addr, uint flag) external view override returns (bool) {\r\n        return _governanceMapping[addr].flag > flag;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"_governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"checkAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"checkGovernance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuiltinAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dcuToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hedgeDAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hedgeOptions\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hedgeFutures\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hedgeVaultForStaking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nestPriceFacade\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDCUTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHedgeDAOAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHedgeFuturesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHedgeOptionsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHedgeVaultForStakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNestPriceFacade\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"registerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dcuToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hedgeDAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hedgeOptions\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hedgeFutures\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hedgeVaultForStaking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nestPriceFacade\",\"type\":\"address\"}],\"name\":\"setBuiltinAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HedgeGovernance","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"888888","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bb576cd112e3aadcf305847b1394fd7580724926ce00263d831f4e5034eb7bb5"}]}