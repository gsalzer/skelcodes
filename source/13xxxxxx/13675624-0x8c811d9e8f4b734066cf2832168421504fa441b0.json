{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NFTCultForgeComponents_OptC.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport './NFTCultForgeComponentsBase.sol';\\r\\n\\r\\n/**\\r\\n * @title NFTCultForgeComponents_OptC\\r\\n * @author @NiftyMike, NFT Culture\\r\\n * @notice Some code cribbed from Open Zeppelin Ownable.sol.\\r\\n * @dev Companion contract to NFTCult, which enables some additional useful functionality\\r\\n * for future endeavors.\\r\\n *\\r\\n * Note: This option is gas optimized, and does not allow being expanded for future\\r\\n * forge components.\\r\\n */\\r\\ncontract NFTCultForgeComponents_OptC is NFTCultForgeComponentsBase {\\r\\n    address private _owner;\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == msg.sender, 'Caller is not the owner');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    uint256 private constant defaultYield = 1 << 128;\\r\\n    uint256 private constant twotoneYield = (2 << 128) + 1;\\r\\n    uint256 private constant ffspecialYield = defaultYield + 1;\\r\\n    uint256 private constant justiceYield = (3 << 128) + 2;\\r\\n    uint256 private constant twotoneJusticeYield = (6 << 128) + 5;\\r\\n\\r\\n    constructor() {\\r\\n        _owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function getYieldFromMapping(string calldata tokenUri)\\r\\n        external\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(bytes(tokenUri).length == 86, 'Invalid length');\\r\\n\\r\\n        bytes32 uriPartBytes = bytes32(_SplitUri(tokenUri, 36, 44));\\r\\n\\r\\n        bytes32[13] memory tokenUriLookup = [\\r\\n            bytes32('UiY69hp5'),\\r\\n            'S7eX8GEh',\\r\\n            'eov9xtVH',\\r\\n            'R47kYHrV',\\r\\n            'UfDC6tiB',\\r\\n            'UrnkTZWU',\\r\\n            'Q6sVaVa2',\\r\\n            'VSbsfNcE',\\r\\n            'cebF1sfw',\\r\\n            'cD6HFetu',\\r\\n            'TgoB1FLi',\\r\\n            'dF1Dj1tm',\\r\\n            'ZKATcFGh'\\r\\n        ];\\r\\n\\r\\n        uint256[13] memory yieldLookup = [\\r\\n            uint256(defaultYield),\\r\\n            defaultYield,\\r\\n            twotoneYield,\\r\\n            defaultYield,\\r\\n            defaultYield,\\r\\n            twotoneYield,\\r\\n            defaultYield,\\r\\n            defaultYield,\\r\\n            twotoneYield,\\r\\n            ffspecialYield,\\r\\n            justiceYield,\\r\\n            justiceYield,\\r\\n            twotoneJusticeYield\\r\\n        ];\\r\\n\\r\\n        for (uint256 i = 0; i < 13; i++) {\\r\\n            if (tokenUriLookup[i] == uriPartBytes) {\\r\\n                return yieldLookup[i];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/NFTCultForgeComponentsBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/**\\r\\n * @title NFTCultForgeComponentsBase\\r\\n * @author @NiftyMike, NFT Culture\\r\\n * @notice Some code cribbed from Open Zeppelin Ownable.sol.\\r\\n * @dev Base implementation of a uri splitter.\\r\\n */\\r\\nabstract contract NFTCultForgeComponentsBase {\\r\\n    function _SplitUri(\\r\\n        string calldata tokenUri,\\r\\n        uint256 startIndex,\\r\\n        uint256 endIndex\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        bytes memory strBytes = bytes(tokenUri);\\r\\n        bytes memory result = new bytes(8); //66-34=32, but using 8 to reduce gas.\\r\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\r\\n            result[i - startIndex] = strBytes[i];\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"}],\"name\":\"getYieldFromMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"NFTCultForgeComponents_OptC","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}