{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.0;\r\n\r\n\r\n// \r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// \r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// \r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// \r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// \r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// \r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// \r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// \r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// \r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n// \r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n// \r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\n// \r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// \r\ninterface IMiece is IERC20 {\r\n    function burnFrom(address account, uint256 amount) external;\r\n    function getTokensStaked(address staker) external returns (uint256[] memory);\r\n}\r\n\r\n//\r\n\r\n// \r\ninterface IZombie is IERC721 {\r\n    // function burnFrom(address account, uint256 amount) external;\r\n    function mintZombie(address account, string memory hash) external;\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\n// \r\nlibrary GraveyardLibrary {\r\n    string internal constant TABLE =\r\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n\r\n    struct Trait {\r\n        string traitName;\r\n        string traitType;\r\n        string pixels;\r\n        uint256 pixelCount;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Converts a digit from 0 - 10000 into its corresponding rarity based on the given rarity tier.\r\n     * @param _randinput The input from 0 - 10000 to use for rarity gen.\r\n     * @param _rarityTier The tier to use.\r\n     */\r\n    function rarityGen(uint256 _randinput, uint8 _rarityTier, uint16[][8] storage TIERS)\r\n        external\r\n        view\r\n        returns (string memory)\r\n    {\r\n        uint16 currentLowerBound = 0;\r\n        for (uint8 i = 0; i < TIERS[_rarityTier].length; i++) {\r\n            uint16 thisPercentage = TIERS[_rarityTier][i];\r\n            if (\r\n                _randinput >= currentLowerBound &&\r\n                _randinput < currentLowerBound + thisPercentage\r\n            ) return toString(i);\r\n            currentLowerBound = currentLowerBound + thisPercentage;\r\n        }\r\n\r\n        revert();\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the current miece cost of mint.\r\n     */\r\n    function currentMieceCost(uint256 _totalSupply) public pure returns (uint256) {\r\n\r\n        if (_totalSupply <= 1000) \r\n            return 15 ether; // 15 miece\r\n\r\n        if (_totalSupply > 1000 && _totalSupply <= 2111)\r\n            return 25 ether; // 25 miece\r\n\r\n        if (_totalSupply > 2111 && _totalSupply <= 3222)\r\n            return 35 ether; // 35 miece\r\n\r\n        if (_totalSupply > 3222 && _totalSupply <= 4333)\r\n            return 45 ether; // 45 miece\r\n\r\n        if (_totalSupply > 4333 && _totalSupply <= 5444)\r\n            return 55 ether; // 55 miece\r\n\r\n        revert();\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the current cost of fastening up a digging\r\n     */\r\n    function currentFastenCost() public pure returns (uint256) {\r\n        return 10 ether;  // 10 miece\r\n    }\r\n\r\n    /**\r\n     * @dev Helper function to reduce pixel size within contract\r\n     */\r\n    function letterToNumber(string memory _inputLetter, string[] memory LETTERS)\r\n        public\r\n        pure\r\n        returns (uint8)\r\n    {\r\n        for (uint8 i = 0; i < LETTERS.length; i++) {\r\n            if (\r\n                keccak256(abi.encodePacked((LETTERS[i]))) ==\r\n                keccak256(abi.encodePacked((_inputLetter)))\r\n            ) return (i + 1);\r\n        }\r\n        revert();\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns a hash for a given tokenId\r\n     * @param tokenHash The tokenId to return the hash for.\r\n     * @param yielded The tokenId to return the hash for.\r\n     */\r\n    function _tokenIdToHash(string memory tokenHash, bool yielded)\r\n        external\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        // string memory tokenHash = tokenIdToHash[_tokenId];\r\n\r\n        // If this is grave has been dug override the previous hash\r\n        // FIXME: we could just use the burn address instead and remove the yielded flag\r\n        // if (ownerOf(_tokenId) == 0x000000000000000000000000000000000000dEaD) {\r\n\r\n        if ( yielded ) {            \r\n            tokenHash = string(\r\n                abi.encodePacked(\r\n                    \"1\",\r\n                    GraveyardLibrary.substring(tokenHash, 1, 9)\r\n                )\r\n            );\r\n\r\n        }\r\n\r\n        return tokenHash;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Hash to metadata function\r\n     */\r\n    function hashToMetadata(string memory _hash, mapping(uint256 => Trait[]) storage traitTypes)\r\n        public\r\n        view\r\n        returns (string memory)\r\n    {\r\n        string memory metadataString;\r\n\r\n        for (uint8 i = 0; i < 9; i++) { //9\r\n            uint8 thisTraitIndex = GraveyardLibrary.parseInt(\r\n                GraveyardLibrary.substring(_hash, i, i + 1)\r\n            );\r\n\r\n            metadataString = string(\r\n                abi.encodePacked(\r\n                    metadataString,\r\n                    '{\"trait_type\":\"',\r\n                    traitTypes[i][thisTraitIndex].traitType,\r\n                    '\",\"value\":\"',\r\n                    traitTypes[i][thisTraitIndex].traitName,\r\n                    '\"}'\r\n                )\r\n            );\r\n\r\n            if (i != 8)\r\n                metadataString = string(abi.encodePacked(metadataString, \",\"));\r\n        }\r\n\r\n        return string(abi.encodePacked(\"[\", metadataString, \"]\"));\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the SVG and metadata for a token Id\r\n     * @param _tokenId The tokenId to return the SVG and metadata for.\r\n     */\r\n    function tokenURIData(uint256 _tokenId, string memory tokenHash, mapping(uint256 => Trait[]) storage traitTypes, string[] memory LETTERS, uint256 diggingStarted)\r\n        external\r\n        view        \r\n        returns (string memory)\r\n    {\r\n        \r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    \"data:application/json;base64,\",\r\n                    encode(\r\n                        bytes(\r\n                            string(\r\n                                abi.encodePacked(\r\n                                    '{\"name\": \"cMyGravez #',\r\n                                    toString(_tokenId),\r\n                                    // toString(diggingStarted),      // FIXME: !!!!                               \r\n                                    '\", \"description\": \"cMyKatzGraves is a collection of 5,444 unique graves, where burned cats rests in peace. All the metadata and images stored 100% on-chain.\", \"image\": \"data:image/svg+xml;base64,',\r\n                                    encode(\r\n                                        bytes(hashToSVG(tokenHash,traitTypes,LETTERS,diggingStarted))\r\n                                    ),\r\n                                    '\",\"attributes\":',\r\n                                    hashToMetadata(tokenHash,traitTypes),\r\n                                    \"}\"\r\n                                )\r\n                            )\r\n                        )\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Hash to SVG function\r\n     */\r\n    function hashToSVG(string memory _hash, mapping(uint256 => Trait[]) storage traitTypes, string[] memory LETTERS, uint256 diggingStarted)\r\n        public\r\n        view\r\n        returns (string memory)\r\n    {\r\n        string memory svgString;\r\n        bool[24][24] memory placedPixels;\r\n\r\n        for (uint8 i = 0; i < 9; i++) { \r\n            uint8 thisTraitIndex = GraveyardLibrary.parseInt(\r\n                GraveyardLibrary.substring(_hash, i, i + 1)\r\n            );\r\n            \r\n            // Hide the zombie arm if the digging is not started\r\n            if ( i == 1 && diggingStarted == 0 ) {\r\n                continue;\r\n            }\r\n            for (\r\n                uint16 j = 0;\r\n                j < traitTypes[i][thisTraitIndex].pixelCount; // <\r\n                j++\r\n            ) {\r\n                string memory thisPixel = GraveyardLibrary.substring(\r\n                    traitTypes[i][thisTraitIndex].pixels,\r\n                    j * 4,\r\n                    j * 4 + 4\r\n                );\r\n\r\n                uint8 x = letterToNumber(\r\n                    GraveyardLibrary.substring(thisPixel, 0, 1), LETTERS\r\n                );\r\n                uint8 y = letterToNumber(\r\n                    GraveyardLibrary.substring(thisPixel, 1, 2), LETTERS\r\n                );\r\n\r\n                if (placedPixels[x][y]) continue;\r\n\r\n                svgString = string(\r\n                    abi.encodePacked(\r\n                        svgString,\r\n                        \"<rect class='c\",\r\n                        GraveyardLibrary.substring(thisPixel, 2, 4),\r\n                        \"' x='\",\r\n                        toString(x),\r\n                        \"' y='\",\r\n                        toString(y),\r\n                        \"'/>\"\r\n                    )\r\n                );\r\n\r\n                placedPixels[x][y] = true;\r\n            }\r\n        }\r\n\r\n        svgString = string(\r\n            abi.encodePacked(\r\n                '<svg id=\"g\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 24 24\" style=\"background-color:#2A2A2A\"> ',\r\n                svgString,\r\n               // \"<style>rect{width:1px;height:1px;} #mouse-svg{shape-rendering: crispedges;} .c00{fill:#000000}.c01{fill:#B1ADAC}.c02{fill:#D7D7D7}.c03{fill:#FFA6A6}.c04{fill:#FFD4D5}.c05{fill:#B9AD95}.c06{fill:#E2D6BE}.c07{fill:#7F625A}.c08{fill:#A58F82}.c09{fill:#4B1E0B}.c10{fill:#6D2C10}.c11{fill:#D8D8D8}.c12{fill:#F5F5F5}.c13{fill:#433D4B}.c14{fill:#8D949C}.c15{fill:#05FF00}.c16{fill:#01C700}.c17{fill:#0B8F08}.c18{fill:#421C13}.c19{fill:#6B392A}.c20{fill:#A35E40}.c21{fill:#DCBD91}.c22{fill:#777777}.c23{fill:#848484}.c24{fill:#ABABAB}.c25{fill:#BABABA}.c26{fill:#C7C7C7}.c27{fill:#EAEAEA}.c28{fill:#0C76AA}.c29{fill:#0E97DB}.c30{fill:#10A4EC}.c31{fill:#13B0FF}.c32{fill:#2EB9FE}.c33{fill:#54CCFF}.c34{fill:#50C0F2}.c35{fill:#54CCFF}.c36{fill:#72DAFF}.c37{fill:#B6EAFF}.c38{fill:#FFFFFF}.c39{fill:#954546}.c40{fill:#0B87F7}.c41{fill:#FF2626}.c42{fill:#180F02}.c43{fill:#2B2319}.c44{fill:#FBDD4B}.c45{fill:#F5B923}.c46{fill:#CC8A18}.c47{fill:#3C2203}.c48{fill:#53320B}.c49{fill:#7B501D}.c50{fill:#FFE646}.c51{fill:#FFD627}.c52{fill:#F5B700}.c53{fill:#242424}.c54{fill:#4A4A4A}.c55{fill:#676767}.c56{fill:#F08306}.c57{fill:#FCA30E}.c58{fill:#FEBC0E}.c59{fill:#FBEC1C}.c60{fill:#14242F}.c61{fill:#B06837}.c62{fill:#8F4B0E}.c63{fill:#D88227}.c64{fill:#B06837}</style></svg>\"\r\n                \"<style>rect{width:1px;height:1px;}#g{shape-rendering: crispedges;}.c00{fill:#3b0346}.c01{fill:#9500b4}.c02{fill:#496707}.c03{fill:#a58d9c}.c04{fill:#859e4a}.c05{fill:#778d45}.c06{fill:#6f8342}.c07{fill:#ff0043}.c08{fill:#f6767b}.c09{fill:#c74249}.c10{fill:#aa343a}.c11{fill:#ffffff}.c12{fill:#000000}.c13{fill:#bfb23e}.c14{fill:#e9cf00}.c15{fill:#00b300}.c16{fill:#009a1a}.c17{fill:#00791a}.c18{fill:#ff2d00}.c19{fill:#e57600}.c20{fill:#f8d9d9}.c21{fill:#ddc600}.c22{fill:#4f4f4f}.c23{fill:#535353}.c24{fill:#565656}.c25{fill:#444444}.c26{fill:#46503f}.c27{fill:#363d30}.c28{fill:#72775c}.c29{fill:#474939}.c30{fill:#5c614a}.c31{fill:#833f41}.c32{fill:#a09300}.c33{fill:#938700}.c34{fill:#877c00}.c35{fill:#5b231d}.c36{fill:#733e39}.c37{fill:#97575a}.c38{fill:#c66703}.c39{fill:#a75c19}.c40{fill:#5a2e04}.c41{fill:#26331d}.c42{fill:#314522}.c43{fill:#3b2d08}.c44{fill:#47360c}.c45{fill:#002845}.c46{fill:#00538a}.c47{fill:#382e25}.c48{fill:#473c32}.c49{fill:#f6efe9}.c50{fill:#695841}.c51{fill:#705d43}.c52{fill:#786142}.c53{fill:#6a4945}.c54{fill:#724946}.c55{fill:#794a45}.c56{fill:#0f0f0f}.c57{fill:#181818}.c58{fill:#8a8a8a}.c59{fill:#445763}.c60{fill:#475c6a}.c61{fill:#465f70}.c62{fill:#ededed}</style></svg>\"\r\n            )\r\n        );\r\n\r\n        return svgString;\r\n    }    \r\n\r\n\r\n    function encode(bytes memory data) public pure returns (string memory) {\r\n        if (data.length == 0) return \"\";\r\n\r\n        // load the table into memory\r\n        string memory table = TABLE;\r\n\r\n        // multiply by 4/3 rounded up\r\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\r\n\r\n        // add some extra buffer at the end required for the writing\r\n        string memory result = new string(encodedLen + 32);\r\n\r\n        assembly {\r\n            // set the actual output length\r\n            mstore(result, encodedLen)\r\n\r\n            // prepare the lookup table\r\n            let tablePtr := add(table, 1)\r\n\r\n            // input ptr\r\n            let dataPtr := data\r\n            let endPtr := add(dataPtr, mload(data))\r\n\r\n            // result ptr, jump over length\r\n            let resultPtr := add(result, 32)\r\n\r\n            // run over the input, 3 bytes at a time\r\n            for {\r\n\r\n            } lt(dataPtr, endPtr) {\r\n\r\n            } {\r\n                dataPtr := add(dataPtr, 3)\r\n\r\n                // read 3 bytes\r\n                let input := mload(dataPtr)\r\n\r\n                // write 4 characters\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n            }\r\n\r\n            // padding with '='\r\n            switch mod(mload(data), 3)\r\n            case 1 {\r\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\r\n            }\r\n            case 2 {\r\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    function parseInt(string memory _a)\r\n        internal\r\n        pure\r\n        returns (uint8 _parsedInt)\r\n    {\r\n        bytes memory bresult = bytes(_a);\r\n        uint8 mint = 0;\r\n        for (uint8 i = 0; i < bresult.length; i++) {\r\n            if (\r\n                (uint8(uint8(bresult[i])) >= 48) &&\r\n                (uint8(uint8(bresult[i])) <= 57)\r\n            ) {\r\n                mint *= 10;\r\n                mint += uint8(bresult[i]) - 48;\r\n            }\r\n        }\r\n        return mint;\r\n    }\r\n\r\n    function substring(\r\n        string memory str,\r\n        uint256 startIndex,\r\n        uint256 endIndex\r\n    ) internal pure returns (string memory) {\r\n        bytes memory strBytes = bytes(str);\r\n        bytes memory result = new bytes(endIndex - startIndex);\r\n        for (uint256 i = startIndex; i < endIndex; i++) {\r\n            result[i - startIndex] = strBytes[i];\r\n        }\r\n        return string(result);\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// \r\n/*\r\n\r\n     ___  ___      _____                          \r\n     |  \\/  |     |  __ \\                         \r\n  ___| .  . |_   _| |  \\/_ __ __ ___   _____  ___ \r\n / __| |\\/| | | | | | __| '__/ _` \\ \\ / / _ \\/ __|\r\n| (__| |  | | |_| | |_\\ \\ | | (_| |\\ V /  __/\\__ \\\r\n \\___\\_|  |_/\\__, |\\____/_|  \\__,_| \\_/ \\___||___/\r\n              __/ |                               \r\n             |___/                                \r\n\r\n*/\r\ncontract Graveyard is ERC721Enumerable {\r\n    using GraveyardLibrary for uint8;\r\n    \r\n    // While zombies are false, minting graveyards is not possible\r\n    // bool public ZOMBIES = false;\r\n\r\n    // uint256 public DEFAULT_DIGGING_TIME = 86400;\r\n    uint256 public MAX_SUPPLY = 5444;\r\n    uint256 SEED_NONCE = 0;\r\n\r\n    // Mappings for the traits and their hashes\r\n    mapping(uint256 => GraveyardLibrary.Trait[]) public traitTypes;\r\n    mapping(string => bool) hashToMinted;\r\n    mapping(uint256 => string) internal tokenIdToHash;\r\n\r\n    // Mapping of graveyardId to store the time when the zombie can be claimed\r\n    mapping(uint256 => uint256) internal tokenIdToTargetTime;\r\n\r\n    // Mapping of graveyardId to staker\r\n    mapping(uint256 => address) internal tokenIdToStaker;    \r\n    mapping(address => uint256[]) internal stakerToTokenIds;\r\n\r\n    // Mapping of graveyardId to staked zombie ids \r\n    mapping(uint256 => uint256[]) internal graveyardIdToCatIds;\r\n\r\n    address nullAddress = 0x0000000000000000000000000000000000000000;\r\n\r\n    // Mapping of graveyardId to store if a zombie has been claimed or not\r\n    mapping(uint256 => bool) internal tokenIdToYield;\r\n\r\n    mapping(uint256 => bool) internal katzIdUsedForMint;\r\n\r\n    // The ZombieKat contract address\r\n    address public zombiesAddress;\r\n\r\n    // String arrays, we were not able to store this in the library. Sing the alphabet while you read this.\r\n    string[] LETTERS = [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\",\r\n        \"d\",\r\n        \"e\",\r\n        \"f\",\r\n        \"g\",\r\n        \"h\",\r\n        \"i\",\r\n        \"j\",\r\n        \"k\",\r\n        \"l\",\r\n        \"m\",\r\n        \"n\",\r\n        \"o\",\r\n        \"p\",\r\n        \"q\",\r\n        \"r\",\r\n        \"s\",\r\n        \"t\",\r\n        \"u\",\r\n        \"v\",\r\n        \"w\",\r\n        \"x\",\r\n        \"y\",\r\n        \"z\"\r\n    ];\r\n\r\n    // Array to store the rarity of the graves\r\n    uint16[][8] internal TIERS;\r\n\r\n    // The miece contract address and the contract owner. \r\n    address mieceAddress;\r\n    address _owner;\r\n\r\n    constructor() ERC721(\"cMyGraves\", \"Grave\") {\r\n        _owner = msg.sender;\r\n\r\n        TIERS[0] = [100, 200, 800, 800, 1200, 2000, 4900]; // arm\r\n        TIERS[1] = [400, 1000, 3200, 5400];\r\n        TIERS[2] = [500, 1400, 1600, 6500];\r\n        TIERS[3] = [100, 400, 500, 9000];\r\n        TIERS[4] = [200, 400, 1100, 1100, 2400, 2400, 2400];\r\n        TIERS[5] = [2500, 2500, 2500, 2500];\r\n        TIERS[6] = [2500, 2500, 2500, 2500];\r\n        TIERS[7] = [40, 140, 1420, 1800, 2000, 2200, 2400 ];\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the staked zombies ids \r\n     * @param staker  The address of the staker\r\n     */   \r\n    function getCatsStaked(address staker)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        return stakerToTokenIds[staker];\r\n    }\r\n    \r\n    /**\r\n     * @dev helper function to remove a token id from the array associated to the staker\r\n     * @param staker  The address of the staker\r\n     * @param index Index\r\n     */   \r\n    function remove(address staker, uint256 index) internal {\r\n        if (index >= stakerToTokenIds[staker].length) return;\r\n\r\n        for (uint256 i = index; i < stakerToTokenIds[staker].length - 1; i++) {\r\n            stakerToTokenIds[staker][i] = stakerToTokenIds[staker][i + 1];\r\n        }\r\n        stakerToTokenIds[staker].pop();\r\n    }\r\n\r\n    /**\r\n     * @dev helper function to maintain the list of staked ids of an address\r\n     * @param staker  The address of the staker\r\n     * @param tokenId  The Staked Zombie Ids\r\n     */\r\n    function removeTokenIdFromStaker(address staker, uint256 tokenId) internal {\r\n        for (uint256 i = 0; i < stakerToTokenIds[staker].length; i++) {\r\n            if (stakerToTokenIds[staker][i] == tokenId) {\r\n                //This is the tokenId to remove;\r\n                remove(staker, i);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Initialize the digging op and sets the target time when user can claim a zombie\r\n     * @param graveId  Target Grave Id\r\n     */\r\n    \r\n    function initDigTime(uint256 graveId, uint256 multipler) internal {\r\n        tokenIdToTargetTime[graveId] =\r\n            block.timestamp +\r\n            (86400 * multipler);\r\n    }\r\n\r\n    /**\r\n     * @dev Unstakes the zombies from the grave, but only if the zombie has been claimed first. \r\n     * @param graveId  Grave Id\r\n     */\r\n    function claimAndUnstake(uint256 graveId) public {\r\n        claimZombie(graveId);\r\n\r\n        require(\r\n            tokenIdToYield[graveId] == true\r\n            // \"You need to claim the zombie first\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < graveyardIdToCatIds[graveId].length; i++) {\r\n            require(\r\n                tokenIdToStaker[graveyardIdToCatIds[graveId][i]] == msg.sender\r\n                // \"Message Sender was not original staker!\"\r\n            );\r\n\r\n            IERC721(zombiesAddress).transferFrom(\r\n                address(this),\r\n                msg.sender,\r\n                graveyardIdToCatIds[graveId][i]\r\n            );\r\n\r\n            removeTokenIdFromStaker(\r\n                msg.sender,\r\n                graveyardIdToCatIds[graveId][i]\r\n            );\r\n\r\n            tokenIdToStaker[graveyardIdToCatIds[graveId][i]] = nullAddress;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Moves staked zombies from one grave to an another\r\n     * @param fromGraveId   Source Grave Id\r\n     * @param toGraveId  Target Grave Id\r\n     */\r\n\r\n    function claimAndMove(uint256 fromGraveId, uint256 toGraveId) public {\r\n        claimZombie(fromGraveId);\r\n\r\n        require(\r\n            tokenIdToYield[fromGraveId] == true\r\n            // \"You need to withdraw the zombie cat first.\"\r\n        );\r\n\r\n        require(\r\n            ownerOf(toGraveId) == msg.sender\r\n            // \"You can only dig your own graves\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < graveyardIdToCatIds[fromGraveId].length; i++) {\r\n            require(\r\n                tokenIdToStaker[graveyardIdToCatIds[fromGraveId][i]] ==\r\n                    msg.sender\r\n                // \"Message Sender was not original staker!\"\r\n            );\r\n            graveyardIdToCatIds[toGraveId].push(\r\n                graveyardIdToCatIds[fromGraveId][i]\r\n            );\r\n        }\r\n        delete graveyardIdToCatIds[fromGraveId]; // Maybe we don't need this\r\n\r\n        initDigTime(toGraveId, 7);\r\n    }\r\n\r\n    /**\r\n     * @dev Stake zombies in a grave\r\n     * @param graveId   The grave id\r\n     * @param tokenIds  Ids of the zombies\r\n     */\r\n\r\n    function stakeByIds(uint256 graveId, uint256[] memory tokenIds) public {\r\n        require(\r\n            tokenIds.length == 2\r\n            // \"You need two cats to dig!\"\r\n        );\r\n\r\n        require(\r\n            graveyardIdToCatIds[graveId].length == 0\r\n            // \"There are already cats digging this grave\"\r\n        );\r\n\r\n        require(\r\n            ownerOf(graveId) == msg.sender\r\n            // \"You can only dig your own graves\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            require(\r\n                IERC721(zombiesAddress).ownerOf(tokenIds[i]) == msg.sender &&\r\n                    tokenIdToStaker[tokenIds[i]] == nullAddress\r\n                // \"Token must be stakable by you!\"\r\n            );\r\n\r\n            IERC721(zombiesAddress).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                tokenIds[i]\r\n            );\r\n\r\n            stakerToTokenIds[msg.sender].push(tokenIds[i]);\r\n\r\n            graveyardIdToCatIds[graveId].push(tokenIds[i]);\r\n\r\n            tokenIdToStaker[tokenIds[i]] = msg.sender;\r\n        }\r\n\r\n        initDigTime(graveId, 7);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the list of ids staked in a grave\r\n     * @param graveId The grave id\r\n     */\r\n    function getCatsStakedByGraveId(uint256 graveId)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        return graveyardIdToCatIds[graveId];\r\n    }\r\n    \r\n\r\n    /**\r\n     * @dev Returns seconds lefts from a digging completion\r\n     * @param graveId The tokenId to return the time lefts\r\n     */ \r\n    function getDiggingCompletionTime(uint256 graveId)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(tokenIdToTargetTime[graveId] != 0\r\n        // , \"Digging not started\"\r\n        );\r\n        require(tokenIdToYield[graveId] != true\r\n        //, \"Digging already finished\"\r\n        );\r\n\r\n        return tokenIdToTargetTime[graveId];\r\n    }\r\n\r\n    /**\r\n     * @dev Claims the zombie from a grave and burn the grave. \r\n     * @param tokenId The grave Id to claim the zombie from\r\n     */\r\n     function claimZombie(uint256 tokenId) internal {\r\n         require(\r\n            ownerOf(tokenId) == msg.sender\r\n            // \"You cannot withdraw from someone else grave\"\r\n        );\r\n        require(\r\n            tokenIdToTargetTime[tokenId] < block.timestamp\r\n            //  \"This grave digging is not finished yet\"\r\n        );\r\n\r\n        // Zombie Contract will mint a Zombie with the same hash as the Current Grave\r\n        IZombie(zombiesAddress).mintZombie(\r\n            msg.sender,\r\n            _tokenIdToHash(tokenId)\r\n        );\r\n\r\n        tokenIdToYield[tokenId] = true;\r\n\r\n        // After the zombie claimed we burn the graveyard\r\n        _transfer(\r\n            msg.sender,\r\n            0x000000000000000000000000000000000000dEaD,\r\n            tokenId\r\n        );\r\n     }\r\n\r\n    /**\r\n     * @dev Claims the zombie from a grave and burn the grave. \r\n     * @param tokenIds The grave Ids to claim the zombie from\r\n     */\r\n    function claimZombies(uint256[] memory tokenIds) public {\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            require(\r\n                graveyardIdToCatIds[tokenIds[i]].length == 0\r\n                // \"There are cats digging the grave, can't only claim yielded zombie\"\r\n            );\r\n\r\n            claimZombie(tokenIds[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Fasten up the digging process by spending mice on the Grave. You can include the same GraveId multiple time, it decreases the digging time with a day.\r\n     * @param tokenIds The graveyard Ids. \r\n     */\r\n    function fastenDigging(uint256[] memory tokenIds) public {\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            IMiece(mieceAddress).burnFrom(\r\n                msg.sender,\r\n                GraveyardLibrary.currentFastenCost(\r\n                    // IZombie(zombiesAddress).totalSupply()\r\n                )\r\n            );\r\n\r\n            tokenIdToTargetTime[tokenIds[i]] =\r\n                tokenIdToTargetTime[tokenIds[i]] -\r\n                86400;\r\n        }\r\n    }\r\n\r\n    /*\r\n  __  __ _     _   _             ___             _   _             \r\n |  \\/  (_)_ _| |_(_)_ _  __ _  | __|  _ _ _  __| |_(_)___ _ _  ___\r\n | |\\/| | | ' \\  _| | ' \\/ _` | | _| || | ' \\/ _|  _| / _ \\ ' \\(_-<\r\n |_|  |_|_|_||_\\__|_|_||_\\__, | |_| \\_,_|_||_\\__|\\__|_\\___/_||_/__/\r\n                         |___/                                     \r\n   */\r\n\r\n    /**\r\n     * @dev Generates a 9 digit hash from a tokenId, address, and random number.\r\n     * @param _t The token id to be used within the hash.\r\n     * @param _a The address to be used within the hash.\r\n     * @param _c The custom nonce to be used within the hash.\r\n     */\r\n    function hash(\r\n        uint256 _t,\r\n        address _a,\r\n        uint256 _c\r\n    ) internal returns (string memory) {\r\n        require(_c < 10);\r\n\r\n        // This will generate a 9 character string.\r\n        //The last 8 digits are random, the first is 0, due to the mouse not being burned.\r\n        string memory currentHash = \"0\";\r\n\r\n        for (uint8 i = 0; i < 8; i++) {\r\n            SEED_NONCE++;\r\n            uint16 _randinput = uint16(\r\n                uint256(\r\n                    keccak256(\r\n                        abi.encodePacked(\r\n                            block.timestamp,\r\n                            block.difficulty,\r\n                            _t,\r\n                            _a,\r\n                            _c,\r\n                            SEED_NONCE\r\n                        )\r\n                    )\r\n                ) % 10000\r\n            );\r\n\r\n            currentHash = string(\r\n                abi.encodePacked(\r\n                    currentHash,\r\n                    GraveyardLibrary.rarityGen(_randinput, i, TIERS)\r\n                )\r\n            );\r\n        }\r\n\r\n        if (hashToMinted[currentHash]) return hash(_t, _a, _c + 1);\r\n\r\n        return currentHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current miece cost of mint.\r\n     */\r\n    function currentMieceCost() public view returns (uint256) {\r\n        return GraveyardLibrary.currentMieceCost(totalSupply());\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Checks if a Katz has been used for minting.\r\n     */\r\n    function checkKatzUsage(uint256 katzId) public view returns (bool) {\r\n        return katzIdUsedForMint[ katzId ];\r\n    }\r\n\r\n    /**\r\n     * @dev Mints a Grave, this is to avoid code duplication.\r\n     */\r\n    function mintGrave(uint256 katzId) public {\r\n        uint256 _totalSupply = totalSupply();\r\n        require(_totalSupply < MAX_SUPPLY);\r\n\r\n        // FIXME: Add these before deployment\r\n        // require(_totalSupply > 4);\r\n        // require(!GraveyardLibrary.isContract(msg.sender));\r\n        \r\n        uint256 thisTokenId = _totalSupply;\r\n\r\n        tokenIdToHash[thisTokenId] = hash(thisTokenId, msg.sender, 0);\r\n\r\n        hashToMinted[tokenIdToHash[thisTokenId]] = true;\r\n\r\n        IMiece(mieceAddress).burnFrom(msg.sender, currentMieceCost());\r\n\r\n        // First 1000 graves yields automatically after 7 days. \r\n        if ( _totalSupply < 1000 ) {\r\n\r\n            bool doesListContainElement = false;\r\n\r\n            uint256[] memory stakedIds = IMiece(mieceAddress).getTokensStaked(msg.sender);\r\n\r\n            for (uint i=0; i < stakedIds.length; i++) {\r\n                if (katzId == stakedIds[i]) {\r\n                    doesListContainElement = true;\r\n                }\r\n            }\r\n            require(doesListContainElement == true);\r\n\r\n            require(katzIdUsedForMint[ katzId ] == false);\r\n\r\n            katzIdUsedForMint[ katzId ] = true;\r\n                                                            // require(stakedIds.length > 0);    \r\n           initDigTime(thisTokenId, 7);\r\n        }\r\n        \r\n        _mint(msg.sender, thisTokenId);\r\n    }\r\n \r\n\r\n  \r\n\r\n    function mintReserve(uint256 _times) public onlyOwner {\r\n        // ZOMBIES = true;\r\n        for(uint256 i=0; i< _times; i++){\r\n            uint256 thisTokenId = totalSupply();\r\n            require(thisTokenId < 50);\r\n            tokenIdToHash[thisTokenId] = hash(thisTokenId, msg.sender, 0);\r\n            hashToMinted[tokenIdToHash[thisTokenId]] = true;\r\n            initDigTime(thisTokenId, 7);\r\n            _mint(msg.sender, thisTokenId);\r\n        }\r\n    }\r\n \r\n\r\n    /*\r\n ____     ___   ____  ___        _____  __ __  ____     __ ______  ____  ___   ____   _____\r\n|    \\   /  _] /    ||   \\      |     ||  |  ||    \\   /  ]      ||    |/   \\ |    \\ / ___/\r\n|  D  ) /  [_ |  o  ||    \\     |   __||  |  ||  _  | /  /|      | |  ||     ||  _  (   \\_ \r\n|    / |    _]|     ||  D  |    |  |_  |  |  ||  |  |/  / |_|  |_| |  ||  O  ||  |  |\\__  |\r\n|    \\ |   [_ |  _  ||     |    |   _] |  :  ||  |  /   \\_  |  |   |  ||     ||  |  |/  \\ |\r\n|  .  \\|     ||  |  ||     |    |  |   |     ||  |  \\     | |  |   |  ||     ||  |  |\\    |\r\n|__|\\_||_____||__|__||_____|    |__|    \\__,_||__|__|\\____| |__|  |____|\\___/ |__|__| \\___|\r\n                                                                                           \r\n*/\r\n\r\n    /**\r\n     * @dev Returns the SVG and metadata for a token Id\r\n     * @param _tokenId The tokenId to return the SVG and metadata for.\r\n     */\r\n\r\n    function tokenURI(uint256 _tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(_exists(_tokenId));\r\n\r\n        string memory tokenHash = _tokenIdToHash(_tokenId);\r\n        \r\n        return\r\n            GraveyardLibrary.tokenURIData(\r\n                _tokenId,\r\n                tokenHash,\r\n                traitTypes,\r\n                LETTERS,\r\n                tokenIdToTargetTime[_tokenId]\r\n            );\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns a hash for a given tokenId\r\n     * @param _tokenId The tokenId to return the hash for.\r\n     */\r\n    function _tokenIdToHash(uint256 _tokenId)\r\n        public\r\n        view\r\n        returns (string memory)\r\n    {\r\n        string memory tokenHash = tokenIdToHash[_tokenId];\r\n        //If this is a burned token, override the previous hash\r\n        if (tokenIdToYield[_tokenId]) {\r\n            tokenHash = string(\r\n                abi.encodePacked(\r\n                    \"1\",\r\n                    GraveyardLibrary.substring(tokenHash, 1, 9)\r\n                )\r\n            );\r\n        }\r\n\r\n        return tokenHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the wallet of a given wallet. Mainly for ease for frontend devs.\r\n     * @param _wallet The wallet to get the tokens of.\r\n     */\r\n    function walletOfOwner(address _wallet)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256 tokenCount = balanceOf(_wallet);\r\n\r\n        uint256[] memory tokensId = new uint256[](tokenCount);\r\n        for (uint256 i; i < tokenCount; i++) {\r\n            tokensId[i] = tokenOfOwnerByIndex(_wallet, i);\r\n        }\r\n        return tokensId;\r\n    }\r\n\r\n    /*\r\n\r\n  ___   __    __  ____     ___  ____       _____  __ __  ____     __ ______  ____  ___   ____   _____\r\n /   \\ |  |__|  ||    \\   /  _]|    \\     |     ||  |  ||    \\   /  ]      ||    |/   \\ |    \\ / ___/\r\n|     ||  |  |  ||  _  | /  [_ |  D  )    |   __||  |  ||  _  | /  /|      | |  ||     ||  _  (   \\_ \r\n|  O  ||  |  |  ||  |  ||    _]|    /     |  |_  |  |  ||  |  |/  / |_|  |_| |  ||  O  ||  |  |\\__  |\r\n|     ||  `  '  ||  |  ||   [_ |    \\     |   _] |  :  ||  |  /   \\_  |  |   |  ||     ||  |  |/  \\ |\r\n|     | \\      / |  |  ||     ||  .  \\    |  |   |     ||  |  \\     | |  |   |  ||     ||  |  |\\    |\r\n \\___/   \\_/\\_/  |__|__||_____||__|\\_|    |__|    \\__,_||__|__|\\____| |__|  |____|\\___/ |__|__| \\___|\r\n                                                                                                     \r\n\r\n\r\n    */\r\n\r\n    \r\n    /**\r\n     * @dev Add a trait type\r\n     * @param _traitTypeIndex The trait type index\r\n     * @param traits Array of traits to add\r\n     */\r\n\r\n    function addTraitType(\r\n        uint256 _traitTypeIndex,\r\n        GraveyardLibrary.Trait[] memory traits\r\n    ) public onlyOwner {\r\n        for (uint256 i = 0; i < traits.length; i++) {\r\n            traitTypes[_traitTypeIndex].push(\r\n                GraveyardLibrary.Trait(\r\n                    traits[i].traitName,\r\n                    traits[i].traitType,\r\n                    traits[i].pixels,\r\n                    traits[i].pixelCount\r\n                )\r\n            );\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the miece, cats and zombie contract addresses\r\n     * @param _mieceAddress The miece address\r\n     * @param _zombiesAddress The cats address\r\n     */\r\n    function setContractAddresses(\r\n        address _mieceAddress,\r\n        address _zombiesAddress\r\n    ) public onlyOwner {\r\n        mieceAddress = _mieceAddress;\r\n        zombiesAddress = _zombiesAddress;\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership\r\n     * @param _newOwner The new owner\r\n     */\r\n    // function transferOwnership(address _newOwner) public onlyOwner {\r\n    //     _owner = _newOwner;\r\n    // }\r\n    \r\n\r\n    /**\r\n     * @dev Modifier to only allow owner to call functions\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender);\r\n        _;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"_tokenIdToHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_traitTypeIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"traitName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"traitType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pixels\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pixelCount\",\"type\":\"uint256\"}],\"internalType\":\"struct GraveyardLibrary.Trait[]\",\"name\":\"traits\",\"type\":\"tuple[]\"}],\"name\":\"addTraitType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"katzId\",\"type\":\"uint256\"}],\"name\":\"checkKatzUsage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromGraveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toGraveId\",\"type\":\"uint256\"}],\"name\":\"claimAndMove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"graveId\",\"type\":\"uint256\"}],\"name\":\"claimAndUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimZombies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentMieceCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"fastenDigging\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getCatsStaked\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"graveId\",\"type\":\"uint256\"}],\"name\":\"getCatsStakedByGraveId\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"graveId\",\"type\":\"uint256\"}],\"name\":\"getDiggingCompletionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"katzId\",\"type\":\"uint256\"}],\"name\":\"mintGrave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_times\",\"type\":\"uint256\"}],\"name\":\"mintReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mieceAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zombiesAddress\",\"type\":\"address\"}],\"name\":\"setContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"graveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stakeByIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"traitTypes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"traitName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"traitType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pixels\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pixelCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zombiesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Graveyard","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"GraveyardLibrary:91022862fc863dd812fe608db44cad0714c58332","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b56eec5563315257b0860708059d136b235fabda504ac5c3cad48931dcbd6afa"}]}