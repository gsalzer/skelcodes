{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/BridgeBSCCISLA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title BridgeBSCCISLA\\n *\\n */\\ncontract BridgeBSCCISLA is Ownable {\\n    IERC20 private _token;\\n\\n    address public tokenOwner;\\n    address public oracleAddress;\\n    uint256 public originalSupply;\\n    uint256 public maxSwapAmount;\\n    uint256 public minimumGasForOperation = 6 * 10**15; // 6 finney (0.006 ETH)\\n    bool public isActive = true;\\n    uint256 public bridgeFee = 1 * 10**18;\\n\\n    struct Swap {\\n        bytes32 id;\\n        uint256 origTimestamp;\\n        uint256 currentTimestamp;\\n        bool isOutbound;\\n        bool isComplete;\\n        bool isRefunded;\\n        bool isSendGasFunded;\\n        address swapAddress;\\n        uint256 amount;\\n    }\\n\\n    mapping(bytes32 => Swap) public swaps;\\n    mapping(address => Swap) public lastUserSwap;\\n\\n \\n    event ReceiveTokensFromSource(\\n        bytes32 indexed id,\\n        uint256 origTimestamp,\\n        address sender,\\n        uint256 amount\\n    );\\n\\n    event destinationGasFunded(bytes32 indexed id);\\n\\n    event SendTokensToDestination(\\n        bytes32 indexed id,\\n        address receiver,\\n        uint256 amount\\n    );\\n\\n    event RefundTokensToSource(\\n        bytes32 indexed id,\\n        address sender,\\n        uint256 amount\\n    );\\n\\n    event TokenOwnerUpdated(address previousOwner, address newOwner);\\n\\n    constructor(\\n        address _oracleAddress,\\n        address _tokenOwner,\\n        address _tokenAddy,\\n        uint256 _maxSwapAmount\\n    ) {\\n        oracleAddress = _oracleAddress;\\n        tokenOwner = _tokenOwner;\\n        _token = IERC20(_tokenAddy);\\n        maxSwapAmount = _maxSwapAmount;\\n    }\\n\\n    function getSwapTokenAddress() external view returns (address) {\\n        return address(_token);\\n    }\\n\\n    function changeActiveState(bool _isActive) external {\\n        require(\\n            msg.sender == owner() || msg.sender == tokenOwner,\\n            \\\"changeActiveState user must be contract creator\\\"\\n        );\\n        isActive = _isActive;\\n    }\\n\\n    function changeBridgeFee(uint256 _newCost) external onlyOwner {\\n        bridgeFee = _newCost;\\n    }\\n\\n    function updateSupply() external onlyOwner {\\n        originalSupply = _token.balanceOf(address(this));\\n    }\\n\\n    function changeOracleAddress(address _oracleAddress) external onlyOwner {\\n        oracleAddress = _oracleAddress;\\n        transferOwnership(oracleAddress);\\n    }\\n\\n    function updateTokenOwner(address newOwner) external {\\n        require(\\n            msg.sender == tokenOwner || msg.sender == owner(),\\n            \\\"user must be current token owner to change it\\\"\\n        );\\n        address previousOwner = tokenOwner;\\n        tokenOwner = newOwner;\\n        emit TokenOwnerUpdated(previousOwner, newOwner);\\n    }\\n\\n    function depositTokens(uint256 _amount) external {\\n        require(\\n            msg.sender == tokenOwner,\\n            \\\"depositTokens user must be token owner\\\"\\n        );\\n        _token.transferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    function withdrawTokens(uint256 _amount) external {\\n        require(\\n            msg.sender == tokenOwner,\\n            \\\"withdrawTokens user must be token owner\\\"\\n        );\\n        _token.transfer(msg.sender, _amount);\\n    }\\n\\n    function updateSwapCompletionStatus(bytes32 _id, bool _isComplete)\\n        external\\n        onlyOwner\\n    {\\n        swaps[_id].isComplete = _isComplete;\\n    }\\n\\n    function updateMinimumGasForOperation(uint256 _amountGas)\\n        external\\n        onlyOwner\\n    {\\n        minimumGasForOperation = _amountGas;\\n    }\\n\\n    function receiveTokensFromSource(uint256 _amount)\\n        external\\n        payable\\n        returns (bytes32, uint256)\\n    {\\n        require(isActive, \\\"this atomic swap instance is not active\\\");\\n        require(\\n            msg.value >= minimumGasForOperation,\\n            \\\"you must also send enough gas to cover the target transaction\\\"\\n        );\\n        require(\\n            maxSwapAmount == 0 || _amount <= maxSwapAmount,\\n            \\\"trying to send more than maxSwapAmount\\\"\\n        );\\n\\n        payable(oracleAddress).transfer(msg.value);\\n        _token.transferFrom(msg.sender, address(this), _amount);\\n\\n        uint256 _ts = block.timestamp;\\n        bytes32 _id = sha256(abi.encodePacked(msg.sender, _ts, _amount));\\n\\n        swaps[_id] = Swap({\\n            id: _id,\\n            origTimestamp: _ts,\\n            currentTimestamp: _ts,\\n            isOutbound: false,\\n            isComplete: false,\\n            isRefunded: false,\\n            isSendGasFunded: false,\\n            swapAddress: msg.sender,\\n            amount: _amount\\n        });\\n        lastUserSwap[msg.sender] = swaps[_id];\\n\\n        emit ReceiveTokensFromSource(_id, _ts, msg.sender, _amount);\\n        return (_id, _ts);\\n    }\\n\\n\\n    function getLastUserSwap(address _addy) external view returns(Swap memory){\\n        return lastUserSwap[_addy];\\n    }\\n\\n    function unsetLastUserSwap(address _addy) external onlyOwner {\\n        delete lastUserSwap[_addy];\\n    }\\n\\n    // msg.sender must be the user who originally created the swap.\\n    // Otherwise, the unique identifier will not match from the originally\\n    // sending txn.\\n    //\\n    // NOTE: We're aware this function can be spoofed by creating a sha256 hash of msg.sender's address\\n    // and _origTimestamp, but it's important to note refundTokensFromSource and sendTokensToDestination\\n    // can only be executed by the owner/oracle. Therefore validation should be done by the oracle before\\n    // executing those and the only possibility of a vulnerability is if someone has compromised the oracle account.\\n    function fundSendToDestinationGas(\\n        bytes32 _id,\\n        uint256 _origTimestamp,\\n        uint256 _amount\\n    ) external payable {\\n        require(\\n            msg.value >= minimumGasForOperation,\\n            \\\"you must send enough gas to cover the send transaction\\\"\\n        );\\n        require(\\n            _id ==\\n                sha256(abi.encodePacked(msg.sender, _origTimestamp, _amount)),\\n            \\\"we don't recognize this swap\\\"\\n        );\\n        payable(oracleAddress).transfer(msg.value);\\n\\n\\n        //check if swap already exists\\n        if (!(swaps[_id].amount > 0 && swaps[_id].origTimestamp > 0)) {\\n            swaps[_id] = Swap({\\n                id: _id,\\n                origTimestamp: _origTimestamp,\\n                currentTimestamp: block.timestamp,\\n                isOutbound: true,\\n                isComplete: false,\\n                isRefunded: false,\\n                isSendGasFunded: true,\\n                swapAddress: msg.sender,\\n                amount: _amount\\n            });\\n        }\\n\\n        emit destinationGasFunded(_id);\\n    }\\n\\n    // This must be called AFTER fundSendToDestinationGas has been executed\\n    // for this txn to fund this send operation\\n    function refundTokensFromSource(bytes32 _id) external {\\n        require(isActive, \\\"this atomic swap instance is not active\\\");\\n\\n        Swap storage swap = swaps[_id];\\n\\n        _confirmSwapExistsGasFundedAndSenderValid(swap);\\n        swap.isRefunded = true;\\n        _token.transfer(swap.swapAddress, swap.amount);\\n        emit RefundTokensToSource(_id, swap.swapAddress, swap.amount);\\n    }\\n\\n    // This must be called AFTER fundSendToDestinationGas has been executed\\n    // for this txn to fund this send operation\\n    function sendTokensToDestination(bytes32 _id) external returns (bytes32) {\\n        require(isActive, \\\"this atomic swap instance is not active\\\");\\n\\n       Swap storage swap = swaps[_id];\\n\\n        _confirmSwapExistsGasFundedAndSenderValid(swap);\\n        _token.transfer(swap.swapAddress, swap.amount);\\n        swap.currentTimestamp = block.timestamp;\\n        swap.isComplete = true;\\n        emit SendTokensToDestination(_id, swap.swapAddress, swap.amount);\\n        return _id;\\n    }\\n\\n    function _confirmSwapExistsGasFundedAndSenderValid(Swap memory swap)\\n        private\\n        view\\n        onlyOwner\\n    {\\n        // functions that call this should only be called by the current owner\\n        // or oracle address as they will do the appropriate validation beforehand\\n        // to confirm the receiving swap is valid before sending tokens to the user.\\n        require(\\n            swap.origTimestamp > 0 && swap.amount > 0,\\n            \\\"swap does not exist yet.\\\"\\n        );\\n        // We're just validating here that the swap has not been\\n        // completed and gas has been funded before moving forward.\\n        require(\\n            !swap.isComplete && !swap.isRefunded && swap.isSendGasFunded,\\n            \\\"swap has already been completed, refunded, or gas has not been funded\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxSwapAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"origTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceiveTokensFromSource\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundTokensToSource\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendTokensToDestination\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TokenOwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"destinationGasFunded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridgeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"changeActiveState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCost\",\"type\":\"uint256\"}],\"name\":\"changeBridgeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"name\":\"changeOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_origTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fundSendToDestinationGas\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addy\",\"type\":\"address\"}],\"name\":\"getLastUserSwap\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"origTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOutbound\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isComplete\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRefunded\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSendGasFunded\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct BridgeBSCCISLA.Swap\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUserSwap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"origTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOutbound\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isComplete\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRefunded\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSendGasFunded\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumGasForOperation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"originalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"receiveTokensFromSource\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"refundTokensFromSource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"sendTokensToDestination\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"swaps\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"origTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOutbound\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isComplete\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRefunded\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSendGasFunded\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addy\",\"type\":\"address\"}],\"name\":\"unsetLastUserSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountGas\",\"type\":\"uint256\"}],\"name\":\"updateMinimumGasForOperation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_isComplete\",\"type\":\"bool\"}],\"name\":\"updateSwapCompletionStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"updateTokenOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BridgeBSCCISLA","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000053d5e9fa0c92eada19aba60aaf616b645cde27bf00000000000000000000000053d5e9fa0c92eada19aba60aaf616b645cde27bf00000000000000000000000063d37b28da89e600f0938d0c9d8011d31ea286740000000000000000000000000000000000000001431e0fae6d7217caa0000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}