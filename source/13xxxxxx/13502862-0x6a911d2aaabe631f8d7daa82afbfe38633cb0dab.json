{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.6.6 https://hardhat.org\r\n\r\n// File contracts/solidity/proxy/IBeacon.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\r\n */\r\ninterface IBeacon {\r\n    /**\r\n     * @dev Must return an address that can be used as a delegate call target.\r\n     *\r\n     * {BeaconProxy} will check that this address is a contract.\r\n     */\r\n    function childImplementation() external view returns (address);\r\n    function upgradeChildTo(address newImplementation) external;\r\n}\r\n\r\n\r\n// File contracts/solidity/interface/INFTXVaultFactory.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface INFTXVaultFactory is IBeacon {\r\n  // Read functions.\r\n  function numVaults() external view returns (uint256);\r\n  function zapContract() external view returns (address);\r\n  function feeDistributor() external view returns (address);\r\n  function eligibilityManager() external view returns (address);\r\n  function vault(uint256 vaultId) external view returns (address);\r\n  function allVaults() external view returns (address[] memory);\r\n  function vaultsForAsset(address asset) external view returns (address[] memory);\r\n  function isLocked(uint256 id) external view returns (bool);\r\n  function excludedFromFees(address addr) external view returns (bool);\r\n  function factoryMintFee() external view returns (uint64);\r\n  function factoryRandomRedeemFee() external view returns (uint64);\r\n  function factoryTargetRedeemFee() external view returns (uint64);\r\n  function factoryRandomSwapFee() external view returns (uint64);\r\n  function factoryTargetSwapFee() external view returns (uint64);\r\n  function vaultFees(uint256 vaultId) external view returns (uint256, uint256, uint256, uint256, uint256);\r\n\r\n  event NewFeeDistributor(address oldDistributor, address newDistributor);\r\n  event NewZapContract(address oldZap, address newZap);\r\n  event FeeExclusion(address feeExcluded, bool excluded);\r\n  event NewEligibilityManager(address oldEligManager, address newEligManager);\r\n  event NewVault(uint256 indexed vaultId, address vaultAddress, address assetAddress);\r\n  event UpdateVaultFees(uint256 vaultId, uint256 mintFee, uint256 randomRedeemFee, uint256 targetRedeemFee, uint256 randomSwapFee, uint256 targetSwapFee);\r\n  event DisableVaultFees(uint256 vaultId);\r\n  event UpdateFactoryFees(uint256 mintFee, uint256 randomRedeemFee, uint256 targetRedeemFee, uint256 randomSwapFee, uint256 targetSwapFee);\r\n\r\n  // Write functions.\r\n  function __NFTXVaultFactory_init(address _vaultImpl, address _feeDistributor) external;\r\n  function createVault(\r\n      string calldata name,\r\n      string calldata symbol,\r\n      address _assetAddress,\r\n      bool is1155,\r\n      bool allowAllItems\r\n  ) external returns (uint256);\r\n  function setFeeDistributor(address _feeDistributor) external;\r\n  function setEligibilityManager(address _eligibilityManager) external;\r\n  function setZapContract(address _zapContract) external;\r\n  function setFeeExclusion(address _excludedAddr, bool excluded) external;\r\n\r\n  function setFactoryFees(\r\n    uint256 mintFee, \r\n    uint256 randomRedeemFee, \r\n    uint256 targetRedeemFee,\r\n    uint256 randomSwapFee, \r\n    uint256 targetSwapFee\r\n  ) external; \r\n  function setVaultFees(\r\n      uint256 vaultId, \r\n      uint256 mintFee, \r\n      uint256 randomRedeemFee, \r\n      uint256 targetRedeemFee,\r\n      uint256 randomSwapFee, \r\n      uint256 targetSwapFee\r\n  ) external;\r\n  function disableVaultFees(uint256 vaultId) external;\r\n}\r\n\r\n\r\n// File contracts/solidity/interface/INFTXLPStaking.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface INFTXLPStaking {\r\n    function nftxVaultFactory() external view returns (address);\r\n    function rewardDistTokenImpl() external view returns (address);\r\n    function stakingTokenProvider() external view returns (address);\r\n    function vaultToken(address _stakingToken) external view returns (address);\r\n    function stakingToken(address _vaultToken) external view returns (address);\r\n    function rewardDistributionToken(uint256 vaultId) external view returns (address);\r\n    function newRewardDistributionToken(uint256 vaultId) external view returns (address);\r\n    function oldRewardDistributionToken(uint256 vaultId) external view returns (address);\r\n    function unusedRewardDistributionToken(uint256 vaultId) external view returns (address);\r\n    function rewardDistributionTokenAddr(address stakingToken, address rewardToken) external view returns (address);\r\n    \r\n    // Write functions.\r\n    function __NFTXLPStaking__init(address _stakingTokenProvider) external;\r\n    function setNFTXVaultFactory(address newFactory) external;\r\n    function setStakingTokenProvider(address newProvider) external;\r\n    function addPoolForVault(uint256 vaultId) external;\r\n    function updatePoolForVault(uint256 vaultId) external;\r\n    function updatePoolForVaults(uint256[] calldata vaultId) external;\r\n    function receiveRewards(uint256 vaultId, uint256 amount) external returns (bool);\r\n    function deposit(uint256 vaultId, uint256 amount) external;\r\n    function timelockDepositFor(uint256 vaultId, address account, uint256 amount, uint256 timelockLength) external;\r\n    function exit(uint256 vaultId, uint256 amount) external;\r\n    function rescue(uint256 vaultId) external;\r\n    function withdraw(uint256 vaultId, uint256 amount) external;\r\n    function claimRewards(uint256 vaultId) external;\r\n}\r\n\r\n\r\n// File contracts/solidity/interface/INFTXFeeDistributor.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface INFTXFeeDistributor {\r\n  \r\n  struct FeeReceiver {\r\n    uint256 allocPoint;\r\n    address receiver;\r\n    bool isContract;\r\n  }\r\n\r\n  function nftxVaultFactory() external returns (address);\r\n  function lpStaking() external returns (address);\r\n  function treasury() external returns (address);\r\n  function defaultTreasuryAlloc() external returns (uint256);\r\n  function defaultLPAlloc() external returns (uint256);\r\n  function allocTotal(uint256 vaultId) external returns (uint256);\r\n  function specificTreasuryAlloc(uint256 vaultId) external returns (uint256);\r\n\r\n  // Write functions.\r\n  function __FeeDistributor__init__(address _lpStaking, address _treasury) external;\r\n  function rescueTokens(address token) external;\r\n  function distribute(uint256 vaultId) external;\r\n  function addReceiver(uint256 _vaultId, uint256 _allocPoint, address _receiver, bool _isContract) external;\r\n  function initializeVaultReceivers(uint256 _vaultId) external;\r\n  function changeMultipleReceiverAlloc(\r\n    uint256[] memory _vaultIds, \r\n    uint256[] memory _receiverIdxs, \r\n    uint256[] memory allocPoints\r\n  ) external;\r\n\r\n  function changeMultipleReceiverAddress(\r\n    uint256[] memory _vaultIds, \r\n    uint256[] memory _receiverIdxs, \r\n    address[] memory addresses, \r\n    bool[] memory isContracts\r\n  ) external;\r\n  function changeReceiverAlloc(uint256 _vaultId, uint256 _idx, uint256 _allocPoint) external;\r\n  function changeReceiverAddress(uint256 _vaultId, uint256 _idx, address _address, bool _isContract) external;\r\n  function removeReceiver(uint256 _vaultId, uint256 _receiverIdx) external;\r\n\r\n  // Configuration functions.\r\n  function setTreasuryAddress(address _treasury) external;\r\n  function setDefaultTreasuryAlloc(uint256 _allocPoint) external;\r\n  function setSpecificTreasuryAlloc(uint256 _vaultId, uint256 _allocPoint) external;\r\n  function setLPStakingAddress(address _lpStaking) external;\r\n  function setNFTXVaultFactory(address _factory) external;\r\n  function setDefaultLPAlloc(uint256 _allocPoint) external;\r\n}\r\n\r\n\r\n// File contracts/solidity/proxy/ClonesUpgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\r\n * deploying minimal proxy contracts, also known as \"clones\".\r\n *\r\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\r\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\r\n *\r\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\r\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\r\n * deterministic method.\r\n *\r\n * _Available since v3.4._\r\n */\r\nlibrary ClonesUpgradeable {\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\r\n     *\r\n     * This function uses the create opcode, which should never revert.\r\n     */\r\n    function clone(address implementation) internal returns (address instance) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create(0, ptr, 0x37)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\r\n     *\r\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\r\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\r\n     * the clones cannot be deployed twice at the same address.\r\n     */\r\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create2(0, ptr, 0x37, salt)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create2 failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(address implementation, bytes32 salt, address deployer) internal pure returns (address predicted) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\r\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\r\n            mstore(add(ptr, 0x4c), salt)\r\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\r\n            predicted := keccak256(add(ptr, 0x37), 0x55)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(address implementation, bytes32 salt) internal view returns (address predicted) {\r\n        return predictDeterministicAddress(implementation, salt, address(this));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/proxy/Proxy.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\r\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\r\n * be specified by overriding the virtual {_implementation} function.\r\n *\r\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\r\n * different contract through the {_delegate} function.\r\n *\r\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\r\n */\r\nabstract contract Proxy {\r\n    /**\r\n     * @dev Delegates the current call to `implementation`.\r\n     *\r\n     * This function does not return to its internall call site, it will return directly to the external caller.\r\n     */\r\n    function _delegate(address implementation) internal virtual {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize())\r\n\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize())\r\n\r\n            switch result\r\n            // delegatecall returns 0 on error.\r\n            case 0 { revert(0, returndatasize()) }\r\n            default { return(0, returndatasize()) }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\r\n     * and {_fallback} should delegate.\r\n     */\r\n    function _implementation() internal view virtual returns (address);\r\n\r\n    /**\r\n     * @dev Delegates the current call to the address returned by `_implementation()`.\r\n     *\r\n     * This function does not return to its internall call site, it will return directly to the external caller.\r\n     */\r\n    function _fallback() internal virtual {\r\n        _beforeFallback();\r\n        _delegate(_implementation());\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\r\n     * function in the contract matches the call data.\r\n     */\r\n    fallback () external payable virtual {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\r\n     * is empty.\r\n     */\r\n    receive () external payable virtual {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\r\n     * call, or as part of the Solidity `fallback` or `receive` functions.\r\n     *\r\n     * If overriden should call `super._beforeFallback()`.\r\n     */\r\n    function _beforeFallback() internal virtual {\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/util/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/proxy/BeaconProxy.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\r\n *\r\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\r\n * conflict with the storage layout of the implementation behind the proxy.\r\n *\r\n * _Available since v3.4._\r\n */\r\ncontract BeaconProxy is Proxy {\r\n    /**\r\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\r\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\r\n     */\r\n    bytes32 private constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\r\n\r\n    /**\r\n     * @dev Initializes the proxy with `beacon`.\r\n     *\r\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\r\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\r\n     * constructor.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `beacon` must be a contract with the interface {IBeacon}.\r\n     */\r\n    constructor(address beacon, bytes memory data) payable {\r\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1));\r\n        _setBeacon(beacon, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current beacon address.\r\n     */\r\n    function _beacon() internal view virtual returns (address beacon) {\r\n        bytes32 slot = _BEACON_SLOT;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            beacon := sload(slot)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current implementation address of the associated beacon.\r\n     */\r\n    function _implementation() internal view virtual override returns (address) {\r\n        return IBeacon(_beacon()).childImplementation();\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the proxy to use a new beacon.\r\n     *\r\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `beacon` must be a contract.\r\n     * - The implementation returned by `beacon` must be a contract.\r\n     */\r\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\r\n        require(\r\n            Address.isContract(beacon),\r\n            \"BeaconProxy: beacon is not a contract\"\r\n        );\r\n        require(\r\n            Address.isContract(IBeacon(beacon).childImplementation()),\r\n            \"BeaconProxy: beacon implementation is not a contract\"\r\n        );\r\n        bytes32 slot = _BEACON_SLOT;\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            sstore(slot, beacon)\r\n        }\r\n\r\n        if (data.length > 0) {\r\n            Address.functionDelegateCall(_implementation(), data, \"BeaconProxy: function call failed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/proxy/Initializable.sol\r\n\r\n\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/util/ContextUpgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File contracts/solidity/util/OwnableUpgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File contracts/solidity/proxy/UpgradeableBeacon.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\r\n * implementation contract, which is where they will delegate all function calls.\r\n *\r\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\r\n */\r\ncontract UpgradeableBeacon is IBeacon, OwnableUpgradeable {\r\n    address private _childImplementation;\r\n\r\n    /**\r\n     * @dev Emitted when the child implementation returned by the beacon is changed.\r\n     */\r\n    event Upgraded(address indexed childImplementation);\r\n\r\n    /**\r\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\r\n     * beacon.\r\n     */\r\n    function __UpgradeableBeacon__init(address childImplementation_) public initializer {\r\n        _setChildImplementation(childImplementation_);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current child implementation address.\r\n     */\r\n    function childImplementation() public view virtual override returns (address) {\r\n        return _childImplementation;\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrades the beacon to a new implementation.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - msg.sender must be the owner of the contract.\r\n     * - `newChildImplementation` must be a contract.\r\n     */\r\n    function upgradeChildTo(address newChildImplementation) public virtual override onlyOwner {\r\n        _setChildImplementation(newChildImplementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the implementation contract address for this beacon\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `newChildImplementation` must be a contract.\r\n     */\r\n    function _setChildImplementation(address newChildImplementation) private {\r\n        require(Address.isContract(newChildImplementation), \"UpgradeableBeacon: child implementation is not a contract\");\r\n        _childImplementation = newChildImplementation;\r\n        emit Upgraded(newChildImplementation);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/util/SafeMathUpgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMathUpgradeable {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\r\n        return int256(value);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/util/PausableUpgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract PausableUpgradeable is OwnableUpgradeable {\r\n\r\n    function __Pausable_init() internal initializer {\r\n        __Ownable_init();\r\n    }\r\n\r\n    event SetPaused(uint256 lockId, bool paused);\r\n    event SetIsGuardian(address addr, bool isGuardian);\r\n\r\n    mapping(address => bool) public isGuardian;\r\n    mapping(uint256 => bool) public isPaused;\r\n    // 0 : createVault\r\n    // 1 : mint\r\n    // 2 : redeem\r\n    // 3 : swap\r\n    // 4 : flashloan\r\n\r\n    function onlyOwnerIfPaused(uint256 lockId) public view virtual {\r\n        require(!isPaused[lockId] || msg.sender == owner(), \"Paused\");\r\n    }\r\n\r\n    function unpause(uint256 lockId)\r\n        public\r\n        virtual\r\n        onlyOwner\r\n    {\r\n        isPaused[lockId] = false;\r\n        emit SetPaused(lockId, false);\r\n    }\r\n\r\n    function pause(uint256 lockId) public virtual {\r\n        require(isGuardian[msg.sender], \"Can't pause\");\r\n        isPaused[lockId] = true;\r\n        emit SetPaused(lockId, true);\r\n    }\r\n\r\n    function setIsGuardian(address addr, bool _isGuardian) public virtual onlyOwner {\r\n        isGuardian[addr] = _isGuardian;\r\n        emit SetIsGuardian(addr, _isGuardian);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/interface/INFTXEligibility.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface INFTXEligibility {\r\n    // Read functions.\r\n    function name() external pure returns (string memory);\r\n    function finalized() external view returns (bool);\r\n    function targetAsset() external pure returns (address);\r\n    function checkAllEligible(uint256[] calldata tokenIds)\r\n        external\r\n        view\r\n        returns (bool);\r\n    function checkEligible(uint256[] calldata tokenIds)\r\n        external\r\n        view\r\n        returns (bool[] memory);\r\n    function checkAllIneligible(uint256[] calldata tokenIds)\r\n        external\r\n        view\r\n        returns (bool);\r\n    function checkIsEligible(uint256 tokenId) external view returns (bool);\r\n\r\n    // Write functions.\r\n    function __NFTXEligibility_init_bytes(bytes calldata configData) external;\r\n    function beforeMintHook(uint256[] calldata tokenIds) external;\r\n    function afterMintHook(uint256[] calldata tokenIds) external;\r\n    function beforeRedeemHook(uint256[] calldata tokenIds) external;\r\n    function afterRedeemHook(uint256[] calldata tokenIds) external;\r\n}\r\n\r\n\r\n// File contracts/solidity/token/IERC20Upgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/solidity/interface/INFTXVault.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ninterface INFTXVault is IERC20Upgradeable {\r\n    function manager() external view returns (address);\r\n    function assetAddress() external view returns (address);\r\n    function vaultFactory() external view returns (INFTXVaultFactory);\r\n    function eligibilityStorage() external view returns (INFTXEligibility);\r\n\r\n    function is1155() external view returns (bool);\r\n    function allowAllItems() external view returns (bool);\r\n    function enableMint() external view returns (bool);\r\n    function enableRandomRedeem() external view returns (bool);\r\n    function enableTargetRedeem() external view returns (bool);\r\n    function enableRandomSwap() external view returns (bool);\r\n    function enableTargetSwap() external view returns (bool);\r\n\r\n    function vaultId() external view returns (uint256);\r\n    function nftIdAt(uint256 holdingsIndex) external view returns (uint256);\r\n    function allHoldings() external view returns (uint256[] memory);\r\n    function totalHoldings() external view returns (uint256);\r\n    function mintFee() external view returns (uint256);\r\n    function randomRedeemFee() external view returns (uint256);\r\n    function targetRedeemFee() external view returns (uint256);\r\n    function randomSwapFee() external view returns (uint256);\r\n    function targetSwapFee() external view returns (uint256);\r\n    function vaultFees() external view returns (uint256, uint256, uint256, uint256, uint256);\r\n\r\n    event VaultInit(\r\n        uint256 indexed vaultId,\r\n        address assetAddress,\r\n        bool is1155,\r\n        bool allowAllItems\r\n    );\r\n\r\n    event ManagerSet(address manager);\r\n    event EligibilityDeployed(uint256 moduleIndex, address eligibilityAddr);\r\n    // event CustomEligibilityDeployed(address eligibilityAddr);\r\n\r\n    event EnableMintUpdated(bool enabled);\r\n    event EnableRandomRedeemUpdated(bool enabled);\r\n    event EnableTargetRedeemUpdated(bool enabled);\r\n    event EnableRandomSwapUpdated(bool enabled);\r\n    event EnableTargetSwapUpdated(bool enabled);\r\n\r\n    event Minted(uint256[] nftIds, uint256[] amounts, address to);\r\n    event Redeemed(uint256[] nftIds, uint256[] specificIds, address to);\r\n    event Swapped(\r\n        uint256[] nftIds,\r\n        uint256[] amounts,\r\n        uint256[] specificIds,\r\n        uint256[] redeemedIds,\r\n        address to\r\n    );\r\n\r\n    function __NFTXVault_init(\r\n        string calldata _name,\r\n        string calldata _symbol,\r\n        address _assetAddress,\r\n        bool _is1155,\r\n        bool _allowAllItems\r\n    ) external;\r\n\r\n    function finalizeVault() external;\r\n\r\n    function setVaultMetadata(\r\n        string memory name_, \r\n        string memory symbol_\r\n    ) external;\r\n\r\n    function setVaultFeatures(\r\n        bool _enableMint,\r\n        bool _enableRandomRedeem,\r\n        bool _enableTargetRedeem,\r\n        bool _enableRandomSwap,\r\n        bool _enableTargetSwap\r\n    ) external;\r\n\r\n    function setFees(\r\n        uint256 _mintFee,\r\n        uint256 _randomRedeemFee,\r\n        uint256 _targetRedeemFee,\r\n        uint256 _randomSwapFee,\r\n        uint256 _targetSwapFee\r\n    ) external;\r\n    function disableVaultFees() external;\r\n\r\n    // This function allows for an easy setup of any eligibility module contract from the EligibilityManager.\r\n    // It takes in ABI encoded parameters for the desired module. This is to make sure they can all follow\r\n    // a similar interface.\r\n    function deployEligibilityStorage(\r\n        uint256 moduleIndex,\r\n        bytes calldata initData\r\n    ) external returns (address);\r\n\r\n    // The manager has control over options like fees and features\r\n    function setManager(address _manager) external;\r\n\r\n    function mint(\r\n        uint256[] calldata tokenIds,\r\n        uint256[] calldata amounts /* ignored for ERC721 vaults */\r\n    ) external returns (uint256);\r\n\r\n    function mintTo(\r\n        uint256[] calldata tokenIds,\r\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\r\n        address to\r\n    ) external returns (uint256);\r\n\r\n    function redeem(uint256 amount, uint256[] calldata specificIds)\r\n        external\r\n        returns (uint256[] calldata);\r\n\r\n    function redeemTo(\r\n        uint256 amount,\r\n        uint256[] calldata specificIds,\r\n        address to\r\n    ) external returns (uint256[] calldata);\r\n\r\n    function swap(\r\n        uint256[] calldata tokenIds,\r\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\r\n        uint256[] calldata specificIds\r\n    ) external returns (uint256[] calldata);\r\n\r\n    function swapTo(\r\n        uint256[] calldata tokenIds,\r\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\r\n        uint256[] calldata specificIds,\r\n        address to\r\n    ) external returns (uint256[] calldata);\r\n\r\n    function allValidNFTs(uint256[] calldata tokenIds)\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\n\r\n\r\n// File contracts/solidity/interface/INFTXEligibilityManager.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface INFTXEligibilityManager {\r\n    function nftxVaultFactory() external returns (address);\r\n    function eligibilityImpl() external returns (address);\r\n\r\n    function deployEligibility(uint256 vaultId, bytes calldata initData)\r\n        external\r\n        returns (address);\r\n}\r\n\r\n\r\n// File contracts/solidity/interface/IERC165Upgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165Upgradeable {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/solidity/interface/IERC3156Upgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC3156 FlashBorrower, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\r\n */\r\ninterface IERC3156FlashBorrowerUpgradeable {\r\n    /**\r\n     * @dev Receive a flash loan.\r\n     * @param initiator The initiator of the loan.\r\n     * @param token The loan currency.\r\n     * @param amount The amount of tokens lent.\r\n     * @param fee The additional amount of tokens to repay.\r\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\r\n     * @return The keccak256 hash of \"ERC3156FlashBorrower.onFlashLoan\"\r\n     */\r\n    function onFlashLoan(\r\n        address initiator,\r\n        address token,\r\n        uint256 amount,\r\n        uint256 fee,\r\n        bytes calldata data\r\n    ) external returns (bytes32);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC3156 FlashLender, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\r\n */\r\ninterface IERC3156FlashLenderUpgradeable {\r\n    /**\r\n     * @dev The amount of currency available to be lended.\r\n     * @param token The loan currency.\r\n     * @return The amount of `token` that can be borrowed.\r\n     */\r\n    function maxFlashLoan(\r\n        address token\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev The fee to be charged for a given loan.\r\n     * @param token The loan currency.\r\n     * @param amount The amount of tokens lent.\r\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\r\n     */\r\n    function flashFee(\r\n        address token,\r\n        uint256 amount\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Initiate a flash loan.\r\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\r\n     * @param token The loan currency.\r\n     * @param amount The amount of tokens lent.\r\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\r\n     */\r\n    function flashLoan(\r\n        IERC3156FlashBorrowerUpgradeable receiver,\r\n        address token,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external returns (bool);\r\n }\r\n\r\n\r\n// File contracts/solidity/token/IERC20Metadata.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File contracts/solidity/token/ERC20Upgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20Metadata {\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC20_init_unchained(name_, symbol_);\r\n    }\r\n\r\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function _setMetadata(string memory name_, string memory symbol_) internal {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n    uint256[45] private __gap;\r\n}\r\n\r\n\r\n// File contracts/solidity/token/ERC20FlashMintUpgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the ERC3156 Flash loans extension, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\r\n *\r\n * Adds the {flashLoan} method, which provides flash loan support at the token\r\n * level. By default there is no fee, but this can be changed by overriding {flashFee}.\r\n */\r\nabstract contract ERC20FlashMintUpgradeable is Initializable, ERC20Upgradeable, IERC3156FlashLenderUpgradeable {\r\n    function __ERC20FlashMint_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC20FlashMint_init_unchained();\r\n    }\r\n\r\n    function __ERC20FlashMint_init_unchained() internal initializer {\r\n    }\r\n    bytes32 constant private RETURN_VALUE = keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\r\n\r\n    /**\r\n     * @dev Returns the maximum amount of tokens available for loan.\r\n     * @param token The address of the token that is requested.\r\n     * @return The amont of token that can be loaned.\r\n     */\r\n    function maxFlashLoan(address token) public view override returns (uint256) {\r\n        return token == address(this) ? type(uint256).max - totalSupply() : 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the fee applied when doing flash loans. By default this\r\n     * implementation has 0 fees. This function can be overloaded to make\r\n     * the flash loan mechanism deflationary.\r\n     * @param token The token to be flash loaned.\r\n     * @param amount The amount of tokens to be loaned.\r\n     * @return The fees applied to the corresponding flash loan.\r\n     */\r\n    function flashFee(address token, uint256 amount) public view virtual override returns (uint256) {\r\n        require(token == address(this), \"ERC20FlashMint: wrong token\");\r\n        // silence warning about unused variable without the addition of bytecode.\r\n        amount;\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a flash loan. New tokens are minted and sent to the\r\n     * `receiver`, who is required to implement the {IERC3156FlashBorrower}\r\n     * interface. By the end of the flash loan, the receiver is expected to own\r\n     * amount + fee tokens and have them approved back to the token contract itself so\r\n     * they can be burned.\r\n     * @param receiver The receiver of the flash loan. Should implement the\r\n     * {IERC3156FlashBorrower.onFlashLoan} interface.\r\n     * @param token The token to be flash loaned. Only `address(this)` is\r\n     * supported.\r\n     * @param amount The amount of tokens to be loaned.\r\n     * @param data An arbitrary datafield that is passed to the receiver.\r\n     * @return `true` is the flash loan was successfull.\r\n     */\r\n    function flashLoan(\r\n        IERC3156FlashBorrowerUpgradeable receiver,\r\n        address token,\r\n        uint256 amount,\r\n        bytes memory data\r\n    )\r\n        public virtual override returns (bool)\r\n    {\r\n        uint256 fee = flashFee(token, amount);\r\n        _mint(address(receiver), amount);\r\n        require(receiver.onFlashLoan(msg.sender, token, amount, fee, data) == RETURN_VALUE, \"ERC20FlashMint: invalid return value\");\r\n        uint256 currentAllowance = allowance(address(receiver), address(this));\r\n        require(currentAllowance >= amount + fee, \"ERC20FlashMint: allowance does not allow refund\");\r\n        _approve(address(receiver), address(this), currentAllowance - amount - fee);\r\n        _burn(address(receiver), amount + fee);\r\n        return true;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File contracts/solidity/token/IERC721ReceiverUpgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721ReceiverUpgradeable {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\n\r\n// File contracts/solidity/token/ERC721SafeHolderUpgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC721Receiver} interface.\r\n *\r\n * Accepts all token transfers.\r\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\r\n */\r\ncontract ERC721SafeHolderUpgradeable is IERC721ReceiverUpgradeable {\r\n    /**\r\n     * @dev See {IERC721Receiver-onERC721Received}.\r\n     *\r\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/token/IERC1155ReceiverUpgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\r\n\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n}\r\n\r\n\r\n// File contracts/solidity/util/ERC165Upgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165Upgradeable is IERC165Upgradeable {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/token/ERC1155ReceiverUpgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\nabstract contract ERC1155ReceiverUpgradeable is ERC165Upgradeable, IERC1155ReceiverUpgradeable {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\r\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/token/ERC1155SafeHolderUpgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\nabstract contract ERC1155SafeHolderUpgradeable is ERC1155ReceiverUpgradeable {\r\n    function onERC1155Received(address operator, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(address operator, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/token/IERC721Upgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721Upgradeable is IERC165Upgradeable {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n\r\n// File contracts/solidity/token/IERC1155Upgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155Upgradeable is IERC165Upgradeable {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\r\n}\r\n\r\n\r\n// File contracts/solidity/util/ReentrancyGuardUpgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuardUpgradeable is Initializable {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    function __ReentrancyGuard_init() internal initializer {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal initializer {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File contracts/solidity/util/EnumerableSetUpgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSetUpgradeable {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/NFTXVaultUpgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Authors: @0xKiwi_ and @alexgausman.\r\n\r\ncontract NFTXVaultUpgradeable is\r\n    OwnableUpgradeable,\r\n    ERC20FlashMintUpgradeable,\r\n    ReentrancyGuardUpgradeable,\r\n    ERC721SafeHolderUpgradeable,\r\n    ERC1155SafeHolderUpgradeable,\r\n    INFTXVault\r\n{\r\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\r\n\r\n    uint256 constant base = 10**18;\r\n\r\n    uint256 public override vaultId;\r\n    address public override manager;\r\n    address public override assetAddress;\r\n    INFTXVaultFactory public override vaultFactory;\r\n    INFTXEligibility public override eligibilityStorage;\r\n\r\n    uint256 randNonce;\r\n    uint256 private UNUSED_FEE1;\r\n    uint256 private UNUSED_FEE2;\r\n    uint256 private UNUSED_FEE3;\r\n\r\n    bool public override is1155;\r\n    bool public override allowAllItems;\r\n    bool public override enableMint;\r\n    bool public override enableRandomRedeem;\r\n    bool public override enableTargetRedeem;\r\n\r\n    EnumerableSetUpgradeable.UintSet holdings;\r\n    mapping(uint256 => uint256) quantity1155;\r\n\r\n    bool public override enableRandomSwap;\r\n    bool public override enableTargetSwap;\r\n\r\n    function __NFTXVault_init(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address _assetAddress,\r\n        bool _is1155,\r\n        bool _allowAllItems\r\n    ) public override virtual initializer {\r\n        __Ownable_init();\r\n        __ERC20_init(_name, _symbol);\r\n        require(_assetAddress != address(0), \"Asset != address(0)\");\r\n        assetAddress = _assetAddress;\r\n        vaultFactory = INFTXVaultFactory(msg.sender);\r\n        vaultId = vaultFactory.numVaults();\r\n        is1155 = _is1155;\r\n        allowAllItems = _allowAllItems;\r\n        emit VaultInit(vaultId, _assetAddress, _is1155, _allowAllItems);\r\n        setVaultFeatures(true /*enableMint*/, true /*enableRandomRedeem*/, true /*enableTargetRedeem*/, true /*enableRandomSwap*/, true /*enableTargetSwap*/);\r\n    }\r\n\r\n    function finalizeVault() external override virtual {\r\n        setManager(address(0));\r\n    }\r\n\r\n    // Added in v1.0.3.\r\n    function setVaultMetadata(\r\n        string memory name_, \r\n        string memory symbol_\r\n    ) public override virtual {\r\n        onlyPrivileged();\r\n        _setMetadata(name_, symbol_);\r\n    }\r\n\r\n    function setVaultFeatures(\r\n        bool _enableMint,\r\n        bool _enableRandomRedeem,\r\n        bool _enableTargetRedeem,\r\n        bool _enableRandomSwap,\r\n        bool _enableTargetSwap\r\n    ) public override virtual {\r\n        onlyPrivileged();\r\n        enableMint = _enableMint;\r\n        enableRandomRedeem = _enableRandomRedeem;\r\n        enableTargetRedeem = _enableTargetRedeem;\r\n        enableRandomSwap = _enableRandomSwap;\r\n        enableTargetSwap = _enableTargetSwap;\r\n\r\n        emit EnableMintUpdated(_enableMint);\r\n        emit EnableRandomRedeemUpdated(_enableRandomRedeem);\r\n        emit EnableTargetRedeemUpdated(_enableTargetRedeem);\r\n        emit EnableRandomSwapUpdated(_enableRandomSwap);\r\n        emit EnableTargetSwapUpdated(_enableTargetSwap);\r\n    }\r\n\r\n    function assignDefaultFeatures() external {\r\n        require(msg.sender == 0xDEA9196Dcdd2173D6E369c2AcC0faCc83fD9346a, \"Not dev\");\r\n        enableRandomSwap = enableRandomRedeem;\r\n        enableTargetSwap = enableTargetRedeem;\r\n        emit EnableRandomSwapUpdated(enableRandomSwap);\r\n        emit EnableTargetSwapUpdated(enableTargetSwap);\r\n    }\r\n\r\n    function setFees(\r\n        uint256 _mintFee,\r\n        uint256 _randomRedeemFee,\r\n        uint256 _targetRedeemFee,\r\n        uint256 _randomSwapFee,\r\n        uint256 _targetSwapFee\r\n    ) public override virtual {\r\n        onlyPrivileged();\r\n        vaultFactory.setVaultFees(vaultId, _mintFee, _randomRedeemFee, _targetRedeemFee, _randomSwapFee, _targetSwapFee);\r\n    }\r\n\r\n    function disableVaultFees() public override virtual {\r\n        onlyPrivileged();\r\n        vaultFactory.disableVaultFees(vaultId);\r\n    }\r\n\r\n    // This function allows for an easy setup of any eligibility module contract from the EligibilityManager.\r\n    // It takes in ABI encoded parameters for the desired module. This is to make sure they can all follow \r\n    // a similar interface.\r\n    function deployEligibilityStorage(\r\n        uint256 moduleIndex,\r\n        bytes calldata initData\r\n    ) external override virtual returns (address) {\r\n        onlyPrivileged();\r\n        require(\r\n            address(eligibilityStorage) == address(0),\r\n            \"NFTXVault: eligibility already set\"\r\n        );\r\n        INFTXEligibilityManager eligManager = INFTXEligibilityManager(\r\n            vaultFactory.eligibilityManager()\r\n        );\r\n        address _eligibility = eligManager.deployEligibility(\r\n            moduleIndex,\r\n            initData\r\n        );\r\n        eligibilityStorage = INFTXEligibility(_eligibility);\r\n        // Toggle this to let the contract know to check eligibility now.\r\n        allowAllItems = false;\r\n        emit EligibilityDeployed(moduleIndex, _eligibility);\r\n        return _eligibility;\r\n    }\r\n\r\n    // // This function allows for the manager to set their own arbitrary eligibility contract.\r\n    // // Once eligiblity is set, it cannot be unset or changed.\r\n    // Disabled for launch.\r\n    // function setEligibilityStorage(address _newEligibility) public virtual {\r\n    //     onlyPrivileged();\r\n    //     require(\r\n    //         address(eligibilityStorage) == address(0),\r\n    //         \"NFTXVault: eligibility already set\"\r\n    //     );\r\n    //     eligibilityStorage = INFTXEligibility(_newEligibility);\r\n    //     // Toggle this to let the contract know to check eligibility now.\r\n    //     allowAllItems = false;\r\n    //     emit CustomEligibilityDeployed(address(_newEligibility));\r\n    // }\r\n\r\n    // The manager has control over options like fees and features\r\n    function setManager(address _manager) public override virtual {\r\n        onlyPrivileged();\r\n        manager = _manager;\r\n        emit ManagerSet(_manager);\r\n    }\r\n\r\n    function mint(\r\n        uint256[] calldata tokenIds,\r\n        uint256[] calldata amounts /* ignored for ERC721 vaults */\r\n    ) external override virtual returns (uint256) {\r\n        return mintTo(tokenIds, amounts, msg.sender);\r\n    }\r\n\r\n    function mintTo(\r\n        uint256[] memory tokenIds,\r\n        uint256[] memory amounts, /* ignored for ERC721 vaults */\r\n        address to\r\n    ) public override virtual nonReentrant returns (uint256) {\r\n        onlyOwnerIfPaused(1);\r\n        require(enableMint, \"Minting not enabled\");\r\n        // Take the NFTs.\r\n        uint256 count = receiveNFTs(tokenIds, amounts);\r\n\r\n        // Mint to the user.\r\n        _mint(to, base * count);\r\n        uint256 totalFee = mintFee() * count;\r\n        _chargeAndDistributeFees(to, totalFee);\r\n\r\n        emit Minted(tokenIds, amounts, to);\r\n        return count;\r\n    }\r\n\r\n    function redeem(uint256 amount, uint256[] calldata specificIds)\r\n        external\r\n        override\r\n        virtual\r\n        returns (uint256[] memory)\r\n    {\r\n        return redeemTo(amount, specificIds, msg.sender);\r\n    }\r\n\r\n    function redeemTo(uint256 amount, uint256[] memory specificIds, address to)\r\n        public\r\n        override\r\n        virtual\r\n        nonReentrant\r\n        returns (uint256[] memory)\r\n    {\r\n        onlyOwnerIfPaused(2);\r\n        require(\r\n            amount == specificIds.length || enableRandomRedeem,\r\n            \"NFTXVault: Random redeem not enabled\"\r\n        );\r\n        require(\r\n            specificIds.length == 0 || enableTargetRedeem,\r\n            \"NFTXVault: Target redeem not enabled\"\r\n        );\r\n        \r\n        // We burn all from sender and mint to fee receiver to reduce costs.\r\n        _burn(msg.sender, base * amount);\r\n\r\n        // Pay the tokens + toll.\r\n        uint256 totalFee = (targetRedeemFee() * specificIds.length) + (\r\n            randomRedeemFee() * (amount - specificIds.length)\r\n        );\r\n        _chargeAndDistributeFees(msg.sender, totalFee);\r\n\r\n        // Withdraw from vault.\r\n        uint256[] memory redeemedIds = withdrawNFTsTo(amount, specificIds, to);\r\n        emit Redeemed(redeemedIds, specificIds, to);\r\n        return redeemedIds;\r\n    }\r\n    \r\n    function swap(\r\n        uint256[] calldata tokenIds,\r\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\r\n        uint256[] calldata specificIds\r\n    ) external override virtual returns (uint256[] memory) {\r\n        return swapTo(tokenIds, amounts, specificIds, msg.sender);\r\n    }\r\n\r\n    function swapTo(\r\n        uint256[] memory tokenIds,\r\n        uint256[] memory amounts, /* ignored for ERC721 vaults */\r\n        uint256[] memory specificIds,\r\n        address to\r\n    ) public override virtual nonReentrant returns (uint256[] memory) {\r\n        onlyOwnerIfPaused(3);\r\n        uint256 count;\r\n        if (is1155) {\r\n            for (uint256 i = 0; i < tokenIds.length; i++) {\r\n                uint256 amount = amounts[i];\r\n                require(amount > 0, \"NFTXVault: transferring < 1\");\r\n                count += amount;\r\n            }\r\n        } else {\r\n            count = tokenIds.length;\r\n        }\r\n\r\n        require(\r\n            count == specificIds.length || enableRandomSwap,\r\n            \"NFTXVault: Random swap disabled\"\r\n        );\r\n        require(\r\n            specificIds.length == 0 || enableTargetSwap,\r\n            \"NFTXVault: Target swap disabled\"\r\n        );\r\n\r\n        uint256 totalFee = (targetSwapFee() * specificIds.length) + (\r\n            randomSwapFee() * (count - specificIds.length)\r\n        );\r\n        _chargeAndDistributeFees(msg.sender, totalFee);\r\n        \r\n        // Give the NFTs first, so the user wont get the same thing back, just to be nice. \r\n        uint256[] memory ids = withdrawNFTsTo(count, specificIds, to);\r\n\r\n        receiveNFTs(tokenIds, amounts);\r\n\r\n        emit Swapped(tokenIds, amounts, specificIds, ids, to);\r\n        return ids;\r\n    }\r\n\r\n    function flashLoan(\r\n        IERC3156FlashBorrowerUpgradeable receiver,\r\n        address token,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) public override virtual returns (bool) {\r\n        onlyOwnerIfPaused(4);\r\n        return super.flashLoan(receiver, token, amount, data);\r\n    }\r\n\r\n    function mintFee() public view override virtual returns (uint256) {\r\n        (uint256 _mintFee, , , ,) = vaultFactory.vaultFees(vaultId);\r\n        return _mintFee;\r\n    }\r\n\r\n    function randomRedeemFee() public view override virtual returns (uint256) {\r\n        (, uint256 _randomRedeemFee, , ,) = vaultFactory.vaultFees(vaultId);\r\n        return _randomRedeemFee;\r\n    }\r\n\r\n    function targetRedeemFee() public view override virtual returns (uint256) {\r\n        (, , uint256 _targetRedeemFee, ,) = vaultFactory.vaultFees(vaultId);\r\n        return _targetRedeemFee;\r\n    }\r\n\r\n    function randomSwapFee() public view override virtual returns (uint256) {\r\n        (, , , uint256 _randomSwapFee, ) = vaultFactory.vaultFees(vaultId);\r\n        return _randomSwapFee;\r\n    }\r\n\r\n    function targetSwapFee() public view override virtual returns (uint256) {\r\n        (, , , ,uint256 _targetSwapFee) = vaultFactory.vaultFees(vaultId);\r\n        return _targetSwapFee;\r\n    }\r\n\r\n    function vaultFees() public view override virtual returns (uint256, uint256, uint256, uint256, uint256) {\r\n        return vaultFactory.vaultFees(vaultId);\r\n    }\r\n\r\n    function allValidNFTs(uint256[] memory tokenIds)\r\n        public\r\n        view\r\n        override\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        if (allowAllItems) {\r\n            return true;\r\n        }\r\n\r\n        INFTXEligibility _eligibilityStorage = eligibilityStorage;\r\n        if (address(_eligibilityStorage) == address(0)) {\r\n            return false;\r\n        }\r\n        return _eligibilityStorage.checkAllEligible(tokenIds);\r\n    }\r\n\r\n    function nftIdAt(uint256 holdingsIndex) external view override virtual returns (uint256) {\r\n        return holdings.at(holdingsIndex);\r\n    }\r\n\r\n    // Added in v1.0.3.\r\n    function allHoldings() external view override virtual returns (uint256[] memory) {\r\n        uint256 len = holdings.length();\r\n        uint256[] memory idArray = new uint256[](len);\r\n        for (uint256 i = 0; i < len; i++) {\r\n            idArray[i] = holdings.at(i);\r\n        }\r\n        return idArray;\r\n    }\r\n\r\n    // Added in v1.0.3.\r\n    function totalHoldings() external view override virtual returns (uint256) {\r\n        return holdings.length();\r\n    }\r\n\r\n    // Added in v1.0.3.\r\n    function version() external pure returns (string memory) {\r\n        return \"v1.0.5\";\r\n    } \r\n\r\n    // We set a hook to the eligibility module (if it exists) after redeems in case anything needs to be modified.\r\n    function afterRedeemHook(uint256[] memory tokenIds) internal virtual {\r\n        INFTXEligibility _eligibilityStorage = eligibilityStorage;\r\n        if (address(_eligibilityStorage) == address(0)) {\r\n            return;\r\n        }\r\n        _eligibilityStorage.afterRedeemHook(tokenIds);\r\n    }\r\n\r\n    function receiveNFTs(uint256[] memory tokenIds, uint256[] memory amounts)\r\n        internal\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        require(allValidNFTs(tokenIds), \"NFTXVault: not eligible\");\r\n        if (is1155) {\r\n            // This is technically a check, so placing it before the effect.\r\n            IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                tokenIds,\r\n                amounts,\r\n                \"\"\r\n            );\r\n\r\n            uint256 count;\r\n            for (uint256 i = 0; i < tokenIds.length; i++) {\r\n                uint256 tokenId = tokenIds[i];\r\n                uint256 amount = amounts[i];\r\n                require(amount > 0, \"NFTXVault: transferring < 1\");\r\n                if (quantity1155[tokenId] == 0) {\r\n                    holdings.add(tokenId);\r\n                }\r\n                quantity1155[tokenId] += amount;\r\n                count += amount;\r\n            }\r\n            return count;\r\n        } else {\r\n            address _assetAddress = assetAddress;\r\n            for (uint256 i = 0; i < tokenIds.length; i++) {\r\n                uint256 tokenId = tokenIds[i];\r\n                // We may already own the NFT here so we check in order:\r\n                // Does the vault own it?\r\n                //   - If so, check if its in holdings list\r\n                //      - If so, we reject. This means the NFT has already been claimed for.\r\n                //      - If not, it means we have not yet accounted for this NFT, so we continue.\r\n                //   -If not, we \"pull\" it from the msg.sender and add to holdings.\r\n                transferFromERC721(_assetAddress, tokenId);\r\n                holdings.add(tokenId);\r\n            }\r\n            return tokenIds.length;\r\n        }\r\n    }\r\n\r\n    function withdrawNFTsTo(\r\n        uint256 amount,\r\n        uint256[] memory specificIds,\r\n        address to\r\n    ) internal virtual returns (uint256[] memory) {\r\n        bool _is1155 = is1155;\r\n        address _assetAddress = assetAddress;\r\n        uint256[] memory redeemedIds = new uint256[](amount);\r\n        for (uint256 i = 0; i < amount; i++) {\r\n            // This will always be fine considering the validations made above. \r\n            uint256 tokenId = i < specificIds.length ? \r\n                specificIds[i] : getRandomTokenIdFromVault();\r\n            redeemedIds[i] = tokenId;\r\n\r\n            if (_is1155) {\r\n                quantity1155[tokenId] -= 1;\r\n                if (quantity1155[tokenId] == 0) {\r\n                    holdings.remove(tokenId);\r\n                }\r\n\r\n                IERC1155Upgradeable(_assetAddress).safeTransferFrom(\r\n                    address(this),\r\n                    to,\r\n                    tokenId,\r\n                    1,\r\n                    \"\"\r\n                );\r\n            } else {\r\n                holdings.remove(tokenId);\r\n                transferERC721(_assetAddress, to, tokenId);\r\n            }\r\n        }\r\n        afterRedeemHook(redeemedIds);\r\n        return redeemedIds;\r\n    }\r\n\r\n    function _chargeAndDistributeFees(address user, uint256 amount) internal virtual {\r\n        // Do not charge fees if the zap contract is calling\r\n        // Added in v1.0.3. Changed to mapping in v1.0.5.\r\n        if (vaultFactory.excludedFromFees(msg.sender)) {\r\n            return;\r\n        }\r\n        \r\n        // Mint fees directly to the distributor and distribute.\r\n        if (amount > 0) {\r\n            address feeDistributor = vaultFactory.feeDistributor();\r\n            // Changed to a _transfer() in v1.0.3.\r\n            _transfer(user, feeDistributor, amount);\r\n            INFTXFeeDistributor(feeDistributor).distribute(vaultId);\r\n        }\r\n    }\r\n\r\n    function transferERC721(address assetAddr, address to, uint256 tokenId) internal virtual {\r\n        address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\r\n        address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\r\n        bytes memory data;\r\n        if (assetAddr == kitties) {\r\n            // Changed in v1.0.4.\r\n            data = abi.encodeWithSignature(\"transfer(address,uint256)\", to, tokenId);\r\n        } else if (assetAddr == punks) {\r\n            // CryptoPunks.\r\n            data = abi.encodeWithSignature(\"transferPunk(address,uint256)\", to, tokenId);\r\n        } else {\r\n            // Default.\r\n            data = abi.encodeWithSignature(\"safeTransferFrom(address,address,uint256)\", address(this), to, tokenId);\r\n        }\r\n        (bool success,) = address(assetAddr).call(data);\r\n        require(success);\r\n    }\r\n\r\n    function transferFromERC721(address assetAddr, uint256 tokenId) internal virtual {\r\n        address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\r\n        address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\r\n        bytes memory data;\r\n        if (assetAddr == kitties) {\r\n            // Cryptokitties.\r\n            data = abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", msg.sender, address(this), tokenId);\r\n        } else if (assetAddr == punks) {\r\n            // CryptoPunks.\r\n            // Fix here for frontrun attack. Added in v1.0.2.\r\n            bytes memory punkIndexToAddress = abi.encodeWithSignature(\"punkIndexToAddress(uint256)\", tokenId);\r\n            (bool checkSuccess, bytes memory result) = address(assetAddr).staticcall(punkIndexToAddress);\r\n            (address owner) = abi.decode(result, (address));\r\n            require(checkSuccess && owner == msg.sender, \"Not the owner\");\r\n            data = abi.encodeWithSignature(\"buyPunk(uint256)\", tokenId);\r\n        } else {\r\n            // Default.\r\n            // Allow other contracts to \"push\" into the vault, safely.\r\n            // If we already have the token requested, make sure we don't have it in the list to prevent duplicate minting.\r\n            if (IERC721Upgradeable(assetAddress).ownerOf(tokenId) == address(this)) {\r\n                require(!holdings.contains(tokenId), \"Trying to use an owned NFT\");\r\n                return;\r\n            } else {\r\n                data = abi.encodeWithSignature(\"safeTransferFrom(address,address,uint256)\", msg.sender, address(this), tokenId);\r\n            }\r\n        }\r\n        (bool success, bytes memory resultData) = address(assetAddr).call(data);\r\n        require(success, string(resultData));\r\n    }\r\n\r\n    function getRandomTokenIdFromVault() internal virtual returns (uint256) {\r\n        uint256 randomIndex = uint256(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    blockhash(block.number - 1), \r\n                    randNonce,\r\n                    block.coinbase,\r\n                    block.difficulty,\r\n                    block.timestamp\r\n                )\r\n            )\r\n        ) % holdings.length();\r\n        randNonce += 1;\r\n        return holdings.at(randomIndex);\r\n    }\r\n\r\n    function onlyPrivileged() internal view {\r\n        if (manager == address(0)) {\r\n            require(msg.sender == owner(), \"Not owner\");\r\n        } else {\r\n            require(msg.sender == manager, \"Not manager\");\r\n        }\r\n    }\r\n\r\n    function onlyOwnerIfPaused(uint256 lockId) internal view {\r\n        require(!vaultFactory.isLocked(lockId) || msg.sender == owner(), \"Paused\");\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/NFTXVaultFactoryUpgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Authors: @0xKiwi_ and @alexgausman.\r\n\r\ncontract NFTXVaultFactoryUpgradeable is\r\n    PausableUpgradeable,\r\n    UpgradeableBeacon,\r\n    INFTXVaultFactory\r\n{\r\n    uint256 private NOT_USED1; // Removed, no longer needed.\r\n    address public override zapContract;\r\n    address public override feeDistributor;\r\n    address public override eligibilityManager;\r\n\r\n    mapping(uint256 => address) private NOT_USED2; // Removed, no longer needed.\r\n    mapping(address => address[]) _vaultsForAsset;\r\n    \r\n    address[] internal vaults;\r\n\r\n    // v1.0.1\r\n    mapping(address => bool) public override excludedFromFees;\r\n\r\n    // v1.0.2\r\n    struct VaultFees {\r\n        bool active;\r\n        uint64 mintFee;\r\n        uint64 randomRedeemFee;\r\n        uint64 targetRedeemFee;\r\n        uint64 randomSwapFee;\r\n        uint64 targetSwapFee;\r\n    }\r\n    mapping(uint256 => VaultFees) private _vaultFees;\r\n    uint64 public override factoryMintFee;\r\n    uint64 public override factoryRandomRedeemFee;\r\n    uint64 public override factoryTargetRedeemFee;\r\n    uint64 public override factoryRandomSwapFee;\r\n    uint64 public override factoryTargetSwapFee;\r\n\r\n    function __NFTXVaultFactory_init(address _vaultImpl, address _feeDistributor) public override initializer {\r\n        __Pausable_init();\r\n        // We use a beacon proxy so that every child contract follows the same implementation code.\r\n        __UpgradeableBeacon__init(_vaultImpl);\r\n        setFeeDistributor(_feeDistributor);\r\n        setFactoryFees(0.1 ether, 0.05 ether, 0.1 ether, 0.05 ether, 0.1 ether);\r\n    }\r\n\r\n    function assignFees() public {\r\n        require(factoryMintFee == 0 && factoryTargetRedeemFee == 0, \"Assigned\");\r\n        factoryMintFee = uint64(0.1 ether);\r\n        factoryRandomRedeemFee = uint64(0.05 ether);\r\n        factoryTargetRedeemFee = uint64(0.1 ether);\r\n        factoryRandomSwapFee = uint64(0.05 ether);\r\n        factoryTargetSwapFee = uint64(0.1 ether);\r\n\r\n        emit UpdateFactoryFees(0.1 ether, 0.05 ether, 0.1 ether, 0.05 ether, 0.1 ether);\r\n    }\r\n\r\n    function createVault(\r\n        string memory name,\r\n        string memory symbol,\r\n        address _assetAddress,\r\n        bool is1155,\r\n        bool allowAllItems\r\n    ) external virtual override returns (uint256) {\r\n        onlyOwnerIfPaused(0);\r\n        require(feeDistributor != address(0), \"NFTX: Fee receiver unset\");\r\n        require(childImplementation() != address(0), \"NFTX: Vault implementation unset\");\r\n        address vaultAddr = deployVault(name, symbol, _assetAddress, is1155, allowAllItems);\r\n        uint256 _vaultId = vaults.length;\r\n        _vaultsForAsset[_assetAddress].push(vaultAddr);\r\n        vaults.push(vaultAddr);\r\n        INFTXFeeDistributor(feeDistributor).initializeVaultReceivers(_vaultId);\r\n        emit NewVault(_vaultId, vaultAddr, _assetAddress);\r\n        return _vaultId;\r\n    }\r\n\r\n    function setFactoryFees(\r\n        uint256 mintFee, \r\n        uint256 randomRedeemFee, \r\n        uint256 targetRedeemFee,\r\n        uint256 randomSwapFee, \r\n        uint256 targetSwapFee\r\n    ) public onlyOwner virtual override {\r\n        require(mintFee <= 1 ether, \"Cannot > 1 ether\");\r\n        require(randomRedeemFee <= 1 ether, \"Cannot > 1 ether\");\r\n        require(targetRedeemFee <= 1 ether, \"Cannot > 1 ether\");\r\n        require(randomSwapFee <= 1 ether, \"Cannot > 1 ether\");\r\n        require(targetSwapFee <= 1 ether, \"Cannot > 1 ether\");\r\n\r\n        factoryMintFee = uint64(mintFee);\r\n        factoryRandomRedeemFee = uint64(randomRedeemFee);\r\n        factoryTargetRedeemFee = uint64(targetRedeemFee);\r\n        factoryRandomSwapFee = uint64(randomSwapFee);\r\n        factoryTargetSwapFee = uint64(targetSwapFee);\r\n\r\n        emit UpdateFactoryFees(mintFee, randomRedeemFee, targetRedeemFee, randomSwapFee, targetSwapFee);\r\n    }\r\n\r\n    function setVaultFees(\r\n        uint256 vaultId, \r\n        uint256 mintFee, \r\n        uint256 randomRedeemFee, \r\n        uint256 targetRedeemFee,\r\n        uint256 randomSwapFee, \r\n        uint256 targetSwapFee\r\n    ) public virtual override {\r\n        if (msg.sender != owner()) {\r\n            address vaultAddr = vaults[vaultId];\r\n            require(msg.sender == vaultAddr, \"Not from vault\");\r\n        }\r\n        require(mintFee <= 1 ether, \"Cannot > 1 ether\");\r\n        require(randomRedeemFee <= 1 ether, \"Cannot > 1 ether\");\r\n        require(targetRedeemFee <= 1 ether, \"Cannot > 1 ether\");\r\n        require(randomSwapFee <= 1 ether, \"Cannot > 1 ether\");\r\n        require(targetSwapFee <= 1 ether, \"Cannot > 1 ether\");\r\n\r\n        _vaultFees[vaultId] = VaultFees(\r\n            true, \r\n            uint64(mintFee),\r\n            uint64(randomRedeemFee),\r\n            uint64(targetRedeemFee),\r\n            uint64(randomSwapFee), \r\n            uint64(targetSwapFee)\r\n        );\r\n        emit UpdateVaultFees(vaultId, mintFee, randomRedeemFee, targetRedeemFee, randomSwapFee, targetSwapFee);\r\n    }\r\n\r\n    function disableVaultFees(uint256 vaultId) public virtual override {\r\n        if (msg.sender != owner()) {\r\n            address vaultAddr = vaults[vaultId];\r\n            require(msg.sender == vaultAddr, \"Not vault\");\r\n        }\r\n        delete _vaultFees[vaultId];\r\n        emit DisableVaultFees(vaultId);\r\n    }\r\n\r\n    function setFeeDistributor(address _feeDistributor) public onlyOwner virtual override {\r\n        require(_feeDistributor != address(0));\r\n        emit NewFeeDistributor(feeDistributor, _feeDistributor);\r\n        feeDistributor = _feeDistributor;\r\n    }\r\n\r\n    function setZapContract(address _zapContract) public onlyOwner virtual override {\r\n        emit NewZapContract(zapContract, _zapContract);\r\n        zapContract = _zapContract;\r\n    }\r\n\r\n    function setFeeExclusion(address _excludedAddr, bool excluded) public onlyOwner virtual override {\r\n        emit FeeExclusion(_excludedAddr, excluded);\r\n        excludedFromFees[_excludedAddr] = excluded;\r\n    }\r\n\r\n    function setEligibilityManager(address _eligibilityManager) external onlyOwner virtual override {\r\n        emit NewEligibilityManager(eligibilityManager, _eligibilityManager);\r\n        eligibilityManager = _eligibilityManager;\r\n    }\r\n\r\n    function vaultFees(uint256 vaultId) external view virtual override returns (uint256, uint256, uint256, uint256, uint256) {\r\n        VaultFees memory fees = _vaultFees[vaultId];\r\n        if (fees.active) {\r\n            return (\r\n                uint256(fees.mintFee), \r\n                uint256(fees.randomRedeemFee), \r\n                uint256(fees.targetRedeemFee), \r\n                uint256(fees.randomSwapFee), \r\n                uint256(fees.targetSwapFee)\r\n            );\r\n        }\r\n        \r\n        return (uint256(factoryMintFee), uint256(factoryRandomRedeemFee), uint256(factoryTargetRedeemFee), uint256(factoryRandomSwapFee), uint256(factoryTargetSwapFee));\r\n    }\r\n\r\n    function isLocked(uint256 lockId) external view override virtual returns (bool) {\r\n        return isPaused[lockId];\r\n    }\r\n\r\n    function vaultsForAsset(address assetAddress) external view override virtual returns (address[] memory) {\r\n        return _vaultsForAsset[assetAddress];\r\n    }\r\n\r\n    function vault(uint256 vaultId) external view override virtual returns (address) {\r\n        return vaults[vaultId];\r\n    }\r\n\r\n    function allVaults() external view override virtual returns (address[] memory) {\r\n        return vaults;\r\n    }\r\n\r\n    function numVaults() external view override virtual returns (uint256) {\r\n        return vaults.length;\r\n    }\r\n    \r\n    function deployVault(\r\n        string memory name,\r\n        string memory symbol,\r\n        address _assetAddress,\r\n        bool is1155,\r\n        bool allowAllItems\r\n    ) internal returns (address) {\r\n        address newBeaconProxy = address(new BeaconProxy(address(this), \"\"));\r\n        NFTXVaultUpgradeable(newBeaconProxy).__NFTXVault_init(name, symbol, _assetAddress, is1155, allowAllItems);\r\n        // Manager for configuration.\r\n        NFTXVaultUpgradeable(newBeaconProxy).setManager(msg.sender);\r\n        // Owner for administrative functions.\r\n        NFTXVaultUpgradeable(newBeaconProxy).transferOwnership(owner());\r\n        return newBeaconProxy;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"DisableVaultFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeExcluded\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"FeeExclusion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldEligManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newEligManager\",\"type\":\"address\"}],\"name\":\"NewEligibilityManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDistributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDistributor\",\"type\":\"address\"}],\"name\":\"NewFeeDistributor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"NewVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldZap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newZap\",\"type\":\"address\"}],\"name\":\"NewZapContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isGuardian\",\"type\":\"bool\"}],\"name\":\"SetIsGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"SetPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomRedeemFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetRedeemFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomSwapFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetSwapFee\",\"type\":\"uint256\"}],\"name\":\"UpdateFactoryFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomRedeemFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetRedeemFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomSwapFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetSwapFee\",\"type\":\"uint256\"}],\"name\":\"UpdateVaultFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childImplementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeDistributor\",\"type\":\"address\"}],\"name\":\"__NFTXVaultFactory_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"childImplementation_\",\"type\":\"address\"}],\"name\":\"__UpgradeableBeacon__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allVaults\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assignFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"childImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_assetAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"is1155\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowAllItems\",\"type\":\"bool\"}],\"name\":\"createVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"disableVaultFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eligibilityManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryMintFee\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryRandomRedeemFee\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryRandomSwapFee\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryTargetRedeemFee\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryTargetSwapFee\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isGuardian\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numVaults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"onlyOwnerIfPaused\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eligibilityManager\",\"type\":\"address\"}],\"name\":\"setEligibilityManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomRedeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetRedeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetSwapFee\",\"type\":\"uint256\"}],\"name\":\"setFactoryFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDistributor\",\"type\":\"address\"}],\"name\":\"setFeeDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_excludedAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"setFeeExclusion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isGuardian\",\"type\":\"bool\"}],\"name\":\"setIsGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomRedeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetRedeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetSwapFee\",\"type\":\"uint256\"}],\"name\":\"setVaultFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zapContract\",\"type\":\"address\"}],\"name\":\"setZapContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newChildImplementation\",\"type\":\"address\"}],\"name\":\"upgradeChildTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"vaultFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"vaultsForAsset\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zapContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"NFTXVaultFactoryUpgradeable","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b4c25ed475b0d5fa74722db27c4676f87b56cb8234e6ddf055e311d2993d16d0"}]}