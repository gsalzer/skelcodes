{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/feirari/FuseAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"./FuseGuardian.sol\\\";\\nimport \\\"./IMasterOracle.sol\\\";\\n\\ncontract FuseAdmin is FuseGuardian {\\n\\n    error ComptrollerError();\\n\\n    /// @param _core address of core contract\\n    /// @param _comptroller the fuse comptroller\\n    constructor(\\n        address _core,\\n        Unitroller _comptroller\\n    ) FuseGuardian(_core, _comptroller) {}\\n\\n    function oracleAdd(address[] calldata underlyings, address[] calldata _oracles) external onlyGovernorOrAdmin {\\n        IMasterOracle(comptroller.oracle()).add(underlyings, _oracles);\\n    }\\n\\n    function oracleChangeAdmin(address newAdmin) external onlyGovernor {\\n        IMasterOracle(comptroller.oracle()).changeAdmin(newAdmin);\\n    }\\n\\n    function _addRewardsDistributor(address distributor) external onlyGovernorOrAdmin {\\n        if (comptroller._addRewardsDistributor(distributor) != 0) revert ComptrollerError();\\n    }\\n\\n    function _setWhitelistEnforcement(bool enforce) external onlyGovernorOrAdmin {\\n        if (comptroller._setWhitelistEnforcement(enforce) !=0) revert ComptrollerError();\\n    }\\n\\n    function _setWhitelistStatuses(address[] calldata suppliers, bool[] calldata statuses) external onlyGovernorOrAdmin {\\n        if (comptroller._setWhitelistStatuses(suppliers, statuses) !=0) revert ComptrollerError();\\n    }\\n\\n    function _setPriceOracle(address newOracle) public onlyGovernor {\\n        if (comptroller._setPriceOracle(newOracle) !=0) revert ComptrollerError();\\n    }\\n\\n    function _setCloseFactor(uint newCloseFactorMantissa) external onlyGovernorOrAdmin {\\n        if (comptroller._setCloseFactor(newCloseFactorMantissa) !=0) revert ComptrollerError();\\n    }\\n\\n    function _setCollateralFactor(CToken cToken, uint newCollateralFactorMantissa) public onlyGovernorOrAdmin {\\n        if (comptroller._setCollateralFactor(cToken, newCollateralFactorMantissa) !=0) revert ComptrollerError();\\n    }\\n\\n    function _setLiquidationIncentive(uint newLiquidationIncentiveMantissa) external onlyGovernorOrAdmin {\\n        if (comptroller._setLiquidationIncentive(newLiquidationIncentiveMantissa) !=0) revert ComptrollerError();\\n    }\\n\\n    function _deployMarket(\\n        address underlying,\\n        address irm,\\n        string calldata name,\\n        string calldata symbol,\\n        address impl,\\n        bytes calldata data,\\n        uint256 reserveFactor,\\n        uint256 adminFee,\\n        uint256 collateralFactorMantissa\\n    ) external onlyGovernorOrAdmin {\\n        bytes memory constructorData = abi.encode(\\n            underlying,\\n            address(comptroller),\\n            irm,\\n            name,\\n            symbol,\\n            impl,\\n            data,\\n            reserveFactor,\\n            adminFee\\n        );\\n\\n        if (comptroller._deployMarket(false, constructorData, collateralFactorMantissa) != 0) revert ComptrollerError();\\n    }\\n\\n    function _unsupportMarket(CToken cToken) external onlyGovernorOrAdmin {\\n        if (comptroller._unsupportMarket(cToken) !=0) revert ComptrollerError();\\n    }\\n\\n    function _toggleAutoImplementations(bool enabled) public onlyGovernorOrAdmin {\\n        if (comptroller._toggleAutoImplementations(enabled) !=0) revert ComptrollerError();\\n    }\\n\\n    function _setPendingAdmin(address newPendingAdmin) public onlyGovernorOrAdmin {\\n        if (comptroller._setPendingAdmin(newPendingAdmin) !=0) revert ComptrollerError();\\n    }\\n\\n    function _acceptAdmin() public {\\n        if(comptroller._acceptAdmin() != 0) revert ComptrollerError();\\n    }   \\n}\"\r\n    },\r\n    \"./contracts/feirari/FuseGuardian.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport \\\"../refs/CoreRef.sol\\\";\\nimport \\\"../external/Unitroller.sol\\\";\\n\\n/// @title a Fuse pause and borrow cap guardian used to expand access control to more Fei roles\\n/// @author joeysantoro\\ncontract FuseGuardian is CoreRef {\\n\\n    /// @notice the fuse comptroller\\n    Unitroller public immutable comptroller;\\n\\n    /// @param _core address of core contract\\n    /// @param _comptroller the fuse comptroller\\n    constructor(\\n        address _core,\\n        Unitroller _comptroller\\n    ) CoreRef(_core) {\\n        comptroller = _comptroller;\\n        /// @notice The reason we are reusing the tribal chief admin role is it consolidates control in the OA,\\n        /// and means we don't have to do another governance action to create this role in core\\n        _setContractAdminRole(keccak256(\\\"TRIBAL_CHIEF_ADMIN_ROLE\\\"));\\n    }\\n\\n    // ************ BORROW GUARDIAN FUNCTIONS ************\\n    /**\\n      * @notice Set the given supply caps for the given cToken markets. Supplying that brings total underlying supply to or above supply cap will revert.\\n      * @dev Admin or borrowCapGuardian function to set the supply caps. A supply cap of 0 corresponds to unlimited supplying.\\n      * @param cTokens The addresses of the markets (tokens) to change the supply caps for\\n      * @param newSupplyCaps The new supply cap values in underlying to be set. A value of 0 corresponds to unlimited supplying.\\n      */\\n    function _setMarketSupplyCaps(CToken[] memory cTokens, uint[] calldata newSupplyCaps) external isGovernorOrGuardianOrAdmin {\\n        _setMarketSupplyCapsInternal(cTokens, newSupplyCaps);\\n    }\\n\\n    function _setMarketSupplyCapsByUnderlying(address[] calldata underlyings, uint[] calldata newSupplyCaps) external isGovernorOrGuardianOrAdmin {\\n        _setMarketSupplyCapsInternal(_underlyingToCTokens(underlyings), newSupplyCaps);\\n    }\\n\\n    function _setMarketSupplyCapsInternal(CToken[] memory cTokens, uint[] calldata newSupplyCaps) internal {\\n        comptroller._setMarketSupplyCaps(cTokens, newSupplyCaps);\\n    }\\n\\n    function _underlyingToCTokens(address[] calldata underlyings) internal view returns (CToken[] memory) {\\n        CToken[] memory cTokens = new CToken[](underlyings.length);\\n        for (uint256 i = 0; i < underlyings.length; i++) {\\n            address cToken = comptroller.cTokensByUnderlying(underlyings[i]);\\n            require(cToken != address(0), \\\"cToken doesn't exist\\\");\\n            cTokens[i] = CToken(cToken);\\n        }\\n        return cTokens;\\n    }\\n\\n    /**\\n      * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\\n      * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\\n      * @param cTokens The addresses of the markets (tokens) to change the borrow caps for\\n      * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\\n      */\\n    function _setMarketBorrowCaps(CToken[] memory cTokens, uint[] calldata newBorrowCaps) external isGovernorOrGuardianOrAdmin {\\n        _setMarketBorrowCapsInternal(cTokens, newBorrowCaps);\\n    }\\n\\n    function _setMarketBorrowCapsInternal(CToken[] memory cTokens, uint[] calldata newBorrowCaps) internal {\\n        comptroller._setMarketBorrowCaps(cTokens, newBorrowCaps);\\n    }\\n\\n    function _setMarketBorrowCapsByUnderlying(address[] calldata underlyings, uint[] calldata newBorrowCaps) external isGovernorOrGuardianOrAdmin {\\n        _setMarketBorrowCapsInternal(_underlyingToCTokens(underlyings), newBorrowCaps);\\n    }\\n\\n    /**\\n     * @notice Admin function to change the Borrow Cap Guardian\\n     * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\\n     */\\n    function _setBorrowCapGuardian(address newBorrowCapGuardian) external onlyGovernor {\\n        comptroller._setBorrowCapGuardian(newBorrowCapGuardian);\\n    }\\n\\n    // ************ PAUSE GUARDIAN FUNCTIONS ************\\n    /**\\n     * @notice Admin function to change the Pause Guardian\\n     * @param newPauseGuardian The address of the new Pause Guardian\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n     */\\n    function _setPauseGuardian(address newPauseGuardian) external onlyGovernor returns (uint) {\\n        return comptroller._setPauseGuardian(newPauseGuardian);\\n    }\\n\\n    function _setMintPausedByUnderlying(address underlying, bool state) external isGovernorOrGuardianOrAdmin returns (bool) {\\n        address cToken = comptroller.cTokensByUnderlying(underlying);\\n        require(cToken != address(0), \\\"cToken doesn't exist\\\");\\n        _setMintPausedInternal(CToken(cToken), state);\\n    }\\n\\n    function _setMintPaused(CToken cToken, bool state) external isGovernorOrGuardianOrAdmin returns (bool) {\\n        return _setMintPausedInternal(cToken, state);\\n    }\\n\\n    function _setMintPausedInternal(CToken cToken, bool state) internal returns (bool) {\\n        return comptroller._setMintPaused(cToken, state);\\n    }\\n\\n    function _setBorrowPausedByUnderlying(address underlying, bool state) external isGovernorOrGuardianOrAdmin returns (bool) {\\n        address cToken = comptroller.cTokensByUnderlying(underlying);\\n        require(cToken != address(0), \\\"cToken doesn't exist\\\");\\n        return _setBorrowPausedInternal(CToken(cToken), state);\\n    }\\n\\n    function _setBorrowPausedInternal(CToken cToken, bool state) internal returns (bool) {\\n        return comptroller._setBorrowPaused(cToken, state);\\n    }\\n\\n    function _setBorrowPaused(CToken cToken, bool state) external isGovernorOrGuardianOrAdmin returns (bool) {\\n        _setBorrowPausedInternal(CToken(cToken), state);\\n    }\\n\\n    function _setTransferPaused(bool state) external isGovernorOrGuardianOrAdmin returns (bool) {\\n        return comptroller._setTransferPaused(state);\\n    }\\n\\n    function _setSeizePaused(bool state) external isGovernorOrGuardianOrAdmin returns (bool) {\\n        return comptroller._setSeizePaused(state);\\n    }\\n}\"\r\n    },\r\n    \"./contracts/refs/CoreRef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ICoreRef.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\n/// @title A Reference to Core\\n/// @author Fei Protocol\\n/// @notice defines some modifiers and utilities around interacting with Core\\nabstract contract CoreRef is ICoreRef, Pausable {\\n    ICore private _core;\\n\\n    /// @notice a role used with a subset of governor permissions for this contract only\\n    bytes32 public override CONTRACT_ADMIN_ROLE;\\n\\n    /// @notice boolean to check whether or not the contract has been initialized.\\n    /// cannot be initialized twice.\\n    bool private _initialized;\\n\\n    constructor(address coreAddress) {\\n        _initialize(coreAddress);\\n    }\\n\\n    /// @notice CoreRef constructor\\n    /// @param coreAddress Fei Core to reference\\n    function _initialize(address coreAddress) internal {\\n        require(!_initialized, \\\"CoreRef: already initialized\\\");\\n        _initialized = true;\\n\\n        _core = ICore(coreAddress);\\n        _setContractAdminRole(_core.GOVERN_ROLE());\\n    }\\n\\n    modifier ifMinterSelf() {\\n        if (_core.isMinter(address(this))) {\\n            _;\\n        }\\n    }\\n\\n    modifier onlyMinter() {\\n        require(_core.isMinter(msg.sender), \\\"CoreRef: Caller is not a minter\\\");\\n        _;\\n    }\\n\\n    modifier onlyBurner() {\\n        require(_core.isBurner(msg.sender), \\\"CoreRef: Caller is not a burner\\\");\\n        _;\\n    }\\n\\n    modifier onlyPCVController() {\\n        require(\\n            _core.isPCVController(msg.sender),\\n            \\\"CoreRef: Caller is not a PCV controller\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGovernorOrAdmin() {\\n        require(\\n            _core.isGovernor(msg.sender) ||\\n            isContractAdmin(msg.sender),\\n            \\\"CoreRef: Caller is not a governor or contract admin\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(\\n            _core.isGovernor(msg.sender),\\n            \\\"CoreRef: Caller is not a governor\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGuardianOrGovernor() {\\n        require(\\n            _core.isGovernor(msg.sender) || \\n            _core.isGuardian(msg.sender),\\n            \\\"CoreRef: Caller is not a guardian or governor\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier isGovernorOrGuardianOrAdmin() {\\n        require(\\n            _core.isGovernor(msg.sender) ||\\n            _core.isGuardian(msg.sender) || \\n            isContractAdmin(msg.sender), \\n            \\\"CoreRef: Caller is not governor or guardian or admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyFei() {\\n        require(msg.sender == address(fei()), \\\"CoreRef: Caller is not FEI\\\");\\n        _;\\n    }\\n\\n    /// @notice set new Core reference address\\n    /// @param newCore the new core address\\n    function setCore(address newCore) external override onlyGovernor {\\n        require(newCore != address(0), \\\"CoreRef: zero address\\\");\\n        address oldCore = address(_core);\\n        _core = ICore(newCore);\\n        emit CoreUpdate(oldCore, newCore);\\n    }\\n\\n    /// @notice sets a new admin role for this contract\\n    function setContractAdminRole(bytes32 newContractAdminRole) external override onlyGovernor {\\n        _setContractAdminRole(newContractAdminRole);\\n    }\\n\\n    /// @notice returns whether a given address has the admin role for this contract\\n    function isContractAdmin(address _admin) public view override returns (bool) {\\n        return _core.hasRole(CONTRACT_ADMIN_ROLE, _admin);\\n    }\\n\\n    /// @notice set pausable methods to paused\\n    function pause() public override onlyGuardianOrGovernor {\\n        _pause();\\n    }\\n\\n    /// @notice set pausable methods to unpaused\\n    function unpause() public override onlyGuardianOrGovernor {\\n        _unpause();\\n    }\\n\\n    /// @notice address of the Core contract referenced\\n    /// @return ICore implementation address\\n    function core() public view override returns (ICore) {\\n        return _core;\\n    }\\n\\n    /// @notice address of the Fei contract referenced by Core\\n    /// @return IFei implementation address\\n    function fei() public view override returns (IFei) {\\n        return _core.fei();\\n    }\\n\\n    /// @notice address of the Tribe contract referenced by Core\\n    /// @return IERC20 implementation address\\n    function tribe() public view override returns (IERC20) {\\n        return _core.tribe();\\n    }\\n\\n    /// @notice fei balance of contract\\n    /// @return fei amount held\\n    function feiBalance() public view override returns (uint256) {\\n        return fei().balanceOf(address(this));\\n    }\\n\\n    /// @notice tribe balance of contract\\n    /// @return tribe amount held\\n    function tribeBalance() public view override returns (uint256) {\\n        return tribe().balanceOf(address(this));\\n    }\\n\\n    function _burnFeiHeld() internal {\\n        fei().burn(feiBalance());\\n    }\\n\\n    function _mintFei(address to, uint256 amount) internal virtual {\\n        if (amount != 0) {\\n            fei().mint(to, amount);\\n        }\\n    }\\n\\n    function _setContractAdminRole(bytes32 newContractAdminRole) internal {\\n        bytes32 oldContractAdminRole = CONTRACT_ADMIN_ROLE;\\n        CONTRACT_ADMIN_ROLE = newContractAdminRole;\\n        emit ContractAdminRoleUpdate(oldContractAdminRole, newContractAdminRole);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/refs/ICoreRef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"../core/ICore.sol\\\";\\n\\n/// @title CoreRef interface\\n/// @author Fei Protocol\\ninterface ICoreRef {\\n    // ----------- Events -----------\\n\\n    event CoreUpdate(address indexed oldCore, address indexed newCore);\\n\\n    event ContractAdminRoleUpdate(bytes32 indexed oldContractAdminRole, bytes32 indexed newContractAdminRole);\\n\\n    // ----------- Governor only state changing api -----------\\n\\n    function setCore(address newCore) external;\\n\\n    function setContractAdminRole(bytes32 newContractAdminRole) external;\\n\\n    // ----------- Governor or Guardian only state changing api -----------\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    // ----------- Getters -----------\\n\\n    function core() external view returns (ICore);\\n\\n    function fei() external view returns (IFei);\\n\\n    function tribe() external view returns (IERC20);\\n\\n    function feiBalance() external view returns (uint256);\\n\\n    function tribeBalance() external view returns (uint256);\\n\\n    function CONTRACT_ADMIN_ROLE() external view returns (bytes32);\\n\\n    function isContractAdmin(address admin) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"./contracts/core/ICore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IPermissions.sol\\\";\\nimport \\\"../token/IFei.sol\\\";\\n\\n/// @title Core Interface\\n/// @author Fei Protocol\\ninterface ICore is IPermissions {\\n    // ----------- Events -----------\\n\\n    event FeiUpdate(address indexed _fei);\\n    event TribeUpdate(address indexed _tribe);\\n    event GenesisGroupUpdate(address indexed _genesisGroup);\\n    event TribeAllocation(address indexed _to, uint256 _amount);\\n    event GenesisPeriodComplete(uint256 _timestamp);\\n\\n    // ----------- Governor only state changing api -----------\\n\\n    function init() external;\\n\\n    // ----------- Governor only state changing api -----------\\n\\n    function setFei(address token) external;\\n\\n    function setTribe(address token) external;\\n\\n    function allocateTribe(address to, uint256 amount) external;\\n\\n    // ----------- Getters -----------\\n\\n    function fei() external view returns (IFei);\\n\\n    function tribe() external view returns (IERC20);\\n}\\n\"\r\n    },\r\n    \"./contracts/core/IPermissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./IPermissionsRead.sol\\\";\\n\\n/// @title Permissions interface\\n/// @author Fei Protocol\\ninterface IPermissions is IAccessControl, IPermissionsRead {\\n    // ----------- Governor only state changing api -----------\\n\\n    function createRole(bytes32 role, bytes32 adminRole) external;\\n\\n    function grantMinter(address minter) external;\\n\\n    function grantBurner(address burner) external;\\n\\n    function grantPCVController(address pcvController) external;\\n\\n    function grantGovernor(address governor) external;\\n\\n    function grantGuardian(address guardian) external;\\n\\n    function revokeMinter(address minter) external;\\n\\n    function revokeBurner(address burner) external;\\n\\n    function revokePCVController(address pcvController) external;\\n\\n    function revokeGovernor(address governor) external;\\n\\n    function revokeGuardian(address guardian) external;\\n\\n    // ----------- Revoker only state changing api -----------\\n\\n    function revokeOverride(bytes32 role, address account) external;\\n\\n    // ----------- Getters -----------\\n\\n    function GUARDIAN_ROLE() external view returns (bytes32);\\n\\n    function GOVERN_ROLE() external view returns (bytes32);\\n\\n    function BURNER_ROLE() external view returns (bytes32);\\n\\n    function MINTER_ROLE() external view returns (bytes32);\\n\\n    function PCV_CONTROLLER_ROLE() external view returns (bytes32);\\n\\n}\\n\"\r\n    },\r\n    \"./contracts/core/IPermissionsRead.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\n/// @title Permissions Read interface\\n/// @author Fei Protocol\\ninterface IPermissionsRead {\\n    // ----------- Getters -----------\\n\\n    function isBurner(address _address) external view returns (bool);\\n\\n    function isMinter(address _address) external view returns (bool);\\n\\n    function isGovernor(address _address) external view returns (bool);\\n\\n    function isGuardian(address _address) external view returns (bool);\\n\\n    function isPCVController(address _address) external view returns (bool);\\n}\"\r\n    },\r\n    \"./contracts/token/IFei.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title FEI stablecoin interface\\n/// @author Fei Protocol\\ninterface IFei is IERC20 {\\n    // ----------- Events -----------\\n\\n    event Minting(\\n        address indexed _to,\\n        address indexed _minter,\\n        uint256 _amount\\n    );\\n\\n    event Burning(\\n        address indexed _to,\\n        address indexed _burner,\\n        uint256 _amount\\n    );\\n\\n    event IncentiveContractUpdate(\\n        address indexed _incentivized,\\n        address indexed _incentiveContract\\n    );\\n\\n    // ----------- State changing api -----------\\n\\n    function burn(uint256 amount) external;\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    // ----------- Burner only state changing api -----------\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    // ----------- Minter only state changing api -----------\\n\\n    function mint(address account, uint256 amount) external;\\n\\n    // ----------- Governor only state changing api -----------\\n\\n    function setIncentiveContract(address account, address incentive) external;\\n\\n    // ----------- Getters -----------\\n\\n    function incentiveContract(address account) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"./contracts/external/Unitroller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"./CToken.sol\\\";\\n\\nabstract contract Unitroller {\\n\\n    struct Market {\\n        bool isListed;\\n        uint collateralFactorMantissa;\\n        mapping(address => bool) accountMembership;\\n    }\\n    \\n    address public admin;\\n    address public borrowCapGuardian;\\n    address public pauseGuardian;\\n\\n    address public oracle;\\n    address public pendingAdmin;\\n    uint public closeFactorMantissa;\\n    uint public liquidationIncentiveMantissa;\\n    mapping(address => Market) public markets;\\n    mapping(address => address) public cTokensByUnderlying;\\n    mapping(address => uint) public supplyCaps;\\n\\n    function _setPendingAdmin(address newPendingAdmin) public virtual returns (uint); \\n\\n    function _setBorrowCapGuardian(address newBorrowCapGuardian) public virtual;\\n    function _setMarketSupplyCaps(CToken[] calldata cTokens, uint[] calldata newSupplyCaps) external virtual;\\n    function _setMarketBorrowCaps(CToken[] calldata cTokens, uint[] calldata newBorrowCaps) external virtual;\\n\\n    function _setPauseGuardian(address newPauseGuardian) public virtual returns (uint);\\n    function _setMintPaused(CToken cToken, bool state) public virtual returns (bool);\\n    function _setBorrowPaused(CToken cToken, bool borrowPaused) public virtual returns (bool);\\n    function _setTransferPaused(bool state) public virtual returns (bool);\\n    function _setSeizePaused(bool state) public virtual returns (bool);\\n\\n    function _setPriceOracle(address newOracle) external virtual returns (uint256);\\n    function _setCloseFactor(uint newCloseFactorMantissa) external virtual returns (uint256);\\n    function _setLiquidationIncentive(uint newLiquidationIncentiveMantissa) external virtual returns (uint);\\n    function _setCollateralFactor(CToken cToken, uint newCollateralFactorMantissa) public virtual returns (uint256);\\n    function _acceptAdmin() external virtual returns (uint);\\n    function _deployMarket(bool isCEther, bytes calldata constructionData, uint256 collateralFactorMantissa) external virtual returns (uint);\\n    function borrowGuardianPaused(address cToken) external view virtual returns(bool);\\n    function comptrollerImplementation() external view virtual returns(address);\\n    function rewardsDistributors(uint256 index) external view virtual returns(address);\\n\\n    function _addRewardsDistributor(address distributor) external virtual returns (uint);\\n    function _setWhitelistEnforcement(bool enforce) external virtual returns (uint);\\n\\n    function _setWhitelistStatuses(address[] calldata suppliers, bool[] calldata statuses) external virtual returns (uint);\\n\\n    function _unsupportMarket(CToken cToken) external virtual returns (uint);\\n\\n    function _toggleAutoImplementations(bool enabled) public virtual returns (uint);\\n}\"\r\n    },\r\n    \"./contracts/external/CToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nabstract contract CToken {\\n    function getCash() external view returns (uint) {}\\n}\"\r\n    },\r\n    \"./contracts/feirari/IMasterOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\ninterface IMasterOracle {\\n    function add(address[] calldata underlyings, address[] calldata _oracles) external;\\n\\n    function changeAdmin(address newAdmin) external;\\n\\n    function admin() external view returns (address);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"contract Unitroller\",\"name\":\"_comptroller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ComptrollerError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"oldContractAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newContractAdminRole\",\"type\":\"bytes32\"}],\"name\":\"ContractAdminRoleUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldCore\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCore\",\"type\":\"address\"}],\"name\":\"CoreUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTRACT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"}],\"name\":\"_addRewardsDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"irm\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_deployMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBorrowCapGuardian\",\"type\":\"address\"}],\"name\":\"_setBorrowCapGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setBorrowPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setBorrowPausedByUnderlying\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCloseFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCollateralFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"_setLiquidationIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newBorrowCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setMarketBorrowCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"underlyings\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newBorrowCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setMarketBorrowCapsByUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newSupplyCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setMarketSupplyCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"underlyings\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newSupplyCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setMarketSupplyCapsByUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setMintPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setMintPausedByUnderlying\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauseGuardian\",\"type\":\"address\"}],\"name\":\"_setPauseGuardian\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setPendingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"_setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setSeizePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setTransferPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enforce\",\"type\":\"bool\"}],\"name\":\"_setWhitelistEnforcement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"suppliers\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"statuses\",\"type\":\"bool[]\"}],\"name\":\"_setWhitelistStatuses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"_toggleAutoImplementations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"_unsupportMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract Unitroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract ICore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fei\",\"outputs\":[{\"internalType\":\"contract IFei\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feiBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isContractAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"underlyings\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"}],\"name\":\"oracleAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"oracleChangeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newContractAdminRole\",\"type\":\"bytes32\"}],\"name\":\"setContractAdminRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCore\",\"type\":\"address\"}],\"name\":\"setCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tribe\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tribeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FuseAdmin","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008d5ed43dca8c2f7dfb20cf7b53cc7e593635d7b900000000000000000000000088f7c23ea6c4c404da463bc9ae03b012b32def9e","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b68f278d064837ef5539a6c5bec7181fe79c450487ac98747b83577f5955392c"}]}