{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IGenArt {\r\n    function getTokensByOwner(address owner)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n\r\n    function isGoldToken(uint256 _tokenId) external view returns (bool);\r\n}\r\n\r\ninterface IGenArtCollection {\r\n    function mintGen(\r\n        address _to,\r\n        uint256 _groupId,\r\n        uint256 _membershipId\r\n    ) external;\r\n\r\n    function mint(\r\n        address _to,\r\n        uint256 _groupId,\r\n        uint256 _membershipId\r\n    ) external;\r\n\r\n    function mintMany(\r\n        address _to,\r\n        uint256 _groupId,\r\n        uint256 _membershipId,\r\n        uint256 _amount\r\n    ) external;\r\n\r\n    function mintManyGen(\r\n        address _to,\r\n        uint256 _groupId,\r\n        uint256 _membershipId,\r\n        uint256 _amount\r\n    ) external;\r\n\r\n    function getAllowedMintForMembership(uint256 _group, uint256 _membershipId)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * Interface to the GEN.ART Membership and Governance Token Contracts\r\n */\r\n\r\ncontract GenArtInterfaceV2 is Ownable {\r\n    IGenArt private _genArtMembership;\r\n    IERC20 private _genArtToken;\r\n    bool private _genAllowed = false;\r\n\r\n    constructor(address genArtMembershipAddress_) {\r\n        _genArtMembership = IGenArt(genArtMembershipAddress_);\r\n    }\r\n\r\n    function getMaxMintForMembership(uint256 _membershipId)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        _genArtMembership.ownerOf(_membershipId);\r\n        bool isGold = _genArtMembership.isGoldToken(_membershipId);\r\n        return (isGold ? 5 : 1);\r\n    }\r\n\r\n    function getMaxMintForOwner(address owner) public view returns (uint256) {\r\n        uint256[] memory tokenIds = _genArtMembership.getTokensByOwner(owner);\r\n        uint256 maxMint = 0;\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            maxMint += getMaxMintForMembership(tokenIds[i]);\r\n        }\r\n\r\n        return maxMint;\r\n    }\r\n\r\n    function upgradeGenArtTokenContract(address _genArtTokenAddress)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _genArtToken = IERC20(_genArtTokenAddress);\r\n    }\r\n\r\n    function setAllowGen(bool allow) public onlyOwner {\r\n        _genAllowed = allow;\r\n    }\r\n\r\n    function isGoldToken(uint256 _membershipId) public view returns (bool) {\r\n        return _genArtMembership.isGoldToken(_membershipId);\r\n    }\r\n\r\n    function genAllowed() public view returns (bool) {\r\n        return _genAllowed;\r\n    }\r\n\r\n    function ownerOf(uint256 _membershipId) public view returns (address) {\r\n        return _genArtMembership.ownerOf(_membershipId);\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return _genArtToken.balanceOf(_owner);\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) public {\r\n        _genArtToken.transferFrom(_from, _to, _amount);\r\n    }\r\n\r\n    function getRandomChoice(uint256[] memory choices, uint256 seed)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            choices.length > 0,\r\n            \"GenArtInterfaceV2: choices must have at least 1 value\"\r\n        );\r\n        if (choices.length == 1) return choices[0];\r\n        uint256 i = ((\r\n            uint256(\r\n                keccak256(abi.encodePacked(block.timestamp, seed, msg.sender))\r\n            )\r\n        ) % choices.length) + 1;\r\n\r\n        return choices[i - 1];\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"genArtMembershipAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_membershipId\",\"type\":\"uint256\"}],\"name\":\"getMaxMintForMembership\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getMaxMintForOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"choices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"getRandomChoice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_membershipId\",\"type\":\"uint256\"}],\"name\":\"isGoldToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_membershipId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"setAllowGen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_genArtTokenAddress\",\"type\":\"address\"}],\"name\":\"upgradeGenArtTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GenArtInterfaceV2","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001ca39c7f0f65b4da24b094a9afac7acf626b7f38","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2226eb2981345d0d512c4708f5494682f1354caf179f7f41c72b9c1d65e3a9af"}]}