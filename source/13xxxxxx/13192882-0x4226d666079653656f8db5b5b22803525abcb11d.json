{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMathUpgradeable {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface ISRC20 {\r\n\r\n    event RestrictionsAndRulesUpdated(address restrictions, address rules);\r\n\r\n    function transferToken(address to, uint256 value, uint256 nonce, uint256 expirationTime,\r\n        bytes32 msgHash, bytes calldata signature) external returns (bool);\r\n    function transferTokenFrom(address from, address to, uint256 value, uint256 nonce,\r\n        uint256 expirationTime, bytes32 hash, bytes calldata signature) external returns (bool);\r\n    function getTransferNonce() external view returns (uint256);\r\n    function getTransferNonce(address account) external view returns (uint256);\r\n    function executeTransfer(address from, address to, uint256 value) external returns (bool);\r\n    function updateRestrictionsAndRules(address restrictions, address rules) external returns (bool);\r\n\r\n    // ERC20 part-like interface\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function increaseAllowance(address spender, uint256 value) external returns (bool);\r\n    function decreaseAllowance(address spender, uint256 value) external returns (bool);\r\n}\r\n\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\ninterface ITransferRules {\r\n    function setSRC(address src20) external returns (bool);\r\n    \r\n    function doTransfer(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\nabstract contract BaseTransferRule is Initializable, OwnableUpgradeable, ITransferRules {\r\n    address public chainRuleAddr;\r\n    address public _src20;\r\n    address public doTransferCaller;\r\n    \r\n    \r\n    modifier onlyDoTransferCaller {\r\n        require(msg.sender == address(doTransferCaller));\r\n        _;\r\n    }\r\n    \r\n    //---------------------------------------------------------------------------------\r\n    // public  section\r\n    //---------------------------------------------------------------------------------\r\n    function cleanSRC() public onlyOwner() {\r\n        _src20 = address(0);\r\n        doTransferCaller = address(0);\r\n        //_setChain(address(0));\r\n    }\r\n    \r\n    function clearChain() public onlyOwner() {\r\n        _setChain(address(0));\r\n    }\r\n    \r\n    function setChain(address chainAddr) public onlyOwner() {\r\n        _setChain(chainAddr);\r\n        require(_tryExternalSetSRC(_src20), \"can't call setSRC at chain contract\");\r\n        \r\n    }\r\n    \r\n    \r\n    //---------------------------------------------------------------------------------\r\n    // external  section\r\n    //---------------------------------------------------------------------------------\r\n    /**\r\n    * @dev Set for what contract this rules are.\r\n    *\r\n    * @param src20 - Address of src20 contract.\r\n    */\r\n    function setSRC(address src20) override external returns (bool) {\r\n        require(doTransferCaller == address(0), \"external contract already set\");\r\n        require(address(_src20) == address(0), \"external contract already set\");\r\n        require(src20 != address(0), \"src20 can not be zero\");\r\n        doTransferCaller = _msgSender();\r\n        _src20 = src20;\r\n        return true;\r\n    }\r\n     /**\r\n    * @dev Do transfer and checks where funds should go. If both from and to are\r\n    * on the whitelist funds should be transferred but if one of them are on the\r\n    * grey list token-issuer/owner need to approve transfer.\r\n    *\r\n    * param from The address to transfer from.\r\n    * param to The address to send tokens to.\r\n    * @param value The amount of tokens to send.\r\n    */\r\n    function doTransfer(address from, address to, uint256 value) override external onlyDoTransferCaller returns (bool) {\r\n        (from,to,value) = _doTransfer(from, to, value);\r\n        if (isChainExists()) {\r\n            require(ITransferRules(chainRuleAddr).doTransfer(msg.sender, to, value), \"chain doTransfer failed\");\r\n        } else {\r\n            //_transfer(msg.sender, to, value);\r\n            require(ISRC20(_src20).executeTransfer(from, to, value), \"SRC20 transfer failed\");\r\n        }\r\n        return true;\r\n    }\r\n    //---------------------------------------------------------------------------------\r\n    // internal  section\r\n    //---------------------------------------------------------------------------------\r\n    function __BaseTransferRule_init() internal initializer {\r\n        __Ownable_init();\r\n\r\n    }\r\n    function isChainExists() internal view returns(bool) {\r\n        return (chainRuleAddr != address(0) ? true : false);\r\n    }\r\n    \r\n    function _doTransfer(address from, address to, uint256 value) internal virtual returns(address _from, address _to, uint256 _value) ;\r\n    \r\n    //---------------------------------------------------------------------------------\r\n    // private  section\r\n    //---------------------------------------------------------------------------------\r\n\r\n    function _tryExternalSetSRC(address chainAddr) private returns (bool) {\r\n        try ITransferRules(chainAddr).setSRC(_src20) returns (bool) {\r\n            return (true);\r\n        } catch Error(string memory /*reason*/) {\r\n            // This is executed in case\r\n            // revert was called inside getData\r\n            // and a reason string was provided.\r\n            \r\n            return (false);\r\n        } catch (bytes memory /*lowLevelData*/) {\r\n            // This is executed in case revert() was used\r\n            // or there was a failing assertion, division\r\n            // by zero, etc. inside getData.\r\n            \r\n            return (false);\r\n        }\r\n        \r\n    }\r\n    \r\n    function _setChain(address chainAddr) private {\r\n        chainRuleAddr = chainAddr;\r\n    }\r\n    \r\n}\r\n\r\n/*\r\n * @title TransferRules contract\r\n * @dev Contract that is checking if on-chain rules for token transfers are concluded.\r\n */\r\ncontract SimpleTransferRule is BaseTransferRule {\r\n    using SafeMathUpgradeable for uint256;\r\n    //using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\r\n    \r\n    address internal escrowAddr;\r\n    \r\n    mapping (address => uint256) _lastTransactionBlock;\r\n    \r\n    //address uniswapV2Pair;\r\n    address[] uniswapV2Pairs;\r\n    uint256 normalValueRatio;\r\n    uint256 lockupPeriod;\r\n    uint256 dayInSeconds;\r\n    \r\n    uint256 isTrading;\r\n    uint256 isTransfers;\r\n    \r\n    struct Minimum {\r\n        uint256 amount;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        bool gradual;\r\n    }\r\n\r\n    mapping(address => Minimum[]) _minimums;\r\n         \r\n    event Event(string topic, address origin);\r\n    \r\n    //---------------------------------------------------------------------------------\r\n    // public  section\r\n    //---------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * init method\r\n     */\r\n    function init(\r\n    ) \r\n        public \r\n        initializer \r\n    {\r\n        __SimpleTransferRule_init();\r\n        \r\n    }\r\n    \r\n    /**\r\n    * @dev clean ERC777. available only for owner\r\n    */\r\n    \r\n     \r\n    function haltTrading() public onlyOwner(){\r\n        isTrading = 0;\r\n    }\r\n    \r\n    function resumeTrading() public onlyOwner() {\r\n        isTrading = 1;\r\n    }\r\n    \r\n    function haltTransfers() public onlyOwner(){\r\n        isTransfers = 0;\r\n    }\r\n    \r\n    function resumeTransfers() public onlyOwner() {\r\n        isTransfers = 1;\r\n    }\r\n    \r\n    function pairsAdd(address pair) public onlyOwner() {\r\n        \r\n        uniswapV2Pairs.push(pair);\r\n    }\r\n    \r\n    function pairsList() public view returns(address[] memory) {\r\n         return uniswapV2Pairs;\r\n    }\r\n    /**\r\n    * @dev viewing minimum holding in addr sener during period from now to timestamp.\r\n    */\r\n    function minimumsView(\r\n        address addr\r\n    ) \r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _minimumsGet(addr, block.timestamp);\r\n    }\r\n    function minimumsClear(\r\n        address addr\r\n    ) \r\n        public\r\n        onlyOwner()\r\n    {\r\n        delete _minimums[addr];\r\n    }\r\n     \r\n    \r\n    //---------------------------------------------------------------------------------\r\n    // internal  section\r\n    //---------------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * init internal\r\n     */\r\n    function __SimpleTransferRule_init(\r\n    ) \r\n        internal\r\n        initializer \r\n    {\r\n        __BaseTransferRule_init();\r\n        //uniswapV2Pair = 0x03B0da178FecA0b0BBD5D76c431f16261D0A76aa;\r\n        uniswapV2Pairs.push(0x03B0da178FecA0b0BBD5D76c431f16261D0A76aa);\r\n        \r\n        _src20 = 0x6Ef5febbD2A56FAb23f18a69d3fB9F4E2A70440B;\r\n        \r\n        normalValueRatio = 10;\r\n        \r\n        // 6 months;\r\n        dayInSeconds = 86400;\r\n        lockupPeriod = dayInSeconds.mul(180);\r\n        \r\n        isTrading = 1;\r\n        isTransfers = 1;\r\n        \r\n    }\r\n  \r\n    //---------------------------------------------------------------------------------\r\n    // external section\r\n    //---------------------------------------------------------------------------------\r\n    \r\n    \r\n    /**\r\n    * @dev Do transfer and checks where funds should go. If both from and to are\r\n    * on the whitelist funds should be transferred but if one of them are on the\r\n    * grey list token-issuer/owner need to approve transfer.\r\n    *\r\n    * @param from The address to transfer from.\r\n    * @param to The address to send tokens to.\r\n    * @param value The amount of tokens to send.\r\n    */\r\n    function _doTransfer(\r\n        address from, \r\n        address to, \r\n        uint256 value\r\n    ) \r\n        override\r\n        internal\r\n        returns (\r\n            address _from, \r\n            address _to, \r\n            uint256 _value\r\n        ) \r\n    {\r\n        \r\n        (_from,_to,_value) = (from,to,value);\r\n        \r\n        // owner does anything\r\n        \r\n        if (tx.origin == owner()) {\r\n            return  (_from,_to,_value);\r\n        }\r\n            \r\n        string memory errmsg;\r\n        \r\n        if (isTransfers == 0) {\r\n            errmsg = \"Transfers have been temporarily halted\";\r\n            emit Event(errmsg, tx.origin);\r\n            revert(errmsg);\r\n        }\r\n            \r\n        // preventTransactionsInSameBlock\r\n        _preventTransactionsInSameBlock();\r\n        \r\n        // check allowance minimums\r\n        _checkAllowanceMinimums(_from, _value);\r\n\r\n        if ((indexOf(uniswapV2Pairs,_from) == -1) && (indexOf(uniswapV2Pairs,_to) == -1)) {\r\n            return  (_from,_to,_value);\r\n        }\r\n            \r\n        if (isTrading == 0) {\r\n            errmsg = \"Trading has been temporarily halted\";\r\n            emit Event(errmsg, tx.origin);\r\n            revert(errmsg);\r\n        }\r\n        \r\n\r\n        if (indexOf(uniswapV2Pairs,_from) != -1) {\r\n            address uniswapV2Pair = _from;\r\n        \r\n            // fetches and sorts the reserves for a pair\r\n            (uint reserveA, uint reserveB) = getReserves(uniswapV2Pair);\r\n            uint256 outlierPrice = (reserveB).div(reserveA);\r\n            \r\n            uint256 obtainedTokenB = getAmountIn(_value,reserveA,reserveB);\r\n            uint256 outlierPriceAfter = (reserveB.add(obtainedTokenB)).div(reserveA.sub(_value));\r\n            \r\n            if (outlierPriceAfter > outlierPrice.mul(normalValueRatio)) {\r\n                _minimumsAdd(_to,value, lockupPeriod, true);\r\n            }\r\n        }\r\n         \r\n    }\r\n    \r\n    function indexOf(address[] memory arr, address item) internal view returns(int32) {\r\n        \r\n        for(uint32 i = 0; i < arr.length; i++) {\r\n            if (arr[i] == item) {\r\n                return int32(i);\r\n            }\r\n        }\r\n        \r\n        return -1;\r\n    }\r\n    /*\r\n    * copy as UniswapV2Library function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut)\r\n    */\r\n    function getAmountIn(uint256 token, uint256 reserve0, uint256 reserve1) internal pure returns (uint256 calcEth) {\r\n        uint256 numerator = reserve1.mul(token).mul(1000);\r\n        uint256 denominator = reserve0.sub(token).mul(997);\r\n        calcEth = (numerator / denominator).add(1);\r\n    }\r\n    \r\n    // reserveA is reserves of src20\r\n    function getReserves(address uniswapV2Pair) internal returns (uint256 reserveA, uint256 reserveB) {\r\n        (reserveA, reserveB,) = IUniswapV2Pair(uniswapV2Pair).getReserves();   \r\n        (reserveA, reserveB) = (_src20 == IUniswapV2Pair(uniswapV2Pair).token0()) ? (reserveA, reserveB) : (reserveB, reserveA);\r\n    }\r\n\r\n    function _preventTransactionsInSameBlock() internal {\r\n        if (_lastTransactionBlock[tx.origin] == block.number) {\r\n            // prevent direct frontrunning\r\n            emit Event(\"SandwichAttack\", tx.origin);\r\n            revert(\"Cannot execute two transactions in same block.\");\r\n        }\r\n        _lastTransactionBlock[tx.origin] = block.number; \r\n    }\r\n    \r\n    function _checkAllowanceMinimums(address addr, uint256 amount) internal view {\r\n        uint256 minimum = _minimumsGet(addr, block.timestamp);\r\n       \r\n        uint256 canBeTransferring = ISRC20(_src20).balanceOf(addr).sub(minimum);\r\n        require(canBeTransferring >= amount, \"insufficient balance to maintain minimum lockup\");\r\n        \r\n    }\r\n    \r\n    /**\r\n     *  amount to lock up\r\n     */\r\n    function _minimumsAdd(\r\n        address addr,\r\n        uint256 amount,\r\n        uint256 duration,\r\n        bool gradual\r\n    ) \r\n        internal\r\n    {\r\n        \r\n        \r\n        Minimum memory minimum = Minimum({\r\n              amount: amount,\r\n              startTime: block.timestamp,\r\n              endTime: block.timestamp.add(duration),\r\n              gradual: gradual\r\n        });\r\n        _minimums[addr].push(minimum);\r\n    }\r\n      \r\n    /**\r\n     * amount that locked up for `addr` in `currentTime`\r\n     */\r\n    function _minimumsGet(\r\n        address addr,\r\n        uint256 currentTime\r\n    ) \r\n        internal \r\n        view\r\n        returns (uint256) \r\n    {\r\n         \r\n        uint256 minimum = 0;\r\n        uint256 c = _minimums[addr].length;\r\n        uint256 m;\r\n        \r\n        for (uint256 i=0; i<c; i++) {\r\n            if (\r\n                _minimums[addr][i].startTime > currentTime || \r\n                _minimums[addr][i].endTime < currentTime \r\n                ) {\r\n                continue;\r\n            }\r\n            \r\n            m = _minimums[addr][i].amount;\r\n            if (_minimums[addr][i].gradual) {\r\n                m = m.mul(_minimums[addr][i].endTime.sub(currentTime)).div(_minimums[addr][i].endTime.sub(_minimums[addr][i].startTime));\r\n            }\r\n            minimum = minimum.add(m);\r\n        }\r\n        return minimum;\r\n    }\r\n    \r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"topic\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"}],\"name\":\"Event\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_src20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainRuleAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cleanSRC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"doTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doTransferCaller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"haltTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"haltTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"minimumsClear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"minimumsView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"pairsAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairsList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumeTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumeTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"chainAddr\",\"type\":\"address\"}],\"name\":\"setChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src20\",\"type\":\"address\"}],\"name\":\"setSRC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SimpleTransferRule","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b12b5338af55a8ab023649d1e976d2cad2a590e9cfcbada8b7db72eadc73eb1d"}]}