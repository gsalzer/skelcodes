{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/D/GIT/smart-contract-things/contracts/AgentDsSecretRoom.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ERC721TradableRandomMint.sol\\\";\\r\\n\\r\\ncontract AgentDsSecretRoom is ERC721TradableRandomMint {\\r\\n    string public contractURI;\\r\\n\\r\\n    bool public isMetadataLocked = false;\\r\\n\\r\\n    address public originalOwner;\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the original owner.\\r\\n     */\\r\\n    modifier onlyOriginalOwner() {\\r\\n        require(originalOwner == _msgSender(), \\\"Caller is not the original owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // They are watching you!\\r\\n\\r\\n    constructor(address _proxyRegistryAddress)\\r\\n        ERC721TradableRandomMint(\\\"Agent D's Secret Room\\\", \\\"ASR\\\", _proxyRegistryAddress)\\r\\n        \\r\\n    {\\r\\n        originalOwner = owner();\\r\\n    }\\r\\n\\r\\n    function lockContractMetadata() public onlyOriginalOwner {\\r\\n        require(!isMetadataLocked, \\\"The Contract has already been locked!\\\");\\r\\n        isMetadataLocked = true;\\r\\n    }\\r\\n\\r\\n    // One does not simply enter the basement!\\r\\n\\r\\n    function setBaseUri(string memory uri) public onlyOriginalOwner {\\r\\n        require(!isMetadataLocked, \\\"The Contract has been locked, toughluck!\\\");\\r\\n        baseURI = uri;\\r\\n    }\\r\\n\\r\\n    // Don't eat those donuts!\\r\\n\\r\\n    function setContractUri(string memory uri) public onlyOriginalOwner {\\r\\n        require(!isMetadataLocked, \\\"The Contract has been locked, toughluck!\\\");\\r\\n        contractURI = uri;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/GIT/smart-contract-things/contracts/DuckOwnerProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface OpenStoreContract {\\r\\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\r\\n}\\r\\n\\r\\n// quack-quack!\\r\\n\\r\\ncontract DuckOwnerProxy {\\r\\n    address public openStoreNFTAddress;\\r\\n    uint256 public baseNumber = 81051682759312351887842295081699468782319279963069916326007376000000000000000;\\r\\n    uint56[333] public ducks = [\\r\\n        uint56(214849514110977),\\r\\n        uint56(215949025738753),\\r\\n        uint56(218148048994305),\\r\\n        uint56(483130351288321),\\r\\n        uint56(220347072249857),\\r\\n        uint56(482030839660545),\\r\\n        uint56(222546095505409),\\r\\n        uint56(223645607133185),\\r\\n        uint56(224745118760961),\\r\\n        uint56(225844630388737),\\r\\n        uint56(226944142016513),\\r\\n        uint56(228043653644289),\\r\\n        uint56(229143165272065),\\r\\n        uint56(230242676899841),\\r\\n        uint56(231342188527617),\\r\\n        uint56(232441700155393),\\r\\n        uint56(233541211783169),\\r\\n        uint56(234640723410945),\\r\\n        uint56(235740235038721),\\r\\n        uint56(237939258294273),\\r\\n        uint56(236839746666497),\\r\\n        uint56(239038769922049),\\r\\n        uint56(240138281549825),\\r\\n        uint56(241237793177601),\\r\\n        uint56(242337304805377),\\r\\n        uint56(243436816433153),\\r\\n        uint56(244536328060929),\\r\\n        uint56(245635839688705),\\r\\n        uint56(246735351316481),\\r\\n        uint56(247834862944257),\\r\\n        uint56(248934374572033),\\r\\n        uint56(250033886199809),\\r\\n        uint56(251133397827585),\\r\\n        uint56(252232909455361),\\r\\n        uint56(253332421083137),\\r\\n        uint56(254431932710913),\\r\\n        uint56(255531444338689),\\r\\n        uint56(256630955966465),\\r\\n        uint56(257730467594241),\\r\\n        uint56(258829979222017),\\r\\n        uint56(259929490849793),\\r\\n        uint56(261029002477569),\\r\\n        uint56(262128514105345),\\r\\n        uint56(263228025733121),\\r\\n        uint56(264327537360897), // D\\r\\n        uint56(265427048988673),\\r\\n        uint56(266526560616449),\\r\\n        uint56(267626072244225),\\r\\n        uint56(268725583872001),\\r\\n        uint56(269825095499777), // U\\r\\n        uint56(270924607127553),\\r\\n        uint56(272024118755329),\\r\\n        uint56(273123630383105),\\r\\n        uint56(274223142010881),\\r\\n        uint56(275322653638657), // C\\r\\n        uint56(276422165266433),\\r\\n        uint56(277521676894209),\\r\\n        uint56(278621188521985),\\r\\n        uint56(279720700149761),\\r\\n        uint56(280820211777537), // K\\r\\n        uint56(281919723405313),\\r\\n        uint56(283019235033089),\\r\\n        uint56(284118746660865),\\r\\n        uint56(285218258288641),\\r\\n        uint56(286317769916417), // S\\r\\n        uint56(287417281544193),\\r\\n        uint56(288516793171969),\\r\\n        uint56(289616304799745),\\r\\n        uint56(290715816427521),\\r\\n        uint56(291815328055297),\\r\\n        uint56(292914839683073),\\r\\n        uint56(294014351310849),\\r\\n        uint56(295113862938625),\\r\\n        uint56(296213374566401),\\r\\n        uint56(297312886194177),\\r\\n        uint56(298412397821953),\\r\\n        uint56(299511909449729),\\r\\n        uint56(554598607093761),\\r\\n        uint56(301710932705281),\\r\\n        uint56(302810444333057),\\r\\n        uint56(303909955960833),\\r\\n        uint56(305009467588609),\\r\\n        uint56(306108979216385),\\r\\n        uint56(307208490844161),\\r\\n        uint56(308308002471937),\\r\\n        uint56(309407514099713),\\r\\n        uint56(310507025727489),\\r\\n        uint56(311606537355265),\\r\\n        uint56(312706048983041),\\r\\n        uint56(313805560610817),\\r\\n        uint56(314905072238593),\\r\\n        uint56(316004583866369),\\r\\n        uint56(317104095494145),\\r\\n        uint56(318203607121921),\\r\\n        uint56(319303118749697),\\r\\n        uint56(320402630377473),\\r\\n        uint56(321502142005249),\\r\\n        uint56(322601653633025),\\r\\n        uint56(323701165260801),\\r\\n        uint56(324800676888577),\\r\\n        uint56(325900188516353),\\r\\n        uint56(326999700144129),\\r\\n        uint56(328099211771905),\\r\\n        uint56(329198723399681),\\r\\n        uint56(330298235027457),\\r\\n        uint56(331397746655233),\\r\\n        uint56(332497258283009),\\r\\n        uint56(333596769910785),\\r\\n        uint56(334696281538561),\\r\\n        uint56(335795793166337),\\r\\n        uint56(336895304794113),\\r\\n        uint56(337994816421889),\\r\\n        uint56(339094328049665),\\r\\n        uint56(340193839677441),\\r\\n        uint56(341293351305217),\\r\\n        uint56(342392862932993),\\r\\n        uint56(343492374560769),\\r\\n        uint56(344591886188545),\\r\\n        uint56(345691397816321),\\r\\n        uint56(346790909444097),\\r\\n        uint56(347890421071873),\\r\\n        uint56(348989932699649),\\r\\n        uint56(354487490838529),\\r\\n        uint56(350089444327425),\\r\\n        uint56(351188955955201),\\r\\n        uint56(352288467582977),\\r\\n        uint56(353387979210753),\\r\\n        uint56(367681630371841),\\r\\n        uint56(366582118744065),\\r\\n        uint56(365482607116289),\\r\\n        uint56(364383095488513),\\r\\n        uint56(363283583860737),\\r\\n        uint56(362184072232961),\\r\\n        uint56(361084560605185),\\r\\n        uint56(359985048977409),\\r\\n        uint56(358885537349633),\\r\\n        uint56(357786025721857),\\r\\n        uint56(356686514094081),\\r\\n        uint56(355587002466305),\\r\\n        uint56(434751839666177),\\r\\n        uint56(486428886171649),\\r\\n        uint56(436950862921729),\\r\\n        uint56(487528397799425),\\r\\n        uint56(439149886177281),\\r\\n        uint56(488627909427201),\\r\\n        uint56(490826932682753),\\r\\n        uint56(442448421060609),\\r\\n        uint56(491926444310529),\\r\\n        uint56(444647444316161),\\r\\n        uint56(601877607088129),\\r\\n        uint56(446846467571713),\\r\\n        uint56(500722537332737),\\r\\n        uint56(449045490827265),\\r\\n        uint56(480931328032769),\\r\\n        uint56(451244514082817),\\r\\n        uint56(506220095471617),\\r\\n        uint56(453443537338369),\\r\\n        uint56(454543048966145),\\r\\n        uint56(455642560593921),\\r\\n        uint56(456742072221697),\\r\\n        uint56(511717653610497),\\r\\n        uint56(458941095477249),\\r\\n        uint56(515016188493825),\\r\\n        uint56(461140118732801),\\r\\n        uint56(550200560582657),\\r\\n        uint56(496324490821633),\\r\\n        uint56(464438653616129),\\r\\n        uint56(551300072210433),\\r\\n        uint56(466637676871681),\\r\\n        uint56(467737188499457),\\r\\n        uint56(523812281516033),\\r\\n        uint56(524911793143809),\\r\\n        uint56(479831816404993),\\r\\n        uint56(526011304771585),\\r\\n        uint56(544703002443777),\\r\\n        uint56(473234746638337),\\r\\n        uint56(533707886166017),\\r\\n        uint56(501822048960513),\\r\\n        uint56(508419118727169),\\r\\n        uint56(534807397793793),\\r\\n        uint56(477632793149441),\\r\\n        uint56(478732304777217),\\r\\n        uint56(535906909421569),\\r\\n        uint56(541404467560449),\\r\\n        uint56(522712769888257),\\r\\n        uint56(540304955932673),\\r\\n        uint56(539205444304897),\\r\\n        uint56(507319607099393),\\r\\n        uint56(538105932677121),\\r\\n        uint56(497424002449409),\\r\\n        uint56(519414235004929),\\r\\n        uint56(521613258260481),\\r\\n        uint56(498523514077185),\\r\\n        uint56(499623025704961),\\r\\n        uint56(502921560588289),\\r\\n        uint56(537006421049345),\\r\\n        uint56(532608374538241),\\r\\n        uint56(510618141982721),\\r\\n        uint56(509518630354945),\\r\\n        uint56(300611421077505),\\r\\n        uint56(520513746632705),\\r\\n        uint56(531508862910465),\\r\\n        uint56(504021072216065),\\r\\n        uint56(530409351282689),\\r\\n        uint56(528210328027137),\\r\\n        uint56(527110816399361),\\r\\n        uint56(529309839654913),\\r\\n        uint56(505120583843841),\\r\\n        uint56(493025955938305),\\r\\n        uint56(517215211749377),\\r\\n        uint56(494125467566081),\\r\\n        uint56(516115700121601),\\r\\n        uint56(513916676866049),\\r\\n        uint56(489727421054977),\\r\\n        uint56(575489328021505),\\r\\n        uint56(602977118715905),\\r\\n        uint56(580986886160385),\\r\\n        uint56(604076630343681),\\r\\n        uint56(545802514071553),\\r\\n        uint56(605176141971457),\\r\\n        uint56(552399583838209),\\r\\n        uint56(546902025699329),\\r\\n        uint56(606275653599233),\\r\\n        uint56(607375165227009),\\r\\n        uint56(597479560577025),\\r\\n        uint56(608474676854785),\\r\\n        uint56(548001537327105),\\r\\n        uint56(599678583832577),\\r\\n        uint56(609574188482561),\\r\\n        uint56(553499095465985),\\r\\n        uint56(610673700110337),\\r\\n        uint56(611773211738113),\\r\\n        uint56(579887374532609),\\r\\n        uint56(612872723365889),\\r\\n        uint56(564494211743745),\\r\\n        uint56(549101048954881),\\r\\n        uint56(585384932671489),\\r\\n        uint56(556797630349313),\\r\\n        uint56(613972234993665),\\r\\n        uint56(615071746621441),\\r\\n        uint56(616171258249217),\\r\\n        uint56(617270769876993),\\r\\n        uint56(589782979182593),\\r\\n        uint56(583185909415937),\\r\\n        uint56(618370281504769),\\r\\n        uint56(619469793132545),\\r\\n        uint56(620569304760321),\\r\\n        uint56(621668816388097),\\r\\n        uint56(584285421043713),\\r\\n        uint56(557897141977089),\\r\\n        uint56(622768328015873),\\r\\n        uint56(590882490810369),\\r\\n        uint56(623867839643649),\\r\\n        uint56(582086397788161),\\r\\n        uint56(561195676860417),\\r\\n        uint56(563394700115969),\\r\\n        uint56(624967351271425),\\r\\n        uint56(567792746627073),\\r\\n        uint56(555698118721537),\\r\\n        uint56(573290304765953),\\r\\n        uint56(565593723371521),\\r\\n        uint56(626066862899201),\\r\\n        uint56(588683467554817),\\r\\n        uint56(577688351277057),\\r\\n        uint56(627166374526977),\\r\\n        uint56(628265886154753),\\r\\n        uint56(600778095460353),\\r\\n        uint56(578787862904833),\\r\\n        uint56(574389816393729),\\r\\n        uint56(598579072204801),\\r\\n        uint56(629365397782529),\\r\\n        uint56(566693234999297),\\r\\n        uint56(630464909410305),\\r\\n        uint56(571091281510401),\\r\\n        uint56(586484444299265),\\r\\n        uint56(558996653604865),\\r\\n        uint56(572190793138177),\\r\\n        uint56(631564421038081),\\r\\n        uint56(562295188488193),\\r\\n        uint56(632663932665857),\\r\\n        uint56(633763444293633),\\r\\n        uint56(587583955927041),\\r\\n        uint56(568892258254849),\\r\\n        uint56(569991769882625),\\r\\n        uint56(634862955921409),\\r\\n        uint56(635962467549185),\\r\\n        uint56(593081514065921),\\r\\n        uint56(576588839649281),\\r\\n        uint56(591982002438145),\\r\\n        uint56(637061979176961),\\r\\n        uint56(638161490804737),\\r\\n        uint56(560096165232641),\\r\\n        uint56(594181025693697),\\r\\n        uint56(639261002432513),\\r\\n        uint56(595280537321473),\\r\\n        uint56(640360514060289),\\r\\n        uint56(642559537315841),\\r\\n        uint56(596380048949249),\\r\\n        uint56(484229862916097),\\r\\n        uint56(485329374543873),\\r\\n        uint56(683241467543553),\\r\\n        uint56(683241467543553),\\r\\n        uint56(684340979171329),\\r\\n        uint56(685440490799105),\\r\\n        uint56(686540002426881),\\r\\n        uint56(646957583826945),\\r\\n        uint56(648057095454721),\\r\\n        uint56(687639514054657),\\r\\n        uint56(688739025682433),\\r\\n        uint56(689838537310209),\\r\\n        uint56(643659048943617),\\r\\n        uint56(649156607082497),\\r\\n        uint56(644758560571393),\\r\\n        uint56(690938048937985),\\r\\n        uint56(645858072199169),\\r\\n        uint56(692037560565761),\\r\\n        uint56(693137072193537),\\r\\n        uint56(694236583821313),\\r\\n        uint56(695336095449089),\\r\\n        uint56(542503979188225),\\r\\n        uint56(696435607076865),\\r\\n        uint56(697535118704641),\\r\\n        uint56(698634630332417),\\r\\n        uint56(699734141960193),\\r\\n        uint56(700833653587969),\\r\\n        uint56(701933165215745),\\r\\n        uint56(703032676843521),\\r\\n        uint56(704132188471297),\\r\\n        uint56(705231700099073),\\r\\n        uint56(706331211726849),\\r\\n        uint56(707430723354625),\\r\\n        uint56(708530234982401),\\r\\n        uint56(543603490816001)\\r\\n    ];\\r\\n\\r\\n    constructor(address _openStoreNFTAddress) {\\r\\n        openStoreNFTAddress = _openStoreNFTAddress;\\r\\n    }\\r\\n\\r\\n    // VRAgent was here!\\r\\n\\r\\n    function checkIfDuckOwner(uint16 _duckID) external view returns (bool) {\\r\\n        require(_duckID >= 1 && _duckID <= 333, \\\"Duck ID should be in range\\\");\\r\\n        uint56 offset = ducks[_duckID - 1];\\r\\n        uint256 tokenID = uint256(offset) + baseNumber;\\r\\n        OpenStoreContract nft = OpenStoreContract(openStoreNFTAddress);\\r\\n        return nft.balanceOf(tx.origin, tokenID) == 1;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/GIT/smart-contract-things/contracts/ERC721TradableRandomMint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\nimport \\\"./common/meta-transactions/ContentMixin.sol\\\";\\r\\nimport \\\"./common/meta-transactions/NativeMetaTransaction.sol\\\";\\r\\nimport \\\"./ProxyRegistry.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @title ERC721TradableRandomMint\\r\\n * ERC721TradableRandomMint - ERC721 contract that whitelists a trading address, and has minting functionality.\\r\\n * and also has random minting functionality (VRAgent/VRPunk addition)\\r\\n */\\r\\nabstract contract ERC721TradableRandomMint is ContextMixin, ERC721Enumerable, NativeMetaTransaction, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    address proxyRegistryAddress;\\r\\n\\r\\n    string public baseURI;\\r\\n\\r\\n    /**\\r\\n     * @dev This is the mapping we randomly pick from. In case it is 0 it means use the index number instead.\\r\\n     *      when a token is picked we take the last index and move it to the front.\\r\\n     */\\r\\n    mapping (uint16 => uint16) tokenPickMapping;\\r\\n    uint16 tokensAvailable = 10000;\\r\\n\\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        address _proxyRegistryAddress\\r\\n    ) ERC721(_name, _symbol) {\\r\\n        proxyRegistryAddress = _proxyRegistryAddress;\\r\\n        _initializeEIP712(_name);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev generates a random uint16 number based on block info\\r\\n     */\\r\\n    function randomUint16() internal view returns (uint16) {\\r\\n        bytes32 randomHash = keccak256(\\r\\n            abi.encode(\\r\\n                block.timestamp,\\r\\n                block.difficulty,\\r\\n                block.coinbase,\\r\\n                tx.origin\\r\\n            )\\r\\n        );\\r\\n        return uint16(uint256(randomHash) % (type(uint16).max));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints a random token to an address with a tokenURI.\\r\\n     * @param _to address of the future owner of the token\\r\\n     */\\r\\n    function mintTo(address _to) public onlyOwner {\\r\\n        require(tokensAvailable > 0, \\\"No more tokens available.\\\");\\r\\n        uint16 randomPick = randomUint16() % tokensAvailable;\\r\\n        uint16 pickedRandomToken = tokenPickMapping[randomPick];\\r\\n        if (pickedRandomToken == 0) {\\r\\n            pickedRandomToken = randomPick + 1;\\r\\n        }\\r\\n        \\r\\n        // Lets mint the randomly picked token:\\r\\n        uint16 newTokenId = pickedRandomToken - 1;\\r\\n        _mint(_to, newTokenId);\\r\\n        \\r\\n        // after successfully minting we can update the tokenPickMapping\\r\\n        tokensAvailable--;\\r\\n\\r\\n        uint16 lastToken = tokenPickMapping[tokensAvailable];\\r\\n        if (lastToken == 0) {\\r\\n            lastToken = tokensAvailable + 1;\\r\\n        }\\r\\n        tokenPickMapping[randomPick] = lastToken;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 _tokenId) override public view returns (string memory) {\\r\\n        return string(abi.encodePacked(baseURI, Strings.toString(_tokenId)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator)\\r\\n        override\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        // Whitelist OpenSea proxy contract for easy trading.\\r\\n        ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\\r\\n        if (address(proxyRegistry.proxies(owner)) == operator) {\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        return super.isApprovedForAll(owner, operator);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * This is used instead of msg.sender as transactions won't be sent by the original token owner, but by OpenSea.\\r\\n     */\\r\\n    function _msgSender()\\r\\n        internal\\r\\n        override\\r\\n        view\\r\\n        returns (address sender)\\r\\n    {\\r\\n        return ContextMixin.msgSender();\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/D/GIT/smart-contract-things/contracts/IFactoryERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * This is a generic factory contract that can be used to mint tokens. The configuration\\r\\n * for minting is specified by an _optionId, which can be used to delineate various\\r\\n * ways of minting.\\r\\n */\\r\\ninterface FactoryERC721 {\\r\\n    /**\\r\\n     * Returns the name of this factory.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * Returns the symbol for this factory.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * Number of options the factory supports.\\r\\n     */\\r\\n    function numOptions() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether the option ID can be minted. Can return false if the developer wishes to\\r\\n     * restrict a total supply per option ID (or overall).\\r\\n     */\\r\\n    function canMint(uint256 _optionId) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a URL specifying some metadata about the option. This metadata can be of the\\r\\n     * same structure as the ERC721 metadata.\\r\\n     */\\r\\n    function tokenURI(uint256 _optionId) external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * Indicates that this is a factory contract. Ideally would use EIP 165 supportsInterface()\\r\\n     */\\r\\n    function supportsFactoryInterface() external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Mints asset(s) in accordance to a specific address with a particular \\\"option\\\". This should be\\r\\n     * callable only by the contract owner or the owner's Wyvern Proxy (later universal login will solve this).\\r\\n     * Options should also be delineated 0 - (numOptions() - 1) for convenient indexing.\\r\\n     * @param _optionId the option id\\r\\n     * @param _toAddress address of the future owner of the asset(s)\\r\\n     */\\r\\n    function mint(uint256 _optionId, address _toAddress) external;\\r\\n}\"\r\n    },\r\n    \"/D/GIT/smart-contract-things/contracts/ProxyRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract OwnableDelegateProxy {}\\r\\n\\r\\ncontract ProxyRegistry {\\r\\n    mapping(address => OwnableDelegateProxy) public proxies;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/GIT/smart-contract-things/contracts/SecretAgentAcademy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"./IFactoryERC721.sol\\\";\\r\\nimport \\\"./AgentDsSecretRoom.sol\\\";\\r\\nimport \\\"./DuckOwnerProxy.sol\\\";\\r\\n\\r\\ncontract SecretAgentAcademy is FactoryERC721, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    using Strings for string;\\r\\n\\r\\n    event Transfer(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n\\r\\n    mapping(uint16 => bool) public mintsFromDuckIDs;\\r\\n\\r\\n    mapping(address => bool) public presaleWhitelist;\\r\\n\\r\\n    address public proxyRegistryAddress;\\r\\n    address public nftAddress;\\r\\n    address public duckOwnerProxyAdress;\\r\\n    string public baseURI;\\r\\n\\r\\n    uint256 public presaleTime = 0;\\r\\n    uint256 public presaleEndTime = 0;\\r\\n\\r\\n    uint256 MAX_SUPPLY = 10000;\\r\\n\\r\\n    uint256 NUM_OPTIONS = 3;\\r\\n    uint256 SINGLE_OPTION = 0;\\r\\n    uint256 MULTIPLE_OPTION_5 = 1;\\r\\n    uint256 MULTIPLE_OPTION_10 = 2;\\r\\n\\r\\n    modifier onlyPresaleWhitelisted() {\\r\\n        require(\\r\\n            presaleWhitelist[msg.sender],\\r\\n            \\\"You're not whitelisted for pre-sale.\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // left goto1 \\r\\n\\r\\n    constructor(address _proxyRegistryAddress, address _nftAddress, address _duckOwnerProxyAdress) {\\r\\n        proxyRegistryAddress = _proxyRegistryAddress;\\r\\n        nftAddress = _nftAddress;\\r\\n        duckOwnerProxyAdress = _duckOwnerProxyAdress;\\r\\n\\r\\n        fireTransferEvents(address(0), owner());\\r\\n    }\\r\\n\\r\\n    function name() override external pure returns (string memory) {\\r\\n        return \\\"Secret Agent Academy\\\";\\r\\n    }\\r\\n\\r\\n    function symbol() override external pure returns (string memory) {\\r\\n        return \\\"SAA\\\";\\r\\n    }\\r\\n\\r\\n    function supportsFactoryInterface() override public pure returns (bool) {\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function numOptions() override public view returns (uint256) {\\r\\n        return NUM_OPTIONS;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) override public onlyOwner {\\r\\n        address _prevOwner = owner();\\r\\n        super.transferOwnership(newOwner);\\r\\n        fireTransferEvents(_prevOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    function fireTransferEvents(address _from, address _to) private {\\r\\n        for (uint256 i = 0; i < NUM_OPTIONS; i++) {\\r\\n            emit Transfer(_from, _to, i);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setPresaleTimes(\\r\\n        uint256 _presaleTime,\\r\\n        uint256 _presaleEndTime\\r\\n    ) external onlyOwner {\\r\\n        presaleTime = _presaleTime;\\r\\n        presaleEndTime = _presaleEndTime;\\r\\n    }\\r\\n\\r\\n    function presale(uint256 _amount) external payable onlyPresaleWhitelisted {\\r\\n        require(\\r\\n            block.timestamp >= presaleTime && block.timestamp < presaleEndTime,\\r\\n            \\\"No presale going on at the moment.\\\"\\r\\n        );\\r\\n        AgentDsSecretRoom nft = AgentDsSecretRoom(nftAddress);\\r\\n        address toAddress = _msgSender();\\r\\n        require(\\r\\n            (_amount + nft.balanceOf(toAddress)) <= 5,\\r\\n            \\\"Up to 5 NFTs can be purchased in the presale.\\\"\\r\\n        );\\r\\n        require(\\r\\n            msg.value == uint256(_amount) * 0.045 ether,\\r\\n            \\\"You need to pay the exact price.\\\"\\r\\n        );\\r\\n        uint256 totalSupply = nft.totalSupply();\\r\\n        require(totalSupply <= (MAX_SUPPLY - _amount), \\\"Not enough NFTs in stock\\\");\\r\\n        for (\\r\\n            uint256 i = 0;\\r\\n            i < _amount;\\r\\n            i++\\r\\n        ) {\\r\\n            nft.mintTo(toAddress);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function mintFromDuck(uint16 _duckID) external {\\r\\n        require(!mintsFromDuckIDs[_duckID], \\\"Already minted from this duck\\\");\\r\\n        DuckOwnerProxy duckOwnerProxy = DuckOwnerProxy(duckOwnerProxyAdress);\\r\\n        require(duckOwnerProxy.checkIfDuckOwner(_duckID), \\\"You should own this duck in order to use it.\\\");\\r\\n        AgentDsSecretRoom nft = AgentDsSecretRoom(nftAddress);\\r\\n        address toAddress = _msgSender();\\r\\n        uint256 totalSupply = nft.totalSupply();\\r\\n        require(totalSupply <= (MAX_SUPPLY - 1), \\\"Not enough NFTs in stock\\\");\\r\\n        nft.mintTo(toAddress);\\r\\n        mintsFromDuckIDs[_duckID] = true;\\r\\n    }\\r\\n\\r\\n    function mint(uint256 _optionId, address _toAddress) override public {\\r\\n        // Must be sent from the owner proxy or owner.\\r\\n        ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\\r\\n        assert(\\r\\n            address(proxyRegistry.proxies(owner())) == _msgSender() ||\\r\\n                owner() == _msgSender()\\r\\n        );\\r\\n        require(canMint(_optionId));\\r\\n\\r\\n        AgentDsSecretRoom nft = AgentDsSecretRoom(nftAddress);\\r\\n        uint256 numberToMint = 0;\\r\\n        if (_optionId == SINGLE_OPTION) {\\r\\n            numberToMint = 1;\\r\\n        } else if (_optionId == MULTIPLE_OPTION_5) {\\r\\n            numberToMint = 5;\\r\\n        } else if (_optionId == MULTIPLE_OPTION_10) {\\r\\n            numberToMint = 10;\\r\\n        }\\r\\n\\r\\n        require(_toAddress == owner() || (nft.balanceOf(_toAddress) + numberToMint) <= 15, \\\"Only up to 15 NFT per owner\\\" );\\r\\n\\r\\n        for (\\r\\n            uint256 i = 0;\\r\\n            i < numberToMint;\\r\\n            i++\\r\\n        ) {\\r\\n            nft.mintTo(_toAddress);\\r\\n        }\\r\\n   } \\r\\n\\r\\n    function canMint(uint256 _optionId) override public view returns (bool) {\\r\\n        if (_optionId >= NUM_OPTIONS) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        AgentDsSecretRoom nft = AgentDsSecretRoom(nftAddress);\\r\\n        uint256 totalSupply = nft.totalSupply();\\r\\n\\r\\n        uint256 numItemsAllocated = 0;\\r\\n        if (_optionId == SINGLE_OPTION) {\\r\\n            numItemsAllocated = 1;\\r\\n        } else if (_optionId == MULTIPLE_OPTION_5) {\\r\\n            numItemsAllocated = 5;\\r\\n        } else if (_optionId == MULTIPLE_OPTION_10) {\\r\\n            numItemsAllocated = 10;\\r\\n        }\\r\\n        return totalSupply <= (MAX_SUPPLY - numItemsAllocated);\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 _optionId) override external view returns (string memory) {\\r\\n        return string(abi.encodePacked(baseURI, Strings.toString(_optionId)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Hack to get things to work automatically on OpenSea.\\r\\n     * Use transferFrom so the frontend doesn't have to worry about different method names.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address /* _from */,\\r\\n        address _to,\\r\\n        uint256 _tokenId\\r\\n    ) public {\\r\\n        mint(_tokenId, _to);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Hack to get things to work automatically on OpenSea.\\r\\n     * Use isApprovedForAll so the frontend doesn't have to worry about different method names.\\r\\n     */\\r\\n    function isApprovedForAll(address _owner, address _operator)\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        if (owner() == _owner && _owner == _operator) {\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\\r\\n        if (\\r\\n            owner() == _owner &&\\r\\n            address(proxyRegistry.proxies(_owner)) == _operator\\r\\n        ) {\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function withdraw() external onlyOwner {\\r\\n        require(address(this).balance > 0, \\\"You just wasted gas on trying to withdraw nada...\\\");\\r\\n        payable(owner()).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Hack to get things to work automatically on OpenSea.\\r\\n     * Use isApprovedForAll so the frontend doesn't have to worry about different method names.\\r\\n     */\\r\\n    function ownerOf(uint256 /*_tokenId*/) public view returns (address _owner) {\\r\\n        return owner();\\r\\n    }\\r\\n\\r\\n    function setBaseUri(string memory uri) public onlyOwner {\\r\\n        baseURI = uri;\\r\\n    }\\r\\n\\r\\n    function addAddressesToPresaleWhitelist(address[] memory addrs) public onlyOwner {\\r\\n        for (uint256 i = 0; i < addrs.length; i++) {\\r\\n            presaleWhitelist[addrs[i]] = true;\\r\\n        }\\r\\n    }\\r\\n    // We got taken!\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/GIT/smart-contract-things/contracts/common/meta-transactions/ContentMixin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract ContextMixin {\\r\\n    function msgSender()\\r\\n        internal\\r\\n        view\\r\\n        returns (address payable sender)\\r\\n    {\\r\\n        if (msg.sender == address(this)) {\\r\\n            bytes memory array = msg.data;\\r\\n            uint256 index = msg.data.length;\\r\\n            assembly {\\r\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\r\\n                sender := and(\\r\\n                    mload(add(array, index)),\\r\\n                    0xffffffffffffffffffffffffffffffffffffffff\\r\\n                )\\r\\n            }\\r\\n        } else {\\r\\n            sender = payable(msg.sender);\\r\\n        }\\r\\n        return sender;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/D/GIT/smart-contract-things/contracts/common/meta-transactions/EIP712Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\r\\n\\r\\ncontract EIP712Base is Initializable {\\r\\n    struct EIP712Domain {\\r\\n        string name;\\r\\n        string version;\\r\\n        address verifyingContract;\\r\\n        bytes32 salt;\\r\\n    }\\r\\n\\r\\n    string constant public ERC712_VERSION = \\\"1\\\";\\r\\n\\r\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\\r\\n        bytes(\\r\\n            \\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\"\\r\\n        )\\r\\n    );\\r\\n    bytes32 internal domainSeperator;\\r\\n\\r\\n    // supposed to be called once while initializing.\\r\\n    // one of the contracts that inherits this contract follows proxy pattern\\r\\n    // so it is not possible to do this in a constructor\\r\\n    function _initializeEIP712(\\r\\n        string memory name\\r\\n    )\\r\\n        internal\\r\\n        initializer\\r\\n    {\\r\\n        _setDomainSeperator(name);\\r\\n    }\\r\\n\\r\\n    function _setDomainSeperator(string memory name) internal {\\r\\n        domainSeperator = keccak256(\\r\\n            abi.encode(\\r\\n                EIP712_DOMAIN_TYPEHASH,\\r\\n                keccak256(bytes(name)),\\r\\n                keccak256(bytes(ERC712_VERSION)),\\r\\n                address(this),\\r\\n                bytes32(getChainId())\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getDomainSeperator() public view returns (bytes32) {\\r\\n        return domainSeperator;\\r\\n    }\\r\\n\\r\\n    function getChainId() public view returns (uint256) {\\r\\n        uint256 id;\\r\\n        assembly {\\r\\n            id := chainid()\\r\\n        }\\r\\n        return id;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Accept message hash and returns hash message in EIP712 compatible form\\r\\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\\r\\n     * https://eips.ethereum.org/EIPS/eip-712\\r\\n     * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\r\\n     * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\r\\n     */\\r\\n    function toTypedMessageHash(bytes32 messageHash)\\r\\n        internal\\r\\n        view\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeperator(), messageHash)\\r\\n            );\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/D/GIT/smart-contract-things/contracts/common/meta-transactions/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract Initializable {\\r\\n    bool inited = false;\\r\\n\\r\\n    modifier initializer() {\\r\\n        require(!inited, \\\"already inited\\\");\\r\\n        _;\\r\\n        inited = true;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/D/GIT/smart-contract-things/contracts/common/meta-transactions/NativeMetaTransaction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {SafeMath} from  \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport {EIP712Base} from \\\"./EIP712Base.sol\\\";\\r\\n\\r\\ncontract NativeMetaTransaction is EIP712Base {\\r\\n    using SafeMath for uint256;\\r\\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(\\r\\n        bytes(\\r\\n            \\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"\\r\\n        )\\r\\n    );\\r\\n    event MetaTransactionExecuted(\\r\\n        address userAddress,\\r\\n        address payable relayerAddress,\\r\\n        bytes functionSignature\\r\\n    );\\r\\n    mapping(address => uint256) nonces;\\r\\n\\r\\n    /*\\r\\n     * Meta transaction structure.\\r\\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\r\\n     * He should call the desired function directly in that case.\\r\\n     */\\r\\n    struct MetaTransaction {\\r\\n        uint256 nonce;\\r\\n        address from;\\r\\n        bytes functionSignature;\\r\\n    }\\r\\n\\r\\n    function executeMetaTransaction(\\r\\n        address userAddress,\\r\\n        bytes memory functionSignature,\\r\\n        bytes32 sigR,\\r\\n        bytes32 sigS,\\r\\n        uint8 sigV\\r\\n    ) public payable returns (bytes memory) {\\r\\n        MetaTransaction memory metaTx = MetaTransaction({\\r\\n            nonce: nonces[userAddress],\\r\\n            from: userAddress,\\r\\n            functionSignature: functionSignature\\r\\n        });\\r\\n\\r\\n        require(\\r\\n            verify(userAddress, metaTx, sigR, sigS, sigV),\\r\\n            \\\"Signer and signature do not match\\\"\\r\\n        );\\r\\n\\r\\n        // increase nonce for user (to avoid re-use)\\r\\n        nonces[userAddress] = nonces[userAddress].add(1);\\r\\n\\r\\n        emit MetaTransactionExecuted(\\r\\n            userAddress,\\r\\n            payable(msg.sender),\\r\\n            functionSignature\\r\\n        );\\r\\n\\r\\n        // Append userAddress and relayer address at the end to extract it from calling context\\r\\n        (bool success, bytes memory returnData) = address(this).call(\\r\\n            abi.encodePacked(functionSignature, userAddress)\\r\\n        );\\r\\n        require(success, \\\"Function call not successful\\\");\\r\\n\\r\\n        return returnData;\\r\\n    }\\r\\n\\r\\n    function hashMetaTransaction(MetaTransaction memory metaTx)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    META_TRANSACTION_TYPEHASH,\\r\\n                    metaTx.nonce,\\r\\n                    metaTx.from,\\r\\n                    keccak256(metaTx.functionSignature)\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getNonce(address user) public view returns (uint256 nonce) {\\r\\n        nonce = nonces[user];\\r\\n    }\\r\\n\\r\\n    function verify(\\r\\n        address signer,\\r\\n        MetaTransaction memory metaTx,\\r\\n        bytes32 sigR,\\r\\n        bytes32 sigS,\\r\\n        uint8 sigV\\r\\n    ) internal view returns (bool) {\\r\\n        require(signer != address(0), \\\"NativeMetaTransaction: INVALID_SIGNER\\\");\\r\\n        return\\r\\n            signer ==\\r\\n            ecrecover(\\r\\n                toTypedMessageHash(hashMetaTransaction(metaTx)),\\r\\n                sigV,\\r\\n                sigR,\\r\\n                sigS\\r\\n            );\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_duckOwnerProxyAdress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"addAddressesToPresaleWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"}],\"name\":\"canMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duckOwnerProxyAdress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_duckID\",\"type\":\"uint16\"}],\"name\":\"mintFromDuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"mintsFromDuckIDs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numOptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"presale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"presaleWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_presaleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_presaleEndTime\",\"type\":\"uint256\"}],\"name\":\"setPresaleTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportsFactoryInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SecretAgentAcademy","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000a5409ec958c83c3f309868babaca7c86dcb077c10000000000000000000000007006f401923f5753c53c11ac95bca98db8e190610000000000000000000000001faddf0fbfb789cf70b32d28bbd8c04566fd0a95","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}