{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/dev82/Documents/Deployment/BlindBox ETH/contracts/Proxy/BlindboxProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1538.sol\\\";\\nimport \\\"./ProxyBaseStorage.sol\\\";\\nimport './BlindboxStorage.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\n///////////////////////////////////////////////////////////////////////////////////////////////////\\n/**\\n * @title ProxyReceiver Contract\\n * @dev Handles forwarding calls to receiver delegates while offering transparency of updates.\\n *      Follows ERC-1538 standard.\\n *\\n *    NOTE: Not recommended for direct use in a production contract, as no security control.\\n *          Provided as simple example only.\\n */\\n///////////////////////////////////////////////////////////////////////////////////////////////////\\n\\ncontract BlindboxProxy is ProxyBaseStorage, IERC1538,  BlindboxStorage, Ownable {\\n\\n\\n    constructor() public {\\n\\n        proxy = address(this);\\n\\n        //Adding ERC1538 updateContract function\\n        bytes memory signature = \\\"updateContract(address,string,string)\\\";\\n        bytes4 funcId = bytes4(keccak256(signature));\\n        delegates[funcId] = proxy;\\n        funcSignatures.push(signature);\\n        funcSignatureToIndex[signature] = funcSignatures.length;\\n        emit FunctionUpdate(funcId, address(0), proxy, string(signature));\\n        emit CommitMessage(\\\"Added ERC1538 updateContract function at contract creation\\\");\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    fallback() external payable {\\n        if (msg.sig == bytes4(0) && msg.value != uint(0)) { // skipping ethers/BNB received to delegate\\n            return;\\n        }\\n        address delegate = delegates[msg.sig];\\n        require(delegate != address(0), \\\"Function does not exist.\\\");\\n        assembly {\\n            let ptr := mload(0x40)\\n            calldatacopy(ptr, 0, calldatasize())\\n            let result := delegatecall(gas(), delegate, ptr, calldatasize(), 0, 0)\\n            let size := returndatasize()\\n            returndatacopy(ptr, 0, size)\\n            switch result\\n            case 0 {revert(ptr, size)}\\n            default {return (ptr, size)}\\n        }\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    /// @notice Updates functions in a transparent contract.\\n    /// @dev If the value of _delegate is zero then the functions specified\\n    ///  in _functionSignatures are removed.\\n    ///  If the value of _delegate is a delegate contract address then the functions\\n    ///  specified in _functionSignatures will be delegated to that address.\\n    /// @param _delegate The address of a delegate contract to delegate to or zero\\n    /// @param _functionSignatures A list of function signatures listed one after the other\\n    /// @param _commitMessage A short description of the change and why it is made\\n    ///        This message is passed to the CommitMessage event.\\n    function updateContract(address _delegate, string calldata _functionSignatures, string calldata _commitMessage) override onlyOwner external {\\n        // pos is first used to check the size of the delegate contract.\\n        // After that pos is the current memory location of _functionSignatures.\\n        // It is used to move through the characters of _functionSignatures\\n        uint256 pos;\\n        if(_delegate != address(0)) {\\n            assembly {\\n                pos := extcodesize(_delegate)\\n            }\\n            require(pos > 0, \\\"_delegate address is not a contract and is not address(0)\\\");\\n        }\\n\\n        // creates a bytes version of _functionSignatures\\n        bytes memory signatures = bytes(_functionSignatures);\\n        // stores the position in memory where _functionSignatures ends.\\n        uint256 signaturesEnd;\\n        // stores the starting position of a function signature in _functionSignatures\\n        uint256 start;\\n        assembly {\\n            pos := add(signatures,32)\\n            start := pos\\n            signaturesEnd := add(pos,mload(signatures))\\n        }\\n        // the function id of the current function signature\\n        bytes4 funcId;\\n        // the delegate address that is being replaced or address(0) if removing functions\\n        address oldDelegate;\\n        // the length of the current function signature in _functionSignatures\\n        uint256 num;\\n        // the current character in _functionSignatures\\n        uint256 char;\\n        // the position of the current function signature in the funcSignatures array\\n        uint256 index;\\n        // the last position in the funcSignatures array\\n        uint256 lastIndex;\\n        // parse the _functionSignatures string and handle each function\\n        for (; pos < signaturesEnd; pos++) {\\n            assembly {char := byte(0,mload(pos))}\\n            // 0x29 == )\\n            if (char == 0x29) {\\n                pos++;\\n                num = (pos - start);\\n                start = pos;\\n                assembly {\\n                    mstore(signatures,num)\\n                }\\n                funcId = bytes4(keccak256(signatures));\\n                oldDelegate = delegates[funcId];\\n                if(_delegate == address(0)) {\\n                    index = funcSignatureToIndex[signatures];\\n                    require(index != 0, \\\"Function does not exist.\\\");\\n                    index--;\\n                    lastIndex = funcSignatures.length - 1;\\n                    if (index != lastIndex) {\\n                        funcSignatures[index] = funcSignatures[lastIndex];\\n                        funcSignatureToIndex[funcSignatures[lastIndex]] = index + 1;\\n                    }\\n                    funcSignatures.pop();\\n                    delete funcSignatureToIndex[signatures];\\n                    delete delegates[funcId];\\n                    emit FunctionUpdate(funcId, oldDelegate, address(0), string(signatures));\\n                }\\n                else if (funcSignatureToIndex[signatures] == 0) {\\n                    require(oldDelegate == address(0), \\\"FuncId clash.\\\");\\n                    delegates[funcId] = _delegate;\\n                    funcSignatures.push(signatures);\\n                    funcSignatureToIndex[signatures] = funcSignatures.length;\\n                    emit FunctionUpdate(funcId, address(0), _delegate, string(signatures));\\n                }\\n                else if (delegates[funcId] != _delegate) {\\n                    delegates[funcId] = _delegate;\\n                    emit FunctionUpdate(funcId, oldDelegate, _delegate, string(signatures));\\n\\n                }\\n                assembly {signatures := add(signatures,num)}\\n            }\\n        }\\n        emit CommitMessage(_commitMessage);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////////////////////////\\n\\n}\\n\\n///////////////////////////////////////////////////////////////////////////////////////////////////\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dev82/Documents/Deployment/BlindBox ETH/contracts/VRF/IRand.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\ninterface IRand {\\n    function getRandomNumber() external returns (bytes32 requestId);\\n    function getRandomVal() external view returns (uint256); \\n\\n}\"\r\n    },\r\n    \"/home/dev82/Documents/Deployment/BlindBox ETH/contracts/Proxy/ProxyBaseStorage.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\n///////////////////////////////////////////////////////////////////////////////////////////////////\\n/**\\n * @title ProxyBaseStorage\\n * @dev Defining base storage for the proxy contract.\\n */\\n///////////////////////////////////////////////////////////////////////////////////////////////////\\n\\ncontract ProxyBaseStorage {\\n\\n    //////////////////////////////////////////// VARS /////////////////////////////////////////////\\n\\n    // maps functions to the delegate contracts that execute the functions.\\n    // funcId => delegate contract\\n    mapping(bytes4 => address) public delegates;\\n\\n    // array of function signatures supported by the contract.\\n    bytes[] public funcSignatures;\\n\\n    // maps each function signature to its position in the funcSignatures array.\\n    // signature => index+1\\n    mapping(bytes => uint256) internal funcSignatureToIndex;\\n\\n    // proxy address of itself, can be used for cross-delegate calls but also safety checking.\\n    address proxy;\\n\\n    ///////////////////////////////////////////////////////////////////////////////////////////////\\n\\n}\"\r\n    },\r\n    \"/home/dev82/Documents/Deployment/BlindBox ETH/contracts/Proxy/IERC1538.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\n/// @title ERC1538 Transparent Contract Standard\\n/// @dev Required interface\\n///  Note: the ERC-165 identifier for this interface is 0x61455567\\ninterface IERC1538 {\\n\\n    /// @dev This emits when one or a set of functions are updated in a transparent contract.\\n    ///  The message string should give a short description of the change and why\\n    ///  the change was made.\\n    event CommitMessage(string message);\\n\\n    /// @dev This emits for each function that is updated in a transparent contract.\\n    ///  functionId is the bytes4 of the keccak256 of the function signature.\\n    ///  oldDelegate is the delegate contract address of the old delegate contract if\\n    ///  the function is being replaced or removed.\\n    ///  oldDelegate is the zero value address(0) if a function is being added for the\\n    ///  first time.\\n    ///  newDelegate is the delegate contract address of the new delegate contract if\\n    ///  the function is being added for the first time or if the function is being\\n    ///  replaced.\\n    ///  newDelegate is the zero value address(0) if the function is being removed.\\n    event FunctionUpdate(bytes4 indexed functionId, address indexed oldDelegate, address indexed newDelegate, string functionSignature);\\n\\n    /// @notice Updates functions in a transparent contract.\\n    /// @dev If the value of _delegate is zero then the functions specified\\n    ///  in _functionSignatures are removed.\\n    ///  If the value of _delegate is a delegate contract address then the functions\\n    ///  specified in _functionSignatures will be delegated to that address.\\n    /// @param _delegate The address of a delegate contract to delegate to or zero\\n    ///        to remove functions.\\n    /// @param _functionSignatures A list of function signatures listed one after the other\\n    /// @param _commitMessage A short description of the change and why it is made\\n    ///        This message is passed to the CommitMessage event.\\n    function updateContract(address _delegate, string calldata _functionSignatures, string calldata _commitMessage) external;\\n}\"\r\n    },\r\n    \"/home/dev82/Documents/Deployment/BlindBox ETH/contracts/Proxy/BlindboxStorage.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\n\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '../IERC20.sol';\\nimport '../VRF/IRand.sol';\\nimport '../INFT.sol';\\nimport '../IDEX.sol';\\n\\n///////////////////////////////////////////////////////////////////////////////////////////////////\\n/**\\n * @title DexStorage\\n * @dev Defining dex storage for the proxy contract.\\n */\\n///////////////////////////////////////////////////////////////////////////////////////////////////\\n\\ncontract BlindboxStorage {\\n using Counters for Counters.Counter;\\n    using SafeMath for uint256;\\n\\n    address a;\\n    address b;\\n    address c;\\n\\n    IRand vrf;\\n    IERC20 ALIA;\\n    IERC20 ETH;\\n    IERC20 USD;\\n    IERC20 MATIC;\\n    INFT nft;\\n    IDEX dex;\\n    address platform;\\n    IERC20 internal token;\\n    \\n    Counters.Counter internal _boxId;\\n\\n Counters.Counter public generativeSeriesId;\\n\\n    struct Attribute {\\n        string name;\\n        string uri;\\n        uint256 rarity;\\n    }\\n\\n    struct GenerativeBox {\\n        string name;\\n        string boxURI;\\n        uint256 series; // to track start end Time\\n        uint256 countNFTs;\\n        // uint256[] attributes;\\n        // uint256 attributesRarity;\\n        bool isOpened;\\n    }\\n\\n    struct GenSeries {\\n        string name;\\n        string seriesURI;\\n        string boxName;\\n        string boxURI;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 maxBoxes;\\n        uint256 perBoxNftMint;\\n        uint256 price; // in ALIA\\n        Counters.Counter boxId; // to track series's boxId (upto minted so far)\\n        Counters.Counter attrType; // attribute Type IDs\\n        Counters.Counter attrId; // attribute's ID\\n        // attributeType => attributeId => Attribute\\n        mapping ( uint256 => mapping( uint256 => Attribute)) attributes;\\n        // attributes combination hash => flag\\n        mapping ( bytes32 => bool) blackList;\\n    }\\n\\n    struct NFT {\\n        // attrType => attrId\\n        mapping (uint256 => uint256) attribute;\\n    }\\n\\n    // seriesId => Series\\n    mapping ( uint256 => GenSeries) public genSeries;\\n   mapping ( uint256 => uint256) public genseriesRoyalty;\\n    mapping ( uint256 => uint256[]) _allowedCurrenciesGen;\\n    mapping ( uint256 => address) public bankAddressGen;\\n    mapping ( uint256 => uint256) public baseCurrencyGen;\\n    mapping (uint256=>address) public genCollection;\\n    // boxId => attributeType => attributeId => Attribute\\n    // mapping( uint256 => mapping ( uint256 => mapping( uint256 => Attribute))) public attributes;\\n    // boxId => Box\\n    mapping ( uint256 => GenerativeBox) public boxesGen;\\n    // attributes combination => flag\\n    // mapping ( bytes => bool) public blackList;\\n    // boxId => boxOpener => array of combinations to be minted\\n    // mapping ( uint256 => mapping ( address => bytes[] )) public nftToMint;\\n    // boxId => owner\\n    mapping ( uint256 => address ) public genBoxOwner;\\n    // boxId => NFT index => attrType => attribute\\n    mapping (uint256 => mapping( uint256 => mapping (uint256 => uint256))) public nftsToMint;\\n  \\n\\n    Counters.Counter public nonGenerativeSeriesId;\\n    // mapping(address => Counters.Counter) public nonGenerativeSeriesIdByAddress;\\n    struct URI {\\n        string name;\\n        string uri;\\n        uint256 rarity;\\n        uint256 copies;\\n    }\\n\\n    struct NonGenerativeBox {\\n        string name;\\n        string boxURI;\\n        uint256 series; // to track start end Time\\n        uint256 countNFTs;\\n        // uint256[] attributes;\\n        // uint256 attributesRarity;\\n        bool isOpened;\\n    }\\n\\n    struct NonGenSeries {\\n        address collection;\\n        string name;\\n        string seriesURI;\\n        string boxName;\\n        string boxURI;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 maxBoxes;\\n        uint256 perBoxNftMint;\\n        uint256 price; \\n        Counters.Counter boxId; // to track series's boxId (upto minted so far)\\n        Counters.Counter attrId; \\n        // uriId => URI \\n        mapping ( uint256 => URI) uris;\\n    }\\n\\n    struct IDs {\\n        Counters.Counter attrType;\\n        Counters.Counter attrId;\\n    }\\n\\n    struct CopiesData{\\n        \\n        uint256 total;\\n        mapping(uint256 => uint256) nftCopies;\\n    }\\n    mapping (uint256 => CopiesData) public _CopiesData;\\n    \\n    // seriesId => NonGenSeries\\n    mapping ( uint256 => NonGenSeries) public nonGenSeries;\\n\\n   mapping ( uint256 => uint256[]) _allowedCurrencies;\\n   mapping ( uint256 => address) public bankAddress;\\n   mapping ( uint256 => uint256) public nonGenseriesRoyalty;\\n   mapping ( uint256 => uint256) public baseCurrency;\\n    // boxId => IDs\\n    // mapping (uint256 => IDs) boxIds;\\n    // boxId => attributeType => attributeId => Attribute\\n    // mapping( uint256 => mapping ( uint256 => mapping( uint256 => Attribute))) public attributes;\\n    // boxId => Box\\n    mapping ( uint256 => NonGenerativeBox) public boxesNonGen;\\n    // attributes combination => flag\\n    // mapping ( bytes => bool) public blackList;\\n    // boxId => boxOpener => array of combinations to be minted\\n    // mapping ( uint256 => mapping ( address => bytes[] )) public nftToMint;\\n    // boxId => owner\\n    mapping ( uint256 => address ) public nonGenBoxOwner;\\n    // boxId => NFT index => attrType => attribute\\n    // mapping (uint256 => mapping( uint256 => mapping (uint256 => uint256))) public nfts;\\n    mapping(address => mapping(bool => uint256[])) seriesIdsByCollection;\\n    uint256 deployTime;\\n}\"\r\n    },\r\n    \"/home/dev82/Documents/Deployment/BlindBox ETH/contracts/INFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\ninterface INFT {\\n    function mintWithTokenURI(address to, string calldata tokenURI) external returns (uint256);\\n    function transferFrom(address owner, address to, uint256 tokenId) external;\\n}\"\r\n    },\r\n    \"/home/dev82/Documents/Deployment/BlindBox ETH/contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n     function withdraw(uint) external;\\n    function deposit() payable external;\\n}\\n\"\r\n    },\r\n    \"/home/dev82/Documents/Deployment/BlindBox ETH/contracts/IDEX.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\ninterface IDEX {\\n   function calculatePrice(uint256 _price, uint256 base, uint256 currencyType, uint256 tokenId, address seller, address nft_a) external view returns(uint256);\\n   function mintWithCollection(address collection, address to, string memory tokesnURI, uint256 royalty ) external returns(uint256);\\n   function createCollection(string calldata name_, string calldata symbol_) external;\\n   function transferCollectionOwnership(address collection, address newOwner) external;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"CommitMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"functionId\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDelegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"functionSignature\",\"type\":\"string\"}],\"name\":\"FunctionUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_CopiesData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bankAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bankAddressGen\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"baseCurrency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"baseCurrencyGen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boxesGen\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"boxURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"series\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countNFTs\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpened\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boxesNonGen\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"boxURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"series\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countNFTs\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpened\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funcSignatures\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"genBoxOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"genCollection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"genSeries\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"seriesURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"boxName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"boxURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBoxes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perBoxNftMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"internalType\":\"struct Counters.Counter\",\"name\":\"boxId\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"internalType\":\"struct Counters.Counter\",\"name\":\"attrType\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"internalType\":\"struct Counters.Counter\",\"name\":\"attrId\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generativeSeriesId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"genseriesRoyalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftsToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonGenBoxOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonGenSeries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"seriesURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"boxName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"boxURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBoxes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perBoxNftMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"internalType\":\"struct Counters.Counter\",\"name\":\"boxId\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"internalType\":\"struct Counters.Counter\",\"name\":\"attrId\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonGenerativeSeriesId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonGenseriesRoyalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_functionSignatures\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_commitMessage\",\"type\":\"string\"}],\"name\":\"updateContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BlindboxProxy","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}