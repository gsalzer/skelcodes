{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/IERC721Transfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC721Transfer {\\n  function transferFrom(address from, address to, uint256 tokenId) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/MonsterMarket.sol\": {\r\n      \"content\": \"/*\\n  __  __  ____  _   _  _____ _______ ______ _____\\n |  \\\\/  |/ __ \\\\| \\\\ | |/ ____|__   __|  ____|  __ \\\\\\n | \\\\  / | |  | |  \\\\| | (___    | |  | |__  | |__) |\\n | |\\\\/| | |  | | . ` |\\\\___ \\\\   | |  |  __| |  _  /\\n | |  | | |__| | |\\\\  |____) |  | |  | |____| | \\\\ \\\\\\n |_|  |_|\\\\____/|_| \\\\_|_____/   |_|  |______|_|  \\\\_\\\\\\n\\n     __  __          _____  _  ________ _______\\n    |  \\\\/  |   /\\\\   |  __ \\\\| |/ /  ____|__   __|\\n    | \\\\  / |  /  \\\\  | |__) | ' /| |__     | |\\n    | |\\\\/| | / /\\\\ \\\\ |  _  /|  < |  __|    | |\\n    | |  | |/ ____ \\\\| | \\\\ \\\\| . \\\\| |____   | |\\n    |_|  |_/_/    \\\\_\\\\_|  \\\\_\\\\_|\\\\_\\\\______|  |_|\\n\\n\\n               Contract written by:\\n     ____       _          _     _           _\\n    / __ \\\\  ___| |__  _ __(_)___| |__   ___ | |\\n   / / _` |/ __| '_ \\\\| '__| / __| '_ \\\\ / _ \\\\| |\\n  | | (_| | (__| | | | |  | \\\\__ \\\\ | | | (_) | |\\n   \\\\ \\\\__,_|\\\\___|_| |_|_|  |_|___/_| |_|\\\\___/|_|\\n    \\\\____/\\n\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IERC721Transfer.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract MonsterMarket is ReentrancyGuard {\\n  IERC721Transfer public monsterBlocks = IERC721Transfer(0xa56a4f2b9807311AC401c6afBa695D3B0C31079d);\\n\\n  /* Balance Functions */\\n\\n  mapping (address => uint256) private _balances;\\n\\n  function balanceOf(address _owner) public view virtual returns (uint256) {\\n    require(_owner != address(0), \\\"Balance query for the zero address\\\");\\n    return _balances[_owner];\\n  }\\n\\n  function transferBalance(address _to) public nonReentrant {\\n    require(msg.sender != _to, \\\"No transfer required\\\");\\n\\n    uint256 balanceToTransfer = _balances[msg.sender];\\n    require(balanceToTransfer > 0, \\\"No balance to transfer\\\");\\n\\n    _balances[msg.sender] = 0;\\n    _balances[_to] = balanceToTransfer;\\n  }\\n\\n  /* Deposit and Redemption Functions */\\n\\n  uint256 public maxTransactionSize = 10;\\n\\n  function depositOne(uint256 _tokenId) public {\\n    monsterBlocks.transferFrom(msg.sender, address(this), _tokenId);\\n    _balances[msg.sender] += 1;\\n  }\\n\\n  function depositMany(uint256[] memory _tokenIds) public {\\n    require(_tokenIds.length <= maxTransactionSize);\\n    _deposit(_tokenIds);\\n  }\\n\\n  function redeemOne(uint256 _tokenId) public nonReentrant {\\n    require(_balances[msg.sender] > 0);\\n    _balances[msg.sender] -= 1;\\n    monsterBlocks.transferFrom(address(this), msg.sender, _tokenId);\\n  }\\n\\n  function redeemMany(uint256[] memory _tokenIds) public nonReentrant {\\n    require(_tokenIds.length <= maxTransactionSize);\\n    _redeem(_tokenIds);\\n  }\\n\\n  function depositAndRedeemOne(uint256 _depositTokenId, uint256 _redeemTokenId) public nonReentrant {\\n    monsterBlocks.transferFrom(msg.sender, address(this), _depositTokenId);\\n    monsterBlocks.transferFrom(address(this), msg.sender, _redeemTokenId);\\n  }\\n\\n  function depositAndRedeemMany(uint256[] memory _depositTokenIds, uint256[] memory _redeemTokenIds) public nonReentrant {\\n    require(_depositTokenIds.length <= maxTransactionSize);\\n    require(_depositTokenIds.length == _redeemTokenIds.length);\\n\\n    __deposit(_depositTokenIds);\\n    __redeem(_redeemTokenIds);\\n  }\\n\\n  /* Internal Helper Functions */\\n\\n  function _deposit(uint256[] memory _tokenIds) internal {\\n    __deposit(_tokenIds);\\n\\n    _balances[msg.sender] += _tokenIds.length;\\n  }\\n\\n  function _redeem(uint256[] memory _tokenIds) internal {\\n    require(_balances[msg.sender] >= _tokenIds.length);\\n\\n    _balances[msg.sender] -= _tokenIds.length;\\n\\n    __redeem(_tokenIds);\\n  }\\n\\n  function __deposit(uint256[] memory _tokenIds) internal {\\n    for (uint256 i = 0; i < _tokenIds.length; i++) {\\n      monsterBlocks.transferFrom(msg.sender, address(this), _tokenIds[i]);\\n    }\\n  }\\n\\n  function __redeem(uint256[] memory _tokenIds) internal {\\n    for (uint256 i = 0; i < _tokenIds.length; i++) {\\n      monsterBlocks.transferFrom(address(this), msg.sender, _tokenIds[i]);\\n    }\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"petersburg\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_depositTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_redeemTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"depositAndRedeemMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_redeemTokenId\",\"type\":\"uint256\"}],\"name\":\"depositAndRedeemOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"depositMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"depositOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"monsterBlocks\",\"outputs\":[{\"internalType\":\"contract IERC721Transfer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"redeemMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"redeemOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MonsterMarket","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"petersburg","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}