{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPLv3\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint c = a / b;\r\n        return c;\r\n    }\r\n}\r\ninterface ERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address owner;\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only owner\");\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"address is null\");\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenIDO is Ownable, ReentrancyGuard {\r\n    uint PRECISION_FACTOR;\r\n    event ChangeUsdtToTokenRate(uint before, uint afters);\r\n    event ChangeExFeePercent(uint before, uint afters);\r\n    using SafeMath for uint;\r\n    ERC20 token;\r\n    ERC20 usdt;\r\n    ERC20 airdrop;\r\n    uint usdt_to_token_rate = 552631578947368000;\r\n    uint ex_fee_percent     = 0;\r\n    uint total_usdt_ex_in;\r\n    uint total_token_fee;\r\n    mapping(address => bool) public whitelistusers;\r\n    constructor(address _token_addr, address _usdt_addr, address _airdrop_addr) {\r\n        token = ERC20(_token_addr);\r\n        usdt  = ERC20(_usdt_addr);\r\n        airdrop = ERC20(_airdrop_addr);\r\n        PRECISION_FACTOR = 10 ** (18 - usdt.decimals());\r\n    }\r\n    receive() external payable {}\r\n    function usdt_to_token(uint amount) public nonReentrant returns (bool)  {\r\n        uint usdt_amount = amount.div(PRECISION_FACTOR);\r\n        require(usdt.balanceOf(msg.sender) >= usdt_amount, \"Insufficient token balance\");\r\n        require(usdt.allowance(msg.sender, address(this)) >= usdt_amount, \"Insufficient approve amount\");\r\n        uint token_amount = amount.mul(usdt_to_token_rate).div(1 ether);\r\n        if (whitelistusers[msg.sender]) token_amount = token_amount.mul(11111).div(10000);\r\n        uint token_fee = token_amount.mul(ex_fee_percent).div(100);\r\n        token_amount = token_amount.sub(token_fee);\r\n        total_usdt_ex_in = total_usdt_ex_in.add(amount);\r\n        total_token_fee = total_token_fee.add(token_fee);\r\n        usdt.transferFrom(msg.sender, address(this), usdt_amount);\r\n        token.transfer(msg.sender, token_amount);\r\n        airdrop.transfer(msg.sender, token_amount);\r\n        return true;\r\n    }\r\n    function query_account(address addr) public view returns(uint, uint, uint, uint, uint, uint, uint) {\r\n        return (addr.balance,\r\n                token.balanceOf(addr),\r\n                usdt.balanceOf(addr).mul(PRECISION_FACTOR),\r\n                token.allowance(addr, address(this)),\r\n                usdt.allowance(addr, address(this)).mul(PRECISION_FACTOR),\r\n                usdt_to_token_rate,\r\n                ex_fee_percent);\r\n    }\r\n    function query_summary() public view returns(uint, uint, uint, uint) {\r\n        return (token.balanceOf(address(this)),\r\n                usdt.balanceOf(address(this)).mul(PRECISION_FACTOR),\r\n                total_usdt_ex_in,\r\n                total_token_fee);\r\n    }\r\n    function set_usdt_to_token_rate(uint new_rate) public onlyOwner returns (bool) {\r\n        require(new_rate > 0, \"need greater than zero\");\r\n        require(usdt_to_token_rate != new_rate, \"need new rate\");\r\n        emit ChangeUsdtToTokenRate(usdt_to_token_rate, new_rate);\r\n        usdt_to_token_rate = new_rate;\r\n        return true;\r\n    }\r\n    function set_ex_fee_percent(uint new_fee_percent) public onlyOwner returns (bool) {\r\n        require(new_fee_percent >= 0, \"Can't be less than zero\");\r\n        require(ex_fee_percent != new_fee_percent, \"need new fee percent\");\r\n        emit ChangeExFeePercent(ex_fee_percent, new_fee_percent);\r\n        ex_fee_percent = new_fee_percent;\r\n        return true;\r\n    }\r\n    function sys_clear() public onlyOwner {\r\n        token.transfer(msg.sender, token.balanceOf(address(this)));\r\n        usdt.transfer(msg.sender, usdt.balanceOf(address(this)));\r\n        airdrop.transfer(msg.sender, airdrop.balanceOf(address(this)));\r\n        selfdestruct(payable(msg.sender));\r\n    }\r\n    function setWhiteListUser(address addr, bool isWhiteListUser) public onlyOwner() {\r\n        whitelistusers[addr] = isWhiteListUser;\r\n    }\r\n    function otherLinesTokenTransfer(address addr, uint amount) public onlyOwner() {\r\n        token.transfer(addr, amount);\r\n        airdrop.transfer(addr, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token_addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt_addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_airdrop_addr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"before\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"afters\",\"type\":\"uint256\"}],\"name\":\"ChangeExFeePercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"before\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"afters\",\"type\":\"uint256\"}],\"name\":\"ChangeUsdtToTokenRate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"otherLinesTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"query_account\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"query_summary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isWhiteListUser\",\"type\":\"bool\"}],\"name\":\"setWhiteListUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_fee_percent\",\"type\":\"uint256\"}],\"name\":\"set_ex_fee_percent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_rate\",\"type\":\"uint256\"}],\"name\":\"set_usdt_to_token_rate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sys_clear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"usdt_to_token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistusers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"TokenIDO","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002d2dc094218d9608dd2ca15eff8433d8fea0f1c5000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000090e644c59663e7652fd1ef1641afbe1525949bb5","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6d032da1073966a42cd668e598848c2435ae4bf0ec80dd08dc0949acf0bcb62f"}]}