{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\n\r\n\r\n\r\ninterface IJungleFreaks {\r\n    function mint(uint256 amount) external payable;\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    )  external;\r\n}\r\n\r\n\r\n//NFT基本上都是ETH支付\r\ncontract NFT  {\r\n\r\n    address public nft_contract;\r\n    address private admin_addr;\r\n    mapping(address => bool) public allowList; //这些地址belong to admin_addr;\r\n\r\n    constructor(address addr) {\r\n        nft_contract = addr;\r\n        admin_addr = msg.sender;\r\n    }\r\n\r\n    receive() external payable {}\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual  returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n    \r\n    function SetAllows(address[] memory _allowList) public {\r\n        require(msg.sender == admin_addr,\"invalid msg.sender\");\r\n        for (uint256 i=0; i < _allowList.length; i++) {\r\n            allowList[_allowList[i]] = true;\r\n        }\r\n    }\r\n\r\n\r\n    function mintWithCoinbase(uint256  single_mint_amount,uint256  single_pay_amount,uint256  total_coinbase_amount,uint256 mint_num) external payable {\r\n        require(allowList[address(msg.sender)],\"invalid msg.sender\");\r\n        for (uint256 i=0;i<mint_num;i++) {\r\n            (bool success,bytes memory data) = nft_contract.call{value: single_pay_amount}(abi.encodeWithSignature(\"mint(uint256)\", single_mint_amount));\r\n            require(success, string(data));\r\n        }\r\n        block.coinbase.transfer(total_coinbase_amount);\r\n    }\r\n    \r\n    \r\n    function mint(uint256  single_mint_amount,uint256  single_pay_amount,uint256 mint_num) external payable {\r\n        require(allowList[address(msg.sender)],\"invalid msg.sender\");\r\n        for (uint256 i=0;i<mint_num;i++) {\r\n            (bool success,bytes memory data) = nft_contract.call{value: single_pay_amount}(abi.encodeWithSignature(\"mint(uint256)\", single_mint_amount));\r\n            require(success, string(data));\r\n        }\r\n    }\r\n    \r\n    function transferToCoinbase(uint256 coinbase_amount) public {\r\n        require(allowList[address(msg.sender)],\"invalid msg.sender\");\r\n        block.coinbase.transfer(coinbase_amount);\r\n    }\r\n\r\n    function claim(uint256[] memory tokenids,address to) external {\r\n        require(msg.sender == admin_addr,\"invalid msg.sender\");\r\n        for (uint256 ind = 0; ind < tokenids.length; ind++) {\r\n            IJungleFreaks(nft_contract).safeTransferFrom(address(this),to,tokenids[ind]);\r\n        }\r\n    }\r\n\r\n    function withdraw() external {\r\n        require(msg.sender == admin_addr,\"invalid msg.sender\");\r\n        payable(admin_addr).transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_allowList\",\"type\":\"address[]\"}],\"name\":\"SetAllows\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"single_mint_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"single_pay_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mint_num\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"single_mint_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"single_pay_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_coinbase_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mint_num\",\"type\":\"uint256\"}],\"name\":\"mintWithCoinbase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft_contract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"coinbase_amount\",\"type\":\"uint256\"}],\"name\":\"transferToCoinbase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"NFT","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000007e6bc952d4b4bd814853301bee48e99891424de0","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f2198b0fd2812a6a2e124fbfccd765d9616c862c0ce537d317c1ecdee6547f69"}]}