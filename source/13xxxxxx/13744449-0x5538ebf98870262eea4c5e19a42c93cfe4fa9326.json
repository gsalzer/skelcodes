{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TokenRewardStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./interfaces/IMintableERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @notice Staking contract that allows NFT users\\n *         to temporarily lock their NFTs to earn\\n *         ERC-20 token rewards\\n *\\n * The NFTs are locked inside this contract for the\\n * duration of the staking period while allowing the\\n * user to unstake at any time\\n *\\n * While the NFTs are staked, they are technically\\n * owned by this contract and cannot be moved or placed\\n * on any marketplace\\n *\\n * The contract allows users to stake and unstake multiple\\n * NFTs efficiently, in one transaction\\n *\\n * Staking rewards are paid out to users once\\n * they unstake their NFTs and are calculated\\n * based on a rounded down number of days the NFTs\\n * were staken for\\n *\\n * Some of the rarest NFTs are boosted by the contract\\n * owner to receive bigger staking rewards\\n *\\n * @dev Features a contract owner that is able to change\\n *      the daily rewards, the boosted NFT list and the\\n *      boosted NFT daily rewards\\n */\\ncontract TokenRewardStaking is ERC721Holder, Ownable {\\n  using EnumerableSet for EnumerableSet.UintSet;\\n\\n  /**\\n   * @notice Stores the ERC-20 token that will\\n   *         be paid out to NFT holders for staking\\n   */\\n  IMintableERC20 public immutable erc20;\\n\\n  /**\\n   * @notice Stores the ERC-721 token that will\\n   *         be staken to receive ERC-20 rewards\\n   */\\n  IERC721 public immutable erc721;\\n\\n  /**\\n   * @notice Amount of tokens earned for each\\n   *         day (24 hours) the token was staked for\\n   *\\n   * @dev Can be changed by contract owner via setDailyRewards()\\n   */\\n  uint128 public dailyRewards;\\n\\n  /**\\n   * @notice Some NFTs are boosted to receive bigger token\\n   *         rewards. This multiplier shows how much more\\n   *         they will receive\\n   *\\n   * E.g. dailyRewardBoostMultiplier = 10 means that the boosted\\n   * NFTs will receive 10 times the dailyRewards\\n   *\\n   * @dev Can be changed by contract owner via setDailyRewardBoostMultiplier()\\n   */\\n  uint128 public dailyRewardBoostMultiplier;\\n\\n  /**\\n   * @notice Boosted NFTs contained in this list\\n   *         earn bigger daily rewards\\n   *\\n   * @dev We use an EnumerableSet to store this data\\n   *      instead of an array to be able to query in\\n   *      O(1) complexity\\n   *\\n   ** @dev Can be changed by contract owner via setBoostedNftIds()\\n   */\\n  EnumerableSet.UintSet private boostedNftIds;\\n\\n  /**\\n   * @notice Stores ownership information for staked\\n   *         NFTs\\n   */\\n  mapping(uint256 => address) public ownerOf;\\n\\n  /**\\n   * @notice Stores time staking started for staked\\n   *         NFTs\\n   */\\n  mapping(uint256 => uint256) public stakedAt;\\n\\n  /**\\n   * @dev Stores the staked tokens of an address\\n   */\\n  mapping(address => EnumerableSet.UintSet) private stakedTokens;\\n\\n  /**\\n   * @dev Smart contract unique identifier, a random number\\n   *\\n   * @dev Should be regenerated each time smart contact source code is changed\\n   *      and changes smart contract itself is to be redeployed\\n   *\\n   * @dev Generated using https://www.random.org/bytes/\\n   */\\n\\tuint256 public constant UID = 0x78ea82e97e97cd54405b116b0209cbaf8bcb22911b5ad1045e81ea6caf7d47fa;\\n\\n  /**\\n   * @dev Sets initialization variables which cannot be\\n   *      changed in the future\\n   *\\n   * @param _erc20Address address of erc20 rewards token\\n   * @param _erc721Address address of erc721 token to be staken for rewards\\n   * @param _dailyRewards daily amount of tokens to be paid to stakers for every day\\n   *                       they have staken an NFT\\n   * @param _boostedNftIds boosted NFTs receive bigger rewards\\n   * @param _dailyRewardBoostMultiplier multiplier of rewards for boosted NFTs\\n   */\\n  constructor(\\n    address _erc20Address,\\n    address _erc721Address,\\n    uint128 _dailyRewards,\\n    uint256[] memory _boostedNftIds,\\n    uint128 _dailyRewardBoostMultiplier\\n  ) {\\n    erc20 = IMintableERC20(_erc20Address);\\n    erc721 = IERC721(_erc721Address);\\n    setDailyRewards(_dailyRewards);\\n    setBoostedNftIds(_boostedNftIds);\\n    setDailyRewardBoostMultiplier(_dailyRewardBoostMultiplier);\\n  }\\n\\n  /**\\n   * @dev Emitted every time a token is staked\\n   *\\n   * Emitted in stake()\\n   *\\n   * @param by address that staked the NFT\\n   * @param time block timestamp the NFT were staked at\\n   * @param tokenId token ID of NFT that was staken\\n   */\\n  event Staked(address indexed by, uint256 indexed tokenId, uint256 time);\\n\\n  /**\\n   * @dev Emitted every time a token is unstaked\\n   *\\n   * Emitted in unstake()\\n   *\\n   * @param by address that unstaked the NFT\\n   * @param time block timestamp the NFT were staked at\\n   * @param tokenId token ID of NFT that was unstaken\\n   * @param stakedAt when the NFT initially staked at\\n   * @param reward how many tokens user got for the\\n   *               staking of the NFT\\n   */\\n  event Unstaked(address indexed by, uint256 indexed tokenId, uint256 time, uint256 stakedAt, uint256 reward);\\n\\n  /**\\n   * @dev Emitted when the boosted NFT ids is changed\\n   *\\n   * Emitted in setDailyReward()\\n   *\\n   * @param by address that changed the daily reward\\n   * @param oldDailyRewards old daily reward\\n   * @param newDailyRewards new daily reward in effect\\n   */\\n  event DailyRewardsChanged(address indexed by, uint128 oldDailyRewards, uint128 newDailyRewards);\\n\\n  /**\\n   * @dev Emitted when the boosted NFT daily reward\\n   *      multiplier is changed\\n   *\\n   * Emitted in setDailyRewardBoostMultiplier()\\n   *\\n   * @param by address that changed the daily reward boost multiplier\\n   * @param oldDailyRewardBoostMultiplier old daily reward boost multiplier\\n   * @param newDailyRewardBoostMultiplier new daily reward boost multiplier\\n   */\\n  event DailyRewardBoostMultiplierChanged(\\n    address indexed by,\\n    uint128 oldDailyRewardBoostMultiplier,\\n    uint128 newDailyRewardBoostMultiplier\\n  );\\n\\n  /**\\n   * @dev Emitted when the boosted NFT ids change\\n   *\\n   * Emitted in setBoostedNftIds()\\n   *\\n   * @param by address that changed the boosted NFT ids\\n   * @param oldBoostedNftIds old boosted NFT ids\\n   * @param newBoostedNftIds new boosted NFT ids\\n   */\\n  event BoostedNftIdsChanged(address indexed by, uint256[] oldBoostedNftIds, uint256[] newBoostedNftIds);\\n\\n  /**\\n   * @notice Checks whether a token is boosted to receive\\n   *         bigger staking rewards\\n   *\\n   * @param _tokenId ID of token to check\\n   * @return whether the token is boosted\\n   */\\n  function isBoostedToken(uint256 _tokenId) public view returns (bool) {\\n    return boostedNftIds.contains(_tokenId);\\n  }\\n\\n  /**\\n   * @notice Changes the daily reward in erc20 tokens received\\n   *         for every NFT staked\\n   *\\n   * @dev Restricted to contract owner\\n   *\\n   * @param _newDailyRewards the new daily reward in erc20 tokens\\n   */\\n  function setDailyRewards(uint128 _newDailyRewards) public onlyOwner {\\n    // Emit event\\n    emit DailyRewardsChanged(msg.sender, dailyRewards, _newDailyRewards);\\n\\n    // Change storage variable\\n    dailyRewards = _newDailyRewards;\\n  }\\n\\n  /**\\n   * @notice Changes the daily reward boost multiplier for\\n   *         boosted NFTs\\n   *\\n   * @dev Restricted to contract owner\\n   *\\n   * @param _newDailyRewardBoostMultiplier the new daily reward boost multiplier\\n   */\\n  function setDailyRewardBoostMultiplier(uint128 _newDailyRewardBoostMultiplier) public onlyOwner {\\n    // Emit event\\n    emit DailyRewardBoostMultiplierChanged(msg.sender, dailyRewardBoostMultiplier, _newDailyRewardBoostMultiplier);\\n\\n    // Change storage variable\\n    dailyRewardBoostMultiplier = _newDailyRewardBoostMultiplier;\\n  }\\n\\n  /**\\n   * @notice Changes the boosted NFT ids that receive\\n   *         a bigger daily reward\\n   *\\n   * @dev Restricted to contract owner\\n   *\\n   * @param _newBoostedNftIds the new boosted NFT ids\\n   */\\n  function setBoostedNftIds(uint256[] memory _newBoostedNftIds) public onlyOwner {\\n    // Create array to store old boosted NFTs and emit\\n    // event later\\n    uint256[] memory oldBoostedNftIds = new uint256[](boostedNftIds.length());\\n\\n    // Empty boosted NFT ids set\\n    for (uint256 i = 0; boostedNftIds.length() > 0; i++) {\\n      // Get a value from the set\\n      // Since set length is > 0 it is guaranteed\\n      // that there is a value at index 0\\n      uint256 value = boostedNftIds.at(0);\\n\\n      // Remove the value\\n      boostedNftIds.remove(value);\\n\\n      // Store the value to the old boosted NFT ids\\n      // list to later emit event\\n      oldBoostedNftIds[i] = value;\\n    }\\n\\n    // Emit event\\n    emit BoostedNftIdsChanged(msg.sender, oldBoostedNftIds, _newBoostedNftIds);\\n\\n    // Enumerate new boosted NFT ids\\n    for (uint256 i = 0; i < _newBoostedNftIds.length; i++) {\\n      uint256 boostedNftId = _newBoostedNftIds[i];\\n\\n      // Add boosted NFT id to set\\n      boostedNftIds.add(boostedNftId);\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates all the NFTs currently staken by\\n   *         an address\\n   *\\n   * @dev This is an auxiliary function to help with integration\\n   *      and is not used anywhere in the smart contract login\\n   *\\n   * @param _owner address to search staked tokens of\\n   * @return an array of token IDs of NFTs that are currently staken\\n   */\\n  function tokensStakedByOwner(address _owner) external view returns (uint256[] memory) {\\n    // Cache the length of the staked tokens set for the owner\\n    uint256 stakedTokensLength = stakedTokens[_owner].length();\\n\\n    // Create an empty array to store the result\\n    // Should be the same length as the staked tokens\\n    // set\\n    uint256[] memory tokenIds = new uint256[](stakedTokensLength);\\n\\n    // Copy set values to array\\n    for (uint256 i = 0; i < stakedTokensLength; i++) {\\n      tokenIds[i] = stakedTokens[_owner].at(i);\\n    }\\n\\n    // Return array result\\n    return tokenIds;\\n  }\\n\\n  /**\\n   * @notice Calculates the rewards that would be earned by\\n   *         the user for each an NFT if he was to unstake it at\\n   *         the current block\\n   *\\n   * @param _tokenId token ID of NFT rewards are to be calculated for\\n   * @return the amount of rewards for the input staken NFT\\n   */\\n  function currentRewardsOf(uint256 _tokenId) public view returns (uint256) {\\n    // Verify NFT is staked\\n    require(stakedAt[_tokenId] != 0, \\\"not staked\\\");\\n\\n    // Get current token ID staking time by calculating the\\n    // delta between the current block time(`block.timestamp`)\\n    // and the time the token was initially staked(`stakedAt[tokenId]`)\\n    uint256 stakingTime = block.timestamp - stakedAt[_tokenId];\\n\\n    // `stakingTime` is the staking time in seconds\\n    // Calculate the staking time in days by:\\n    //   * dividing by 60 (seconds in a minute)\\n    //   * dividing by 60 (minutes in an hour)\\n    //   * dividing by 24 (hours in a day)\\n    // This will yield the (rounded down) staking\\n    // time in days\\n    uint256 stakingDays = stakingTime / 60 / 60 / 24;\\n\\n    // Calculate reward for token by multiplying\\n    // rounded down number of staked days by daily\\n    // rewards variable\\n    uint256 reward = stakingDays * dailyRewards;\\n\\n    // If the NFT is boosted\\n    if (isBoostedToken(_tokenId)) {\\n      // Multiply the reward\\n      reward *= dailyRewardBoostMultiplier;\\n    }\\n\\n    // Return reward\\n    return reward;\\n  }\\n\\n  /**\\n   * @notice Stake NFTs to start earning ERC-20\\n   *         token rewards\\n   *\\n   * The ERC-20 token rewards will be paid out\\n   * when the NFTs are unstaken\\n   *\\n   * @dev Sender must first approve this contract\\n   *      to transfer NFTs on his behalf and NFT\\n   *      ownership is transferred to this contract\\n   *      for the duration of the staking\\n   *\\n   * @param _tokenIds token IDs of NFTs to be staken\\n   */\\n  function stake(uint256[] memory _tokenIds) public {\\n    // Ensure at least one token ID was sent\\n    require(_tokenIds.length > 0, \\\"no token IDs sent\\\");\\n\\n    // Enumerate sent token IDs\\n    for (uint256 i = 0; i < _tokenIds.length; i++) {\\n      // Get token ID\\n      uint256 tokenId = _tokenIds[i];\\n\\n      // Store NFT owner\\n      ownerOf[tokenId] = msg.sender;\\n\\n      // Add NFT to owner staked tokens\\n      stakedTokens[msg.sender].add(tokenId);\\n\\n      // Store staking time as block timestamp the\\n      // the transaction was confirmed in\\n      stakedAt[tokenId] = block.timestamp;\\n\\n      // Transfer token to staking contract\\n      // Will fail if the user does not own the\\n      // token or has not approved the staking\\n      // contract for transferring tokens on his\\n      // behalf\\n      erc721.safeTransferFrom(msg.sender, address(this), tokenId, \\\"\\\");\\n\\n      // Emit event\\n      emit Staked(msg.sender, tokenId, stakedAt[tokenId]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Unstake NFTs to receive ERC-20 token rewards\\n   *\\n   * @dev Sender must have first staken the NFTs\\n   *\\n   * @param _tokenIds token IDs of NFTs to be unstaken\\n   */\\n  function unstake(uint256[] memory _tokenIds) public {\\n    // Ensure at least one token ID was sent\\n    require(_tokenIds.length > 0, \\\"no token IDs sent\\\");\\n\\n    // Create a variable to store the total rewards for all\\n    // NFTs sent\\n    uint256 totalRewards = 0;\\n\\n    // Enumerate sent token IDs\\n    for (uint256 i = 0; i < _tokenIds.length; i++) {\\n      // Get token ID\\n      uint256 tokenId = _tokenIds[i];\\n\\n      // Verify sender is token ID owner\\n      // Will fail if token is not staked (owner is 0x0)\\n      require(ownerOf[tokenId] == msg.sender, \\\"not token owner\\\");\\n\\n      // Calculate rewards for token ID. Will revert\\n      // if the token is not staken\\n      uint256 rewards = currentRewardsOf(tokenId);\\n\\n      // Increase amount of total rewards\\n      // for all tokens sent\\n      totalRewards += rewards;\\n\\n      // Emit event\\n      emit Unstaked(msg.sender, tokenId, block.timestamp, stakedAt[tokenId], rewards);\\n\\n      // Reset `ownerOf` and `stakedAt`\\n      // for token\\n      ownerOf[tokenId] = address(0);\\n      stakedAt[tokenId] = 0;\\n\\n      // Remove NFT from owner staked tokens\\n      stakedTokens[msg.sender].remove(tokenId);\\n\\n      // Transfer NFT back to user\\n      erc721.transferFrom(address(this), msg.sender, tokenId);\\n    }\\n\\n    // Mint total rewards for all sent NFTs\\n    // to user\\n    erc20.mint(msg.sender, totalRewards);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMintableERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice ERC20-compliant interface with added\\n *         function for minting new tokens to addresses\\n *\\n * See {IERC20}\\n */\\ninterface IMintableERC20 is IERC20 {\\n  /**\\n   * @dev Allows issuing new tokens to an address\\n   *\\n   * @dev Should have restricted access\\n   */\\n  function mint(address _to, uint256 _amount) external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc721Address\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_dailyRewards\",\"type\":\"uint128\"},{\"internalType\":\"uint256[]\",\"name\":\"_boostedNftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint128\",\"name\":\"_dailyRewardBoostMultiplier\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"oldBoostedNftIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"newBoostedNftIds\",\"type\":\"uint256[]\"}],\"name\":\"BoostedNftIdsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"oldDailyRewardBoostMultiplier\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newDailyRewardBoostMultiplier\",\"type\":\"uint128\"}],\"name\":\"DailyRewardBoostMultiplierChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"oldDailyRewards\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newDailyRewards\",\"type\":\"uint128\"}],\"name\":\"DailyRewardsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"currentRewardsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyRewardBoostMultiplier\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyRewards\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20\",\"outputs\":[{\"internalType\":\"contract IMintableERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isBoostedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_newBoostedNftIds\",\"type\":\"uint256[]\"}],\"name\":\"setBoostedNftIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_newDailyRewardBoostMultiplier\",\"type\":\"uint128\"}],\"name\":\"setDailyRewardBoostMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_newDailyRewards\",\"type\":\"uint128\"}],\"name\":\"setDailyRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensStakedByOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenRewardStaking","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ec5709c0750043cfb4b869dbc871e86efe18b4c5000000000000000000000000d8682bfa6918b0174f287b888e765b9a1b4dc9c300000000000000000000000000000000000000000000000000000000000061a800000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000d00000000000000000000000000000000000000000000000000000000000005d00000000000000000000000000000000000000000000000000000000000000dc1000000000000000000000000000000000000000000000000000000000000100200000000000000000000000000000000000000000000000000000000000002dc000000000000000000000000000000000000000000000000000000000000204f000000000000000000000000000000000000000000000000000000000000213d00000000000000000000000000000000000000000000000000000000000027eb0000000000000000000000000000000000000000000000000000000000000b57000000000000000000000000000000000000000000000000000000000000180600000000000000000000000000000000000000000000000000000000000019940000000000000000000000000000000000000000000000000000000000001d7b000000000000000000000000000000000000000000000000000000000000237500000000000000000000000000000000000000000000000000000000000026be","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}