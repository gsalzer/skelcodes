{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/auctions/AuctionHub.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../nft/INft.sol\\\";\\nimport \\\"./IAuction.sol\\\";\\nimport \\\"./IHub.sol\\\";\\nimport \\\"../registry/Registry.sol\\\";\\n\\ncontract AuctionHub is Ownable, IHub {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * Needed information about an auction request\\n     */\\n    struct LotRequest {\\n        address owner;              // Owner of token\\n        uint256 tokenID;            // ID of the token\\n        uint256 auctionID;          // ID of the auction\\n        LotStatus status;           // Status of the auction\\n    }\\n    // Enum for the state of an auction\\n    enum AuctionStatus { INACTIVE, ACTIVE, PAUSED }\\n    /**\\n     * Needed information around an auction\\n     */\\n    struct Auctions {\\n        AuctionStatus status;       // If the auction type is valid for requests\\n        string auctionName;         // Name of the auction \\n        address auctionContract;    // Address of auction implementation\\n        bool onlyPrimarySales;      // If the auction can only do primary sales\\n    }\\n\\n    // Scaling factor for splits. Allows for more decimal precision on percentages \\n    uint256 constant internal SPLIT_SCALING_FACTOR = 10000;\\n\\n    // Lot ID to lot request\\n    mapping(uint256 => LotRequest) internal lotRequests_;\\n    // Auction types\\n    mapping(uint256 => Auctions) internal auctions_;\\n    // Address to auction ID\\n    mapping(address => uint256) internal auctionAddress_;\\n    // A mapping to keep track of token IDs to if it is not the first sale\\n    mapping(uint256 => bool) internal isSecondarySale_;\\n    // Interface for NFT contract\\n    INft internal nftInstance_;\\n    // Storage for the registry instance \\n    Registry internal registryInstance_;\\n    // Auction counter\\n    uint256 internal auctionCounter_;\\n    // Lot ID counters for auctions \\n    uint256 internal lotCounter_;\\n    // First sale splits\\n    // Split to creator\\n    uint256 internal creatorSplitFirstSale_;\\n    // Split for system\\n    uint256 internal systemSplitFirstSale_;\\n    // Secondary sale splits\\n    // Split to creator\\n    uint256 internal creatorSplitSecondary_;\\n    // Split to seller\\n    uint256 internal sellerSplitSecondary_;\\n    // Split to system\\n    uint256 internal systemSplitSecondary_;\\n\\n    // -----------------------------------------------------------------------\\n    // EVENTS  \\n    // -----------------------------------------------------------------------\\n\\n    event AuctionRegistered(\\n        address owner,\\n        uint256 indexed auctionID,\\n        string auctionName,\\n        address auctionContract    \\n    );\\n\\n    event AuctionUpdated(\\n        address owner,\\n        uint256 indexed auctionID,\\n        address oldAuctionContract,\\n        address newAuctionContract\\n    );\\n\\n    event AuctionRemoved(\\n        address owner,\\n        uint256 indexed auctionID\\n    );\\n\\n    event LotStatusChange(\\n        uint256 indexed lotID,\\n        uint256 indexed auctionID,\\n        address indexed auction,\\n        LotStatus status\\n    );\\n\\n    event FirstSaleSplitUpdated(\\n        uint256 oldCreatorSplit,\\n        uint256 newCreatorSplit,\\n        uint256 oldSystemSplit,\\n        uint256 newSystemSplit\\n    );\\n\\n    event SecondarySalesSplitUpdated(\\n        uint256 oldCreatorSplit,\\n        uint256 newCreatorSplit,\\n        uint256 oldSellerSplit,\\n        uint256 newSellerSplit,\\n        uint256 oldSystemSplit,\\n        uint256 newSystemSplit\\n    );\\n\\n    event LotRequested(\\n        address indexed requester,\\n        uint256 indexed tokenID,\\n        uint256 indexed lotID\\n    );\\n\\n    // -----------------------------------------------------------------------\\n    // MODIFIERS  \\n    // -----------------------------------------------------------------------\\n\\n    modifier onlyAuction() {\\n        uint256 auctionID = this.getAuctionID(msg.sender);\\n        require(\\n            auctions_[auctionID].auctionContract == msg.sender &&\\n            auctions_[auctionID].status != AuctionStatus.INACTIVE,\\n            \\\"Invalid auction\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyTokenOwner(uint256 _lotID) {\\n        require(\\n            msg.sender == lotRequests_[_lotID].owner,\\n            \\\"Address not original owner\\\"\\n        );\\n        _;\\n    }  \\n\\n    modifier onlyRegistry() {\\n        require(\\n            msg.sender == address(registryInstance_),\\n            \\\"Caller can only be registry\\\"\\n        );\\n        _;\\n    }\\n\\n    // -----------------------------------------------------------------------\\n    // CONSTRUCTOR \\n    // -----------------------------------------------------------------------\\n\\n    constructor(\\n        address _registry,\\n        uint256 _primaryCreatorSplit,\\n        uint256 _primarySystemSplit,\\n        uint256 _secondaryCreatorSplit,\\n        uint256 _secondarySellerSplit,\\n        uint256 _secondarySystemSplit\\n    ) \\n        Ownable() \\n    {\\n        registryInstance_ = Registry(_registry);\\n        nftInstance_ = INft(registryInstance_.getNft());\\n        require(\\n            nftInstance_.isActive(),\\n            \\\"NFT contract not active\\\"\\n        );\\n        _updateFirstSaleSplit(\\n            _primaryCreatorSplit,\\n            _primarySystemSplit\\n        );\\n        _updateSecondarySalesSplit(\\n            _secondaryCreatorSplit,\\n            _secondarySellerSplit,\\n            _secondarySystemSplit\\n        );\\n    }\\n\\n    // -----------------------------------------------------------------------\\n    // NON-MODIFYING FUNCTIONS (VIEW)\\n    // -----------------------------------------------------------------------\\n\\n    function getLotInformation(\\n        uint256 _lotID\\n    ) \\n        external \\n        view \\n        override\\n        returns(\\n            address owner,\\n            uint256 tokenID,\\n            uint256 auctionID,\\n            LotStatus status\\n        ) \\n    {\\n        owner= lotRequests_[_lotID].owner;\\n        tokenID= lotRequests_[_lotID].tokenID;\\n        auctionID= lotRequests_[_lotID].auctionID;\\n        status= lotRequests_[_lotID].status;\\n    }\\n\\n    function getAuctionInformation(\\n        uint256 _auctionID\\n    )\\n        external\\n        view\\n        override\\n        returns(\\n            bool active,\\n            string memory auctionName,\\n            address auctionContract,\\n            bool onlyPrimarySales\\n        )\\n    {\\n        active = auctions_[_auctionID].status == AuctionStatus.ACTIVE ? true : false;\\n        auctionName = auctions_[_auctionID].auctionName;\\n        auctionContract = auctions_[_auctionID].auctionContract;\\n        onlyPrimarySales = auctions_[_auctionID].onlyPrimarySales;\\n    }\\n\\n    function getAuctionID(\\n        address _auction\\n    ) \\n        external \\n        view \\n        override \\n        returns(uint256) \\n    {\\n        return auctionAddress_[_auction];\\n    }\\n\\n    function isAuctionActive(uint256 _auctionID) external view override returns(bool) {\\n        return auctions_[_auctionID].status == AuctionStatus.ACTIVE ? true : false;\\n    }\\n\\n    function getAuctionCount() external view override returns(uint256) {\\n        return auctionCounter_;\\n    }\\n\\n    function isAuctionHubImplementation() external view override returns(bool) {\\n        return true;\\n    }\\n\\n    function isFirstSale(uint256 _tokenID) external view override returns(bool) {\\n        return !isSecondarySale_[_tokenID];\\n    }\\n\\n    function getFirstSaleSplit() \\n        external \\n        view \\n        override\\n        returns(\\n            uint256 creatorSplit,\\n            uint256 systemSplit\\n        )\\n    {\\n        creatorSplit = creatorSplitFirstSale_;\\n        systemSplit = systemSplitFirstSale_;\\n    }\\n\\n    function getSecondarySaleSplits()\\n        external\\n        view\\n        override\\n        returns(\\n            uint256 creatorSplit,\\n            uint256 sellerSplit,\\n            uint256 systemSplit\\n        )\\n    {\\n        creatorSplit = creatorSplitSecondary_;\\n        sellerSplit = sellerSplitSecondary_;\\n        systemSplit = systemSplitSecondary_;\\n    }\\n\\n    function getScalingFactor() external view override returns(uint256) {\\n        return SPLIT_SCALING_FACTOR;\\n    }\\n\\n    // -----------------------------------------------------------------------\\n    // PUBLIC STATE MODIFYING FUNCTIONS\\n    // -----------------------------------------------------------------------\\n\\n    function requestAuctionLot(\\n        uint256 _auctionType,\\n        uint256 _tokenID\\n    )\\n        external \\n        override\\n        returns(uint256 lotID)\\n    {\\n        require(\\n            auctions_[_auctionType].status == AuctionStatus.ACTIVE,\\n            \\\"Auction is inactive\\\"\\n        );\\n        require(\\n            nftInstance_.ownerOf(_tokenID) == msg.sender,\\n            \\\"Only owner can request lot\\\"\\n        );\\n        // Enforces auction first sales limitation (not all auctions)\\n        if(auctions_[_auctionType].onlyPrimarySales) {\\n            require(\\n                this.isFirstSale(_tokenID),\\n                \\\"Auction can only do first sales\\\"\\n            );\\n        }\\n        lotCounter_ = lotCounter_.add(1);\\n        lotID = lotCounter_;\\n\\n        lotRequests_[lotID] = LotRequest(\\n            msg.sender,\\n            _tokenID,\\n            _auctionType,\\n            LotStatus.LOT_REQUESTED\\n        );\\n        require(\\n            nftInstance_.isApprovedSpenderOf(\\n                msg.sender,\\n                address(this),\\n                _tokenID\\n            ),\\n            \\\"Approve hub as spender first\\\"\\n        );\\n        // Transferring the token from msg.sender to the hub\\n        nftInstance_.transferFrom(\\n            msg.sender,\\n            address(this),\\n            _tokenID\\n        );\\n        // Approving the auction as a spender of the token\\n        nftInstance_.approveSpender(\\n            auctions_[_auctionType].auctionContract,\\n            _tokenID,\\n            true\\n        );\\n\\n        emit LotRequested(\\n            msg.sender,\\n            _tokenID,\\n            lotID\\n        );\\n    }\\n\\n    function init() external override onlyRegistry() returns(bool) {\\n        return true;\\n    }\\n    \\n\\n    // -----------------------------------------------------------------------\\n    // ONLY AUCTIONS STATE MODIFYING FUNCTIONS\\n    // -----------------------------------------------------------------------\\n\\n    function firstSaleCompleted(uint256 _tokenID) external override onlyAuction() {\\n        isSecondarySale_[_tokenID] = true;\\n    }\\n\\n    function lotCreated(\\n        uint256 _auctionID, \\n        uint256 _lotID\\n    ) \\n        external \\n        override\\n        onlyAuction() \\n    {\\n        lotRequests_[_lotID].status = LotStatus.LOT_CREATED;\\n        \\n        emit LotStatusChange(\\n            _lotID,\\n            _auctionID,\\n            msg.sender,\\n            LotStatus.LOT_CREATED\\n        );\\n    }\\n\\n    function lotAuctionStarted(\\n        uint256 _auctionID, \\n        uint256 _lotID\\n    ) \\n        external \\n        override\\n        onlyAuction() \\n    {\\n        lotRequests_[_lotID].status = LotStatus.AUCTION_ACTIVE;\\n\\n        emit LotStatusChange(\\n            _lotID,\\n            _auctionID,\\n            msg.sender,\\n            LotStatus.AUCTION_ACTIVE\\n        );\\n    }\\n\\n    function lotAuctionCompleted(\\n        uint256 _auctionID, \\n        uint256 _lotID\\n    ) \\n        external \\n        override\\n        onlyAuction() \\n    {\\n        lotRequests_[_lotID].status = LotStatus.AUCTION_RESOLVED;\\n\\n        emit LotStatusChange(\\n            _lotID,\\n            _auctionID,\\n            msg.sender,\\n            LotStatus.AUCTION_RESOLVED\\n        );\\n    }    \\n\\n    function lotAuctionCompletedAndClaimed(\\n        uint256 _auctionID, \\n        uint256 _lotID\\n    ) \\n        external \\n        override\\n        onlyAuction() \\n    {\\n        lotRequests_[_lotID].status = LotStatus.AUCTION_RESOLVED_AND_CLAIMED;\\n\\n        emit LotStatusChange(\\n            _lotID,\\n            _auctionID,\\n            msg.sender,\\n            LotStatus.AUCTION_RESOLVED_AND_CLAIMED\\n        );\\n    }    \\n\\n    function cancelLot(\\n        uint256 _auctionID, \\n        uint256 _lotID\\n    ) \\n        external \\n        override\\n        onlyTokenOwner(_lotID)\\n    {\\n        // Get the address of the current holder of the token\\n        address currentHolder = nftInstance_.ownerOf(\\n            lotRequests_[_lotID].tokenID\\n        );\\n        IAuction auction = IAuction(\\n            auctions_[lotRequests_[_lotID].auctionID].auctionContract\\n        );\\n\\n        require(\\n            lotRequests_[_lotID].status == LotStatus.LOT_REQUESTED ||\\n            lotRequests_[_lotID].status == LotStatus.LOT_CREATED ||\\n            lotRequests_[_lotID].status == LotStatus.AUCTION_ACTIVE,\\n            \\\"State invalid for cancellation\\\"\\n        );\\n        require(\\n            !auction.hasBiddingStarted(_lotID),\\n            \\\"Bidding has started, cannot cancel\\\"\\n        );\\n        require(\\n            lotRequests_[_lotID].owner != currentHolder,\\n            \\\"Token already with owner\\\"\\n        );\\n        // If auction is a primary sale\\n        if(auctions_[lotRequests_[_lotID].auctionID].onlyPrimarySales) {\\n            require(\\n            lotRequests_[_lotID].status != LotStatus.AUCTION_ACTIVE,\\n            \\\"Cant cancel active primary sales\\\"\\n            );\\n        }\\n        // If the owner of the token is currently the auction hub\\n        if(currentHolder == address(this)) {\\n            // Transferring the token back to the owner\\n            nftInstance_.transfer(\\n                lotRequests_[_lotID].owner,\\n                lotRequests_[_lotID].tokenID\\n            );\\n            // If the owner of the token is currently the auction spoke\\n        } else if(\\n            auctions_[lotRequests_[_lotID].auctionID].auctionContract ==\\n            currentHolder\\n        ) {\\n            auction.cancelLot(_lotID);\\n        } else {\\n            // If the owner is neither the hub nor the spoke\\n            revert(\\\"Owner is not auction or hub\\\");\\n        }\\n        // Setting lot status to canceled \\n        lotRequests_[_lotID].status = LotStatus.AUCTION_CANCELED;\\n\\n        emit LotStatusChange(\\n            _lotID,\\n            _auctionID,\\n            msg.sender,\\n            LotStatus.AUCTION_CANCELED\\n        );\\n    }\\n\\n    // -----------------------------------------------------------------------\\n    // ONLY OWNER STATE MODIFYING FUNCTIONS\\n    // -----------------------------------------------------------------------\\n\\n    /**\\n     * @param   _newCreatorSplit The new split for the creator on primary sales. \\n     *          Scaled for more precision. 20% would be entered as 2000\\n     * @param   _newSystemSplit The new split for the system on primary sales.\\n     *          Scaled for more precision. 20% would be entered as 2000\\n     * @notice  Will revert if the sum of the two new splits does not equal \\n     *          10000 (the scaled resolution)\\n     */\\n    function updateFirstSaleSplit(\\n        uint256 _newCreatorSplit,\\n        uint256 _newSystemSplit\\n    )\\n        external\\n        onlyOwner()\\n    {\\n        _updateFirstSaleSplit(\\n            _newCreatorSplit,\\n            _newSystemSplit\\n        );\\n    }\\n\\n    /**\\n     * @param   _newCreatorSplit The new split for the creator on secondary sales.\\n     *          Scaled for more precision. 20% would be entered as 2000\\n     * @param   _newSellerSplit The new split to the seller on secondary sales.\\n                Scaled for more precision. 20% would be entered as 2000\\n     * @param   _newSystemSplit The new split for the system on secondary sales.\\n     *          Scaled for more precision. 20% would be entered as 2000\\n     * @notice  Will revert if the sum of the three new splits does not equal \\n     *          10000 (the scaled resolution)\\n     */\\n    function updateSecondarySalesSplit(\\n        uint256 _newCreatorSplit,\\n        uint256 _newSellerSplit,\\n        uint256 _newSystemSplit\\n    )\\n        external\\n        onlyOwner()\\n    {\\n        _updateSecondarySalesSplit(\\n            _newCreatorSplit,\\n            _newSellerSplit,\\n            _newSystemSplit\\n        );\\n    }\\n\\n    function registerAuction(\\n        string memory _name,\\n        address _auctionInstance,\\n        bool _onlyPrimarySales\\n    )\\n        external\\n        onlyOwner()\\n        returns(uint256 auctionID)\\n    {\\n        // Incrementing auction ID counter\\n        auctionCounter_ = auctionCounter_.add(1);\\n        auctionID = auctionCounter_;\\n        // Saving auction ID to address\\n        auctionAddress_[_auctionInstance] = auctionID;\\n        // Storing all information around auction \\n        auctions_[auctionID] = Auctions(\\n            AuctionStatus.INACTIVE,\\n            _name,\\n            _auctionInstance,\\n            _onlyPrimarySales\\n        );\\n        // Initialising auction\\n        require(\\n            IAuction(_auctionInstance).init(auctionID),\\n            \\\"Auction initialisation failed\\\"\\n        );\\n        // Setting auction to active\\n        auctions_[auctionID].status = AuctionStatus.ACTIVE;\\n\\n        emit AuctionRegistered(\\n            msg.sender,\\n            auctionID,\\n            _name,\\n            _auctionInstance    \\n        );\\n    }\\n\\n    /**\\n     * @param   _auctionID The ID of the auction to be paused.\\n     * @notice  This function allows the owner to pause the auction type. While\\n     *          the auction is paused no new lots can be created, but old lots\\n     *          can still complete. \\n     */\\n    function pauseAuction(uint256 _auctionID) external onlyOwner() {\\n        require(\\n            auctions_[_auctionID].status == AuctionStatus.ACTIVE,\\n            \\\"Cannot pause inactive auction\\\"\\n        );\\n\\n        auctions_[_auctionID].status = AuctionStatus.PAUSED;\\n    }\\n\\n    function updateAuctionInstance(\\n        uint256 _auctionID,\\n        address _newImplementation\\n    )\\n        external \\n        onlyOwner()\\n    {\\n        require(\\n            auctions_[_auctionID].status == AuctionStatus.PAUSED,\\n            \\\"Auction must be paused before update\\\"\\n        );\\n        require(\\n            auctions_[_auctionID].auctionContract != _newImplementation,\\n            \\\"Auction address already set\\\"\\n        );\\n\\n        IAuction newAuction = IAuction(_newImplementation);\\n\\n        require(\\n            newAuction.isActive() == false,\\n            \\\"Auction has been activated\\\"\\n        );\\n\\n        newAuction.init(_auctionID);\\n\\n        address oldAuctionContract = auctions_[_auctionID].auctionContract;\\n        auctionAddress_[oldAuctionContract] = 0;\\n        auctions_[_auctionID].auctionContract = _newImplementation;\\n        auctionAddress_[_newImplementation] = _auctionID;\\n\\n        emit AuctionUpdated(\\n            msg.sender,\\n            _auctionID,\\n            oldAuctionContract,\\n            _newImplementation\\n        );\\n    }\\n\\n    function removeAuction(\\n        uint256 _auctionID\\n    )\\n        external \\n        onlyOwner()\\n    {\\n        require(\\n            auctions_[_auctionID].status == AuctionStatus.PAUSED,\\n            \\\"Auction must be paused before update\\\"\\n        );\\n\\n        auctions_[_auctionID].status = AuctionStatus.INACTIVE;\\n        auctions_[_auctionID].auctionName = \\\"\\\";\\n        auctionAddress_[auctions_[_auctionID].auctionContract] = 0;\\n        auctions_[_auctionID].auctionContract = address(0);\\n\\n        emit AuctionRemoved(\\n            msg.sender,\\n            _auctionID\\n        );\\n    } \\n\\n    // -----------------------------------------------------------------------\\n    // INTERNAL MODIFYING FUNCTIONS\\n    // -----------------------------------------------------------------------\\n\\n    function _updateSecondarySalesSplit(\\n        uint256 _newCreatorSplit,\\n        uint256 _newSellerSplit,\\n        uint256 _newSystemSplit\\n    )\\n        internal\\n    {\\n        uint256 total = _newCreatorSplit\\n            .add(_newSellerSplit)\\n            .add(_newSystemSplit);\\n\\n        require(\\n            total == SPLIT_SCALING_FACTOR,\\n            \\\"New split not equal to 100%\\\"\\n        );\\n\\n        emit SecondarySalesSplitUpdated(\\n            creatorSplitSecondary_,\\n            _newCreatorSplit,\\n            sellerSplitSecondary_,\\n            _newSellerSplit,\\n            systemSplitSecondary_,\\n            _newSystemSplit\\n        );\\n\\n        creatorSplitSecondary_ = _newCreatorSplit;\\n        sellerSplitSecondary_ = _newSellerSplit;\\n        systemSplitSecondary_ = _newSystemSplit;\\n    }\\n\\n    function _updateFirstSaleSplit(\\n        uint256 _newCreatorSplit,\\n        uint256 _newSystemSplit\\n    )\\n        internal\\n    {\\n        uint256 total = _newCreatorSplit.add(_newSystemSplit);\\n\\n        require(\\n            total == SPLIT_SCALING_FACTOR,\\n            \\\"New split not equal to 100%\\\"\\n        );\\n        \\n        emit FirstSaleSplitUpdated(\\n            creatorSplitFirstSale_,\\n            _newCreatorSplit,\\n            systemSplitFirstSale_,\\n            _newSystemSplit\\n        );\\n\\n        creatorSplitFirstSale_ = _newCreatorSplit;\\n        systemSplitFirstSale_ = _newSystemSplit;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/nft/INft.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\ninterface INft {\\n\\n    // -----------------------------------------------------------------------\\n    // NON-MODIFYING FUNCTIONS (VIEW)\\n    // -----------------------------------------------------------------------\\n\\n    /**\\n     * @param   _tokenID The ID of the token\\n     * @return  address of the owner for this token  \\n     */\\n    function ownerOf(uint256 _tokenID) external view returns(address);\\n\\n    /**\\n     * @param   _tokenID The ID of the token\\n     * @return  address of the creator of the token\\n     */\\n    function creatorOf(uint256 _tokenID) external view returns(address);\\n\\n    /**\\n     * @param   _owner The address of the address to check\\n     * @return  uint256 The number of tokens the user owns\\n     */\\n    function balanceOf(address _owner) external view returns(uint256);\\n\\n    /**\\n     * @return  uint256 The total number of circulating tokens\\n     */\\n    function totalSupply() external view returns(uint256);\\n\\n    /**\\n     * @param   _owner Address of the owner\\n     * @param   _spender The address of the spender\\n     * @param   _tokenID ID of the token to check\\n     * @return  bool The approved status of the spender against the owner\\n     */\\n    function isApprovedSpenderOf(\\n        address _owner, \\n        address _spender, \\n        uint256 _tokenID\\n    )\\n        external\\n        view\\n        returns(bool);\\n\\n    /**\\n     * @param   _minter Address of the minter being checked\\n     * @return  isMinter If the minter has the minter role\\n     * @return  isActiveMinter If the minter is an active minter \\n     */\\n    function isMinter(\\n        address _minter\\n    ) \\n        external \\n        view \\n        returns(\\n            bool isMinter, \\n            bool isActiveMinter\\n        );\\n\\n    function isActive() external view returns(bool);\\n\\n    function isTokenBatch(uint256 _tokenID) external view returns(uint256);\\n\\n    function getBatchInfo(\\n        uint256 _batchID\\n    ) \\n        external \\n        view\\n        returns(\\n            uint256 baseTokenID,\\n            uint256[] memory tokenIDs,\\n            bool limitedStock,\\n            uint256 totalMinted\\n        );\\n\\n    // -----------------------------------------------------------------------\\n    // PUBLIC STATE MODIFYING FUNCTIONS\\n    // -----------------------------------------------------------------------\\n\\n    /**\\n     * @param   _spender The address of the spender\\n     * @param   _tokenID ID of the token to check\\n     * @param   _approvalSpender The status of the spenders approval on the \\n     *          owner\\n     * @notice  Will revert if msg.sender is the spender or if the msg.sender\\n     *          is not the owner of the token.\\n     */\\n    function approveSpender(\\n        address _spender,\\n        uint256 _tokenID,\\n        bool _approvalSpender\\n    )\\n        external;\\n\\n    // -----------------------------------------------------------------------\\n    //  ONLY AUCTIONS (hub or spokes) STATE MODIFYING FUNCTIONS\\n    // -----------------------------------------------------------------------\\n\\n    /**\\n     * @param   _to Address of receiver \\n     * @param   _tokenID Token to transfer\\n     * @notice  Only auctions (hub or spokes) will be able to transfer tokens.\\n     *          Will revert if to address is the 0x address. Will revert if the \\n     *          msg.sender is not the token owner. Will revert if msg.sender is\\n     *          to to address\\n     */\\n    function transfer(\\n        address _to,\\n        uint256 _tokenID\\n    )\\n        external;\\n\\n    /**\\n     * @param   _to Address to transfer to\\n     * @param   _tokenIDs Array of tokens being transferred\\n     * @notice  Only auctions (hub or spokes) will be able to transfer tokens.\\n     *          Will revert if to address is the 0x address. Will revert if the \\n     *          msg.sender is not the token owner. Will revert if msg.sender is\\n     *          to to address\\n     */\\n    function batchTransfer(\\n        address _to,\\n        uint256[] memory _tokenIDs\\n    )\\n        external;\\n\\n    /**\\n     * @param   _from Address being transferee from \\n     * @param   _to Address to transfer to\\n     * @param   _tokenID ID of token being transferred\\n     * @notice  Only auctions (hub or spokes) will be able to transfer tokens.\\n     *          Will revert if to address is the 0x address. Will revert if\\n     *          msg.sender is not approved spender of token on _from address.\\n     *          Will revert if the _from is not the token owner. Will revert if \\n     *          _from is _to address.\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenID\\n    )\\n        external;\\n\\n    /**\\n     * @param   _from Address being transferee from \\n     * @param   _to Address to transfer to\\n     * @param   _tokenIDs Array of tokens being transferred\\n     * @notice  Only auctions (hub or spokes) will be able to transfer tokens.\\n     *          Will revert if to address is the 0x address. Will revert if\\n     *          msg.sender is not approved spender of token on _from address.\\n     *          Will revert if the _from is not the token owner. Will revert if \\n     *          _from is _to address.\\n     */\\n    function batchTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256[] memory _tokenIDs\\n    )\\n        external;\\n\\n    // -----------------------------------------------------------------------\\n    // ONLY MINTER STATE MODIFYING FUNCTIONS\\n    // -----------------------------------------------------------------------\\n\\n    /**\\n     * @param   _tokenCreator Address of the creator. Address will receive the \\n     *          royalties from sales of the NFT\\n     * @param   _mintTo The address that should receive the token. Note that on\\n     *          the initial sale this address will not receive the sale \\n     *          collateral. Sale collateral will be distributed to creator and\\n     *          system fees\\n     * @notice  Only valid active minters will be able to mint new tokens\\n     */\\n    function mint(\\n        address _tokenCreator, \\n        address _mintTo,\\n        string calldata identifier,      \\n        string calldata location,\\n        bytes32 contentHash \\n    ) external returns(uint256);\\n\\n    /**\\n     * @param   _mintTo The address that should receive the token. Note that on\\n     *          the initial sale this address will not receive the sale \\n     *          collateral. Sale collateral will be distributed to creator and\\n     *          system fees\\n     * @param   _amount Amount of tokens to mint\\n     * @param   _baseTokenID ID of the token being duplicated\\n     * @param   _isLimitedStock Bool for if the batch has a pre-set limit\\n     */\\n    function batchDuplicateMint(\\n        address _mintTo,\\n        uint256 _amount,\\n        uint256 _baseTokenID,\\n        bool _isLimitedStock\\n    )\\n        external\\n        returns(uint256[] memory);\\n}\"\r\n    },\r\n    \"contracts/auctions/IAuction.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\ninterface IAuction {\\n    /**\\n     * @return  bool The active status of the auction. Will only return true if\\n     *          the auction has been initialised and is active.\\n     */\\n    function isActive() external view returns (bool);\\n\\n    /**\\n     * @param   _lotID The ID of the lot.\\n     * @return  bool If bidding has started on the lot.\\n     */\\n    function hasBiddingStarted(uint256 _lotID) external view returns (bool);\\n\\n    /**\\n     * @return  uint256 The auction ID as set by the auction hub of this\\n     *          auction.\\n     */\\n    function getAuctionID() external view returns (uint256);\\n\\n    /**\\n     * @param   _auctionID ID of the auction this auction is\\n     * @dev     This call will be protected so only the Auction hub can call it.\\n     *          This function will also set the auction state to active.\\n     */\\n    function init(uint256 _auctionID) external returns (bool);\\n\\n    /**\\n     * @param   _lotID ID of the lot\\n     * @dev     Transfers the token from the auction back to the lot requester\\n     */\\n    function cancelLot(uint256 _lotID) external;\\n}\\n\"\r\n    },\r\n    \"contracts/auctions/IHub.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\ninterface IHub {\\n    enum LotStatus {\\n        NO_LOT,\\n        LOT_REQUESTED,\\n        LOT_CREATED,\\n        AUCTION_ACTIVE,\\n        AUCTION_RESOLVED,\\n        AUCTION_RESOLVED_AND_CLAIMED,\\n        AUCTION_CANCELED\\n    }\\n\\n    // -----------------------------------------------------------------------\\n    // NON-MODIFYING FUNCTIONS (VIEW)\\n    // -----------------------------------------------------------------------\\n\\n    function getLotInformation(uint256 _lotID)\\n        external\\n        view\\n        returns (\\n            address owner,\\n            uint256 tokenID,\\n            uint256 auctionID,\\n            LotStatus status\\n        );\\n\\n    function getAuctionInformation(uint256 _auctionID)\\n        external\\n        view\\n        returns (\\n            bool active,\\n            string memory auctionName,\\n            address auctionContract,\\n            bool onlyPrimarySales\\n        );\\n\\n    function getAuctionID(address _auction) external view returns (uint256);\\n\\n    function isAuctionActive(uint256 _auctionID) external view returns (bool);\\n\\n    function getAuctionCount() external view returns (uint256);\\n\\n    function isAuctionHubImplementation() external view returns (bool);\\n\\n    function isFirstSale(uint256 _tokenID) external view returns (bool);\\n\\n    function getFirstSaleSplit()\\n        external\\n        view\\n        returns (uint256 creatorSplit, uint256 systemSplit);\\n\\n    function getSecondarySaleSplits()\\n        external\\n        view\\n        returns (\\n            uint256 creatorSplit,\\n            uint256 sellerSplit,\\n            uint256 systemSplit\\n        );\\n\\n    function getScalingFactor() external view returns (uint256);\\n\\n    // -----------------------------------------------------------------------\\n    // PUBLIC STATE MODIFYING FUNCTIONS\\n    // -----------------------------------------------------------------------\\n\\n    function requestAuctionLot(uint256 _auctionType, uint256 _tokenID)\\n        external\\n        returns (uint256 lotID);\\n\\n    // -----------------------------------------------------------------------\\n    // ONLY AUCTIONS STATE MODIFYING FUNCTIONS\\n    // -----------------------------------------------------------------------\\n\\n    function firstSaleCompleted(uint256 _tokenID) external;\\n\\n    function lotCreated(uint256 _auctionID, uint256 _lotID) external;\\n\\n    function lotAuctionStarted(uint256 _auctionID, uint256 _lotID) external;\\n\\n    function lotAuctionCompleted(uint256 _auctionID, uint256 _lotID) external;\\n\\n    function lotAuctionCompletedAndClaimed(uint256 _auctionID, uint256 _lotID)\\n        external;\\n\\n    function cancelLot(uint256 _auctionID, uint256 _lotID) external;\\n\\n    // -----------------------------------------------------------------------\\n    // ONLY REGISTRY STATE MODIFYING FUNCTIONS\\n    // -----------------------------------------------------------------------\\n\\n    function init() external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/registry/Registry.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n// Registry managed contracts\\nimport \\\"../auctions/IHub.sol\\\";\\nimport \\\"../royalties/IRoyalties.sol\\\";\\nimport \\\"../nft/INft.sol\\\";\\n\\ncontract Registry is Ownable, ReentrancyGuard {\\n    // -----------------------------------------------------------------------\\n    // STATE\\n    // -----------------------------------------------------------------------\\n\\n    // Storage of current hub instance\\n    IHub internal hubInstance_;\\n    // Storage of current royalties instance\\n    IRoyalties internal royaltiesInstance_;\\n    // Storage of NFT contract (cannot be changed)\\n    INft internal nftInstance_;\\n\\n    // -----------------------------------------------------------------------\\n    // CONSTRUCTOR\\n    // -----------------------------------------------------------------------\\n\\n    constructor(address _nft) Ownable() {\\n        require(INft(_nft).isActive(), \\\"REG: Address invalid NFT\\\");\\n        nftInstance_ = INft(_nft);\\n    }\\n\\n    // -----------------------------------------------------------------------\\n    // NON-MODIFYING FUNCTIONS (VIEW)\\n    // -----------------------------------------------------------------------\\n\\n    function getHub() external view returns (address) {\\n        return address(hubInstance_);\\n    }\\n\\n    function getRoyalties() external view returns (address) {\\n        return address(royaltiesInstance_);\\n    }\\n\\n    function getNft() external view returns (address) {\\n        return address(nftInstance_);\\n    }\\n\\n    function isActive() external view returns (bool) {\\n        return true;\\n    }\\n\\n    // -----------------------------------------------------------------------\\n    //  ONLY OWNER STATE MODIFYING FUNCTIONS\\n    // -----------------------------------------------------------------------\\n\\n    function updateHub(address _newHub) external onlyOwner nonReentrant {\\n        IHub newHub = IHub(_newHub);\\n        require(_newHub != address(0), \\\"REG: cannot set HUB to 0x\\\");\\n        require(\\n            address(hubInstance_) != _newHub,\\n            \\\"REG: Cannot set HUB to existing\\\"\\n        );\\n        require(\\n            newHub.isAuctionHubImplementation(),\\n            \\\"REG: HUB implementation error\\\"\\n        );\\n        require(IHub(_newHub).init(), \\\"REG: HUB could not be init\\\");\\n        hubInstance_ = IHub(_newHub);\\n    }\\n\\n    function updateRoyalties(address _newRoyalties)\\n        external\\n        onlyOwner\\n        nonReentrant\\n    {\\n        require(_newRoyalties != address(0), \\\"REG: cannot set ROY to 0x\\\");\\n        require(\\n            address(royaltiesInstance_) != _newRoyalties,\\n            \\\"REG: Cannot set ROY to existing\\\"\\n        );\\n        require(IRoyalties(_newRoyalties).init(), \\\"REG: ROY could not be init\\\");\\n        royaltiesInstance_ = IRoyalties(_newRoyalties);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/royalties/IRoyalties.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\ninterface IRoyalties {\\n    // -----------------------------------------------------------------------\\n    // NON-MODIFYING FUNCTIONS (VIEW)\\n    // -----------------------------------------------------------------------\\n\\n    function getBalance(address _user) external view returns (uint256);\\n\\n    function getCollateral() external view returns (address);\\n\\n    // -----------------------------------------------------------------------\\n    // PUBLIC STATE MODIFYING FUNCTIONS\\n    // -----------------------------------------------------------------------\\n\\n    function deposit(address _to, uint256 _amount) external payable;\\n\\n    function withdraw(uint256 _amount) external payable;\\n\\n    // -----------------------------------------------------------------------\\n    // ONLY REGISTRY STATE MODIFYING FUNCTIONS\\n    // -----------------------------------------------------------------------\\n\\n    function init() external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_primaryCreatorSplit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_primarySystemSplit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondaryCreatorSplit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondarySellerSplit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondarySystemSplit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"auctionName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"auctionContract\",\"type\":\"address\"}],\"name\":\"AuctionRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionID\",\"type\":\"uint256\"}],\"name\":\"AuctionRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAuctionContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAuctionContract\",\"type\":\"address\"}],\"name\":\"AuctionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCreatorSplit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCreatorSplit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSystemSplit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSystemSplit\",\"type\":\"uint256\"}],\"name\":\"FirstSaleSplitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotID\",\"type\":\"uint256\"}],\"name\":\"LotRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"auction\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IHub.LotStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"LotStatusChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCreatorSplit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCreatorSplit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSellerSplit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSellerSplit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSystemSplit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSystemSplit\",\"type\":\"uint256\"}],\"name\":\"SecondarySalesSplitUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lotID\",\"type\":\"uint256\"}],\"name\":\"cancelLot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"firstSaleCompleted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auction\",\"type\":\"address\"}],\"name\":\"getAuctionID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionID\",\"type\":\"uint256\"}],\"name\":\"getAuctionInformation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"auctionName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"auctionContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"onlyPrimarySales\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFirstSaleSplit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"creatorSplit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"systemSplit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotID\",\"type\":\"uint256\"}],\"name\":\"getLotInformation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionID\",\"type\":\"uint256\"},{\"internalType\":\"enum IHub.LotStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getScalingFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSecondarySaleSplits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"creatorSplit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerSplit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"systemSplit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionID\",\"type\":\"uint256\"}],\"name\":\"isAuctionActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAuctionHubImplementation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"isFirstSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lotID\",\"type\":\"uint256\"}],\"name\":\"lotAuctionCompleted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lotID\",\"type\":\"uint256\"}],\"name\":\"lotAuctionCompletedAndClaimed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lotID\",\"type\":\"uint256\"}],\"name\":\"lotAuctionStarted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lotID\",\"type\":\"uint256\"}],\"name\":\"lotCreated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionID\",\"type\":\"uint256\"}],\"name\":\"pauseAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_auctionInstance\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_onlyPrimarySales\",\"type\":\"bool\"}],\"name\":\"registerAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionID\",\"type\":\"uint256\"}],\"name\":\"removeAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"requestAuctionLot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lotID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newImplementation\",\"type\":\"address\"}],\"name\":\"updateAuctionInstance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCreatorSplit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newSystemSplit\",\"type\":\"uint256\"}],\"name\":\"updateFirstSaleSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCreatorSplit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newSellerSplit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newSystemSplit\",\"type\":\"uint256\"}],\"name\":\"updateSecondarySalesSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AuctionHub","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005c446ab1443dfb034cb06bcc231e5befe36af2ba0000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000000000000000000007d000000000000000000000000000000000000000000000000000000000000005dc0000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000000000000000000001f4","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}