{"status":"1","message":"OK","result":[{"SourceCode":"{\"CarefulMath.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\n/**\\n  * @title Careful Math\\n  * @author Compound\\n  * @notice Derived from OpenZeppelin\\u0027s SafeMath library\\n  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n  */\\ncontract CarefulMath {\\n\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n    * @dev Multiplies two numbers, returns an error on overflow.\\n    */\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, truncating the quotient.\\n    */\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b \\u003c= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, returns an error on overflow.\\n    */\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        uint c = a + b;\\n\\n        if (c \\u003e= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev add a and b and then subtract c\\n    */\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\n        (MathError err0, uint sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\"},\"EIP20Interface.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n      * @notice Get the total number of tokens in circulation\\n      * @return The supply of tokens\\n      */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return Whether or not the transfer succeeded\\n      */\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return Whether or not the transfer succeeded\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved (-1 means infinite)\\n      * @return Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return The number of tokens allowed to be spent (-1 means infinite)\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\"},\"EIP20NonStandardInterface.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved\\n      * @return Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return The number of tokens allowed to be spent\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\"},\"ErrorReporter.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\ncontract MomaMasterErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        MOMAMASTER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        BAD_INPUT,\\n        MOMAMASTER_REJECTION,\\n        MOMAMASTER_CALCULATION_ERROR,\\n        INTEREST_RATE_MODEL_ERROR,\\n        INVALID_ACCOUNT_PAIR,\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\n        INVALID_COLLATERAL_FACTOR,\\n        MATH_ERROR,\\n        MARKET_NOT_FRESH,\\n        MARKET_NOT_LISTED,\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\n        TOKEN_INSUFFICIENT_BALANCE,\\n        TOKEN_INSUFFICIENT_CASH,\\n        TOKEN_TRANSFER_IN_FAILED,\\n        TOKEN_TRANSFER_OUT_FAILED\\n    }\\n\\n    /*\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\n     *       This is because FailureInfo grows significantly faster, and\\n     *       the order of Error has some meaning, while the order of FailureInfo\\n     *       is entirely arbitrary.\\n     */\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_FEES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_MOMA_FEES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        BORROW_ACCRUE_INTEREST_FAILED,\\n        BORROW_CASH_NOT_AVAILABLE,\\n        BORROW_FRESHNESS_CHECK,\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        BORROW_MARKET_NOT_LISTED,\\n        BORROW_MOMAMASTER_REJECTION,\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        LIQUIDATE_MOMAMASTER_REJECTION,\\n        LIQUIDATE_MOMAMASTER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        LIQUIDATE_FRESHNESS_CHECK,\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        LIQUIDATE_SEIZE_MOMAMASTER_REJECTION,\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_ACCRUE_INTEREST_FAILED,\\n        MINT_MOMAMASTER_REJECTION,\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\n        MINT_FRESHNESS_CHECK,\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        MINT_TRANSFER_IN_FAILED,\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\n        REDEEM_MOMAMASTER_REJECTION,\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\n        REDEEM_FRESHNESS_CHECK,\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n        REDUCE_RESERVES_ADMIN_CHECK,\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n        REDUCE_RESERVES_FRESH_CHECK,\\n        REDUCE_RESERVES_VALIDATION,\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_MOMAMASTER_REJECTION,\\n        REPAY_BORROW_FRESHNESS_CHECK,\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_MOMAMASTER_OWNER_CHECK,\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_ORACLE_MARKET_NOT_LISTED,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n        TRANSFER_MOMAMASTER_REJECTION,\\n        TRANSFER_NOT_ALLOWED,\\n        TRANSFER_NOT_ENOUGH,\\n        TRANSFER_TOO_MUCH,\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n        ADD_RESERVES_FRESH_CHECK,\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_FEE_ADMIN_OWNER_CHECK,\\n        SET_FEE_RECEIVER_OWNER_CHECK,\\n        SET_FEE_RECEIVER_ADDRESS_VALIDATION,\\n        SET_FEE_FACTOR_ACCRUE_INTEREST_FAILED,\\n        SET_FEE_FACTOR_ADMIN_CHECK,\\n        SET_FEE_FACTOR_FRESH_CHECK,\\n        SET_FEE_FACTOR_BOUNDS_CHECK,\\n        COLLECT_FEES_ACCRUE_INTEREST_FAILED,\\n        COLLECT_FEES_ADMIN_CHECK,\\n        COLLECT_FEES_FRESH_CHECK,\\n        COLLECT_FEES_CASH_NOT_AVAILABLE,\\n        COLLECT_FEES_VALIDATION,\\n        COLLECT_MOMA_FEES_ACCRUE_INTEREST_FAILED,\\n        COLLECT_MOMA_FEES_ADMIN_CHECK,\\n        COLLECT_MOMA_FEES_FRESH_CHECK,\\n        COLLECT_MOMA_FEES_CASH_NOT_AVAILABLE,\\n        COLLECT_MOMA_FEES_VALIDATION\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\"},\"Exponential.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport \\\"./CarefulMath.sol\\\";\\nimport \\\"./ExponentialNoError.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @dev Legacy contract for compatibility reasons with existing contracts that still use MathError\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath, ExponentialNoError {\\n    /**\\n     * @dev Creates an exponential from numerator and denominator values.\\n     *      Note: Returns an error if (`num` * 10e18) \\u003e MAX_INT,\\n     *            or if `denom` is zero.\\n     */\\n    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\\n    }\\n\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\n     */\\n    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(product));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return addUInt(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\n     */\\n    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n        return getExp(numerator, divisor.mantissa);\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(fraction));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n\\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n     */\\n    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {\\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n     */\\n    function divExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        return getExp(a.mantissa, b.mantissa);\\n    }\\n}\\n\"},\"ExponentialNoError.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n    uint constant expScale = 1e18;\\n    uint constant doubleScale = 1e36;\\n    uint constant halfExpScale = expScale/2;\\n    uint constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) pure internal returns (uint) {\\n        // Note: We are not using careful math here as we\\u0027re performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mul_ScalarTruncate(Exp memory a, uint scalar) pure internal returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return add_(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa \\u003c right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp \\u003c= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa \\u003c= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp \\u003e right Exp.\\n     */\\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa \\u003e right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\\n        require(n \\u003c 2**224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\\n        require(n \\u003c 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(uint a, uint b) pure internal returns (uint) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        uint c = a + b;\\n        require(c \\u003e= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(uint a, uint b) pure internal returns (uint) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b \\u003c= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n    }\\n\\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n    }\\n\\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) pure internal returns (uint) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, errorMessage);\\n        return c;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n    }\\n\\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n    }\\n\\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Double memory b) pure internal returns (uint) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint a, uint b) pure internal returns (uint) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b \\u003e 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n    }\\n}\\n\"},\"InterestRateModel.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\n/**\\n  * @title Compound\\u0027s InterestRateModel Interface\\n  * @author Compound\\n  */\\ncontract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amount of reserves the market has\\n      * @param fees The total amount of fees the market has\\n      * @param momaFees The total amount of Moma fees the market has\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(\\n        uint cash, \\n        uint borrows, \\n        uint reserves, \\n        uint fees, \\n        uint momaFees\\n    ) external view returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @param fees The total amount of fees the market has\\n      * @param feeFactorMantissa The current fee factor the market has\\n      * @param momaFees The total amount of Moma fees the market has\\n      * @param momaFeeFactorMantissa The current Moma fees factor the market has\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(\\n        uint cash, \\n        uint borrows, \\n        uint reserves, \\n        uint reserveFactorMantissa, \\n        uint fees, \\n        uint feeFactorMantissa, \\n        uint momaFees, \\n        uint momaFeeFactorMantissa\\n    ) external view returns (uint);\\n}\\n\"},\"MomaFactory.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport \\\"./MomaMaster.sol\\\";\\nimport \\\"./MomaPool.sol\\\";\\nimport \\\"./MomaFactoryInterface.sol\\\";\\nimport \\\"./MomaFactoryProxy.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\n\\n\\ncontract MomaFactory is MomaFactoryInterface, MomaFactoryStorage {\\n\\n    bool public constant isMomaFactory = true;\\n    uint public constant feeFactorMaxMantissa = 0.3e18;\\n\\n    function createPool() external returns (address pool) {\\n        bytes memory bytecode = type(MomaPool).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(msg.sender));\\n        assembly {\\n            pool := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        IMomaPool(pool).initialize(msg.sender, momaMaster);\\n        PoolInfo storage info = pools[pool];\\n        info.creator = msg.sender;\\n        info.poolFeeAdmin = feeAdmin;\\n        info.poolFeeReceiver = defualtFeeReceiver;\\n        info.feeFactor = defualtFeeFactorMantissa;\\n        allPools.push(pool);\\n        emit PoolCreated(pool, msg.sender, allPools.length);\\n    }\\n\\n    /*** view Functions ***/\\n    function getAllPools() public view returns (address[] memory) {\\n        return allPools;\\n    }\\n\\n    function allPoolsLength() external view returns (uint) {\\n        return allPools.length;\\n    }\\n\\n    function getMomaFeeAdmin(address pool) external view returns (address) {\\n        return pools[pool].poolFeeAdmin;\\n    }\\n\\n    function getMomaFeeReceiver(address pool) external view returns (address payable) {\\n        return pools[pool].poolFeeReceiver;\\n    }\\n\\n    function getMomaFeeFactorMantissa(address pool, address underlying) external view returns (uint) {\\n        if (pools[pool].noFee || noFeeTokens[underlying]) {\\n            return 0;\\n        } else if (tokenFeeFactors[underlying] != 0) {\\n            return tokenFeeFactors[underlying];\\n        } else {\\n            return pools[pool].feeFactor;\\n        }\\n    }\\n\\n    function isMomaPool(address pool) external view returns (bool) {\\n        return pools[pool].creator != address(0);\\n    }\\n\\n    function isLendingPool(address pool) external view returns (bool) {\\n        return pools[pool].isLending;\\n    }\\n\\n    function isTimelock(address b) external view returns (bool) {\\n        return isCodeSame(timelock, b);\\n    }\\n\\n    function isMomaMaster(address b) external view returns (bool) {\\n        return isCodeSame(momaMaster, b);\\n    }\\n\\n    function isMEtherImplementation(address b) external view returns (bool) {\\n        return isCodeSame(mEtherImplementation, b);\\n    }\\n\\n    function isMErc20Implementation(address b) external view returns (bool) {\\n        return isCodeSame(mErc20Implementation, b);\\n    }\\n\\n    function isMToken(address b) external view returns (bool) {\\n        return isCodeSame(mErc20, b) || isCodeSame(mEther, b);\\n    }\\n\\n    function isCodeSame(address a, address b) public view returns (bool) {\\n        return keccak256(at(a)) == keccak256(at(b));\\n    }\\n\\n    function at(address _addr) internal view returns (bytes memory o_code) {\\n        assembly {\\n            // retrieve the size of the code, this needs assembly\\n            let size := extcodesize(_addr)\\n            // allocate output byte array - this could also be done without assembly\\n            // by using o_code = new bytes(size)\\n            o_code := mload(0x40)\\n            // new \\\"memory end\\\" including padding\\n            mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n            // store length in memory\\n            mstore(o_code, size)\\n            // actually retrieve the code, this needs assembly\\n            extcodecopy(_addr, add(o_code, 0x20), 0, size)\\n        }\\n    }\\n\\n\\n    /*** pool Functions ***/\\n    function upgradeLendingPool() external returns (bool) {\\n        // pool must be msg.sender, only pool can call this function\\n        PoolInfo storage info = pools[msg.sender];\\n        require(info.creator != address(0), \\u0027MomaFactory: pool not created\\u0027);\\n        require(info.isLending == false, \\u0027MomaFactory: can only upgrade once\\u0027);\\n        require(info.allowUpgrade == true || allowUpgrade == true, \\u0027MomaFactory: upgrade not allowed\\u0027);\\n\\n        IMomaFarming(momaFarming).upgradeLendingPool(msg.sender);\\n        info.isLending = true;\\n        lendingPoolNum += 1;\\n        emit NewLendingPool(msg.sender);\\n\\n        return true;\\n    }\\n\\n    /*** admin Functions ***/\\n    function _become(MomaFactoryProxy proxy) public {\\n        require(msg.sender == proxy.admin(), \\\"only momaFactory admin can change brains\\\");\\n        require(proxy._acceptImplementation() == 0, \\\"change not authorized\\\");\\n    }\\n\\n    function _setMomaFarming(address newMomaFarming) external {\\n        require(msg.sender == admin, \\u0027MomaFactory: admin check\\u0027);\\n        require(IMomaFarming(newMomaFarming).isMomaFarming() == true, \\u0027MomaFactory: newMomaFarming check\\u0027);\\n        address oldMomaFarming = momaFarming;\\n        momaFarming = newMomaFarming;\\n        emit NewMomaFarming(oldMomaFarming, newMomaFarming);\\n    }\\n\\n    function _setFarmingDelegate(address newDelegate) external {\\n        require(msg.sender == admin, \\u0027MomaFactory: admin check\\u0027);\\n        require(IFarmingDelegate(newDelegate).isFarmingDelegate() == true, \\u0027MomaFactory: newDelegate check\\u0027);\\n        address oldDelegate = farmingDelegate;\\n        farmingDelegate = newDelegate;\\n        emit NewFarmingDelegate(oldDelegate, newDelegate);\\n    }\\n\\n    function _setOracle(address newOracle) external {\\n        require(msg.sender == admin, \\u0027MomaFactory: admin check\\u0027);\\n        require(PriceOracle(newOracle).isPriceOracle(), \\u0027MomaFactory: newOracle check\\u0027);\\n        address oldOracle = oracle;\\n        oracle = newOracle;\\n        emit NewOracle(oldOracle, newOracle);\\n    }\\n\\n    function _setTimelock(address newTimelock) external {\\n        require(msg.sender == admin, \\u0027MomaFactory: admin check\\u0027);\\n        address oldTimelock = timelock;\\n        timelock = newTimelock;\\n        emit NewTimelock(oldTimelock, newTimelock);\\n    }\\n\\n    function _setMomaMaster(address newMomaMaster) external {\\n        require(msg.sender == admin, \\u0027MomaFactory: admin check\\u0027);\\n        require(MomaMasterInterface(newMomaMaster).isMomaMaster() == true, \\u0027MomaFactory: newMomaMaster check\\u0027);\\n        address oldMomaMaster = momaMaster;\\n        momaMaster = newMomaMaster;\\n        emit NewMomaMaster(oldMomaMaster, newMomaMaster);\\n    }\\n\\n    function _setMEther(address newMEther) external {\\n        require(msg.sender == admin, \\u0027MomaFactory: admin check\\u0027);\\n        require(MTokenInterface(newMEther).isMToken() == true, \\u0027MomaFactory: newMEther check\\u0027);\\n        address oldEther = mEther;\\n        mEther = newMEther;\\n        emit NewMEther(oldEther, newMEther);\\n    }\\n\\n    function _setMErc20(address newMErc20) external {\\n        require(msg.sender == admin, \\u0027MomaFactory: admin check\\u0027);\\n        require(MTokenInterface(newMErc20).isMToken() == true, \\u0027MomaFactory: newMErc20 check\\u0027);\\n        address oldMErc20 = mErc20;\\n        mErc20 = newMErc20;\\n        emit NewMErc20(oldMErc20, newMErc20);\\n    }\\n\\n    function _setMEtherImplementation(address newMEtherImplementation) external {\\n        require(msg.sender == admin, \\u0027MomaFactory: admin check\\u0027);\\n        require(MTokenInterface(newMEtherImplementation).isMToken() == true, \\u0027MomaFactory: newMEtherImplementation check\\u0027);\\n        address oldMEtherImplementation = mEtherImplementation;\\n        mEtherImplementation = newMEtherImplementation;\\n        emit NewMEtherImplementation(oldMEtherImplementation, newMEtherImplementation);\\n    }\\n\\n    function _setMErc20Implementation(address newMErc20Implementation) external {\\n        require(msg.sender == admin, \\u0027MomaFactory: admin check\\u0027);\\n        require(MTokenInterface(newMErc20Implementation).isMToken() == true, \\u0027MomaFactory: newMErc20Implementation check\\u0027);\\n        address oldMErc20Implementation = mErc20Implementation;\\n        mErc20Implementation = newMErc20Implementation;\\n        emit NewMErc20Implementation(oldMErc20Implementation, newMErc20Implementation);\\n    }\\n\\n    function _setAllowUpgrade(bool allow) external {\\n        require(msg.sender == admin, \\u0027MomaFactory: admin check\\u0027);\\n        allowUpgrade = allow;\\n    }\\n\\n    function _allowUpgradePool(address pool) external {\\n        require(msg.sender == admin, \\u0027MomaFactory: admin check\\u0027);\\n        PoolInfo storage info = pools[pool];\\n        require(info.creator != address(0), \\u0027MomaFactory: pool not created\\u0027);\\n        info.allowUpgrade = true;\\n    }\\n\\n    /*** feeAdmin Functions ***/\\n    function setFeeAdmin(address _newFeeAdmin) external {\\n        require(msg.sender == feeAdmin, \\u0027MomaFactory: feeAdmin check\\u0027);\\n        require(_newFeeAdmin != address(0), \\u0027MomaFactory: newFeeAdmin check\\u0027);\\n        address oldFeeAdmin = feeAdmin;\\n        feeAdmin = _newFeeAdmin;\\n        emit NewFeeAdmin(oldFeeAdmin, _newFeeAdmin);\\n    }\\n\\n    function setDefualtFeeReceiver(address payable _newFeeReceiver) external {\\n        require(msg.sender == feeAdmin, \\u0027MomaFactory: feeAdmin check\\u0027);\\n        require(_newFeeReceiver != address(0), \\u0027MomaFactory: newFeeReceiver check\\u0027);\\n        address oldFeeReceiver = defualtFeeReceiver;\\n        defualtFeeReceiver = _newFeeReceiver;\\n        emit NewDefualtFeeReceiver(oldFeeReceiver, _newFeeReceiver);\\n    }\\n\\n    function setDefualtFeeFactor(uint _newFeeFactor) external {\\n        require(msg.sender == feeAdmin, \\u0027MomaFactory: feeAdmin check\\u0027);\\n        require(_newFeeFactor \\u003c= feeFactorMaxMantissa, \\u0027MomaFactory: newFeeFactor bound check\\u0027);\\n        uint oldFeeFactor = defualtFeeFactorMantissa;\\n        defualtFeeFactorMantissa = _newFeeFactor;\\n        emit NewDefualtFeeFactor(oldFeeFactor, _newFeeFactor);\\n    }\\n\\n    function setNoFeeTokenStatus(address token, bool _noFee) external {\\n        require(msg.sender == feeAdmin, \\u0027MomaFactory: feeAdmin check\\u0027);\\n        bool oldNoFeeTokenStatus = noFeeTokens[token];\\n        noFeeTokens[token] = _noFee;\\n        emit NewNoFeeTokenStatus(token, oldNoFeeTokenStatus, _noFee);\\n    }\\n\\n    function setTokenFeeFactor(address token, uint _newFeeFactor) external {\\n        require(msg.sender == feeAdmin, \\u0027MomaFactory: feeAdmin check\\u0027);\\n        require(_newFeeFactor \\u003c= feeFactorMaxMantissa, \\u0027MomaFactory: newFeeFactor bound check\\u0027);\\n        uint oldFeeFactor = tokenFeeFactors[token];\\n        tokenFeeFactors[token] = _newFeeFactor;\\n        emit NewTokenFeeFactor(token, oldFeeFactor, _newFeeFactor);\\n    }\\n\\n    /*** poolFeeAdmin Functions ***/\\n    function setPoolFeeAdmin(address pool, address _newPoolFeeAdmin) external {\\n        PoolInfo storage info = pools[pool];\\n        require(msg.sender == info.poolFeeAdmin, \\u0027MomaFactory: poolFeeAdmin check\\u0027);\\n        require(_newPoolFeeAdmin != address(0), \\u0027MomaFactory: newPoolFeeAdmin check\\u0027);\\n        address oldPoolFeeAdmin = info.poolFeeAdmin;\\n        info.poolFeeAdmin = _newPoolFeeAdmin;\\n        emit NewPoolFeeAdmin(pool, oldPoolFeeAdmin, _newPoolFeeAdmin);\\n    }\\n\\n    function setPoolFeeReceiver(address pool, address payable _newPoolFeeReceiver) external {\\n        PoolInfo storage info = pools[pool];\\n        require(msg.sender == info.poolFeeAdmin, \\u0027MomaFactory: poolFeeAdmin check\\u0027);\\n        require(_newPoolFeeReceiver != address(0), \\u0027MomaFactory: newPoolFeeReceiver check\\u0027);\\n        address oldPoolFeeReceiver = info.poolFeeReceiver;\\n        info.poolFeeReceiver = _newPoolFeeReceiver;\\n        emit NewPoolFeeReceiver(pool, oldPoolFeeReceiver, _newPoolFeeReceiver);\\n    }\\n\\n    function setPoolFeeFactor(address pool, uint _newFeeFactor) external {\\n        PoolInfo storage info = pools[pool];\\n        require(msg.sender == info.poolFeeAdmin, \\u0027MomaFactory: poolFeeAdmin check\\u0027);\\n        require(_newFeeFactor \\u003c= feeFactorMaxMantissa, \\u0027MomaFactory: newFeeFactor bound check\\u0027);\\n        uint oldPoolFeeFactor = info.feeFactor;\\n        info.feeFactor = _newFeeFactor;\\n        emit NewPoolFeeFactor(pool, oldPoolFeeFactor, _newFeeFactor);\\n    }\\n\\n    function setPoolFeeStatus(address pool, bool _noFee) external {\\n        PoolInfo storage info = pools[pool];\\n        require(msg.sender == info.poolFeeAdmin, \\u0027MomaFactory: poolFeeAdmin check\\u0027);\\n        bool oldPoolFeeStatus = info.noFee;\\n        info.noFee = _noFee;\\n        emit NewPoolFeeStatus(pool, oldPoolFeeStatus, _noFee);\\n    }\\n}\\n\\n\\ninterface IMomaPool {\\n    function initialize(address admin_, address implementation_) external;\\n}\\n\\ninterface IFarmingDelegate {\\n    function isFarmingDelegate() external view returns (bool);\\n}\\n\"},\"MomaFactoryInterface.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\ninterface MomaFactoryInterface {\\n\\n    event PoolCreated(address pool, address creator, uint poolLength);\\n    event NewMomaFarming(address oldMomaFarming, address newMomaFarming);\\n    event NewFarmingDelegate(address oldDelegate, address newDelegate);\\n    event NewFeeAdmin(address oldFeeAdmin, address newFeeAdmin);\\n    event NewDefualtFeeReceiver(address oldFeeReceiver, address newFeeReceiver);\\n    event NewDefualtFeeFactor(uint oldFeeFactor, uint newFeeFactor);\\n    event NewNoFeeTokenStatus(address token, bool oldNoFeeTokenStatus, bool newNoFeeTokenStatus);\\n    event NewTokenFeeFactor(address token, uint oldFeeFactor, uint newFeeFactor);\\n    event NewOracle(address oldOracle, address newOracle);\\n    event NewTimelock(address oldTimelock, address newTimelock);\\n    event NewMomaMaster(address oldMomaMaster, address newMomaMaster);\\n    event NewMEther(address oldMEther, address newMEther);\\n    event NewMErc20(address oldMErc20, address newMErc20);\\n    event NewMErc20Implementation(address oldMErc20Implementation, address newMErc20Implementation);\\n    event NewMEtherImplementation(address oldMEtherImplementation, address newMEtherImplementation);\\n    event NewLendingPool(address pool);\\n    event NewPoolFeeAdmin(address pool, address oldPoolFeeAdmin, address newPoolFeeAdmin);\\n    event NewPoolFeeReceiver(address pool, address oldPoolFeeReceiver, address newPoolFeeReceiver);\\n    event NewPoolFeeFactor(address pool, uint oldPoolFeeFactor, uint newPoolFeeFactor);\\n    event NewPoolFeeStatus(address pool, bool oldPoolFeeStatus, bool newPoolFeeStatus);\\n\\n    function isMomaFactory() external view returns (bool);\\n    function oracle() external view returns (address);\\n    function momaFarming() external view returns (address);\\n    function farmingDelegate() external view returns (address);\\n    function mEtherImplementation() external view returns (address);\\n    function mErc20Implementation() external view returns (address);\\n    function admin() external view returns (address);\\n    function feeAdmin() external view returns (address);\\n    function defualtFeeReceiver() external view returns (address);\\n    function defualtFeeFactorMantissa() external view returns (uint);\\n    function feeFactorMaxMantissa() external view returns (uint);\\n\\n    function tokenFeeFactors(address token) external view returns (uint);\\n    // function pools(address pool) external view returns (PoolInfo memory);\\n    function allPools(uint) external view returns (address);\\n\\n    function createPool() external returns (address);\\n    function allPoolsLength() external view returns (uint);\\n    function getMomaFeeAdmin(address pool) external view returns (address);\\n    function getMomaFeeReceiver(address pool) external view returns (address payable);\\n    function getMomaFeeFactorMantissa(address pool, address underlying) external view returns (uint);\\n    function isMomaPool(address pool) external view returns (bool);\\n    function isLendingPool(address pool) external view returns (bool);\\n    function isTimelock(address b) external view returns (bool);\\n    function isMomaMaster(address b) external view returns (bool);\\n    function isMEtherImplementation(address b) external view returns (bool);\\n    function isMErc20Implementation(address b) external view returns (bool);\\n    function isMToken(address b) external view returns (bool);\\n    function isCodeSame(address a, address b) external view returns (bool);\\n\\n    function upgradeLendingPool() external returns (bool);\\n    \\n    function setFeeAdmin(address _newFeeAdmin) external;\\n    function setDefualtFeeReceiver(address payable _newFeeReceiver) external;\\n    function setDefualtFeeFactor(uint _newFeeFactor) external;\\n    function setTokenFeeFactor(address token, uint _newFeeFactor) external;\\n\\n    function setPoolFeeAdmin(address pool, address _newPoolFeeAdmin) external;\\n    function setPoolFeeReceiver(address pool, address payable _newPoolFeeReceiver) external;\\n    function setPoolFeeFactor(address pool, uint _newFeeFactor) external;\\n    function setPoolFeeStatus(address pool, bool _noFee) external;\\n}\\n\"},\"MomaFactoryProxy.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport \\\"./MomaFactoryStorage.sol\\\";\\n/**\\n * @title MomaFactoryProxy\\n * @dev Storage for the MomaFactory is at this address, while execution is delegated to the `momaFactoryImplementation`.\\n */\\n\\ncontract MomaFactoryProxy is MomaFactoryProxyStorage {\\n\\n    /**\\n      * @notice Emitted when pendingMomaFactoryImplementation is changed\\n      */\\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\\n\\n    /**\\n      * @notice Emitted when pendingMomaFactoryImplementation is accepted, which means momaFactory implementation is updated\\n      */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is changed\\n      */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n      */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    constructor() public {\\n        // Set admin to caller\\n        admin = msg.sender;\\n        feeAdmin = msg.sender;\\n        defualtFeeReceiver = msg.sender;\\n    }\\n\\n    /*** Admin Functions ***/\\n    function _setPendingImplementation(address newPendingImplementation) public {\\n\\n        require(msg.sender == admin, \\u0027MomaFactory: admin check\\u0027);\\n\\n        address oldPendingImplementation = pendingMomaFactoryImplementation;\\n\\n        pendingMomaFactoryImplementation = newPendingImplementation;\\n\\n        emit NewPendingImplementation(oldPendingImplementation, pendingMomaFactoryImplementation);\\n    }\\n\\n    /**\\n    * @notice Accepts new implementation of momaFactory. msg.sender must be pendingImplementation\\n    * @dev Admin function for new implementation to accept it\\u0027s role as implementation\\n    */\\n    function _acceptImplementation() public returns (uint) {\\n        // Check caller is pendingImplementation and pendingImplementation ≠ address(0)\\n        require(msg.sender == pendingMomaFactoryImplementation \\u0026\\u0026 msg.sender != address(0), \\u0027MomaFactory: pendingImplementation check\\u0027);\\n\\n        // Save current values for inclusion in log\\n        address oldImplementation = momaFactoryImplementation;\\n        address oldPendingImplementation = pendingMomaFactoryImplementation;\\n\\n        momaFactoryImplementation = pendingMomaFactoryImplementation;\\n\\n        pendingMomaFactoryImplementation = address(0);\\n\\n        emit NewImplementation(oldImplementation, momaFactoryImplementation);\\n        emit NewPendingImplementation(oldPendingImplementation, pendingMomaFactoryImplementation);\\n\\n        return 0;\\n    }\\n\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      */\\n    function _setPendingAdmin(address newPendingAdmin) public {\\n        // Check caller = admin\\n        require(msg.sender == admin, \\u0027MomaFactory: admin check\\u0027);\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      */\\n    function _acceptAdmin() public {\\n        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\\n        require(msg.sender == pendingAdmin \\u0026\\u0026 msg.sender != address(0), \\u0027MomaFactory: pendingAdmin check\\u0027);\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n    }\\n\\n    /**\\n     * @dev Delegates execution to an implementation contract.\\n     * It returns to the external caller whatever the implementation returns\\n     * or forwards reverts.\\n     */\\n    function () payable external {\\n        // delegate all other functions to current implementation\\n        (bool success, ) = momaFactoryImplementation.delegatecall(msg.data);\\n\\n        assembly {\\n              let free_mem_ptr := mload(0x40)\\n              returndatacopy(free_mem_ptr, 0, returndatasize)\\n\\n              switch success\\n              case 0 { revert(free_mem_ptr, returndatasize) }\\n              default { return(free_mem_ptr, returndatasize) }\\n        }\\n    }\\n}\\n\"},\"MomaFactoryStorage.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\n\\ncontract MomaFactoryProxyStorage {\\n\\n    address public admin;\\n    address public pendingAdmin;\\n    address public momaFactoryImplementation;\\n    address public pendingMomaFactoryImplementation;\\n\\n    address public feeAdmin;\\n    address payable public defualtFeeReceiver;\\n}\\n\\n\\ncontract MomaFactoryStorage is MomaFactoryProxyStorage {\\n\\n    address public momaFarming;\\n    address public farmingDelegate;\\n\\n    address public oracle;\\n    address public timelock;\\n    address public momaMaster;\\n    address public mEther;\\n    address public mErc20;\\n    address public mEtherImplementation;\\n    address public mErc20Implementation;\\n\\n    uint public defualtFeeFactorMantissa;\\n    uint public lendingPoolNum;\\n    bool public allowUpgrade;\\n\\n    struct PoolInfo {\\n        address creator;\\n        address poolFeeAdmin;\\n        address payable poolFeeReceiver;\\n        uint feeFactor;\\n        bool noFee;\\n        bool isLending;\\n        bool allowUpgrade;\\n    }\\n\\n    mapping(address =\\u003e bool) public noFeeTokens;\\n    mapping(address =\\u003e uint) public tokenFeeFactors;\\n    mapping(address =\\u003e PoolInfo) public pools;\\n    address[] public allPools;\\n\\n}\\n\"},\"MomaMaster.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport \\\"./MToken.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\nimport \\\"./MomaMasterInterface.sol\\\";\\nimport \\\"./MomaMasterStorage.sol\\\";\\nimport \\\"./MomaPool.sol\\\";\\n\\n/**\\n * @title Moma\\u0027s MomaMaster Contract\\n * @author Moma\\n */\\ncontract MomaMaster is MomaMasterInterface, MomaMasterV1Storage, MomaMasterErrorReporter, ExponentialNoError {\\n    /// @notice Emitted when an admin supports a market\\n    event MarketListed(MToken mToken);\\n\\n    /// @notice Emitted when an account enters a market\\n    event MarketEntered(MToken mToken, address account);\\n\\n    /// @notice Emitted when an account exits a market\\n    event MarketExited(MToken mToken, address account);\\n\\n    /// @notice Emitted when close factor is changed by admin\\n    event NewCloseFactor(uint oldCloseFactorMantissa, uint newCloseFactorMantissa);\\n\\n    /// @notice Emitted when a collateral factor is changed by admin\\n    event NewCollateralFactor(MToken mToken, uint oldCollateralFactorMantissa, uint newCollateralFactorMantissa);\\n\\n    /// @notice Emitted when liquidation incentive is changed by admin\\n    event NewLiquidationIncentive(uint oldLiquidationIncentiveMantissa, uint newLiquidationIncentiveMantissa);\\n\\n    /// @notice Emitted when price oracle is changed\\n    event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);\\n\\n    /// @notice Emitted when pause guardian is changed\\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\\n\\n    /// @notice Emitted when an action is paused globally\\n    event ActionPaused(string action, bool pauseState);\\n\\n    /// @notice Emitted when an action is paused on a market\\n    event ActionPaused(MToken mToken, string action, bool pauseState);\\n\\n    /// @notice Emitted when borrow cap for a mToken is changed\\n    event NewBorrowCap(MToken indexed mToken, uint newBorrowCap);\\n\\n    /// @notice Emitted when a new token speed is updated for a market\\n    event TokenSpeedUpdated(address indexed token, MToken indexed mToken, uint oldSpeed, uint newSpeed);\\n\\n    /// @notice Emitted when token is distributed to a supplier\\n    event DistributedSupplierToken(address indexed token, MToken indexed mToken, address indexed supplier, uint tokenDelta, uint tokenSupplyIndex);\\n\\n    /// @notice Emitted when token is distributed to a borrower\\n    event DistributedBorrowerToken(address indexed token, MToken indexed mToken, address indexed borrower, uint tokenDelta, uint tokenBorrowIndex);\\n\\n    /// @notice Emitted when token is claimed by user\\n    event TokenClaimed(address indexed token, address indexed user, uint accrued, uint claimed, uint notClaimed);\\n\\n    /// @notice Emitted when token farm is updated by admin\\n     event TokenFarmUpdated(EIP20Interface token, uint oldStart, uint oldEnd, uint newStart, uint newEnd);\\n\\n    /// @notice Emitted when a new token market is added to momaMarkets\\n    event NewTokenMarket(address indexed token, MToken indexed mToken);\\n\\n    /// @notice Emitted when token is granted by admin\\n    event TokenGranted(address token, address recipient, uint amount);\\n\\n    /// @notice Indicator that this is a MomaMaster contract (for inspection)\\n    bool public constant isMomaMaster = true;\\n\\n    /// @notice The initial moma index for a market\\n    uint224 public constant momaInitialIndex = 1e36;\\n\\n    // closeFactorMantissa must be strictly greater than this value\\n    uint internal constant closeFactorMinMantissa = 0.05e18; // 0.05\\n\\n    // closeFactorMantissa must not exceed this value\\n    uint internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\\n\\n    // liquidationIncentiveMantissa must be no less than this value\\n    uint internal constant liquidationIncentiveMinMantissa = 1.0e18; // 1.0\\n\\n    // liquidationIncentiveMantissa must be no greater than this value\\n    uint internal constant liquidationIncentiveMaxMantissa = 1.5e18; // 1.5\\n\\n    // No collateralFactorMantissa may exceed this value\\n    uint internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\\n\\n    constructor() public {\\n        admin = msg.sender;\\n    }\\n\\n    /*** Assets You Are In ***/\\n\\n    /**\\n     * @notice Returns the assets an account has entered\\n     * @param account The address of the account to pull assets for\\n     * @return A dynamic list with the assets the account has entered\\n     */\\n    function getAssetsIn(address account) external view returns (MToken[] memory) {\\n        MToken[] memory assetsIn = accountAssets[account];\\n\\n        return assetsIn;\\n    }\\n\\n    /**\\n     * @notice Returns whether the given account is entered in the given asset\\n     * @param account The address of the account to check\\n     * @param mToken The mToken to check\\n     * @return True if the account is in the asset, otherwise false.\\n     */\\n    function checkMembership(address account, MToken mToken) external view returns (bool) {\\n        return markets[address(mToken)].accountMembership[account];\\n    }\\n\\n    /**\\n     * @notice Add assets to be included in account liquidity calculation\\n     * @param mTokens The list of addresses of the mToken markets to be enabled\\n     * @return Success indicator for whether each corresponding market was entered\\n     */\\n    function enterMarkets(address[] memory mTokens) public returns (uint[] memory) {\\n        uint len = mTokens.length;\\n\\n        uint[] memory results = new uint[](len);\\n        for (uint i = 0; i \\u003c len; i++) {\\n            MToken mToken = MToken(mTokens[i]);\\n\\n            results[i] = uint(addToMarketInternal(mToken, msg.sender));\\n        }\\n\\n        return results;\\n    }\\n\\n    /**\\n     * @notice Add the market to the borrower\\u0027s \\\"assets in\\\" for liquidity calculations\\n     * @param mToken The market to enter\\n     * @param borrower The address of the account to modify\\n     * @return Success indicator for whether the market was entered\\n     */\\n    function addToMarketInternal(MToken mToken, address borrower) internal returns (Error) {\\n        Market storage marketToJoin = markets[address(mToken)];\\n\\n        if (!marketToJoin.isListed) {\\n            // market is not listed, cannot join\\n            return Error.MARKET_NOT_LISTED;\\n        }\\n\\n        if (oracle.getUnderlyingPrice(mToken) == 0) {\\n            // not have price\\n            return Error.PRICE_ERROR;\\n        }\\n\\n        if (marketToJoin.accountMembership[borrower]) {\\n            // already joined\\n            return Error.NO_ERROR;\\n        }\\n\\n        // survived the gauntlet, add to list\\n        // NOTE: we store these somewhat redundantly as a significant optimization\\n        //  this avoids having to iterate through the list for the most common use cases\\n        //  that is, only when we need to perform liquidity checks\\n        //  and not whenever we want to check if an account is in a particular market\\n        marketToJoin.accountMembership[borrower] = true;\\n        accountAssets[borrower].push(mToken);\\n\\n        emit MarketEntered(mToken, borrower);\\n\\n        return Error.NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Removes asset from sender\\u0027s account liquidity calculation\\n     * @dev Sender must not have an outstanding borrow balance in the asset,\\n     *  or be providing necessary collateral for an outstanding borrow.\\n     * @param mTokenAddress The address of the asset to be removed\\n     * @return Whether or not the account successfully exited the market\\n     */\\n    function exitMarket(address mTokenAddress) external returns (uint) {\\n        MToken mToken = MToken(mTokenAddress);\\n        /* Get sender tokensHeld and amountOwed underlying from the mToken */\\n        (uint oErr, uint tokensHeld, uint amountOwed, ) = mToken.getAccountSnapshot(msg.sender);\\n        require(oErr == 0, \\\"exitMarket: getAccountSnapshot failed\\\"); // semi-opaque error code\\n\\n        /* Fail if the sender has a borrow balance */\\n        if (amountOwed != 0) {\\n            return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);\\n        }\\n\\n        /* Fail if the sender is not permitted to redeem all of their tokens */\\n        uint allowed = redeemAllowedInternal(mTokenAddress, msg.sender, tokensHeld);\\n        if (allowed != 0) {\\n            return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);\\n        }\\n\\n        Market storage marketToExit = markets[address(mToken)];\\n\\n        /* Return true if the sender is not already ‘in’ the market */\\n        if (!marketToExit.accountMembership[msg.sender]) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Set mToken account membership to false */\\n        delete marketToExit.accountMembership[msg.sender];\\n\\n        /* Delete mToken from the account’s list of assets */\\n        // load into memory for faster iteration\\n        MToken[] memory userAssetList = accountAssets[msg.sender];\\n        uint len = userAssetList.length;\\n        uint assetIndex = len;\\n        for (uint i = 0; i \\u003c len; i++) {\\n            if (userAssetList[i] == mToken) {\\n                assetIndex = i;\\n                break;\\n            }\\n        }\\n\\n        // We *must* have found the asset in the list or our redundant data structure is broken\\n        assert(assetIndex \\u003c len);\\n\\n        // copy last item in list to location of item to be removed, reduce length by 1\\n        MToken[] storage storedList = accountAssets[msg.sender];\\n        storedList[assetIndex] = storedList[storedList.length - 1];\\n        storedList.length--;\\n\\n        emit MarketExited(mToken, msg.sender);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /*** Policy Hooks ***/\\n\\n    /**\\n     * @notice Checks if the account should be allowed to mint tokens in the given market\\n     * @param mToken The market to verify the mint against\\n     * @param minter The account which would get the minted tokens\\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function mintAllowed(address mToken, address minter, uint mintAmount) external returns (uint) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!mintGuardianPaused[mToken], \\\"mint is paused\\\");\\n\\n        // Shh - currently unused\\n        minter;\\n        mintAmount;\\n\\n        if (!markets[mToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        // Keep the flywheel moving\\n        updateFarmSupplyIndex(mToken);\\n        distributeSupplierFarm(mToken, minter);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates mint and reverts on rejection. May emit logs.\\n     * @param mToken Asset being minted\\n     * @param minter The address minting the tokens\\n     * @param actualMintAmount The amount of the underlying asset being minted\\n     * @param mintTokens The number of tokens being minted\\n     */\\n    function mintVerify(address mToken, address minter, uint actualMintAmount, uint mintTokens) external {\\n        // Shh - currently unused\\n        mToken;\\n        minter;\\n        actualMintAmount;\\n        mintTokens;\\n\\n        // Shh - we don\\u0027t ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\\n     * @param mToken The market to verify the redeem against\\n     * @param redeemer The account which would redeem the tokens\\n     * @param redeemTokens The number of mTokens to exchange for the underlying asset in the market\\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function redeemAllowed(address mToken, address redeemer, uint redeemTokens) external returns (uint) {\\n        uint allowed = redeemAllowedInternal(mToken, redeemer, redeemTokens);\\n        if (allowed != uint(Error.NO_ERROR)) {\\n            return allowed;\\n        }\\n\\n        // Keep the flywheel moving\\n        updateFarmSupplyIndex(mToken);\\n        distributeSupplierFarm(mToken, redeemer);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    function redeemAllowedInternal(address mToken, address redeemer, uint redeemTokens) internal view returns (uint) {\\n        if (!markets[mToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        /* If the redeemer is not \\u0027in\\u0027 the market, then we can bypass the liquidity check */\\n        if (!markets[mToken].accountMembership[redeemer]) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\\n        (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(redeemer, MToken(mToken), redeemTokens, 0);\\n        if (err != Error.NO_ERROR) {\\n            return uint(err);\\n        }\\n        if (shortfall \\u003e 0) {\\n            return uint(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates redeem and reverts on rejection. May emit logs.\\n     * @param mToken Asset being redeemed\\n     * @param redeemer The address redeeming the tokens\\n     * @param redeemAmount The amount of the underlying asset being redeemed\\n     * @param redeemTokens The number of tokens being redeemed\\n     */\\n    function redeemVerify(address mToken, address redeemer, uint redeemAmount, uint redeemTokens) external {\\n        // Shh - currently unused\\n        mToken;\\n        redeemer;\\n\\n        // Require tokens is zero or amount is also zero\\n        if (redeemTokens == 0 \\u0026\\u0026 redeemAmount \\u003e 0) {\\n            revert(\\\"redeemTokens zero\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\n     * @param mToken The market to verify the borrow against\\n     * @param borrower The account which would borrow the asset\\n     * @param borrowAmount The amount of underlying the account would borrow\\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function borrowAllowed(address mToken, address borrower, uint borrowAmount) external returns (uint) {\\n        require(isLendingPool, \\\"this is not lending pool\\\");\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!borrowGuardianPaused[mToken], \\\"borrow is paused\\\");\\n\\n        if (!markets[mToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        if (!markets[mToken].accountMembership[borrower]) {\\n            // only mTokens may call borrowAllowed if borrower not in market\\n            require(msg.sender == mToken, \\\"sender must be mToken\\\");\\n\\n            // attempt to add borrower to the market\\n            Error err = addToMarketInternal(MToken(msg.sender), borrower);\\n            if (err != Error.NO_ERROR) {\\n                return uint(err);\\n            }\\n\\n            // it should be impossible to break the important invariant\\n            assert(markets[mToken].accountMembership[borrower]);\\n        }\\n\\n        if (oracle.getUnderlyingPrice(MToken(mToken)) == 0) {\\n            return uint(Error.PRICE_ERROR);\\n        }\\n\\n\\n        uint borrowCap = borrowCaps[mToken];\\n        // Borrow cap of 0 corresponds to unlimited borrowing\\n        if (borrowCap != 0) {\\n            uint totalBorrows = MToken(mToken).totalBorrows();\\n            uint nextTotalBorrows = add_(totalBorrows, borrowAmount);\\n            require(nextTotalBorrows \\u003c borrowCap, \\\"market borrow cap reached\\\");\\n        }\\n\\n        (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(borrower, MToken(mToken), 0, borrowAmount);\\n        if (err != Error.NO_ERROR) {\\n            return uint(err);\\n        }\\n        if (shortfall \\u003e 0) {\\n            return uint(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n\\n        // Keep the flywheel moving\\n        uint borrowIndex = MToken(mToken).borrowIndex();\\n        updateFarmBorrowIndex(mToken, borrowIndex);\\n        distributeBorrowerFarm(mToken, borrower, borrowIndex);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates borrow and reverts on rejection. May emit logs.\\n     * @param mToken Asset whose underlying is being borrowed\\n     * @param borrower The address borrowing the underlying\\n     * @param borrowAmount The amount of the underlying asset requested to borrow\\n     */\\n    function borrowVerify(address mToken, address borrower, uint borrowAmount) external {\\n        // Shh - currently unused\\n        mToken;\\n        borrower;\\n        borrowAmount;\\n\\n        // Shh - we don\\u0027t ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\\n     * @param mToken The market to verify the repay against\\n     * @param payer The account which would repay the asset\\n     * @param borrower The account which would borrowed the asset\\n     * @param repayAmount The amount of the underlying asset the account would repay\\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function repayBorrowAllowed(\\n        address mToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external returns (uint) {\\n        // Shh - currently unused\\n        payer;\\n        borrower;\\n        repayAmount;\\n        require(isLendingPool, \\\"this is not lending pool\\\");\\n\\n        if (!markets[mToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        // Keep the flywheel moving\\n        uint borrowIndex = MToken(mToken).borrowIndex();\\n        updateFarmBorrowIndex(mToken, borrowIndex);\\n        distributeBorrowerFarm(mToken, borrower, borrowIndex);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates repayBorrow and reverts on rejection. May emit logs.\\n     * @param mToken Asset being repaid\\n     * @param payer The address repaying the borrow\\n     * @param borrower The address of the borrower\\n     * @param actualRepayAmount The amount of underlying being repaid\\n     */\\n    function repayBorrowVerify(\\n        address mToken,\\n        address payer,\\n        address borrower,\\n        uint actualRepayAmount,\\n        uint borrowerIndex) external {\\n        // Shh - currently unused\\n        mToken;\\n        payer;\\n        borrower;\\n        actualRepayAmount;\\n        borrowerIndex;\\n\\n        // Shh - we don\\u0027t ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the liquidation should be allowed to occur\\n     * @param mTokenBorrowed Asset which was borrowed by the borrower\\n     * @param mTokenCollateral Asset which was used as collateral and will be seized\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param repayAmount The amount of underlying being repaid\\n     */\\n    function liquidateBorrowAllowed(\\n        address mTokenBorrowed,\\n        address mTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external returns (uint) {\\n        // Shh - currently unused\\n        liquidator;\\n        require(isLendingPool, \\\"this is not lending pool\\\");\\n\\n        if (!markets[mTokenBorrowed].isListed || !markets[mTokenCollateral].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        /* The borrower must have shortfall in order to be liquidatable */\\n        (Error err, , uint shortfall) = getAccountLiquidityInternal(borrower);\\n        if (err != Error.NO_ERROR) {\\n            return uint(err);\\n        }\\n        if (shortfall == 0) {\\n            return uint(Error.INSUFFICIENT_SHORTFALL);\\n        }\\n\\n        /* The liquidator may not repay more than what is allowed by the closeFactor */\\n        uint borrowBalance = MToken(mTokenBorrowed).borrowBalanceStored(borrower);\\n        uint maxClose = mul_ScalarTruncate(Exp({mantissa: closeFactorMantissa}), borrowBalance);\\n        if (repayAmount \\u003e maxClose) {\\n            return uint(Error.TOO_MUCH_REPAY);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\\n     * @param mTokenBorrowed Asset which was borrowed by the borrower\\n     * @param mTokenCollateral Asset which was used as collateral and will be seized\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param actualRepayAmount The amount of underlying being repaid\\n     */\\n    function liquidateBorrowVerify(\\n        address mTokenBorrowed,\\n        address mTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint actualRepayAmount,\\n        uint seizeTokens) external {\\n        // Shh - currently unused\\n        mTokenBorrowed;\\n        mTokenCollateral;\\n        liquidator;\\n        borrower;\\n        actualRepayAmount;\\n        seizeTokens;\\n\\n        // Shh - we don\\u0027t ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the seizing of assets should be allowed to occur\\n     * @param mTokenCollateral Asset which was used as collateral and will be seized\\n     * @param mTokenBorrowed Asset which was borrowed by the borrower\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param seizeTokens The number of collateral tokens to seize\\n     */\\n    function seizeAllowed(\\n        address mTokenCollateral,\\n        address mTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external returns (uint) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!seizeGuardianPaused, \\\"seize is paused\\\");\\n        require(isLendingPool, \\\"this is not lending pool\\\");\\n\\n        // Shh - currently unused\\n        seizeTokens;\\n\\n        if (!markets[mTokenCollateral].isListed || !markets[mTokenBorrowed].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        if (MToken(mTokenCollateral).momaMaster() != MToken(mTokenBorrowed).momaMaster()) {\\n            return uint(Error.MOMAMASTER_MISMATCH);\\n        }\\n\\n        // Keep the flywheel moving\\n        updateFarmSupplyIndex(mTokenCollateral);\\n        distributeSupplierFarm(mTokenCollateral, borrower);\\n        distributeSupplierFarm(mTokenCollateral, liquidator);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates seize and reverts on rejection. May emit logs.\\n     * @param mTokenCollateral Asset which was used as collateral and will be seized\\n     * @param mTokenBorrowed Asset which was borrowed by the borrower\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param seizeTokens The number of collateral tokens to seize\\n     */\\n    function seizeVerify(\\n        address mTokenCollateral,\\n        address mTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external {\\n        // Shh - currently unused\\n        mTokenCollateral;\\n        mTokenBorrowed;\\n        liquidator;\\n        borrower;\\n        seizeTokens;\\n\\n        // Shh - we don\\u0027t ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\\n     * @param mToken The market to verify the transfer against\\n     * @param src The account which sources the tokens\\n     * @param dst The account which receives the tokens\\n     * @param transferTokens The number of mTokens to transfer\\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function transferAllowed(address mToken, address src, address dst, uint transferTokens) external returns (uint) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!transferGuardianPaused, \\\"transfer is paused\\\");\\n\\n        // Currently the only consideration is whether or not\\n        //  the src is allowed to redeem this many tokens\\n        uint allowed = redeemAllowedInternal(mToken, src, transferTokens);\\n        if (allowed != uint(Error.NO_ERROR)) {\\n            return allowed;\\n        }\\n\\n        // Keep the flywheel moving\\n        updateFarmSupplyIndex(mToken);\\n        distributeSupplierFarm(mToken, src);\\n        distributeSupplierFarm(mToken, dst);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates transfer and reverts on rejection. May emit logs.\\n     * @param mToken Asset being transferred\\n     * @param src The account which sources the tokens\\n     * @param dst The account which receives the tokens\\n     * @param transferTokens The number of mTokens to transfer\\n     */\\n    function transferVerify(address mToken, address src, address dst, uint transferTokens) external {\\n        // Shh - currently unused\\n        mToken;\\n        src;\\n        dst;\\n        transferTokens;\\n\\n        // Shh - we don\\u0027t ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    /**\\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\\n     *  Note that `mTokenBalance` is the number of mTokens the account owns in the market,\\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\\n     */\\n    struct AccountLiquidityLocalVars {\\n        uint sumCollateral;\\n        uint sumBorrowPlusEffects;\\n        uint mTokenBalance;\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n        uint oraclePriceMantissa;\\n        Exp collateralFactor;\\n        Exp exchangeRate;\\n        Exp oraclePrice;\\n        Exp tokensToDenom;\\n    }\\n\\n    /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code (semi-opaque),\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n    function getAccountLiquidity(address account) public view returns (uint, uint, uint) {\\n        (Error err, uint liquidity, uint shortfall) = getHypotheticalAccountLiquidityInternal(account, MToken(0), 0, 0);\\n\\n        return (uint(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code,\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n    function getAccountLiquidityInternal(address account) internal view returns (Error, uint, uint) {\\n        return getHypotheticalAccountLiquidityInternal(account, MToken(0), 0, 0);\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param mTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @return (possible error code (semi-opaque),\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n    function getHypotheticalAccountLiquidity(\\n        address account,\\n        address mTokenModify,\\n        uint redeemTokens,\\n        uint borrowAmount) public view returns (uint, uint, uint) {\\n        (Error err, uint liquidity, uint shortfall) = getHypotheticalAccountLiquidityInternal(account, MToken(mTokenModify), redeemTokens, borrowAmount);\\n        return (uint(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param mTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @dev Note that we calculate the exchangeRateStored for each collateral mToken using stored data,\\n     *  without calculating accumulated interest.\\n     * @return (possible error code,\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n    function getHypotheticalAccountLiquidityInternal(\\n        address account,\\n        MToken mTokenModify,\\n        uint redeemTokens,\\n        uint borrowAmount) internal view returns (Error, uint, uint) {\\n\\n        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\\n        uint oErr;\\n\\n        // For each asset the account is in\\n        MToken[] memory assets = accountAssets[account];\\n        for (uint i = 0; i \\u003c assets.length; i++) {\\n            MToken asset = assets[i];\\n\\n            // Read the balances and exchange rate from the mToken\\n            (oErr, vars.mTokenBalance, vars.borrowBalance, vars.exchangeRateMantissa) = asset.getAccountSnapshot(account);\\n            if (oErr != 0) { // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\\n                return (Error.SNAPSHOT_ERROR, 0, 0);\\n            }\\n            vars.collateralFactor = Exp({mantissa: markets[address(asset)].collateralFactorMantissa});\\n            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\\n\\n            // Get the normalized price of the asset\\n            vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\\n            if (vars.oraclePriceMantissa == 0) {\\n                return (Error.PRICE_ERROR, 0, 0);\\n            }\\n            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\\n\\n            // Pre-compute a conversion factor from tokens -\\u003e ether (normalized price value)\\n            vars.tokensToDenom = mul_(mul_(vars.collateralFactor, vars.exchangeRate), vars.oraclePrice);\\n\\n            // sumCollateral += tokensToDenom * mTokenBalance\\n            vars.sumCollateral = mul_ScalarTruncateAddUInt(vars.tokensToDenom, vars.mTokenBalance, vars.sumCollateral);\\n\\n            // sumBorrowPlusEffects += oraclePrice * borrowBalance\\n            vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.oraclePrice, vars.borrowBalance, vars.sumBorrowPlusEffects);\\n\\n            // Calculate effects of interacting with mTokenModify\\n            if (asset == mTokenModify) {\\n                // redeem effect\\n                // sumBorrowPlusEffects += tokensToDenom * redeemTokens\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.tokensToDenom, redeemTokens, vars.sumBorrowPlusEffects);\\n\\n                // borrow effect\\n                // sumBorrowPlusEffects += oraclePrice * borrowAmount\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.oraclePrice, borrowAmount, vars.sumBorrowPlusEffects);\\n            }\\n        }\\n\\n        // These are safe, as the underflow condition is checked first\\n        if (vars.sumCollateral \\u003e vars.sumBorrowPlusEffects) {\\n            return (Error.NO_ERROR, vars.sumCollateral - vars.sumBorrowPlusEffects, 0);\\n        } else {\\n            return (Error.NO_ERROR, 0, vars.sumBorrowPlusEffects - vars.sumCollateral);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\\n     * @dev Used in liquidation (called in mToken.liquidateBorrowFresh)\\n     * @param mTokenBorrowed The address of the borrowed mToken\\n     * @param mTokenCollateral The address of the collateral mToken\\n     * @param actualRepayAmount The amount of mTokenBorrowed underlying to convert into mTokenCollateral tokens\\n     * @return (errorCode, number of mTokenCollateral tokens to be seized in a liquidation)\\n     */\\n    function liquidateCalculateSeizeTokens(address mTokenBorrowed, address mTokenCollateral, uint actualRepayAmount) external view returns (uint, uint) {\\n        /* Read oracle prices for borrowed and collateral markets */\\n        uint priceBorrowedMantissa = oracle.getUnderlyingPrice(MToken(mTokenBorrowed));\\n        uint priceCollateralMantissa = oracle.getUnderlyingPrice(MToken(mTokenCollateral));\\n        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\\n            return (uint(Error.PRICE_ERROR), 0);\\n        }\\n\\n        /*\\n         * Get the exchange rate and calculate the number of collateral tokens to seize:\\n         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\\n         *  seizeTokens = seizeAmount / exchangeRate\\n         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\\n         */\\n        uint exchangeRateMantissa = MToken(mTokenCollateral).exchangeRateStored(); // Note: reverts on error\\n        uint seizeTokens;\\n        Exp memory numerator;\\n        Exp memory denominator;\\n        Exp memory ratio;\\n\\n        numerator = mul_(Exp({mantissa: liquidationIncentiveMantissa}), Exp({mantissa: priceBorrowedMantissa}));\\n        denominator = mul_(Exp({mantissa: priceCollateralMantissa}), Exp({mantissa: exchangeRateMantissa}));\\n        ratio = div_(numerator, denominator);\\n\\n        seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\\n\\n        return (uint(Error.NO_ERROR), seizeTokens);\\n    }\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n      * @notice Sets a new price oracle for the MomaMaster\\n      * @dev Admin function to set a new price oracle\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _updatePriceOracle() public returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);\\n        }\\n\\n        // Read the new oracle from factory\\n        address newOracle = MomaFactoryInterface(factory).oracle();\\n\\n        // Check newOracle\\n        require(newOracle != address(0), \\\"factory not set oracle\\\");\\n\\n        // Track the old oracle for the MomaMaster\\n        PriceOracle oldOracle = oracle;\\n\\n        // Set MomaMaster\\u0027s oracle to newOracle\\n        oracle = PriceOracle(newOracle);\\n\\n        // Emit NewPriceOracle(oldOracle, newOracle)\\n        emit NewPriceOracle(oldOracle, PriceOracle(newOracle));\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets the closeFactor used when liquidating borrows\\n      * @dev Admin function to set closeFactor\\n      * @param newCloseFactorMantissa New close factor, scaled by 1e18\\n      * @return uint 0=success, otherwise a failure\\n      */\\n    function _setCloseFactor(uint newCloseFactorMantissa) external returns (uint) {\\n        // Check caller is admin\\n    \\trequire(msg.sender == admin, \\\"only admin can set close factor\\\");\\n        require(newCloseFactorMantissa \\u003e= closeFactorMinMantissa, \\\"close factor too small\\\");\\n        require(newCloseFactorMantissa \\u003c= closeFactorMaxMantissa, \\\"close factor too large\\\");\\n\\n        uint oldCloseFactorMantissa = closeFactorMantissa;\\n        closeFactorMantissa = newCloseFactorMantissa;\\n        emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets the collateralFactor for a market\\n      * @dev Admin function to set per-market collateralFactor\\n      * @param mToken The market to set the factor on\\n      * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n      */\\n    function _setCollateralFactor(MToken mToken, uint newCollateralFactorMantissa) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK);\\n        }\\n\\n        // Verify market is listed\\n        Market storage market = markets[address(mToken)];\\n        if (!market.isListed) {\\n            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);\\n        }\\n\\n        Exp memory newCollateralFactorExp = Exp({mantissa: newCollateralFactorMantissa});\\n\\n        // Check collateral factor \\u003c= 0.9\\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\\n            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);\\n        }\\n\\n        // If collateral factor != 0, fail if price == 0\\n        if (newCollateralFactorMantissa != 0 \\u0026\\u0026 oracle.getUnderlyingPrice(mToken) == 0) {\\n            return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\\n        }\\n\\n        // Set market\\u0027s collateral factor to new collateral factor, remember old value\\n        uint oldCollateralFactorMantissa = market.collateralFactorMantissa;\\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\\n\\n        // Emit event with asset, old collateral factor, and new collateral factor\\n        emit NewCollateralFactor(mToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets liquidationIncentive\\n      * @dev Admin function to set liquidationIncentive\\n      * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n      */\\n    function _setLiquidationIncentive(uint newLiquidationIncentiveMantissa) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);\\n        }\\n\\n        require(newLiquidationIncentiveMantissa \\u003e= liquidationIncentiveMinMantissa, \\\"liquidation incentive too small\\\");\\n        require(newLiquidationIncentiveMantissa \\u003c= liquidationIncentiveMaxMantissa, \\\"liquidation incentive too large\\\");\\n\\n        // Save current value for use in log\\n        uint oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\\n\\n        // Set liquidation incentive to new incentive\\n        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\\n\\n        // Emit event with old incentive, new incentive\\n        emit NewLiquidationIncentive(oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Add the market to the markets mapping and set it as listed\\n      * @dev Admin function to set isListed and add support for the market\\n      * @param mToken The address of the market (token) to list\\n      * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n      */\\n    function _supportMarket(MToken mToken) external returns (uint) {\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\\n        }\\n\\n        if (isLendingPool) {\\n            require(address(mToken.interestRateModel()) != address(0), \\\"mToken not set interestRateModel\\\");\\n        }\\n\\n        // Check is mToken\\n        require(MomaFactoryInterface(factory).isMToken(address(mToken)), \\u0027not mToken\\u0027);\\n\\n        if (markets[address(mToken)].isListed) {\\n            return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\\n        }\\n\\n        require(mToken.isMToken(), \\u0027not mToken contract\\u0027); // Sanity check to make sure its really a MToken\\n\\n        // Note that isMomaed is not in active use anymore\\n        // markets[address(mToken)] = Market({isListed: true, isMomaed: false, collateralFactorMantissa: 0});\\n        markets[address(mToken)] = Market({isListed: true, collateralFactorMantissa: 0});\\n\\n        _addMarketInternal(address(mToken));\\n\\n        emit MarketListed(mToken);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    function _addMarketInternal(address mToken) internal {\\n        for (uint i = 0; i \\u003c allMarkets.length; i ++) {\\n            require(allMarkets[i] != MToken(mToken), \\\"market already added\\\");\\n        }\\n        allMarkets.push(MToken(mToken));\\n    }\\n\\n\\n    /**\\n      * @notice Set the given borrow caps for the given mToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\\n      * @dev Admin or pauseGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\\n      * @param mTokens The addresses of the markets (tokens) to change the borrow caps for\\n      * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\\n      */\\n    function _setMarketBorrowCaps(MToken[] calldata mTokens, uint[] calldata newBorrowCaps) external {\\n    \\trequire(msg.sender == admin || msg.sender == pauseGuardian, \\\"only admin or pauseGuardian can set borrow caps\\\"); \\n\\n        uint numMarkets = mTokens.length;\\n        uint numBorrowCaps = newBorrowCaps.length;\\n\\n        require(numMarkets != 0 \\u0026\\u0026 numMarkets == numBorrowCaps, \\\"invalid input\\\");\\n\\n        for(uint i = 0; i \\u003c numMarkets; i++) {\\n            borrowCaps[address(mTokens[i])] = newBorrowCaps[i];\\n            emit NewBorrowCap(mTokens[i], newBorrowCaps[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Admin function to change the Pause Guardian\\n     * @param newPauseGuardian The address of the new Pause Guardian\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n     */\\n    function _setPauseGuardian(address newPauseGuardian) external returns (uint) {\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK);\\n        }\\n\\n        // Save current value for inclusion in log\\n        address oldPauseGuardian = pauseGuardian;\\n\\n        // Store pauseGuardian with value newPauseGuardian\\n        pauseGuardian = newPauseGuardian;\\n\\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\\n        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    function _upgradeLendingPool() external returns (bool) {\\n        require(msg.sender == admin, \\\"only admin can upgrade\\\");\\n\\n        // must update oracle first, it succuss or revert, so no need to check again\\n        _updatePriceOracle();\\n\\n        // all markets must set interestRateModel\\n        for (uint i = 0; i \\u003c allMarkets.length; i++) {\\n            MToken mToken = allMarkets[i];\\n            require(address(mToken.interestRateModel()) != address(0), \\\"support market not set interestRateModel\\\");\\n            // require(oracle.getUnderlyingPrice(mToken) != 0, \\\"support market not set price\\\"); // let functions check\\n        }\\n\\n        bool state = MomaFactoryInterface(factory).upgradeLendingPool();\\n        if (state) {\\n            require(updateBorrowBlock() == 0, \\\"update borrow block error\\\");\\n            isLendingPool = true;\\n        }\\n        return state;\\n    }\\n\\n    function _setMintPaused(MToken mToken, bool state) external returns (bool) {\\n        require(markets[address(mToken)].isListed, \\\"cannot pause a market that is not listed\\\");\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"only pause guardian and admin can pause\\\");\\n        require(msg.sender == admin || state, \\\"only admin can unpause\\\");\\n\\n        mintGuardianPaused[address(mToken)] = state;\\n        emit ActionPaused(mToken, \\\"Mint\\\", state);\\n        return state;\\n    }\\n\\n    function _setBorrowPaused(MToken mToken, bool state) external returns (bool) {\\n        require(markets[address(mToken)].isListed, \\\"cannot pause a market that is not listed\\\");\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"only pause guardian and admin can pause\\\");\\n        require(msg.sender == admin || state, \\\"only admin can unpause\\\");\\n\\n        borrowGuardianPaused[address(mToken)] = state;\\n        emit ActionPaused(mToken, \\\"Borrow\\\", state);\\n        return state;\\n    }\\n\\n    function _setTransferPaused(bool state) external returns (bool) {\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"only pause guardian and admin can pause\\\");\\n        require(msg.sender == admin || state, \\\"only admin can unpause\\\");\\n\\n        transferGuardianPaused = state;\\n        emit ActionPaused(\\\"Transfer\\\", state);\\n        return state;\\n    }\\n\\n    function _setSeizePaused(bool state) external returns (bool) {\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"only pause guardian and admin can pause\\\");\\n        require(msg.sender == admin || state, \\\"only admin can unpause\\\");\\n\\n        seizeGuardianPaused = state;\\n        emit ActionPaused(\\\"Seize\\\", state);\\n        return state;\\n    }\\n\\n    function _become(MomaPool momaPool) external {\\n        require(msg.sender == momaPool.admin(), \\\"only momaPool admin can change brains\\\");\\n        require(momaPool._acceptImplementation() == 0, \\\"change not authorized\\\");\\n    }\\n\\n    /**\\n     * @notice Checks caller is admin, or this contract is becoming the new implementation\\n     */\\n    function adminOrInitializing() internal view returns (bool) {\\n        return msg.sender == admin || msg.sender == momaMasterImplementation;\\n    }\\n\\n\\n    /*** Farming ***/\\n\\n    /**\\n      * @notice Update all markets\\u0027 borrow block for all tokens when pool upgrade to lending pool\\n      * @return uint 0=success, otherwise a failure\\n      */\\n    function updateBorrowBlock() internal returns (uint) {\\n        uint32 blockNumber = safe32(getBlockNumber(), \\\"block number exceeds 32 bits\\\");\\n        for (uint i = 0; i \\u003c allTokens.length; i++) {\\n            address token = allTokens[i];\\n            uint32 nextBlock = blockNumber;\\n            TokenFarmState storage state = farmStates[token];\\n            if (state.startBlock \\u003e blockNumber) nextBlock = state.startBlock;\\n            // if (state.endBlock \\u003c blockNumber) blockNumber = state.endBlock;\\n\\n            MToken[] memory mTokens = state.tokenMarkets;\\n            for (uint j = 0; j \\u003c mTokens.length; j++) {\\n                MToken mToken = mTokens[j];\\n                state.borrowState[address(mToken)].block = nextBlock;  // if state.speeds[address(mToken)] \\u003e 0 ?\\n            }\\n        }\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrue tokens and MOMA to the market by updating the supply index\\n     * @param mToken The market whose supply index to update\\n     */\\n    function updateFarmSupplyIndex(address mToken) internal {\\n        updateMomaSupplyIndex(mToken);\\n        for (uint i = 0; i \\u003c allTokens.length; i++) {\\n            address token = allTokens[i];\\n            updateTokenSupplyIndex(token, mToken);\\n        }\\n    }\\n\\n    /**\\n     * @notice Accrue tokens and MOMA to the market by updating the supply index\\n     * @param mToken The market whose supply index to update\\n     * @param marketBorrowIndex The market borrow index\\n     */\\n    function updateFarmBorrowIndex(address mToken, uint marketBorrowIndex) internal {\\n        updateMomaBorrowIndex(mToken, marketBorrowIndex);\\n        for (uint i = 0; i \\u003c allTokens.length; i++) {\\n            address token = allTokens[i];\\n            updateTokenBorrowIndex(token, mToken, marketBorrowIndex);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate tokens and MOMA accrued by a supplier\\n     * @param mToken The market in which the supplier is interacting\\n     * @param supplier The address of the supplier to distribute tokens and MOMA to\\n     */\\n    function distributeSupplierFarm(address mToken, address supplier) internal {\\n        distributeSupplierMoma(mToken, supplier);\\n        for (uint i = 0; i \\u003c allTokens.length; i++) {\\n            address token = allTokens[i];\\n            distributeSupplierToken(token, mToken, supplier);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate tokens and MOMA accrued by a borrower\\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\\n     * @param mToken The market in which the borrower is interacting\\n     * @param borrower The address of the borrower to distribute tokens and MOMA to\\n     * @param marketBorrowIndex The market borrow index\\n     */\\n    function distributeBorrowerFarm(address mToken, address borrower, uint marketBorrowIndex) internal {\\n        distributeBorrowerMoma(mToken, borrower, marketBorrowIndex);\\n        for (uint i = 0; i \\u003c allTokens.length; i++) {\\n            address token = allTokens[i];\\n            distributeBorrowerToken(token, mToken, borrower, marketBorrowIndex);\\n        }\\n    }\\n\\n\\n    /*** Tokens Farming ***/\\n\\n    /**\\n     * @notice Accrue token to the market by updating the supply index\\n     * @param token The token whose supply index to update\\n     * @param mToken The market whose supply index to update\\n     */\\n    function updateTokenSupplyIndex(address token, address mToken) internal {\\n        delegateToFarming(abi.encodeWithSignature(\\\"updateTokenSupplyIndex(address,address)\\\", token, mToken));\\n    }\\n\\n    /**\\n     * @notice Accrue token to the market by updating the borrow index\\n     * @param token The token whose borrow index to update\\n     * @param mToken The market whose borrow index to update\\n     * @param marketBorrowIndex The market borrow index\\n     */\\n    function updateTokenBorrowIndex(address token, address mToken, uint marketBorrowIndex) internal {\\n        delegateToFarming(abi.encodeWithSignature(\\\"updateTokenBorrowIndex(address,address,uint256)\\\", token, mToken, marketBorrowIndex));\\n    }\\n\\n    /**\\n     * @notice Calculate token accrued by a supplier\\n     * @param token The token in which the supplier is interacting\\n     * @param mToken The market in which the supplier is interacting\\n     * @param supplier The address of the supplier to distribute token to\\n     */\\n    function distributeSupplierToken(address token, address mToken, address supplier) internal {\\n        delegateToFarming(abi.encodeWithSignature(\\\"distributeSupplierToken(address,address,address)\\\", token, mToken, supplier));\\n    }\\n\\n    /**\\n     * @notice Calculate token accrued by a borrower\\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\\n     * @param mToken The market in which the borrower is interacting\\n     * @param borrower The address of the borrower to distribute token to\\n     * @param marketBorrowIndex The market borrow index\\n     */\\n    function distributeBorrowerToken(address token, address mToken, address borrower, uint marketBorrowIndex) internal {\\n        delegateToFarming(abi.encodeWithSignature(\\\"distributeBorrowerToken(address,address,address,uint256)\\\", token, mToken, borrower, marketBorrowIndex));\\n    }\\n\\n\\n    /*** Reward Public Functions ***/\\n\\n    /**\\n     * @notice Distribute all the token accrued to user in specified markets of specified token and claim\\n     * @param token The token to distribute\\n     * @param mTokens The list of markets to distribute token in\\n     * @param suppliers Whether or not to distribute token earned by supplying\\n     * @param borrowers Whether or not to distribute token earned by borrowing\\n     */\\n    function dclaim(address token, MToken[] memory mTokens, bool suppliers, bool borrowers) public {\\n        delegateToFarming(abi.encodeWithSignature(\\\"dclaim(address,address[],bool,bool)\\\", token, mTokens, suppliers, borrowers));\\n    }\\n\\n    /**\\n     * @notice Distribute all the token accrued to user in all markets of specified token and claim\\n     * @param token The token to distribute\\n     * @param suppliers Whether or not to distribute token earned by supplying\\n     * @param borrowers Whether or not to distribute token earned by borrowing\\n     */\\n    function dclaim(address token, bool suppliers, bool borrowers) external {\\n        delegateToFarming(abi.encodeWithSignature(\\\"dclaim(address,bool,bool)\\\", token, suppliers, borrowers));\\n    }\\n\\n    /**\\n     * @notice Distribute all the token accrued to user in all markets of specified tokens and claim\\n     * @param tokens The list of tokens to distribute and claim\\n     * @param suppliers Whether or not to distribute token earned by supplying\\n     * @param borrowers Whether or not to distribute token earned by borrowing\\n     */\\n    function dclaim(address[] memory tokens, bool suppliers, bool borrowers) public {\\n        delegateToFarming(abi.encodeWithSignature(\\\"dclaim(address[],bool,bool)\\\", tokens, suppliers, borrowers));\\n    }\\n\\n    /**\\n     * @notice Distribute all the token accrued to user in all markets of all tokens and claim\\n     * @param suppliers Whether or not to distribute token earned by supplying\\n     * @param borrowers Whether or not to distribute token earned by borrowing\\n     */\\n    function dclaim(bool suppliers, bool borrowers) external {\\n        delegateToFarming(abi.encodeWithSignature(\\\"dclaim(bool,bool)\\\", suppliers, borrowers));\\n    }\\n\\n    /**\\n     * @notice Claim all the token have been distributed to user of specified token\\n     * @param token The token to claim\\n     */\\n    function claim(address token) external {\\n        delegateToFarming(abi.encodeWithSignature(\\\"claim(address)\\\", token));\\n    }\\n\\n    /**\\n     * @notice Claim all the token have been distributed to user of all tokens\\n     */\\n    function claim() external {\\n        delegateToFarming(abi.encodeWithSignature(\\\"claim()\\\"));\\n    }\\n\\n\\n    /**\\n     * @notice Calculate undistributed token accrued by the user in specified market of specified token\\n     * @param user The address to calculate token for\\n     * @param token The token to calculate\\n     * @param mToken The market to calculate token\\n     * @param suppliers Whether or not to calculate token earned by supplying\\n     * @param borrowers Whether or not to calculate token earned by borrowing\\n     * @return The amount of undistributed token of this user\\n     */\\n    function undistributed(address user, address token, address mToken, bool suppliers, bool borrowers) public view returns (uint) {\\n        bytes memory data = delegateToFarmingView(abi.encodeWithSignature(\\\"undistributed(address,address,address,bool,bool)\\\", user, token, mToken, suppliers, borrowers));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Calculate undistributed tokens accrued by the user in all markets of specified token\\n     * @param user The address to calculate token for\\n     * @param token The token to calculate\\n     * @param suppliers Whether or not to calculate token earned by supplying\\n     * @param borrowers Whether or not to calculate token earned by borrowing\\n     * @return The amount of undistributed token of this user in each market\\n     */\\n    function undistributed(address user, address token, bool suppliers, bool borrowers) public view returns (uint[] memory) {\\n        bytes memory data = delegateToFarmingView(abi.encodeWithSignature(\\\"undistributed(address,address,bool,bool)\\\", user, token, suppliers, borrowers));\\n        return abi.decode(data, (uint[]));\\n    }\\n\\n\\n    /*** Token Distribution Admin ***/\\n\\n    /**\\n     * @notice Transfer token to the recipient\\n     * @dev Note: If there is not enough token, we do not perform the transfer all.\\n     * @param token The token to transfer\\n     * @param recipient The address of the recipient to transfer token to\\n     * @param amount The amount of token to (possibly) transfer\\n     */\\n    function _grantToken(address token, address recipient, uint amount) external {\\n        delegateToFarming(abi.encodeWithSignature(\\\"_grantToken(address,address,uint256)\\\", token, recipient, amount));\\n    }\\n\\n    /**\\n      * @notice Admin function to add/update erc20 token farming\\n      * @dev Can only add token or restart this token farm again after endBlock\\n      * @param token Token to add/update for farming\\n      * @param start Block heiht to start to farm this token\\n      * @param end Block heiht to stop farming\\n      * @return uint 0=success, otherwise a failure\\n      */\\n    function _setTokenFarm(EIP20Interface token, uint start, uint end) external returns (uint) {\\n        bytes memory data = delegateToFarming(abi.encodeWithSignature(\\\"_setTokenFarm(address,uint256,uint256)\\\", token, start, end));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Set token speed for multi markets\\n     * @dev Note that token speed could be set to 0 to halt liquidity rewards for a market\\n     * @param token The token to update speed\\n     * @param mTokens The markets whose token speed to update\\n     * @param newSpeeds New token speeds for markets\\n     */\\n    function _setTokensSpeed(address token, MToken[] memory mTokens, uint[] memory newSpeeds) public {\\n        delegateToFarming(abi.encodeWithSignature(\\\"_setTokensSpeed(address,address[],uint256[])\\\", token, mTokens, newSpeeds));\\n    }\\n\\n\\n    /*** MOMA Farming ***/\\n\\n    /**\\n     * @notice Accrue MOMA to the market by updating the supply index\\n     * @param mToken The market whose supply index to update\\n     */\\n    function updateMomaSupplyIndex(address mToken) internal {\\n        IMomaFarming(currentMomaFarming()).updateMarketSupplyState(mToken);\\n    }\\n\\n    /**\\n     * @notice Accrue MOMA to the market by updating the borrow index\\n     * @param mToken The market whose borrow index to update\\n     * @param marketBorrowIndex The market borrow index\\n     */\\n    function updateMomaBorrowIndex(address mToken, uint marketBorrowIndex) internal {\\n        IMomaFarming(currentMomaFarming()).updateMarketBorrowState(mToken, marketBorrowIndex);\\n    }\\n\\n    /**\\n     * @notice Calculate MOMA accrued by a supplier\\n     * @param mToken The market in which the supplier is interacting\\n     * @param supplier The address of the supplier to distribute MOMA to\\n     */\\n    function distributeSupplierMoma(address mToken, address supplier) internal {\\n        IMomaFarming(currentMomaFarming()).distributeSupplierMoma(mToken, supplier);\\n    }\\n\\n    /**\\n     * @notice Calculate MOMA accrued by a borrower\\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\\n     * @param mToken The market in which the borrower is interacting\\n     * @param borrower The address of the borrower to distribute MOMA to\\n     * @param marketBorrowIndex The market borrow index\\n     */\\n    function distributeBorrowerMoma(address mToken, address borrower, uint marketBorrowIndex) internal {\\n        IMomaFarming(currentMomaFarming()).distributeBorrowerMoma(mToken, borrower, marketBorrowIndex);\\n    }\\n\\n\\n    /*** View functions ***/\\n\\n    /**\\n     * @notice Return all of the support tokens\\n     * @dev The automatic getter may be used to access an individual token.\\n     * @return The list of market addresses\\n     */\\n    function getAllTokens() external view returns (address[] memory) {\\n        return allTokens;\\n    }\\n\\n    /**\\n     * @notice Weather a token is farming\\n     * @param token The token address to ask for\\n     * @param market Which market\\n     * @return Wether this market farm the token currently\\n     */\\n    function isFarming(address token, address market) external view returns (bool) {\\n        uint blockNumber = getBlockNumber();\\n        TokenFarmState storage state = farmStates[token];\\n        return state.speeds[market] \\u003e 0 \\u0026\\u0026 blockNumber \\u003e uint(state.startBlock) \\u0026\\u0026 blockNumber \\u003c= uint(state.endBlock);\\n    }\\n\\n    /**\\n     * @notice Get the market speed for a token\\n     * @param token The token address to ask for\\n     * @param market Which market\\n     * @return The market farm speed of this token currently\\n     */\\n    function getTokenMarketSpeed(address token, address market) external view returns (uint) {\\n        return farmStates[token].speeds[market];\\n    }\\n\\n    /**\\n     * @notice Get the accrued amount of this token farming for a user\\n     * @param token The token address to ask for\\n     * @param user The user address to ask for\\n     * @return The accrued amount of this token farming for a user\\n     */\\n    function getTokenUserAccrued(address token, address user) external view returns (uint) {\\n        return farmStates[token].accrued[user];\\n    }\\n\\n    /**\\n     * @notice Weather a market is this token market\\n     * @param token The token address to ask for\\n     * @param market The market address to ask for\\n     * @return true of false\\n     */\\n    function isTokenMarket(address token, address market) external view returns (bool) {\\n        return farmStates[token].isTokenMarket[market];\\n    }\\n\\n    /**\\n     * @notice Return all the farming support markets of a token\\n     * @param token The token address to ask for\\n     * @return The list of market addresses\\n     */\\n    function getTokenMarkets(address token) external view returns (MToken[] memory) {\\n        return farmStates[token].tokenMarkets;\\n    }\\n\\n    /**\\n     * @notice Return all of the markets\\n     * @dev The automatic getter may be used to access an individual market.\\n     * @return The list of market addresses\\n     */\\n    function getAllMarkets() external view returns (MToken[] memory) {\\n        return allMarkets;\\n    }\\n\\n    function getBlockNumber() public view returns (uint) {\\n        return block.number;\\n    }\\n\\n\\n    /*** Delegate ***/\\n\\n    /**\\n     * @notice Get current moma farming contract\\n     * @return The contract address\\n     */\\n    function currentMomaFarming() public view returns (address) {\\n        return MomaFactoryInterface(factory).momaFarming();\\n    }\\n\\n    /**\\n     * @notice Get current farming contract\\n     * @return The contract address\\n     */\\n    function currentFarmingDelegate() public view returns (address) {\\n        return MomaFactoryInterface(factory).farmingDelegate();\\n    }\\n\\n    /**\\n     * @notice Internal method to delegate execution to farming contract\\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\\n     * @param data The raw data to delegatecall\\n     * @return The returned bytes from the delegatecall\\n     */\\n    function delegateToFarming(bytes memory data) internal returns (bytes memory) {\\n        address callee = currentFarmingDelegate();\\n        (bool success, bytes memory returnData) = callee.delegatecall(data);\\n        assembly {\\n            if eq(success, 0) {\\n                revert(add(returnData, 0x20), returndatasize)\\n            }\\n        }\\n        return returnData;\\n    }\\n\\n    /**\\n     * @notice Public method to delegate view execution to farming contract\\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\\n     * @param data The raw data to delegatecall\\n     * @return The returned bytes from the delegatecall\\n     */\\n    function delegateToFarmingSelf(bytes memory data) public returns (bytes memory) {\\n        require(msg.sender == address(this), \\\"can only called by self\\\");\\n\\n        return delegateToFarming(data);\\n    }\\n\\n    /**\\n     * @notice Internal method to delegate view execution to farming contract\\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\\n     *  There are an additional 2 prefix uints from the wrapper returndata, which we ignore since we make an extra hop.\\n     * @param data The raw data to delegatecall\\n     * @return The returned bytes from the delegatecall\\n     */\\n    function delegateToFarmingView(bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returnData) = address(this).staticcall(abi.encodeWithSignature(\\\"delegateToFarmingSelf(bytes)\\\", data));\\n        assembly {\\n            if eq(success, 0) {\\n                revert(add(returnData, 0x20), returndatasize)\\n            }\\n        }\\n        return abi.decode(returnData, (bytes));\\n    }\\n}\\n\\n\\ninterface IMomaFarming {\\n    function updateMarketSupplyState(address mToken) external;\\n    function updateMarketBorrowState(address mToken, uint marketBorrowIndex) external;\\n    function distributeSupplierMoma(address mToken, address supplier) external;\\n    function distributeBorrowerMoma(address mToken, address borrower, uint marketBorrowIndex) external;\\n    function upgradeLendingPool(address pool) external;\\n    function isMomaFarming() external view returns (bool);\\n}\\n\"},\"MomaMasterInterface.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\ninterface MomaMasterInterface {\\n    /// @notice Indicator that this is a MomaMaster contract (for inspection)\\n    function isMomaMaster() external view returns (bool);\\n\\n    function factory() external view returns (address);\\n    function admin() external view returns (address payable);\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata mTokens) external returns (uint[] memory);\\n    function exitMarket(address mToken) external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address mToken, address minter, uint mintAmount) external returns (uint);\\n    function mintVerify(address mToken, address minter, uint mintAmount, uint mintTokens) external;\\n\\n    function redeemAllowed(address mToken, address redeemer, uint redeemTokens) external returns (uint);\\n    function redeemVerify(address mToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\n\\n    function borrowAllowed(address mToken, address borrower, uint borrowAmount) external returns (uint);\\n    function borrowVerify(address mToken, address borrower, uint borrowAmount) external;\\n\\n    function repayBorrowAllowed(\\n        address mToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function repayBorrowVerify(\\n        address mToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex) external;\\n\\n    function liquidateBorrowAllowed(\\n        address mTokenBorrowed,\\n        address mTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function liquidateBorrowVerify(\\n        address mTokenBorrowed,\\n        address mTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens) external;\\n\\n    function seizeAllowed(\\n        address mTokenCollateral,\\n        address mTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external returns (uint);\\n    function seizeVerify(\\n        address mTokenCollateral,\\n        address mTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external;\\n\\n    function transferAllowed(address mToken, address src, address dst, uint transferTokens) external returns (uint);\\n    function transferVerify(address mToken, address src, address dst, uint transferTokens) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address mTokenBorrowed,\\n        address mTokenCollateral,\\n        uint repayAmount) external view returns (uint, uint);\\n}\\n\"},\"MomaMasterStorage.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport \\\"./MToken.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\n\\ncontract MomaPoolAdminStorage {\\n    /**\\n    * @notice Factory of this contract\\n    */\\n    address public factory;\\n\\n    /**\\n    * @notice Administrator for this contract\\n    */\\n    address public admin;\\n\\n    /**\\n    * @notice Pending administrator for this contract\\n    */\\n    address public pendingAdmin;\\n\\n    /**\\n    * @notice Active brains of MomaPool\\n    */\\n    address public momaMasterImplementation;\\n\\n    /**\\n    * @notice Pending brains of MomaPool\\n    */\\n    address public pendingMomaMasterImplementation;\\n\\n    /**\\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n     */\\n    uint public closeFactorMantissa = 0.5e18;\\n\\n    /**\\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\\n     */\\n    uint public liquidationIncentiveMantissa = 1.1e18;\\n}\\n\\n\\ncontract MomaMasterV1Storage is MomaPoolAdminStorage {\\n\\n    /**\\n     * @notice Oracle which gives the price of any given asset\\n     */\\n    PriceOracle public oracle;\\n\\n    /**\\n     * @notice Max number of assets a single account can participate in (borrow or use as collateral)\\n     */\\n    uint public maxAssets;\\n\\n    /**\\n     * @notice Weather is lending pool\\n     */\\n    bool public isLendingPool;\\n\\n    /**\\n     * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n     */\\n    mapping(address =\\u003e MToken[]) public accountAssets;\\n\\n\\n    struct Market {\\n        /// @notice Whether or not this market is listed\\n        bool isListed;\\n\\n        /**\\n         * @notice Multiplier representing the most one can borrow against their collateral in this market.\\n         *  For instance, 0.9 to allow borrowing 90% of collateral value.\\n         *  Must be between 0 and 1, and stored as a mantissa.\\n         */\\n        uint collateralFactorMantissa;\\n\\n        /// @notice Per-market mapping of \\\"accounts in this asset\\\"\\n        mapping(address =\\u003e bool) accountMembership;\\n\\n        /// @notice Whether or not this market receives MOMA\\n        // bool isMomaed;\\n    }\\n\\n    /**\\n     * @notice Official mapping of mTokens -\\u003e Market metadata\\n     * @dev Used e.g. to determine if a market is supported\\n     */\\n    mapping(address =\\u003e Market) public markets;\\n\\n\\n    /**\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n     *  Actions which allow users to remove their own assets cannot be paused.\\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n     */\\n    address public pauseGuardian;\\n    // bool public _mintGuardianPaused;\\n    // bool public _borrowGuardianPaused;\\n    bool public transferGuardianPaused;\\n    bool public seizeGuardianPaused;\\n    mapping(address =\\u003e bool) public mintGuardianPaused;\\n    mapping(address =\\u003e bool) public borrowGuardianPaused;\\n\\n\\n    struct MarketState {\\n        /// @notice The market\\u0027s last updated BorrowIndex or SupplyIndex\\n        uint224 index;\\n\\n        /// @notice The block number the index was last updated at\\n        uint32 block;\\n    }\\n\\n    /// @notice A list of all markets\\n    MToken[] public allMarkets;\\n\\n\\n    // @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\n    // address public borrowCapGuardian;\\n\\n    // @notice Borrow caps enforced by borrowAllowed for each mToken address. Defaults to zero which corresponds to unlimited borrowing.\\n    mapping(address =\\u003e uint) public borrowCaps;\\n\\n\\n\\n    struct TokenFarmState {\\n        /// @notice The block number to start to farm this token\\n        uint32 startBlock;\\n\\n        /// @notice The block number to start to farm this token\\n        uint32 endBlock;\\n\\n        /// @notice The portion of tokenRate that each market currently receives\\n        mapping(address =\\u003e uint) speeds;\\n\\n        /// @notice The token market supply state for each market\\n        mapping(address =\\u003e MarketState) supplyState;\\n\\n        /// @notice The token market borrow state for each market\\n        mapping(address =\\u003e MarketState) borrowState;\\n\\n        /// @notice The token borrow index for each market for each supplier as of the last time they accrued token\\n        mapping(address =\\u003e mapping(address =\\u003e uint)) supplierIndex;\\n\\n        /// @notice The token borrow index for each market for each borrower as of the last time they accrued token\\n        mapping(address =\\u003e mapping(address =\\u003e uint)) borrowerIndex;\\n\\n        /// @notice The token accrued but not yet transferred to each user\\n        mapping(address =\\u003e uint) accrued;\\n\\n        /// @notice Whether is token market, used to avoid add to tokenMarkets again\\n        mapping(address =\\u003e bool) isTokenMarket;\\n\\n        /// @notice A list of token markets of this token, it\\u0027s speed may be 0, but startBlock will always \\u003e 0\\n        MToken[] tokenMarkets;\\n    }\\n\\n    /// @notice The token farm states\\n    mapping(address =\\u003e TokenFarmState) public farmStates;\\n\\n    /// @notice A list of all tokens\\n    address[] public allTokens;\\n\\n}\\n\"},\"MomaPool.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./MomaMasterStorage.sol\\\";\\nimport \\\"./MomaFactoryInterface.sol\\\";\\n\\n/**\\n * @title MomaMasterCore\\n * @dev Storage for the MomaMaster is at this address, while execution is delegated to the `momaMasterImplementation`.\\n * MTokens should reference this contract as their MomaMaster.\\n */\\ncontract MomaPool is MomaPoolAdminStorage, MomaMasterErrorReporter {\\n\\n    /**\\n      * @notice Emitted when pendingMomaMasterImplementation is changed\\n      */\\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\\n\\n    /**\\n      * @notice Emitted when pendingMomaMasterImplementation is accepted, which means momaMaster implementation is updated\\n      */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is changed\\n      */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n      */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    constructor() public {\\n        // Set admin to caller\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address admin_, address implementation_) external {\\n        require(msg.sender == factory \\u0026\\u0026 admin == address(0), \\u0027MomaPool: FORBIDDEN\\u0027); // sufficient check\\n        require(implementation_ != address(0), \\u0027MomaPool: ZERO FORBIDDEN\\u0027);\\n        admin = admin_;\\n        momaMasterImplementation = implementation_;\\n    }\\n\\n    /*** Admin Functions ***/\\n    function _setPendingImplementation(address newPendingImplementation) public returns (uint) {\\n\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\\n        }\\n\\n        // Check is momaMaster\\n        require(MomaFactoryInterface(factory).isMomaMaster(newPendingImplementation) == true, \\u0027MomaPool: NOT MOMAMASTER\\u0027);\\n\\n        address oldPendingImplementation = pendingMomaMasterImplementation;\\n\\n        pendingMomaMasterImplementation = newPendingImplementation;\\n\\n        emit NewPendingImplementation(oldPendingImplementation, pendingMomaMasterImplementation);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n    * @notice Accepts new implementation of momaMaster. msg.sender must be pendingImplementation\\n    * @dev Admin function for new implementation to accept it\\u0027s role as implementation\\n    * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n    */\\n    function _acceptImplementation() public returns (uint) {\\n        // Check caller is pendingImplementation and pendingImplementation ≠ address(0)\\n        if (msg.sender != pendingMomaMasterImplementation || pendingMomaMasterImplementation == address(0)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\\n        }\\n\\n        // Check is momaMaster\\n        require(MomaFactoryInterface(factory).isMomaMaster(msg.sender) == true, \\u0027MomaPool: NOT MOMAMASTER\\u0027);\\n\\n        // Save current values for inclusion in log\\n        address oldImplementation = momaMasterImplementation;\\n        address oldPendingImplementation = pendingMomaMasterImplementation;\\n\\n        momaMasterImplementation = pendingMomaMasterImplementation;\\n\\n        pendingMomaMasterImplementation = address(0);\\n\\n        emit NewImplementation(oldImplementation, momaMasterImplementation);\\n        emit NewPendingImplementation(oldPendingImplementation, pendingMomaMasterImplementation);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n        }\\n\\n        // Check is timelock\\n        require(MomaFactoryInterface(factory).isTimelock(newPendingAdmin) == true, \\u0027MomaPool: NOT TIMELOCK\\u0027);\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _acceptAdmin() public returns (uint) {\\n        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Check is timelock\\n        require(MomaFactoryInterface(factory).isTimelock(msg.sender) == true, \\u0027MomaPool: NOT TIMELOCK\\u0027);\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @dev Delegates execution to an implementation contract.\\n     * It returns to the external caller whatever the implementation returns\\n     * or forwards reverts.\\n     */\\n    function () payable external {\\n        // delegate all other functions to current implementation\\n        (bool success, ) = momaMasterImplementation.delegatecall(msg.data);\\n\\n        assembly {\\n              let free_mem_ptr := mload(0x40)\\n              returndatacopy(free_mem_ptr, 0, returndatasize)\\n\\n              switch success\\n              case 0 { revert(free_mem_ptr, returndatasize) }\\n              default { return(free_mem_ptr, returndatasize) }\\n        }\\n    }\\n}\\n\"},\"MToken.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport \\\"./MomaMasterInterface.sol\\\";\\nimport \\\"./MTokenInterfaces.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./MomaFactoryInterface.sol\\\";\\n\\n/**\\n * @title Moma\\u0027s MToken Contract\\n * @notice Abstract base for MTokens\\n * @author Moma\\n */\\ncontract MToken is MTokenInterface, Exponential, TokenErrorReporter {\\n    /**\\n     * @notice Initialize the money market\\n     * @param momaMaster_ The address of the MomaMaster\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     * @param feeReceiver_ Address of the free receiver of this token\\n     */\\n    function initialize(MomaMasterInterface momaMaster_,\\n                        uint initialExchangeRateMantissa_,\\n                        string memory name_,\\n                        string memory symbol_,\\n                        uint8 decimals_,\\n                        address payable feeReceiver_) public {\\n        require(msg.sender == momaMaster_.admin(), \\\"only admin may initialize the market\\\");\\n        require(initialExchangeRateMantissa == 0, \\\"market may only be initialized once\\\");\\n        require(feeReceiver_ != address(0), \\\"feeReceiver is zero address\\\");\\n\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n        require(initialExchangeRateMantissa \\u003e 0, \\\"initial exchange rate must be greater than zero.\\\");\\n\\n        // Ensure invoke momaMaster.isMomaMaster() returns true\\n        require(momaMaster_.isMomaMaster(), \\\"marker method returned false\\\");\\n        // Set the momaMaster\\n        momaMaster = momaMaster_;\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n        feeReceiver = feeReceiver_;\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @notice Read the factory address from momaMaster\\n     * @return Factory address\\n     */\\n    function factory() public view returns (MomaFactoryInterface) {\\n        return MomaFactoryInterface(momaMaster.factory());\\n    }\\n\\n    /**\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\\n        /* Fail if transfer not allowed */\\n        uint allowed = momaMaster.transferAllowed(address(this), src, dst, tokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.MOMAMASTER_REJECTION, FailureInfo.TRANSFER_MOMAMASTER_REJECTION, allowed);\\n        }\\n\\n        /* Do not allow self-transfers */\\n        if (src == dst) {\\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = uint(-1);\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /* Do the calculations, checking for {under,over}flow */\\n        MathError mathErr;\\n        uint allowanceNew;\\n        uint srcTokensNew;\\n        uint dstTokensNew;\\n\\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        (mathErr, srcTokensNew) = subUInt(accountTokens[src], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\n        }\\n\\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS \\u0026 INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        accountTokens[src] = srcTokensNew;\\n        accountTokens[dst] = dstTokensNew;\\n\\n        /* Eat some of the allowance (if necessary) */\\n        if (startingAllowance != uint(-1)) {\\n            transferAllowances[src][spender] = allowanceNew;\\n        }\\n\\n        /* We emit a Transfer event */\\n        emit Transfer(src, dst, tokens);\\n\\n        momaMaster.transferVerify(address(this), src, dst, tokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        address src = msg.sender;\\n        transferAllowances[src][spender] = amount;\\n        emit Approval(src, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) external returns (uint) {\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\n        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\\n        require(mErr == MathError.NO_ERROR, \\\"balance could not be calculated\\\");\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account\\u0027s balances, and the cached exchange rate\\n     * @dev This is used by momaMaster to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {\\n        uint mTokenBalance = accountTokens[account];\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n\\n        MathError mErr;\\n\\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        return (uint(Error.NO_ERROR), mTokenBalance, borrowBalance, exchangeRateMantissa);\\n    }\\n\\n    /**\\n     * @dev Function to simply retrieve block number\\n     *  This exists mainly for inheriting test contracts to stub this result.\\n     */\\n    function getBlockNumber() internal view returns (uint) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this mToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() external view returns (uint) {\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves, totalFees, totalMomaFees);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this mToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() external view returns (uint) {\\n        return interestRateModel.getSupplyRate(\\n            getCashPrior(), \\n            totalBorrows, \\n            totalReserves, \\n            reserveFactorMantissa, \\n            totalFees, \\n            feeFactorMantissa, \\n            totalMomaFees, \\n            getMomaFeeFactorMantissa()\\n        );\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() external nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account\\u0027s borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) external nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) public view returns (uint) {\\n        (MathError err, uint result) = borrowBalanceStoredInternal(account);\\n        require(err == MathError.NO_ERROR, \\\"borrowBalanceStored: borrowBalanceStoredInternal failed\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\\n     */\\n    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\\n        /* Note: we do not assert that the market is up to date */\\n        MathError mathErr;\\n        uint principalTimesIndex;\\n        uint result;\\n\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, result);\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() public nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the MToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view returns (uint) {\\n        (MathError err, uint result) = exchangeRateStoredInternal();\\n        require(err == MathError.NO_ERROR, \\\"exchangeRateStored: exchangeRateStoredInternal failed\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the MToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return (error code, calculated exchange rate scaled by 1e18)\\n     */\\n    function exchangeRateStoredInternal() internal view returns (MathError, uint) {\\n        uint _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves - totalFees - totalMomaFees) / totalSupply\\n             */\\n            uint totalCash = getCashPrior();\\n            uint cashPlusBorrowsMinusReserves;\\n            uint minusFees;\\n            uint minusMomaFees;\\n            Exp memory exchangeRate;\\n            MathError mathErr;\\n\\n            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(totalCash, totalBorrows, totalReserves);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            (mathErr, minusFees) = subUInt(cashPlusBorrowsMinusReserves, totalFees);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            (mathErr, minusMomaFees) = subUInt(minusFees, totalMomaFees);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            (mathErr, exchangeRate) = getExp(minusMomaFees, _totalSupply);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this mToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view returns (uint) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Gets momaFeeFactorMantissa from factory contract\\n     * @return The momaFeeFactorMantissa of this market set by factory contract\\n     */\\n    function getMomaFeeFactor() external view returns (uint) {\\n        return getMomaFeeFactorMantissa();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     *   up to the current block and writes new checkpoint to storage.\\n     */\\n    function accrueInterest() public returns (uint) {\\n        /* Short-circuit if not set interestRateModel, that means this is launch pool */\\n        if (address(interestRateModel) == address(0)) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Remember the initial block number */\\n        // uint currentBlockNumber = getBlockNumber();\\n        // uint accrualBlockNumberPrior = accrualBlockNumber;\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockNumber == getBlockNumber()) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Read the previous values out of storage */\\n        uint cashPrior = getCashPrior();\\n        uint borrowsPrior = totalBorrows;\\n        uint reservesPrior = totalReserves;\\n        // uint feesPrior = totalFees;\\n        // uint momaFeesPrior = totalMomaFees;\\n        uint borrowIndexPrior = borrowIndex;\\n\\n        /* Read the current moma fee factor from factory */\\n        uint momaFeeFactorMantissa = getMomaFeeFactorMantissa();\\n        require(momaFeeFactorMantissa \\u003c= momaFeeFactorMaxMantissa, \\\"moma fee factor is absurdly high\\\");\\n\\n        /* Calculate the current borrow interest rate */\\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior, totalFees, totalMomaFees);\\n        require(borrowRateMantissa \\u003c= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\n\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        (MathError mathErr, uint blockDelta) = subUInt(getBlockNumber(), accrualBlockNumber);\\n        require(mathErr == MathError.NO_ERROR, \\\"could not calculate block delta\\\");\\n\\n        /*\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\n         *  simpleInterestFactor = borrowRate * blockDelta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n         *  totalFeesNew = interestAccumulated * feeFactor + totalFees\\n         *  totalMomaFeesNew = interestAccumulated * momaFeeFactor + totalMomaFees\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n\\n        Exp memory simpleInterestFactor;\\n        uint interestAccumulated;\\n        uint totalBorrowsNew;\\n        uint totalReservesNew;\\n        uint totalFeesNew;\\n        uint totalMomaFeesNew;\\n        uint borrowIndexNew;\\n\\n        (mathErr, simpleInterestFactor) = mulScalar(Exp({mantissa: borrowRateMantissa}), blockDelta);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, interestAccumulated) = mulScalarTruncate(simpleInterestFactor, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, totalBorrowsNew) = addUInt(interestAccumulated, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(Exp({mantissa: reserveFactorMantissa}), interestAccumulated, reservesPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, totalFeesNew) = mulScalarTruncateAddUInt(Exp({mantissa: feeFactorMantissa}), interestAccumulated, totalFees);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_FEES_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, totalMomaFeesNew) = mulScalarTruncateAddUInt(Exp({mantissa: momaFeeFactorMantissa}), interestAccumulated, totalMomaFees);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_MOMA_FEES_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, borrowIndexNew) = mulScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS \\u0026 INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accrualBlockNumber = getBlockNumber();\\n        borrowIndex = borrowIndexNew;\\n        totalBorrows = totalBorrowsNew;\\n        totalReserves = totalReservesNew;\\n        totalFees = totalFeesNew;\\n        totalMomaFees = totalMomaFeesNew;\\n\\n        /* We emit an AccrueInterest event */\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives mTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don\\u0027t need to\\n        return mintFresh(msg.sender, mintAmount);\\n    }\\n\\n    struct MintLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint mintTokens;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n        uint actualMintAmount;\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives mTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\\n        /* Fail if mint not allowed */\\n        uint allowed = momaMaster.mintAllowed(address(this), minter, mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.MOMAMASTER_REJECTION, FailureInfo.MINT_MOMAMASTER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market\\u0027s block number equals current block number */\\n        if (address(interestRateModel) != address(0) \\u0026\\u0026 accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS \\u0026 INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\n         *  Note: The mToken must handle variations between ERC-20 and ETH underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can\\u0027t be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the mToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of mTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_EXCHANGE_CALCULATION_FAILED\\\");\\n        require(vars.mintTokens \\u003e 0, \\\"MINT_TOKENS_ZERO\\\");\\n\\n        /*\\n         * We calculate the new total supply of mTokens and minter token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\\\");\\n\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[minter], vars.mintTokens);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\\\");\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[minter] = vars.accountTokensNew;\\n\\n        /* We emit a Mint event, and a Transfer event */\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\\n        emit Transfer(address(this), minter, vars.mintTokens);\\n\\n        /* We call the defense hook */\\n        momaMaster.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Sender redeems mTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of mTokens to redeem into underlying\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemInternal(uint redeemTokens) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don\\u0027t need to\\n        return redeemFresh(msg.sender, redeemTokens, 0);\\n    }\\n\\n    /**\\n     * @notice Sender redeems mTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to receive from redeeming mTokens\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don\\u0027t need to\\n        return redeemFresh(msg.sender, 0, redeemAmount);\\n    }\\n\\n    struct RedeemLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint redeemTokens;\\n        uint redeemAmount;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n    }\\n\\n    /**\\n     * @notice User redeems mTokens in exchange for the underlying asset\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param redeemTokensIn The number of mTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming mTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\n\\n        RedeemLocalVars memory vars;\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /* If redeemTokensIn \\u003e 0: */\\n        if (redeemTokensIn \\u003e 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokensIn\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n             */\\n            vars.redeemTokens = redeemTokensIn;\\n\\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint(vars.mathErr));\\n            }\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\n             *  redeemAmount = redeemAmountIn\\n             */\\n\\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint(vars.mathErr));\\n            }\\n\\n            vars.redeemAmount = redeemAmountIn;\\n        }\\n\\n        /* Fail if redeem not allowed */\\n        uint allowed = momaMaster.redeemAllowed(address(this), redeemer, vars.redeemTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.MOMAMASTER_REJECTION, FailureInfo.REDEEM_MOMAMASTER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market\\u0027s block number equals current block number */\\n        if (address(interestRateModel) != address(0) \\u0026\\u0026 accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\\n        }\\n\\n        /*\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\n         *  totalSupplyNew = totalSupply - redeemTokens\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient cash */\\n        if (getCashPrior() \\u003c vars.redeemAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS \\u0026 INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\n         *  Note: The mToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the mToken has redeemAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can\\u0027t be sure if side effects occurred.\\n         */\\n        doTransferOut(redeemer, vars.redeemAmount);\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[redeemer] = vars.accountTokensNew;\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\n        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        /* We call the defense hook */\\n        momaMaster.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sender borrows assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrowInternal(uint borrowAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\n        }\\n        // borrowFresh emits borrow-specific logs on errors, so we don\\u0027t need to\\n        return borrowFresh(msg.sender, borrowAmount);\\n    }\\n\\n    struct BorrowLocalVars {\\n        MathError mathErr;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n    }\\n\\n    /**\\n      * @notice Users borrow assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrowFresh(address payable borrower, uint borrowAmount) internal returns (uint) {\\n        /* Fail if borrow not allowed */\\n        uint allowed = momaMaster.borrowAllowed(address(this), borrower, borrowAmount);\\n        if (allowed != 0) {\\n            return failOpaque(Error.MOMAMASTER_REJECTION, FailureInfo.BORROW_MOMAMASTER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market\\u0027s block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\n        if (getCashPrior() \\u003c borrowAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\\n        }\\n\\n        BorrowLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS \\u0026 INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\n         *  Note: The mToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the mToken borrowAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can\\u0027t be sure if side effects occurred.\\n         */\\n        doTransferOut(borrower, borrowAmount);\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        momaMaster.borrowVerify(address(this), borrower, borrowAmount);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don\\u0027t need to\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don\\u0027t need to\\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\\n    }\\n\\n    struct RepayBorrowLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint repayAmount;\\n        uint borrowerIndex;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n        uint actualRepayAmount;\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer the account paying off the borrow\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount the amount of undelrying tokens being returned\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\\n        /* Fail if repayBorrow not allowed */\\n        uint allowed = momaMaster.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.MOMAMASTER_REJECTION, FailureInfo.REPAY_BORROW_MOMAMASTER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market\\u0027s block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\n        }\\n\\n        RepayBorrowLocalVars memory vars;\\n\\n        /* We remember the original borrowerIndex for verification purposes */\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\n        if (repayAmount == uint(-1)) {\\n            vars.repayAmount = vars.accountBorrows;\\n        } else {\\n            vars.repayAmount = repayAmount;\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS \\u0026 INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The mToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the mToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can\\u0027t be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\\\");\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\\\");\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        momaMaster.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\n\\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this mToken to be liquidated\\n     * @param mTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowInternal(address borrower, uint repayAmount, MTokenInterface mTokenCollateral) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\\n        }\\n\\n        error = mTokenCollateral.accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\\n        }\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don\\u0027t need to\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, mTokenCollateral);\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this mToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param mTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, MTokenInterface mTokenCollateral) internal returns (uint, uint) {\\n        /* Fail if liquidate not allowed */\\n        uint allowed = momaMaster.liquidateBorrowAllowed(address(this), address(mTokenCollateral), liquidator, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.MOMAMASTER_REJECTION, FailureInfo.LIQUIDATE_MOMAMASTER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market\\u0027s block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Verify mTokenCollateral market\\u0027s block number equals current block number */\\n        if (mTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\n        }\\n\\n        /* Fail if repayAmount = 0 */\\n        if (repayAmount == 0) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\n        }\\n\\n        /* Fail if repayAmount = -1 */\\n        if (repayAmount == uint(-1)) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\n        }\\n\\n\\n        /* Fail if repayBorrow fails */\\n        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\n        if (repayBorrowError != uint(Error.NO_ERROR)) {\\n            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS \\u0026 INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (uint amountSeizeError, uint seizeTokens) = momaMaster.liquidateCalculateSeizeTokens(address(this), address(mTokenCollateral), actualRepayAmount);\\n        require(amountSeizeError == uint(Error.NO_ERROR), \\\"LIQUIDATE_MOMAMASTER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\n\\n        /* Revert if borrower collateral token balance \\u003c seizeTokens */\\n        require(mTokenCollateral.balanceOf(borrower) \\u003e= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        uint seizeError;\\n        if (address(mTokenCollateral) == address(this)) {\\n            seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n        } else {\\n            seizeError = mTokenCollateral.seize(liquidator, borrower, seizeTokens);\\n        }\\n\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n        require(seizeError == uint(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(mTokenCollateral), seizeTokens);\\n\\n        /* We call the defense hook */\\n        momaMaster.liquidateBorrowVerify(address(this), address(mTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);\\n\\n        return (uint(Error.NO_ERROR), actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another mToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed mToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of mTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seize(address liquidator, address borrower, uint seizeTokens) external nonReentrant returns (uint) {\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another MToken.\\n     *  Its absolutely critical to use msg.sender as the seizer mToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed mToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of mTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint) {\\n        /* Fail if seize not allowed */\\n        uint allowed = momaMaster.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.MOMAMASTER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_MOMAMASTER_REJECTION, allowed);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\\n        }\\n\\n        MathError mathErr;\\n        uint borrowerTokensNew;\\n        uint liquidatorTokensNew;\\n\\n        /*\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n         */\\n        (mathErr, borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, liquidatorTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS \\u0026 INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountTokens[borrower] = borrowerTokensNew;\\n        accountTokens[liquidator] = liquidatorTokensNew;\\n\\n        /* Emit a Transfer event */\\n        emit Transfer(borrower, liquidator, seizeTokens);\\n\\n        /* We call the defense hook */\\n        momaMaster.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n      * @notice Sets a new feeReceiver for the market\\n      * @dev Admin function to set a new feeReceiver\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setFeeReceiver(address payable newFeeReceiver) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != momaMaster.admin()) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_FEE_RECEIVER_OWNER_CHECK);\\n        }\\n\\n        // The newFeeReceiver can not be 0\\n        if (newFeeReceiver == address(0)) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_FEE_RECEIVER_ADDRESS_VALIDATION);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldFeeReceiver = feeReceiver;\\n\\n        // Set market\\u0027s feeReceiver to newFeeReceiver\\n        feeReceiver = newFeeReceiver;\\n\\n        emit NewFeeReceiver(oldFeeReceiver, newFeeReceiver);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice accrues interest and sets a new fee factor for the protocol using _setFeeFactorFresh\\n      * @dev Admin function to accrue interest and set a new fee factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setFeeFactor(uint newFeeFactorMantissa) external nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted fee factor change failed.\\n            return fail(Error(error), FailureInfo.SET_FEE_FACTOR_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setFeeFactorFresh emits fee-factor-specific logs on errors, so we don\\u0027t need to.\\n        return _setFeeFactorFresh(newFeeFactorMantissa);\\n    }\\n\\n    /**\\n      * @notice Sets a new fee factor for the protocol (*requires fresh interest accrual)\\n      * @dev Admin function to set a new fee factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setFeeFactorFresh(uint newFeeFactorMantissa) internal returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != momaMaster.admin()) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_FEE_FACTOR_ADMIN_CHECK);\\n        }\\n\\n        // Verify market\\u0027s block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_FEE_FACTOR_FRESH_CHECK);\\n        }\\n\\n        // Check newFeeFactor ≤ maxFeeFactor\\n        if (newFeeFactorMantissa \\u003e feeFactorMaxMantissa) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_FEE_FACTOR_BOUNDS_CHECK);\\n        }\\n\\n        uint oldFeeFactorMantissa = feeFactorMantissa;\\n        feeFactorMantissa = newFeeFactorMantissa;\\n\\n        emit NewFeeFactor(oldFeeFactorMantissa, newFeeFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and collect fees by transferring to feeReceiver, only for admin or feeReceiver\\n     * @param collectAmount Amount of fees to collect, -1 means totalFees\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _collectFees(uint collectAmount) external nonReentrant returns (uint) {\\n        // If totalFees = 0 \\u0026\\u0026 collectAmount = uint(-1), just return\\n        if (totalFees == 0) {\\n            if (collectAmount == uint(-1)) {\\n                return uint(Error.NO_ERROR);\\n            }\\n            return fail(Error.BAD_INPUT, FailureInfo.COLLECT_FEES_VALIDATION);\\n        }\\n\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted collect fees failed.\\n            return fail(Error(error), FailureInfo.COLLECT_FEES_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _collectFeesFresh emits collect-fee-specific logs on errors, so we don\\u0027t need to.\\n        return _collectFeesFresh(collectAmount);\\n    }\\n\\n    /**\\n     * @notice Collect fees by transferring to feeReceiver\\n     * @dev Requires fresh interest accrual, only for admin or feeReceiver\\n     * @param collectAmount Amount of fees to collect, -1 means totalFees\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _collectFeesFresh(uint collectAmount) internal returns (uint) {\\n        // Collect moma fees first\\n        _collectMomaFeesFresh(totalMomaFees);\\n\\n        // -1 means totalFees\\n        if (collectAmount == uint(-1)) {\\n            collectAmount = totalFees; // is this safe?\\n        }\\n\\n        if (collectAmount == 0) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        // totalFees - collectAmount\\n        uint totalFeesNew;\\n\\n        // Check caller is admin or feeReceiver\\n        if (msg.sender != momaMaster.admin() \\u0026\\u0026 msg.sender != feeReceiver) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.COLLECT_FEES_ADMIN_CHECK);\\n        }\\n\\n        // We fail gracefully unless market\\u0027s block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.COLLECT_FEES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() \\u003c collectAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.COLLECT_FEES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check collectAmount ≤ fees[n] (totalFees)\\n        if (collectAmount \\u003e totalFees) {\\n            return fail(Error.BAD_INPUT, FailureInfo.COLLECT_FEES_VALIDATION);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS \\u0026 INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        totalFeesNew = totalFees - collectAmount;\\n        // We checked collectAmount \\u003c= totalFees above, so this should never revert.\\n        require(totalFeesNew \\u003c= totalFees, \\\"collect fees unexpected underflow\\\");\\n\\n        // Store fees[n+1] = fees[n] - collectAmount\\n        totalFees = totalFeesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can\\u0027t be sure if side effects occurred.\\n        doTransferOut(feeReceiver, collectAmount);\\n\\n        emit FeesCollected(feeReceiver, collectAmount, totalFeesNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and collect moma fees by transferring to momaFeeReceiver\\n     * @param collectAmount Amount of fees to collect, -1 means totalMomaFees\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _collectMomaFees(uint collectAmount) external nonReentrant returns (uint) {\\n        // If totalMomaFees = 0 \\u0026\\u0026 collectAmount = uint(-1), just return\\n        if (totalMomaFees == 0) {\\n            if (collectAmount == uint(-1)) {\\n                return uint(Error.NO_ERROR);\\n            }\\n            return fail(Error.BAD_INPUT, FailureInfo.COLLECT_MOMA_FEES_VALIDATION);\\n        }\\n        \\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted collect fees failed.\\n            return fail(Error(error), FailureInfo.COLLECT_MOMA_FEES_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _collectMomaFeesFresh emits collect-moma-fee-specific logs on errors, so we don\\u0027t need to.\\n\\n        // Read the current moma fee admin and receiver from factory\\n        MomaFactoryInterface fct = factory();\\n        address momaFeeAdmin = fct.getMomaFeeAdmin(address(momaMaster));\\n        address payable momaFeeReceiver = fct.getMomaFeeReceiver(address(momaMaster));\\n        // Check caller is momaFeeAdmin or momaFeeReceiver\\n        if (msg.sender != momaFeeAdmin \\u0026\\u0026 msg.sender != momaFeeReceiver) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.COLLECT_MOMA_FEES_ADMIN_CHECK);\\n        }\\n        return _collectMomaFeesFresh(collectAmount);\\n    }\\n\\n    /**\\n     * @notice Collect moma fees by transferring to momaFeeReceiver\\n     * @dev Requires fresh interest accrual\\n     * @param collectAmount Amount of fees to collect, -1 means totalMomaFees\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _collectMomaFeesFresh(uint collectAmount) internal returns (uint) {\\n        // -1 means totalMomaFees\\n        if (collectAmount == uint(-1)) {\\n            collectAmount = totalMomaFees; // is this safe?\\n        }\\n\\n        if (collectAmount == 0) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        // totalMomaFees - collectAmount\\n        uint totalMomaFeesNew;\\n\\n        // We fail gracefully unless market\\u0027s block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.COLLECT_MOMA_FEES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() \\u003c collectAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.COLLECT_MOMA_FEES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check collectAmount ≤ momaFees[n] (totalMomaFees)\\n        if (collectAmount \\u003e totalMomaFees) {\\n            return fail(Error.BAD_INPUT, FailureInfo.COLLECT_MOMA_FEES_VALIDATION);\\n        }\\n\\n        // Read the current moma fee receiver from factory\\n        address payable momaFeeReceiver = factory().getMomaFeeReceiver(address(momaMaster));\\n\\n        /////////////////////////\\n        // EFFECTS \\u0026 INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        totalMomaFeesNew = totalMomaFees - collectAmount;\\n        // We checked collectAmount \\u003c= totalMomaFees above, so this should never revert.\\n        require(totalMomaFeesNew \\u003c= totalMomaFees, \\\"collect moma fees unexpected underflow\\\");\\n\\n        // Store momaFees[n+1] = momaFees[n] - collectAmount\\n        totalMomaFees = totalMomaFeesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can\\u0027t be sure if side effects occurred.\\n        doTransferOut(momaFeeReceiver, collectAmount);\\n\\n        emit MomaFeesCollected(momaFeeReceiver, collectAmount, totalMomaFeesNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n      * @dev Admin function to accrue interest and set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactor(uint newReserveFactorMantissa) external nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don\\u0027t need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\n    }\\n\\n    /**\\n      * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n      * @dev Admin function to set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != momaMaster.admin()) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\\n        }\\n\\n        // Verify market\\u0027s block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\n        }\\n\\n        // Check newReserveFactor ≤ maxReserveFactor\\n        if (newReserveFactorMantissa \\u003e reserveFactorMaxMantissa) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\n        }\\n\\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring from msg.sender\\n     * @param addAmount Amount of addition to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don\\u0027t need to.\\n        (error, ) = _addReservesFresh(addAmount);\\n        return error;\\n    }\\n\\n    /**\\n     * @notice Add reserves by transferring from caller\\n     * @dev Requires fresh interest accrual\\n     * @param addAmount Amount of addition to reserves\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\n     */\\n    function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\\n        // totalReserves + actualAddAmount\\n        uint totalReservesNew;\\n        uint actualAddAmount;\\n\\n        // We fail gracefully unless market\\u0027s block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.ADD_RESERVES_FRESH_CHECK), actualAddAmount);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS \\u0026 INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the caller and the addAmount\\n         *  Note: The mToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the mToken holds an additional addAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can\\u0027t be sure if side effects occurred.\\n         *  it returns the amount actually transferred, in case of a fee.\\n         */\\n\\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\\n\\n        totalReservesNew = totalReserves + actualAddAmount;\\n\\n        /* Revert on overflow */\\n        require(totalReservesNew \\u003e= totalReserves, \\\"add reserves unexpected overflow\\\");\\n\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\n        totalReserves = totalReservesNew;\\n\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n        /* Return (NO_ERROR, actualAddAmount) */\\n        return (uint(Error.NO_ERROR), actualAddAmount);\\n    }\\n\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReserves(uint reduceAmount) external nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don\\u0027t need to.\\n        return _reduceReservesFresh(reduceAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to admin\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\\n        // totalReserves - reduceAmount\\n        uint totalReservesNew;\\n\\n        address payable momaMasterAdmin = momaMaster.admin();\\n        // Check caller is admin\\n        if (msg.sender != momaMasterAdmin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\\n        }\\n\\n        // We fail gracefully unless market\\u0027s block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() \\u003c reduceAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check reduceAmount ≤ reserves[n] (totalReserves)\\n        if (reduceAmount \\u003e totalReserves) {\\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS \\u0026 INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        totalReservesNew = totalReserves - reduceAmount;\\n        // We checked reduceAmount \\u003c= totalReserves above, so this should never revert.\\n        require(totalReservesNew \\u003c= totalReserves, \\\"reduce reserves unexpected underflow\\\");\\n\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\n        totalReserves = totalReservesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can\\u0027t be sure if side effects occurred.\\n        doTransferOut(momaMasterAdmin, reduceAmount);\\n\\n        emit ReservesReduced(momaMasterAdmin, reduceAmount, totalReservesNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Admin function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) external returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don\\u0027t need to.\\n        return _setInterestRateModelFresh(newInterestRateModel);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\n     * @dev Admin function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\\n\\n        // Used to store old model for use in the event that is emitted on success\\n        InterestRateModel oldInterestRateModel;\\n\\n        // Check caller is admin\\n        if (msg.sender != momaMaster.admin()) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\\n        }\\n\\n        // We fail gracefully unless market\\u0027s block number equals current block number\\n        if (address(interestRateModel) != address(0) \\u0026\\u0026 accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\n        }\\n\\n        // Track the market\\u0027s current interest rate model\\n        oldInterestRateModel = interestRateModel;\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n        // Initialize block number and borrow index\\n        if (accrualBlockNumber == 0 \\u0026\\u0026 borrowIndex == 0) {\\n            accrualBlockNumber = getBlockNumber();\\n            borrowIndex = mantissaOne;\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() internal view returns (uint);\\n\\n    /**\\n     * @notice Gets momaFeeFactorMantissa from factory contract\\n     * @return The momaFeeFactorMantissa of this market set by factory contract\\n     */\\n    function getMomaFeeFactorMantissa() internal view returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(address from, uint amount) internal returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\\n     *  If caller has not called checked protocol\\u0027s balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol\\u0027s balance, and verified it is \\u003e= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(address payable to, uint amount) internal;\\n\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n}\\n\"},\"MTokenInterfaces.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport \\\"./MomaMasterInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\ncontract MTokenStorage {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for fees\\n     */\\n    uint internal constant feeFactorMaxMantissa = 0.3e18;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for moma fees\\n     */\\n    uint internal constant momaFeeFactorMaxMantissa = 0.3e18;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\n     */\\n    uint internal constant reserveFactorMaxMantissa = 0.4e18;\\n\\n    /**\\n     * @notice Fee receiver for this market\\n     */\\n    address payable public feeReceiver;\\n\\n    /**\\n     * @notice Contract which oversees inter-mToken operations\\n     */\\n    MomaMasterInterface public momaMaster;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first MTokens (used when totalSupply = 0)\\n     */\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for fees\\n     */\\n    uint public feeFactorMantissa = 0.1e18;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa = 0.1e18;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of fees of the underlying held in this market\\n     */\\n    uint public totalFees;\\n\\n    /**\\n     * @notice Total amount of Moma fees of the underlying held in this market\\n     */\\n    uint public totalMomaFees;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping (address =\\u003e uint) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping (address =\\u003e mapping (address =\\u003e uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address =\\u003e BorrowSnapshot) internal accountBorrows;\\n\\n    /**\\n     * @notice Indicator that this is a MToken contract (for inspection)\\n     */\\n    bool public constant isMToken = true;\\n}\\n\\n\\ncontract MTokenInterface is MTokenStorage {\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address mTokenCollateral, uint seizeTokens);\\n\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when momaMaster is changed\\n     */\\n    event NewMomaMaster(MomaMasterInterface oldMomaMaster, MomaMasterInterface newMomaMaster);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when feeReceiver is changed\\n     */\\n    event NewFeeReceiver(address oldFeeReceiver, address newFeeReceiver);\\n\\n    /**\\n     * @notice Event emitted when the fee factor is changed\\n     */\\n    event NewFeeFactor(uint oldFeeFactorMantissa, uint newFeeFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the fees are collected\\n     */\\n    event FeesCollected(address feeReceiver, uint collectAmount, uint newTotalFees);\\n\\n    /**\\n     * @notice Event emitted when the moma fees are collected\\n     */\\n    event MomaFeesCollected(address momaFeeReceiver, uint collectAmount, uint newTotalMomaFees);\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    /**\\n     * @notice Failure event\\n     */\\n    event Failure(uint error, uint info, uint detail);\\n\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) external returns (bool);\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n    function approve(address spender, uint amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\n    function borrowRatePerBlock() external view returns (uint);\\n    function supplyRatePerBlock() external view returns (uint);\\n    function totalBorrowsCurrent() external returns (uint);\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function borrowBalanceStored(address account) public view returns (uint);\\n    function exchangeRateCurrent() public returns (uint);\\n    function exchangeRateStored() public view returns (uint);\\n    function getCash() external view returns (uint);\\n    function getMomaFeeFactor() external view returns (uint);\\n    function accrueInterest() public returns (uint);\\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _setFeeReceiver(address payable newFeeReceiver) external returns (uint);\\n    function _setFeeFactor(uint newFeeFactorMantissa) external returns (uint);\\n    function _collectFees(uint collectAmount) external returns (uint);\\n    function _collectMomaFees(uint collectAmount) external returns (uint);\\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\\n    function _reduceReserves(uint reduceAmount) external returns (uint);\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) external returns (uint);\\n}\\n\\ncontract MErc20Storage {\\n    /**\\n     * @notice Underlying asset for this MToken\\n     */\\n    address public underlying;\\n}\\n\\ncontract MErc20Interface is MErc20Storage {\\n\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) external returns (uint);\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n    function liquidateBorrow(address borrower, uint repayAmount, MTokenInterface mTokenCollateral) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint addAmount) external returns (uint);\\n}\\n\\ncontract MDelegationStorage {\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n}\\n\\ncontract MDelegatorInterface is MDelegationStorage {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\\n}\\n\\ncontract MDelegateInterface is MDelegationStorage {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) public;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() public;\\n}\\n\"},\"PriceOracle.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport \\\"./MToken.sol\\\";\\n\\ncontract PriceOracle {\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n    bool public constant isPriceOracle = true;\\n\\n    /**\\n      * @notice Get the underlying price of a mToken asset\\n      * @param mToken The mToken to get the underlying price of\\n      * @return The underlying asset price mantissa (scaled by 1e18).\\n      *  Zero means the price is unavailable.\\n      */\\n    function getUnderlyingPrice(MToken mToken) external view returns (uint);\\n}\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFeeFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeeFactor\",\"type\":\"uint256\"}],\"name\":\"NewDefualtFeeFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldFeeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeReceiver\",\"type\":\"address\"}],\"name\":\"NewDefualtFeeReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDelegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDelegate\",\"type\":\"address\"}],\"name\":\"NewFarmingDelegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldFeeAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeAdmin\",\"type\":\"address\"}],\"name\":\"NewFeeAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"NewLendingPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldMErc20\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMErc20\",\"type\":\"address\"}],\"name\":\"NewMErc20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldMErc20Implementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMErc20Implementation\",\"type\":\"address\"}],\"name\":\"NewMErc20Implementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldMEther\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMEther\",\"type\":\"address\"}],\"name\":\"NewMEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldMEtherImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMEtherImplementation\",\"type\":\"address\"}],\"name\":\"NewMEtherImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldMomaFarming\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMomaFarming\",\"type\":\"address\"}],\"name\":\"NewMomaFarming\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldMomaMaster\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMomaMaster\",\"type\":\"address\"}],\"name\":\"NewMomaMaster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldNoFeeTokenStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newNoFeeTokenStatus\",\"type\":\"bool\"}],\"name\":\"NewNoFeeTokenStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"NewOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPoolFeeAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPoolFeeAdmin\",\"type\":\"address\"}],\"name\":\"NewPoolFeeAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPoolFeeFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPoolFeeFactor\",\"type\":\"uint256\"}],\"name\":\"NewPoolFeeFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPoolFeeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPoolFeeReceiver\",\"type\":\"address\"}],\"name\":\"NewPoolFeeReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldPoolFeeStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newPoolFeeStatus\",\"type\":\"bool\"}],\"name\":\"NewPoolFeeStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTimelock\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTimelock\",\"type\":\"address\"}],\"name\":\"NewTimelock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFeeFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeeFactor\",\"type\":\"uint256\"}],\"name\":\"NewTokenFeeFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolLength\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"_allowUpgradePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract MomaFactoryProxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"_become\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"_setAllowUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDelegate\",\"type\":\"address\"}],\"name\":\"_setFarmingDelegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMErc20\",\"type\":\"address\"}],\"name\":\"_setMErc20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMErc20Implementation\",\"type\":\"address\"}],\"name\":\"_setMErc20Implementation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMEther\",\"type\":\"address\"}],\"name\":\"_setMEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMEtherImplementation\",\"type\":\"address\"}],\"name\":\"_setMEtherImplementation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMomaFarming\",\"type\":\"address\"}],\"name\":\"_setMomaFarming\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMomaMaster\",\"type\":\"address\"}],\"name\":\"_setMomaMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"_setOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTimelock\",\"type\":\"address\"}],\"name\":\"_setTimelock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allPoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowUpgrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defualtFeeFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defualtFeeReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"farmingDelegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeFactorMaxMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getMomaFeeAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getMomaFeeFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getMomaFeeReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"isCodeSame\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isLendingPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"isMErc20Implementation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"isMEtherImplementation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"isMToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMomaFactory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"isMomaMaster\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isMomaPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"isTimelock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lendingPoolNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mErc20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mErc20Implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mEther\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mEtherImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"momaFactoryImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"momaFarming\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"momaMaster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"noFeeTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingMomaFactoryImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolFeeAdmin\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"poolFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"noFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowUpgrade\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFeeFactor\",\"type\":\"uint256\"}],\"name\":\"setDefualtFeeFactor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newFeeReceiver\",\"type\":\"address\"}],\"name\":\"setDefualtFeeReceiver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFeeAdmin\",\"type\":\"address\"}],\"name\":\"setFeeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_noFee\",\"type\":\"bool\"}],\"name\":\"setNoFeeTokenStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newPoolFeeAdmin\",\"type\":\"address\"}],\"name\":\"setPoolFeeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newFeeFactor\",\"type\":\"uint256\"}],\"name\":\"setPoolFeeFactor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_newPoolFeeReceiver\",\"type\":\"address\"}],\"name\":\"setPoolFeeReceiver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_noFee\",\"type\":\"bool\"}],\"name\":\"setPoolFeeStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newFeeFactor\",\"type\":\"uint256\"}],\"name\":\"setTokenFeeFactor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenFeeFactors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"upgradeLendingPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MomaFactory","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8429424201952a020c9390432493b261e2b3df4717ecbde29b83b9b2bfc23a2b"}]}