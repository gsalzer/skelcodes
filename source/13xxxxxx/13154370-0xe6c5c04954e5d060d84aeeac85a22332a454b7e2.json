{"status":"1","message":"OK","result":[{"SourceCode":"{\"ERC721.sol\":{\"content\":\"pragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nabstract contract Context {\\r\\n\\tfunction _msgSender() internal view virtual returns (address payable) {\\r\\n\\t\\treturn msg.sender;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _msgData() internal view virtual returns (bytes memory) {\\r\\n\\t\\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n\\t\\treturn msg.data;\\r\\n\\t}\\r\\n}\\r\\n\\r\\nlibrary Base64 {\\r\\n\\tbytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n\\t/// @notice Encodes some bytes to the base64 representation\\r\\n\\tfunction encode(bytes memory data) internal pure returns (string memory) {\\r\\n\\t\\tuint256 len = data.length;\\r\\n\\t\\tif (len == 0) return \\\"\\\";\\r\\n\\r\\n\\t\\t// multiply by 4/3 rounded up\\r\\n\\t\\tuint256 encodedLen = 4 * ((len + 2) / 3);\\r\\n\\r\\n\\t\\t// Add some extra buffer at the end\\r\\n\\t\\tbytes memory result = new bytes(encodedLen + 32);\\r\\n\\r\\n\\t\\tbytes memory table = TABLE;\\r\\n\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlet tablePtr := add(table, 1)\\r\\n\\t\\t\\tlet resultPtr := add(result, 32)\\r\\n\\r\\n\\t\\t\\tfor {\\r\\n\\t\\t\\t\\tlet i := 0\\r\\n\\t\\t\\t} lt(i, len) {\\r\\n\\r\\n\\t\\t\\t} {\\r\\n\\t\\t\\t\\ti := add(i, 3)\\r\\n\\t\\t\\t\\tlet input := and(mload(add(data, i)), 0xffffff)\\r\\n\\r\\n\\t\\t\\t\\tlet out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\r\\n\\t\\t\\t\\tout := shl(8, out)\\r\\n\\t\\t\\t\\tout := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\r\\n\\t\\t\\t\\tout := shl(8, out)\\r\\n\\t\\t\\t\\tout := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\r\\n\\t\\t\\t\\tout := shl(8, out)\\r\\n\\t\\t\\t\\tout := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\r\\n\\t\\t\\t\\tout := shl(224, out)\\r\\n\\r\\n\\t\\t\\t\\tmstore(resultPtr, out)\\r\\n\\r\\n\\t\\t\\t\\tresultPtr := add(resultPtr, 4)\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tswitch mod(len, 3)\\r\\n\\t\\t\\tcase 1 {\\r\\n\\t\\t\\t\\tmstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tcase 2 {\\r\\n\\t\\t\\t\\tmstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tmstore(result, encodedLen)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn string(result);\\r\\n\\t}\\r\\n}\\r\\n\\r\\ninterface LootInterface {\\r\\n\\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n}\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n\\taddress private _owner;\\r\\n\\r\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n\\t */\\r\\n\\tconstructor () internal {\\r\\n\\t\\t//address msgSender = _msgSender();\\r\\n\\t\\t_owner = 0x65074a77CCB2e200DcBAa35d5D13118d06Ee16b5;\\r\\n\\t\\t//emit OwnershipTransferred(address(0), msgSender);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the address of the current owner.\\r\\n\\t */\\r\\n\\tfunction owner() public view virtual returns (address) {\\r\\n\\t\\treturn _owner;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Throws if called by any account other than the owner.\\r\\n\\t */\\r\\n\\tmodifier onlyOwner() {\\r\\n\\t\\trequire(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Leaves the contract without owner. It will not be possible to call\\r\\n\\t * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n\\t *\\r\\n\\t * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n\\t * thereby removing any functionality that is only available to the owner.\\r\\n\\t */\\r\\n\\tfunction renounceOwnership() public virtual onlyOwner {\\r\\n\\t\\temit OwnershipTransferred(_owner, address(0));\\r\\n\\t\\t_owner = address(0);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n\\t * Can only be called by the current owner.\\r\\n\\t */\\r\\n\\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n\\t\\trequire(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n\\t\\temit OwnershipTransferred(_owner, newOwner);\\r\\n\\t\\t_owner = newOwner;\\r\\n\\t}\\r\\n}\\r\\n\\r\\nabstract contract ReentrancyGuard {\\r\\n\\t// Booleans are more expensive than uint256 or any type that takes up a full\\r\\n\\t// word because each write operation emits an extra SLOAD to first read the\\r\\n\\t// slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\r\\n\\t// back. This is the compiler\\u0027s defense against contract upgrades and\\r\\n\\t// pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n\\t// The values being non-zero value makes deployment a bit more expensive,\\r\\n\\t// but in exchange the refund on every call to nonReentrant will be lower in\\r\\n\\t// amount. Since refunds are capped to a percentage of the total\\r\\n\\t// transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\r\\n\\t// increase the likelihood of the full refund coming into effect.\\r\\n\\tuint256 private constant _NOT_ENTERED = 1;\\r\\n\\tuint256 private constant _ENTERED = 2;\\r\\n\\r\\n\\tuint256 private _status;\\r\\n\\r\\n\\tconstructor() {\\r\\n\\t\\t_status = _NOT_ENTERED;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n\\t * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n\\t * function is not supported. It is possible to prevent this from happening\\r\\n\\t * by making the `nonReentrant` function external, and make it call a\\r\\n\\t * `private` function that does the actual work.\\r\\n\\t */\\r\\n\\tmodifier nonReentrant() {\\r\\n\\t\\t// On the first call to nonReentrant, _notEntered will be true\\r\\n\\t\\trequire(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n\\t\\t// Any calls to nonReentrant after this point will fail\\r\\n\\t\\t_status = _ENTERED;\\r\\n\\r\\n\\t\\t_;\\r\\n\\r\\n\\t\\t// By storing the original value once again, a refund is triggered (see\\r\\n\\t\\t// https://eips.ethereum.org/EIPS/eip-2200)\\r\\n\\t\\t_status = _NOT_ENTERED;\\r\\n\\t}\\r\\n}\\r\\n\\r\\ninterface IERC721Receiver {\\r\\n\\t/**\\r\\n\\t * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\r\\n\\t * by `operator` from `from`, this function is called.\\r\\n\\t *\\r\\n\\t * It must return its Solidity selector to confirm the token transfer.\\r\\n\\t * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\r\\n\\t *\\r\\n\\t * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\r\\n\\t */\\r\\n\\tfunction onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\r\\n}\\r\\n\\r\\nlibrary Strings {\\r\\n\\t/**\\r\\n\\t * @dev Converts a `uint256` to its ASCII `string` representation.\\r\\n\\t */\\r\\n\\tfunction toString(uint256 value) internal pure returns (string memory) {\\r\\n\\t\\t// Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\r\\n\\t\\t// https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n\\t\\tif (value == 0) {\\r\\n\\t\\t\\treturn \\\"0\\\";\\r\\n\\t\\t}\\r\\n\\t\\tuint256 temp = value;\\r\\n\\t\\tuint256 digits;\\r\\n\\t\\twhile (temp != 0) {\\r\\n\\t\\t\\tdigits++;\\r\\n\\t\\t\\ttemp /= 10;\\r\\n\\t\\t}\\r\\n\\t\\tbytes memory buffer = new bytes(digits);\\r\\n\\t\\tuint256 index = digits - 1;\\r\\n\\t\\ttemp = value;\\r\\n\\t\\twhile (temp != 0) {\\r\\n\\t\\t\\tbuffer[index--] = bytes1(uint8(48 + temp % 10));\\r\\n\\t\\t\\ttemp /= 10;\\r\\n\\t\\t}\\r\\n\\t\\treturn string(buffer);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nlibrary EnumerableMap {\\r\\n\\t// To implement this library for multiple types with as little code\\r\\n\\t// repetition as possible, we write it in terms of a generic Map type with\\r\\n\\t// bytes32 keys and values.\\r\\n\\t// The Map implementation uses private functions, and user-facing\\r\\n\\t// implementations (such as Uint256ToAddressMap) are just wrappers around\\r\\n\\t// the underlying Map.\\r\\n\\t// This means that we can only create new EnumerableMaps for types that fit\\r\\n\\t// in bytes32.\\r\\n\\r\\n\\tstruct MapEntry {\\r\\n\\t\\tbytes32 _key;\\r\\n\\t\\tbytes32 _value;\\r\\n\\t}\\r\\n\\r\\n\\tstruct Map {\\r\\n\\t\\t// Storage of map keys and values\\r\\n\\t\\tMapEntry[] _entries;\\r\\n\\r\\n\\t\\t// Position of the entry defined by a key in the `entries` array, plus 1\\r\\n\\t\\t// because index 0 means a key is not in the map.\\r\\n\\t\\tmapping (bytes32 =\\u003e uint256) _indexes;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Adds a key-value pair to a map, or updates the value for an existing\\r\\n\\t * key. O(1).\\r\\n\\t *\\r\\n\\t * Returns true if the key was added to the map, that is if it was not\\r\\n\\t * already present.\\r\\n\\t */\\r\\n\\tfunction _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\r\\n\\t\\t// We read and store the key\\u0027s index to prevent multiple reads from the same storage slot\\r\\n\\t\\tuint256 keyIndex = map._indexes[key];\\r\\n\\r\\n\\t\\tif (keyIndex == 0) { // Equivalent to !contains(map, key)\\r\\n\\t\\t\\tmap._entries.push(MapEntry({ _key: key, _value: value }));\\r\\n\\t\\t\\t// The entry is stored at length-1, but we add 1 to all indexes\\r\\n\\t\\t\\t// and use 0 as a sentinel value\\r\\n\\t\\t\\tmap._indexes[key] = map._entries.length;\\r\\n\\t\\t\\treturn true;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tmap._entries[keyIndex - 1]._value = value;\\r\\n\\t\\t\\treturn false;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Removes a key-value pair from a map. O(1).\\r\\n\\t *\\r\\n\\t * Returns true if the key was removed from the map, that is if it was present.\\r\\n\\t */\\r\\n\\tfunction _remove(Map storage map, bytes32 key) private returns (bool) {\\r\\n\\t\\t// We read and store the key\\u0027s index to prevent multiple reads from the same storage slot\\r\\n\\t\\tuint256 keyIndex = map._indexes[key];\\r\\n\\r\\n\\t\\tif (keyIndex != 0) { // Equivalent to contains(map, key)\\r\\n\\t\\t\\t// To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\r\\n\\t\\t\\t// in the array, and then remove the last entry (sometimes called as \\u0027swap and pop\\u0027).\\r\\n\\t\\t\\t// This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n\\t\\t\\tuint256 toDeleteIndex = keyIndex - 1;\\r\\n\\t\\t\\tuint256 lastIndex = map._entries.length - 1;\\r\\n\\r\\n\\t\\t\\t// When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\r\\n\\t\\t\\t// so rarely, we still do the swap anyway to avoid the gas cost of adding an \\u0027if\\u0027 statement.\\r\\n\\r\\n\\t\\t\\tMapEntry storage lastEntry = map._entries[lastIndex];\\r\\n\\r\\n\\t\\t\\t// Move the last entry to the index where the entry to delete is\\r\\n\\t\\t\\tmap._entries[toDeleteIndex] = lastEntry;\\r\\n\\t\\t\\t// Update the index for the moved entry\\r\\n\\t\\t\\tmap._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\r\\n\\r\\n\\t\\t\\t// Delete the slot where the moved entry was stored\\r\\n\\t\\t\\tmap._entries.pop();\\r\\n\\r\\n\\t\\t\\t// Delete the index for the deleted slot\\r\\n\\t\\t\\tdelete map._indexes[key];\\r\\n\\r\\n\\t\\t\\treturn true;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\treturn false;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns true if the key is in the map. O(1).\\r\\n\\t */\\r\\n\\tfunction _contains(Map storage map, bytes32 key) private view returns (bool) {\\r\\n\\t\\treturn map._indexes[key] != 0;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the number of key-value pairs in the map. O(1).\\r\\n\\t */\\r\\n\\tfunction _length(Map storage map) private view returns (uint256) {\\r\\n\\t\\treturn map._entries.length;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\r\\n\\t *\\r\\n\\t * Note that there are no guarantees on the ordering of entries inside the\\r\\n\\t * array, and it may change when more entries are added or removed.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `index` must be strictly less than {length}.\\r\\n\\t */\\r\\n\\tfunction _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\r\\n\\t\\trequire(map._entries.length \\u003e index, \\\"EnumerableMap: index out of bounds\\\");\\r\\n\\r\\n\\t\\tMapEntry storage entry = map._entries[index];\\r\\n\\t\\treturn (entry._key, entry._value);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Tries to returns the value associated with `key`.  O(1).\\r\\n\\t * Does not revert if `key` is not in the map.\\r\\n\\t */\\r\\n\\tfunction _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\r\\n\\t\\tuint256 keyIndex = map._indexes[key];\\r\\n\\t\\tif (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\\r\\n\\t\\treturn (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the value associated with `key`.  O(1).\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `key` must be in the map.\\r\\n\\t */\\r\\n\\tfunction _get(Map storage map, bytes32 key) private view returns (bytes32) {\\r\\n\\t\\tuint256 keyIndex = map._indexes[key];\\r\\n\\t\\trequire(keyIndex != 0, \\\"EnumerableMap: nonexistent key\\\"); // Equivalent to contains(map, key)\\r\\n\\t\\treturn map._entries[keyIndex - 1]._value; // All indexes are 1-based\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\r\\n\\t *\\r\\n\\t * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n\\t * message unnecessarily. For custom revert reasons use {_tryGet}.\\r\\n\\t */\\r\\n\\tfunction _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\r\\n\\t\\tuint256 keyIndex = map._indexes[key];\\r\\n\\t\\trequire(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\r\\n\\t\\treturn map._entries[keyIndex - 1]._value; // All indexes are 1-based\\r\\n\\t}\\r\\n\\r\\n\\t// UintToAddressMap\\r\\n\\r\\n\\tstruct UintToAddressMap {\\r\\n\\t\\tMap _inner;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Adds a key-value pair to a map, or updates the value for an existing\\r\\n\\t * key. O(1).\\r\\n\\t *\\r\\n\\t * Returns true if the key was added to the map, that is if it was not\\r\\n\\t * already present.\\r\\n\\t */\\r\\n\\tfunction set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\r\\n\\t\\treturn _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Removes a value from a set. O(1).\\r\\n\\t *\\r\\n\\t * Returns true if the key was removed from the map, that is if it was present.\\r\\n\\t */\\r\\n\\tfunction remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\r\\n\\t\\treturn _remove(map._inner, bytes32(key));\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns true if the key is in the map. O(1).\\r\\n\\t */\\r\\n\\tfunction contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\r\\n\\t\\treturn _contains(map._inner, bytes32(key));\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the number of elements in the map. O(1).\\r\\n\\t */\\r\\n\\tfunction length(UintToAddressMap storage map) internal view returns (uint256) {\\r\\n\\t\\treturn _length(map._inner);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the element stored at position `index` in the set. O(1).\\r\\n\\t * Note that there are no guarantees on the ordering of values inside the\\r\\n\\t * array, and it may change when more values are added or removed.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `index` must be strictly less than {length}.\\r\\n\\t */\\r\\n\\tfunction at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\r\\n\\t\\t(bytes32 key, bytes32 value) = _at(map._inner, index);\\r\\n\\t\\treturn (uint256(key), address(uint160(uint256(value))));\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Tries to returns the value associated with `key`.  O(1).\\r\\n\\t * Does not revert if `key` is not in the map.\\r\\n\\t *\\r\\n\\t * _Available since v3.4._\\r\\n\\t */\\r\\n\\tfunction tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\r\\n\\t\\t(bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\r\\n\\t\\treturn (success, address(uint160(uint256(value))));\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the value associated with `key`.  O(1).\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `key` must be in the map.\\r\\n\\t */\\r\\n\\tfunction get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\r\\n\\t\\treturn address(uint160(uint256(_get(map._inner, bytes32(key)))));\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Same as {get}, with a custom error message when `key` is not in the map.\\r\\n\\t *\\r\\n\\t * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n\\t * message unnecessarily. For custom revert reasons use {tryGet}.\\r\\n\\t */\\r\\n\\tfunction get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\r\\n\\t\\treturn address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\r\\n\\t}\\r\\n}\\r\\n\\r\\nlibrary EnumerableSet {\\r\\n\\t// To implement this library for multiple types with as little code\\r\\n\\t// repetition as possible, we write it in terms of a generic Set type with\\r\\n\\t// bytes32 values.\\r\\n\\t// The Set implementation uses private functions, and user-facing\\r\\n\\t// implementations (such as AddressSet) are just wrappers around the\\r\\n\\t// underlying Set.\\r\\n\\t// This means that we can only create new EnumerableSets for types that fit\\r\\n\\t// in bytes32.\\r\\n\\r\\n\\tstruct Set {\\r\\n\\t\\t// Storage of set values\\r\\n\\t\\tbytes32[] _values;\\r\\n\\r\\n\\t\\t// Position of the value in the `values` array, plus 1 because index 0\\r\\n\\t\\t// means a value is not in the set.\\r\\n\\t\\tmapping (bytes32 =\\u003e uint256) _indexes;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Add a value to a set. O(1).\\r\\n\\t *\\r\\n\\t * Returns true if the value was added to the set, that is if it was not\\r\\n\\t * already present.\\r\\n\\t */\\r\\n\\tfunction _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n\\t\\tif (!_contains(set, value)) {\\r\\n\\t\\t\\tset._values.push(value);\\r\\n\\t\\t\\t// The value is stored at length-1, but we add 1 to all indexes\\r\\n\\t\\t\\t// and use 0 as a sentinel value\\r\\n\\t\\t\\tset._indexes[value] = set._values.length;\\r\\n\\t\\t\\treturn true;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\treturn false;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Removes a value from a set. O(1).\\r\\n\\t *\\r\\n\\t * Returns true if the value was removed from the set, that is if it was\\r\\n\\t * present.\\r\\n\\t */\\r\\n\\tfunction _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n\\t\\t// We read and store the value\\u0027s index to prevent multiple reads from the same storage slot\\r\\n\\t\\tuint256 valueIndex = set._indexes[value];\\r\\n\\r\\n\\t\\tif (valueIndex != 0) { // Equivalent to contains(set, value)\\r\\n\\t\\t\\t// To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n\\t\\t\\t// the array, and then remove the last element (sometimes called as \\u0027swap and pop\\u0027).\\r\\n\\t\\t\\t// This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n\\t\\t\\tuint256 toDeleteIndex = valueIndex - 1;\\r\\n\\t\\t\\tuint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n\\t\\t\\t// When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\r\\n\\t\\t\\t// so rarely, we still do the swap anyway to avoid the gas cost of adding an \\u0027if\\u0027 statement.\\r\\n\\r\\n\\t\\t\\tbytes32 lastvalue = set._values[lastIndex];\\r\\n\\r\\n\\t\\t\\t// Move the last value to the index where the value to delete is\\r\\n\\t\\t\\tset._values[toDeleteIndex] = lastvalue;\\r\\n\\t\\t\\t// Update the index for the moved value\\r\\n\\t\\t\\tset._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\r\\n\\r\\n\\t\\t\\t// Delete the slot where the moved value was stored\\r\\n\\t\\t\\tset._values.pop();\\r\\n\\r\\n\\t\\t\\t// Delete the index for the deleted slot\\r\\n\\t\\t\\tdelete set._indexes[value];\\r\\n\\r\\n\\t\\t\\treturn true;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\treturn false;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns true if the value is in the set. O(1).\\r\\n\\t */\\r\\n\\tfunction _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n\\t\\treturn set._indexes[value] != 0;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the number of values on the set. O(1).\\r\\n\\t */\\r\\n\\tfunction _length(Set storage set) private view returns (uint256) {\\r\\n\\t\\treturn set._values.length;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n\\t *\\r\\n\\t * Note that there are no guarantees on the ordering of values inside the\\r\\n\\t * array, and it may change when more values are added or removed.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `index` must be strictly less than {length}.\\r\\n\\t */\\r\\n\\tfunction _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n\\t\\trequire(set._values.length \\u003e index, \\\"EnumerableSet: index out of bounds\\\");\\r\\n\\t\\treturn set._values[index];\\r\\n\\t}\\r\\n\\r\\n\\t// Bytes32Set\\r\\n\\r\\n\\tstruct Bytes32Set {\\r\\n\\t\\tSet _inner;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Add a value to a set. O(1).\\r\\n\\t *\\r\\n\\t * Returns true if the value was added to the set, that is if it was not\\r\\n\\t * already present.\\r\\n\\t */\\r\\n\\tfunction add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n\\t\\treturn _add(set._inner, value);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Removes a value from a set. O(1).\\r\\n\\t *\\r\\n\\t * Returns true if the value was removed from the set, that is if it was\\r\\n\\t * present.\\r\\n\\t */\\r\\n\\tfunction remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n\\t\\treturn _remove(set._inner, value);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns true if the value is in the set. O(1).\\r\\n\\t */\\r\\n\\tfunction contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\r\\n\\t\\treturn _contains(set._inner, value);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the number of values in the set. O(1).\\r\\n\\t */\\r\\n\\tfunction length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n\\t\\treturn _length(set._inner);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n\\t *\\r\\n\\t * Note that there are no guarantees on the ordering of values inside the\\r\\n\\t * array, and it may change when more values are added or removed.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `index` must be strictly less than {length}.\\r\\n\\t */\\r\\n\\tfunction at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\r\\n\\t\\treturn _at(set._inner, index);\\r\\n\\t}\\r\\n\\r\\n\\t// AddressSet\\r\\n\\r\\n\\tstruct AddressSet {\\r\\n\\t\\tSet _inner;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Add a value to a set. O(1).\\r\\n\\t *\\r\\n\\t * Returns true if the value was added to the set, that is if it was not\\r\\n\\t * already present.\\r\\n\\t */\\r\\n\\tfunction add(AddressSet storage set, address value) internal returns (bool) {\\r\\n\\t\\treturn _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Removes a value from a set. O(1).\\r\\n\\t *\\r\\n\\t * Returns true if the value was removed from the set, that is if it was\\r\\n\\t * present.\\r\\n\\t */\\r\\n\\tfunction remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n\\t\\treturn _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns true if the value is in the set. O(1).\\r\\n\\t */\\r\\n\\tfunction contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n\\t\\treturn _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the number of values in the set. O(1).\\r\\n\\t */\\r\\n\\tfunction length(AddressSet storage set) internal view returns (uint256) {\\r\\n\\t\\treturn _length(set._inner);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n\\t *\\r\\n\\t * Note that there are no guarantees on the ordering of values inside the\\r\\n\\t * array, and it may change when more values are added or removed.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `index` must be strictly less than {length}.\\r\\n\\t */\\r\\n\\tfunction at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n\\t\\treturn address(uint160(uint256(_at(set._inner, index))));\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\t// UintSet\\r\\n\\r\\n\\tstruct UintSet {\\r\\n\\t\\tSet _inner;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Add a value to a set. O(1).\\r\\n\\t *\\r\\n\\t * Returns true if the value was added to the set, that is if it was not\\r\\n\\t * already present.\\r\\n\\t */\\r\\n\\tfunction add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n\\t\\treturn _add(set._inner, bytes32(value));\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Removes a value from a set. O(1).\\r\\n\\t *\\r\\n\\t * Returns true if the value was removed from the set, that is if it was\\r\\n\\t * present.\\r\\n\\t */\\r\\n\\tfunction remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n\\t\\treturn _remove(set._inner, bytes32(value));\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns true if the value is in the set. O(1).\\r\\n\\t */\\r\\n\\tfunction contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n\\t\\treturn _contains(set._inner, bytes32(value));\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the number of values on the set. O(1).\\r\\n\\t */\\r\\n\\tfunction length(UintSet storage set) internal view returns (uint256) {\\r\\n\\t\\treturn _length(set._inner);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n\\t *\\r\\n\\t * Note that there are no guarantees on the ordering of values inside the\\r\\n\\t * array, and it may change when more values are added or removed.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `index` must be strictly less than {length}.\\r\\n\\t */\\r\\n\\tfunction at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n\\t\\treturn uint256(_at(set._inner, index));\\r\\n\\t}\\r\\n}\\r\\n\\r\\nlibrary Address {\\r\\n\\t/**\\r\\n\\t * @dev Returns true if `account` is a contract.\\r\\n\\t *\\r\\n\\t * [IMPORTANT]\\r\\n\\t * ====\\r\\n\\t * It is unsafe to assume that an address for which this function returns\\r\\n\\t * false is an externally-owned account (EOA) and not a contract.\\r\\n\\t *\\r\\n\\t * Among others, `isContract` will return false for the following\\r\\n\\t * types of addresses:\\r\\n\\t *\\r\\n\\t *  - an externally-owned account\\r\\n\\t *  - a contract in construction\\r\\n\\t *  - an address where a contract will be created\\r\\n\\t *  - an address where a contract lived, but was destroyed\\r\\n\\t * ====\\r\\n\\t */\\r\\n\\tfunction isContract(address account) internal view returns (bool) {\\r\\n\\t\\t// This method relies on extcodesize, which returns 0 for contracts in\\r\\n\\t\\t// construction, since the code is only stored at the end of the\\r\\n\\t\\t// constructor execution.\\r\\n\\r\\n\\t\\tuint256 size;\\r\\n\\t\\t// solhint-disable-next-line no-inline-assembly\\r\\n\\t\\tassembly { size := extcodesize(account) }\\r\\n\\t\\treturn size \\u003e 0;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n\\t * `recipient`, forwarding all available gas and reverting on errors.\\r\\n\\t *\\r\\n\\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n\\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n\\t * imposed by `transfer`, making them unable to receive funds via\\r\\n\\t * `transfer`. {sendValue} removes this limitation.\\r\\n\\t *\\r\\n\\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n\\t *\\r\\n\\t * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n\\t * taken to not create reentrancy vulnerabilities. Consider using\\r\\n\\t * {ReentrancyGuard} or the\\r\\n\\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n\\t */\\r\\n\\tfunction sendValue(address payable recipient, uint256 amount) internal {\\r\\n\\t\\trequire(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n\\t\\t// solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n\\t\\t(bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n\\t\\trequire(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Performs a Solidity function call using a low level `call`. A\\r\\n\\t * plain`call` is an unsafe replacement for a function call: use this\\r\\n\\t * function instead.\\r\\n\\t *\\r\\n\\t * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n\\t * function (like regular Solidity function calls).\\r\\n\\t *\\r\\n\\t * Returns the raw returned data. To convert to the expected return value,\\r\\n\\t * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `target` must be a contract.\\r\\n\\t * - calling `target` with `data` must not revert.\\r\\n\\t *\\r\\n\\t * _Available since v3.1._\\r\\n\\t */\\r\\n\\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n\\t\\treturn functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n\\t * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n\\t *\\r\\n\\t * _Available since v3.1._\\r\\n\\t */\\r\\n\\tfunction functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n\\t\\treturn functionCallWithValue(target, data, 0, errorMessage);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n\\t * but also transferring `value` wei to `target`.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - the calling contract must have an ETH balance of at least `value`.\\r\\n\\t * - the called Solidity function must be `payable`.\\r\\n\\t *\\r\\n\\t * _Available since v3.1._\\r\\n\\t */\\r\\n\\tfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n\\t\\treturn functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n\\t * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n\\t *\\r\\n\\t * _Available since v3.1._\\r\\n\\t */\\r\\n\\tfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n\\t\\trequire(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n\\t\\trequire(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n\\t\\t// solhint-disable-next-line avoid-low-level-calls\\r\\n\\t\\t(bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n\\t\\treturn _verifyCallResult(success, returndata, errorMessage);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n\\t * but performing a static call.\\r\\n\\t *\\r\\n\\t * _Available since v3.3._\\r\\n\\t */\\r\\n\\tfunction functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n\\t\\treturn functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n\\t * but performing a static call.\\r\\n\\t *\\r\\n\\t * _Available since v3.3._\\r\\n\\t */\\r\\n\\tfunction functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n\\t\\trequire(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n\\t\\t// solhint-disable-next-line avoid-low-level-calls\\r\\n\\t\\t(bool success, bytes memory returndata) = target.staticcall(data);\\r\\n\\t\\treturn _verifyCallResult(success, returndata, errorMessage);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n\\t * but performing a delegate call.\\r\\n\\t *\\r\\n\\t * _Available since v3.4._\\r\\n\\t */\\r\\n\\tfunction functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n\\t\\treturn functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n\\t * but performing a delegate call.\\r\\n\\t *\\r\\n\\t * _Available since v3.4._\\r\\n\\t */\\r\\n\\tfunction functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n\\t\\trequire(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n\\t\\t// solhint-disable-next-line avoid-low-level-calls\\r\\n\\t\\t(bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n\\t\\treturn _verifyCallResult(success, returndata, errorMessage);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n\\t\\tif (success) {\\r\\n\\t\\t\\treturn returndata;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t// Look for revert reason and bubble it up if present\\r\\n\\t\\t\\tif (returndata.length \\u003e 0) {\\r\\n\\t\\t\\t\\t// The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n\\t\\t\\t\\t// solhint-disable-next-line no-inline-assembly\\r\\n\\t\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\t\\tlet returndata_size := mload(returndata)\\r\\n\\t\\t\\t\\t\\trevert(add(32, returndata), returndata_size)\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\trevert(errorMessage);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\t/**\\r\\n\\t * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n\\t *\\r\\n\\t * _Available since v3.4._\\r\\n\\t */\\r\\n\\tfunction tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n\\t\\tuint256 c = a + b;\\r\\n\\t\\tif (c \\u003c a) return (false, 0);\\r\\n\\t\\treturn (true, c);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n\\t *\\r\\n\\t * _Available since v3.4._\\r\\n\\t */\\r\\n\\tfunction trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n\\t\\tif (b \\u003e a) return (false, 0);\\r\\n\\t\\treturn (true, a - b);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n\\t *\\r\\n\\t * _Available since v3.4._\\r\\n\\t */\\r\\n\\tfunction tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n\\t\\t// Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n\\t\\t// benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n\\t\\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n\\t\\tif (a == 0) return (true, 0);\\r\\n\\t\\tuint256 c = a * b;\\r\\n\\t\\tif (c / a != b) return (false, 0);\\r\\n\\t\\treturn (true, c);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n\\t *\\r\\n\\t * _Available since v3.4._\\r\\n\\t */\\r\\n\\tfunction tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n\\t\\tif (b == 0) return (false, 0);\\r\\n\\t\\treturn (true, a / b);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n\\t *\\r\\n\\t * _Available since v3.4._\\r\\n\\t */\\r\\n\\tfunction tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n\\t\\tif (b == 0) return (false, 0);\\r\\n\\t\\treturn (true, a % b);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the addition of two unsigned integers, reverting on\\r\\n\\t * overflow.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity\\u0027s `+` operator.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - Addition cannot overflow.\\r\\n\\t */\\r\\n\\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\tuint256 c = a + b;\\r\\n\\t\\trequire(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n\\t * overflow (when the result is negative).\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity\\u0027s `-` operator.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - Subtraction cannot overflow.\\r\\n\\t */\\r\\n\\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\trequire(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n\\t\\treturn a - b;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n\\t * overflow.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity\\u0027s `*` operator.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - Multiplication cannot overflow.\\r\\n\\t */\\r\\n\\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\tif (a == 0) return 0;\\r\\n\\t\\tuint256 c = a * b;\\r\\n\\t\\trequire(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n\\t * division by zero. The result is rounded towards zero.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n\\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n\\t * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - The divisor cannot be zero.\\r\\n\\t */\\r\\n\\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\trequire(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\r\\n\\t\\treturn a / b;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n\\t * reverting when dividing by zero.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n\\t * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n\\t * invalid opcode to revert (consuming all remaining gas).\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - The divisor cannot be zero.\\r\\n\\t */\\r\\n\\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\trequire(b \\u003e 0, \\\"SafeMath: modulo by zero\\\");\\r\\n\\t\\treturn a % b;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n\\t * overflow (when the result is negative).\\r\\n\\t *\\r\\n\\t * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n\\t * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity\\u0027s `-` operator.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - Subtraction cannot overflow.\\r\\n\\t */\\r\\n\\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n\\t\\trequire(b \\u003c= a, errorMessage);\\r\\n\\t\\treturn a - b;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n\\t * division by zero. The result is rounded towards zero.\\r\\n\\t *\\r\\n\\t * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n\\t * message unnecessarily. For custom revert reasons use {tryDiv}.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n\\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n\\t * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - The divisor cannot be zero.\\r\\n\\t */\\r\\n\\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n\\t\\trequire(b \\u003e 0, errorMessage);\\r\\n\\t\\treturn a / b;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n\\t * reverting with custom message when dividing by zero.\\r\\n\\t *\\r\\n\\t * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n\\t * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n\\t * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n\\t * invalid opcode to revert (consuming all remaining gas).\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - The divisor cannot be zero.\\r\\n\\t */\\r\\n\\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n\\t\\trequire(b \\u003e 0, errorMessage);\\r\\n\\t\\treturn a % b;\\r\\n\\t}\\r\\n}\\r\\n\\r\\ninterface IERC165 {\\r\\n\\t/**\\r\\n\\t * @dev Returns true if this contract implements the interface defined by\\r\\n\\t * `interfaceId`. See the corresponding\\r\\n\\t * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n\\t * to learn more about how these ids are created.\\r\\n\\t *\\r\\n\\t * This function call must use less than 30 000 gas.\\r\\n\\t */\\r\\n\\tfunction supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\\r\\nabstract contract ERC165 is IERC165 {\\r\\n\\t/*\\r\\n\\t * bytes4(keccak256(\\u0027supportsInterface(bytes4)\\u0027)) == 0x01ffc9a7\\r\\n\\t */\\r\\n\\tbytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Mapping of interface ids to whether or not it\\u0027s supported.\\r\\n\\t */\\r\\n\\tmapping(bytes4 =\\u003e bool) private _supportedInterfaces;\\r\\n\\r\\n\\tconstructor () internal {\\r\\n\\t\\t// Derived contracts need only register support for their own interfaces,\\r\\n\\t\\t// we register support for ERC165 itself here\\r\\n\\t\\t_registerInterface(_INTERFACE_ID_ERC165);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC165-supportsInterface}.\\r\\n\\t *\\r\\n\\t * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\r\\n\\t */\\r\\n\\tfunction supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n\\t\\treturn _supportedInterfaces[interfaceId];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Registers the contract as an implementer of the interface defined by\\r\\n\\t * `interfaceId`. Support of the actual ERC165 interface is automatic and\\r\\n\\t * registering its interface id is not required.\\r\\n\\t *\\r\\n\\t * See {IERC165-supportsInterface}.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\r\\n\\t */\\r\\n\\tfunction _registerInterface(bytes4 interfaceId) internal virtual {\\r\\n\\t\\trequire(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\r\\n\\t\\t_supportedInterfaces[interfaceId] = true;\\r\\n\\t}\\r\\n}\\r\\n\\r\\ninterface IERC721 is IERC165 {\\r\\n\\t/**\\r\\n\\t * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n\\t */\\r\\n\\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n\\t */\\r\\n\\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n\\t */\\r\\n\\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the number of tokens in ``owner``\\u0027s account.\\r\\n\\t */\\r\\n\\tfunction balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the owner of the `tokenId` token.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `tokenId` must exist.\\r\\n\\t */\\r\\n\\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n\\t * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `from` cannot be the zero address.\\r\\n\\t * - `to` cannot be the zero address.\\r\\n\\t * - `tokenId` token must exist and be owned by `from`.\\r\\n\\t * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n\\t *\\r\\n\\t * Emits a {Transfer} event.\\r\\n\\t */\\r\\n\\tfunction safeTransferFrom(address from, address to, uint256 tokenId) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n\\t *\\r\\n\\t * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `from` cannot be the zero address.\\r\\n\\t * - `to` cannot be the zero address.\\r\\n\\t * - `tokenId` token must be owned by `from`.\\r\\n\\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n\\t *\\r\\n\\t * Emits a {Transfer} event.\\r\\n\\t */\\r\\n\\tfunction transferFrom(address from, address to, uint256 tokenId) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n\\t * The approval is cleared when the token is transferred.\\r\\n\\t *\\r\\n\\t * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - The caller must own the token or be an approved operator.\\r\\n\\t * - `tokenId` must exist.\\r\\n\\t *\\r\\n\\t * Emits an {Approval} event.\\r\\n\\t */\\r\\n\\tfunction approve(address to, uint256 tokenId) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the account approved for `tokenId` token.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `tokenId` must exist.\\r\\n\\t */\\r\\n\\tfunction getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Approve or remove `operator` as an operator for the caller.\\r\\n\\t * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - The `operator` cannot be the caller.\\r\\n\\t *\\r\\n\\t * Emits an {ApprovalForAll} event.\\r\\n\\t */\\r\\n\\tfunction setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n\\t *\\r\\n\\t * See {setApprovalForAll}\\r\\n\\t */\\r\\n\\tfunction isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n\\r\\n\\t/**\\r\\n\\t  * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n\\t  *\\r\\n\\t  * Requirements:\\r\\n\\t  *\\r\\n\\t  * - `from` cannot be the zero address.\\r\\n\\t  * - `to` cannot be the zero address.\\r\\n\\t  * - `tokenId` token must exist and be owned by `from`.\\r\\n\\t  * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n\\t  * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n\\t  *\\r\\n\\t  * Emits a {Transfer} event.\\r\\n\\t  */\\r\\n\\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\r\\n}\\r\\n\\r\\ninterface IERC721Enumerable is IERC721 {\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the total amount of tokens stored by the contract.\\r\\n\\t */\\r\\n\\tfunction totalSupply() external view returns (uint256);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\r\\n\\t * Use along with {balanceOf} to enumerate all of ``owner``\\u0027s tokens.\\r\\n\\t */\\r\\n\\tfunction tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\r\\n\\t * Use along with {totalSupply} to enumerate all tokens.\\r\\n\\t */\\r\\n\\tfunction tokenByIndex(uint256 index) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IERC721Metadata is IERC721 {\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the token collection name.\\r\\n\\t */\\r\\n\\tfunction name() external view returns (string memory);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the token collection symbol.\\r\\n\\t */\\r\\n\\tfunction symbol() external view returns (string memory);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n\\t */\\r\\n\\tfunction tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n}\\r\\n\\r\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\r\\n\\tusing SafeMath for uint256;\\r\\n\\tusing Address for address;\\r\\n\\tusing EnumerableSet for EnumerableSet.UintSet;\\r\\n\\tusing EnumerableMap for EnumerableMap.UintToAddressMap;\\r\\n\\tusing Strings for uint256;\\r\\n\\r\\n\\t// Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\r\\n\\t// which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\r\\n\\tbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\r\\n\\r\\n\\t// Mapping from holder address to their (enumerable) set of owned tokens\\r\\n\\tmapping (address =\\u003e EnumerableSet.UintSet) private _holderTokens;\\r\\n\\r\\n\\t// Enumerable mapping from token ids to their owners\\r\\n\\tEnumerableMap.UintToAddressMap private _tokenOwners;\\r\\n\\r\\n\\t// Mapping from token ID to approved address\\r\\n\\tmapping (uint256 =\\u003e address) private _tokenApprovals;\\r\\n\\r\\n\\t// Mapping from owner to operator approvals\\r\\n\\tmapping (address =\\u003e mapping (address =\\u003e bool)) private _operatorApprovals;\\r\\n\\r\\n\\t// Token name\\r\\n\\tstring private _name;\\r\\n\\r\\n\\t// Token symbol\\r\\n\\tstring private _symbol;\\r\\n\\r\\n\\t// Optional mapping for token URIs\\r\\n\\tmapping (uint256 =\\u003e string) private _tokenURIs;\\r\\n\\r\\n\\t// Base URI\\r\\n\\tstring private _baseURI;\\r\\n\\r\\n\\t/*\\r\\n\\t *     bytes4(keccak256(\\u0027balanceOf(address)\\u0027)) == 0x70a08231\\r\\n\\t *     bytes4(keccak256(\\u0027ownerOf(uint256)\\u0027)) == 0x6352211e\\r\\n\\t *     bytes4(keccak256(\\u0027approve(address,uint256)\\u0027)) == 0x095ea7b3\\r\\n\\t *     bytes4(keccak256(\\u0027getApproved(uint256)\\u0027)) == 0x081812fc\\r\\n\\t *     bytes4(keccak256(\\u0027setApprovalForAll(address,bool)\\u0027)) == 0xa22cb465\\r\\n\\t *     bytes4(keccak256(\\u0027isApprovedForAll(address,address)\\u0027)) == 0xe985e9c5\\r\\n\\t *     bytes4(keccak256(\\u0027transferFrom(address,address,uint256)\\u0027)) == 0x23b872dd\\r\\n\\t *     bytes4(keccak256(\\u0027safeTransferFrom(address,address,uint256)\\u0027)) == 0x42842e0e\\r\\n\\t *     bytes4(keccak256(\\u0027safeTransferFrom(address,address,uint256,bytes)\\u0027)) == 0xb88d4fde\\r\\n\\t *\\r\\n\\t *     =\\u003e 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\r\\n\\t *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\r\\n\\t */\\r\\n\\tbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\r\\n\\r\\n\\t/*\\r\\n\\t *     bytes4(keccak256(\\u0027name()\\u0027)) == 0x06fdde03\\r\\n\\t *     bytes4(keccak256(\\u0027symbol()\\u0027)) == 0x95d89b41\\r\\n\\t *     bytes4(keccak256(\\u0027tokenURI(uint256)\\u0027)) == 0xc87b56dd\\r\\n\\t *\\r\\n\\t *     =\\u003e 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\r\\n\\t */\\r\\n\\tbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\r\\n\\r\\n\\t/*\\r\\n\\t *     bytes4(keccak256(\\u0027totalSupply()\\u0027)) == 0x18160ddd\\r\\n\\t *     bytes4(keccak256(\\u0027tokenOfOwnerByIndex(address,uint256)\\u0027)) == 0x2f745c59\\r\\n\\t *     bytes4(keccak256(\\u0027tokenByIndex(uint256)\\u0027)) == 0x4f6ccce7\\r\\n\\t *\\r\\n\\t *     =\\u003e 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\r\\n\\t */\\r\\n\\tbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\r\\n\\t */\\r\\n\\tconstructor (string memory name_, string memory symbol_) public {\\r\\n\\t\\t_name = name_;\\r\\n\\t\\t_symbol = symbol_;\\r\\n\\r\\n\\t\\t// register the supported interfaces to conform to ERC721 via ERC165\\r\\n\\t\\t_registerInterface(_INTERFACE_ID_ERC721);\\r\\n\\t\\t_registerInterface(_INTERFACE_ID_ERC721_METADATA);\\r\\n\\t\\t_registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721-balanceOf}.\\r\\n\\t */\\r\\n\\tfunction balanceOf(address owner) public view virtual override returns (uint256) {\\r\\n\\t\\trequire(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\r\\n\\t\\treturn _holderTokens[owner].length();\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721-ownerOf}.\\r\\n\\t */\\r\\n\\tfunction ownerOf(uint256 tokenId) public view virtual override returns (address) {\\r\\n\\t\\treturn _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721Metadata-name}.\\r\\n\\t */\\r\\n\\tfunction name() public view virtual override returns (string memory) {\\r\\n\\t\\treturn _name;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721Metadata-symbol}.\\r\\n\\t */\\r\\n\\tfunction symbol() public view virtual override returns (string memory) {\\r\\n\\t\\treturn _symbol;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721Metadata-tokenURI}.\\r\\n\\t */\\r\\n\\tfunction tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n\\t\\trequire(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n\\r\\n\\t\\tstring memory _tokenURI = _tokenURIs[tokenId];\\r\\n\\t\\tstring memory base = baseURI();\\r\\n\\r\\n\\t\\t// If there is no base URI, return the token URI.\\r\\n\\t\\tif (bytes(base).length == 0) {\\r\\n\\t\\t\\treturn _tokenURI;\\r\\n\\t\\t}\\r\\n\\t\\t// If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\r\\n\\t\\tif (bytes(_tokenURI).length \\u003e 0) {\\r\\n\\t\\t\\treturn string(abi.encodePacked(base, _tokenURI));\\r\\n\\t\\t}\\r\\n\\t\\t// If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\r\\n\\t\\treturn string(abi.encodePacked(base, tokenId.toString()));\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Returns the base URI set via {_setBaseURI}. This will be\\r\\n\\t* automatically added as a prefix in {tokenURI} to each token\\u0027s URI, or\\r\\n\\t* to the token ID if no specific URI is set for that token ID.\\r\\n\\t*/\\r\\n\\tfunction baseURI() public view virtual returns (string memory) {\\r\\n\\t\\treturn _baseURI;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\r\\n\\t */\\r\\n\\tfunction tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\r\\n\\t\\treturn _holderTokens[owner].at(index);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721Enumerable-totalSupply}.\\r\\n\\t */\\r\\n\\tfunction totalSupply() public view virtual override returns (uint256) {\\r\\n\\t\\t// _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\r\\n\\t\\treturn _tokenOwners.length();\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721Enumerable-tokenByIndex}.\\r\\n\\t */\\r\\n\\tfunction tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\r\\n\\t\\t(uint256 tokenId, ) = _tokenOwners.at(index);\\r\\n\\t\\treturn tokenId;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721-approve}.\\r\\n\\t */\\r\\n\\tfunction approve(address to, uint256 tokenId) public virtual override {\\r\\n\\t\\taddress owner = ERC721.ownerOf(tokenId);\\r\\n\\t\\trequire(to != owner, \\\"ERC721: approval to current owner\\\");\\r\\n\\r\\n\\t\\trequire(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\r\\n\\t\\t\\t\\\"ERC721: approve caller is not owner nor approved for all\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\t_approve(to, tokenId);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721-getApproved}.\\r\\n\\t */\\r\\n\\tfunction getApproved(uint256 tokenId) public view virtual override returns (address) {\\r\\n\\t\\trequire(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\r\\n\\r\\n\\t\\treturn _tokenApprovals[tokenId];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721-setApprovalForAll}.\\r\\n\\t */\\r\\n\\tfunction setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n\\t\\trequire(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\r\\n\\r\\n\\t\\t_operatorApprovals[_msgSender()][operator] = approved;\\r\\n\\t\\temit ApprovalForAll(_msgSender(), operator, approved);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721-isApprovedForAll}.\\r\\n\\t */\\r\\n\\tfunction isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n\\t\\treturn _operatorApprovals[owner][operator];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721-transferFrom}.\\r\\n\\t */\\r\\n\\tfunction transferFrom(address from, address to, uint256 tokenId) public virtual override {\\r\\n\\t\\t//solhint-disable-next-line max-line-length\\r\\n\\t\\trequire(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n\\r\\n\\t\\t_transfer(from, to, tokenId);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721-safeTransferFrom}.\\r\\n\\t */\\r\\n\\tfunction safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\r\\n\\t\\tsafeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721-safeTransferFrom}.\\r\\n\\t */\\r\\n\\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\r\\n\\t\\trequire(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n\\t\\t_safeTransfer(from, to, tokenId, _data);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n\\t * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n\\t *\\r\\n\\t * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\r\\n\\t *\\r\\n\\t * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\r\\n\\t * implement alternative mechanisms to perform token transfer, such as signature-based.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `from` cannot be the zero address.\\r\\n\\t * - `to` cannot be the zero address.\\r\\n\\t * - `tokenId` token must exist and be owned by `from`.\\r\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n\\t *\\r\\n\\t * Emits a {Transfer} event.\\r\\n\\t */\\r\\n\\tfunction _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\r\\n\\t\\t_transfer(from, to, tokenId);\\r\\n\\t\\trequire(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns whether `tokenId` exists.\\r\\n\\t *\\r\\n\\t * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n\\t *\\r\\n\\t * Tokens start existing when they are minted (`_mint`),\\r\\n\\t * and stop existing when they are burned (`_burn`).\\r\\n\\t */\\r\\n\\tfunction _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n\\t\\treturn _tokenOwners.contains(tokenId);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns whether `spender` is allowed to manage `tokenId`.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `tokenId` must exist.\\r\\n\\t */\\r\\n\\tfunction _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\r\\n\\t\\trequire(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\r\\n\\t\\taddress owner = ERC721.ownerOf(tokenId);\\r\\n\\t\\treturn (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Safely mints `tokenId` and transfers it to `to`.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t d*\\r\\n\\t * - `tokenId` must not exist.\\r\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n\\t *\\r\\n\\t * Emits a {Transfer} event.\\r\\n\\t */\\r\\n\\tfunction _safeMint(address to, uint256 tokenId) internal virtual {\\r\\n\\t\\t_safeMint(to, tokenId, \\\"\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\r\\n\\t * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\r\\n\\t */\\r\\n\\tfunction _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\r\\n\\t\\t_mint(to, tokenId);\\r\\n\\t\\trequire(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Mints `tokenId` and transfers it to `to`.\\r\\n\\t *\\r\\n\\t * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `tokenId` must not exist.\\r\\n\\t * - `to` cannot be the zero address.\\r\\n\\t *\\r\\n\\t * Emits a {Transfer} event.\\r\\n\\t */\\r\\n\\tfunction _mint(address to, uint256 tokenId) internal virtual {\\r\\n\\t\\trequire(to != address(0), \\\"ERC721: mint to the zero address\\\");\\r\\n\\t\\trequire(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n\\t\\t_beforeTokenTransfer(address(0), to, tokenId);\\r\\n\\r\\n\\t\\t_holderTokens[to].add(tokenId);\\r\\n\\r\\n\\t\\t_tokenOwners.set(tokenId, to);\\r\\n\\r\\n\\t\\temit Transfer(address(0), to, tokenId);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Destroys `tokenId`.\\r\\n\\t * The approval is cleared when the token is burned.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `tokenId` must exist.\\r\\n\\t *\\r\\n\\t * Emits a {Transfer} event.\\r\\n\\t */\\r\\n\\tfunction _burn(uint256 tokenId) internal virtual {\\r\\n\\t\\taddress owner = ERC721.ownerOf(tokenId); // internal owner\\r\\n\\r\\n\\t\\t_beforeTokenTransfer(owner, address(0), tokenId);\\r\\n\\r\\n\\t\\t// Clear approvals\\r\\n\\t\\t_approve(address(0), tokenId);\\r\\n\\r\\n\\t\\t// Clear metadata (if any)\\r\\n\\t\\tif (bytes(_tokenURIs[tokenId]).length != 0) {\\r\\n\\t\\t\\tdelete _tokenURIs[tokenId];\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t_holderTokens[owner].remove(tokenId);\\r\\n\\r\\n\\t\\t_tokenOwners.remove(tokenId);\\r\\n\\r\\n\\t\\temit Transfer(owner, address(0), tokenId);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Transfers `tokenId` from `from` to `to`.\\r\\n\\t *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `to` cannot be the zero address.\\r\\n\\t * - `tokenId` token must be owned by `from`.\\r\\n\\t *\\r\\n\\t * Emits a {Transfer} event.\\r\\n\\t */\\r\\n\\tfunction _transfer(address from, address to, uint256 tokenId) internal virtual {\\r\\n\\t\\trequire(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\"); // internal owner\\r\\n\\t\\trequire(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\r\\n\\r\\n\\t\\t_beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n\\t\\t// Clear approvals from the previous owner\\r\\n\\t\\t_approve(address(0), tokenId);\\r\\n\\r\\n\\t\\t_holderTokens[from].remove(tokenId);\\r\\n\\t\\t_holderTokens[to].add(tokenId);\\r\\n\\r\\n\\t\\t_tokenOwners.set(tokenId, to);\\r\\n\\r\\n\\t\\temit Transfer(from, to, tokenId);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `tokenId` must exist.\\r\\n\\t */\\r\\n\\tfunction _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\r\\n\\t\\trequire(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\r\\n\\t\\t_tokenURIs[tokenId] = _tokenURI;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Internal function to set the base URI for all token IDs. It is\\r\\n\\t * automatically added as a prefix to the value returned in {tokenURI},\\r\\n\\t * or to the token ID if {tokenURI} is empty.\\r\\n\\t */\\r\\n\\tfunction _setBaseURI(string memory baseURI_) internal virtual {\\r\\n\\t\\t_baseURI = baseURI_;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n\\t * The call is not executed if the target address is not a contract.\\r\\n\\t *\\r\\n\\t * @param from address representing the previous owner of the given token ID\\r\\n\\t * @param to target address that will receive the tokens\\r\\n\\t * @param tokenId uint256 ID of the token to be transferred\\r\\n\\t * @param _data bytes optional data to send along with the call\\r\\n\\t * @return bool whether the call correctly returned the expected magic value\\r\\n\\t */\\r\\n\\tfunction _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\r\\n\\tprivate returns (bool)\\r\\n\\t{\\r\\n\\t\\tif (!to.isContract()) {\\r\\n\\t\\t\\treturn true;\\r\\n\\t\\t}\\r\\n\\t\\tbytes memory returndata = to.functionCall(abi.encodeWithSelector(\\r\\n\\t\\t\\t\\tIERC721Receiver(to).onERC721Received.selector,\\r\\n\\t\\t\\t\\t_msgSender(),\\r\\n\\t\\t\\t\\tfrom,\\r\\n\\t\\t\\t\\ttokenId,\\r\\n\\t\\t\\t\\t_data\\r\\n\\t\\t\\t), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n\\t\\tbytes4 retval = abi.decode(returndata, (bytes4));\\r\\n\\t\\treturn (retval == _ERC721_RECEIVED);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Approve `to` to operate on `tokenId`\\r\\n\\t *\\r\\n\\t * Emits an {Approval} event.\\r\\n\\t */\\r\\n\\tfunction _approve(address to, uint256 tokenId) internal virtual {\\r\\n\\t\\t_tokenApprovals[tokenId] = to;\\r\\n\\t\\temit Approval(ERC721.ownerOf(tokenId), to, tokenId); // internal owner\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Hook that is called before any token transfer. This includes minting\\r\\n\\t * and burning.\\r\\n\\t *\\r\\n\\t * Calling conditions:\\r\\n\\t *\\r\\n\\t * - When `from` and `to` are both non-zero, ``from``\\u0027s `tokenId` will be\\r\\n\\t * transferred to `to`.\\r\\n\\t * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n\\t * - When `to` is zero, ``from``\\u0027s `tokenId` will be burned.\\r\\n\\t * - `from` cannot be the zero address.\\r\\n\\t * - `to` cannot be the zero address.\\r\\n\\t *\\r\\n\\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n\\t */\\r\\n\\tfunction _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\r\\n}\"},\"soldierLoot.sol\":{\"content\":\"/*\\r\\n/ Soldier Loot\\r\\n/ https://twitter.com/SoldierLoot\\r\\n/ \\r\\n/ Soldier Loot is randomized military gear generated and stored on chain. \\r\\n/ Stats, images, and other functionality are intentionally omitted for others to interpret.\\r\\n/ Feel free to use Soldier Loot in any way you want.\\r\\n/\\r\\n/ Mint Prices - \\r\\n/ Loot Holders: 0.03 Eth\\r\\n/ Public: 0.09 Eth\\t\\r\\n/\\r\\n/\\r\\n*/\\r\\n\\r\\n\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n//SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\nimport \\\"./ERC721.sol\\\";\\r\\n\\r\\ncontract Soldiers is ERC721, ReentrancyGuard, Ownable {\\r\\n\\tusing SafeMath for uint256;\\r\\n\\r\\n\\tconstructor() ERC721(\\\"Soldier Loot\\\", \\\"Soldier\\\") {}\\r\\n\\taddress public lootAddress = 0xFF9C1b15B16263C61d017ee9F65C50e4AE0113D7;\\r\\n\\tLootInterface lootContract = LootInterface(lootAddress);\\r\\n\\r\\n\\tstring public PROVENANCE = \\\"\\\";\\r\\n\\r\\n\\tuint256 public maxSupply = 14000;\\r\\n\\tuint256 public currentSupply = 0;\\r\\n\\r\\n\\tuint256 public lootersPrice = 30000000000000000; // 0.03 ETH\\r\\n\\tuint256 public publicPrice = 90000000000000000; // 0.09 ETH\\r\\n\\r\\n\\tstring[] private branch = [\\r\\n\\t\\t\\\"Army\\\", \\\"Army\\\", \\\"Army\\\",\\r\\n\\t\\t\\\"Space Corp\\\",\\r\\n\\t\\t\\\"Air Force\\\", \\\"Air Force\\\",\\r\\n\\t\\t\\\"Marine Corp\\\", \\\"Marine Corp\\\",\\r\\n\\t\\t\\\"Navy\\\", \\\"Navy\\\", \\\"Navy\\\",\\r\\n\\t\\t\\\"Coast Guard\\\", \\\"Coast Guard\\\", \\\"Coast Guard\\\"\\r\\n\\t];\\r\\n\\tstring[] private country = [\\r\\n\\t\\t\\\"German\\\", \\\"German\\\",\\r\\n\\t\\t\\\"British\\\", \\\"British\\\", \\\"British\\\",\\r\\n\\t\\t\\\"French\\\", \\\"French\\\",\\r\\n\\t\\t\\\"American\\\", \\\"American\\\", \\\"American\\\",\\r\\n\\t\\t\\\"Canadian\\\", \\\"Canadian\\\",\\r\\n\\t\\t\\\"Mexican\\\", \\\"Mexican\\\",\\r\\n\\t\\t\\\"Russian\\\", \\\"Russian\\\",\\r\\n\\t\\t\\\"Chinese\\\", \\\"Chinese\\\", \\\"Chinese\\\",\\r\\n\\t\\t\\\"Italian\\\", \\\"Italian\\\",\\r\\n\\t\\t\\\"Japanese\\\", \\\"Japanese\\\", \\\"Japanese\\\",\\r\\n\\t\\t\\\"Australian\\\", \\\"Australian\\\", \\\"Australian\\\",\\r\\n\\t\\t\\\"Taliban\\\"\\r\\n\\t          ];\\r\\n\\r\\n\\tstring[] private primary = [\\r\\n\\t\\t\\\"M16 Assault Rifle\\\", \\\"M16 Assault Rifle\\\", \\\"M16 Assault Rifle\\\", \\\"M16 Assault Rifle\\\", \\r\\n\\t\\t\\\"HK417 Battle Rifle\\\", \\\"HK417 Battle Rifle\\\", \\r\\n\\t\\t\\\"M40 Sniper Rifle\\\", \\\"M40 Sniper Rifle\\\", \\\"M40 Sniper Rifle\\\", \\r\\n\\t\\t\\\"M14 Rifle\\\", \\\"M14 Rifle\\\", \\r\\n\\t\\t\\\"M82 .50 Cal\\\", \\r\\n\\t\\t\\\"M249 Light Machine Gun\\\", \\\"M249 Light Machine Gun\\\", \\\"M249 Light Machine Gun\\\", \\r\\n\\t\\t\\\"FN SCAR\\\", \\r\\n\\t\\t\\\"RPG\\\", \\\"RPG\\\", \\r\\n\\t\\t\\\"AK-47\\\", \\\"AK-47\\\", \\\"AK-47\\\", \\\"AK-47\\\"\\r\\n\\t];\\r\\n\\tstring[] private primaryPrefix = [\\\"Rusty\\\", \\\"New\\\", \\\"Old\\\", \\\"Pristine\\\", \\\"Regular\\\", \\\"Regular\\\", \\\"Regular\\\", \\\"Scratched\\\", \\\"Disassembled\\\", \\\"Broken\\\", \\\"Worn\\\"];\\r\\n\\r\\n\\tstring[] private secondary = [\\r\\n\\t\\t\\\"Beretta M9\\\", \\\"Beretta M9\\\", \\\"Beretta M9\\\",\\r\\n\\t\\t\\\"SIG Sauer P228\\\", \\\"SIG Sauer P228\\\",\\r\\n\\t\\t\\\"Glock 17\\\", \\\"Glock 17\\\", \\\"Glock 17\\\",\\r\\n\\t\\t\\\"M1911\\\"\\r\\n\\t];\\r\\n\\tstring[] private secondaryPrefix = [\\\"Rusty\\\", \\\"New\\\", \\\"Old\\\", \\\"Pristine\\\", \\\"Regular\\\", \\\"Regular\\\", \\\"Regular\\\", \\\"Scratched\\\", \\\"Disassembled\\\", \\\"Broken\\\", \\\"Worn\\\"];\\r\\n\\r\\n\\tstring[] private equipment = [\\r\\n\\t\\t\\\"Claymore\\\", \\\"Claymore\\\", \\r\\n\\t\\t\\\"Frag Grenade\\\", \\\"Frag Grenade\\\", \\\"Frag Grenade\\\",\\r\\n\\t\\t\\\"Molotov Cocktail\\\", \\r\\n\\t\\t\\\"C4\\\", \\\"C4\\\", \\r\\n\\t\\t\\\"Flash Grenade\\\", \\\"Flash Grenade\\\", \\r\\n\\t\\t\\\"Stun Grenade\\\", \\\"Stun Grenade\\\", \\r\\n\\t\\t\\\"Smoke Grenade\\\", \\\"Smoke Grenade\\\", \\\"Smoke Grenade\\\"\\r\\n\\t];\\r\\n\\tstring[] private equipmentPrefix = [\\\"\\\"];\\r\\n\\r\\n\\tfunction getBranch(uint256 tokenId) public view returns (string memory) {\\r\\n\\t\\treturn pluck(tokenId, \\\"Branch\\\", branch, country);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getPrimary(uint256 tokenId) public view returns (string memory) {\\r\\n\\t\\treturn pluck(tokenId, \\\"Primary\\\", primary, primaryPrefix);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getSecondary(uint256 tokenId) public view returns (string memory) {\\r\\n\\t\\treturn pluck(tokenId, \\\"Secondary\\\", secondary, secondaryPrefix);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getEquipment(uint256 tokenId) public view returns (string memory) {\\r\\n\\t\\treturn pluck(tokenId, \\\"Equipment\\\", equipment, equipmentPrefix);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getFullDescription(uint256 tokenId) public view returns (string memory) {\\r\\n\\t\\treturn string(abi.encodePacked(\\r\\n\\t\\t\\tgetBranch(tokenId), \\\" + \\\",\\r\\n\\t\\t\\tgetPrimary(tokenId), \\\" + \\\",\\r\\n\\t\\t\\tgetSecondary(tokenId), \\\" + \\\",\\r\\n\\t\\t\\tgetEquipment(tokenId)\\r\\n\\t\\t));\\r\\n\\t}\\r\\n\\r\\n\\tfunction random(string memory input) public pure returns (uint256) {\\r\\n\\t\\treturn uint256(keccak256(abi.encodePacked(input))) % 31;\\r\\n\\t}\\r\\n\\r\\n\\tfunction pluckRoll(uint256 tokenId, string memory keyPrefix) internal pure returns (string memory) {\\r\\n\\t\\tuint256 roll1 = random(string(abi.encodePacked(keyPrefix, toString(tokenId), \\\"1\\\")));\\r\\n\\t\\tuint256 min = roll1;\\r\\n\\t\\tuint256 roll2 = random(string(abi.encodePacked(keyPrefix, toString(tokenId), \\\"2\\\")));\\r\\n\\t\\tmin = min \\u003e roll2 ? roll2 : min;\\r\\n\\t\\tuint256 roll3 = random(string(abi.encodePacked(keyPrefix, toString(tokenId), \\\"3\\\")));\\r\\n\\t\\tmin = min \\u003e roll3 ? roll3 : min;\\r\\n\\t\\tuint256 roll4 = random(string(abi.encodePacked(keyPrefix, toString(tokenId), \\\"4\\\")));\\r\\n\\t\\tmin = min \\u003e roll4 ? roll4 : min;\\r\\n\\r\\n\\t\\t// get 3 highest dice rolls\\r\\n\\t\\tuint256 stat = roll1 * roll2 * roll3 + roll4 + roll3 - min;\\r\\n\\r\\n\\t\\tstring memory output = string(abi.encodePacked(toString(stat)));\\r\\n\\r\\n\\t\\treturn output;\\r\\n\\t}\\r\\n\\r\\n\\tfunction pluck(\\r\\n\\t\\tuint256 tokenId,\\r\\n\\t\\tstring memory keyPrefix,\\r\\n\\t\\tstring[] memory sourceArray,\\r\\n\\t\\tstring[] memory prefixes\\r\\n\\t) internal view returns (string memory) {\\r\\n\\t\\tuint256 randA = random(\\r\\n\\t\\t\\tstring(abi.encodePacked(keyPrefix, toString(tokenId*7)))\\r\\n\\t\\t);\\r\\n\\t\\tuint256 randB = random(\\r\\n\\t\\t\\tstring(abi.encodePacked(keyPrefix, toString(tokenId*4)))\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tstring memory output = sourceArray[randA % sourceArray.length];\\r\\n\\t\\toutput = string(\\r\\n\\t\\t\\tabi.encodePacked(prefixes[randB % prefixes.length], \\\" \\\", output)\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tstring memory actual = string(abi.encodePacked(output));\\r\\n\\t\\treturn actual;\\r\\n\\t}\\r\\n\\r\\n\\tfunction withdraw() public onlyOwner {\\r\\n\\t\\tuint balance = address(this).balance;\\r\\n\\t\\tmsg.sender.transfer(balance);\\r\\n\\t}\\r\\n\\r\\n\\tfunction deposit() public payable onlyOwner {}\\r\\n\\r\\n\\r\\n\\tfunction setLootersPrice(uint256 newPrice) public onlyOwner {\\r\\n\\t\\tlootersPrice = newPrice;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setPublicPrice(uint256 newPrice) public onlyOwner {\\r\\n\\t\\tpublicPrice = newPrice;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setBaseURI(string memory baseURI) public onlyOwner {\\r\\n\\t\\t_setBaseURI(baseURI);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setProvenance(string memory prov) public onlyOwner {\\r\\n\\t\\tPROVENANCE = prov;\\r\\n\\t}\\r\\n\\r\\n\\t// Loot owners minting\\r\\n\\tfunction mintWithLoot(uint lootId) public payable nonReentrant {\\r\\n\\t\\trequire(lootContract.ownerOf(lootId) == msg.sender, \\\"This Loot is not owned by the minter\\\");\\r\\n\\t\\trequire(lootersPrice \\u003c= msg.value, \\\"Not enough Ether sent\\\");\\r\\n\\t\\trequire(currentSupply \\u003c maxSupply, \\\"All soldiers are minted\\\");\\r\\n\\t\\t_safeMint(msg.sender, currentSupply);\\r\\n\\t\\tcurrentSupply += 1;\\r\\n\\t}\\r\\n\\r\\n\\t// Public minting\\r\\n\\tfunction mint() public payable nonReentrant {\\r\\n\\t\\trequire(publicPrice \\u003c= msg.value, \\\"Not enough Ether sent\\\");\\r\\n\\t\\trequire(currentSupply \\u003c maxSupply, \\\"All soldiers are minted\\\");\\r\\n\\r\\n\\t\\t_safeMint(msg.sender, currentSupply);\\r\\n\\t\\tcurrentSupply += 1;\\r\\n\\t}\\r\\n\\r\\n\\tfunction toString(uint256 value) internal pure returns (string memory) {\\r\\n\\t\\tif (value == 0) {\\r\\n\\t\\t\\treturn \\\"0\\\";\\r\\n\\t\\t}\\r\\n\\t\\tuint256 temp = value;\\r\\n\\t\\tuint256 digits;\\r\\n\\t\\twhile (temp != 0) {\\r\\n\\t\\t\\tdigits++;\\r\\n\\t\\t\\ttemp /= 10;\\r\\n\\t\\t}\\r\\n\\t\\tbytes memory buffer = new bytes(digits);\\r\\n\\t\\twhile (value != 0) {\\r\\n\\t\\t\\tdigits -= 1;\\r\\n\\t\\t\\tbuffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n\\t\\t\\tvalue /= 10;\\r\\n\\t\\t}\\r\\n\\t\\treturn string(buffer);\\r\\n\\t}\\r\\n\\r\\n\\tfunction tokenURI(uint256 tokenId) override public view returns (string memory) {\\r\\n\\t\\tstring[9] memory parts;\\r\\n\\t\\tparts[0] = \\u0027\\u003csvg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 350 350\\\"\\u003e\\u003cstyle\\u003e.base { fill: white; font-family: serif; font-size: 14px; }\\u003c/style\\u003e\\u003crect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"black\\\" /\\u003e\\u003ctext x=\\\"10\\\" y=\\\"20\\\" class=\\\"base\\\"\\u003e\\u0027;\\r\\n\\r\\n\\t\\tparts[1] = getBranch(tokenId);\\r\\n\\r\\n\\t\\tparts[2] = \\u0027\\u003c/text\\u003e\\u003ctext x=\\\"10\\\" y=\\\"40\\\" class=\\\"base\\\"\\u003e\\u0027;\\r\\n\\r\\n\\t\\tparts[3] = getPrimary(tokenId);\\r\\n\\r\\n\\t\\tparts[4] = \\u0027\\u003c/text\\u003e\\u003ctext x=\\\"10\\\" y=\\\"60\\\" class=\\\"base\\\"\\u003e\\u0027;\\r\\n\\r\\n\\t\\tparts[5] = getSecondary(tokenId);\\r\\n\\r\\n\\t\\tparts[6] = \\u0027\\u003c/text\\u003e\\u003ctext x=\\\"10\\\" y=\\\"80\\\" class=\\\"base\\\"\\u003e\\u0027;\\r\\n\\r\\n\\t\\tparts[7] = getEquipment(tokenId);\\r\\n\\r\\n\\t\\tparts[8] = \\u0027\\u003c/text\\u003e\\u003c/svg\\u003e\\u0027;\\r\\n\\r\\n\\t\\tstring memory output = string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7], parts[8]));\\r\\n\\r\\n\\t\\tstring memory json = Base64.encode(bytes(string(abi.encodePacked(\\u0027{\\\"name\\\": \\\"Soldier #\\u0027, toString(tokenId), \\u0027\\\", \\\"description\\\": \\\"Soldier Loot is randomized military gear generated and stored on chain. Stats, images, and other functionality are intentionally omitted for others to interpret. Feel free to use Soldier Loot in any way you want.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,\\u0027, Base64.encode(bytes(output)), \\u0027\\\"}\\u0027))));\\r\\n\\t\\toutput = string(abi.encodePacked(\\u0027data:application/json;base64,\\u0027, json));\\r\\n\\r\\n\\t\\treturn output;\\r\\n\\t}\\r\\n}\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PROVENANCE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getBranch\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getEquipment\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFullDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPrimary\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getSecondary\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lootAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lootersPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lootId\",\"type\":\"uint256\"}],\"name\":\"mintWithLoot\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"}],\"name\":\"random\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setLootersPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"prov\",\"type\":\"string\"}],\"name\":\"setProvenance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPublicPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Soldiers","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://df13e846ad20c455cf1ac3eb511b4f4900e9de11dd1ce6262c7e9943c142c2f8"}]}