{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.0;\r\n\r\ninterface ERC721 {\r\n  function safeTransferFrom(address from,address to,uint256 tokenId) external;\r\n}\r\n\r\ninterface ERC20 {\r\n  function transferFrom(address src, address dst, uint wad)\r\n        external\r\n        returns (bool);\r\n}\r\n\r\n\r\ncontract GollumTrader {\r\n  mapping(bytes32 => bool) public orderhashes; // keep tracks of orderhashes that are filled or cancelled so they cant be filled again \r\n  mapping(bytes32 => bool) public offerhashes; // keep tracks of offerhashes that are filled or cancelled so they cant be filled again \r\n  address payable owner;\r\n  ERC20 wethcontract;\r\n  event Orderfilled(address indexed from,address indexed to, bytes32 indexed id, uint ethamt,address refferer,uint feeamt);\r\n  event Offerfilled(address indexed from,address indexed to, bytes32 indexed id, uint ethamt,uint feeamt);\r\n  event Ordercancelled(bytes32 indexed id);\r\n\r\n  constructor ()\r\n        public\r\n  {\r\n    owner = payable(msg.sender);\r\n    address WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    wethcontract = ERC20(WETH);\r\n  }\r\n\r\n/// @notice returns eip712domainhash\r\n    function _eip712DomainHash() internal view returns(bytes32 eip712DomainHash) {\r\n        eip712DomainHash = keccak256(\r\n        abi.encode(\r\n            keccak256(\r\n                \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n            ),\r\n            keccak256(bytes(\"GOLLUM.XYZ\")),\r\n            keccak256(bytes(\"1\")),\r\n            1,\r\n            address(this)\r\n        )\r\n    );  \r\n    }\r\n/// @notice called by buyer of ERC721 nft with a valid signature from seller of nft and sending the correct eth in the transaction\r\n/// @param v,r,s EIP712 type signature of signer/seller\r\n/// @param contractaddress nft ERC721 contract address which is being traded\r\n/// @param tokenid nft ERC721 token id\r\n/// @param ethamt amount of ether in wei that the seller gets\r\n/// @param deadline deadline will order is valid\r\n/// @param feeamt fee to be paid to owner of contract\r\n/// @param signer seller of nft and signer of signature\r\n/// @param salt salt for uniqueness of the order\r\n/// @param refferer address that reffered the trade\r\n\r\n  function executeOrderIfSignatureMatch(\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s,\r\n    address contractaddress,\r\n    uint256 tokenid,\r\n    uint256 ethamt,\r\n    uint256 deadline,\r\n    uint256 feeamt,\r\n    address payable signer,\r\n    uint256 salt,\r\n    address refferer\r\n  ) external payable {\r\n    require(block.timestamp < deadline, \"Signed transaction expired\");\r\n\r\n\r\n    bytes32 hashStruct = keccak256(\r\n      abi.encode(\r\n          keccak256(\"matchorder(address contractaddress,uint tokenid,uint ethamt,uint deadline,uint feeamt,address signer,uint salt)\"),\r\n          contractaddress,\r\n          tokenid,\r\n          ethamt,\r\n          deadline,\r\n          feeamt,\r\n          signer,\r\n          salt\r\n        )\r\n    );\r\n\r\n    bytes32 hash = keccak256(abi.encodePacked(\"\\x19\\x01\", _eip712DomainHash(), hashStruct));\r\n    address signaturesigner = ecrecover(hash, v, r, s);\r\n    require(signaturesigner == signer, \"invalid signature\");\r\n    require(msg.value == ethamt, \"wrong eth amt\");\r\n    require(orderhashes[hashStruct]==false,\"order filled or cancelled\");\r\n    orderhashes[hashStruct]=true; // prevent reentrency and also doesnt allow any order to be filled more then once\r\n    ERC721 nftcontract = ERC721(contractaddress);\r\n    nftcontract.safeTransferFrom(signer,msg.sender ,tokenid); // transfer \r\n    if (feeamt>0){\r\n      owner.transfer(feeamt); // fee transfer to owner\r\n    }\r\n    signer.transfer(msg.value-feeamt); // transfer of eth to seller of nft\r\n    emit Orderfilled(signer, msg.sender, hashStruct , ethamt , refferer ,feeamt);\r\n  }\r\n\r\n/// @notice invalidates an offchain order signature so it cant be filled by anyone\r\n/// @param contractaddress nft ERC721 contract address which is being traded\r\n/// @param tokenid nft ERC721 token id\r\n/// @param ethamt amount of weth in wei that the seller gets\r\n/// @param deadline deadline till order is valid\r\n/// @param feeamt fee to be paid to owner of contract\r\n/// @param salt salt for uniqueness of the order\r\n\r\n\r\n  function cancelOrder(    \r\n    address contractaddress,\r\n    uint256 tokenid,\r\n    uint256 ethamt,\r\n    uint256 deadline,\r\n    uint256 feeamt,\r\n    uint256 salt\r\n) external{\r\n      bytes32 hashStruct = keccak256(\r\n      abi.encode(\r\n          keccak256(\"matchorder(address contractaddress,uint tokenid,uint ethamt,uint deadline,uint feeamt ,address signer,uint salt)\"),\r\n          contractaddress,\r\n          tokenid,\r\n          ethamt,\r\n          deadline,\r\n          feeamt,\r\n          msg.sender,\r\n          salt\r\n        )\r\n    );\r\n        orderhashes[hashStruct]=true;  // no need to check for signature validation since sender can only invalidate his own order\r\n        emit Ordercancelled(hashStruct);\r\n  }\r\n\r\n\r\n/// @notice called by seller of ERc721NFT when he sees a signed buy offer of ethamt ETH\r\n/// @param v,r,s EIP712 type signature of signer/buyer\r\n/// @param contractaddress nft ERC721 contract address which is being traded\r\n/// @param tokenid nft ERC721 token id\r\n/// @param ethamt amount of weth in wei that the seller gets\r\n/// @param deadline deadline till order is valid\r\n/// @param feeamt fee to be paid to owner of contract\r\n/// @param signer buyer of nft and signer of v,r,s signature\r\n/// @param salt salt for uniqueness of the order\r\n\r\n  function executeOfferIfSignatureMatch(\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s,\r\n    address contractaddress,\r\n    uint256 tokenid,\r\n    uint256 ethamt,\r\n    uint256 deadline,\r\n    uint256 feeamt,\r\n    address signer,\r\n    uint256 salt\r\n  ) external {\r\n    require(block.timestamp < deadline, \"Signed transaction expired\");\r\n\r\n    bytes32 hashStruct = keccak256(\r\n      abi.encode(\r\n          keccak256(\"matchoffer(address contractaddress,uint tokenid,uint ethamt,uint deadline,uint feeamt,address signer,uint salt)\"),\r\n          contractaddress,\r\n          tokenid,\r\n          ethamt,\r\n          deadline,\r\n          feeamt,\r\n          signer,\r\n          salt\r\n        )\r\n    );\r\n\r\n\r\n    bytes32 hash = keccak256(abi.encodePacked(\"\\x19\\x01\", _eip712DomainHash(), hashStruct));\r\n    address signaturesigner = ecrecover(hash, v, r, s);\r\n    require(signaturesigner == signer, \"invalid signature\");\r\n    require(offerhashes[hashStruct]==false,\"order filled or cancelled\");\r\n    offerhashes[hashStruct]=true;\r\n    if (feeamt>0){\r\n      require(wethcontract.transferFrom(signer, owner , feeamt),\"error in weth transfer\");\r\n    }\r\n    require(wethcontract.transferFrom(signer, msg.sender, ethamt-feeamt),\"error in weth transfer\");\r\n    ERC721 nftcontract = ERC721(contractaddress);\r\n    nftcontract.safeTransferFrom(msg.sender,signer ,tokenid);\r\n    emit Offerfilled(signer, msg.sender, hashStruct , ethamt ,feeamt);\r\n  }\r\n\r\n\r\n\r\n/// @notice invalidates an offchain offer signature so it cant be filled by anyone\r\n/// @param contractaddress nft ERC721 contract address which is being traded\r\n/// @param tokenid nft ERC721 token id\r\n/// @param ethamt amount of weth in wei that the seller gets\r\n/// @param deadline deadline till order is valid\r\n/// @param feeamt fee to be paid to owner of contract\r\n/// @param salt salt for uniqueness of the order\r\n\r\n  function cancelOffer(    \r\n    address contractaddress,\r\n    uint256 tokenid,\r\n    uint256 ethamt,\r\n    uint256 deadline,\r\n    uint256 feeamt,\r\n    uint256 salt\r\n\r\n) external{\r\n      bytes32 hashStruct = keccak256(\r\n      abi.encode(\r\n          keccak256(\"matchoffer(address contractaddress,uint tokenid,uint ethamt,uint deadline,uint feeamt ,address signer,uint salt)\"),\r\n          contractaddress,\r\n          tokenid,\r\n          ethamt,\r\n          deadline,\r\n          feeamt,\r\n          msg.sender,\r\n          salt\r\n        )\r\n    );\r\n      offerhashes[hashStruct]=true;  \r\n      emit Ordercancelled(hashStruct);\r\n  }\r\n\r\n\r\n \r\n\r\n// returns Keccak256 hash of an order\r\n  function Orderstruct(   \r\n    address contractaddress,\r\n    uint256 tokenid,\r\n    uint256 ethamt,\r\n    uint256 deadline,\r\n    uint256 feeamt,\r\n    address signer,\r\n    uint256 salt\r\n    ) public pure returns (bytes32) {\r\n        return keccak256(\r\n      abi.encode(\r\n          keccak256(\"matchorder(address contractaddress,uint tokenid,uint ethamt,uint deadline,uint feeamt ,address signer,uint salt)\"),\r\n          contractaddress,\r\n          tokenid,\r\n          ethamt,\r\n          deadline,\r\n          feeamt,\r\n          signer,\r\n          salt\r\n        )\r\n    );\r\n    }\r\n\r\n  // returns Keccak256 hash of an offer\r\n  function Offerstruct(   \r\n    address contractaddress,\r\n    uint256 tokenid,\r\n    uint256 ethamt,\r\n    uint256 deadline,\r\n    uint256 feeamt,\r\n    address signer,\r\n    uint256 salt\r\n    ) public pure returns (bytes32) {\r\n        return keccak256(\r\n      abi.encode(\r\n          keccak256(\"matchoffer(address contractaddress,uint tokenid,uint ethamt,uint deadline,uint feeamt ,address signer,uint salt)\"),\r\n          contractaddress,\r\n          tokenid,\r\n          ethamt,\r\n          deadline,\r\n          feeamt,\r\n          signer,\r\n          salt\r\n        )\r\n    );\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethamt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeamt\",\"type\":\"uint256\"}],\"name\":\"Offerfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"Ordercancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethamt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refferer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeamt\",\"type\":\"uint256\"}],\"name\":\"Orderfilled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethamt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeamt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"Offerstruct\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethamt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeamt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"Orderstruct\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethamt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeamt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethamt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeamt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"contractaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethamt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeamt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"executeOfferIfSignatureMatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"contractaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethamt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeamt\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refferer\",\"type\":\"address\"}],\"name\":\"executeOrderIfSignatureMatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"offerhashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderhashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GollumTrader","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://746d9924acb1df9296786724a55e3e6b93813811963b791124c85fd586702247"}]}