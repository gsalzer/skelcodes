{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"NFTControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"Ownable.sol\\\";\\n\\n/**\\n@title BadgerDAO NFT Control\\n@author @swoledoteth\\n@notice NFTControl is the on chain source of truth for the Boost NFT Weights.\\nThe parameter exposed by NFT Control: \\n- NFT Weight\\n@dev All operations must be conducted by an nft control manager.\\nThe deployer is the original manager and can add or remove managers as needed.\\n*/\\ncontract NFTControl is Ownable {\\n  event NFTWeightChanged(address indexed _nft, uint256 indexed _id, uint256 indexed _weight, uint256 _timestamp);\\n\\n  mapping(address => bool) public manager;\\n  struct NFTWeightSchedule {\\n   address addr;\\n   uint256 id;\\n   uint256 weight;\\n   uint256 start;\\n  }\\n\\n  NFTWeightSchedule[] public nftWeightSchedules;\\n\\n  modifier onlyManager() {\\n    require(manager[msg.sender], \\\"!manager\\\");\\n    _;\\n  }\\n\\n  /// @param _manager address to add as manager\\n  function addManager(address _manager) external onlyOwner {\\n    manager[_manager] = true;\\n  }\\n\\n  /// @param _manager address to remove as manager\\n  function removeManager(address _manager) external onlyOwner {\\n    manager[_manager] = false;\\n  }\\n\\n  constructor(address _owner) {\\n    manager[msg.sender] = true;\\n    // Honeypot 1\\n    nftWeightSchedules.push(NFTWeightSchedule(0xe4605d46Fd0B3f8329d936a8b258D69276cBa264, 97, 10 ether, block.timestamp));\\n    // Honeypot 2\\n    nftWeightSchedules.push(NFTWeightSchedule(0xe4605d46Fd0B3f8329d936a8b258D69276cBa264, 98, 10 ether, block.timestamp));\\n    // Honeypot 3\\n    nftWeightSchedules.push(NFTWeightSchedule(0xe4605d46Fd0B3f8329d936a8b258D69276cBa264, 99, 50 ether, block.timestamp));\\n    // Honeypot 4\\n    nftWeightSchedules.push(NFTWeightSchedule(0xe4605d46Fd0B3f8329d936a8b258D69276cBa264, 100, 50 ether, block.timestamp));\\n    // Honeypot 5\\n    nftWeightSchedules.push(NFTWeightSchedule(0xe4605d46Fd0B3f8329d936a8b258D69276cBa264, 101, 500 ether, block.timestamp));\\n    // Honeypot 6\\n    nftWeightSchedules.push(NFTWeightSchedule(0xe4605d46Fd0B3f8329d936a8b258D69276cBa264, 102, 500 ether, block.timestamp));\\n\\n    // Diamond Hands 1\\n    nftWeightSchedules.push(NFTWeightSchedule(0xe4605d46Fd0B3f8329d936a8b258D69276cBa264, 205, 50 ether, block.timestamp));\\n    // Diamond Hands 2\\n    nftWeightSchedules.push(NFTWeightSchedule(0xe4605d46Fd0B3f8329d936a8b258D69276cBa264, 206, 200 ether, block.timestamp));\\n    // Diamond Hands 3\\n    nftWeightSchedules.push(NFTWeightSchedule(0xe4605d46Fd0B3f8329d936a8b258D69276cBa264, 206, 1000 ether, block.timestamp));\\n\\n    // Jersey\\n    nftWeightSchedules.push(NFTWeightSchedule(0xe1e546e25A5eD890DFf8b8D005537c0d373497F8, 1, 200 ether, block.timestamp));\\n\\n    manager[_owner] = true;\\n\\n    transferOwnership(_owner);\\n    \\n  }\\n\\n\\n\\n  /// @param _nft address of nft to set weight\\n  /// @param _id id of nft to set weight\\n  /// @param _weight weight to set in wei formatr\\n  /// @param _timestamp timestamp of when to activate nft weight schedule\\n\\n\\n  function addNftWeightSchedule(address _nft, uint256 _id, uint256 _weight, uint256 _timestamp)\\n    external\\n    onlyManager\\n  {\\n    NFTWeightSchedule memory nftWeightSchedule = NFTWeightSchedule(_nft, _id, _weight, _timestamp);\\n    nftWeightSchedules.push(nftWeightSchedule);\\n    emit NFTWeightChanged(_nft, _id, _weight, _timestamp);\\n  }\\n  function getNftWeightSchedules() external view returns(NFTWeightSchedule[] memory) {\\n    return nftWeightSchedules;\\n  }\\n\\n}\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"NFTWeightChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"addNftWeightSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNftWeightSchedules\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTControl.NFTWeightSchedule[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftWeightSchedules\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NFTControl","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000086cbd0ce0c087b482782c181da8d191de18c8275","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}