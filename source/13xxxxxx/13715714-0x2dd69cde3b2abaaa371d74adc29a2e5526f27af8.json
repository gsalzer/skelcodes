{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @ethereansos/swissknife/contracts/lib/GeneralUtilities.sol\r\n\r\n\r\npragma solidity >=0.7.0;\r\n\r\n\r\nlibrary BehaviorUtilities {\r\n\r\n    function randomKey(uint256 i) internal view returns (bytes32) {\r\n        return keccak256(abi.encode(i, block.timestamp, block.number, tx.origin, tx.gasprice, block.coinbase, block.difficulty, msg.sender, blockhash(block.number - 5)));\r\n    }\r\n\r\n    function calculateProjectedArraySizeAndLoopUpperBound(uint256 arraySize, uint256 start, uint256 offset) internal pure returns(uint256 projectedArraySize, uint256 projectedArrayLoopUpperBound) {\r\n        if(arraySize != 0 && start < arraySize && offset != 0) {\r\n            uint256 length = start + offset;\r\n            if(start < (length = length > arraySize ? arraySize : length)) {\r\n                projectedArraySize = (projectedArrayLoopUpperBound = length) - start;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary ReflectionUtilities {\r\n\r\n    function read(address subject, bytes memory inputData) internal view returns(bytes memory returnData) {\r\n        bool result;\r\n        (result, returnData) = subject.staticcall(inputData);\r\n        if(!result) {\r\n            assembly {\r\n                revert(add(returnData, 0x20), mload(returnData))\r\n            }\r\n        }\r\n    }\r\n\r\n    function submit(address subject, uint256 value, bytes memory inputData) internal returns(bytes memory returnData) {\r\n        bool result;\r\n        (result, returnData) = subject.call{value : value}(inputData);\r\n        if(!result) {\r\n            assembly {\r\n                revert(add(returnData, 0x20), mload(returnData))\r\n            }\r\n        }\r\n    }\r\n\r\n    function isContract(address subject) internal view returns (bool) {\r\n        if(subject == address(0)) {\r\n            return false;\r\n        }\r\n        uint256 codeLength;\r\n        assembly {\r\n            codeLength := extcodesize(subject)\r\n        }\r\n        return codeLength > 0;\r\n    }\r\n\r\n    function clone(address originalContract) internal returns(address copyContract) {\r\n        assembly {\r\n            mstore(\r\n                0,\r\n                or(\r\n                    0x5880730000000000000000000000000000000000000000803b80938091923cF3,\r\n                    mul(originalContract, 0x1000000000000000000)\r\n                )\r\n            )\r\n            copyContract := create(0, 0, 32)\r\n            switch extcodesize(copyContract)\r\n                case 0 {\r\n                    invalid()\r\n                }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary BytesUtilities {\r\n\r\n    bytes private constant ALPHABET = \"0123456789abcdef\";\r\n    string internal constant BASE64_ENCODER_DATA = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\r\n    function asAddress(bytes memory b) internal pure returns(address) {\r\n        if(b.length == 0) {\r\n            return address(0);\r\n        }\r\n        if(b.length == 20) {\r\n            address addr;\r\n            assembly {\r\n                addr := mload(add(b, 20))\r\n            }\r\n            return addr;\r\n        }\r\n        return abi.decode(b, (address));\r\n    }\r\n\r\n    function asAddressArray(bytes memory b) internal pure returns(address[] memory callResult) {\r\n        if(b.length > 0) {\r\n            return abi.decode(b, (address[]));\r\n        }\r\n    }\r\n\r\n    function asBool(bytes memory bs) internal pure returns(bool) {\r\n        return asUint256(bs) != 0;\r\n    }\r\n\r\n    function asBoolArray(bytes memory b) internal pure returns(bool[] memory callResult) {\r\n        if(b.length > 0) {\r\n            return abi.decode(b, (bool[]));\r\n        }\r\n    }\r\n\r\n    function asBytesArray(bytes memory b) internal pure returns(bytes[] memory callResult) {\r\n        if(b.length > 0) {\r\n            return abi.decode(b, (bytes[]));\r\n        }\r\n    }\r\n\r\n    function asString(bytes memory b) internal pure returns(string memory callResult) {\r\n        if(b.length > 0) {\r\n            return abi.decode(b, (string));\r\n        }\r\n    }\r\n\r\n    function asStringArray(bytes memory b) internal pure returns(string[] memory callResult) {\r\n        if(b.length > 0) {\r\n            return abi.decode(b, (string[]));\r\n        }\r\n    }\r\n\r\n    function asUint256(bytes memory bs) internal pure returns(uint256 x) {\r\n        if (bs.length >= 32) {\r\n            assembly {\r\n                x := mload(add(bs, add(0x20, 0)))\r\n            }\r\n        }\r\n    }\r\n\r\n    function asUint256Array(bytes memory b) internal pure returns(uint256[] memory callResult) {\r\n        if(b.length > 0) {\r\n            return abi.decode(b, (uint256[]));\r\n        }\r\n    }\r\n\r\n    function toString(bytes memory data) internal pure returns(string memory) {\r\n        bytes memory str = new bytes(2 + data.length * 2);\r\n        str[0] = \"0\";\r\n        str[1] = \"x\";\r\n        for (uint256 i = 0; i < data.length; i++) {\r\n            str[2+i*2] = ALPHABET[uint256(uint8(data[i] >> 4))];\r\n            str[3+i*2] = ALPHABET[uint256(uint8(data[i] & 0x0f))];\r\n        }\r\n        return string(str);\r\n    }\r\n\r\n    function asSingletonArray(bytes memory a) internal pure returns(bytes[] memory array) {\r\n        array = new bytes[](1);\r\n        array[0] = a;\r\n    }\r\n\r\n    function toBase64(bytes memory data) internal pure returns (string memory) {\r\n        if (data.length == 0) return '';\r\n\r\n        string memory table = BASE64_ENCODER_DATA;\r\n\r\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\r\n\r\n        string memory result = new string(encodedLen + 32);\r\n\r\n        assembly {\r\n            mstore(result, encodedLen)\r\n\r\n            let tablePtr := add(table, 1)\r\n\r\n            let dataPtr := data\r\n            let endPtr := add(dataPtr, mload(data))\r\n\r\n            let resultPtr := add(result, 32)\r\n\r\n            for {} lt(dataPtr, endPtr) {}\r\n            {\r\n                dataPtr := add(dataPtr, 3)\r\n                let input := mload(dataPtr)\r\n\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n            }\r\n\r\n            switch mod(mload(data), 3)\r\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\r\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nlibrary StringUtilities {\r\n\r\n    bytes1 private constant CHAR_0 = bytes1('0');\r\n    bytes1 private constant CHAR_A = bytes1('A');\r\n    bytes1 private constant CHAR_a = bytes1('a');\r\n    bytes1 private constant CHAR_f = bytes1('f');\r\n\r\n    bytes  internal constant BASE64_DECODER_DATA = hex\"0000000000000000000000000000000000000000000000000000000000000000\"\r\n                                                   hex\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\"\r\n                                                   hex\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\"\r\n                                                   hex\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\";\r\n\r\n    function isEmpty(string memory test) internal pure returns (bool) {\r\n        return equals(test, \"\");\r\n    }\r\n\r\n    function equals(string memory a, string memory b) internal pure returns(bool) {\r\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\r\n    }\r\n\r\n    function toLowerCase(string memory str) internal pure returns(string memory) {\r\n        bytes memory bStr = bytes(str);\r\n        for (uint256 i = 0; i < bStr.length; i++) {\r\n            bStr[i] = bStr[i] >= 0x41 && bStr[i] <= 0x5A ? bytes1(uint8(bStr[i]) + 0x20) : bStr[i];\r\n        }\r\n        return string(bStr);\r\n    }\r\n\r\n    function asBytes(string memory str) internal pure returns(bytes memory toDecode) {\r\n        bytes memory data = abi.encodePacked(str);\r\n        if(data.length == 0 || data[0] != \"0\" || (data[1] != \"x\" && data[1] != \"X\")) {\r\n            return \"\";\r\n        }\r\n        uint256 start = 2;\r\n        toDecode = new bytes((data.length - 2) / 2);\r\n\r\n        for(uint256 i = 0; i < toDecode.length; i++) {\r\n            toDecode[i] = bytes1(_fromHexChar(uint8(data[start++])) + _fromHexChar(uint8(data[start++])) * 16);\r\n        }\r\n    }\r\n\r\n    function toBase64(string memory input) internal pure returns(string memory) {\r\n        return BytesUtilities.toBase64(abi.encodePacked(input));\r\n    }\r\n\r\n    function fromBase64(string memory _data) internal pure returns (bytes memory) {\r\n        bytes memory data = bytes(_data);\r\n\r\n        if (data.length == 0) return new bytes(0);\r\n        require(data.length % 4 == 0, \"invalid base64 decoder input\");\r\n\r\n        bytes memory table = BASE64_DECODER_DATA;\r\n\r\n        uint256 decodedLen = (data.length / 4) * 3;\r\n\r\n        bytes memory result = new bytes(decodedLen + 32);\r\n\r\n        assembly {\r\n            let lastBytes := mload(add(data, mload(data)))\r\n            if eq(and(lastBytes, 0xFF), 0x3d) {\r\n                decodedLen := sub(decodedLen, 1)\r\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\r\n                    decodedLen := sub(decodedLen, 1)\r\n                }\r\n            }\r\n\r\n            mstore(result, decodedLen)\r\n\r\n            let tablePtr := add(table, 1)\r\n\r\n            let dataPtr := data\r\n            let endPtr := add(dataPtr, mload(data))\r\n\r\n            let resultPtr := add(result, 32)\r\n\r\n            for {} lt(dataPtr, endPtr) {}\r\n            {\r\n               dataPtr := add(dataPtr, 4)\r\n               let input := mload(dataPtr)\r\n\r\n               let output := add(\r\n                   add(\r\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\r\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\r\n                   add(\r\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\r\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\r\n                    )\r\n                )\r\n                mstore(resultPtr, shl(232, output))\r\n                resultPtr := add(resultPtr, 3)\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function _fromHexChar(uint8 c) private pure returns (uint8) {\r\n        bytes1 charc = bytes1(c);\r\n        return charc < CHAR_0 || charc > CHAR_f ? 0 : (charc < CHAR_A ? 0 : 10) + c - uint8(charc < CHAR_A ? CHAR_0 : charc < CHAR_a ? CHAR_A : CHAR_a);\r\n    }\r\n}\r\n\r\nlibrary Uint256Utilities {\r\n    function asSingletonArray(uint256 n) internal pure returns(uint256[] memory array) {\r\n        array = new uint256[](1);\r\n        array[0] = n;\r\n    }\r\n\r\n    function toHex(uint256 _i) internal pure returns (string memory) {\r\n        return BytesUtilities.toString(abi.encodePacked(_i));\r\n    }\r\n\r\n    function toString(uint256 _i) internal pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 j = _i;\r\n        uint256 len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint256 k = len;\r\n        while (_i != 0) {\r\n            k = k-1;\r\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\r\n            bytes1 b1 = bytes1(temp);\r\n            bstr[k] = b1;\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n    function sum(uint256[] memory arr) internal pure returns (uint256 result) {\r\n        for(uint256 i = 0; i < arr.length; i++) {\r\n            result += arr[i];\r\n        }\r\n    }\r\n}\r\n\r\nlibrary AddressUtilities {\r\n    function asSingletonArray(address a) internal pure returns(address[] memory array) {\r\n        array = new address[](1);\r\n        array[0] = a;\r\n    }\r\n\r\n    function toString(address _addr) internal pure returns (string memory) {\r\n        return _addr == address(0) ? \"0x0000000000000000000000000000000000000000\" : BytesUtilities.toString(abi.encodePacked(_addr));\r\n    }\r\n}\r\n\r\nlibrary Bytes32Utilities {\r\n\r\n    function asSingletonArray(bytes32 a) internal pure returns(bytes32[] memory array) {\r\n        array = new bytes32[](1);\r\n        array[0] = a;\r\n    }\r\n\r\n    function toString(bytes32 bt) internal pure returns (string memory) {\r\n        return bt == bytes32(0) ?  \"0x0000000000000000000000000000000000000000000000000000000000000000\" : BytesUtilities.toString(abi.encodePacked(bt));\r\n    }\r\n}\r\n\r\nlibrary TransferUtilities {\r\n    using ReflectionUtilities for address;\r\n\r\n    function balanceOf(address erc20TokenAddress, address account) internal view returns(uint256) {\r\n        if(erc20TokenAddress == address(0)) {\r\n            return account.balance;\r\n        }\r\n        return abi.decode(erc20TokenAddress.read(abi.encodeWithSelector(IERC20(erc20TokenAddress).balanceOf.selector, account)), (uint256));\r\n    }\r\n\r\n    function allowance(address erc20TokenAddress, address account, address spender) internal view returns(uint256) {\r\n        if(erc20TokenAddress == address(0)) {\r\n            return 0;\r\n        }\r\n        return abi.decode(erc20TokenAddress.read(abi.encodeWithSelector(IERC20(erc20TokenAddress).allowance.selector, account, spender)), (uint256));\r\n    }\r\n\r\n    function safeApprove(address erc20TokenAddress, address spender, uint256 value) internal {\r\n        bytes memory returnData = erc20TokenAddress.submit(0, abi.encodeWithSelector(IERC20(erc20TokenAddress).approve.selector, spender, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address erc20TokenAddress, address to, uint256 value) internal {\r\n        if(value == 0) {\r\n            return;\r\n        }\r\n        if(erc20TokenAddress == address(0)) {\r\n            to.submit(value, \"\");\r\n            return;\r\n        }\r\n        bytes memory returnData = erc20TokenAddress.submit(0, abi.encodeWithSelector(IERC20(erc20TokenAddress).transfer.selector, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address erc20TokenAddress, address from, address to, uint256 value) internal {\r\n        if(value == 0) {\r\n            return;\r\n        }\r\n        if(erc20TokenAddress == address(0)) {\r\n            to.submit(value, \"\");\r\n            return;\r\n        }\r\n        bytes memory returnData = erc20TokenAddress.submit(0, abi.encodeWithSelector(IERC20(erc20TokenAddress).transferFrom.selector, from, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFERFROM_FAILED');\r\n    }\r\n}\r\n// File: @ethereansos/covenants/contracts/farming/FarmDataRegular.sol\r\n\r\npragma solidity >=0.7.0;\r\n\r\nstruct FarmingPositionRequest {\r\n    uint256 setupIndex; // index of the chosen setup.\r\n    uint256 amount0; // amount of main token or liquidity pool token.\r\n    uint256 amount1; // amount of other token or liquidity pool token. Needed for gen2\r\n    address positionOwner; // position extension or address(0) [msg.sender].\r\n    uint256 amount0Min;\r\n    uint256 amount1Min;\r\n}\r\n\r\nstruct FarmingSetupConfiguration {\r\n    bool add; // true if we're adding a new setup, false we're updating it.\r\n    bool disable;\r\n    uint256 index; // index of the setup we're updating.\r\n    FarmingSetupInfo info; // data of the new or updated setup\r\n}\r\n\r\nstruct FarmingSetupInfo {\r\n    uint256 blockDuration; // duration of setup\r\n    uint256 startBlock; // optional start block used for the delayed activation of the first setup\r\n    uint256 originalRewardPerBlock;\r\n    uint256 minStakeable; // minimum amount of staking tokens.\r\n    uint256 renewTimes; // if the setup is renewable or if it's one time.\r\n    address liquidityPoolTokenAddress; // address of the liquidity pool token\r\n    address mainTokenAddress; // eg. buidl address.\r\n    bool involvingETH; // if the setup involves ETH or not.\r\n    uint256 setupsCount; // number of setups created by this info.\r\n    uint256 lastSetupIndex; // index of last setup;\r\n    int24 tickLower; // Gen2 Only - tickLower of the UniswapV3 pool\r\n    int24 tickUpper; // Gen 2 Only - tickUpper of the UniswapV3 pool\r\n}\r\n\r\nstruct FarmingSetup {\r\n    uint256 infoIndex; // setup info\r\n    bool active; // if the setup is active or not.\r\n    uint256 startBlock; // farming setup start block.\r\n    uint256 endBlock; // farming setup end block.\r\n    uint256 lastUpdateBlock; // number of the block where an update was triggered.\r\n    uint256 deprecatedObjectId; // need for gen2. uniswapV3 NFT position Id\r\n    uint256 rewardPerBlock; // farming setup reward per single block.\r\n    uint128 totalSupply; // Total LP token liquidity of all the positions of this setup\r\n}\r\n\r\nstruct FarmingPosition {\r\n    address uniqueOwner; // address representing the owner of the position.\r\n    uint256 setupIndex; // the setup index related to this position.\r\n    uint256 creationBlock; // block when this position was created.\r\n    uint256 tokenId; // amount of liquidity pool token in the position.\r\n    uint256 reward; // position reward.\r\n}\r\n// File: @ethereansos/covenants/contracts/farming/IFarmMainRegular.sol\r\n\r\npragma solidity >=0.7.0;\r\npragma abicoder v2;\r\n\r\n\r\ninterface IFarmMainRegular {\r\n\r\n    function ONE_HUNDRED() external view returns(uint256);\r\n    function _rewardTokenAddress() external view returns(address);\r\n    function position(uint256 positionId) external view returns (FarmingPosition memory);\r\n    function setups() external view returns (FarmingSetup[] memory);\r\n    function setup(uint256 setupIndex) external view returns (FarmingSetup memory, FarmingSetupInfo memory);\r\n    function setFarmingSetups(FarmingSetupConfiguration[] memory farmingSetups) external;\r\n    function openPosition(FarmingPositionRequest calldata request) external payable returns(uint256 positionId);\r\n    function addLiquidity(uint256 positionId, FarmingPositionRequest calldata request) external payable;\r\n}\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @ethereansos/swissknife/contracts/generic/model/ILazyInitCapableElement.sol\r\n\r\n\r\npragma solidity >=0.7.0;\r\n\r\n\r\ninterface ILazyInitCapableElement is IERC165 {\r\n\r\n    function lazyInit(bytes calldata lazyInitData) external returns(bytes memory initResponse);\r\n    function initializer() external view returns(address);\r\n\r\n    event Host(address indexed from, address indexed to);\r\n\r\n    function host() external view returns(address);\r\n    function setHost(address newValue) external returns(address oldValue);\r\n\r\n    function subjectIsAuthorizedFor(address subject, address location, bytes4 selector, bytes calldata payload, uint256 value) external view returns(bool);\r\n}\r\n// File: contracts/base/model/ITreasuryManager.sol\r\n\r\n\r\npragma solidity >=0.7.0;\r\n\r\n\r\ninterface ITreasuryManager is ILazyInitCapableElement {\r\n\r\n    struct TransferEntry {\r\n        address token;\r\n        uint256[] objectIds;\r\n        uint256[] values;\r\n        address receiver;\r\n        bool safe;\r\n        bool batch;\r\n        bool withData;\r\n        bytes data;\r\n    }\r\n\r\n    function transfer(address token, uint256 value, address receiver, uint256 tokenType, uint256 objectId, bool safe, bool withData, bytes calldata data) external returns(bool result, bytes memory returnData);\r\n    function batchTransfer(TransferEntry[] calldata transferEntries) external returns(bool[] memory results, bytes[] memory returnDatas);\r\n\r\n    function submit(address location, bytes calldata payload, address restReceiver) external payable returns(bytes memory response);\r\n\r\n    function setAdditionalFunction(bytes4 selector, address newServer, bool log) external returns (address oldServer);\r\n    event AdditionalFunction(address caller, bytes4 indexed selector, address indexed oldServer, address indexed newServer);\r\n}\r\n// File: contracts/base/model/IProposalsManager.sol\r\n\r\n\r\npragma solidity >=0.7.0;\r\n\r\n\r\n\r\ninterface IProposalsManager is IERC1155Receiver, ILazyInitCapableElement {\r\n\r\n    struct ProposalCode {\r\n        address location;\r\n        bytes bytecode;\r\n    }\r\n\r\n    struct ProposalCodes {\r\n        ProposalCode[] codes;\r\n        bool alsoTerminate;\r\n    }\r\n\r\n    struct Proposal {\r\n        address proposer;\r\n        address[] codeSequence;\r\n        uint256 creationBlock;\r\n        uint256 accept;\r\n        uint256 refuse;\r\n        address triggeringRules;\r\n        address[] canTerminateAddresses;\r\n        address[] validatorsAddresses;\r\n        bool validationPassed;\r\n        uint256 terminationBlock;\r\n        bytes votingTokens;\r\n    }\r\n\r\n    struct ProposalConfiguration {\r\n        address[] collections;\r\n        uint256[] objectIds;\r\n        uint256[] weights;\r\n        address creationRules;\r\n        address triggeringRules;\r\n        address[] canTerminateAddresses;\r\n        address[] validatorsAddresses;\r\n    }\r\n\r\n    function batchCreate(ProposalCodes[] calldata codeSequences) external returns(bytes32[] memory createdProposalIds);\r\n\r\n    function list(bytes32[] calldata proposalIds) external view returns(Proposal[] memory);\r\n\r\n    function votes(bytes32[] calldata proposalIds, address[] calldata voters, bytes32[][] calldata items) external view returns(uint256[][] memory accepts, uint256[][] memory refuses, uint256[][] memory toWithdraw);\r\n    function weight(bytes32 code) external view returns(uint256);\r\n\r\n    function vote(address erc20TokenAddress, bytes memory permitSignature, bytes32 proposalId, uint256 accept, uint256 refuse, address voter, bool alsoTerminate) external payable;\r\n    function batchVote(bytes[] calldata data) external payable;\r\n\r\n    function withdrawAll(bytes32[] memory proposalIds, address voterOrReceiver, bool afterTermination) external;\r\n\r\n    function terminate(bytes32[] calldata proposalIds) external;\r\n\r\n    function configuration() external view returns(ProposalConfiguration memory);\r\n    function setConfiguration(ProposalConfiguration calldata newValue) external returns(ProposalConfiguration memory oldValue);\r\n\r\n    function lastProposalId() external view returns(bytes32);\r\n\r\n    function lastVoteBlock(address voter) external view returns (uint256);\r\n\r\n    event ProposalCreated(address indexed proposer, address indexed code, bytes32 indexed proposalId);\r\n    event ProposalWeight(bytes32 indexed proposalId, address indexed collection, uint256 indexed id, bytes32 key, uint256 weight);\r\n    event ProposalTerminated(bytes32 indexed proposalId, bool result, bytes errorData);\r\n\r\n    event Accept(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\r\n    event MoveToAccept(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\r\n    event RetireAccept(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\r\n\r\n    event Refuse(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\r\n    event MoveToRefuse(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\r\n    event RetireRefuse(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\r\n}\r\n\r\ninterface IProposalChecker {\r\n    function check(address proposalsManagerAddress, bytes32 id, bytes calldata data, address from, address voter) external view returns(bool);\r\n}\r\n\r\ninterface IExternalProposalsManagerCommands {\r\n    function createProposalCodeSequence(bytes32 proposalId, IProposalsManager.ProposalCode[] memory codeSequenceInput, address sender) external returns (address[] memory codeSequence, IProposalsManager.ProposalConfiguration memory localConfiguration);\r\n    function proposalCanBeFinalized(bytes32 proposalId, IProposalsManager.Proposal memory proposal, bool validationPassed, bool result) external view returns (bool);\r\n    function isVotable(bytes32 proposalId, IProposalsManager.Proposal memory proposal, address from, address voter, bool voteOrWithtraw) external view returns (bytes memory response);\r\n}\r\n// File: contracts/base/model/IStateManager.sol\r\n\r\n\r\npragma solidity >=0.7.0;\r\n\r\n\r\ninterface IStateManager is ILazyInitCapableElement {\r\n\r\n    struct StateEntry {\r\n        string key;\r\n        bytes32 entryType;\r\n        bytes value;\r\n    }\r\n\r\n    function size() external view returns (uint256);\r\n    function all() external view returns (StateEntry[] memory);\r\n    function partialList(uint256 start, uint256 offset) external view returns (StateEntry[] memory);\r\n    function list(string[] calldata keys) external view returns (StateEntry[] memory);\r\n    function listByIndices(uint256[] calldata indices) external view returns (StateEntry[] memory);\r\n\r\n    function exists(string calldata key) external view returns(bool result, uint256 index);\r\n\r\n    function get(string calldata key) external view returns(StateEntry memory);\r\n    function getByIndex(uint256 index) external view returns(StateEntry memory);\r\n\r\n    function set(StateEntry calldata newValue) external returns(bytes memory replacedValue);\r\n    function batchSet(StateEntry[] calldata newValues) external returns(bytes[] memory replacedValues);\r\n\r\n    function remove(string calldata key) external returns(bytes32 removedType, bytes memory removedValue);\r\n    function batchRemove(string[] calldata keys) external returns(bytes32[] memory removedTypes, bytes[] memory removedValues);\r\n    function removeByIndices(uint256[] calldata indices) external returns(bytes32[] memory removedTypes, bytes[] memory removedValues);\r\n}\r\n// File: contracts/base/model/IMicroservicesManager.sol\r\n\r\n\r\npragma solidity >=0.7.0;\r\n\r\n\r\ninterface IMicroservicesManager is ILazyInitCapableElement {\r\n\r\n    struct Microservice {\r\n        string key;\r\n        address location;\r\n        string methodSignature;\r\n        bool submittable;\r\n        string returnAbiParametersArray;\r\n        bool isInternal;\r\n        bool needsSender;\r\n    }\r\n\r\n    function size() external view returns (uint256);\r\n    function all() external view returns (Microservice[] memory);\r\n    function partialList(uint256 start, uint256 offset) external view returns (Microservice[] memory);\r\n    function list(string[] calldata keys) external view returns (Microservice[] memory);\r\n    function listByIndices(uint256[] calldata indices) external view returns (Microservice[] memory);\r\n\r\n    function exists(string calldata key) external view returns(bool result, uint256 index);\r\n\r\n    function get(string calldata key) external view returns(Microservice memory);\r\n    function getByIndex(uint256 index) external view returns(Microservice memory);\r\n\r\n    function set(Microservice calldata newValue) external returns(Microservice memory replacedValue);\r\n    function batchSet(Microservice[] calldata newValues) external returns(Microservice[] memory replacedValues);\r\n\r\n    event MicroserviceAdded(address indexed sender, bytes32 indexed keyHash, string key, address indexed location, string methodSignature, bool submittable, string returnAbiParametersArray, bool isInternal, bool needsSender);\r\n\r\n    function remove(string calldata key) external returns(Microservice memory removedValue);\r\n    function batchRemove(string[] calldata keys) external returns(Microservice[] memory removedValues);\r\n    function removeByIndices(uint256[] calldata indices) external returns(Microservice[] memory removedValues);\r\n\r\n    event MicroserviceRemoved(address indexed sender, bytes32 indexed keyHash, string key, address indexed location, string methodSignature, bool submittable, string returnAbiParametersArray, bool isInternal, bool needsSender);\r\n\r\n    function read(string calldata key, bytes calldata data) external view returns(bytes memory returnData);\r\n    function submit(string calldata key, bytes calldata data) external payable returns(bytes memory returnData);\r\n}\r\n// File: @ethereansos/swissknife/contracts/dynamicMetadata/model/IDynamicMetadataCapableElement.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0;\r\n\r\n\r\ninterface IDynamicMetadataCapableElement is ILazyInitCapableElement {\r\n\r\n    function uri() external view returns(string memory);\r\n    function plainUri() external view returns(string memory);\r\n\r\n    function setUri(string calldata newValue) external returns (string memory oldValue);\r\n\r\n    function dynamicUriResolver() external view returns(address);\r\n    function setDynamicUriResolver(address newValue) external returns(address oldValue);\r\n}\r\n// File: contracts/core/model/IOrganization.sol\r\n\r\n\r\npragma solidity >=0.7.0;\r\n\r\n\r\ninterface IOrganization is IDynamicMetadataCapableElement {\r\n\r\n    struct Component {\r\n        bytes32 key;\r\n        address location;\r\n        bool active;\r\n        bool log;\r\n    }\r\n\r\n    function keyOf(address componentAddress) external view returns(bytes32);\r\n    function history(bytes32 key) external view returns(address[] memory componentsAddresses);\r\n    function batchHistory(bytes32[] calldata keys) external view returns(address[][] memory componentsAddresses);\r\n\r\n    function get(bytes32 key) external view returns(address componentAddress);\r\n    function list(bytes32[] calldata keys) external view returns(address[] memory componentsAddresses);\r\n    function isActive(address subject) external view returns(bool);\r\n    function keyIsActive(bytes32 key) external view returns(bool);\r\n\r\n    function set(Component calldata) external returns(address replacedComponentAddress);\r\n    function batchSet(Component[] calldata) external returns (address[] memory replacedComponentAddresses);\r\n\r\n    event ComponentSet(bytes32 indexed key, address indexed from, address indexed to, bool active);\r\n\r\n    function submit(address location, bytes calldata payload, address restReceiver) external payable returns(bytes memory response);\r\n}\r\n// File: contracts/base/lib/KnowledgeBase.sol\r\n\r\n\r\npragma solidity >=0.7.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary Grimoire {\r\n    bytes32 constant public COMPONENT_KEY_TREASURY_MANAGER = 0xcfe1633df53a0649d88d788961f26058c5e7a0b5644675f19f67bb2975827ba2;\r\n    bytes32 constant public COMPONENT_KEY_STATE_MANAGER = 0xd1d09e8f5708558865b8acd5f13c69781ae600e42dbc7f52b8ef1b9e33dbcd36;\r\n    bytes32 constant public COMPONENT_KEY_MICROSERVICES_MANAGER = 0x0aef4c8f864010d3e1817691f51ade95a646fffafd7f3df9cb8200def342cfd7;\r\n    bytes32 constant public COMPONENT_KEY_PROPOSALS_MANAGER = 0xa504406933af7ca120d20b97dfc79ea9788beb3c4d3ac1ff9a2c292b2c28e0cc;\r\n}\r\n\r\nlibrary Getters {\r\n\r\n    function treasuryManager(IOrganization organization) internal view returns(ITreasuryManager) {\r\n        return ITreasuryManager(organization.get(Grimoire.COMPONENT_KEY_TREASURY_MANAGER));\r\n    }\r\n\r\n    function stateManager(IOrganization organization) internal view returns(IStateManager) {\r\n        return IStateManager(organization.get(Grimoire.COMPONENT_KEY_STATE_MANAGER));\r\n    }\r\n\r\n    function microservicesManager(IOrganization organization) internal view returns(IMicroservicesManager) {\r\n        return IMicroservicesManager(organization.get(Grimoire.COMPONENT_KEY_MICROSERVICES_MANAGER));\r\n    }\r\n\r\n    function proposalsManager(IOrganization organization) internal view returns(IProposalsManager) {\r\n        return IProposalsManager(organization.get(Grimoire.COMPONENT_KEY_PROPOSALS_MANAGER));\r\n    }\r\n}\r\n\r\nlibrary Setters {\r\n\r\n    function replaceTreasuryManager(IOrganization organization, address newComponentAddress) internal returns(ITreasuryManager oldComponent) {\r\n        require(newComponentAddress != address(0), \"void\");\r\n        oldComponent = ITreasuryManager(organization.set(IOrganization.Component(Grimoire.COMPONENT_KEY_TREASURY_MANAGER, newComponentAddress, false, true)));\r\n    }\r\n\r\n    function replaceStateManager(IOrganization organization, address newComponentAddress) internal returns(IStateManager oldComponent) {\r\n        require(newComponentAddress != address(0), \"void\");\r\n        oldComponent = IStateManager(organization.set(IOrganization.Component(Grimoire.COMPONENT_KEY_STATE_MANAGER, newComponentAddress, false ,true)));\r\n    }\r\n\r\n    function replaceMicroservicesManager(IOrganization organization, address newComponentAddress) internal returns(IMicroservicesManager oldComponent) {\r\n        require(newComponentAddress != address(0), \"void\");\r\n        oldComponent = IMicroservicesManager(organization.set(IOrganization.Component(Grimoire.COMPONENT_KEY_MICROSERVICES_MANAGER, newComponentAddress, true, true)));\r\n    }\r\n\r\n    function replaceProposalsManager(IOrganization organization, address newComponentAddress) internal returns(IProposalsManager oldComponent) {\r\n        require(newComponentAddress != address(0), \"void\");\r\n        oldComponent = IProposalsManager(organization.set(IOrganization.Component(Grimoire.COMPONENT_KEY_PROPOSALS_MANAGER, newComponentAddress, true, true)));\r\n    }\r\n}\r\n\r\nlibrary Treasury {\r\n    using ReflectionUtilities for address;\r\n\r\n    function storeETH(IOrganization organization, uint256 value) internal {\r\n        if(value != 0) {\r\n            organization.get(Grimoire.COMPONENT_KEY_TREASURY_MANAGER).submit(value, \"\");\r\n        }\r\n    }\r\n\r\n    function callTemporaryFunction(ITreasuryManager treasuryManager, bytes4 selector, address subject, uint256 value, bytes memory data) internal returns(bytes memory response) {\r\n        address oldServer = treasuryManager.setAdditionalFunction(selector, subject, false);\r\n        response = address(treasuryManager).submit(value, abi.encodePacked(selector, data));\r\n        treasuryManager.setAdditionalFunction(selector, oldServer, false);\r\n    }\r\n}\r\n\r\nlibrary State {\r\n    using BytesUtilities for bytes;\r\n\r\n    bytes32 constant public ENTRY_TYPE_ADDRESS = 0x421683f821a0574472445355be6d2b769119e8515f8376a1d7878523dfdecf7b;\r\n    bytes32 constant public ENTRY_TYPE_ADDRESS_ARRAY = 0x23d8ff3dc5aed4a634bcf123581c95e70c60ac0e5246916790aef6d4451ff4c1;\r\n    bytes32 constant public ENTRY_TYPE_BOOL = 0xc1053bdab4a5cf55238b667c39826bbb11a58be126010e7db397c1b67c24271b;\r\n    bytes32 constant public ENTRY_TYPE_BOOL_ARRAY = 0x8761250c4d2c463ce51f91f5d2c2508fa9142f8a42aa9f30b965213bf3e6c2ac;\r\n    bytes32 constant public ENTRY_TYPE_BYTES = 0xb963e9b45d014edd60cff22ec9ad383335bbc3f827be2aee8e291972b0fadcf2;\r\n    bytes32 constant public ENTRY_TYPE_BYTES_ARRAY = 0x084b42f8a8730b98eb0305d92103d9107363192bb66162064a34dc5716ebe1a0;\r\n    bytes32 constant public ENTRY_TYPE_STRING = 0x97fc46276c172633607a331542609db1e3da793fca183d594ed5a61803a10792;\r\n    bytes32 constant public ENTRY_TYPE_STRING_ARRAY = 0xa227fd7a847724343a7dda3598ee0fb2d551b151b73e4a741067596daa6f5658;\r\n    bytes32 constant public ENTRY_TYPE_UINT256 = 0xec13d6d12b88433319b64e1065a96ea19cd330ef6603f5f6fb685dde3959a320;\r\n    bytes32 constant public ENTRY_TYPE_UINT256_ARRAY = 0xc1b76e99a35aa41ed28bbbd9e6c7228760c87b410ebac94fa6431da9b592411f;\r\n\r\n    function getAddress(IStateManager stateManager, string memory name) internal view returns(address) {\r\n        return stateManager.get(name).value.asAddress();\r\n    }\r\n\r\n    function setAddress(IStateManager stateManager, string memory name, address val) internal returns(address oldValue) {\r\n        return stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_ADDRESS, abi.encodePacked(val))).asAddress();\r\n    }\r\n\r\n    function getAddressArray(IStateManager stateManager, string memory name) internal view returns(address[] memory) {\r\n        return stateManager.get(name).value.asAddressArray();\r\n    }\r\n\r\n    function setAddressArray(IStateManager stateManager, string memory name, address[] memory val) internal returns(address[] memory oldValue) {\r\n        return stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_ADDRESS_ARRAY, abi.encode(val))).asAddressArray();\r\n    }\r\n\r\n    function getBool(IStateManager stateManager, string memory name) internal view returns(bool) {\r\n        return stateManager.get(name).value.asBool();\r\n    }\r\n\r\n    function setBool(IStateManager stateManager, string memory name, bool val) internal returns(bool oldValue) {\r\n        return stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_BOOL, abi.encode(val ? 1 : 0))).asBool();\r\n    }\r\n\r\n    function getBoolArray(IStateManager stateManager, string memory name) internal view returns(bool[] memory) {\r\n        return stateManager.get(name).value.asBoolArray();\r\n    }\r\n\r\n    function setBoolArray(IStateManager stateManager, string memory name, bool[] memory val) internal returns(bool[] memory oldValue) {\r\n        return stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_BOOL_ARRAY, abi.encode(val))).asBoolArray();\r\n    }\r\n\r\n    function getBytes(IStateManager stateManager, string memory name) internal view returns(bytes memory) {\r\n        return stateManager.get(name).value;\r\n    }\r\n\r\n    function setBytes(IStateManager stateManager, string memory name, bytes memory val) internal returns(bytes memory oldValue) {\r\n        return stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_BYTES, val));\r\n    }\r\n\r\n    function getBytesArray(IStateManager stateManager, string memory name) internal view returns(bytes[] memory) {\r\n        return stateManager.get(name).value.asBytesArray();\r\n    }\r\n\r\n    function setBytesArray(IStateManager stateManager, string memory name, bytes[] memory val) internal returns(bytes[] memory oldValue) {\r\n        return stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_BYTES_ARRAY, abi.encode(val))).asBytesArray();\r\n    }\r\n\r\n    function getString(IStateManager stateManager, string memory name) internal view returns(string memory) {\r\n        return string(stateManager.get(name).value);\r\n    }\r\n\r\n    function setString(IStateManager stateManager, string memory name, string memory val) internal returns(string memory oldValue) {\r\n        return string(stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_STRING, bytes(val))));\r\n    }\r\n\r\n    function getStringArray(IStateManager stateManager, string memory name) internal view returns(string[] memory) {\r\n        return stateManager.get(name).value.asStringArray();\r\n    }\r\n\r\n    function setStringArray(IStateManager stateManager, string memory name, string[] memory val) internal returns(string[] memory oldValue) {\r\n        return stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_STRING_ARRAY, abi.encode(val))).asStringArray();\r\n    }\r\n\r\n    function getUint256(IStateManager stateManager, string memory name) internal view returns(uint256) {\r\n        return stateManager.get(name).value.asUint256();\r\n    }\r\n\r\n    function setUint256(IStateManager stateManager, string memory name, uint256 val) internal returns(uint256 oldValue) {\r\n        return stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_UINT256, abi.encode(val))).asUint256();\r\n    }\r\n\r\n    function getUint256Array(IStateManager stateManager, string memory name) internal view returns(uint256[] memory) {\r\n        return stateManager.get(name).value.asUint256Array();\r\n    }\r\n\r\n    function setUint256Array(IStateManager stateManager, string memory name, uint256[] memory val) internal returns(uint256[] memory oldValue) {\r\n        return stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_UINT256_ARRAY, abi.encode(val))).asUint256Array();\r\n    }\r\n}\r\n// File: @ethereansos/swissknife/contracts/generic/impl/LazyInitCapableElement.sol\r\n\r\n\r\npragma solidity >=0.7.0;\r\n\r\n\r\n\r\nabstract contract LazyInitCapableElement is ILazyInitCapableElement {\r\n    using ReflectionUtilities for address;\r\n\r\n    address public override initializer;\r\n    address public override host;\r\n\r\n    constructor(bytes memory lazyInitData) {\r\n        if(lazyInitData.length > 0) {\r\n            _privateLazyInit(lazyInitData);\r\n        }\r\n    }\r\n\r\n    function lazyInit(bytes calldata lazyInitData) override external returns (bytes memory lazyInitResponse) {\r\n        return _privateLazyInit(lazyInitData);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) override external view returns(bool) {\r\n        return\r\n            interfaceId == type(IERC165).interfaceId ||\r\n            interfaceId == this.supportsInterface.selector ||\r\n            interfaceId == type(ILazyInitCapableElement).interfaceId ||\r\n            interfaceId == this.lazyInit.selector ||\r\n            interfaceId == this.initializer.selector ||\r\n            interfaceId == this.subjectIsAuthorizedFor.selector ||\r\n            interfaceId == this.host.selector ||\r\n            interfaceId == this.setHost.selector ||\r\n            _supportsInterface(interfaceId);\r\n    }\r\n\r\n    function setHost(address newValue) external override authorizedOnly returns(address oldValue) {\r\n        oldValue = host;\r\n        host = newValue;\r\n        emit Host(oldValue, newValue);\r\n    }\r\n\r\n    function subjectIsAuthorizedFor(address subject, address location, bytes4 selector, bytes calldata payload, uint256 value) public override virtual view returns(bool) {\r\n        (bool chidlElementValidationIsConsistent, bool chidlElementValidationResult) = _subjectIsAuthorizedFor(subject, location, selector, payload, value);\r\n        if(chidlElementValidationIsConsistent) {\r\n            return chidlElementValidationResult;\r\n        }\r\n        if(subject == host) {\r\n            return true;\r\n        }\r\n        if(!host.isContract()) {\r\n            return false;\r\n        }\r\n        (bool result, bytes memory resultData) = host.staticcall(abi.encodeWithSelector(ILazyInitCapableElement(host).subjectIsAuthorizedFor.selector, subject, location, selector, payload, value));\r\n        return result && abi.decode(resultData, (bool));\r\n    }\r\n\r\n    function _privateLazyInit(bytes memory lazyInitData) private returns (bytes memory lazyInitResponse) {\r\n        require(initializer == address(0), \"init\");\r\n        initializer = msg.sender;\r\n        (host, lazyInitResponse) = abi.decode(lazyInitData, (address, bytes));\r\n        emit Host(address(0), host);\r\n        lazyInitResponse = _lazyInit(lazyInitResponse);\r\n    }\r\n\r\n    function _lazyInit(bytes memory) internal virtual returns (bytes memory) {\r\n        return \"\";\r\n    }\r\n\r\n    function _supportsInterface(bytes4 selector) internal virtual view returns (bool);\r\n\r\n    function _subjectIsAuthorizedFor(address, address, bytes4, bytes calldata, uint256) internal virtual view returns(bool, bool) {\r\n    }\r\n\r\n    modifier authorizedOnly {\r\n        require(_authorizedOnly(), \"unauthorized\");\r\n        _;\r\n    }\r\n\r\n    function _authorizedOnly() internal returns(bool) {\r\n        return subjectIsAuthorizedFor(msg.sender, address(this), msg.sig, msg.data, msg.value);\r\n    }\r\n}\r\n// File: contracts/ext/util/IFarmingExtensionRegular.sol\r\n\r\n\r\npragma solidity >=0.7.0;\r\n\r\n\r\n\r\ninterface IFarmingExtensionRegular is ILazyInitCapableElement {\r\n\r\n    function init(bool byMint, address host, address treasury) external;\r\n\r\n    function setTreasury(address treasury) external;\r\n\r\n    function data() external view returns(address farmMainContract, bool byMint, address host, address treasury, address rewardTokenAddress);\r\n\r\n    function transferTo(uint256 amount) external;\r\n\r\n    function backToYou(uint256 amount) external payable;\r\n\r\n    function setFarmingSetups(FarmingSetupConfiguration[] memory farmingSetups) external;\r\n}\r\n// File: contracts/ext/modelBasedFarmingManager/model/IModelBasedFarmingManager.sol\r\n\r\n\r\npragma solidity >=0.7.0;\r\n\r\n\r\n\r\ninterface IModelBasedFarmingManager is ILazyInitCapableElement, IFarmingExtensionRegular {\r\n\r\n    function executorRewardPercentage() external view returns(uint256);\r\n\r\n    function setExecutorRewardPercentage(uint256 newValue) external returns(uint256 oldValue);\r\n\r\n    function reservedBalance() external view returns (uint256);\r\n\r\n    function lastRebalanceBlock() external view returns (uint256);\r\n\r\n    function rebalanceInterval() external view returns (uint256);\r\n\r\n    function nextRebalanceBlock() external view returns (uint256);\r\n\r\n    function models() external view returns(FarmingSetupInfo[] memory farmingSetups, uint256[] memory rebalancePercentages);\r\n\r\n    function flushBackToTreasury(address[] calldata tokenAddresses) external;\r\n\r\n    function rebalanceRewardsPerBlock(address executorRewardReceiver) external;\r\n}\r\n// File: contracts/ext/modelBasedFarmingManager/impl/ModelBasedFarmingManager.sol\r\n\r\n\r\npragma solidity >=0.7.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ModelBasedFarmingManager is IModelBasedFarmingManager, LazyInitCapableElement {\r\n    using Getters for IOrganization;\r\n    using TransferUtilities for address;\r\n\r\n    uint256 private constant ONE_HUNDRED = 1e18;\r\n\r\n    uint256 public override executorRewardPercentage;\r\n\r\n    bytes32 private _flushKey;\r\n\r\n    FarmingSetupInfo[] private _models;\r\n    uint256[] private _rebalancePercentages;\r\n\r\n    address private _farmingContract;\r\n\r\n    address private _rewardTokenAddress;\r\n\r\n    uint256 public override lastRebalanceBlock;\r\n    uint256 public override rebalanceInterval;\r\n\r\n    uint256 public override reservedBalance;\r\n\r\n    modifier farmingOnly() {\r\n        require(msg.sender == _farmingContract, \"Unauthorized\");\r\n        _;\r\n    }\r\n\r\n    constructor(bytes memory lazyInitData) LazyInitCapableElement(lazyInitData) {\r\n    }\r\n\r\n    function _lazyInit(bytes memory lazyInitData) internal override returns(bytes memory) {\r\n        uint256 firstRebalanceBlock;\r\n        uint256 _rebalanceInterval;\r\n\r\n        FarmingSetupInfo[] memory infoModels;\r\n        (_flushKey, executorRewardPercentage, infoModels, _rebalancePercentages, firstRebalanceBlock, _rebalanceInterval) = abi.decode(lazyInitData, (bytes32, uint256, FarmingSetupInfo[], uint256[], uint256, uint256));\r\n\r\n        for(uint256 i = 0; i < infoModels.length; i++) {\r\n            _models.push(infoModels[i]);\r\n        }\r\n\r\n        if((rebalanceInterval = _rebalanceInterval) > 0) {\r\n            if(firstRebalanceBlock != 0 && _rebalanceInterval < firstRebalanceBlock) {\r\n                lastRebalanceBlock = firstRebalanceBlock - _rebalanceInterval;\r\n            }\r\n        }\r\n        _rewardTokenAddress = IFarmMainRegular(_farmingContract = msg.sender)._rewardTokenAddress();\r\n        _setModels(_models, _rebalancePercentages);\r\n        return \"\";\r\n    }\r\n\r\n    receive() external payable {\r\n        require (_rewardTokenAddress == address(0));\r\n    }\r\n\r\n    function _supportsInterface(bytes4 interfaceId) override internal pure returns(bool) {\r\n        return\r\n            interfaceId == type(IFarmingExtensionRegular).interfaceId ||\r\n            interfaceId == this.init.selector ||\r\n            interfaceId == this.setTreasury.selector ||\r\n            interfaceId == this.data.selector ||\r\n            interfaceId == this.transferTo.selector ||\r\n            interfaceId == this.backToYou.selector ||\r\n            interfaceId == this.setFarmingSetups.selector ||\r\n            interfaceId == type(IModelBasedFarmingManager).interfaceId ||\r\n            interfaceId == this.reservedBalance.selector ||\r\n            interfaceId == this.lastRebalanceBlock.selector ||\r\n            interfaceId == this.rebalanceInterval.selector ||\r\n            interfaceId == this.nextRebalanceBlock.selector ||\r\n            interfaceId == this.models.selector ||\r\n            interfaceId == this.flushBackToTreasury.selector ||\r\n            interfaceId == this.rebalanceRewardsPerBlock.selector;\r\n    }\r\n\r\n    function init(bool, address, address) external override {\r\n        revert(\"Impossibru!\");\r\n    }\r\n\r\n    function setTreasury(address) external override authorizedOnly {\r\n        revert(\"Impossibru!\");\r\n    }\r\n\r\n    function data() view public virtual override returns(address farmingContract, bool byMint, address _host, address treasury, address rewardTokenAddress) {\r\n        return (_farmingContract, false, host, address(IOrganization(host).treasuryManager()), _rewardTokenAddress);\r\n    }\r\n\r\n    function transferTo(uint256 amount) external override farmingOnly {\r\n        reservedBalance -= amount;\r\n        _rewardTokenAddress.safeTransfer(_farmingContract, amount);\r\n    }\r\n\r\n    function backToYou(uint256 amount) payable external override farmingOnly {\r\n        if(_rewardTokenAddress != address(0)) {\r\n            return _rewardTokenAddress.safeTransferFrom(msg.sender, address(this), amount);\r\n        }\r\n        require(msg.value == amount, \"invalid sent amount\");\r\n    }\r\n\r\n    function setFarmingSetups(FarmingSetupConfiguration[] memory farmingSetups) external override authorizedOnly {\r\n        IFarmMainRegular(_farmingContract).setFarmingSetups(farmingSetups);\r\n    }\r\n\r\n    function setExecutorRewardPercentage(uint256 newValue) external override authorizedOnly returns(uint256 oldValue) {\r\n        oldValue = executorRewardPercentage;\r\n        executorRewardPercentage = newValue;\r\n    }\r\n\r\n    function nextRebalanceBlock() public override view returns (uint256) {\r\n        return lastRebalanceBlock == 0 || rebalanceInterval == 0 ? 0 : (lastRebalanceBlock + rebalanceInterval);\r\n    }\r\n\r\n    function models() external override view returns(FarmingSetupInfo[] memory, uint256[] memory) {\r\n        return (_models, _rebalancePercentages);\r\n    }\r\n\r\n    function flushBackToTreasury(address[] calldata tokenAddresses) external override authorizedOnly {\r\n        address to = _flushBackReceiver();\r\n        for(uint256 i = 0; i < tokenAddresses.length; i++) {\r\n            address tokenAddress = tokenAddresses[i];\r\n            uint256 balance = tokenAddress.balanceOf(address(this));\r\n            if(balance > 0) {\r\n                tokenAddress.safeTransfer(to, balance);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _flushBackReceiver() private view returns(address to) {\r\n        if(_flushKey != bytes32(0)) {\r\n            to = address(IOrganization(host).get(_flushKey));\r\n        }\r\n        to = to != address(0) ? to : address(IOrganization(host).treasuryManager());\r\n    }\r\n\r\n    function rebalanceRewardsPerBlock(address executorRewardReceiver) external override {\r\n        require(block.number >= nextRebalanceBlock(), \"Too early BRO\");\r\n        lastRebalanceBlock = block.number;\r\n\r\n        uint256 actualBalance = _rewardTokenAddress.balanceOf(address(this));\r\n\r\n        require(actualBalance > 0, \"no balance\");\r\n\r\n        uint256 balance = actualBalance < reservedBalance ? 0 : actualBalance - reservedBalance;\r\n\r\n        require(balance > 0, \"No balance!\");\r\n\r\n        if(executorRewardPercentage > 0) {\r\n            address to = executorRewardReceiver == address(0) ? msg.sender : executorRewardReceiver;\r\n            uint256 executorRewardFee = _calculatePercentage(balance, executorRewardPercentage);\r\n            _rewardTokenAddress.safeTransfer(to, executorRewardFee);\r\n            balance -= executorRewardFee;\r\n        }\r\n\r\n        reservedBalance += balance;\r\n\r\n        uint256 remainingBalance = balance;\r\n        uint256 currentReward = 0;\r\n        FarmingSetupConfiguration[] memory farmingSetups = new FarmingSetupConfiguration[](_models.length);\r\n        uint256 i;\r\n        for(i = 0; i < _rebalancePercentages.length; i++) {\r\n            require((_models[i].originalRewardPerBlock = (currentReward = _calculatePercentage(balance, _rebalancePercentages[i])) / _models[i].blockDuration) > 0, \"zero reward\");\r\n            require(currentReward < remainingBalance && currentReward < balance, \"overflow\");\r\n            remainingBalance -= currentReward;\r\n            farmingSetups[i] = FarmingSetupConfiguration(\r\n                true,\r\n                false,\r\n                0,\r\n                _models[i]\r\n            );\r\n        }\r\n        i = _rebalancePercentages.length;\r\n        _models[i].originalRewardPerBlock = remainingBalance / _models[i].blockDuration;\r\n        farmingSetups[i] = FarmingSetupConfiguration(\r\n            true,\r\n            false,\r\n            0,\r\n            _models[i]\r\n        );\r\n        IFarmMainRegular(_farmingContract).setFarmingSetups(farmingSetups);\r\n    }\r\n\r\n    function _setModels(FarmingSetupInfo[] memory farmingSetups, uint256[] memory rebalancePercentages) private returns(FarmingSetupInfo[] memory oldFarmingSetups, uint256[] memory oldRebalancePercentages) {\r\n        require(farmingSetups.length > 0 && (farmingSetups.length - 1) == _rebalancePercentages.length, \"Invalid data\");\r\n        oldFarmingSetups = _models;\r\n        oldRebalancePercentages = _rebalancePercentages;\r\n        delete _rebalancePercentages;\r\n        delete _models;\r\n        uint256 percentage = 0;\r\n        for(uint256 i = 0; i < rebalancePercentages.length; i++) {\r\n            farmingSetups[i].renewTimes = 0;\r\n            _models.push(farmingSetups[i]);\r\n            percentage += rebalancePercentages[i];\r\n            _rebalancePercentages.push(rebalancePercentages[i]);\r\n        }\r\n        farmingSetups[farmingSetups.length - 1].renewTimes = 0;\r\n        _models.push(farmingSetups[farmingSetups.length - 1]);\r\n        require(percentage < ONE_HUNDRED, \"More than one hundred\");\r\n    }\r\n\r\n    function _calculatePercentage(uint256 totalSupply, uint256 percentage) private pure returns(uint256) {\r\n        return (totalSupply * ((percentage * 1e18) / ONE_HUNDRED)) / 1e18;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"lazyInitData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Host\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"backToYou\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"farmingContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"byMint\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_host\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executorRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"}],\"name\":\"flushBackToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"host\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebalanceBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"lazyInitData\",\"type\":\"bytes\"}],\"name\":\"lazyInit\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"lazyInitResponse\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"models\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"blockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalRewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakeable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renewTimes\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"liquidityPoolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mainTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"involvingETH\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"setupsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSetupIndex\",\"type\":\"uint256\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"internalType\":\"struct FarmingSetupInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRebalanceBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executorRewardReceiver\",\"type\":\"address\"}],\"name\":\"rebalanceRewardsPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setExecutorRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"disable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"blockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalRewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakeable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renewTimes\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"liquidityPoolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mainTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"involvingETH\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"setupsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSetupIndex\",\"type\":\"uint256\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"internalType\":\"struct FarmingSetupInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"internalType\":\"struct FarmingSetupConfiguration[]\",\"name\":\"farmingSetups\",\"type\":\"tuple[]\"}],\"name\":\"setFarmingSetups\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setHost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"location\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"subjectIsAuthorizedFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ModelBasedFarmingManager","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8a1e237207eb49d438db7147965ed108daa63346d0a7055dac759b75ffb45e2b"}]}