{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/lowesyang/Documents/Byterum/Products/NFT-GO/moonlight/erc721-contract/contracts/NFT721Enumerable.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n\\nimport \\\"./NFT721Basic.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev Optional enumeration implementation for ERC-721 non-fungible token standard.\\n */\\ncontract NFT721Enumerable is NFT721Basic, ERC721Enumerable {\\n    /**\\n     * @dev Contract constructor.\\n     */\\n    constructor(string memory name, string memory symbol)\\n        public\\n        NFT721Basic(name, symbol)\\n    {\\n        supportedInterfaces[0x780e9d63] = true; // ERC721Enumerable\\n    }\\n\\n    /**\\n     * @dev Returns the count of all existing NFTokens.\\n     * @return Total supply of NFTs.\\n     */\\n    function totalSupply() external view override returns (uint256) {\\n        return tokens.length;\\n    }\\n\\n    /**\\n     * @dev Returns NFT ID by its index.\\n     * @param _index A counter less than `totalSupply()`.\\n     * @return Token id.\\n     */\\n    function tokenByIndex(uint256 _index)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(_index < tokens.length, \\\"invalid index\\\");\\n        return tokens[_index];\\n    }\\n\\n    /**\\n     * @dev returns the n-th NFT ID from a list of owner's tokens.\\n     * @param _owner Token owner's address.\\n     * @param _index Index number representing n-th token in owner's list of tokens.\\n     * @return Token id.\\n     */\\n    function tokenOfOwnerByIndex(address _owner, uint256 _index)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(_index < ownerToIds[_owner].length, \\\"invalid index\\\");\\n        return ownerToIds[_owner][_index];\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/lowesyang/Documents/Byterum/Products/NFT-GO/moonlight/erc721-contract/contracts/utils/support-interface.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of standard for detect smart contract interfaces.\\n */\\ncontract SupportsInterface is ERC165 {\\n    /**\\n     * @dev Mapping of supported intefraces.\\n     * @notice You must not set element 0xffffffff to true.\\n     */\\n    mapping(bytes4 => bool) internal supportedInterfaces;\\n\\n    /**\\n     * @dev Contract constructor.\\n     */\\n    constructor() public {\\n        supportedInterfaces[0x01ffc9a7] = true; // ERC165\\n    }\\n\\n    /**\\n     * @dev Function to check which interfaces are suported by this contract.\\n     * @param _interfaceID Id of the interface.\\n     * @return True if _interfaceID is supported, false otherwise.\\n     */\\n    function supportsInterface(bytes4 _interfaceID)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return supportedInterfaces[_interfaceID];\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/lowesyang/Documents/Byterum/Products/NFT-GO/moonlight/erc721-contract/contracts/utils/safe-math.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/lowesyang/Documents/Byterum/Products/NFT-GO/moonlight/erc721-contract/contracts/utils/address.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/lowesyang/Documents/Byterum/Products/NFT-GO/moonlight/erc721-contract/contracts/utils/ERC165.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n\\ninterface ERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/Users/lowesyang/Documents/Byterum/Products/NFT-GO/moonlight/erc721-contract/contracts/NFT721Basic.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n\\nimport \\\"./utils/ERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721TokenReceiver.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./utils/support-interface.sol\\\";\\nimport \\\"./utils/address.sol\\\";\\nimport \\\"./utils/safe-math.sol\\\";\\n\\n/**\\n * @dev Implementation of ERC-721 non-fungible token standard.\\n */\\ncontract NFT721Basic is\\n    ERC721,\\n    ERC721Metadata,\\n    ERC721TokenReceiver,\\n    SupportsInterface\\n{\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    /**\\n     * @dev Magic value of a smart contract that can recieve NFT.\\n     * Equal to: bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\")).\\n     */\\n    bytes4 internal constant MAGIC_ON_ERC721_RECEIVED = 0x150b7a02;\\n\\n    /**\\n     * @dev An abbreviated name for NFTokens.\\n     */\\n    string internal _symbol;\\n\\n    /**\\n     * @dev A descriptive name for a collection of NFTs.\\n     */\\n    string internal _name;\\n\\n    /**\\n     * @dev Count avaiable token id, auto increment.\\n     */\\n    uint256 internal _availableId = 0;\\n\\n    /**\\n     * @dev Array of all NFT IDs.\\n     */\\n    uint256[] public tokens;\\n\\n    /**\\n     * @dev Contract owner\\n     */\\n    address internal root;\\n\\n    /**\\n     * @dev Mapping from token ID to its index in global tokens array.\\n     */\\n    mapping(uint256 => uint256) internal idToIndex;\\n\\n    /**\\n     * @dev Mapping from NFT ID to metadata uri.\\n     */\\n    mapping(uint256 => string) internal idToUri;\\n\\n    /**\\n     * @dev A mapping from NFT ID to the address that owns it.\\n     */\\n    mapping(uint256 => address) internal idToOwner;\\n\\n    /**\\n     * @dev Mapping from owner to list of owned NFT IDs.\\n     */\\n    mapping(address => uint256[]) internal ownerToIds;\\n\\n    /**\\n     * @dev Mapping from NFT ID to its index in the owner tokens list.\\n     */\\n    mapping(uint256 => uint256) internal idToOwnerIndex;\\n\\n    /**\\n     * @dev Mapping from NFT ID to approved address.\\n     */\\n    mapping(uint256 => address) internal idToApproval;\\n\\n    /**\\n     * @dev Mapping from owner address to mapping of operator addresses.\\n     */\\n    mapping(address => mapping(address => bool)) internal ownerToOperators;\\n\\n    /**\\n     * @dev Guarantees that the msg.sender is an owner or operator of the given NFT.\\n     * @param _tokenId ID of the NFT to validate.\\n     */\\n    modifier canOperate(uint256 _tokenId) {\\n        address tokenOwner = idToOwner[_tokenId];\\n        require(\\n            tokenOwner == msg.sender ||\\n                ownerToOperators[tokenOwner][msg.sender],\\n            \\\"not owner or operator\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Guarantees that the msg.sender is allowed to transfer NFT.\\n     * @param _tokenId ID of the NFT to transfer.\\n     */\\n    modifier canTransfer(uint256 _tokenId) {\\n        address tokenOwner = idToOwner[_tokenId];\\n        require(\\n            tokenOwner == msg.sender ||\\n                idToApproval[_tokenId] == msg.sender ||\\n                ownerToOperators[tokenOwner][msg.sender],\\n            \\\"not owner approved or operator\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Guarantees that _tokenId is a valid Token.\\n     * @param _tokenId ID of the NFT to validate.\\n     */\\n    modifier validNFToken(uint256 _tokenId) {\\n        require(idToOwner[_tokenId] != address(0), \\\"not valid nft\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Guarantees that sender is the root account.\\n     */\\n    modifier onlyRoot() {\\n        require(msg.sender == root, \\\"should be root account\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Contract constructor.\\n     */\\n    constructor(string memory name, string memory symbol) public {\\n        supportedInterfaces[0x80ac58cd] = true; // ERC721\\n        supportedInterfaces[0x5b5e139f] = true; // ERC721Metadata\\n        supportedInterfaces[0x150b7a02] = true; // ERC721TokenReceiver\\n        _name = name;\\n        _symbol = symbol;\\n        root = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Transfers the ownership of an NFT from one address to another address. This function can\\n     * be changed to payable.\\n     * @notice Throws unless `msg.sender` is the current owner, an authorized operator, or the\\n     * approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\\n     * the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\\n     * function checks if `_to` is a smart contract (code size > 0). If so, it calls\\n     * `onERC721Received` on `_to` and throws if the return value is not\\n     * `bytes4(keccak256(\\\"onERC721Received(address,uint256,bytes)\\\"))`.\\n     * @param _from The current owner of the NFT.\\n     * @param _to The new owner.\\n     * @param _tokenId The NFT to transfer.\\n     * @param _data Additional data with no specified format, sent in call to `_to`.\\n     */\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes calldata _data\\n    ) external override {\\n        _safeTransferFrom(_from, _to, _tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Transfers the ownership of an NFT from one address to another address. This function can\\n     * be changed to payable.\\n     * @notice This works identically to the other function with an extra data parameter, except this\\n     * function just sets data to \\\"\\\"\\n     * @param _from The current owner of the NFT.\\n     * @param _to The new owner.\\n     * @param _tokenId The NFT to transfer.\\n     */\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external override {\\n        _safeTransferFrom(_from, _to, _tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\\n     * address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\\n     * address. Throws if `_tokenId` is not a valid NFT. This function can be changed to payable.\\n     * @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\\n     * they maybe be permanently lost.\\n     * @param _from The current owner of the NFT.\\n     * @param _to The new owner.\\n     * @param _tokenId The NFT to transfer.\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external override canTransfer(_tokenId) validNFToken(_tokenId) {\\n        address tokenOwner = idToOwner[_tokenId];\\n        require(tokenOwner == _from, \\\"not owner\\\");\\n        require(_to != address(0), \\\"zero address\\\");\\n\\n        _transfer(_to, _tokenId);\\n    }\\n\\n    /**\\n     * @dev Set or reaffirm the approved address for an NFT. This function can be changed to payable.\\n     * @notice The zero address indicates there is no approved address. Throws unless `msg.sender` is\\n     * the current NFT owner, or an authorized operator of the current owner.\\n     * @param _approved Address to be approved for the given NFT ID.\\n     * @param _tokenId ID of the token to be approved.\\n     */\\n    function approve(address _approved, uint256 _tokenId)\\n        external\\n        override\\n        canOperate(_tokenId)\\n        validNFToken(_tokenId)\\n    {\\n        address tokenOwner = idToOwner[_tokenId];\\n        require(_approved != tokenOwner, \\\"approved address is token owner\\\");\\n\\n        idToApproval[_tokenId] = _approved;\\n        emit Approval(tokenOwner, _approved, _tokenId);\\n    }\\n\\n    /**\\n     * @dev Enables or disables approval for a third party (\\\"operator\\\") to manage all of\\n     * `msg.sender`'s assets. It also emits the ApprovalForAll event.\\n     * @notice This works even if sender doesn't own any tokens at the time.\\n     * @param _operator Address to add to the set of authorized operators.\\n     * @param _approved True if the operators is approved, false to revoke approval.\\n     */\\n    function setApprovalForAll(address _operator, bool _approved)\\n        external\\n        override\\n    {\\n        ownerToOperators[msg.sender][_operator] = _approved;\\n        emit ApprovalForAll(msg.sender, _operator, _approved);\\n    }\\n\\n    /**\\n     * @dev Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\\n     * considered invalid, and this function throws for queries about the zero address.\\n     * @param _owner Address for whom to query the balance.\\n     * @return Balance of _owner.\\n     */\\n    function balanceOf(address _owner)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(_owner != address(0), \\\"zero address\\\");\\n        return _getOwnerNFTCount(_owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the owner of the NFT. NFTs assigned to zero address are considered\\n     * invalid, and queries about them do throw.\\n     * @param _tokenId The identifier for an NFT.\\n     * @return _owner Address of _tokenId owner.\\n     */\\n    function ownerOf(uint256 _tokenId)\\n        external\\n        view\\n        override\\n        returns (address _owner)\\n    {\\n        _owner = idToOwner[_tokenId];\\n        require(_owner != address(0), \\\"not valid nft\\\");\\n    }\\n\\n    /**\\n     * @dev Get the approved address for a single NFT.\\n     * @notice Throws if `_tokenId` is not a valid NFT.\\n     * @param _tokenId ID of the NFT to query the approval of.\\n     * @return Address that _tokenId is approved for.\\n     */\\n    function getApproved(uint256 _tokenId)\\n        external\\n        view\\n        override\\n        validNFToken(_tokenId)\\n        returns (address)\\n    {\\n        return idToApproval[_tokenId];\\n    }\\n\\n    /**\\n     * @dev Checks if `_operator` is an approved operator for `_owner`.\\n     * @param _owner The address that owns the NFTs.\\n     * @param _operator The address that acts on behalf of the owner.\\n     * @return True if approved for all, false otherwise.\\n     */\\n    function isApprovedForAll(address _owner, address _operator)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return ownerToOperators[_owner][_operator];\\n    }\\n\\n    /**\\n     * @dev Actually preforms the transfer.\\n     * @notice Does NO checks.\\n     * @param _to Address of a new owner.\\n     * @param _tokenId The NFT that is being transferred.\\n     */\\n    function _transfer(address _to, uint256 _tokenId) internal {\\n        address from = idToOwner[_tokenId];\\n        _clearApproval(_tokenId);\\n\\n        _removeNFToken(from, _tokenId);\\n        _addNFToken(_to, _tokenId);\\n\\n        emit Transfer(from, _to, _tokenId);\\n    }\\n\\n    /**\\n     * @dev Mints a new NFT.\\n     * @param to The address that will own the minted NFT.\\n     * @param uri of the NFT to be minted by the msg.sender.\\n     */\\n    function mint(\\n        address to,\\n        string calldata uri,\\n        uint256 num\\n    ) external onlyRoot returns (uint256[] memory) {\\n        return _mint(to, uri, num);\\n    }\\n\\n    /**\\n     * @dev Mints a new NFT.\\n     * @param targets The address list that will own the minted NFT.\\n     * @param uris Uri list to be assigned to minted NFT.\\n     */\\n    function mintMulti(address[] calldata targets, string[] calldata uris)\\n        external\\n        onlyRoot\\n        returns (uint256[] memory tokenIds)\\n    {\\n        require(\\n            targets.length > 0 && uris.length > 0,\\n            \\\"target list should not be empty\\\"\\n        );\\n        require(\\n            targets.length == uris.length,\\n            \\\"targets'length not equal to uris\\\"\\n        );\\n        uint256 num = targets.length;\\n        tokenIds = new uint256[](num);\\n        for (uint256 i = 0; i < num; i++) {\\n            string memory _uri = uris[i];\\n            require(bytes(_uri).length < 256, \\\"uri too long\\\");\\n            uint256[] memory _tokenIds = _mint(targets[i], _uri, 1);\\n            for (uint256 j = 0; j < _tokenIds.length; j++) {\\n                tokenIds[tokenIds.length - 1] = _tokenIds[j];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints a new NFT.\\n     * @notice This is an internal function which should be called from user-implemented external\\n     * mint function. Its purpose is to show and properly initialize data structures when using this\\n     * implementation.\\n     * @param _to The address that will own the minted NFT.\\n     * @param _uri of the NFT to be minted by the msg.sender.\\n     */\\n    function _mint(\\n        address _to,\\n        string memory _uri,\\n        uint256 _num\\n    ) internal virtual returns (uint256[] memory tokenIds) {\\n        require(_to != address(0), \\\"zero address\\\");\\n        require(bytes(_uri).length <= 256, \\\"uri too long\\\");\\n        tokenIds = new uint256[](_num);\\n        for (uint256 i = 0; i < _num; i++) {\\n            // avaialbe token id\\n            uint256 _tokenId = _availableId++;\\n\\n            _addNFToken(_to, _tokenId);\\n\\n            emit Transfer(address(0), _to, _tokenId);\\n\\n            _setTokenUri(_tokenId, _uri);\\n\\n            tokens.push(_tokenId);\\n            tokenIds[i] = _tokenId;\\n            idToIndex[_tokenId] = tokens.length - 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Burns a NFT.\\n     * @param tokenId ID of the NFT to be burned.\\n     */\\n    function burn(uint256 tokenId) external {\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     * @dev Burns a NFT.\\n     * @notice This is an internal function which should be called from user-implemented external burn\\n     * function. Its purpose is to show and properly initialize data structures when using this\\n     * implementation. Also, note that this burn implementation allows the minter to re-mint a burned\\n     * NFT.\\n     * @param _tokenId ID of the NFT to be burned.\\n     */\\n    function _burn(uint256 _tokenId) internal virtual validNFToken(_tokenId) {\\n        address tokenOwner = idToOwner[_tokenId];\\n        _clearApproval(_tokenId);\\n        _removeNFToken(tokenOwner, _tokenId);\\n        emit Transfer(tokenOwner, address(0), _tokenId);\\n\\n        if (bytes(idToUri[_tokenId]).length != 0) {\\n            delete idToUri[_tokenId];\\n        }\\n\\n        uint256 tokenIndex = idToIndex[_tokenId];\\n        uint256 lastTokenIndex = tokens.length - 1;\\n        uint256 lastToken = tokens[lastTokenIndex];\\n\\n        tokens[tokenIndex] = lastToken;\\n\\n        tokens.pop();\\n        // This wastes gas if you are burning the last token but saves a little gas if you are not.\\n        idToIndex[lastToken] = tokenIndex;\\n        idToIndex[_tokenId] = 0;\\n    }\\n\\n    /**\\n     * @dev Removes a NFT from owner.\\n     * @notice Use and override this function with caution. Wrong usage can have serious consequences.\\n     * @param _from Address from wich we want to remove the NFT.\\n     * @param _tokenId Which NFT we want to remove.\\n     */\\n    function _removeNFToken(address _from, uint256 _tokenId) internal virtual {\\n        require(idToOwner[_tokenId] == _from, \\\"not owner\\\");\\n        delete idToOwner[_tokenId];\\n\\n        uint256 tokenToRemoveIndex = idToOwnerIndex[_tokenId];\\n        uint256 lastTokenIndex = ownerToIds[_from].length - 1;\\n\\n        if (lastTokenIndex != tokenToRemoveIndex) {\\n            uint256 lastToken = ownerToIds[_from][lastTokenIndex];\\n            ownerToIds[_from][tokenToRemoveIndex] = lastToken;\\n            idToOwnerIndex[lastToken] = tokenToRemoveIndex;\\n        }\\n\\n        ownerToIds[_from].pop();\\n    }\\n\\n    /**\\n     * @dev Assignes a new NFT to owner.\\n     * @notice Use and override this function with caution. Wrong usage can have serious consequences.\\n     * @param _to Address to wich we want to add the NFT.\\n     * @param _tokenId Which NFT we want to add.\\n     */\\n    function _addNFToken(address _to, uint256 _tokenId) internal virtual {\\n        require(idToOwner[_tokenId] == address(0), \\\"nft exists\\\");\\n        idToOwner[_tokenId] = _to;\\n\\n        ownerToIds[_to].push(_tokenId);\\n        idToOwnerIndex[_tokenId] = ownerToIds[_to].length - 1;\\n    }\\n\\n    /**\\n     * @dev Set a distinct URI (RFC 3986) for a given NFT ID.\\n     * @notice This is an internal function which should be called from user-implemented external\\n     * function. Its purpose is to show and properly initialize data structures when using this\\n     * implementation.\\n     * @param _tokenId Id for which we want uri.\\n     * @param _uri String representing RFC 3986 URI.\\n     */\\n    function _setTokenUri(uint256 _tokenId, string memory _uri)\\n        internal\\n        validNFToken(_tokenId)\\n    {\\n        idToUri[_tokenId] = _uri;\\n    }\\n\\n    /**\\n     * @dev Helper function that gets NFT count of owner. This is needed for overriding in enumerable\\n     * extension to remove double storage (gas optimization) of owner nft count.\\n     * @param _owner Address for whom to query the count.\\n     * @return Number of _owner NFTs.\\n     */\\n    function _getOwnerNFTCount(address _owner)\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return ownerToIds[_owner].length;\\n    }\\n\\n    /**\\n     * @dev Actually perform the safeTransferFrom.\\n     * @param _from The current owner of the NFT.\\n     * @param _to The new owner.\\n     * @param _tokenId The NFT to transfer.\\n     * @param _data Additional data with no specified format, sent in call to `_to`.\\n     */\\n    function _safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes memory _data\\n    ) private canTransfer(_tokenId) validNFToken(_tokenId) {\\n        address tokenOwner = idToOwner[_tokenId];\\n        require(tokenOwner == _from, \\\"not owner\\\");\\n        require(_to != address(0), \\\"zero address\\\");\\n\\n        _transfer(_to, _tokenId);\\n\\n        if (_to.isContract()) {\\n            bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(\\n                msg.sender,\\n                _from,\\n                _tokenId,\\n                _data\\n            );\\n            require(\\n                retval == MAGIC_ON_ERC721_RECEIVED,\\n                \\\"not able to receive nft\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Clears the current approval of a given NFT ID.\\n     * @param _tokenId ID of the NFT to be transferred.\\n     */\\n    function _clearApproval(uint256 _tokenId) private {\\n        if (idToApproval[_tokenId] != address(0)) {\\n            delete idToApproval[_tokenId];\\n        }\\n    }\\n\\n    /// @notice Handle the receipt of an NFT\\n    /// @dev The ERC721 smart contract calls this function on the recipient\\n    ///  after a `transfer`. This function MAY throw to revert and reject the\\n    ///  transfer. Return of other than the magic value MUST result in the\\n    ///  transaction being reverted.\\n    ///  Note: the contract address is always the message sender.\\n    /// @param _operator The address which called `safeTransferFrom` function\\n    /// @param _from The address which previously owned the token\\n    /// @param _tokenId The NFT identifier which is being transferred\\n    /// @param _data Additional data with no specified format\\n    /// @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    ///  unless throwing\\n    function onERC721Received(\\n        address _operator,\\n        address _from,\\n        uint256 _tokenId,\\n        bytes calldata _data\\n    ) external override returns (bytes4) {\\n        return MAGIC_ON_ERC721_RECEIVED;\\n    }\\n\\n    /// @notice A descriptive name for a collection of NFTs in this contract\\n    function name() external view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /// @notice An abbreviated name for NFTs in this contract\\n    function symbol() external view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n    ///  Metadata JSON Schema\\\".\\n    function tokenURI(uint256 _tokenId)\\n        external\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        return idToUri[_tokenId];\\n    }\\n\\n    /**\\n     * @notice Return the tokens owned by an address.\\n     */\\n    function tokensByOwner(address _owner)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return ownerToIds[_owner];\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/lowesyang/Documents/Byterum/Products/NFT-GO/moonlight/erc721-contract/contracts/IERC721TokenReceiver.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n\\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\\ninterface ERC721TokenReceiver {\\n    /// @notice Handle the receipt of an NFT\\n    /// @dev The ERC721 smart contract calls this function on the recipient\\n    ///  after a `transfer`. This function MAY throw to revert and reject the\\n    ///  transfer. Return of other than the magic value MUST result in the\\n    ///  transaction being reverted.\\n    ///  Note: the contract address is always the message sender.\\n    /// @param _operator The address which called `safeTransferFrom` function\\n    /// @param _from The address which previously owned the token\\n    /// @param _tokenId The NFT identifier which is being transferred\\n    /// @param _data Additional data with no specified format\\n    /// @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    ///  unless throwing\\n    function onERC721Received(\\n        address _operator,\\n        address _from,\\n        uint256 _tokenId,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"/Users/lowesyang/Documents/Byterum/Products/NFT-GO/moonlight/erc721-contract/contracts/IERC721Metadata.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n\\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n///  Note: the ERC-165 identifier for this interface is 0x5b5e139f\\n/* is ERC721 */\\ninterface ERC721Metadata {\\n    /// @notice A descriptive name for a collection of NFTs in this contract\\n    function name() external view returns (string memory);\\n\\n    /// @notice An abbreviated name for NFTs in this contract\\n    function symbol() external view returns (string memory);\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n    ///  Metadata JSON Schema\\\".\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"/Users/lowesyang/Documents/Byterum/Products/NFT-GO/moonlight/erc721-contract/contracts/IERC721Enumerable.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n\\n/// @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n///  Note: the ERC-165 identifier for this interface is 0x780e9d63\\n/* is ERC721 */\\ninterface ERC721Enumerable {\\n    /// @notice Count NFTs tracked by this contract\\n    /// @return A count of valid NFTs tracked by this contract, where each one of\\n    ///  them has an assigned and queryable owner not equal to the zero address\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Enumerate valid NFTs\\n    /// @dev Throws if `_index` >= `totalSupply()`.\\n    /// @param _index A counter less than `totalSupply()`\\n    /// @return The token identifier for the `_index`th NFT,\\n    ///  (sort order not specified)\\n    function tokenByIndex(uint256 _index) external view returns (uint256);\\n\\n    /// @notice Enumerate NFTs assigned to an owner\\n    /// @dev Throws if `_index` >= `balanceOf(_owner)` or if\\n    ///  `_owner` is the zero address, representing invalid NFTs.\\n    /// @param _owner An address where we are interested in NFTs owned by them\\n    /// @param _index A counter less than `balanceOf(_owner)`\\n    /// @return The token identifier for the `_index`th NFT assigned to `_owner`,\\n    ///   (sort order not specified)\\n    function tokenOfOwnerByIndex(address _owner, uint256 _index)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/lowesyang/Documents/Byterum/Products/NFT-GO/moonlight/erc721-contract/contracts/IERC721.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n\\n/// @title ERC-721 Non-Fungible Token Standard\\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n///  Note: the ERC-165 identifier for this interface is 0x6466353c\\n/* is ERC165 */\\ninterface ERC721 {\\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\\n    ///  may be created and assigned without emitting Transfer. At the time of\\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\\n    event Transfer(\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _tokenId\\n    );\\n\\n    /// @dev This emits when the approved address for an NFT is changed or\\n    ///  reaffirmed. The zero address indicates there is no approved address.\\n    ///  When a Transfer event emits, this also indicates that the approved\\n    ///  address for that NFT (if any) is reset to none.\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _approved,\\n        uint256 _tokenId\\n    );\\n\\n    /// @dev This emits when an operator is enabled or disabled for an owner.\\n    ///  The operator can manage all NFTs of the owner.\\n    event ApprovalForAll(\\n        address indexed _owner,\\n        address indexed _operator,\\n        bool _approved\\n    );\\n\\n    /// @notice Count all NFTs assigned to an owner\\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\\n    ///  function throws for queries about the zero address.\\n    /// @param _owner An address for whom to query the balance\\n    /// @return The number of NFTs owned by `_owner`, possibly zero\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Find the owner of an NFT\\n    /// @param _tokenId The identifier for an NFT\\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\\n    ///  about them do throw.\\n    /// @return The address of the owner of the NFT\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\\n    ///  `onERC721Received` on `_to` and throws if the return value is not\\n    ///  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    /// @param data Additional data with no specified format, sent in call to `_to`\\n\\n    // Changed mutability to implicit non-payable\\n    // Changed visibility to external\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\n    /// @dev This works identically to the other function with an extra data parameter,\\n    ///  except this function just sets data to \\\"\\\"\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n\\n    // Changed mutability to implicit non-payable\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external;\\n\\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\n    ///  THEY MAY BE PERMANENTLY LOST\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT.\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n\\n    // Changed mutability to implicit non-payable\\n    // Changed visibility to external\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external;\\n\\n    /// @notice Set or reaffirm the approved address for an NFT\\n    /// @dev The zero address indicates there is no approved address.\\n    /// @dev Throws unless `msg.sender` is the current NFT owner, or an authorized\\n    ///  operator of the current owner.\\n    /// @param _approved The new approved NFT controller\\n    /// @param _tokenId The NFT to approve\\n\\n    // Changed mutability to implicit non-payable\\n    function approve(address _approved, uint256 _tokenId) external;\\n\\n    /// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\n    ///  all your assets.\\n    /// @dev Throws unless `msg.sender` is the current NFT owner.\\n    /// @dev Emits the ApprovalForAll event\\n    /// @param _operator Address to add to the set of authorized operators.\\n    /// @param _approved True if the operators is approved, false to revoke approval\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    /// @notice Get the approved address for a single NFT\\n    /// @dev Throws if `_tokenId` is not a valid NFT\\n    /// @param _tokenId The NFT to find the approved address for\\n    /// @return The approved address for this NFT, or the zero address if there is none\\n    function getApproved(uint256 _tokenId) external view returns (address);\\n\\n    /// @notice Query if an address is an authorized operator for another address\\n    /// @param _owner The address that owns the NFTs\\n    /// @param _operator The address that acts on behalf of the owner\\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\\n    function isApprovedForAll(address _owner, address _operator)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"}],\"name\":\"mintMulti\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensByOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NFT721Enumerable","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000104e4654474f2d50696f6e6565722d4c3200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000750696f6e65657200000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}