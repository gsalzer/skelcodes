{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PonziRugs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Base64.sol\\\";\\nimport \\\"./PonziRugsGenerator.sol\\\";\\ncontract PonziRugs is ERC721, Ownable{  \\n    // On Tupac's Soul\\n    uint256 public  MAX_SUPPLY          = 1250;\\n    uint256 public  GET_RUGGED_IN_ETHER = 0.06 ether;\\n    uint256 public  RUG_GIVEAWAY        = 16;\\n    uint256 public  totalSupply;\\n    uint256 RUG_RANDOM_SEED = 0;\\n    \\n    bool public hasRuggeningStarted = false;\\n\\n    mapping(string => bool) isMinted;\\n    mapping(uint256 => uint256[]) idToCombination;\\n\\n    constructor() ERC721(\\\"PonziRugs\\\", \\\"RUG\\\") {}\\n\\n    function toggleRuggening() public onlyOwner \\n    {\\n        hasRuggeningStarted = !hasRuggeningStarted;\\n    }\\n\\n    function devRug(uint rugs) public onlyOwner \\n    {\\n        require(totalSupply + rugs <= RUG_GIVEAWAY, \\\"Exceeded giveaway limit\\\");\\n        rugPull(rugs);\\n    }\\n\\n    function getRugged(uint256 rugs) public payable\\n    {\\n        require(hasRuggeningStarted,                        \\\"The ruggening has not started\\\");\\n        require(rugs > 0 && rugs <= 2,                      \\\"You can only get rugged twice per transaction\\\");   \\n        require(GET_RUGGED_IN_ETHER * rugs == msg.value,    \\\"Ether Amount invalid to get rugged do: getRuggedInEther * rugs\\\");\\n        rugPull(rugs);\\n    }\\n    \\n    function rugPull(uint256 rugPulls) internal \\n    {\\n        require(totalSupply + rugPulls < MAX_SUPPLY);\\n        require(!PonziRugsGenerator.isTryingToRug(msg.sender));\\n\\n        for (uint256 i; i < rugPulls; i++)\\n        {\\n            idToCombination[totalSupply] = craftRug(totalSupply);\\n            _mint(msg.sender, totalSupply);\\n            totalSupply++;\\n        }\\n    }\\n\\n    function craftRug(uint256 tokenId) internal returns (uint256[] memory colorCombination)\\n    {\\n        uint256[] memory colors = new uint256[](5);\\n        colors[0] = random(tokenId) % 1000;\\n        for (uint8 i = 1; i < 5; i++)\\n        {\\n            RUG_RANDOM_SEED++;\\n            colors[i] = random(tokenId) % 21;\\n        }\\n        string memory combination = string(abi.encodePacked(colors[0], colors[1], colors[2], colors[3], colors[4]));\\n        if(isMinted[combination]) craftRug(tokenId + 1);\\n        isMinted[combination] = true;\\n        return colors;\\n    }\\n\\n    function random(uint256 seed) internal view returns (uint256)\\n    {\\n        return uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, msg.sender, seed, RUG_RANDOM_SEED)));\\n    }\\n\\n    function tokenURI(uint256 tokenId) override public view returns (string memory) \\n    {\\n        require(tokenId >= 0 && tokenId <= totalSupply, \\\"Invalid token ID\\\");\\n        PonziRugsGenerator.PonziRugsStruct memory rug;\\n        string memory svg;\\n        (rug, svg) = PonziRugsGenerator.getRugForSeed(idToCombination[tokenId]);\\n        \\n        string memory json = Base64.encode(bytes(string(abi.encodePacked(\\n            '{\\\"name\\\": \\\"Ponzi Rugs #', Utils.uint2str(tokenId),\\n            '\\\", \\\"description\\\": \\\"Ever been rugged before? Good, Now you can do it on chain! No IPFS, no API, all images and metadata exist on the blockchain.\\\",',\\n            '\\\"image\\\": \\\"data:image/svg+xml;base64,', Base64.encode(bytes(svg)),'\\\",', rug.metadata,'}'\\n        ))));    \\n        return string(abi.encodePacked('data:application/json;base64,', json));\\n    }\\n    function withdrawAll() public payable onlyOwner \\n    {\\n        require(payable(msg.sender).send(address(this).balance));\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\n/// @title Base64\\r\\n/// @author Brecht Devos - <brecht@loopring.org>\\r\\n/// @notice Provides functions for encoding/decoding base64\\r\\nlibrary Base64 {\\r\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\r\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\r\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\r\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\r\\n\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return '';\\r\\n\\r\\n        // load the table into memory\\r\\n        string memory table = TABLE_ENCODE;\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {} lt(dataPtr, endPtr) {}\\r\\n            {\\r\\n                // read 3 bytes\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // write 4 characters\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n\\r\\n            // padding with '='\\r\\n            switch mod(mload(data), 3)\\r\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\r\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\r\\n        bytes memory data = bytes(_data);\\r\\n\\r\\n        if (data.length == 0) return new bytes(0);\\r\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\r\\n\\r\\n        // load the table into memory\\r\\n        bytes memory table = TABLE_DECODE;\\r\\n\\r\\n        // every 4 characters represent 3 bytes\\r\\n        uint256 decodedLen = (data.length / 4) * 3;\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        bytes memory result = new bytes(decodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // padding with '='\\r\\n            let lastBytes := mload(add(data, mload(data)))\\r\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\r\\n                decodedLen := sub(decodedLen, 1)\\r\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\r\\n                    decodedLen := sub(decodedLen, 1)\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // set the actual output length\\r\\n            mstore(result, decodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 4 characters at a time\\r\\n            for {} lt(dataPtr, endPtr) {}\\r\\n            {\\r\\n               // read 4 characters\\r\\n               dataPtr := add(dataPtr, 4)\\r\\n               let input := mload(dataPtr)\\r\\n\\r\\n               // write 3 bytes\\r\\n               let output := add(\\r\\n                   add(\\r\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\r\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\r\\n                   add(\\r\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\r\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\r\\n                    )\\r\\n                )\\r\\n                mstore(resultPtr, shl(232, output))\\r\\n                resultPtr := add(resultPtr, 3)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/PonziRugsGenerator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\n/// @title: PonziRugs library\\r\\n/// @author: Rug Dev\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary PonziRugsGenerator {\\r\\n    struct PonziRugsStruct \\r\\n    {\\r\\n        uint pattern;\\r\\n        uint background;\\r\\n        uint colorOne;\\r\\n        uint colorTwo;\\r\\n        uint colorThree;\\r\\n        bool set;\\r\\n        string metadata;\\r\\n        string combination;\\r\\n    }\\r\\n\\r\\n    struct RandValues {\\r\\n        uint256 patternSelect;\\r\\n        uint256 backgroundSelect;\\r\\n    }\\r\\n\\r\\n    function getRugForSeed(uint256[] memory combination) external pure returns (PonziRugsStruct memory, string memory)\\r\\n    {\\r\\n        PonziRugsStruct memory rug;\\r\\n        RandValues memory rand;\\r\\n        string[10] memory patterns = [\\\"Ether\\\", \\\"Circles\\\", \\\"Hoots\\\", \\\"Kaiju\\\", \\\"Heart\\\", \\\"Persian\\\", \\\"Encore\\\", \\\"Kubrick\\\", \\\"Mozaic\\\", \\\"NGMI\\\"];\\r\\n        \\r\\n        string[21] memory colors =  [\\\"deeppink\\\", \\\"darkturquoise\\\", \\\"orange\\\", \\\"gold\\\", \\\"white\\\", \\\"silver\\\", \\\"green\\\", \\r\\n                                    \\\"darkviolet\\\", \\\"orangered\\\", \\\"lawngreen\\\", \\\"mediumvioletred\\\", \\\"red\\\", \\\"olivedrab\\\",\\r\\n                                    \\\"bisque\\\", \\\"cornsilk\\\", \\\"darkorange\\\", \\\"slateblue\\\", \\\"floralwhite\\\", \\\"khaki\\\", \\\"crimson\\\", \\\"thistle\\\"];\\r\\n\\r\\n        string[21] memory ngmiPalette = [\\\"black\\\", \\\"red\\\", \\\"green\\\", \\\"blue\\\", \\\"maroon\\\", \\\"violet\\\", \\\"tan\\\", \\\"turquoise\\\", \\\"cyan\\\", \\r\\n                                        \\\"darkred\\\", \\\"darkorange\\\", \\\"crimson\\\", \\\"darkviolet\\\", \\\"goldenrod\\\", \\\"forestgreen\\\", \\\"lime\\\", \\\"magenta\\\", \\r\\n                                        \\\"springgreen\\\", \\\"teal\\\", \\\"navy\\\", \\\"indigo\\\"];\\r\\n\\r\\n        // Determine the Pattern for the rug\\r\\n        rand.patternSelect = combination[0];\\r\\n\\r\\n        if(rand.patternSelect < 1) rug.pattern = 9;\\r\\n        else if (rand.patternSelect < 60)  rug.pattern = 8;\\r\\n        else if (rand.patternSelect < 100) rug.pattern = 7;\\r\\n        else if (rand.patternSelect < 160) rug.pattern = 6;\\r\\n        else if (rand.patternSelect < 240) rug.pattern = 5;\\r\\n        else if (rand.patternSelect < 340) rug.pattern = 4;\\r\\n        else if (rand.patternSelect < 460) rug.pattern = 3;\\r\\n        else if (rand.patternSelect < 580) rug.pattern = 2;\\r\\n        else if (rand.patternSelect < 780) rug.pattern = 1;\\r\\n        else  rug.pattern = 0;\\r\\n\\r\\n        // Rug Traits\\r\\n        rug.background  = combination[1];\\r\\n        rug.colorOne    = combination[2];\\r\\n        rug.colorTwo    = combination[3];\\r\\n        rug.colorThree  = combination[4];\\r\\n        rug.set         = (rug.colorOne == rug.colorTwo) && (rug.colorTwo == rug.colorThree);\\r\\n        rug.combination = string(abi.encodePacked(Utils.uint2str(rug.pattern), Utils.uint2str(rug.background), Utils.uint2str(rug.colorOne), Utils.uint2str(rug.colorTwo) , Utils.uint2str(rug.colorThree)));\\r\\n\\r\\n        // Build the SVG from various parts\\r\\n        string memory svg = string(abi.encodePacked('<svg customPattern = \\\"', Utils.uint2str(rug.pattern), '\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 128 55\\\" >'));\\r\\n\\r\\n        //svg = string(abi.encodePacked(svg, id));\\r\\n        string memory currentSvg = \\\"\\\";\\r\\n        if(rug.pattern == 0)\\r\\n        {\\r\\n            //ETHERS\\r\\n            currentSvg = string(abi.encodePacked('<pattern id=\\\"rug\\\" viewBox=\\\"5.5,0,10,10\\\" width=\\\"24%\\\" height=\\\"20%\\\"><polygon points=\\\"-10,-10 -10,30 30,30 30,-10\\\" fill =\\\"', colors[rug.background],'\\\"/><polygon points=\\\"0,5 9,1 10,1 10,2 8,4 1,5 8,6 10,8 10,9 9,9 0,5\\\"/><polygon points=\\\"10,5 13,1 14,1  21,5 14,9 13,9 10,5\\\"/><polygon points=\\\"13.25,2.25 14.5,5 13.25,7.75 11,5\\\" fill=\\\"', colors[rug.colorOne],'\\\"/><polygon points=\\\"14.5,2.5 15.5,4.5 18.5,4.5\\\" fill=\\\"', colors[rug.colorTwo],'\\\"/><polygon points=\\\"18.5,5.5 15.5,5.5 14.5,7.5\\\" fill=\\\"', colors[rug.colorThree],'\\\"/><polygon points=\\\"18.5,5.5 15.5,5.5 14.5,7.5\\\" transform=\\\"scale(-1,-1) translate(-35,-15)\\\"/><polygon points=\\\"14.5,2.5 15.5,4.5 18.5,4.5\\\" transform=\\\"scale(-1,-1) translate(-35,-5)\\\"/><polygon points=\\\"13.25,2.25 14.5,5 13.25,7.75 11,5\\\" transform=\\\"scale(-1,-1) translate(-35,-15)\\\"/><polygon points=\\\"13.25,2.25 14.5,5 13.25,7.75 11,5\\\" transform=\\\"scale(-1,-1) translate(-35,-5)\\\"/><polygon points=\\\"2,5 10,5 13,9 10,9 8,6\\\" transform=\\\"scale(-1,-1) translate(-9,-15)\\\"/><polygon points=\\\"2,5 8,4 10,1 13,1 10,5\\\" transform=\\\"scale(-1,-1) translate(-9,-5)\\\"/><animate attributeName=\\\"x\\\" from=\\\"0\\\" to=\\\"2.4\\\" dur=\\\"20s\\\" repeatCount=\\\"indefinite\\\"/></pattern><rect width=\\\"128\\\" height=\\\"55\\\" fill=\\\"url(#rug)\\\" stroke-width=\\\"3\\\" stroke=\\\"black\\\"/>'));\\r\\n        }\\r\\n        else if(rug.pattern == 1)\\r\\n        {\\r\\n            //CIRCLES\\r\\n            string[3] memory parts = [\\r\\n                string(abi.encodePacked\\r\\n                (\\r\\n                    '<pattern id=\\\"star\\\" viewBox=\\\"0,0,12,12\\\" width=\\\"11%\\\" height=\\\"25%\\\"><circle cx=\\\"12\\\" cy=\\\"0\\\" r=\\\"4\\\" fill=\\\"', colors[rug.colorOne],'\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"/><circle cx=\\\"12\\\" cy=\\\"0\\\" r=\\\"2\\\" fill=\\\"', colors[rug.colorThree],'\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"/><circle cx=\\\"0\\\" cy=\\\"12\\\" r=\\\"4\\\" fill=\\\"', colors[rug.colorOne],'\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"/><circle cx=\\\"0\\\" cy=\\\"12\\\" r=\\\"2\\\" fill=\\\"', colors[rug.colorThree],'\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"/>'\\r\\n                )), \\r\\n                string(abi.encodePacked\\r\\n                (\\r\\n                    '<circle cx=\\\"6\\\" cy=\\\"6\\\" r=\\\"6\\\" fill=\\\"', colors[rug.colorTwo],'\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"/><circle cx=\\\"6\\\" cy=\\\"6\\\" r=\\\"4\\\" fill=\\\"', colors[rug.colorOne],'\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"/><circle cx=\\\"6\\\" cy=\\\"6\\\" r=\\\"2\\\" fill=\\\"', colors[rug.background],'\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"/><circle cx=\\\"0\\\" cy=\\\"0\\\" r=\\\"6\\\" fill=\\\"', colors[rug.colorTwo],'\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"/><circle cx=\\\"0\\\" cy=\\\"0\\\" r=\\\"4\\\" fill=\\\"', colors[rug.colorOne],'\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"/><circle cx=\\\"0\\\" cy=\\\"0\\\" r=\\\"2\\\" fill=\\\"', colors[rug.colorThree],'\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"/>'\\r\\n                )),\\r\\n                string(abi.encodePacked\\r\\n                (\\r\\n                    '<circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"6\\\" fill=\\\"', colors[rug.colorTwo],'\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"/><circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"4\\\" fill=\\\"', colors[rug.colorOne],'\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"/><circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"2\\\" fill=\\\"', colors[rug.colorThree],'\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"/><animate attributeName=\\\"x\\\" from=\\\"0\\\" to=\\\"1.1\\\" dur=\\\"9s\\\" repeatCount=\\\"indefinite\\\"/></pattern><rect width=\\\"128\\\" height=\\\"55\\\" fill=\\\"url(#star)\\\" stroke=\\\"black\\\" stroke-width=\\\"3\\\"/>'\\r\\n                ))\\r\\n            ];\\r\\n            currentSvg = string(abi.encodePacked(abi.encodePacked(parts[0], parts[1]), parts[2]));\\r\\n        }\\r\\n        else if(rug.pattern == 2)\\r\\n        {\\r\\n            //HOOTS\\r\\n            string[4] memory parts = [\\r\\n                string(abi.encodePacked\\r\\n                (\\r\\n                    '<pattern id=\\\"e\\\" viewBox=\\\"13,-1,10,15\\\" width=\\\"15%\\\" height=\\\"95%\\\"><polygon points=\\\"-99,-99 -99,99 99,99 99,-99\\\" fill =\\\"', colors[rug.background],'\\\"/> <g stroke=\\\"black\\\" stroke-width=\\\"0.75\\\"><polygon points=\\\"5,5 18,10 23,5 18,0\\\" fill =\\\"', colors[rug.colorTwo],'\\\"/><polygon points=\\\"21,0 26,5 21,10 33,5\\\" fill =\\\"', colors[rug.colorThree],'\\\"/> </g><animate attributeName=\\\"x\\\" from=\\\"0\\\" to=\\\"0.3\\\" dur=\\\"2.5s\\\" repeatCount=\\\"indefinite\\\"/> </pattern>'\\r\\n                )), \\r\\n                string(abi.encodePacked\\r\\n                (\\r\\n                    '<pattern id=\\\"h\\\" viewBox=\\\"10,0,20,25\\\" width=\\\"15%\\\" height=\\\"107%\\\"><polygon points=\\\"-99,-99 -99,99 99,99 99,-99\\\" fill =\\\"', colors[rug.background],'\\\"/><polygon points=\\\"9,4 14,9 14,18 9,23 26,23 31,18 31,9 26,4\\\" fill =\\\"', colors[rug.colorOne],'\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\"/><g fill =\\\"', colors[rug.background],'\\\" stroke=\\\"black\\\" stroke-width=\\\"0.5\\\"><circle cx=\\\"20\\\" cy=\\\"10\\\" r=\\\"2.5\\\"/><circle cx=\\\"20\\\" cy=\\\"17\\\" r=\\\"2.5\\\"/><polygon points=\\\"24,11 24,16 29,13.5\\\"/></g><circle cx=\\\"20\\\" cy=\\\"10\\\" r=\\\"1.75\\\" fill=\\\"black\\\"/><circle cx=\\\"20\\\" cy=\\\"17\\\" r=\\\"1.75\\\" fill=\\\"black\\\"/>'\\r\\n                )),\\r\\n                string(abi.encodePacked\\r\\n                (\\r\\n                    '<animate attributeName=\\\"x\\\" from=\\\"0\\\" to=\\\"0.6\\\" dur=\\\"5s\\\" repeatCount=\\\"indefinite\\\"/></pattern><pattern id=\\\"c\\\" viewBox=\\\"13,4,10,20\\\" width=\\\"15%\\\" height=\\\"135%\\\"><polygon points=\\\"-99,-99 -99,99 99,99 99,-99\\\" fill=\\\"', colors[rug.background],'\\\"/><polygon points=\\\"7,3 7,18 32,18 32,3\\\" fill=\\\"black\\\"/><polygon points=\\\"11,7 11,15 28,15 28,7\\\" fill=\\\"', colors[rug.background],'\\\"/><g fill=\\\"black\\\" stroke=\\\"', colors[rug.background],'\\\" stroke-width=\\\"1\\\">'\\r\\n                )),\\r\\n                string(abi.encodePacked\\r\\n                (\\r\\n                    '<polygon points=\\\"-3,9 -3,13 16,13 16,9\\\"/><polygon points=\\\"23,9 23,13 41,13 41,9\\\"/></g><animate attributeName=\\\"x\\\" from=\\\"2.4\\\" to=\\\"0\\\" dur=\\\"40s\\\" repeatCount=\\\"indefinite\\\"/></pattern><rect width=\\\"128\\\" height=\\\"55\\\" fill=\\\"', colors[rug.background],'\\\"/><rect x=\\\"0\\\" y=\\\"2\\\" width=\\\"128\\\" height=\\\"9\\\" fill=\\\"url(#e)\\\"/><rect x=\\\"0\\\" y=\\\"10\\\" width=\\\"128\\\" height=\\\"9\\\" fill=\\\"url(#c)\\\"/><rect x=\\\"0\\\" y=\\\"19\\\" width=\\\"128\\\" height=\\\"15\\\" fill=\\\"url(#h)\\\"/><rect x=\\\"0\\\" y=\\\"36.5\\\" width=\\\"128\\\" height=\\\"9\\\" fill=\\\"url(#c)\\\"/><rect x=\\\"0\\\" y=\\\"46.25\\\" width=\\\"128\\\" height=\\\"9\\\" fill=\\\"url(#e)\\\"/><rect width=\\\"128\\\" height=\\\"55\\\" fill=\\\"transparent\\\" stroke=\\\"black\\\" stroke-width=\\\"3\\\"/>'\\r\\n                ))\\r\\n            ];\\r\\n            currentSvg = string(abi.encodePacked(abi.encodePacked(parts[0], parts[1]), parts[2], parts[3]));\\r\\n        }\\r\\n        else if(rug.pattern == 3)\\r\\n        {\\r\\n            //SCALES\\r\\n            string[3] memory parts = [\\r\\n                string(abi.encodePacked\\r\\n                (\\r\\n                    '<linearGradient id=\\\"grad1\\\" x1=\\\"0%\\\" y1=\\\"0%\\\" x2=\\\"100%\\\" y2=\\\"0%\\\"><stop offset=\\\"0%\\\" stop-color=\\\"', colors[rug.background],'\\\"/><stop offset=\\\"100%\\\" stop-color=\\\"', colors[rug.colorOne],'\\\"/></linearGradient>'\\r\\n                )), \\r\\n                string(abi.encodePacked\\r\\n                (\\r\\n                    '<pattern id=\\\"R\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"11.4%\\\" height=\\\"25%\\\"><g fill=\\\"url(#grad1)\\\" stroke-width=\\\"1\\\" stroke=\\\"black\\\"><polygon points=\\\"8,-2 26,-2 26,18 8,18\\\"/><circle cx=\\\"8\\\" cy=\\\"8\\\" r=\\\"8\\\"/><circle cx=\\\"0\\\" cy=\\\"0\\\" r=\\\"8\\\"/><circle cx=\\\"0\\\" cy=\\\"16\\\" r=\\\"8\\\"/><circle cx=\\\"8\\\" cy=\\\"8\\\" r=\\\"3\\\" fill=\\\"', colors[rug.colorThree],'\\\"/><circle cx=\\\"0\\\" cy=\\\"0\\\" r=\\\"3\\\" fill=\\\"', colors[rug.colorTwo],'\\\"/><circle cx=\\\"0\\\" cy=\\\"16\\\" r=\\\"3\\\" fill=\\\"', colors[rug.colorTwo],'\\\"/><circle cx=\\\"17\\\" cy=\\\"0\\\" r=\\\"3\\\" fill=\\\"', colors[rug.colorTwo],'\\\"/>'\\r\\n                )),\\r\\n                string(abi.encodePacked(\\r\\n                    '<circle cx=\\\"17\\\" cy=\\\"16\\\" r=\\\"3\\\" fill=\\\"', colors[rug.colorTwo],'\\\"/></g><animate attributeName=\\\"x\\\" from=\\\"0\\\" to=\\\"0.798\\\" dur=\\\"6.6s\\\" repeatCount=\\\"indefinite\\\"/></pattern><rect width=\\\"128\\\" height=\\\"55\\\" fill=\\\"url(#R)\\\" stroke-width=\\\"3\\\" stroke=\\\"black\\\"/>'\\r\\n                ))\\r\\n            ];\\r\\n            currentSvg = string(abi.encodePacked(abi.encodePacked(parts[0], parts[1]), parts[2]));\\r\\n        }\\r\\n        else if(rug.pattern == 4)\\r\\n        {\\r\\n            //HEART\\r\\n            currentSvg = string(abi.encodePacked('<pattern id=\\\"star\\\" viewBox=\\\"5.5,-50,100,100\\\" width=\\\"25%\\\" height=\\\"25%\\\"><g stroke=\\\"black\\\" stroke-width=\\\"2\\\"><polygon points=\\\"-99,-99 -99,99 999,99 999,-99\\\" fill =\\\"', colors[rug.background],'\\\"/> <polygon points=\\\"0,-50 -60,-15.36 -60,-84.64\\\" fill=\\\"', colors[rug.colorOne],'\\\"/><polygon points=\\\"0,50 -60,84.64 -60,15.36\\\" fill=\\\"', colors[rug.colorOne],'\\\"/><circle cx=\\\"120\\\" cy=\\\"0\\\" r=\\\"30\\\" fill =\\\"', colors[rug.colorTwo],'\\\" /><path fill=\\\"', colors[rug.colorThree],'\\\" id=\\\"star\\\" d=\\\"M0,0 C37.5,62.5 75,25 50,0 C75,-25 37.5,-62.5 0,0 z\\\"/></g><g transform=\\\"translate(0,40)\\\" id=\\\"star\\\"></g><animate attributeName=\\\"x\\\" from=\\\"0\\\" to=\\\"0.5\\\" dur=\\\"4.1s\\\" repeatCount=\\\"indefinite\\\"/></pattern><rect width=\\\"128\\\" height=\\\"55\\\" fill=\\\"url(#star)\\\" stroke=\\\"black\\\" stroke-width=\\\"3\\\"/>'));\\r\\n        }\\r\\n        else if(rug.pattern == 5)\\r\\n        {\\r\\n            //SQUARES\\r\\n            string[2] memory parts = [\\r\\n                string(abi.encodePacked\\r\\n                (\\r\\n                    '<pattern id=\\\"moon\\\" viewBox=\\\"0,-0.5,10,10\\\" width=\\\"100%\\\" height=\\\"100%\\\"><rect width=\\\"10\\\" height=\\\"10\\\" fill=\\\"', colors[rug.colorOne],'\\\" stroke=\\\"black\\\" stroke-width=\\\"2\\\" transform=\\\"translate(0.05,-0.5)\\\"/><rect width=\\\"5\\\" height=\\\"5\\\" stroke=\\\"', colors[rug.colorTwo],'\\\" fill=\\\"', colors[rug.colorOne],'\\\" transform=\\\"translate(2.5,2)\\\"/><rect width=\\\"4\\\" height=\\\"4\\\" stroke=\\\"black\\\" fill=\\\"', colors[rug.colorOne],'\\\" transform=\\\"translate(3,2.5)\\\" stroke-width=\\\"0.3\\\"/>'\\r\\n                )), \\r\\n                string(abi.encodePacked\\r\\n                (\\r\\n                    '<rect width=\\\"6\\\" height=\\\"6\\\" stroke=\\\"black\\\" fill=\\\"none\\\" transform=\\\"translate(2,1.5)\\\" stroke-width=\\\"0.3\\\"/><circle cx=\\\"5\\\" cy=\\\"4.5\\\" r=\\\"1\\\" stroke=\\\"', colors[rug.colorTwo],'\\\" fill=\\\"', colors[rug.colorThree],'\\\"/><g stroke=\\\"black\\\" stroke-width=\\\"0.3\\\" fill=\\\"none\\\"><circle cx=\\\"5\\\" cy=\\\"4.5\\\" r=\\\"1.5\\\"/><circle cx=\\\"5\\\" cy=\\\"4.5\\\" r=\\\"0.5\\\"/> </g></pattern><pattern id=\\\"star\\\" viewBox=\\\"7,-0.5,7,10\\\" width=\\\"17%\\\" height=\\\"20%\\\"><g fill=\\\"url(#moon)\\\" stroke=\\\"', colors[rug.background],'\\\"><rect width=\\\"10\\\" height=\\\"10\\\" transform=\\\"translate(0,-0.5)\\\"/><rect width=\\\"10\\\" height=\\\"10\\\" transform=\\\"translate(10,4.5)\\\"/><rect width=\\\"10\\\" height=\\\"10\\\" transform=\\\"translate(10,-5.5)\\\"/></g><animate attributeName=\\\"x\\\" from=\\\"0\\\" to=\\\"0.17\\\" dur=\\\"1.43s\\\" repeatCount=\\\"indefinite\\\"/></pattern><rect width=\\\"128\\\" height=\\\"55\\\" fill=\\\"url(#star)\\\" stroke-width=\\\"3\\\" stroke=\\\"black\\\"/>'\\r\\n                ))\\r\\n            ];\\r\\n            currentSvg = string(abi.encodePacked(abi.encodePacked(parts[0], parts[1])));\\r\\n        }\\r\\n        else if(rug.pattern == 6)\\r\\n        {\\r\\n            //ENCORE\\r\\n            string[3] memory parts = [\\r\\n                string(abi.encodePacked\\r\\n                (\\r\\n                    '<radialGradient id=\\\"a\\\" x1=\\\"0%\\\" y1=\\\"0%\\\" x2=\\\"100%\\\" y2=\\\"0%\\\"><stop offset=\\\"0%\\\" stop-color=\\\"', colors[rug.background],'\\\" stop-opacity=\\\"1\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"', colors[rug.colorOne],'\\\" stop-opacity=\\\"1\\\" /></radialGradient><radialGradient id=\\\"b\\\" x1=\\\"0%\\\" y1=\\\"0%\\\" x2=\\\"100%\\\" y2=\\\"0%\\\"><stop offset=\\\"0%\\\" stop-color=\\\"', colors[rug.colorTwo],'\\\" stop-opacity=\\\"1\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"', colors[rug.colorThree],'\\\" stop-opacity=\\\"1\\\" /></radialGradient>'\\r\\n                )), \\r\\n                string(abi.encodePacked\\r\\n                (\\r\\n                    '<pattern id=\\\"R\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"13.42%\\\" height=\\\"33%\\\"><g stroke-width=\\\"1\\\" stroke=\\\"black\\\" fill=\\\"url(#a)\\\"><circle cx=\\\"16\\\" cy=\\\"16\\\" r=\\\"8\\\"/><circle cx=\\\"16\\\" cy=\\\"14.9\\\" r=\\\"6\\\"/><circle cx=\\\"16\\\" cy=\\\"13\\\" r=\\\"4\\\"/><circle cx=\\\"16\\\" cy=\\\"12\\\" r=\\\"2\\\"/><circle cx=\\\"0\\\" cy=\\\"16\\\" r=\\\"8\\\"/><circle cx=\\\"0\\\" cy=\\\"14.9\\\" r=\\\"6\\\"/><circle cx=\\\"0\\\" cy=\\\"13\\\" r=\\\"4\\\"/><circle cx=\\\"0\\\" cy=\\\"12\\\" r=\\\"2\\\"/><circle cx=\\\"8\\\" cy=\\\"8\\\" r=\\\"8\\\" fill=\\\"url(#b)\\\"/><circle cx=\\\"8\\\" cy=\\\"6.5\\\" r=\\\"6\\\" fill=\\\"url(#b)\\\"/><circle cx=\\\"8\\\" cy=\\\"5\\\" r=\\\"4\\\" fill=\\\"url(#b)\\\"/><circle cx=\\\"8\\\" cy=\\\"4\\\" r=\\\"2\\\" fill=\\\"url(#b)\\\"/><circle cx=\\\"16\\\" cy=\\\"0\\\" r=\\\"8\\\"/><circle cx=\\\"16\\\" cy=\\\"-2\\\" r=\\\"6\\\"/>'\\r\\n                )),\\r\\n                string(abi.encodePacked\\r\\n                (\\r\\n                    '<circle cx=\\\"16\\\" cy=\\\"-3.9\\\" r=\\\"4\\\"/><circle cx=\\\"0\\\" cy=\\\"0\\\" r=\\\"8\\\"/><circle cx=\\\"0\\\" cy=\\\"-2\\\" r=\\\"6\\\"/><circle cx=\\\"0\\\" cy=\\\"-3.9\\\" r=\\\"4\\\"/></g><animate attributeName=\\\"x\\\" from=\\\"0\\\" to=\\\"0.4025\\\" dur=\\\"3.35s\\\" repeatCount=\\\"indefinite\\\"/></pattern><rect width=\\\"128\\\" height=\\\"55\\\" fill=\\\"url(#R)\\\" stroke-width=\\\"3\\\" stroke=\\\"black\\\"/>'\\r\\n                ))\\r\\n            ];\\r\\n            currentSvg = string(abi.encodePacked(abi.encodePacked(parts[0], parts[1]), parts[2]));\\r\\n        }\\r\\n        else if(rug.pattern == 7)\\r\\n        {\\r\\n            //Kubrik\\r\\n            string[3] memory parts = [\\r\\n                string(abi.encodePacked\\r\\n                (\\r\\n                    '<linearGradient id=\\\"grad1\\\" x1=\\\"0%\\\" y1=\\\"0%\\\" x2=\\\"100%\\\" y2=\\\"0%\\\"><stop offset=\\\"0%\\\" stop-color=\\\"', colors[rug.colorOne],'\\\" stop-opacity=\\\"1\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"', colors[rug.colorTwo],'\\\" stop-opacity=\\\"1\\\" /></linearGradient><polygon points=\\\"0,0 0,55 128,55 128,0\\\" fill =\\\"url(#grad1)\\\"/>    <pattern id=\\\"star\\\" viewBox=\\\"5,-2.9,16,16\\\" width=\\\"12%\\\" height=\\\"20%\\\">'\\r\\n                )), \\r\\n                string(abi.encodePacked\\r\\n                (\\r\\n                    '<polygon points=\\\"13,6 10.5,10 5.5,10 2.5,5 5.5,0 10.5,0 13,4 21,4 26,-5 28,-5 22.5,5 29,17 27,17 21,6\\\" fill=\\\"', colors[rug.background],'\\\" stroke=\\\"black\\\" stroke-width=\\\"0.3\\\"/>    <polygon points=\\\"5,0 10,0 13,5 10,10 5,10 2,5\\\" fill=\\\"', colors[rug.colorThree],'\\\" stroke=\\\"black\\\" stroke-width=\\\"0.6\\\" transform=\\\"translate(4.3 2.5) scale(0.5 0.5)\\\"/>    <polygon points=\\\"21,6 12.5,6 10,10 5,10 2,5 5,0 10,0 12.5,4 20.5,4 25.5,-5 28,-5 22,5\\\" transform=\\\"translate(24.5 8) scale(-1,1)\\\" fill=\\\"', colors[rug.background],'\\\" stroke=\\\"black\\\" stroke-width=\\\"0.3\\\"/>'\\r\\n                )),\\r\\n                string(abi.encodePacked\\r\\n                (\\r\\n                    '<polygon points=\\\"5,0 10,0 13,5 10,10 5,10 2,5\\\" fill=\\\"', colors[rug.colorThree],'\\\" stroke=\\\"black\\\" stroke-width=\\\"0.6\\\" transform=\\\"translate(13.3 10.5) scale(0.5 0.5)\\\"/>      <polygon points=\\\"20.5,6 12.5,6 10,10 5,10 2,5 5,0 10,0 12.5,4 21,4 22,5 28,17 26.5,17\\\" transform=\\\"translate(24.5 -8) scale(-1,1)\\\" fill=\\\"', colors[rug.background],'\\\" stroke=\\\"black\\\" stroke-width=\\\"0.3\\\"/>     <polygon points=\\\"5,0 10,0 13,5 10,10 5,10 2,5\\\" fill=\\\"', colors[rug.colorThree],'\\\" stroke=\\\"black\\\" stroke-width=\\\"0.6\\\" transform=\\\"translate(13.3 -5.5) scale(0.5 0.5)\\\"/>    <animate attributeName=\\\"x\\\" from=\\\"0\\\" to=\\\"1.2\\\" dur=\\\"9.8s\\\" repeatCount=\\\"indefinite\\\"/>    </pattern><rect width=\\\"128\\\" height=\\\"55\\\" fill=\\\"url(#star)\\\" stroke=\\\"black\\\" stroke-width=\\\"3\\\"/>'\\r\\n                ))\\r\\n            ];\\r\\n            currentSvg = string(abi.encodePacked(abi.encodePacked(parts[0], parts[1]), parts[2]));\\r\\n        }\\r\\n        else if(rug.pattern == 8)\\r\\n        {\\r\\n            //TRIANGLES\\r\\n            string[2] memory parts = [\\r\\n                string(abi.encodePacked\\r\\n                (\\r\\n                    '<polygon points=\\\"0,0 128,0 128,55 0,55\\\" fill=\\\"', colors[rug.background],'\\\"/><pattern id=\\\"R\\\" viewBox=\\\"0 0 20 24\\\" width=\\\"11.8%\\\" height=\\\"33%\\\"><g stroke-width=\\\"0.3\\\" stroke=\\\"black\\\"><polygon points=\\\"0,24 10,18 10,30\\\" fill=\\\"', colors[rug.colorOne],'\\\"/><polygon points=\\\"0,0 10,6 10,-6\\\" fill=\\\"', colors[rug.colorOne],'\\\"/><polygon points=\\\"10,6 20,12 20,0\\\" fill=\\\"', colors[rug.colorTwo],'\\\"/>'\\r\\n                )), \\r\\n                string(abi.encodePacked\\r\\n                (\\r\\n                    '<polygon points=\\\"3,6 13,12 3,18\\\" fill=\\\"', colors[rug.colorThree],'\\\"/><polygon points=\\\"-7,12 3,18 -7,24\\\" fill=\\\"', colors[rug.colorOne],'\\\"/><polygon points=\\\"23,18 13,24 13,12\\\" fill=\\\"', colors[rug.colorOne],'\\\"/></g><animate attributeName=\\\"x\\\" from=\\\"0\\\" to=\\\"0.7085\\\" dur=\\\"5.9s\\\" repeatCount=\\\"indefinite\\\"/></pattern><rect width=\\\"128\\\" height=\\\"55\\\" fill=\\\"url(#R)\\\" stroke-width=\\\"3\\\" stroke=\\\"black\\\"/>'\\r\\n                ))\\r\\n            ];\\r\\n            currentSvg = string(abi.encodePacked(abi.encodePacked(parts[0], parts[1])));\\r\\n        }\\r\\n        else if(rug.pattern == 9)\\r\\n        {   \\r\\n            rug.background  = combination[1];\\r\\n            rug.colorOne    = combination[2];\\r\\n            rug.colorTwo    = combination[3];\\r\\n            rug.colorThree  = combination[4];\\r\\n            rug.set         = (rug.colorOne == rug.colorTwo) && (rug.colorTwo == rug.colorThree);\\r\\n            rug.combination = string(abi.encodePacked(Utils.uint2str(rug.pattern), Utils.uint2str(rug.background), Utils.uint2str(rug.colorOne), Utils.uint2str(rug.colorTwo) , Utils.uint2str(rug.colorThree)));\\r\\n            string[1] memory parts = [\\r\\n                string(abi.encodePacked\\r\\n                (\\r\\n                    '<pattern id=\\\"star\\\" viewBox=\\\"5.5,-50,100,100\\\" width=\\\"40%\\\" height=\\\"50%\\\"><polygon points=\\\"-100,-100 -100,300 300,300 300,-100\\\" fill=\\\"white\\\"/> <polyline points=\\\"11 1,7 1,7 5,11 5,11 3, 10 3\\\" fill=\\\"none\\\" stroke=\\\"', ngmiPalette[rug.background],'\\\"/><polyline points=\\\"1 5,1 1,5 5,5 1\\\" fill=\\\"none\\\" stroke=\\\"', ngmiPalette[rug.colorOne],'\\\"/><polyline points=\\\"13 5,13 1,15 3,17 1, 17 5\\\" fill=\\\"none\\\" stroke=\\\"', ngmiPalette[rug.colorTwo],'\\\"/><polyline points=\\\"19 1, 23 1, 21 1, 21 5, 19 5, 23 5\\\" fill=\\\"none\\\" stroke=\\\"', ngmiPalette[rug.colorThree],'\\\"/><animate attributeName=\\\"x\\\" from=\\\"0\\\" to=\\\"0.4\\\" dur=\\\"3s\\\" repeatCount=\\\"indefinite\\\"/>   </pattern>  <rect width=\\\"128\\\" height=\\\"55\\\" fill=\\\"url(#star)\\\" stroke=\\\"black\\\" stroke-width=\\\"3\\\"/>'\\r\\n                ))\\r\\n            ];\\r\\n            currentSvg = string(abi.encodePacked(abi.encodePacked(parts[0])));\\r\\n        }\\r\\n    \\r\\n        svg = string(abi.encodePacked(svg, currentSvg));\\r\\n        svg = string(abi.encodePacked(svg, '</svg>'));\\r\\n\\r\\n        // Keep track of each pn So we can add a trait for each color\\r\\n        string memory traits = string(abi.encodePacked('\\\"attributes\\\": [{\\\"trait_type\\\": \\\"Pattern\\\",\\\"value\\\":\\\"', patterns[rug.pattern],'\\\"},'));\\r\\n        if(rug.set)\\r\\n            traits = string(abi.encodePacked(traits, string(abi.encodePacked('{\\\"trait_type\\\": \\\"Set\\\",\\\"value\\\":\\\"True\\\"},'))));\\r\\n        string memory traits2 = string(abi.encodePacked('{\\\"trait_type\\\": \\\"Background\\\",\\\"value\\\":\\\"', colors[rug.background],'\\\"},{\\\"trait_type\\\": \\\"Color One\\\",\\\"value\\\": \\\"', colors[rug.colorOne],'\\\"},{\\\"trait_type\\\": \\\"Color Two\\\",\\\"value\\\": \\\"', colors[rug.colorTwo],'\\\"},{\\\"trait_type\\\": \\\"Color Three\\\",\\\"value\\\": \\\"', colors[rug.colorThree],'\\\"}]'));\\r\\n        string memory allTraits = string(abi.encodePacked(traits,traits2));\\r\\n        rug.metadata = allTraits;\\r\\n\\r\\n        return (rug, svg);\\r\\n    }\\r\\n\\r\\n    function isTryingToRug(address account) internal view returns (bool) \\r\\n    {\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n}\\r\\nlibrary Utils \\r\\n{\\r\\n    function uint2str(uint256 _i) internal pure returns (string memory str)\\r\\n    {\\r\\n        if (_i == 0)\\r\\n        {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        \\r\\n        uint256 j = _i;\\r\\n        uint256 length;\\r\\n        \\r\\n        while (j != 0)\\r\\n        {\\r\\n            length++;\\r\\n            j /= 10;\\r\\n        }\\r\\n        \\r\\n        bytes memory bstr = new bytes(length);\\r\\n        uint256 k = length;\\r\\n        j = _i;\\r\\n        \\r\\n        while (j != 0)\\r\\n        {\\r\\n            bstr[--k] = bytes1(uint8(48 + j % 10));\\r\\n            j /= 10;\\r\\n        }\\r\\n        \\r\\n        str = string(bstr);\\r\\n        \\r\\n        return str;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/PonziRugsGenerator.sol\": {\r\n        \"PonziRugsGenerator\": \"0x6bb61ec92d5efb9436b075dedd8c936782d39d8a\"\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GET_RUGGED_IN_ETHER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RUG_GIVEAWAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rugs\",\"type\":\"uint256\"}],\"name\":\"devRug\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rugs\",\"type\":\"uint256\"}],\"name\":\"getRugged\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasRuggeningStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleRuggening\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"PonziRugs","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}