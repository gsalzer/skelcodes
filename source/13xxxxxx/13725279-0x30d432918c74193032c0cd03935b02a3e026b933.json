{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Helpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// https://kanon.art - K21\\n// https://daemonica.io\\n//\\n//\\n//                                   $@@@@@@@@@@@$$$\\n//                               $$@@@@@@$$$$$$$$$$$$$$##\\n//                           $$$$$$$$$$$$$$$$$#########***\\n//                        $$$$$$$$$$$$$$$#######**!!!!!!\\n//                     ##$$$$$$$$$$$$#######****!!!!=========\\n//                   ##$$$$$$$$$#$#######*#***!!!=!===;;;;;\\n//                 *#################*#***!*!!======;;;:::\\n//                ################********!!!!====;;;:::~~~~~\\n//              **###########******!!!!!!==;;;;::~~~--,,,-~\\n//             ***########*#*******!*!!!!====;;;::::~~-,,......,-\\n//            ******#**********!*!!!!=!===;;::~~~-,........\\n//           ***************!*!!!!====;;:::~~-,,..........\\n//         !************!!!!!!===;;::~~--,............\\n//         !!!*****!!*!!!!!===;;:::~~--,,..........\\n//        =!!!!!!!!!=!==;;;::~~-,,...........\\n//        =!!!!!!!!!====;;;;:::~~--,........\\n//       ==!!!!!!=!==;=;;:::~~--,...:~~--,,,..\\n//       ===!!!!!=====;;;;;:::~~~--,,..#*=;;:::~--,.\\n//       ;=============;;;;;;::::~~~-,,...$$###==;;:~--.\\n//      :;;==========;;;;;;::::~~~--,,....@@$$##*!=;:~-.\\n//      :;;;;;===;;;;;;;::::~~~--,,...$$$$#*!!=;~-\\n//       :;;;;;;;;;;:::::~~~~---,,...!*##**!==;~,\\n//       :::;:;;;;:::~~~~---,,,...~;=!!!!=;;:~.\\n//       ~:::::::::::::~~~~~---,,,....-:;;=;;;~,\\n//        ~~::::::::~~~~~~~-----,,,......,~~::::~-.\\n//         -~~~~~~~~~~~~~-----------,,,.......,-~~~~~,.\\n//          ---~~~-----,,,,,........,---,.\\n//           ,,--------,,,,,,.........\\n//             .,,,,,,,,,,,,......\\n//                ...............\\n//                    .........\\n\\npragma solidity ^0.8.0;\\n\\n\\n/** @title Daemonica helper functions\\n  * @author @0xAnimist\\n  * @notice Misc support for Daemonica contract suite\\n  */\\nlibrary Helpers{\\n\\n  /** @notice Converts boolean to a string\\n    * @param  value The boolean value\\n    * @return A string that reads \\\"true\\\" or \\\"false\\\"\\n    */\\n  function boolToString(bool value) public pure returns (string memory) {\\n    if(value){\\n      return \\\"true\\\";\\n    }else{\\n      return \\\"false\\\";\\n    }\\n  }\\n\\n  /** @notice Converts uint256 to a string\\n    * @param  value The uint256 value\\n    * @return A string that represents the numerical value of the input\\n    */\\n  function toString(uint256 value) public pure returns (string memory) {\\n  // Inspired by OraclizeAPI's implementation - MIT license\\n  // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n      if (value == 0) {\\n          return \\\"0\\\";\\n      }\\n      uint256 temp = value;\\n      uint256 digits;\\n      while (temp != 0) {\\n          digits++;\\n          temp /= 10;\\n      }\\n      bytes memory buffer = new bytes(digits);\\n      while (value != 0) {\\n          digits -= 1;\\n          buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n          value /= 10;\\n      }\\n      return string(buffer);\\n  }\\n\\n  /** @notice Converts uint8 to a string\\n    * @param  value The uint8 value\\n    * @return A string that represents the numerical value of the input\\n    */\\n  function toString8(uint8 value) public pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"00\\\";\\n    }\\n\\n    uint8 temp = value;\\n    uint8 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer;\\n    if(digits == 1){\\n      buffer = new bytes(2);\\n      buffer[0] = bytes1(uint8(48));\\n      buffer[1] = bytes1(uint8(48 + uint8(value % 10)));\\n    }else{\\n      buffer = new bytes(digits);\\n      while (value != 0) {\\n        digits -= 1;\\n        buffer[digits] = bytes1(uint8(48 + uint8(value % 10)));\\n        value /= 10;\\n      }\\n    }\\n\\n    return string(buffer);\\n  }\\n\\n\\n\\n  /** @notice Returns a _delimiter delimited string of all the values in an 8 uint8 long array\\n    * @param  _array Array of uint8 values to concatenate\\n    * @param  _delimiter String to delimit each value\\n    * @return Concatenated string of all the values delimited by _delimiter\\n    */\\n  function stringifyRow(uint8[8] memory _array, string memory _delimiter) internal pure returns (string memory) {\\n    string memory output = string(abi.encodePacked(\\n      '<tspan x=\\\"153\\\">',toString8(_array[0]),'</tspan>',_delimiter,\\n      '<tspan x=\\\"198\\\">',toString8(_array[1]),'</tspan>',_delimiter,\\n      '<tspan x=\\\"243\\\">',toString8(_array[2]),'</tspan>',_delimiter\\n    ));\\n\\n    output = string(abi.encodePacked(\\n      output,\\n      '<tspan x=\\\"288\\\">',toString8(_array[3]),'</tspan>',_delimiter,\\n      '<tspan x=\\\"333\\\">',toString8(_array[4]),'</tspan>',_delimiter,\\n      '<tspan x=\\\"378\\\">',toString8(_array[5]),'</tspan>',_delimiter\\n    ));\\n\\n    return string(abi.encodePacked(\\n      output,\\n      '<tspan x=\\\"423\\\">',toString8(_array[6]),'</tspan>',_delimiter,\\n      '<tspan x=\\\"468\\\">',toString8(_array[7]),'</tspan>',_delimiter\\n    ));\\n  }\\n\\n  /** @notice Compares two strings\\n    * @param  _a First string to compare\\n    * @param  _b Second string to compare\\n    * @return True if equal, false if not\\n    */\\n  function compareStrings(string memory _a, string memory _b) public pure returns (bool) {\\n    return (keccak256(abi.encodePacked((_a))) == keccak256(abi.encodePacked((_b))));\\n  }\\n\\n\\n  /** @notice Returns a substring of the given string\\n    * @param  str The string\\n    * @param  startIndex Starting index determining the substring to return\\n    * @param  endIndex Ending index determining the substring to return\\n    * @return Substring parsed from the string\\n    */\\n  function substring(string memory str, uint startIndex, uint endIndex) public pure returns (string memory) {\\n      bytes memory strBytes = bytes(str);\\n      if(endIndex == 0){\\n        endIndex = strBytes.length;\\n      }\\n      bytes memory result = new bytes(endIndex-startIndex);\\n      for(uint i = startIndex; i < endIndex; i++) {\\n          result[i-startIndex] = strBytes[i];\\n      }\\n      return string(result);\\n  }\\n\\n\\n  /** @notice Returns a pseudorandom number from a string input\\n    * @param  input A string to seed the pseudorandom number generator\\n    * @return  A pseudorandom uint256 number based on the input string\\n    */\\n  function random(string memory input) internal pure returns (uint256) {\\n      return uint256(keccak256(abi.encodePacked(input)));\\n  }\\n\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"boolToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_a\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_b\",\"type\":\"string\"}],\"name\":\"compareStrings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"substring\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"toString8\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"Helpers","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}