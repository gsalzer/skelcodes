{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n        .__            __        __                 .__              \r\n  ____ |__| ____     |__|__ ___/  |_  ________ __  |__| ____  __ __ \r\n /    \\|  |/    \\    |  |  |  \\   __\\/  ___/  |  \\ |  |/    \\|  |  \\\r\n|   |  \\  |   |  \\   |  |  |  /|  |  \\___ \\|  |  / |  |   |  \\  |  /\r\n|___|  /__|___|  /\\__|  |____/ |__| /____  >____/  |__|___|  /____/ \r\n     \\/        \\/\\______|                \\/                \\/       \r\n * \r\n * TOKENOMICS:\r\n * 1,000,000,000,000 token supply\r\n * FIRST TWO MINUTES: 3,000,000,000 max buy / 45-second buy cooldown (these limitations are lifted automatically two minutes post-launch)\r\n * 15-second cooldown to sell after a buy\r\n * 10% tax on buys and sells\r\n * Max wallet of 9% of total supply for first 12 hours\r\n * Higher fee on sells within first 1 hour post-launch\r\n * No team tokens, no presale\r\n * Functions for removing fees\r\n * \r\nSPDX-License-Identifier: UNLICENSED \r\n*/\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if(a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}  \r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract NINJUTSU is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => User) private cooldown;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 1e12 * 10**9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n    string private constant _name = unicode\"Ninjutsu Inu\";\r\n    string private constant _symbol = unicode\"NINJUTSU\";\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private _taxFee = 6;\r\n    uint256 private _teamFee = 4;\r\n    uint256 private _feeRate = 2;\r\n    uint256 private _previousTaxFee = _taxFee;\r\n    uint256 private _previousteamFee = _teamFee;\r\n    uint256 private _launchFeeEnd;\r\n    uint256 private _maxBuyAmount;\r\n    uint256 private _maxHeldTokens;\r\n    address payable private _feeAddress1;\r\n    address payable private _feeAddress2;\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private _tradingOpen;\r\n    bool private _cooldownEnabled = true;\r\n    bool private inSwap = false;\r\n    bool private _useFees = true;\r\n    bool private _useDevFee = true;\r\n    uint256 private _buyLimitEnd;\r\n    uint256 private _maxHeldTokensEnd;\r\n    struct User {\r\n        uint256 buy;\r\n        uint256 sell;\r\n        bool exists;\r\n    }\r\n\r\n    event MaxBuyAmountUpdated(uint _maxBuyAmount);\r\n    event CooldownEnabledUpdated(bool _cooldown);\r\n    event UseFeesBooleanUpdated(bool _usefees);\r\n    event UseDevFeeBooleanUpdated(bool _usedevfee);\r\n    event TaxFeeUpdated(uint _taxfee);\r\n    event TeamFeeUpdated(uint _taxfee);\r\n    event FeeAddress1Updated(address _feewallet1);\r\n    event FeeAddress2Updated(address _feewallet2);\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    constructor (address payable feeAddress1, address payable feeAddress2) {\r\n        _feeAddress1 = feeAddress1;\r\n        _feeAddress2 = feeAddress2;\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[feeAddress1] = true;\r\n        _isExcludedFromFee[feeAddress2] = true;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) private view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if(_taxFee == 0 && _teamFee == 0) return;\r\n        _previousTaxFee = _taxFee;\r\n        _previousteamFee = _teamFee;\r\n        _taxFee = 0;\r\n        _teamFee = 0;\r\n    }\r\n    \r\n    function restoreAllFee() private {\r\n        _taxFee = _previousTaxFee;\r\n        _teamFee = _previousteamFee;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        // set to false for no fee on buys\r\n        bool takeFee = true;\r\n\r\n        if(from != owner() && to != owner()) {\r\n            if(_cooldownEnabled) {\r\n                if(!cooldown[msg.sender].exists) {\r\n                    cooldown[msg.sender] = User(0,0,true);\r\n                }\r\n            }\r\n\r\n            // buy\r\n            if(from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExcludedFromFee[to]) {\r\n                _taxFee = 6;\r\n                _teamFee = 4;\r\n                require(_tradingOpen, \"Trading not yet enabled.\");\r\n                if(_maxHeldTokensEnd > block.timestamp) {\r\n                    require(amount.add(balanceOf(address(to))) <= _maxHeldTokens, \"You can't own that many tokens at once.\");\r\n                }\r\n                if(_cooldownEnabled) {\r\n                    if(_buyLimitEnd > block.timestamp) {\r\n                        require(amount <= _maxBuyAmount);\r\n                        require(cooldown[to].buy < block.timestamp, \"Your buy cooldown has not expired.\");\r\n                        cooldown[to].buy = block.timestamp + (45 seconds);\r\n                    }\r\n                }\r\n                if(_cooldownEnabled) {\r\n                    cooldown[to].sell = block.timestamp + (15 seconds);\r\n                }\r\n            }\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n            // sell\r\n            if(!inSwap && from != uniswapV2Pair && _tradingOpen) {\r\n                // take fee on sells\r\n                takeFee = true;\r\n                _taxFee = 6;\r\n                _teamFee = 4;\r\n                // higher fee on sells within first X hours post-launch\r\n                if(_launchFeeEnd > block.timestamp) {\r\n                    _taxFee = 9;\r\n                    _teamFee = 6;\r\n                }\r\n\r\n                if(_cooldownEnabled) {\r\n                    require(cooldown[from].sell < block.timestamp, \"Your sell cooldown has not expired.\");\r\n                }\r\n\r\n                if(contractTokenBalance > 0) {\r\n                    if(contractTokenBalance > balanceOf(uniswapV2Pair).mul(_feeRate).div(100)) {\r\n                        contractTokenBalance = balanceOf(uniswapV2Pair).mul(_feeRate).div(100);\r\n                    }\r\n                    swapTokensForEth(contractTokenBalance);\r\n                }\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(!_useDevFee && _teamFee != 0) {\r\n            _teamFee = 0;\r\n        }\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to] || !_useFees){\r\n            takeFee = false;\r\n        }\r\n        \r\n        _tokenTransfer(from,to,amount,takeFee);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n        \r\n    function sendETHToFee(uint256 amount) private {\r\n        _feeAddress1.transfer(amount.div(2));\r\n        _feeAddress2.transfer(amount.div(2));\r\n    }\r\n    \r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n        if(!takeFee)\r\n            removeAllFee();\r\n        _transferStandard(sender, recipient, amount);\r\n        if(!takeFee)\r\n            restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); \r\n\r\n        _takeTeam(tTeam);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _taxFee, _teamFee);\r\n        uint256 currentRate =  _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, uint256 taxFee, uint256 TeamFee) private pure returns (uint256, uint256, uint256) {\r\n        uint256 tFee = tAmount.mul(taxFee).div(100);\r\n        uint256 tTeam = tAmount.mul(TeamFee).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\r\n        return (tTransferAmount, tFee, tTeam);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if(rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _takeTeam(uint256 tTeam) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n    function addLiquidity() external onlyOwner() {\r\n        require(!_tradingOpen,\"trading is already open\");\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        _maxBuyAmount = 3000000000 * 10**9;\r\n        // 1,000,000,000,000 total tokens\r\n        // 90,000,000,000 = 9% of total token count\r\n        _maxHeldTokens = 90000000000 * 10**9;\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n    }\r\n\r\n    function openTrading() public onlyOwner {\r\n        _tradingOpen = true;\r\n        _buyLimitEnd = block.timestamp + (120 seconds);\r\n        _maxHeldTokensEnd = block.timestamp + (12 hours);\r\n        _launchFeeEnd = block.timestamp + (1 hours);\r\n    }\r\n\r\n    function manualswap() external {\r\n        require(_msgSender() == _feeAddress1);\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n    \r\n    function manualsend() external {\r\n        require(_msgSender() == _feeAddress1);\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendETHToFee(contractETHBalance);\r\n    }\r\n\r\n    function toggleFees() external {\r\n        require(_msgSender() == _feeAddress1);\r\n        _useFees = false;\r\n        emit UseFeesBooleanUpdated(_useFees);\r\n    }\r\n\r\n    function turnOffDevFee() external {\r\n        require(_msgSender() == _feeAddress1);\r\n        _useDevFee = false;\r\n        emit UseDevFeeBooleanUpdated(_useDevFee);\r\n    }\r\n\r\n    function updateFeeAddress1(address newAddress) external {\r\n        require(_msgSender() == _feeAddress1);\r\n        _feeAddress1 = payable(newAddress);\r\n        emit FeeAddress1Updated(_feeAddress1);\r\n    }\r\n\r\n    function updateFeeAddress2(address newAddress) external {\r\n        require(_msgSender() == _feeAddress2);\r\n        _feeAddress2 = payable(newAddress);\r\n        emit FeeAddress2Updated(_feeAddress2);\r\n    }\r\n\r\n    function setCooldownEnabled() external onlyOwner() {\r\n        _cooldownEnabled = !_cooldownEnabled;\r\n        emit CooldownEnabledUpdated(_cooldownEnabled);\r\n    }\r\n\r\n    function cooldownEnabled() public view returns (bool) {\r\n        return _cooldownEnabled;\r\n    }\r\n\r\n    function timeToBuy(address buyer) public view returns (uint) {\r\n        return block.timestamp - cooldown[buyer].buy;\r\n    }\r\n\r\n    function timeToSell(address buyer) public view returns (uint) {\r\n        return block.timestamp - cooldown[buyer].sell;\r\n    }\r\n\r\n    function balancePool() public view returns (uint) {\r\n        return balanceOf(uniswapV2Pair);\r\n    }\r\n\r\n    function balanceContract() public view returns (uint) {\r\n        return balanceOf(address(this));\r\n    }\r\n\r\n    function usingFees() public view returns (bool) {\r\n        return _useFees;\r\n    }\r\n\r\n    function usingDevFee() public view returns (bool) {\r\n        return _useDevFee;\r\n    }\r\n\r\n    function isThereMaxHeld() public view returns (bool) {\r\n        return (block.timestamp < _maxHeldTokensEnd);\r\n    }\r\n\r\n    function whatIsMaxHeld() public view returns (uint256) {\r\n        return _maxHeldTokens;\r\n    }\r\n\r\n    function whatIsTaxFee() public view returns (uint256) {\r\n        return _taxFee;\r\n    }\r\n\r\n    function whatIsTeamFee() public view returns (uint256) {\r\n        return _teamFee;\r\n    }\r\n\r\n    function whatIsFeeAddress1() public view returns (address) {\r\n        return _feeAddress1;\r\n    }\r\n\r\n    function whatIsFeeAddress2() public view returns (address) {\r\n        return _feeAddress2;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"feeAddress1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"feeAddress2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_cooldown\",\"type\":\"bool\"}],\"name\":\"CooldownEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_feewallet1\",\"type\":\"address\"}],\"name\":\"FeeAddress1Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_feewallet2\",\"type\":\"address\"}],\"name\":\"FeeAddress2Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxBuyAmount\",\"type\":\"uint256\"}],\"name\":\"MaxBuyAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_taxfee\",\"type\":\"uint256\"}],\"name\":\"TaxFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_taxfee\",\"type\":\"uint256\"}],\"name\":\"TeamFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_usedevfee\",\"type\":\"bool\"}],\"name\":\"UseDevFeeBooleanUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_usefees\",\"type\":\"bool\"}],\"name\":\"UseFeesBooleanUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isThereMaxHeld\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setCooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"timeToBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"timeToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnOffDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateFeeAddress1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateFeeAddress2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usingDevFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usingFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whatIsFeeAddress1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whatIsFeeAddress2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whatIsMaxHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whatIsTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whatIsTeamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"NINJUTSU","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000004594aaf7bfa2074b88c54e733b9ed1c9d3cea0710000000000000000000000000306c5417fa059f54df74af3405161e755aa9a28","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7d4350ab3f92731ff62d58f3ab36fc03bcd3d52d41cfa6ecced2d63520a94221"}]}