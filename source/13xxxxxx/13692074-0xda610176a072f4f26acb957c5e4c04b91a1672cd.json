{"status":"1","message":"OK","result":[{"SourceCode":"{\"BlackFridayShib.sol\":{\"content\":\"/**\\n * \\n * $BFSHIB - BLACK FRIDAY SHIB TOKEN\\n *\\n * \\n * \\n * 💻 Website: https://blackfridayshib.com/\\n * 💬 Telegram: https://t.me/BlackFridayShibToken\\n * \\n * \\n * \\n * \\n * \\n * ██████╗░██╗░░░░░░█████╗░░█████╗░██╗░░██╗  ███████╗██████╗░██╗██████╗░░█████╗░██╗░░░██╗\\n * ██╔══██╗██║░░░░░██╔══██╗██╔══██╗██║░██╔╝  ██╔════╝██╔══██╗██║██╔══██╗██╔══██╗╚██╗░██╔╝\\n * ██████╦╝██║░░░░░███████║██║░░╚═╝█████═╝░  █████╗░░██████╔╝██║██║░░██║███████║░╚████╔╝░\\n * ██╔══██╗██║░░░░░██╔══██║██║░░██╗██╔═██╗░  ██╔══╝░░██╔══██╗██║██║░░██║██╔══██║░░╚██╔╝░░\\n * ██████╦╝███████╗██║░░██║╚█████╔╝██║░╚██╗  ██║░░░░░██║░░██║██║██████╔╝██║░░██║░░░██║░░░\\n * ╚═════╝░╚══════╝╚═╝░░╚═╝░╚════╝░╚═╝░░╚═╝  ╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═════╝░╚═╝░░╚═╝░░░╚═╝░░░\\n * \\n * ░██████╗██╗░░██╗██╗██████╗\\n * ██╔════╝██║░░██║██║██╔══██╗\\n * ╚█████╗░███████║██║██████╦╝\\n * ░╚═══██╗██╔══██║██║██╔══██╗\\n * ██████╔╝██║░░██║██║██████╦╝\\n * ╚═════╝░╚═╝░░╚═╝╚═╝╚═════╝\\n * \\n *  AUTOMATED. RANDOMIZED. ASYNCHRONOUS.\\n *\\n * BLACK FRIDAY SHIB Token integrates with Chainlink to create a automated, randomised way to give deals.\\n *\\n * Tokenomics:\\n * \\n * $BFSHIB is is the Latest ERC-20 Token on the theme of Black Friday powered by Chainlink\\n * \\n * Everyone loves discounts and sales during the black friday season.\\n * But why wait for it once every year? When you can get it every hour?\\n * \\n * Black Friday Shib integrates with the oracle provider CHAINLINK which,\\n * through ChainLink VRF, makes verifiable randomness possible on chain\\n *\\n * Based on the random number generated, BFSHIB can toggle between below modes affecting the buy taxes.\\n *\\n * HAPPY HOURS MODE \\n * - BUY tax can vary between 2% and 10% based on the price impact of the buy\\n * - Bigger buys = Lower BUY tax\\n * \\n * FLASH SALE MODE \\n * - BUY tax can vary between 5% and 8% based on the random number generated \\n *\\n * STEAL DEAL MODE \\n * - BUY tax reduced to 5% \\n * \\n * NORMAL MODE \\n * - BUY tax is 10%\\n *\\n * Redistribution - 10% of all collected fees\\n * Sells have an ANTI-DUMP Tokenomics where your SELL tax is proportional to the price impact of the sell\\n * Early buyers and snipers advantage will be limited.\\n * \\n * \\n * \\n * SPDX-License-Identifier: UNLICENSED \\n * \\n*/\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./VRFConsumerBase.sol\\\";\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if(a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n    address private _previousOwner;\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n}  \\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\\ncontract BlackFridayShibToken is Context, IERC20, Ownable, VRFConsumerBase {\\n    using SafeMath for uint256;\\n    mapping (address =\\u003e uint256) private _rOwned;\\n    mapping (address =\\u003e uint256) private _tOwned;\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n    mapping (address =\\u003e bool) private _isExcludedFromFee;\\n    mapping (address =\\u003e bool) private _bots;\\n    mapping (address =\\u003e User) private trader;\\n    uint256 private constant MAX = ~uint256(0);\\n    uint256 private constant _tTotal = 1e12 * 10**9;\\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\\n    uint256 private _tFeeTotal;\\n    string private constant _name = unicode\\\"Black Friday Shib\\\";\\n    string private constant _symbol = unicode\\\"BFSHIB\\\";\\n    uint8 private constant _decimals = 9;\\n    uint256 private _taxFee = 1;\\n    uint256 private _teamFee = 6;\\n    uint256 public buyTaxRandomNumber = 10;\\n    uint256 private _launchTime;\\n    uint256 private _modeExpiryTime = 0;\\n    uint256 private _previousTaxFee = _taxFee;\\n    uint256 private _previousteamFee = _teamFee;\\n    uint256 private _maxBuyAmount;\\n    address payable private _FeeAddress;\\n    address payable private _marketingWalletAddress;\\n    IUniswapV2Router02 private uniswapV2Router;\\n    address private uniswapV2Pair;\\n    bool private tradingOpen = false;\\n    string private mode = \\\"NORMAL\\\";\\n    bool private _cooldownEnabled = true;\\n    bool private _communityMode = false;\\n    bool private inSwap = false;\\n    uint256 private _launchBlock = 0;\\n    uint256 private buyLimitEnd;\\n    uint256 private _snipers = 0;\\n    uint256 private _impactMultiplier = 1000;\\n\\n    bytes32 internal keyHash;\\n    uint256 internal linkFee;\\n    // how many multiples of the linkFee should the contract aim to hold\\n    uint256 internal MIN_LINK_FEES_TO_HOLD = 2;\\n    uint256 internal MAX_LINK_FEES_TO_HOLD = 5;\\n\\n    // random number generation\\n    uint256 public randomNumber; // for debugging\\n    bytes32 public lastRequestId;\\n    uint256 public lastRequestAt;\\n\\n    event SwapETHForTokens(\\n        uint256 amountIn,\\n        address[] path\\n    );\\n\\n    struct User {\\n        uint256 buyCD;\\n        bool exists;\\n    }\\n\\n    event MaxBuyAmountUpdated(uint _maxBuyAmount);\\n    event CooldownEnabledUpdated(bool _cooldown);\\n    event FeeMultiplierUpdated(uint _multiplier);\\n    event FeeRateUpdated(uint _rate);\\n\\n    modifier lockTheSwap {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n\\n\\n    constructor () VRFConsumerBase(\\n            0xf0d54349aDdcf704F77AE15b96510dEA15cb7952, //VRFCoordinator\\n            0x514910771AF9Ca656af840dff83E8264EcF986CA  // LINK Token\\n        ) {\\n        _FeeAddress = payable(0x5d878c527e292CD3FaF750dcE3035E46B778E634);\\n        _marketingWalletAddress = payable(0x5d878c527e292CD3FaF750dcE3035E46B778E634);\\n        _rOwned[_msgSender()] = _rTotal;\\n        _isExcludedFromFee[owner()] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        _isExcludedFromFee[_FeeAddress] = true;\\n        _isExcludedFromFee[_marketingWalletAddress] = true;\\n        _isExcludedFromFee[address(0xf0d54349aDdcf704F77AE15b96510dEA15cb7952)] = true; //chainlink VRFCoordinator\\n        keyHash = 0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445;\\n        linkFee = 2 * 10 ** 18;\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\n    }\\n\\n    function name() public pure returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public pure returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public pure override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function snipersTaxed() public view returns (uint256) {\\n        return _snipers;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return tokenFromReflection(_rOwned[account]);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function tokenFromReflection(uint256 rAmount) private view returns(uint256) {\\n        require(rAmount \\u003c= _rTotal, \\\"Amount must be less than total reflections\\\");\\n        uint256 currentRate =  _getRate();\\n        return rAmount.div(currentRate);\\n    }\\n\\n    function removeAllFee() private {\\n        if(_taxFee == 0 \\u0026\\u0026 _teamFee == 0) return;\\n        _previousTaxFee = _taxFee;\\n        _previousteamFee = _teamFee;\\n        _taxFee = 0;\\n        _teamFee = 0;\\n    }\\n    \\n    function restoreAllFee() private {\\n        _taxFee = _previousTaxFee;\\n        _teamFee = _previousteamFee;\\n    }\\n\\n    function whichMode() public view returns (string memory) {\\n        if (block.timestamp \\u003e _modeExpiryTime) {\\n            return \\\"NORMAL\\\";\\n        }\\n        return mode;\\n    }\\n    \\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n    \\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount \\u003e 0, \\\"Transfer amount must be greater than zero\\\");\\n\\n        if(from != owner() \\u0026\\u0026 to != owner()) {\\n            \\n            require(!_bots[from] \\u0026\\u0026 !_bots[to]);\\n            \\n            if(!trader[msg.sender].exists) {\\n                trader[msg.sender] = User(0,true);\\n            }\\n            uint256 totalFee = 10;\\n            // buy\\n            if(from == uniswapV2Pair \\u0026\\u0026 to != address(uniswapV2Router) \\u0026\\u0026 !_isExcludedFromFee[to]) {\\n                require(tradingOpen, \\\"Trading not yet enabled.\\\");\\n\\n                if(block.number \\u003c _launchBlock + 2) {\\n                    totalFee = 75;\\n                    _snipers++;\\n                } else if(block.timestamp \\u003e _launchTime + (2 minutes)) {\\n                    if (block.timestamp \\u003e _modeExpiryTime) {\\n                        mode = \\\"NORMAL\\\";\\n                        totalFee = 10;\\n                    } else if (keccak256(abi.encodePacked(mode)) == keccak256(abi.encodePacked(\\\"STEAL_DEALS\\\"))) {\\n                        totalFee = 5 + 1;\\n                    } else if (keccak256(abi.encodePacked(mode)) == keccak256(abi.encodePacked(\\\"HAPPY_HOURS\\\"))) {\\n                        uint256 amountImpactMultiplier = amount.mul(_impactMultiplier);\\n                        uint256 priceImpact = amountImpactMultiplier.div(balanceOf(uniswapV2Pair).add(amount));\\n                        if (priceImpact \\u003e= 40) {\\n                            totalFee = 2;\\n                        } else if (priceImpact \\u003e= 30) {\\n                            totalFee = 4;\\n                        } else if (priceImpact \\u003e=20) {\\n                            totalFee = 6;\\n                        } else if (priceImpact \\u003e= 10) {\\n                            totalFee = 8;\\n                        } else {\\n                            totalFee = 10;\\n                        }\\n                        totalFee++;\\n                    } else {\\n                        totalFee = buyTaxRandomNumber + 1;\\n                    }\\n                } else if (block.timestamp \\u003e _launchTime + (1 minutes)) {\\n                    totalFee = 20;\\n                } else {\\n                    totalFee = 40;\\n                } \\n                \\n                _taxFee = (totalFee).div(10);\\n                _teamFee = (totalFee.mul(9)).div(10);\\n                \\n                if(_cooldownEnabled) {\\n                    if(buyLimitEnd \\u003e block.timestamp) {\\n                        require(amount \\u003c= _maxBuyAmount);\\n                        require(trader[to].buyCD \\u003c block.timestamp, \\\"Your buy cooldown has not expired.\\\");\\n                        trader[to].buyCD = block.timestamp + (45 seconds);\\n                    }\\n                }\\n            }\\n            uint256 contractTokenBalance = balanceOf(address(this));\\n\\n            // sell\\n            if(!inSwap \\u0026\\u0026 from != uniswapV2Pair \\u0026\\u0026 tradingOpen) {\\n\\n                //price impact based sell tax\\n                uint256 amountImpactMultiplier = amount.mul(_impactMultiplier);\\n                uint256 priceImpact = amountImpactMultiplier.div(balanceOf(uniswapV2Pair).add(amount));\\n                _taxFee = 1;\\n                \\n                if (priceImpact \\u003c= 10) {\\n                    totalFee = 10;\\n                } else if (priceImpact \\u003e= 40) {\\n                    totalFee = 40;\\n                } else if (priceImpact.mod(2) != 0) {\\n                    totalFee = ++priceImpact;\\n                } else {\\n                    totalFee = priceImpact;\\n                }\\n                \\n                _teamFee = totalFee.sub(_taxFee);\\n\\n                //To limit big dumps by the contract before the sells\\n                if(contractTokenBalance \\u003e 0) {\\n                    if(contractTokenBalance \\u003e balanceOf(uniswapV2Pair).mul(5).div(100)) {\\n                        contractTokenBalance = balanceOf(uniswapV2Pair).mul(5).div(100);\\n                    }\\n                    swapTokensForEth(contractTokenBalance);\\n                }\\n\\n                if (LINK.balanceOf(address(this)) \\u003c linkFee * MIN_LINK_FEES_TO_HOLD) {\\n                    swapEthForLink();\\n                }\\n                requestBuybackRandomNumber();\\n\\n                uint256 contractETHBalance = address(this).balance;\\n                if(contractETHBalance \\u003e 0) {\\n                    sendETHToFee(address(this).balance);\\n                }\\n            }\\n        }\\n        bool takeFee = true;\\n\\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to] || _communityMode){\\n            takeFee = false;\\n        }\\n        \\n        _tokenTransfer(from,to,amount,takeFee);\\n    }\\n\\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function swapEthForLink() private lockTheSwap {\\n        address[] memory path = new address[](2);\\n        path[0] = uniswapV2Router.WETH();\\n        path[1] = address(0x514910771AF9Ca656af840dff83E8264EcF986CA); \\n       \\n\\n        uint256 ethAmount = uniswapV2Router.getAmountsIn(MAX_LINK_FEES_TO_HOLD * linkFee - LINK.balanceOf(address(this)), path)[0];\\n\\n        if (address(this).balance \\u003e ethAmount) {\\n            uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: ethAmount}(\\n                0, // accept any amount of Tokens\\n                path,\\n                address(this), \\n                block.timestamp.add(300)\\n            );\\n\\n            emit SwapETHForTokens(ethAmount, path);\\n        }\\n    }\\n\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\n        randomNumber = uint256(keccak256(abi.encode(randomness, requestId))) % 100 + 1;\\n\\n        if (randomNumber \\u003e 80) {\\n            mode = \\\"HAPPY_HOURS\\\";\\n        } else if (randomNumber \\u003e 50) {\\n            mode = \\\"FLASH_SALE\\\";\\n            buyTaxRandomNumber = randomNumber.div(10);\\n        } else if (randomNumber \\u003e 25) {\\n            mode = \\\"STEAL_DEALS\\\";\\n        } else {\\n            mode = \\\"NORMAL\\\";\\n        }\\n        _modeExpiryTime = block.timestamp + 15 minutes;\\n        lastRequestId = 0;\\n    }\\n\\n    function requestBuybackRandomNumber()  private  {\\n        if (lastRequestId != 0 \\u0026\\u0026 block.timestamp \\u003c (lastRequestAt + 59 minutes)) return;\\n\\n        if (LINK.balanceOf(address(this)) \\u003e linkFee) {\\n            lastRequestId = requestRandomness(keyHash, linkFee);\\n            lastRequestAt = block.timestamp;\\n        }\\n    }\\n\\n    function sendETHToFee(uint256 amount) private {\\n        _FeeAddress.transfer(amount.div(2));\\n        _marketingWalletAddress.transfer(amount.div(2));\\n    }\\n    \\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\\n        if(!takeFee)\\n            removeAllFee();\\n        _transferStandard(sender, recipient, amount);\\n        if(!takeFee)\\n            restoreAllFee();\\n    }\\n\\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); \\n\\n        _takeTeam(tTeam);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\\n        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _taxFee, _teamFee);\\n        uint256 currentRate =  _getRate();\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);\\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\\n    }\\n\\n    function _getTValues(uint256 tAmount, uint256 taxFee, uint256 TeamFee) private pure returns (uint256, uint256, uint256) {\\n        uint256 tFee = tAmount.mul(taxFee).div(100);\\n        uint256 tTeam = tAmount.mul(TeamFee).div(100);\\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\\n        return (tTransferAmount, tFee, tTeam);\\n    }\\n\\n    function _getRate() private view returns(uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply.div(tSupply);\\n    }\\n\\n    function _getCurrentSupply() private view returns(uint256, uint256) {\\n        uint256 rSupply = _rTotal;\\n        uint256 tSupply = _tTotal;\\n        if(rSupply \\u003c _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\n        return (rSupply, tSupply);\\n    }\\n\\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\\n        uint256 rAmount = tAmount.mul(currentRate);\\n        uint256 rFee = tFee.mul(currentRate);\\n        uint256 rTeam = tTeam.mul(currentRate);\\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\\n        return (rAmount, rTransferAmount, rFee);\\n    }\\n\\n    function _takeTeam(uint256 tTeam) private {\\n        uint256 currentRate =  _getRate();\\n        uint256 rTeam = tTeam.mul(currentRate);\\n\\n        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\\n    }\\n\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\n        _rTotal = _rTotal.sub(rFee);\\n        _tFeeTotal = _tFeeTotal.add(tFee);\\n    }\\n\\n    receive() external payable {}\\n    \\n    function openTrading() external onlyOwner() {\\n        require(!tradingOpen,\\\"trading is already open\\\");\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        uniswapV2Router = _uniswapV2Router;\\n        _approve(address(this), address(uniswapV2Router), _tTotal);\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\\n        _maxBuyAmount = 5000000000 * 10**9;\\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\\n        tradingOpen = true;\\n        buyLimitEnd = block.timestamp + (90 seconds);\\n        _launchTime = block.timestamp;\\n        _launchBlock = block.number;\\n        lastRequestAt = block.timestamp;\\n    }\\n\\n    function setMarketingWallet (address payable marketingWalletAddress) external {\\n        require(_msgSender() == _FeeAddress);\\n        _isExcludedFromFee[_marketingWalletAddress] = false;\\n        _marketingWalletAddress = marketingWalletAddress;\\n        _isExcludedFromFee[marketingWalletAddress] = true;\\n    }\\n    \\n    function excludeFromFee (address payable ad) external {\\n        require(_msgSender() == _FeeAddress);\\n        _isExcludedFromFee[ad] = true;\\n    }\\n    \\n    function includeToFee (address payable ad) external {\\n        require(_msgSender() == _FeeAddress);\\n        _isExcludedFromFee[ad] = false;\\n    }\\n    \\n    function setBots(address[] memory bots_) public onlyOwner {\\n        if (block.timestamp \\u003c _launchTime + (20 minutes)) {\\n            for (uint i = 0; i \\u003c bots_.length; i++) {\\n                if (bots_[i] != uniswapV2Pair \\u0026\\u0026 bots_[i] != address(uniswapV2Router)) {\\n                    _bots[bots_[i]] = true;\\n                }\\n            }\\n        }\\n    }\\n    \\n    function delBot(address notbot) public onlyOwner {\\n        _bots[notbot] = false;\\n    }\\n    \\n    function isBot(address ad) public view returns (bool) {\\n        return _bots[ad];\\n    }\\n    \\n    function setCooldownEnabled(bool onoff) external onlyOwner() {\\n        _cooldownEnabled = onoff;\\n        emit CooldownEnabledUpdated(_cooldownEnabled);\\n    }\\n\\n    function thisBalance() public view returns (uint) {\\n        return balanceOf(address(this));\\n    }\\n\\n    function cooldownEnabled() public view returns (bool) {\\n        return _cooldownEnabled;\\n    }\\n\\n    function timeToBuy(address buyer) public view returns (uint) {\\n        return block.timestamp - trader[buyer].buyCD;\\n    }\\n    \\n    function amountInPool() public view returns (uint) {\\n        return balanceOf(uniswapV2Pair);\\n    }\\n}\\n\"},\"LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 remaining\\n    );\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 balance\\n    );\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8 decimalPlaces\\n    );\\n\\n  function decreaseApproval(\\n    address spender,\\n    uint256 addedValue\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function increaseApproval(\\n    address spender,\\n    uint256 subtractedValue\\n  ) external;\\n\\n  function name()\\n    external\\n    view\\n    returns (\\n      string memory tokenName\\n    );\\n\\n  function symbol()\\n    external\\n    view\\n    returns (\\n      string memory tokenSymbol\\n    );\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (\\n      uint256 totalTokensIssued\\n    );\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n}\\n\\n\"},\"VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he\\u0027s not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase\\u0027s attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(\\u003cother arguments\\u003e, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         \\u003cinitialization with other arguments goes here\\u003e\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let\\u0027s call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle\\u0027s response\\n * @dev to your request, it will call your contract\\u0027s fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it\\u0027s critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract\\u0027s random behavior is free\\n * @dev from malicious interference, it\\u0027s best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract\\u0027s user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    internal\\n    virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it\\u0027s provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can\\u0027t *hurt* to mix in some of\\n   * @dev your own randomness, here, but it\\u0027s not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(\\n    bytes32 _keyHash,\\n    uint256 _fee\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface immutable internal LINK;\\n  address immutable private vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 /* keyHash */ =\\u003e uint256 /* nonce */) private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(\\n    address _vrfCoordinator,\\n    address _link\\n  ) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    external\\n  {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\\n\"},\"VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  )\\n    internal\\n    pure\\n    returns (\\n      uint256\\n    )\\n  {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash,\\n    uint256 _vRFInputSeed\\n  )\\n    internal\\n    pure\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_cooldown\",\"type\":\"bool\"}],\"name\":\"CooldownEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"FeeMultiplierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"FeeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxBuyAmount\",\"type\":\"uint256\"}],\"name\":\"MaxBuyAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapETHForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTaxRandomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notbot\",\"type\":\"address\"}],\"name\":\"delBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"ad\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"ad\",\"type\":\"address\"}],\"name\":\"includeToFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ad\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRequestAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRequestId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"setBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"setCooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketingWalletAddress\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snipersTaxed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thisBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"timeToBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whichMode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BlackFridayShibToken","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b1cf1703334985c2981a19ae2b4b90dc530c0662231f9b5efab3de7b74abbe4d"}]}