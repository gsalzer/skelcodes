{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\ninterface ve {\r\n    function deposit_for(address addr, uint value) external;\r\n    \r\n    struct Point {\r\n        int128 bias;\r\n        int128 slope;\r\n        uint ts;\r\n        uint blk;\r\n    }\r\n    \r\n    function balanceOf(address, uint) external view returns (uint);\r\n    function totalSupply() external view returns (uint);\r\n    function user_point_epoch(address) external view returns (uint);\r\n    function user_point_history(address, uint) external view returns (Point memory);\r\n}\r\n\r\ninterface erc20 {\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n}\r\n\r\ncontract veclaim {\r\n    ve constant _veibff = ve(0x4D0518C9136025903751209dDDdf6C67067357b1);\r\n    ve constant _vekp3r = ve(0x2FC52C61fB0C03489649311989CE2689D93dC1a2);\r\n    address constant _kp3r = 0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44;\r\n    uint constant _exchange_rate = 13;\r\n    uint immutable public t;\r\n    uint immutable public totalSupply;\r\n    address constant owner = 0x0D5Dc686d0a2ABBfDaFDFb4D0533E886517d4E83;\r\n    uint public claimed;\r\n    uint immutable public required;\r\n\r\n    mapping(address => bool) public has_claimed;\r\n\r\n    event Claim(address indexed claimant, uint amount);\r\n\r\n    constructor() {\r\n        t = block.timestamp;\r\n        uint _totalSupply = _veibff.totalSupply();\r\n        totalSupply = _totalSupply;\r\n        required = _totalSupply * _exchange_rate;\r\n        _safeApprove(_kp3r, address(_vekp3r), type(uint).max);\r\n    }\r\n    \r\n    function deficit() external view returns (uint) {\r\n        return required - claimed;\r\n    }\r\n    \r\n    function clawback() external {\r\n        require(msg.sender == owner);\r\n        _safeTransfer(_kp3r, owner, erc20(_kp3r).balanceOf(address(this)));\r\n    }\r\n    \r\n    function ve_balance_at(address account, uint timestamp) public view returns (uint) {\r\n        uint _epoch = ve(_veibff).user_point_epoch(account);\r\n        uint _balance_at = 0;\r\n        for (uint i = _epoch; i > 0; i--) {\r\n            ve.Point memory _point = ve(_veibff).user_point_history(account, i);\r\n            if (_point.ts <= timestamp) {\r\n                int128 _bias = _point.bias - (_point.slope * int128(int(timestamp - _point.ts)));\r\n                if (_bias > 0) {\r\n                    _balance_at = uint(int(_bias));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return _balance_at;\r\n    }\r\n    \r\n    function claimable(address claimant) external view returns (uint) {\r\n        if (has_claimed[claimant]) {\r\n            return 0;\r\n        }\r\n\r\n        uint _amount = ve_balance_at(claimant, t);\r\n        return _amount * _exchange_rate;\r\n    }\r\n\r\n    function claim(address claimant) external returns (bool) {\r\n        return _claim(claimant);\r\n    }\r\n\r\n    function claim() external returns (bool) {\r\n        return _claim(msg.sender);\r\n    }\r\n\r\n    function _claim(address claimant) internal returns (bool) {\r\n        require(!has_claimed[claimant]);\r\n        has_claimed[claimant] = true;\r\n\r\n        uint _amount = ve_balance_at(claimant, t) * _exchange_rate;\r\n        claimed += _amount;\r\n        _vekp3r.deposit_for(claimant, _amount);\r\n        emit Claim(claimant, _amount);\r\n        return true;\r\n    }\r\n\r\n    function _safeApprove(address token, address spender, uint256 value) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(erc20.approve.selector, spender, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n    \r\n    function _safeTransfer(address token, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(erc20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n\r\n    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    function dust(address _token, uint256 _amount) external {\r\n        require(msg.sender == owner);\r\n        if (_token == ETH_ADDRESS) {\r\n          payable(owner).transfer(_amount);\r\n        } else {\r\n          _safeTransfer(_token, owner, _amount);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clawback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deficit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"dust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"has_claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"t\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ve_balance_at\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"veclaim","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://16bf5940e3c496c11db17d82c212556653c16828a1737481cdb6d9074d3aad66"}]}