{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity 0.7.6;\\n\\n// ============ Contract information ============\\n\\n/**\\n * @title  InterestRateSwapPool\\n * @notice A pool for Interest Rate Swaps\\n * @author Greenwood Labs\\n */\\n\\n// ============ Imports ============\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/math/Math.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '../interfaces/IPool.sol';\\nimport '../interfaces/IAdapter.sol';\\nimport './GreenwoodERC20.sol';\\n\\n\\ncontract Pool is IPool, GreenwoodERC20 {\\n    // ============ Import usage ============\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // ============ Immutable storage ============\\n\\n    address private constant GOVERNANCE = 0xe3D5260Cd7F8a4207f41C3B2aC87882489f97213;\\n\\n    uint256 private constant TEN_EXP_18 = 1000000000000000000;\\n    uint256 private constant STANDARD_DECIMALS = 18;\\n    uint256 private constant BLOCKS_PER_DAY = 6570; // 13.15 seconds per block\\n    uint256 private constant FEE_NUMERATOR = 3;\\n    uint256 private constant FEE_DENOMINATOR = 1000;\\n    uint256 private constant MAX_TO_PAY_BUFFER_NUMERATOR = 10;\\n    uint256 private constant MAX_TO_PAY_BUFFER_DENOMINATOR = 100;\\n    uint256 private constant DAYS_PER_YEAR = 360;\\n\\n    // ============ Mutable storage ============\\n\\n    address private factory;\\n    address private adapter;\\n    address public underlier;\\n\\n    uint256 public totalSwapCollateral;\\n    uint256 public totalSupplementaryCollateral;\\n    uint256 public totalActiveLiquidity;\\n    uint256 public totalAvailableLiquidity;\\n    uint256 public totalFees;\\n    uint256 public fixedRate;\\n    uint256 public utilization;\\n    uint256 public protocol;\\n    uint256 public direction;\\n    uint256 public durationInDays;\\n    uint256 public underlierDecimals;\\n    uint256 public decimalDifference;\\n    uint256 public rateLimit;\\n    uint256 public rateSensitivity;\\n    uint256 public utilizationInflection;\\n    uint256 public rateMultiplier;\\n    uint256 public maxDepositLimit;\\n\\n    mapping(bytes32 => Swap) public swaps;\\n    mapping(address => uint256) public swapNumbers;\\n    mapping(address => uint256) public liquidityProviderLastDeposit;\\n\\n    // ============ Structs ============\\n  \\n    struct Swap {\\n        address user;\\n        bool isClosed;\\n        uint256 notional;\\n        uint256 swapCollateral;\\n        uint256 activeLiquidity;\\n        uint256 openBlock;\\n        uint256 underlierBorrowIndex;\\n        uint256 fixedRate;\\n    }\\n\\n    // ============ Events ============\\n\\n    event OpenSwap(address indexed user, uint256 notional, uint256 activeLiquidity, uint256 fixedRate);\\n    event CloseSwap(address indexed user, uint256 notional, uint256 userToPay, uint256 ammToPay, uint256 fixedRate);\\n    event DepositLiquidity(address indexed user, uint256 liquidityAmount);\\n    event WithdrawLiquidity(address indexed user, uint256 liquidityAmount, uint256 feesAccrued);\\n    event Liquidate(address indexed liquidator, address indexed user, uint256 swapNumber, uint256 liquidatorReward);\\n    event Mint(address indexed user, uint256 underlyingTokenAmount, uint256 liquidityTokenAmount);\\n    event Burn(address indexed user, uint256 underlyingTokenAmount, uint256 liquidityTokenAmount);\\n    \\n    // ============ Constructor ============\\n\\n    constructor(\\n        address _underlier,\\n        uint256 _underlierDecimals,\\n        address _adapter,\\n        uint256 _protocol,\\n        uint256 _direction,\\n        uint256 _durationInDays,\\n        uint256 _initialDeposit,\\n        uint256 _rateLimit,\\n        uint256 _rateSensitivity,\\n        uint256 _utilizationInflection,\\n        uint256 _rateMultiplier,\\n        address _poolDeployer\\n    ) {\\n        // assert that the pool can be initialized with a non-zero amount\\n        require(_initialDeposit > 0, '14');\\n\\n        // initialize the pool\\n        factory = msg.sender;\\n        underlier = _underlier;\\n        underlierDecimals = _underlierDecimals;\\n        protocol = _protocol;\\n        direction = _direction;\\n        durationInDays = _durationInDays;\\n\\n        // calculate difference in decimals between underlier and STANDARD_DECIMALS\\n        decimalDifference = _calculatedDecimalDifference(underlierDecimals, STANDARD_DECIMALS);\\n\\n        // adjust the y token decimals to the standard number\\n        uint256 adjustedInitialDeposit = _convertToStandardDecimal(_initialDeposit);\\n\\n        totalAvailableLiquidity = adjustedInitialDeposit;\\n        adapter = _adapter;\\n        rateLimit = _rateLimit;\\n        rateSensitivity = _rateSensitivity;\\n        utilizationInflection = _utilizationInflection;\\n        rateMultiplier = _rateMultiplier;\\n        maxDepositLimit = 1000000000000000000000000;\\n\\n        // calculates the initial fixed rate to be offered\\n        fixedRate = _calculateFixedRate();\\n\\n        // update the pool deployer's deposit block number\\n        liquidityProviderLastDeposit[_poolDeployer] = block.number;\\n\\n        // mint LP tokens to the pool deployer\\n        _mintLPTokens(_poolDeployer, adjustedInitialDeposit);\\n    }\\n\\n\\n    // ============ Opens a new interest rate swap ============\\n\\n    function openSwap(uint256 _notional) external override returns (bool) {\\n        // assert that a swap is opened with an non-zero notional\\n        require(_notional > 0, '9');\\n\\n        // adjust notional to standard decimal places\\n        uint256 adjustedNotional = _convertToStandardDecimal(_notional);\\n\\n        // calculate the swap collateral and trade active liquidity based off the notional\\n        (uint256 swapCollateral, uint256 activeLiquidity) = _calculateSwapCollateralAndActiveLiquidity(adjustedNotional);\\n\\n        // assert that there is sufficient liquidity to open this swap\\n        require(activeLiquidity <= totalAvailableLiquidity, '10');\\n\\n        // assign the supplementary collateral\\n        uint256 supplementaryCollateral = activeLiquidity;\\n\\n        // the offered fixed rate for this swap\\n        uint256 offeredFixedRate = fixedRate;\\n\\n        // calculate the fee based on swap collateral\\n        uint256 swapFee = swapCollateral.mul(FEE_NUMERATOR).div(FEE_DENOMINATOR);\\n\\n        // calculate the current borrow index for the underlier\\n        uint256 underlierBorrowIndex = IAdapter(adapter).getBorrowIndex(underlier);\\n\\n        // create the swap struct\\n        Swap memory swap = Swap(\\n            msg.sender,\\n            false,\\n            adjustedNotional,\\n            swapCollateral,\\n            activeLiquidity,\\n            block.number,\\n            underlierBorrowIndex,\\n            offeredFixedRate\\n        );\\n        \\n        // create a swap key by hashing together the user and their current swap number\\n        bytes32 swapKey = keccak256(abi.encode(msg.sender, swapNumbers[msg.sender]));\\n        swaps[swapKey] = swap;\\n\\n        // update the user's swap number\\n        swapNumbers[msg.sender] = swapNumbers[msg.sender].add(1);\\n\\n        // update the total active liquidity\\n        totalActiveLiquidity = totalActiveLiquidity.add(activeLiquidity);\\n\\n        // update the total swap collateral\\n        totalSwapCollateral = totalSwapCollateral.add(swapCollateral);\\n\\n        // update the total supplementary collateral\\n        totalSupplementaryCollateral = totalSupplementaryCollateral.add(supplementaryCollateral);\\n\\n        // update the total available liquidity\\n        totalAvailableLiquidity = totalAvailableLiquidity.sub(activeLiquidity);\\n\\n        // update the total fees accrued\\n        totalFees = totalFees.add(swapFee);\\n\\n        // the total amount to debit the user (swap collateral + fee + the supplementary collateral)\\n        uint256 amountToDebit = swapCollateral.add(swapFee).add(supplementaryCollateral);\\n\\n        // calculate the new pool utilization\\n        utilization = _calculateUtilization();\\n\\n        // calculate the new fixed interest rate\\n        fixedRate = _calculateFixedRate();\\n\\n        // transfer underlier from the user\\n        IERC20(underlier).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _convertToUnderlierDecimal(amountToDebit)\\n        );\\n\\n        // emit an open swap event\\n        emit OpenSwap(msg.sender, adjustedNotional, activeLiquidity, offeredFixedRate);\\n\\n        // return true on successful open swap\\n        return true;\\n    }\\n\\n\\n    // ============ Closes an interest rate swap ============\\n\\n    function closeSwap(uint256 _swapNumber) external override returns (bool) {\\n        // the key of the swap\\n        bytes32 swapKey = keccak256(abi.encode(msg.sender, _swapNumber));\\n\\n        // assert that a swap exists for this user\\n        require(swaps[swapKey].user == msg.sender, '11');\\n\\n        // assert that this swap has not already been closed\\n        require(!swaps[swapKey].isClosed, '12');\\n\\n        // get the swap to be closed\\n        Swap memory swap = swaps[swapKey];\\n\\n        // the amounts that the user and the AMM will pay on this swap, depending on the direction of the swap\\n        (uint256 userToPay, uint256 ammToPay) = _calculateInterestAccrued(swap);\\n\\n        // assert that the swap cannot be closed in the same block that it was opened\\n        require(block.number > swap.openBlock, '13');\\n\\n        // the total payout for this swap\\n        uint256 payout = userToPay > ammToPay ? userToPay.sub(ammToPay) : ammToPay.sub(userToPay);\\n\\n        // the supplementary collateral of this swap\\n        uint256 supplementaryCollateral = swap.activeLiquidity;\\n\\n        // the active liquidity recovered upon closure of this swap\\n        uint256 activeLiquidityRecovered;\\n\\n        // the amount to reward the user upon closing of the swap\\n        uint256 redeemableFunds;\\n\\n        // the user won the swap\\n        if (ammToPay > userToPay) {\\n            // ensure the payout does not exceed the active liquidity for this swap\\n            payout = Math.min(payout, swap.activeLiquidity);\\n\\n            // active liquidity recovered is the the total active liquidity reduced by the user's payout\\n            activeLiquidityRecovered = swap.activeLiquidity.sub(payout);\\n\\n            // User can redeem all of swap collateral, all of supplementary collateral, and the payout\\n            redeemableFunds = swap.swapCollateral.add(supplementaryCollateral).add(payout);\\n        }\\n\\n        // the AMM won the swap\\n        else if (ammToPay < userToPay) {\\n            // ensure the payout does not exceed the swap collateral for this swap\\n            payout = Math.min(payout, swap.swapCollateral);\\n\\n            // active liquidity recovered is the the total active liquidity increased by the amm's payout\\n            activeLiquidityRecovered = swap.activeLiquidity.add(payout);\\n\\n            // user can redeem all of swap collateral, all of supplementary collateral, with the payout subtracted\\n            redeemableFunds = swap.swapCollateral.add(supplementaryCollateral).sub(payout);\\n        }\\n\\n        // neither party won the swap\\n        else {\\n            // active liquidity recovered is the the initial active liquidity for the trade\\n            activeLiquidityRecovered = swap.activeLiquidity;\\n\\n            // user can redeem all of swap collateral and all of supplementary collateral\\n            redeemableFunds = swap.swapCollateral.add(supplementaryCollateral);\\n        }\\n\\n        // update the total active liquidity\\n        totalActiveLiquidity = totalActiveLiquidity.sub(swap.activeLiquidity);\\n\\n        // update the total swap collateral\\n        totalSwapCollateral = totalSwapCollateral.sub(swap.swapCollateral);\\n\\n        // update the total supplementary collateral\\n        totalSupplementaryCollateral = totalSupplementaryCollateral.sub(supplementaryCollateral);\\n\\n        // update the total available liquidity\\n        totalAvailableLiquidity = totalAvailableLiquidity.add(activeLiquidityRecovered);\\n\\n        // close the swap\\n        swaps[swapKey].isClosed = true;\\n\\n        // calculate the new pool utilization\\n        utilization = _calculateUtilization();\\n\\n        // calculate the new fixed interest rate\\n        fixedRate = _calculateFixedRate();\\n\\n        // transfer redeemable funds to the user\\n        IERC20(underlier).safeTransfer(\\n            msg.sender, \\n            _convertToUnderlierDecimal(redeemableFunds)\\n        );\\n\\n        // emit a close swap event\\n        emit CloseSwap(msg.sender, swap.notional, userToPay, ammToPay, swap.fixedRate);\\n\\n        return true;\\n    }\\n\\n    // ============ Deposit liquidity into the pool ============\\n\\n    function depositLiquidity(uint256 _liquidityAmount) external override returns (bool) {\\n\\n        // adjust liquidity amount to standard decimals\\n        uint256 adjustedLiquidityAmount = _convertToStandardDecimal(_liquidityAmount);\\n\\n        // asert that liquidity amount must be greater than 0 and amount to less than the max deposit limit\\n        require(adjustedLiquidityAmount > 0 && adjustedLiquidityAmount.add(totalActiveLiquidity).add(totalAvailableLiquidity) <= maxDepositLimit, '14');\\n\\n        // transfer the specified amount of underlier into the pool\\n        IERC20(underlier).safeTransferFrom(msg.sender, address(this), _liquidityAmount);\\n\\n        // add to the total available liquidity in the pool\\n        totalAvailableLiquidity = totalAvailableLiquidity.add(adjustedLiquidityAmount);\\n\\n        // update the most recent deposit block of the liquidity provider\\n        liquidityProviderLastDeposit[msg.sender] = block.number;\\n\\n        // calculate the new pool utilization\\n        utilization = _calculateUtilization();\\n\\n        // calculate the new fixed interest rate\\n        fixedRate = _calculateFixedRate();\\n\\n        // mint LP tokens to the liiquidity provider\\n        _mintLPTokens(msg.sender, adjustedLiquidityAmount);\\n\\n        // emit deposit liquidity event\\n        emit DepositLiquidity(msg.sender, adjustedLiquidityAmount);\\n\\n        return true;\\n    }\\n\\n\\n    // ============ Withdraw liquidity into the pool ============\\n\\n    function withdrawLiquidity(uint256 _liquidityTokenAmount) external override returns (bool) {\\n        // assert that withdrawal does not occur in the same block as a deposit\\n        require(liquidityProviderLastDeposit[msg.sender] < block.number, '19');\\n\\n        // asert that liquidity amount must be greater than 0\\n        require(_liquidityTokenAmount > 0, '14');\\n\\n        // transfer the liquidity tokens from sender to the pool\\n        IERC20(address(this)).safeTransferFrom(msg.sender, address(this), _liquidityTokenAmount);\\n\\n        // determine the amount of underlying tokens that the liquidity tokens can be redeemed for\\n        uint256 redeemableUnderlyingTokens = calculateLiquidityTokenValue(_liquidityTokenAmount);\\n\\n        // assert that there is enough available liquidity to safely withdraw this amount\\n        require(totalAvailableLiquidity >= redeemableUnderlyingTokens, '10');\\n\\n        // the fees that this withdraw will yield (total fees accrued * withdraw amount / total liquidity provided)\\n        uint256 feeShare = totalFees.mul(redeemableUnderlyingTokens).div(totalActiveLiquidity.add(totalAvailableLiquidity));\\n\\n        // update the total fees remaining in the pool\\n        totalFees = totalFees.sub(feeShare);\\n\\n        // remove the withdrawn amount from  the total available liquidity in the pool\\n        totalAvailableLiquidity = totalAvailableLiquidity.sub(redeemableUnderlyingTokens);\\n\\n        // calculate the new pool utilization\\n        utilization = _calculateUtilization();\\n\\n        // calculate the new fixed interest rate\\n        fixedRate = _calculateFixedRate();\\n\\n        // burn LP tokens and redeem underlying tokens to the liiquidity provider\\n        _burnLPTokens(msg.sender, _liquidityTokenAmount);\\n\\n        // emit withdraw liquidity event\\n        emit WithdrawLiquidity(msg.sender, _liquidityTokenAmount, feeShare);\\n\\n        return true;\\n    }\\n\\n    // ============ Liquidate a swap that has expired ============\\n \\n    function liquidate(address _user, uint256 _swapNumber) external override returns (bool) {\\n        // the key of the swap\\n        bytes32 swapKey = keccak256(abi.encode(_user, _swapNumber));\\n\\n        // assert that a swap exists for this user\\n        require(swaps[swapKey].user == _user, '11');\\n\\n        // get the swap to be liquidated\\n        Swap memory swap = swaps[swapKey];\\n\\n        // assert that the swap has not already been closed\\n        require(!swap.isClosed, '12');\\n\\n        // the expiration block of the swap\\n        uint256 expirationBlock = swap.openBlock.add(durationInDays.mul(BLOCKS_PER_DAY));\\n\\n        // assert that the swap has eclipsed the expiration block\\n        require(block.number >= expirationBlock, '17');\\n        \\n        // transfer trade active liquidity from the liquidator\\n        IERC20(underlier).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _convertToUnderlierDecimal(swap.activeLiquidity)\\n        );\\n\\n        // the amounts that the user and the AMM will pay on this swap, depending on the direction of the swap\\n        (uint256 userToPay, uint256 ammToPay) =_calculateInterestAccrued(swap);\\n\\n        // the total payout for this swap\\n        uint256 payout = userToPay > ammToPay ? userToPay.sub(ammToPay) : ammToPay.sub(userToPay);\\n\\n        // the supplementary collateral of this swap\\n        uint256 supplementaryCollateral = swap.activeLiquidity;\\n\\n        // the active liquidity recovered upon liquidation of this swap\\n        uint256 activeLiquidityRecovered;\\n\\n        // the amount to reward the liquidator upon liquidation of the swap\\n        uint256 liquidatorReward;\\n\\n        // the user won the swap\\n        if (ammToPay > userToPay) {\\n            // ensure the payout does not exceed the active liquidity for this swap\\n            payout = Math.min(payout, swap.activeLiquidity);\\n\\n            // active liquidity recovered is the the total active liquidity increased by the user's unclaimed payout\\n            activeLiquidityRecovered = swap.activeLiquidity.add(payout);\\n\\n            // liquidator is rewarded the supplementary collateral and the difference between the swap collateral and the payout\\n            liquidatorReward = supplementaryCollateral.add(swap.swapCollateral).sub(payout);\\n        }\\n\\n        // the AMM won the swap\\n        else if (ammToPay < userToPay) {\\n            // ensure the payout does not exceed the swap collateral for this swap\\n            payout = Math.min(payout, swap.swapCollateral);\\n            \\n            // active liquidity recovered is the the total active liquidity increased by the entire swap collateral\\n            activeLiquidityRecovered = swap.activeLiquidity.add(swap.swapCollateral);\\n\\n            // liquidator is rewarded all of the supplementary collateral\\n            liquidatorReward = supplementaryCollateral;\\n        }\\n\\n        // neither party won the swap\\n        else {\\n            // active liquidity recovered is the the total active liquidity for this swap\\n            activeLiquidityRecovered = swap.activeLiquidity;\\n\\n            // liquidator is rewarded all of the supplementary collateral and the swap collateral\\n            liquidatorReward = supplementaryCollateral.add(swap.swapCollateral);\\n        }\\n\\n        // update the total active liquidity\\n        totalActiveLiquidity = totalActiveLiquidity.sub(swap.activeLiquidity);\\n\\n        // update the total swap collateral\\n        totalSwapCollateral = totalSwapCollateral.sub(swap.swapCollateral);\\n\\n        // update the total supplementary collateral\\n        totalSupplementaryCollateral = totalSupplementaryCollateral.sub(supplementaryCollateral);\\n\\n        // update the total available liquidity\\n        totalAvailableLiquidity = totalAvailableLiquidity.add(activeLiquidityRecovered);\\n\\n        // close the swap\\n        swaps[swapKey].isClosed = true;\\n\\n        // calculate the new pool utilization\\n        utilization = _calculateUtilization();\\n\\n        // calculate the new fixed interest rate\\n        fixedRate = _calculateFixedRate();\\n\\n        // transfer liquidation reward to the liquidator\\n        IERC20(underlier).safeTransfer(\\n            msg.sender, \\n            _convertToUnderlierDecimal(liquidatorReward)\\n        );\\n\\n        // emit liquidate event\\n        emit Liquidate(msg.sender, _user, _swapNumber, liquidatorReward);\\n\\n        return true;\\n    }\\n\\n    // ============ External view for the interest accrued on a variable rate ============\\n\\n    function calculateVariableInterestAccrued(uint256 _notional, uint256 _borrowIndex) external view override returns (uint256) {\\n        return _calculateVariableInterestAccrued(_notional, _borrowIndex);\\n    }\\n\\n    // ============ External view for the interest accrued on a fixed rate ============\\n\\n    function calculateFixedInterestAccrued(uint256 _notional, uint256 _fixedRate, uint256 _openBlock) external view override returns (uint256) {\\n        return _calculateFixedInterestAccrued(_notional, _fixedRate, _openBlock);\\n    }\\n\\n    // ============ Calculates the fixed rate offered ============\\n\\n    function calculateFixedRate() external view returns (uint256) {\\n        return _calculateFixedRate();\\n    }\\n\\n    // ============ Calculates the max variable rate to pay ============\\n\\n    function calculateMaxVariableRate() external view returns (uint256) {\\n        return _calculateMaxVariableRate();\\n    }\\n\\n    // ============ Calculates the current variable rate for the underlier ============\\n\\n    function calculateVariableRate() external view returns (uint256) {\\n        \\n        // get the borrow rate from the adapter\\n        return IAdapter(adapter).getBorrowRate(underlier);\\n    }\\n\\n    // ============ Allows governance to change the max deposit limit ============\\n\\n    function changeMaxDepositLimit(uint256 _limit) external {\\n\\n        // assert that only governance can adjust the deposit limit\\n        require(msg.sender == GOVERNANCE, '18');\\n\\n        // change the deposit limit\\n        maxDepositLimit = _limit;\\n    }\\n\\n    // ============ Calculates the current approximate value of liquidity tokens denoted in the underlying token ============\\n\\n    function calculateLiquidityTokenValue(uint256 liquidityTokenAmount) public view returns (uint256 redeemableUnderlyingTokens) {\\n\\n        // get the total underlying token balance in this pool with supplementary and swap collateral amounts excluded\\n        uint256 adjustedUnderlyingTokenBalance = _convertToStandardDecimal(IERC20(underlier).balanceOf(address(this)))\\n                                                    .sub(totalSwapCollateral)\\n                                                    .sub(totalSupplementaryCollateral);\\n\\n        // the total supply of LP tokens in circulation\\n        uint256 _totalSupply = totalSupply();\\n\\n        // determine the amount of underlying tokens that the liquidity tokens can be redeemed for\\n        redeemableUnderlyingTokens = liquidityTokenAmount.mul(adjustedUnderlyingTokenBalance).div(_totalSupply);\\n    }\\n\\n    // ============ Internal methods ============\\n\\n    // ============ Mints LP tokens to users that deposit liquidity to the protocol ============\\n\\n    function _mintLPTokens(address to, uint256 underlyingTokenAmount) internal {\\n\\n        // the total supply of LP tokens in circulation\\n        uint256 _totalSupply = totalSupply();\\n\\n        // determine the amount of LP tokens to mint\\n        uint256 mintableLiquidity;\\n\\n        if (_totalSupply == 0) {\\n            // initialize the supply of LP tokens\\n            mintableLiquidity = underlyingTokenAmount;\\n        } \\n        \\n        else {\\n            // get the total underlying token balance in this pool\\n            uint256 underlyingTokenBalance = _convertToStandardDecimal(IERC20(underlier).balanceOf(address(this)));\\n                                                \\n            // adjust the underlying token balance to standardize the decimals\\n            // the supplementary collateral, swap collateral, and newly added liquidity amounts are excluded\\n            uint256 adjustedUnderlyingTokenBalance = underlyingTokenBalance\\n                                                        .sub(totalSwapCollateral)\\n                                                        .sub(totalSupplementaryCollateral)\\n                                                        .sub(underlyingTokenAmount);\\n\\n            // mint a proportional amount of LP tokens\\n            mintableLiquidity = underlyingTokenAmount.mul(_totalSupply).div(adjustedUnderlyingTokenBalance);\\n        }\\n\\n        // assert that enough liquidity tokens are available to be minted\\n        require(mintableLiquidity > 0, 'INSUFFICIENT_LIQUIDITY_MINTED');\\n\\n        // mint the tokens directly to the LP\\n        _mint(to, mintableLiquidity);\\n\\n        // emit minting of LP token event\\n        emit Mint(to, underlyingTokenAmount, mintableLiquidity);\\n    }\\n\\n    // ============ Burns LP tokens and sends users the equivalent underlying tokens in return ============\\n\\n    function _burnLPTokens(address to, uint256 liquidityTokenAmount) internal {\\n\\n        // determine the amount of underlying tokens that the liquidity tokens can be redeemed for\\n        uint256 redeemableUnderlyingTokens = calculateLiquidityTokenValue(liquidityTokenAmount);\\n\\n        // assert that enough underlying tokens are available to send to the redeemer\\n        require(redeemableUnderlyingTokens > 0, 'INSUFFICIENT_LIQUIDITY_BURNED');\\n\\n        // burn the liquidity tokens\\n        _burn(address(this), liquidityTokenAmount);\\n\\n        // transfer the underlying tokens\\n        IERC20(underlier).safeTransfer(to, _convertToUnderlierDecimal(redeemableUnderlyingTokens));\\n\\n        // emit burning of LP token event\\n        emit Mint(to, redeemableUnderlyingTokens, liquidityTokenAmount);\\n    }\\n\\n    // ============ Calculates the fixed rate offered ============\\n\\n    function _calculateFixedRate() internal view returns (uint256) {\\n\\n        // the new fixed rate based on updated pool utilization\\n        uint256 newFixedRate;\\n\\n        // the rate offered before the utilization inflection is hit\\n        int256 preInflectionLeg;\\n        \\n        // the pool is long\\n        if (direction == 0) {\\n            // (utilization * rate sensitivity) + rate limit\\n            preInflectionLeg = int256(utilization.mul(rateSensitivity).div(TEN_EXP_18).add(rateLimit));\\n        }\\n        \\n        // the pool is short\\n        else {\\n            // rate limit - (utilization * rate sensitivity)\\n            preInflectionLeg = int256(rateLimit) - int256(utilization.mul(rateSensitivity).div(TEN_EXP_18));\\n        }\\n\\n        // pool utilization is below the inflection\\n        if (utilization < utilizationInflection) {\\n            // assert that the leg is positive before converting to uint256\\n            require(preInflectionLeg > 0);\\n\\n            newFixedRate = uint256(preInflectionLeg);\\n        }\\n\\n        // pool utilization is at or above the inflection\\n        else {\\n            // The additional change in the rate after the utilization inflection is hit\\n            // rate multiplier * (utilization - utilization inflection)\\n            int256 postInflectionLeg = int256(rateMultiplier.mul(utilization.sub(utilizationInflection)).div(TEN_EXP_18));\\n\\n            // assert that the addition of the legs is positive before converting to uint256\\n            require(preInflectionLeg + postInflectionLeg > 0);\\n\\n            newFixedRate = uint256(preInflectionLeg + postInflectionLeg);\\n        }\\n\\n        // adjust the fixed rate as a percentage\\n        return newFixedRate.div(100);\\n    }\\n\\n    // ============ Calculates the pool utilization ============\\n\\n    function _calculateUtilization() internal view returns (uint256) {\\n\\n        // get the total liquidity of this pool\\n        uint256 totalPoolLiquidity = totalActiveLiquidity.add(totalAvailableLiquidity);\\n\\n        // pool utilization is the total active liquidity / total pool liquidity\\n        uint256 newUtilization = totalActiveLiquidity.mul(TEN_EXP_18).div(totalPoolLiquidity);\\n\\n        // adjust utilization to be an integer between 0 and 100\\n        uint256 adjustedUtilization = newUtilization * 100;\\n\\n        return adjustedUtilization;\\n    }\\n\\n    // ============ Calculates the swap collateral and active liquidity needed for a given notional ============\\n\\n    function _calculateSwapCollateralAndActiveLiquidity(uint256 _notional) internal view returns (uint256, uint256) {\\n        // The maximum rate the user will pay on a swap\\n        uint256 userMaxRateToPay = direction == 0 ? fixedRate : _calculateMaxVariableRate();\\n\\n        // the maximum rate the AMM will pay on a swap\\n        uint256 ammMaxRateToPay = direction == 1 ? fixedRate : _calculateMaxVariableRate();\\n\\n        // notional * maximum rate to pay * (swap duration in days / days per year)\\n        uint256 swapCollateral = _calculateMaxAmountToPay(_notional, userMaxRateToPay);\\n        uint256 activeLiquidity = _calculateMaxAmountToPay(_notional, ammMaxRateToPay);\\n\\n        return (swapCollateral, activeLiquidity);\\n    }\\n\\n    // ============ Calculates the maximum amount to pay over a specific time window with a given notional and rate ============\\n\\n    function _calculateMaxAmountToPay(uint256 _notional, uint256 _rate) internal view returns (uint256) {\\n        // the period by which to adjust the rate\\n        uint256 period = DAYS_PER_YEAR.div(durationInDays);\\n\\n        // notional * maximum rate to pay / (days per year / swap duration in days)\\n        return _notional.mul(_rate).div(TEN_EXP_18).div(period);\\n    }\\n\\n    // ============ Calculates the maximum variable rate ============\\n\\n    function _calculateMaxVariableRate() internal view returns (uint256) {\\n        // use the current variable rate for the underlying token\\n        uint256 variableRate = IAdapter(adapter).getBorrowRate(underlier);\\n\\n        // calculate a variable rate buffer \\n        uint256 maxBuffer = MAX_TO_PAY_BUFFER_NUMERATOR.mul(TEN_EXP_18).div(MAX_TO_PAY_BUFFER_DENOMINATOR);\\n        \\n        // add the buffer to the current variable rate\\n        return variableRate.add(maxBuffer);\\n    }\\n\\n    // ============ Calculates the interest accrued for both parties on a swap ============\\n\\n    function _calculateInterestAccrued(Swap memory _swap) internal view returns (uint256, uint256) {\\n        // the amounts that the user and the AMM will pay on this swap, depending on the direction of the swap\\n        uint256 userToPay;\\n        uint256 ammToPay;\\n\\n        // the fixed interest accrued on this swap\\n        uint256 fixedInterestAccrued = _calculateFixedInterestAccrued(_swap.notional, _swap.fixedRate, _swap.openBlock);\\n\\n        // the variable interest accrued on this swap\\n        uint256 variableInterestAccrued = _calculateVariableInterestAccrued(_swap.notional, _swap.underlierBorrowIndex);\\n\\n        // user went long on the variable rate\\n        if (direction == 0) {\\n            userToPay = fixedInterestAccrued;\\n            ammToPay = variableInterestAccrued;\\n        } \\n\\n        // user went short on the variable rate\\n        else {\\n            userToPay = variableInterestAccrued;\\n            ammToPay = fixedInterestAccrued;\\n        }\\n\\n        return (userToPay, ammToPay);\\n    }\\n\\n    // ============ Calculates the interest accrued on a fixed rate ============\\n\\n    function _calculateFixedInterestAccrued(uint256 _notional, uint256 _fixedRate, uint256 _openBlock) internal view returns (uint256) {\\n        // the period of the fixed interest accrued\\n        uint256 period = durationInDays.mul(TEN_EXP_18).div(DAYS_PER_YEAR);\\n\\n        // notional * fixed rate * (swap duration / days in year)\\n        uint256 maxFixedInterest = _notional.mul(_fixedRate).div(TEN_EXP_18).mul(period).div(TEN_EXP_18);\\n\\n        // the blocks that have elapsed since the swap was opened\\n        uint256 blocksElapsed = block.number.sub(_openBlock);\\n\\n        // the total blocks in a swap\\n        uint256 totalBlocksInSwapDuration = durationInDays.mul(BLOCKS_PER_DAY);\\n\\n        // the percentage that the swap has matured\\n        // safeguard against blocks elapsed potentially being bigger than the total blocks in the swap\\n        uint256 swapMaturity = blocksElapsed < totalBlocksInSwapDuration ? blocksElapsed.mul(TEN_EXP_18).div(totalBlocksInSwapDuration) : TEN_EXP_18;\\n\\n        // the max fixed amount one can pay in a full swap * the maturity percentage of the swap\\n        return maxFixedInterest.mul(swapMaturity).div(TEN_EXP_18);\\n    }\\n\\n    // ============ Calculates the interest accrued on a variable rate ============\\n\\n    function _calculateVariableInterestAccrued(uint256 _notional, uint256 _openSwapBorrowIndex) internal view returns (uint256) {\\n        // get the current borrow index of the underlying asset\\n        uint256 currentBorrowIndex = IAdapter(adapter).getBorrowIndex(underlier);\\n\\n        // The ratio between the current borrow index and the borrow index at time of open swap\\n        uint256 indexRatio = currentBorrowIndex.mul(TEN_EXP_18).div(_openSwapBorrowIndex);\\n\\n        // notional * (current borrow index / borrow index when swap was opened) - notional\\n        return _notional.mul(indexRatio).div(TEN_EXP_18).sub(_notional);\\n    }\\n\\n    // ============ Converts an amount to have the contract standard number of decimals ============\\n\\n    function _convertToStandardDecimal(uint256 _amount) internal view returns (uint256) {\\n\\n        // set adjustment direction to false to convert to standard pool decimals\\n        return _convertToDecimal(_amount, true);\\n    }\\n\\n\\n    // ============ Converts an amount to have the underlying token's number of decimals ============\\n\\n    function _convertToUnderlierDecimal(uint256 _amount) internal view returns (uint256) {\\n\\n        // set adjustment direction to true to convert to underlier decimals\\n        return _convertToDecimal(_amount, false);\\n    }\\n\\n    // ============ Converts an amount to have a particular number of decimals ============\\n\\n    function _convertToDecimal(uint256 _amount, bool _adjustmentDirection) internal view returns (uint256) {\\n        // the amount after it has been converted to have the underlier number of decimals\\n        uint256 convertedAmount;\\n\\n        // the underlying token has less decimal places\\n        if (underlierDecimals < STANDARD_DECIMALS) {\\n            convertedAmount = _adjustmentDirection ? _amount.mul(10 ** decimalDifference) : _amount.div(10 ** decimalDifference);\\n        }\\n\\n        // there is no difference in the decimal places\\n        else {\\n            convertedAmount = _amount;\\n        }\\n\\n        return convertedAmount;\\n    }\\n\\n    // ============ Calculates the difference between the underlying decimals and the standard decimals ============\\n\\n    function _calculatedDecimalDifference(uint256 _x_decimal, uint256 _y_decimal) internal pure returns (uint256) {\\n        // the difference in decimals\\n        uint256 difference;\\n\\n        // the second decimal is greater\\n        if (_x_decimal < _y_decimal) {\\n            difference = _y_decimal.sub(_x_decimal);\\n        }\\n\\n        return difference;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity 0.7.6;\\n\\ninterface IPool {\\n    function openSwap(uint256 _notional) external returns (bool);\\n    function closeSwap(uint256 _swapNumber) external returns (bool);\\n    function depositLiquidity(uint256 _liquidityAmount) external returns (bool);\\n    function withdrawLiquidity(uint256 _liquidityAmount) external returns (bool);\\n    function liquidate(address _user, uint256 _swapNumber) external returns (bool);\\n    function calculateVariableInterestAccrued(uint256 _notional, uint256 _borrowIndex) external view returns (uint256);\\n    function calculateFixedInterestAccrued(uint256 _notional, uint256 _fixedRate, uint256 _openBlock) external view returns (uint256);\\n}\"\r\n    },\r\n    \"interfaces/IAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity >=0.6.12;\\n\\n\\ninterface IAdapter {\\n    function getBorrowIndex(address underlier) external view returns (uint256);\\n    function getBorrowRate(address underlier) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/GreenwoodERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity 0.7.6;\\n\\n// ============ Contract information ============\\n\\n/**\\n * @title  Greenwood LP token\\n * @notice An LP token for Greenwood Basis Swaps\\n * @author Greenwood Labs\\n */\\n\\n // ============ Imports ============\\n\\nimport '../interfaces/IGreenwoodERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\n\\ncontract GreenwoodERC20 is IGreenwoodERC20 {\\n    // ============ Import usage ============\\n\\n    using SafeMath for uint256;\\n\\n    // ============ Immutable storage ============\\n\\n    string public constant override name = 'Greenwood';\\n    string public constant override symbol = 'GRN';\\n    uint256 public constant override decimals = 18;\\n\\n    // ============ Mutable storage ============\\n\\n    uint256 private _totalSupply;\\n\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    // ============ Events ============\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    // ============ Constructor ============\\n\\n    constructor() {}\\n\\n    // ============ External methods ============\\n\\n    // ============ Returns the amount of tokens in existence ============\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    // ============ Returns the amount of tokens owned by `account` ============\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    // ============ Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` ============\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    // ============ Sets `amount` as the allowance of `spender` over the caller's tokens ============\\n\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    // ============ Moves `amount` tokens from the caller's account to `recipient` ============\\n\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    // ============ Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism ============\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, 'GreenwoodERC20: transfer amount exceeds allowance'));\\n        return true;\\n    }\\n\\n    // ============ Internal methods ============\\n\\n    // ============ Creates `amount` tokens and assigns them to `account`, increasing the total supply ============\\n\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), 'GreenwoodERC20: mint to the zero address');\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    // ============ Destroys `amount` tokens from `account`, reducing the total supply ============\\n\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), 'GreenwoodERC20: burn from the zero address');\\n\\n        _balances[account] = _balances[account].sub(amount, 'GreenwoodERC20: burn amount exceeds balance');\\n        _totalSupply = _totalSupply.sub(amount);\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    // ============ Sets `amount` as the allowance of `spender` over the tokens of the `owner` ============\\n\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), 'GreenwoodERC20: approve from the zero address');\\n        require(spender != address(0), 'GreenwoodERC20: approve to the zero address');\\n\\n        _allowances[owner][spender] = amount;\\n\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    // ============ Moves tokens `amount` from `sender` to `recipient` ============\\n\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), 'GreenwoodERC20: transfer from the zero address');\\n        require(recipient != address(0), 'GreenwoodERC20: transfer to the zero address');\\n\\n        _balances[sender] = _balances[sender].sub(amount, 'GreenwoodERC20: transfer amount exceeds balance');\\n        _balances[recipient] = _balances[recipient].add(amount);\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/IGreenwoodERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity 0.7.6;\\n\\ninterface IGreenwoodERC20 {\\n    function name() external pure returns (string memory); \\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    \\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_underlierDecimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_protocol\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_direction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_durationInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rateLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rateSensitivity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_utilizationInflection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rateMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_poolDeployer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"notional\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userToPay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ammToPay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fixedRate\",\"type\":\"uint256\"}],\"name\":\"CloseSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityAmount\",\"type\":\"uint256\"}],\"name\":\"DepositLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidatorReward\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"notional\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activeLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fixedRate\",\"type\":\"uint256\"}],\"name\":\"OpenSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feesAccrued\",\"type\":\"uint256\"}],\"name\":\"WithdrawLiquidity\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_notional\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fixedRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_openBlock\",\"type\":\"uint256\"}],\"name\":\"calculateFixedInterestAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateFixedRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityTokenAmount\",\"type\":\"uint256\"}],\"name\":\"calculateLiquidityTokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemableUnderlyingTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateMaxVariableRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_notional\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowIndex\",\"type\":\"uint256\"}],\"name\":\"calculateVariableInterestAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateVariableRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"changeMaxDepositLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapNumber\",\"type\":\"uint256\"}],\"name\":\"closeSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalDifference\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityAmount\",\"type\":\"uint256\"}],\"name\":\"depositLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"direction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"durationInDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fixedRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_swapNumber\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityProviderLastDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDepositLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_notional\",\"type\":\"uint256\"}],\"name\":\"openSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateSensitivity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapNumbers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"swaps\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"notional\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlierBorrowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalActiveLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAvailableLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplementaryCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSwapCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlierDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilizationInflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityTokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Pool","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000006000000000000000000000000888d6a7ab9a8a6cbe884f6e7e90adf1e24d247c300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000002c68af0bb140000000000000000000000000000000000000000000000000004e1003b28d928000000000000000000000000000000000000000000000000000053444835ec580000000000000000000000000000bf469ba05900e3c50a7aed5074da5353bca79199","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}