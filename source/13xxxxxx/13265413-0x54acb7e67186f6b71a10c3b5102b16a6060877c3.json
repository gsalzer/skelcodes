{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/governance/GRODistributer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPLv3\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IToken {\\n    function mint(address _receiver, uint256 _amount) external;\\n    function burn(address _receiver, uint256 _amount) external;\\n}\\n\\ncontract GRODistributer is Ownable {\\n    \\n    enum pool { NONE, DAO, INVESTOR, TEAM, COMMUNITY }\\n    // Limits for token minting\\n    uint256 public constant DEFAULT_FACTOR = 1E18;\\n    // Amount dedicated to the dao\\n    uint256 public constant DAO_QUOTA = 8_000_000 * DEFAULT_FACTOR;\\n    // Amount dedicated to the investor group\\n    uint256 public constant INVESTOR_QUOTA = 19_490_577 * DEFAULT_FACTOR;\\n    // Amount dedicated to the team\\n    uint256 public constant TEAM_QUOTA = 22_509_423 * DEFAULT_FACTOR;\\n    // Amount dedicated to the community\\n    uint256 public constant COMMUNITY_QUOTA = 45_000_000 * DEFAULT_FACTOR;\\n\\n    IToken public immutable govToken; \\n    address public daoMinter;\\n    // contracts that are allowed to mint, and which pool they can mint from\\n    mapping(address => uint256) public vesters;\\n    // contracts that are allowed to burn\\n    mapping(address => bool) public burners;\\n    // pool with minting limits for vesters\\n    mapping(pool => uint256) public mintingPools;\\n\\n    constructor(\\n        address token,\\n        address _dao\\n    ) {\\n        govToken = IToken(token);\\n        mintingPools[pool.DAO] = DAO_QUOTA;\\n        mintingPools[pool.INVESTOR] = INVESTOR_QUOTA;\\n        mintingPools[pool.TEAM] = TEAM_QUOTA;\\n        mintingPools[pool.COMMUNITY] = COMMUNITY_QUOTA;\\n        transferOwnership(_dao);\\n    }\\n\\n    // @dev Set vester contracts that can mint tokens\\n    // @param vesters target contract\\n    // @param status add/remove from vester role\\n    function setVester(address vester, uint256 role) external onlyOwner {\\n        require(!burners[vester], 'setVester: burner cannot be vester');\\n        // Can only have one daoVester\\n        if (role == 1) {\\n            vesters[daoMinter] = 0;\\n            daoMinter = vester;\\n        }\\n        vesters[vester] = role;\\n    }\\n\\n    // @dev Set burner contracts, that can burn tokens\\n    // @param burner target contract\\n    // @param status add/remove from burner pool\\n    function setBurner(address burner, bool status) external onlyOwner {\\n        require(vesters[burner] == 0, 'setBurner: vester cannot be burner');\\n        burners[burner] = status;\\n    }\\n\\n    // @dev mint tokens - Reduces total allowance for minting pool\\n    // @param account account to mint for\\n    // @param amount amount to mint\\n    function mint(address account, uint256 amount) external {\\n        require(vesters[msg.sender] > 1, \\\"mint: msg.sender != vester\\\");\\n        uint256 poolId = vesters[msg.sender];\\n        if (poolId > 4) {\\n            poolId = 4;\\n        }\\n        mintingPools[pool(poolId)] = mintingPools[pool(poolId)] - amount;\\n        govToken.mint(account, amount);\\n    }\\n\\n    // @dev mintDao seperate minting function for dao vester - can mint from both\\n    //      community and dao quota\\n    // @param account account to mint for\\n    // @param amount amount to mint\\n    // @param pool pool whos' allowance to reduce\\n    function mintDao(address account, uint256 amount, bool community) external {\\n        require(vesters[msg.sender] == 1, \\\"mint: msg.sender != dao\\\");\\n        uint256 poolId = 1;\\n        if (community) {\\n            poolId = 4;\\n        }\\n        mintingPools[pool(poolId)] = mintingPools[pool(poolId)] - amount;\\n        govToken.mint(account, amount);\\n    }\\n\\n    // @dev burn tokens - adds allowance to community pool\\n    // @param account account whos' tokens to burn\\n    // @param amount amount to burn\\n    function burn(address account, uint256 amount) external {\\n        require(burners[msg.sender], \\\"burn: msg.sender != burner\\\");\\n        govToken.burn(account, amount);\\n        mintingPools[pool(4)] = mintingPools[pool(4)] + amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COMMUNITY_QUOTA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_QUOTA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVESTOR_QUOTA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEAM_QUOTA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"burners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govToken\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"community\",\"type\":\"bool\"}],\"name\":\"mintDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum GRODistributer.pool\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"mintingPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"setVester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vesters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GRODistributer","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003ec8798b81485a254928b70cda1cf0a2bb0b74d7000000000000000000000000359f4fe841f246a095a82cb26f5819e10a91fe0d","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fe92d31a20c9e744dd98002f45e336940beb3d9e8ef8a1abe4402190a9cfc0ea"}]}