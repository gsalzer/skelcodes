{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n// File: contracts/Pineapple.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\n\r\n/**\r\n * ---------------------------------------------------------\r\n * WELCOME TO THE PINEAPPLE LOTTERY\r\n * The Lottery Master Wishes You All The Best\r\n * ---------------------------------------------------------\r\n */\r\n \r\ncontract Pineapple is Ownable {\r\n    address payable private _headPineapple;\r\n    address payable private _devPineapple;\r\n    \r\n    \r\n    uint public ticketsSold;\r\n    bool public isSaleOpen;\r\n    bool private _locked;\r\n    \r\n    uint public constant MAX_TICKETS = 2600;\r\n    uint public constant MAX_PURCHASE = 100;\r\n    uint256 private constant PAYMENT_GAS_LIMIT = 5000;\r\n    uint256 public constant PRICE_PER_TICKET = 12500000 gwei;\r\n    \r\n    mapping (uint => address) public ticketOwner;\r\n    mapping (address => uint) public ticketsPuchasedByAddress;\r\n    \r\n    bytes32 private _purchaseHash;\r\n    uint private _randomUint;\r\n    \r\n    mapping (string => uint[]) public winnerList; // This mapping is to track winners. Prize Position => Ticket Number\r\n    mapping (uint => bool) public selectedTickets; //This is to ensure ticket has not already been selected. Ticket Number => Prize position. IF !=0, then that ticket has already won something\r\n\r\n\r\n    \r\n    constructor () {\r\n        _headPineapple = payable(0xe4F3f40D41aaF11fC0d86B55De9F8F0cE3dfd1f4);\r\n        _devPineapple = payable(0xD3EFB591A0336037757a21e747C6c4E3e367dedA);\r\n        isSaleOpen = false;\r\n        _purchaseHash = keccak256(abi.encodePacked(block.difficulty, block.timestamp, msg.sender));\r\n        _randomUint = uint(keccak256(abi.encodePacked(block.coinbase, block.basefee, block.number)));\r\n    }\r\n    \r\n    // Event functions here\r\n    event Purchased(address indexed sender, uint[] ticketsBought);\r\n    event Giveaway(address indexed reciever, uint[] ticketsReceived);\r\n    event WinnerSelection(string indexed prize, uint[] ticketsSelected);\r\n    \r\n    // Setter functions here\r\n    function setIsPublicSalesOpen(bool status) public onlyOwner {\r\n        isSaleOpen = status;\r\n    }\r\n\r\n    // Getter function\r\n    function showWinningTickets (string calldata prize) public view returns (uint[] memory){\r\n        uint[] memory winningTicketsListing = winnerList[prize];\r\n        return winningTicketsListing;\r\n    }\r\n\r\n    \r\n    // Prevent function from being called while still being executed.\r\n    modifier functionLock() {\r\n        require(!_locked, \"Function Locked\");\r\n        _locked = true;\r\n        _;\r\n        _locked = false;\r\n    }\r\n    \r\n    // Buy Ticket Function. Remove onlyOwner\r\n    function buyTicket (uint ticketQty) public payable functionLock {\r\n        // Check that sale is open\r\n        require (isSaleOpen, \"Sale is not open\"); \r\n        \r\n        // Check that ticketsSold + ticketQty is less than MAX_TICKETS\r\n        require (ticketsSold + ticketQty <= MAX_TICKETS, \"Not enough tickets remaining\");\r\n        \r\n        // Check that ticketqty is less than  MAX_PURCHASE\r\n        require (ticketQty <= MAX_PURCHASE, \"Purchase qty > 100\");\r\n        \r\n        // Check that amount sent is equivalent to qty x PRICE_PER_TICKET\r\n        require (msg.value >= ticketQty*PRICE_PER_TICKET, \"Insufficient payment\"); \r\n        \r\n        // get how many tickets have been sold\r\n        uint currentTicket = ticketsSold + 1;\r\n        \r\n        // Track ticket numbers to emit event\r\n        uint[] memory purchasedTicketsArray = new uint[](ticketQty);\r\n        \r\n        // create tickets in ticket owner (based on how many have already been sold)\r\n        for (uint i = 0; i < ticketQty; i++){\r\n            ticketOwner[currentTicket + i] = msg.sender;\r\n            purchasedTicketsArray[i] = currentTicket + i;\r\n        }\r\n        \r\n        // add tickets to ticketsPuchasedByAddress (ensure to add any existing purchase tickets)\r\n        ticketsPuchasedByAddress[msg.sender] = ticketsPuchasedByAddress[msg.sender] + ticketQty;\r\n        \r\n        //add number purchased to tally of tickets sold\r\n        ticketsSold = ticketsSold + ticketQty;\r\n        \r\n        // calculate a purchase purchaseHash\r\n        _purchaseHash = bytes32(keccak256(abi.encodePacked(_purchaseHash, block.difficulty, block.timestamp, msg.sender)));\r\n        \r\n        // calculate amounts to transfer\r\n        uint devAmount = (msg.value / 10000) * 2000;\r\n        uint pineappleAmount = msg.value - devAmount;\r\n        \r\n        // transfer amounts to dev wallet\r\n        (bool devSuccess, ) = _devPineapple.call{ value:devAmount, gas: PAYMENT_GAS_LIMIT }(\"\");\r\n        require(devSuccess, \"Dev payment failed\");\r\n        \r\n        // transfer amounts to pineapple wallet\r\n        (bool pineappleSuccess, ) = _headPineapple.call{ value:pineappleAmount, gas: PAYMENT_GAS_LIMIT }(\"\");\r\n        require(pineappleSuccess, \"Pineapple payment failed\");\r\n        \r\n        emit Purchased(msg.sender, purchasedTicketsArray);\r\n\r\n    }\r\n    \r\n    // Bonus ticket giveaway. Ensure that its onlyOwner\r\n    function bonusGiveway (address[] calldata winnerAddress, uint giveawayQty) public onlyOwner functionLock {\r\n        // track winners number\r\n        uint winners = winnerAddress.length;\r\n        \r\n        // Check that ticketsSold + ticketQty is less than MAX_TICKETS\r\n        require (ticketsSold + (winners*giveawayQty) <= MAX_TICKETS, \"Not enough tickets remaining\");\r\n        \r\n        // get how many tickets have been sold\r\n        uint currentTicket = ticketsSold + 1;\r\n        \r\n        bytes32 hashGeneration = _purchaseHash;\r\n        \r\n        \r\n        // create tickets in ticket recipient (based on how many have already been sold)\r\n        for (uint i = 0; i < winners; i++){\r\n            address giveawayAddress = winnerAddress[i];\r\n            \r\n            // Track ticket numbers to emit event\r\n            uint[] memory giveawayTicketsArray = new uint[](giveawayQty);\r\n            \r\n            for (uint j = 0; j < giveawayQty; j++){\r\n                ticketOwner[currentTicket] = giveawayAddress;\r\n                giveawayTicketsArray[j] = currentTicket;\r\n                currentTicket++;\r\n            }\r\n            \r\n            // add tickets to ticketsPuchasedByAddress (ensure to add any existing purchase tickets)\r\n            ticketsPuchasedByAddress[giveawayAddress] = ticketsPuchasedByAddress[giveawayAddress] + giveawayQty;\r\n            \r\n            // Emit tickets given away for this address\r\n            emit Giveaway(giveawayAddress, giveawayTicketsArray);\r\n            \r\n            // calculate a purchase purchaseHash\r\n            hashGeneration = bytes32(keccak256(abi.encodePacked(hashGeneration, block.difficulty, block.timestamp, giveawayAddress)));\r\n        }\r\n        \r\n        //add number given away to tally of tickets sold\r\n        ticketsSold = ticketsSold + (winners*giveawayQty);\r\n        \r\n        _purchaseHash = hashGeneration;\r\n    }\r\n    \r\n    \r\n \r\n    // Generic function to determine winner. Aim to be called any number of times\r\n    function drawTicket (uint randomiserNumber, bytes32 randomHash) internal view returns(uint pickedTicket, bytes32 newGeneratedRandomHash) {\r\n        bytes32 newRandomHash;\r\n        uint pickTicket;\r\n        \r\n        for (int i = 0; i < 10; i++) {\r\n            newRandomHash = keccak256(abi.encodePacked(randomHash, block.difficulty, block.coinbase, randomiserNumber, i));\r\n            pickTicket = uint(newRandomHash)%ticketsSold;\r\n            \r\n            if (selectedTickets[pickTicket] == false && pickTicket != 0) {\r\n                return (pickTicket, newRandomHash);\r\n            } else if (pickTicket == 0 && selectedTickets[ticketsSold]) {\r\n                return (ticketsSold, newRandomHash);\r\n            }\r\n        } \r\n        \r\n        return (pickTicket, newRandomHash);\r\n    }\r\n    \r\n    \r\n    // Winner selector function. Use this to select any winner due to bug, as well as select Big Prize and Grand Prize\r\n    function winnerSelector(string memory prize, uint prizes) public onlyOwner functionLock {\r\n        // Ensure that all tickets are sold out or that the public sale has been closed\r\n        require (ticketsSold == MAX_TICKETS || isSaleOpen == false, \"Tickets not sold out or sale not yet closed\");\r\n        \r\n        // Ensure that prize position has not been allocated previously\r\n        require (winnerList[prize].length == 0, \"Winner for this place already allocated\");\r\n        \r\n        // get _purchaseHash\r\n        bytes32 generatorHash = _purchaseHash;\r\n        \r\n        // get a random number\r\n        uint generatorNumber = _randomUint;\r\n        \r\n        //Temporary storage for winner selection\r\n        uint[] memory selectedTicketsArray = new uint[](prizes);\r\n        \r\n        for (uint i = 0; i < prizes; i++){\r\n           // Draw the winning ticket\r\n           (uint selectedTicket, bytes32 newGeneratorHash) = drawTicket(generatorNumber, generatorHash);\r\n           \r\n           // store winning item in selectedTicketsArray\r\n           selectedTicketsArray[i] = selectedTicket;\r\n           \r\n           // store ticket in selectedTickets\r\n           selectedTickets[selectedTicket] = true;\r\n           \r\n           //update generatorHash & generatorNumber\r\n           generatorHash = newGeneratorHash;\r\n           generatorNumber = selectedTicket;\r\n          \r\n        }\r\n        \r\n        //Store winning list on winnerList\r\n        winnerList[prize] = selectedTicketsArray;\r\n        \r\n        //Emit tickets selectedTicketsArray\r\n        emit WinnerSelection(prize, selectedTicketsArray);\r\n        \r\n        // Update _purchaseHash _randomUint\r\n        _purchaseHash = generatorHash;\r\n        _randomUint = uint(keccak256(abi.encodePacked(block.coinbase, block.basefee, block.number)));\r\n        \r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reciever\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ticketsReceived\",\"type\":\"uint256[]\"}],\"name\":\"Giveaway\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ticketsBought\",\"type\":\"uint256[]\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"prize\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ticketsSelected\",\"type\":\"uint256[]\"}],\"name\":\"WinnerSelection\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_PURCHASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TICKETS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PER_TICKET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"winnerAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"giveawayQty\",\"type\":\"uint256\"}],\"name\":\"bonusGiveway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketQty\",\"type\":\"uint256\"}],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSaleOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"selectedTickets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setIsPublicSalesOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"prize\",\"type\":\"string\"}],\"name\":\"showWinningTickets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ticketsPuchasedByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketsSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winnerList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"prize\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"prizes\",\"type\":\"uint256\"}],\"name\":\"winnerSelector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Pineapple","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4ea42a461a608f249b66d8b04a3920066aefd58ce4800829333861ecbb647c9a"}]}