{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.8.6;\r\n\r\n\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\n\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\nlibrary SignatureVerifier {\r\n    function verify(\r\n        address signer,\r\n        address account,\r\n        uint256[] calldata ids,\r\n        bytes calldata signature\r\n    ) external pure returns (bool) {\r\n        bytes32 messageHash = getMessageHash(account, ids);\r\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\r\n\r\n        return recoverSigner(ethSignedMessageHash, signature) == signer;\r\n    }\r\n\r\n    function verify(\r\n        address signer,\r\n        uint256 id,\r\n        address[] calldata accounts,\r\n        bytes calldata signature\r\n    ) external pure returns (bool) {\r\n        bytes32 messageHash = getMessageHash(id, accounts);\r\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\r\n\r\n        return recoverSigner(ethSignedMessageHash, signature) == signer;\r\n    }\r\n\r\n    function getMessageHash(address account, uint256[] memory ids) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(account, ids));\r\n    }\r\n    function getMessageHash(uint256 id, address[] memory accounts) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(id, accounts));\r\n    }\r\n\r\n    function getEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", messageHash));\r\n    }\r\n\r\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature)\r\n        internal\r\n        pure\r\n        returns (address)\r\n    {\r\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\r\n\r\n        return ecrecover(_ethSignedMessageHash, v, r, s);\r\n    }\r\n\r\n    function splitSignature(bytes memory signature)\r\n        internal\r\n        pure\r\n        returns (\r\n            bytes32 r,\r\n            bytes32 s,\r\n            uint8 v\r\n        )\r\n    {\r\n        require(signature.length == 65, \"invalid signature length\");\r\n\r\n        //solium-disable-next-line\r\n        assembly {\r\n            r := mload(add(signature, 32))\r\n            s := mload(add(signature, 64))\r\n            v := byte(0, mload(add(signature, 96)))\r\n        }\r\n    }\r\n}\r\n\r\ncontract ModuleKeys {\r\n    // Governance\r\n    // ===========\r\n    // keccak256(\"Governance\");\r\n    bytes32 internal constant KEY_GOVERNANCE =\r\n        0x9409903de1e6fd852dfc61c9dacb48196c48535b60e25abf92acc92dd689078d;\r\n    //keccak256(\"Staking\");\r\n    bytes32 internal constant KEY_STAKING =\r\n        0x1df41cd916959d1163dc8f0671a666ea8a3e434c13e40faef527133b5d167034;\r\n    //keccak256(\"ProxyAdmin\");\r\n    bytes32 internal constant KEY_PROXY_ADMIN =\r\n        0x96ed0203eb7e975a4cbcaa23951943fa35c5d8288117d50c12b3d48b0fab48d1;\r\n\r\n    // mStable\r\n    // =======\r\n    // keccak256(\"OracleHub\");\r\n    bytes32 internal constant KEY_ORACLE_HUB =\r\n        0x8ae3a082c61a7379e2280f3356a5131507d9829d222d853bfa7c9fe1200dd040;\r\n    // keccak256(\"Manager\");\r\n    bytes32 internal constant KEY_MANAGER =\r\n        0x6d439300980e333f0256d64be2c9f67e86f4493ce25f82498d6db7f4be3d9e6f;\r\n    //keccak256(\"Recollateraliser\");\r\n    bytes32 internal constant KEY_RECOLLATERALISER =\r\n        0x39e3ed1fc335ce346a8cbe3e64dd525cf22b37f1e2104a755e761c3c1eb4734f;\r\n    //keccak256(\"MetaToken\");\r\n    bytes32 internal constant KEY_META_TOKEN =\r\n        0xea7469b14936af748ee93c53b2fe510b9928edbdccac3963321efca7eb1a57a2;\r\n    // keccak256(\"SavingsManager\");\r\n    bytes32 internal constant KEY_SAVINGS_MANAGER =\r\n        0x12fe936c77a1e196473c4314f3bed8eeac1d757b319abb85bdda70df35511bf1;\r\n    // keccak256(\"Liquidator\");\r\n    bytes32 internal constant KEY_LIQUIDATOR =\r\n        0x1e9cb14d7560734a61fa5ff9273953e971ff3cd9283c03d8346e3264617933d4;\r\n    // keccak256(\"InterestValidator\");\r\n    bytes32 internal constant KEY_INTEREST_VALIDATOR =\r\n        0xc10a28f028c7f7282a03c90608e38a4a646e136e614e4b07d119280c5f7f839f;\r\n}\r\n\r\ninterface INexus {\r\n    function governor() external view returns (address);\r\n\r\n    function getModule(bytes32 key) external view returns (address);\r\n\r\n    function proposeModule(bytes32 _key, address _addr) external;\r\n\r\n    function cancelProposedModule(bytes32 _key) external;\r\n\r\n    function acceptProposedModule(bytes32 _key) external;\r\n\r\n    function acceptProposedModules(bytes32[] calldata _keys) external;\r\n\r\n    function requestLockModule(bytes32 _key) external;\r\n\r\n    function cancelLockModule(bytes32 _key) external;\r\n\r\n    function lockModule(bytes32 _key) external;\r\n}\r\n\r\nabstract contract ImmutableModule is ModuleKeys {\r\n    INexus public immutable nexus;\r\n\r\n    /**\r\n     * @dev Initialization function for upgradable proxy contracts\r\n     * @param _nexus Nexus contract address\r\n     */\r\n    constructor(address _nexus) {\r\n        require(_nexus != address(0), \"Nexus address is zero\");\r\n        nexus = INexus(_nexus);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Governor.\r\n     */\r\n    modifier onlyGovernor() {\r\n        _onlyGovernor();\r\n        _;\r\n    }\r\n\r\n    function _onlyGovernor() internal view {\r\n        require(msg.sender == _governor(), \"Only governor can execute\");\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Governance.\r\n     *      Governance is either Governor address or Governance address.\r\n     */\r\n    modifier onlyGovernance() {\r\n        require(\r\n            msg.sender == _governor() || msg.sender == _governance(),\r\n            \"Only governance can execute\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns Governor address from the Nexus\r\n     * @return Address of Governor Contract\r\n     */\r\n    function _governor() internal view returns (address) {\r\n        return nexus.governor();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns Governance Module address from the Nexus\r\n     * @return Address of the Governance (Phase 2)\r\n     */\r\n    function _governance() internal view returns (address) {\r\n        return nexus.getModule(KEY_GOVERNANCE);\r\n    }\r\n\r\n    /**\r\n     * @dev Return SavingsManager Module address from the Nexus\r\n     * @return Address of the SavingsManager Module contract\r\n     */\r\n    function _savingsManager() internal view returns (address) {\r\n        return nexus.getModule(KEY_SAVINGS_MANAGER);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Recollateraliser Module address from the Nexus\r\n     * @return  Address of the Recollateraliser Module contract (Phase 2)\r\n     */\r\n    function _recollateraliser() internal view returns (address) {\r\n        return nexus.getModule(KEY_RECOLLATERALISER);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Liquidator Module address from the Nexus\r\n     * @return  Address of the Liquidator Module contract\r\n     */\r\n    function _liquidator() internal view returns (address) {\r\n        return nexus.getModule(KEY_LIQUIDATOR);\r\n    }\r\n\r\n    /**\r\n     * @dev Return ProxyAdmin Module address from the Nexus\r\n     * @return Address of the ProxyAdmin Module contract\r\n     */\r\n    function _proxyAdmin() internal view returns (address) {\r\n        return nexus.getModule(KEY_PROXY_ADMIN);\r\n    }\r\n}\r\n\r\nlibrary SafeCast {\r\n    /**\r\n     * @dev Returns the downcasted uint224 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint224).\r\n     *\r\n     * Counterpart to Solidity's `uint224` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 224 bits\r\n     */\r\n    function toUint224(uint256 value) internal pure returns (uint224) {\r\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\r\n        return uint224(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\r\n        return uint128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint96 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint96).\r\n     *\r\n     * Counterpart to Solidity's `uint96` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 96 bits\r\n     */\r\n    function toUint96(uint256 value) internal pure returns (uint96) {\r\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\r\n        return uint96(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\r\n        return uint64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\r\n        return uint32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\r\n        return uint16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\r\n        return uint8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0.\r\n     */\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int128 from int256, reverting on\r\n     * overflow (when the input is less than smallest int128 or\r\n     * greater than largest int128).\r\n     *\r\n     * Counterpart to Solidity's `int128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt128(int256 value) internal pure returns (int128) {\r\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\r\n        return int128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int64 from int256, reverting on\r\n     * overflow (when the input is less than smallest int64 or\r\n     * greater than largest int64).\r\n     *\r\n     * Counterpart to Solidity's `int64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt64(int256 value) internal pure returns (int64) {\r\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\r\n        return int64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int32 from int256, reverting on\r\n     * overflow (when the input is less than smallest int32 or\r\n     * greater than largest int32).\r\n     *\r\n     * Counterpart to Solidity's `int32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt32(int256 value) internal pure returns (int32) {\r\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\r\n        return int32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int16 from int256, reverting on\r\n     * overflow (when the input is less than smallest int16 or\r\n     * greater than largest int16).\r\n     *\r\n     * Counterpart to Solidity's `int16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt16(int256 value) internal pure returns (int16) {\r\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\r\n        return int16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int8 from int256, reverting on\r\n     * overflow (when the input is less than smallest int8 or\r\n     * greater than largest int8).\r\n     *\r\n     * Counterpart to Solidity's `int8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt8(int256 value) internal pure returns (int8) {\r\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\r\n        return int8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\r\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\r\n        return int256(value);\r\n    }\r\n}\r\n\r\nstruct Balance {\r\n    /// units of staking token that has been deposited and consequently wrapped\r\n    uint88 raw;\r\n    /// (block.timestamp - weightedTimestamp) represents the seconds a user has had their full raw balance wrapped.\r\n    /// If they deposit or withdraw, the weightedTimestamp is dragged towards block.timestamp proportionately\r\n    uint32 weightedTimestamp;\r\n    /// multiplier awarded for staking for a long time\r\n    uint8 timeMultiplier;\r\n    /// multiplier duplicated from QuestManager\r\n    uint8 questMultiplier;\r\n    /// Time at which the relative cooldown began\r\n    uint32 cooldownTimestamp;\r\n    /// Units up for cooldown\r\n    uint88 cooldownUnits;\r\n}\r\n\r\nstruct QuestBalance {\r\n    /// last timestamp at which the user made a write action to this contract\r\n    uint32 lastAction;\r\n    /// permanent multiplier applied to an account, awarded for PERMANENT QuestTypes\r\n    uint8 permMultiplier;\r\n    /// multiplier that decays after each \"season\" (~9 months) by 75%, to avoid multipliers getting out of control\r\n    uint8 seasonMultiplier;\r\n}\r\n\r\n/// @notice Quests can either give permanent rewards or only for the season\r\nenum QuestType {\r\n    PERMANENT,\r\n    SEASONAL\r\n}\r\n\r\n/// @notice Quests can be turned off by the questMaster. All those who already completed remain\r\nenum QuestStatus {\r\n    ACTIVE,\r\n    EXPIRED\r\n}\r\n\r\nstruct Quest {\r\n    /// Type of quest rewards\r\n    QuestType model;\r\n    /// Multiplier, from 1 == 1.01x to 100 == 2.00x\r\n    uint8 multiplier;\r\n    /// Is the current quest valid?\r\n    QuestStatus status;\r\n    /// Expiry date in seconds for the quest\r\n    uint32 expiry;\r\n}\r\n\r\ninterface IQuestManager {\r\n    event QuestAdded(\r\n        address questMaster,\r\n        uint256 id,\r\n        QuestType model,\r\n        uint16 multiplier,\r\n        QuestStatus status,\r\n        uint32 expiry\r\n    );\r\n    event QuestCompleteQuests(address indexed user, uint256[] ids);\r\n    event QuestCompleteUsers(uint256 indexed questId, address[] accounts);\r\n    event QuestExpired(uint16 indexed id);\r\n    event QuestMaster(address oldQuestMaster, address newQuestMaster);\r\n    event QuestSeasonEnded();\r\n    event QuestSigner(address oldQuestSigner, address newQuestSigner);\r\n    event StakedTokenAdded(address stakedToken);\r\n\r\n    // GETTERS\r\n    function balanceData(address _account) external view returns (QuestBalance memory);\r\n\r\n    function getQuest(uint256 _id) external view returns (Quest memory);\r\n\r\n    function hasCompleted(address _account, uint256 _id) external view returns (bool);\r\n\r\n    function questMaster() external view returns (address);\r\n\r\n    function seasonEpoch() external view returns (uint32);\r\n\r\n    // ADMIN\r\n    function addQuest(\r\n        QuestType _model,\r\n        uint8 _multiplier,\r\n        uint32 _expiry\r\n    ) external;\r\n\r\n    function addStakedToken(address _stakedToken) external;\r\n\r\n    function expireQuest(uint16 _id) external;\r\n\r\n    function setQuestMaster(address _newQuestMaster) external;\r\n\r\n    function setQuestSigner(address _newQuestSigner) external;\r\n\r\n    function startNewQuestSeason() external;\r\n\r\n    // USER\r\n    function completeUserQuests(\r\n        address _account,\r\n        uint256[] memory _ids,\r\n        bytes calldata _signature\r\n    ) external;\r\n\r\n    function completeQuestUsers(\r\n        uint256 _questId,\r\n        address[] memory _accounts,\r\n        bytes calldata _signature\r\n    ) external;\r\n\r\n    function checkForSeasonFinish(address _account) external returns (uint8 newQuestMultiplier);\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IStakedToken {\r\n    // GETTERS\r\n    function COOLDOWN_SECONDS() external view returns (uint256);\r\n\r\n    function UNSTAKE_WINDOW() external view returns (uint256);\r\n\r\n    function STAKED_TOKEN() external view returns (IERC20);\r\n\r\n    function getRewardToken() external view returns (address);\r\n\r\n    function pendingAdditionalReward() external view returns (uint256);\r\n\r\n    function whitelistedWrappers(address) external view returns (bool);\r\n\r\n    function balanceData(address _account) external view returns (Balance memory);\r\n\r\n    function balanceOf(address _account) external view returns (uint256);\r\n\r\n    function rawBalanceOf(address _account) external view returns (uint256, uint256);\r\n\r\n    function calcRedemptionFeeRate(uint32 _weightedTimestamp)\r\n        external\r\n        view\r\n        returns (uint256 _feeRate);\r\n\r\n    function safetyData()\r\n        external\r\n        view\r\n        returns (uint128 collateralisationRatio, uint128 slashingPercentage);\r\n\r\n    function delegates(address account) external view returns (address);\r\n\r\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\r\n\r\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\r\n\r\n    function getVotes(address account) external view returns (uint256);\r\n\r\n    // HOOKS/PERMISSIONED\r\n    function applyQuestMultiplier(address _account, uint8 _newMultiplier) external;\r\n\r\n    // ADMIN\r\n    function whitelistWrapper(address _wrapper) external;\r\n\r\n    function blackListWrapper(address _wrapper) external;\r\n\r\n    function changeSlashingPercentage(uint256 _newRate) external;\r\n\r\n    function emergencyRecollateralisation() external;\r\n\r\n    function setGovernanceHook(address _newHook) external;\r\n\r\n    // USER\r\n    function stake(uint256 _amount) external;\r\n\r\n    function stake(uint256 _amount, address _delegatee) external;\r\n\r\n    function stake(uint256 _amount, bool _exitCooldown) external;\r\n\r\n    function withdraw(\r\n        uint256 _amount,\r\n        address _recipient,\r\n        bool _amountIncludesFee,\r\n        bool _exitCooldown\r\n    ) external;\r\n\r\n    function delegate(address delegatee) external;\r\n\r\n    function startCooldown(uint256 _units) external;\r\n\r\n    function endCooldown() external;\r\n\r\n    function reviewTimestamp(address _account) external;\r\n\r\n    function claimReward() external;\r\n\r\n    function claimReward(address _to) external;\r\n\r\n    // Backwards compatibility\r\n    function createLock(uint256 _value, uint256) external;\r\n\r\n    function exit() external;\r\n\r\n    function increaseLockAmount(uint256 _value) external;\r\n\r\n    function increaseLockLength(uint256) external;\r\n}\r\n\r\n// SPDX-License-Identifier: AGPL-3.0-or-later\r\n/**\r\n * @title   QuestManager\r\n * @author  mStable\r\n * @notice  Centralised place to track quest management and completion status\r\n * @dev     VERSION: 1.0\r\n *          DATE:    2021-08-25\r\n */\r\ncontract QuestManager is IQuestManager, Initializable, ContextUpgradeable, ImmutableModule {\r\n    /// @notice Tracks the completion of each quest (user => questId => completion)\r\n    mapping(address => mapping(uint256 => bool)) private _questCompletion;\r\n\r\n    /// @notice User balance structs containing all data needed to scale balance\r\n    mapping(address => QuestBalance) internal _balances;\r\n\r\n    /// @notice List of quests, whose ID corresponds to their position in the array (from 0)\r\n    Quest[] private _quests;\r\n    /// @notice Timestamp at which the current season started\r\n    uint32 public override seasonEpoch;\r\n    /// @notice Timestamp at which the contract was created\r\n    uint32 public startTime;\r\n\r\n    /// @notice A whitelisted questMaster who can administer quests including signing user quests are completed.\r\n    address public override questMaster;\r\n    /// @notice account that can sign a user's quest as being completed.\r\n    address internal _questSigner;\r\n\r\n    /// @notice List of all staking tokens\r\n    address[] internal _stakedTokens;\r\n\r\n    /**\r\n     * @param _nexus System nexus\r\n     */\r\n    constructor(address _nexus) ImmutableModule(_nexus) {}\r\n\r\n    /**\r\n     * @param _questMaster account that can sign user quests as completed\r\n     * @param _questSignerArg account that can sign user quests as completed\r\n     */\r\n    function initialize(address _questMaster, address _questSignerArg) external initializer {\r\n        startTime = SafeCast.toUint32(block.timestamp);\r\n        questMaster = _questMaster;\r\n        _questSigner = _questSignerArg;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks that _msgSender is either governor or the quest master\r\n     */\r\n    modifier questMasterOrGovernor() {\r\n        _questMasterOrGovernor();\r\n        _;\r\n    }\r\n\r\n    function _questMasterOrGovernor() internal view {\r\n        require(_msgSender() == questMaster || _msgSender() == _governor(), \"Not verified\");\r\n    }\r\n\r\n    /***************************************\r\n                    Getters\r\n    ****************************************/\r\n\r\n    /**\r\n     * @notice Gets raw quest data\r\n     */\r\n    function getQuest(uint256 _id) external view override returns (Quest memory) {\r\n        return _quests[_id];\r\n    }\r\n\r\n    /**\r\n     * @dev Simply checks if a given user has already completed a given quest\r\n     * @param _account User address\r\n     * @param _id Position of quest in array\r\n     * @return bool with completion status\r\n     */\r\n    function hasCompleted(address _account, uint256 _id) public view override returns (bool) {\r\n        return _questCompletion[_account][_id];\r\n    }\r\n\r\n    /**\r\n     * @notice Raw quest balance\r\n     */\r\n    function balanceData(address _account) external view override returns (QuestBalance memory) {\r\n        return _balances[_account];\r\n    }\r\n\r\n    /***************************************\r\n                    Admin\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Sets the quest master that can administoer quests. eg add, expire and start seasons.\r\n     */\r\n    function setQuestMaster(address _newQuestMaster) external override questMasterOrGovernor {\r\n        emit QuestMaster(questMaster, _newQuestMaster);\r\n\r\n        questMaster = _newQuestMaster;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the quest signer that can sign user quests as being completed.\r\n     */\r\n    function setQuestSigner(address _newQuestSigner) external override onlyGovernor {\r\n        emit QuestSigner(_questSigner, _newQuestSigner);\r\n\r\n        _questSigner = _newQuestSigner;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a new stakedToken\r\n     */\r\n    function addStakedToken(address _stakedToken) external override onlyGovernor {\r\n        require(_stakedToken != address(0), \"Invalid StakedToken\");\r\n\r\n        _stakedTokens.push(_stakedToken);\r\n\r\n        emit StakedTokenAdded(_stakedToken);\r\n    }\r\n\r\n    /***************************************\r\n                    QUESTS\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Called by questMasters to add a new quest to the system with default 'ACTIVE' status\r\n     * @param _model Type of quest rewards multiplier (does it last forever or just for the season).\r\n     * @param _multiplier Multiplier, from 1 == 1.01x to 100 == 2.00x\r\n     * @param _expiry Timestamp at which quest expires. Note that permanent quests should still be given a timestamp.\r\n     */\r\n    function addQuest(\r\n        QuestType _model,\r\n        uint8 _multiplier,\r\n        uint32 _expiry\r\n    ) external override questMasterOrGovernor {\r\n        require(_expiry > block.timestamp + 1 days, \"Quest window too small\");\r\n        require(_multiplier > 0 && _multiplier <= 50, \"Quest multiplier too large > 1.5x\");\r\n\r\n        _quests.push(\r\n            Quest({\r\n                model: _model,\r\n                multiplier: _multiplier,\r\n                status: QuestStatus.ACTIVE,\r\n                expiry: _expiry\r\n            })\r\n        );\r\n\r\n        emit QuestAdded(\r\n            msg.sender,\r\n            _quests.length - 1,\r\n            _model,\r\n            _multiplier,\r\n            QuestStatus.ACTIVE,\r\n            _expiry\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Called by questMasters to expire a quest, setting it's status as EXPIRED. After which it can\r\n     * no longer be completed.\r\n     * @param _id Quest ID (its position in the array)\r\n     */\r\n    function expireQuest(uint16 _id) external override questMasterOrGovernor {\r\n        require(_id < _quests.length, \"Quest does not exist\");\r\n        require(_quests[_id].status == QuestStatus.ACTIVE, \"Quest already expired\");\r\n\r\n        _quests[_id].status = QuestStatus.EXPIRED;\r\n        if (block.timestamp < _quests[_id].expiry) {\r\n            _quests[_id].expiry = SafeCast.toUint32(block.timestamp);\r\n        }\r\n\r\n        emit QuestExpired(_id);\r\n    }\r\n\r\n    /**\r\n     * @dev Called by questMasters to start a new quest season. After this, all current\r\n     * seasonMultipliers will be reduced at the next user action (or triggered manually).\r\n     * In order to reduce cost for any keepers, it is suggested to add quests at the start\r\n     * of a new season to incentivise user actions.\r\n     * A new season can only begin after 9 months has passed.\r\n     */\r\n    function startNewQuestSeason() external override questMasterOrGovernor {\r\n        require(block.timestamp > (startTime + 39 weeks), \"First season has not elapsed\");\r\n        require(block.timestamp > (seasonEpoch + 39 weeks), \"Season has not elapsed\");\r\n\r\n        uint256 len = _quests.length;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            Quest memory quest = _quests[i];\r\n            if (quest.model == QuestType.SEASONAL) {\r\n                require(\r\n                    quest.status == QuestStatus.EXPIRED || block.timestamp > quest.expiry,\r\n                    \"All seasonal quests must have expired\"\r\n                );\r\n            }\r\n        }\r\n\r\n        seasonEpoch = SafeCast.toUint32(block.timestamp);\r\n\r\n        emit QuestSeasonEnded();\r\n    }\r\n\r\n    /***************************************\r\n                    USER\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Called by anyone to complete one or more quests for a staker. The user must first collect a signed message\r\n     * from the whitelisted _signer.\r\n     * @param _account Account that has completed the quest\r\n     * @param _ids Quest IDs (its position in the array)\r\n     * @param _signature Signature from the verified _questSigner, containing keccak hash of account & ids\r\n     */\r\n    function completeUserQuests(\r\n        address _account,\r\n        uint256[] memory _ids,\r\n        bytes calldata _signature\r\n    ) external override {\r\n        uint256 len = _ids.length;\r\n        require(len > 0, \"No quest IDs\");\r\n\r\n        uint8 questMultiplier = checkForSeasonFinish(_account);\r\n\r\n        // For each quest\r\n        for (uint256 i = 0; i < len; i++) {\r\n            require(_validQuest(_ids[i]), \"Invalid Quest ID\");\r\n            require(!hasCompleted(_account, _ids[i]), \"Quest already completed\");\r\n            require(\r\n                SignatureVerifier.verify(_questSigner, _account, _ids, _signature),\r\n                \"Invalid Quest Signer Signature\"\r\n            );\r\n\r\n            // Store user quest has completed\r\n            _questCompletion[_account][_ids[i]] = true;\r\n\r\n            // Update multiplier\r\n            Quest memory quest = _quests[_ids[i]];\r\n            if (quest.model == QuestType.PERMANENT) {\r\n                _balances[_account].permMultiplier += quest.multiplier;\r\n            } else {\r\n                _balances[_account].seasonMultiplier += quest.multiplier;\r\n            }\r\n            questMultiplier += quest.multiplier;\r\n        }\r\n\r\n        uint256 len2 = _stakedTokens.length;\r\n        for (uint256 i = 0; i < len2; i++) {\r\n            IStakedToken(_stakedTokens[i]).applyQuestMultiplier(_account, questMultiplier);\r\n        }\r\n\r\n        emit QuestCompleteQuests(_account, _ids);\r\n    }\r\n\r\n    /**\r\n     * @dev Called by anyone to complete one or more accounts for a quest. The user must first collect a signed message\r\n     * from the whitelisted _questMaster.\r\n     * @param _questId Quest ID (its position in the array)\r\n     * @param _accounts Accounts that has completed the quest\r\n     * @param _signature Signature from the verified _questMaster, containing keccak hash of id and accounts\r\n     */\r\n    function completeQuestUsers(\r\n        uint256 _questId,\r\n        address[] memory _accounts,\r\n        bytes calldata _signature\r\n    ) external override {\r\n        require(_validQuest(_questId), \"Invalid Quest ID\");\r\n        uint256 len = _accounts.length;\r\n        require(len > 0, \"No accounts\");\r\n        require(\r\n            SignatureVerifier.verify(_questSigner, _questId, _accounts, _signature),\r\n            \"Invalid Quest Signer Signature\"\r\n        );\r\n\r\n        Quest memory quest = _quests[_questId];\r\n\r\n        // For each user account\r\n        for (uint256 i = 0; i < len; i++) {\r\n            require(!hasCompleted(_accounts[i], _questId), \"Quest already completed\");\r\n\r\n            // store user quest has completed\r\n            _questCompletion[_accounts[i]][_questId] = true;\r\n\r\n            // _applyQuestMultiplier(_accounts[i], quests);\r\n            uint8 questMultiplier = checkForSeasonFinish(_accounts[i]);\r\n\r\n            // Update multiplier\r\n            if (quest.model == QuestType.PERMANENT) {\r\n                _balances[_accounts[i]].permMultiplier += quest.multiplier;\r\n            } else {\r\n                _balances[_accounts[i]].seasonMultiplier += quest.multiplier;\r\n            }\r\n            questMultiplier += quest.multiplier;\r\n\r\n            uint256 len2 = _stakedTokens.length;\r\n            for (uint256 j = 0; j < len2; j++) {\r\n                IStakedToken(_stakedTokens[j]).applyQuestMultiplier(_accounts[i], questMultiplier);\r\n            }\r\n        }\r\n\r\n        emit QuestCompleteUsers(_questId, _accounts);\r\n    }\r\n\r\n    /**\r\n     * @dev Simply checks if a quest is valid. Quests are valid if their id exists,\r\n     * they have an ACTIVE status and they have not yet reached their expiry timestamp.\r\n     * @param _id Position of quest in array\r\n     * @return bool with validity status\r\n     */\r\n    function _validQuest(uint256 _id) internal view returns (bool) {\r\n        return\r\n            _id < _quests.length &&\r\n            _quests[_id].status == QuestStatus.ACTIVE &&\r\n            block.timestamp < _quests[_id].expiry;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if the season has just finished between now and the users last action.\r\n     * If it has, we reset the seasonMultiplier. Either way, we update the lastAction for the user.\r\n     * NOTE - it is important that this is called as a hook before each state change operation\r\n     * @param _account Address of user that should be updated\r\n     */\r\n    function checkForSeasonFinish(address _account)\r\n        public\r\n        override\r\n        returns (uint8 newQuestMultiplier)\r\n    {\r\n        QuestBalance storage balance = _balances[_account];\r\n        // If the last action was before current season, then reset the season timing\r\n        if (_hasFinishedSeason(balance.lastAction)) {\r\n            // Remove 85% of the multiplier gained in this season\r\n            balance.seasonMultiplier = (balance.seasonMultiplier * 15) / 100;\r\n            balance.lastAction = SafeCast.toUint32(block.timestamp);\r\n        }\r\n        return balance.seasonMultiplier + balance.permMultiplier;\r\n    }\r\n\r\n    /**\r\n     * @dev Simple view fn to check if the users last action was before the starting of the current season\r\n     */\r\n    function _hasFinishedSeason(uint32 _lastAction) internal view returns (bool) {\r\n        return _lastAction < seasonEpoch;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nexus\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"questMaster\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum QuestType\",\"name\":\"model\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"multiplier\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"enum QuestStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"expiry\",\"type\":\"uint32\"}],\"name\":\"QuestAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"QuestCompleteQuests\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"questId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"QuestCompleteUsers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"id\",\"type\":\"uint16\"}],\"name\":\"QuestExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldQuestMaster\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newQuestMaster\",\"type\":\"address\"}],\"name\":\"QuestMaster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"QuestSeasonEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldQuestSigner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newQuestSigner\",\"type\":\"address\"}],\"name\":\"QuestSigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"}],\"name\":\"StakedTokenAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum QuestType\",\"name\":\"_model\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_multiplier\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"_expiry\",\"type\":\"uint32\"}],\"name\":\"addQuest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"}],\"name\":\"addStakedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"lastAction\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"permMultiplier\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"seasonMultiplier\",\"type\":\"uint8\"}],\"internalType\":\"struct QuestBalance\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"checkForSeasonFinish\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"newQuestMultiplier\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_questId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"completeQuestUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"completeUserQuests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_id\",\"type\":\"uint16\"}],\"name\":\"expireQuest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getQuest\",\"outputs\":[{\"components\":[{\"internalType\":\"enum QuestType\",\"name\":\"model\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"multiplier\",\"type\":\"uint8\"},{\"internalType\":\"enum QuestStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"expiry\",\"type\":\"uint32\"}],\"internalType\":\"struct Quest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"hasCompleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_questMaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_questSignerArg\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nexus\",\"outputs\":[{\"internalType\":\"contract INexus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questMaster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seasonEpoch\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newQuestMaster\",\"type\":\"address\"}],\"name\":\"setQuestMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newQuestSigner\",\"type\":\"address\"}],\"name\":\"setQuestSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startNewQuestSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"QuestManager","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000afce80b19a8ce13dec0739a1aab7a028d6845eb3","EVMVersion":"Default","Library":"SignatureVerifier:c973413fe4944682910b97b261456eb9633a4756","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://db2db2ec5d74a3fafc4aa0b99ece21deb28c216f3ef2f97cff2fe93307add2d1"}]}