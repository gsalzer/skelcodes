{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title ERC 20 Token Standard Interface\r\n *  https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IEIP20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n      * @notice Get the total number of tokens in circulation\r\n      * @return The supply of tokens\r\n      */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Gets the balance of the specified address\r\n     * @param owner The address from which the balance will be retrieved\r\n     * @return balance The balance\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n      * @param dst The address of the destination account\r\n      * @param amount The number of tokens to transfer\r\n      * @return success Whether or not the transfer succeeded\r\n      */\r\n    function transfer(address dst, uint256 amount) external returns (bool success);\r\n\r\n    /**\r\n      * @notice Transfer `amount` tokens from `src` to `dst`\r\n      * @param src The address of the source account\r\n      * @param dst The address of the destination account\r\n      * @param amount The number of tokens to transfer\r\n      * @return success Whether or not the transfer succeeded\r\n      */\r\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\r\n\r\n    /**\r\n      * @notice Approve `spender` to transfer up to `amount` from `src`\r\n      * @dev This will overwrite the approval amount for `spender`\r\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n      * @param spender The address of the account which may transfer tokens\r\n      * @param amount The number of tokens that are approved (-1 means infinite)\r\n      * @return success Whether or not the approval succeeded\r\n      */\r\n    function approve(address spender, uint256 amount) external returns (bool success);\r\n\r\n    /**\r\n      * @notice Get the current allowance from `owner` for `spender`\r\n      * @param owner The address of the account which owns the tokens to be spent\r\n      * @param spender The address of the account which may transfer tokens\r\n      * @return remaining The number of tokens allowed to be spent (-1 means infinite)\r\n      */\r\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n}\r\n\r\n/**\r\n * @title IEIP20NonStandard\r\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\r\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\r\n */\r\ninterface IEIP20NonStandard {\r\n\r\n    /**\r\n     * @notice Get the total number of tokens in circulation\r\n     * @return The supply of tokens\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Gets the balance of the specified address\r\n     * @param owner The address from which the balance will be retrieved\r\n     * @return balance\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    ///\r\n    /// !!!!!!!!!!!!!!\r\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\r\n    /// !!!!!!!!!!!!!!\r\n    ///\r\n\r\n    /**\r\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n      * @param dst The address of the destination account\r\n      * @param amount The number of tokens to transfer\r\n      */\r\n    function transfer(address dst, uint256 amount) external;\r\n\r\n    ///\r\n    /// !!!!!!!!!!!!!!\r\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\r\n    /// !!!!!!!!!!!!!!\r\n    ///\r\n\r\n    /**\r\n      * @notice Transfer `amount` tokens from `src` to `dst`\r\n      * @param src The address of the source account\r\n      * @param dst The address of the destination account\r\n      * @param amount The number of tokens to transfer\r\n      */\r\n    function transferFrom(address src, address dst, uint256 amount) external;\r\n\r\n    /**\r\n      * @notice Approve `spender` to transfer up to `amount` from `src`\r\n      * @dev This will overwrite the approval amount for `spender`\r\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n      * @param spender The address of the account which may transfer tokens\r\n      * @param amount The number of tokens that are approved\r\n      * @return success Whether or not the approval succeeded\r\n      */\r\n    function approve(address spender, uint256 amount) external returns (bool success);\r\n\r\n    /**\r\n      * @notice Get the current allowance from `owner` for `spender`\r\n      * @param owner The address of the account which owns the tokens to be spent\r\n      * @param spender The address of the account which may transfer tokens\r\n      * @return remaining The number of tokens allowed to be spent\r\n      */\r\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface PriceOracleInterface {\r\n    function getUnderlyingPrice(address _pToken) external view returns (uint);\r\n}\r\n\r\ninterface ComptrollerLensInterface {\r\n\r\n    function getAllMarkets() external view returns (PTokenLensInterface[] memory);\r\n\r\n    function markets(address) external view returns (bool, uint);\r\n\r\n    function oracle() external view returns (PriceOracleInterface);\r\n\r\n    function getAccountLiquidity(address) external view returns (uint, uint, uint);\r\n\r\n    function getAssetsIn(address) external view returns (PTokenLensInterface[] memory);\r\n\r\n    function mintCaps(address) external view returns (uint256);\r\n\r\n    function borrowCaps(address) external view returns (uint256);\r\n}\r\n\r\ninterface PTokenLensInterface {\r\n\r\n    function interestRateModel() external view returns (address);\r\n\r\n    function exchangeRateStored() external view returns (uint256);\r\n\r\n    function comptroller() external view returns (address);\r\n\r\n    function supplyRatePerBlock() external view returns (uint256);\r\n\r\n    function borrowRatePerBlock() external view returns (uint256);\r\n\r\n    function reserveFactorMantissa() external view returns (uint256);\r\n\r\n    function totalBorrows() external view returns (uint256);\r\n\r\n    function totalReserves() external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function getCash() external view returns (uint256);\r\n\r\n    function borrowIndex() external view returns (uint256);\r\n\r\n    function accrualBlockNumber() external view returns (uint256);\r\n\r\n    function underlying() external view returns (address);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function getAccountSnapshot(address account) external virtual view returns (uint256, uint256, uint256, uint256);\r\n}\r\n\r\ninterface PiggyDistributionInterface {\r\n    function wpcSpeeds(address) external view returns (uint256);\r\n}\r\n\r\ninterface InterestRateModelInterface {\r\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\r\n\r\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\r\n\r\n    function blocksPerYear() external view returns (uint);\r\n\r\n    function multiplierPerBlock() external view returns (uint);\r\n\r\n    function baseRatePerBlock() external view returns (uint);\r\n\r\n    function jumpMultiplierPerBlock() external view returns (uint);\r\n\r\n    function kink() external view returns (uint);\r\n}\r\n\r\ncontract WePiggyLensV2 {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    ComptrollerLensInterface public comptroller;\r\n    PiggyDistributionInterface public distribution;\r\n    string  public pNativeToken;\r\n    string public nativeToken;\r\n    string public nativeName;\r\n    address public owner;\r\n\r\n    constructor(ComptrollerLensInterface _comptroller, PiggyDistributionInterface _distribution,\r\n        string  memory _pNativeToken, string  memory _nativeToken, string memory _nativeName) public {\r\n        comptroller = _comptroller;\r\n        distribution = _distribution;\r\n        pNativeToken = _pNativeToken;\r\n        nativeToken = _nativeToken;\r\n        nativeName = _nativeName;\r\n\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function updateProperties(ComptrollerLensInterface _comptroller, PiggyDistributionInterface _distribution,\r\n        string  memory _pNativeToken, string  memory _nativeToken, string memory _nativeName) public {\r\n\r\n        require(msg.sender == owner, \"sender is not owner\");\r\n\r\n        comptroller = _comptroller;\r\n        distribution = _distribution;\r\n        pNativeToken = _pNativeToken;\r\n        nativeToken = _nativeToken;\r\n        nativeName = _nativeName;\r\n    }\r\n\r\n    struct PTokenMetadata {\r\n        address pTokenAddress;\r\n        uint pTokenDecimals;\r\n        address underlyingAddress;\r\n        uint underlyingDecimals;\r\n        string underlyingSymbol;\r\n        string underlyingName;\r\n        uint exchangeRateCurrent;\r\n        uint supplyRatePerBlock;\r\n        uint borrowRatePerBlock;\r\n        uint reserveFactorMantissa;\r\n        uint collateralFactorMantissa;\r\n        uint totalBorrows;\r\n        uint totalReserves;\r\n        uint totalSupply;\r\n        uint totalCash;\r\n        uint price;\r\n        uint mintCap;\r\n        uint borrowCap;\r\n        bool isListed;\r\n        uint blockNumber;\r\n        uint accrualBlockNumber;\r\n        uint borrowIndex;\r\n    }\r\n\r\n    // 获得市场的属性\r\n    function pTokenMetadata(PTokenLensInterface pToken) public view returns (PTokenMetadata memory){\r\n\r\n        (bool isListed, uint collateralFactorMantissa) = comptroller.markets(address(pToken));\r\n\r\n        uint mintCap = comptroller.mintCaps(address(pToken));\r\n        uint borrowCap = comptroller.borrowCaps(address(pToken));\r\n\r\n        address underlyingAddress;\r\n        uint underlyingDecimals;\r\n        string memory underlyingSymbol;\r\n        string memory underlyingName;\r\n        if (compareStrings(pToken.symbol(), pNativeToken)) {\r\n            underlyingAddress = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n            underlyingDecimals = 18;\r\n            underlyingSymbol = nativeToken;\r\n            underlyingName = nativeName;\r\n        } else {\r\n            PTokenLensInterface pErc20 = PTokenLensInterface(address(pToken));\r\n            underlyingAddress = pErc20.underlying();\r\n            underlyingDecimals = IEIP20(pErc20.underlying()).decimals();\r\n            underlyingSymbol = IEIP20(pErc20.underlying()).symbol();\r\n            underlyingName = IEIP20(pErc20.underlying()).name();\r\n        }\r\n\r\n        uint price = PriceOracleInterface(comptroller.oracle()).getUnderlyingPrice(address(pToken));\r\n\r\n        return PTokenMetadata({\r\n        pTokenAddress : address(pToken),\r\n        pTokenDecimals : pToken.decimals(),\r\n        underlyingAddress : underlyingAddress,\r\n        underlyingDecimals : underlyingDecimals,\r\n        underlyingSymbol : underlyingSymbol,\r\n        underlyingName : underlyingName,\r\n        exchangeRateCurrent : pToken.exchangeRateStored(),\r\n        supplyRatePerBlock : pToken.supplyRatePerBlock(),\r\n        borrowRatePerBlock : pToken.borrowRatePerBlock(),\r\n        reserveFactorMantissa : pToken.reserveFactorMantissa(),\r\n        collateralFactorMantissa : collateralFactorMantissa,\r\n        totalBorrows : pToken.totalBorrows(),\r\n        totalReserves : pToken.totalReserves(),\r\n        totalSupply : pToken.totalSupply(),\r\n        totalCash : pToken.getCash(),\r\n        price : price,\r\n        mintCap : mintCap,\r\n        borrowCap : borrowCap,\r\n        isListed : isListed,\r\n        blockNumber : block.number,\r\n        accrualBlockNumber : pToken.accrualBlockNumber(),\r\n        borrowIndex : pToken.borrowIndex()\r\n        });\r\n\r\n    }\r\n\r\n    function pTokenMetadataAll(PTokenLensInterface[] memory pTokens) public view returns (PTokenMetadata[] memory) {\r\n        uint pTokenCount = pTokens.length;\r\n        PTokenMetadata[] memory res = new PTokenMetadata[](pTokenCount);\r\n        for (uint i = 0; i < pTokenCount; i++) {\r\n            res[i] = pTokenMetadata(pTokens[i]);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    struct PTokenBalances {\r\n        address pToken;\r\n        uint balance;\r\n        uint borrowBalance; //用户的借款\r\n        uint exchangeRateMantissa;\r\n    }\r\n\r\n    // 获得用户的市场金额\r\n    function pTokenBalances(PTokenLensInterface pToken, address payable account) public view returns (PTokenBalances memory) {\r\n\r\n        (, uint tokenBalance, uint borrowBalance, uint exchangeRateMantissa) = pToken.getAccountSnapshot(account);\r\n\r\n        return PTokenBalances({\r\n        pToken : address(pToken),\r\n        balance : tokenBalance,\r\n        borrowBalance : borrowBalance,\r\n        exchangeRateMantissa : exchangeRateMantissa\r\n        });\r\n\r\n    }\r\n\r\n    // 获得用户有每个市场的金额(抵押、借贷)\r\n    function pTokenBalancesAll(PTokenLensInterface[] memory pTokens, address payable account) public view returns (PTokenBalances[] memory) {\r\n        uint pTokenCount = pTokens.length;\r\n        PTokenBalances[] memory res = new PTokenBalances[](pTokenCount);\r\n        for (uint i = 0; i < pTokenCount; i++) {\r\n            res[i] = pTokenBalances(pTokens[i], account);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    struct AccountLimits {\r\n        PTokenLensInterface[] markets;\r\n        uint liquidity;\r\n        uint shortfall;\r\n    }\r\n\r\n\r\n    // 获得用户有哪些市场、流动性\r\n    function getAccountLimits(address payable account) public view returns (AccountLimits memory) {\r\n        (uint errorCode, uint liquidity, uint shortfall) = comptroller.getAccountLiquidity(account);\r\n        require(errorCode == 0);\r\n\r\n        return AccountLimits({\r\n        markets : comptroller.getAssetsIn(account),\r\n        liquidity : liquidity,\r\n        shortfall : shortfall\r\n        });\r\n    }\r\n\r\n    struct PTokenWpcSpeed {\r\n        PTokenLensInterface market;\r\n        uint wpcSpeed;\r\n    }\r\n\r\n    function getWpcSpeed(PTokenLensInterface pToken) public view returns (PTokenWpcSpeed memory){\r\n        uint wpcSpeed = distribution.wpcSpeeds(address(pToken));\r\n        return PTokenWpcSpeed({\r\n        market : pToken,\r\n        wpcSpeed : wpcSpeed\r\n        });\r\n    }\r\n\r\n    function getWpcSpeeds(PTokenLensInterface[] memory pTokens) public view returns (PTokenWpcSpeed[] memory){\r\n        uint pTokenCount = pTokens.length;\r\n        PTokenWpcSpeed[] memory res = new PTokenWpcSpeed[](pTokenCount);\r\n        for (uint i = 0; i < pTokenCount; i++) {\r\n            res[i] = getWpcSpeed(pTokens[i]);\r\n        }\r\n        return res;\r\n    }\r\n\r\n\r\n    struct InterestRateModel {\r\n        PTokenLensInterface market;\r\n        uint blocksPerYear;\r\n        uint multiplierPerBlock;\r\n        uint baseRatePerBlock;\r\n        uint jumpMultiplierPerBlock;\r\n        uint kink;\r\n    }\r\n\r\n    function getInterestRateModel(PTokenLensInterface pToken) public view returns (InterestRateModel memory){\r\n        InterestRateModelInterface interestRateModel = InterestRateModelInterface(pToken.interestRateModel());\r\n\r\n        return InterestRateModel({\r\n        market : pToken,\r\n        blocksPerYear : interestRateModel.blocksPerYear(),\r\n        multiplierPerBlock : interestRateModel.multiplierPerBlock(),\r\n        baseRatePerBlock : interestRateModel.baseRatePerBlock(),\r\n        jumpMultiplierPerBlock : interestRateModel.jumpMultiplierPerBlock(),\r\n        kink : interestRateModel.kink()\r\n        });\r\n    }\r\n\r\n    function getInterestRateModels(PTokenLensInterface[] memory pTokens) public view returns (InterestRateModel[] memory){\r\n        uint pTokenCount = pTokens.length;\r\n        InterestRateModel[] memory res = new InterestRateModel[](pTokenCount);\r\n        for (uint i = 0; i < pTokenCount; i++) {\r\n            res[i] = getInterestRateModel(pTokens[i]);\r\n        }\r\n        return res;\r\n    }\r\n\r\n\r\n    function all() external view returns (PTokenMetadata[] memory, InterestRateModel[] memory, PTokenWpcSpeed[] memory){\r\n\r\n        PTokenLensInterface[] memory pTokens = comptroller.getAllMarkets();\r\n        PTokenMetadata[] memory metaData = pTokenMetadataAll(pTokens);\r\n        InterestRateModel[] memory rateModels = getInterestRateModels(pTokens);\r\n        PTokenWpcSpeed[] memory wpcSpeeds = getWpcSpeeds(pTokens);\r\n\r\n        return (metaData, rateModels, wpcSpeeds);\r\n    }\r\n\r\n\r\n    function allForAccount(address payable account) external view returns (AccountLimits memory, PTokenBalances[] memory, PTokenMetadata[] memory, InterestRateModel[] memory){\r\n\r\n        AccountLimits memory accountLimits = getAccountLimits(account);\r\n\r\n        PTokenLensInterface[] memory pTokens = comptroller.getAllMarkets();\r\n        PTokenBalances[] memory balances = pTokenBalancesAll(pTokens, account);\r\n        PTokenMetadata[] memory metaData = pTokenMetadataAll(pTokens);\r\n        InterestRateModel[] memory rateModels = getInterestRateModels(pTokens);\r\n\r\n        return (accountLimits, balances, metaData, rateModels);\r\n    }\r\n\r\n\r\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\r\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ComptrollerLensInterface\",\"name\":\"_comptroller\",\"type\":\"address\"},{\"internalType\":\"contract PiggyDistributionInterface\",\"name\":\"_distribution\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_pNativeToken\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_nativeToken\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_nativeName\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"all\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"underlyingSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"underlyingName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowCap\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accrualBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct WePiggyLensV2.PTokenMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"contract PTokenLensInterface\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blocksPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kink\",\"type\":\"uint256\"}],\"internalType\":\"struct WePiggyLensV2.InterestRateModel[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"contract PTokenLensInterface\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wpcSpeed\",\"type\":\"uint256\"}],\"internalType\":\"struct WePiggyLensV2.PTokenWpcSpeed[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"allForAccount\",\"outputs\":[{\"components\":[{\"internalType\":\"contract PTokenLensInterface[]\",\"name\":\"markets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shortfall\",\"type\":\"uint256\"}],\"internalType\":\"struct WePiggyLensV2.AccountLimits\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateMantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct WePiggyLensV2.PTokenBalances[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"underlyingSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"underlyingName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowCap\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accrualBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct WePiggyLensV2.PTokenMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"contract PTokenLensInterface\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blocksPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kink\",\"type\":\"uint256\"}],\"internalType\":\"struct WePiggyLensV2.InterestRateModel[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract ComptrollerLensInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribution\",\"outputs\":[{\"internalType\":\"contract PiggyDistributionInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountLimits\",\"outputs\":[{\"components\":[{\"internalType\":\"contract PTokenLensInterface[]\",\"name\":\"markets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shortfall\",\"type\":\"uint256\"}],\"internalType\":\"struct WePiggyLensV2.AccountLimits\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PTokenLensInterface\",\"name\":\"pToken\",\"type\":\"address\"}],\"name\":\"getInterestRateModel\",\"outputs\":[{\"components\":[{\"internalType\":\"contract PTokenLensInterface\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blocksPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kink\",\"type\":\"uint256\"}],\"internalType\":\"struct WePiggyLensV2.InterestRateModel\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PTokenLensInterface[]\",\"name\":\"pTokens\",\"type\":\"address[]\"}],\"name\":\"getInterestRateModels\",\"outputs\":[{\"components\":[{\"internalType\":\"contract PTokenLensInterface\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blocksPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kink\",\"type\":\"uint256\"}],\"internalType\":\"struct WePiggyLensV2.InterestRateModel[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PTokenLensInterface\",\"name\":\"pToken\",\"type\":\"address\"}],\"name\":\"getWpcSpeed\",\"outputs\":[{\"components\":[{\"internalType\":\"contract PTokenLensInterface\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wpcSpeed\",\"type\":\"uint256\"}],\"internalType\":\"struct WePiggyLensV2.PTokenWpcSpeed\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PTokenLensInterface[]\",\"name\":\"pTokens\",\"type\":\"address[]\"}],\"name\":\"getWpcSpeeds\",\"outputs\":[{\"components\":[{\"internalType\":\"contract PTokenLensInterface\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wpcSpeed\",\"type\":\"uint256\"}],\"internalType\":\"struct WePiggyLensV2.PTokenWpcSpeed[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeToken\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pNativeToken\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PTokenLensInterface\",\"name\":\"pToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pTokenBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateMantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct WePiggyLensV2.PTokenBalances\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PTokenLensInterface[]\",\"name\":\"pTokens\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pTokenBalancesAll\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateMantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct WePiggyLensV2.PTokenBalances[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PTokenLensInterface\",\"name\":\"pToken\",\"type\":\"address\"}],\"name\":\"pTokenMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"underlyingSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"underlyingName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowCap\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accrualBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct WePiggyLensV2.PTokenMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PTokenLensInterface[]\",\"name\":\"pTokens\",\"type\":\"address[]\"}],\"name\":\"pTokenMetadataAll\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"underlyingSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"underlyingName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowCap\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accrualBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct WePiggyLensV2.PTokenMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ComptrollerLensInterface\",\"name\":\"_comptroller\",\"type\":\"address\"},{\"internalType\":\"contract PiggyDistributionInterface\",\"name\":\"_distribution\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_pNativeToken\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_nativeToken\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_nativeName\",\"type\":\"string\"}],\"name\":\"updateProperties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WePiggyLensV2","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000c8c1ab017c3c0c8a48dd9f1db2f59022d190f0b0000000000000000000000003e5496e50793e72e6143a15bed1c2535f0b0b9b000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000047045544800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000345544800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008457468657265756d000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ecfd2eff36ff09f794e469c6511ed751d2aa2a9ed24a6f43e37f5b13f88a8778"}]}