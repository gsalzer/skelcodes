{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"ShapeShiftDAORouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"IERC20.sol\\\";\\nimport {SafeERC20} from \\\"SafeERC20.sol\\\";\\nimport {Math} from \\\"Math.sol\\\";\\nimport {Ownable} from \\\"Ownable.sol\\\";\\n\\nimport {RegistryAPI, VaultAPI} from \\\"YearnAPI.sol\\\";\\n\\n/**\\n * Adapted from the Yearn BaseRouter for Shapeshift's use case of a router that forward native vault tokens\\n * to the caller and does not hold any funds or assets (vault tokens or other ERC20 tokens)\\n */\\ncontract ShapeShiftDAORouter is Ownable {\\n    RegistryAPI public registry;\\n\\n    // ERC20 Unlimited Approvals (short-circuits VaultAPI.transferFrom)\\n    uint256 constant UNLIMITED_APPROVAL = type(uint256).max;\\n\\n    // Sentinel values used to save gas on deposit/withdraw/migrate\\n    // NOTE: UNLIMITED_APPROVAL == DEPOSIT_EVERYTHING == WITHDRAW_EVERYTHING == MIGRATE_EVERYTHING = MAX_VAULT_ID\\n    uint256 constant DEPOSIT_EVERYTHING = type(uint256).max;\\n    uint256 constant WITHDRAW_EVERYTHING = type(uint256).max;\\n    uint256 constant MIGRATE_EVERYTHING = type(uint256).max;\\n    uint256 constant MAX_VAULT_ID = type(uint256).max;\\n\\n    constructor(address yearnRegistry) {\\n        // Recommended to use `v2.registry.ychad.eth`\\n        registry = RegistryAPI(yearnRegistry);\\n    }\\n\\n    /**\\n     * @notice Used to update the yearn registry. The choice of registry is SECURITY SENSITIVE, so only the\\n     * owner can update it.\\n     * @param yearnRegistry The new registry address.\\n     */\\n    function setRegistry(address yearnRegistry) external onlyOwner() {\\n        address currentYearnGovernanceAddress = registry.governance();\\n        // In case you want to override the registry instead of re-deploying\\n        registry = RegistryAPI(yearnRegistry);\\n        // Make sure there's no change in governance\\n        // NOTE: Also avoid bricking the router from setting a bad registry\\n        require(\\n            currentYearnGovernanceAddress == registry.governance(),\\n            \\\"invalid registry\\\"\\n        );\\n    }\\n\\n    function numVaults(address token) external view returns (uint256) {\\n        return registry.numVaults(token);\\n    }\\n\\n    function vaults(address token, uint256 deploymentId)\\n        external\\n        view\\n        returns (VaultAPI)\\n    {\\n        return registry.vaults(token, deploymentId);\\n    }\\n\\n    function latestVault(address token) external view returns (VaultAPI) {\\n        return registry.latestVault(token);\\n    }\\n\\n    /**\\n     * @notice Gets the balance of an account across all the vaults for a token.\\n     * @param token Which ERC20 token to pull vault balances for\\n     * @param account The address of the account to pull the balances for\\n     * @return The current value, in token base units, of the shares held by the specified\\n       account across all the vaults for the specified token.\\n     */\\n    function totalVaultBalance(address token, address account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return this.totalVaultBalance(token, account, 0, MAX_VAULT_ID);\\n    }\\n\\n    /**\\n     * @notice Gets the balance of an account across certain vaults for a token.\\n     * @param token Which ERC20 token to pull vault balances for\\n     * @param account The address of the account to pull the balances for\\n     * @param firstVaultId First vault id to include; 0 to start at the beginning\\n     * @param lastVaultId Last vault id to include; `MAX_VAULT_ID` to include all vaults\\n     * @return balance The current value, in token base units, of the shares held by the specified\\n       account across all the specified vaults for the specified token.\\n     */\\n    function totalVaultBalance(\\n        address token,\\n        address account,\\n        uint256 firstVaultId,\\n        uint256 lastVaultId\\n    ) external view returns (uint256 balance) {\\n        require(firstVaultId <= lastVaultId);\\n\\n        uint256 _lastVaultId = lastVaultId;\\n        if (_lastVaultId == MAX_VAULT_ID)\\n            _lastVaultId = registry.numVaults(address(token)) - 1;\\n\\n        for (uint256 i = firstVaultId; i <= _lastVaultId; i++) {\\n            VaultAPI vault = registry.vaults(token, i);\\n            uint256 vaultTokenBalance = (vault.balanceOf(account) *\\n                vault.pricePerShare()) / 10**vault.decimals();\\n            balance += vaultTokenBalance;\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the combined TVL for all the vaults for a specified token.\\n     * @return assets The sum of all the assets managed by the vaults for the specified token.\\n     */\\n    function totalAssets(address token) external view returns (uint256) {\\n        return this.totalAssets(token, 0, MAX_VAULT_ID);\\n    }\\n\\n    /**\\n     * @notice Returns the combined TVL for all the specified vaults for a specified token.\\n     * @param firstVaultId First vault id to include; 0 to start at the beginning\\n     * @param lastVaultId Last vault id to include; `MAX_VAULT_ID` to include all vaults\\n     * @return assets The sum of all the assets managed by the vaults for the specified token.\\n     */\\n    function totalAssets(\\n        address token,\\n        uint256 firstVaultId,\\n        uint256 lastVaultId\\n    ) external view returns (uint256 assets) {\\n        require(firstVaultId <= lastVaultId);\\n\\n        uint256 _lastVaultId = lastVaultId;\\n        if (_lastVaultId == MAX_VAULT_ID)\\n            _lastVaultId = registry.numVaults(address(token)) - 1;\\n\\n        for (uint256 i = firstVaultId; i <= _lastVaultId; i++) {\\n            VaultAPI vault = registry.vaults(token, i);\\n            assets += vault.totalAssets();\\n        }\\n    }\\n\\n    /**\\n     * @notice Called to deposit the caller's tokens into the most-current vault, crediting the minted shares to recipient.\\n     * @dev The caller must approve this contract to utilize the specified ERC20 or this call will revert.\\n     * @param token Address of the ERC20 token being deposited\\n     * @param recipient Address to receive the issued vault tokens\\n     * @param amount Amount of tokens to deposit; tokens that cannot be deposited will be refunded. If `DEPOSIT_EVERYTHING`, just deposit everything.\\n     * @return Total vault shares received by recipient\\n     */\\n    function deposit(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (uint256) {\\n        return\\n            _deposit(\\n                IERC20(token),\\n                _msgSender(),\\n                recipient,\\n                amount,\\n                MAX_VAULT_ID\\n            );\\n    }\\n\\n    /**\\n     * @notice Called to deposit the caller's tokens into a specific vault, crediting the minted shares to recipient.\\n     * @dev The caller must approve this contract to utilize the specified ERC20 or this call will revert.\\n     * @param token Address of the ERC20 token being deposited\\n     * @param recipient Address to receive the issued vault tokens\\n     * @param amount Amount of tokens to deposit; tokens that cannot be deposited will be refunded. If `DEPOSIT_EVERYTHING`, just deposit everything.\\n     * @param vaultId Vault id to deposit into; pass `MAX_VAULT_ID` to deposit into the latest vault\\n     * @return Total vault shares received by recipient\\n     */\\n    function deposit(\\n        address token,\\n        address recipient,\\n        uint256 amount,\\n        uint256 vaultId\\n    ) external returns (uint256) {\\n        return\\n            _deposit(IERC20(token), _msgSender(), recipient, amount, vaultId);\\n    }\\n\\n    /**\\n     * @notice Called to deposit depositor's tokens into a specific vault, crediting the minted shares to recipient.\\n     * @dev Depositor must approve this contract to utilize the specified ERC20 or this call will revert.\\n     * @param token Address of the ERC20 token being deposited\\n     * @param depositor Address to pull deposited funds from. SECURITY SENSITIVE.\\n     * @param recipient Address to receive the issued vault tokens\\n     * @param amount Amount of tokens to deposit; tokens that cannot be deposited will be refunded. If `DEPOSIT_EVERYTHING`, just deposit everything.\\n     * @param vaultId Vault id to deposit into; pass `MAX_VAULT_ID` to deposit into the latest vault\\n     * @return shares Total vault shares received by recipient\\n     */\\n    function _deposit(\\n        IERC20 token,\\n        address depositor,\\n        address recipient,\\n        uint256 amount,\\n        uint256 vaultId\\n    ) internal returns (uint256 shares) {\\n        bool pullFunds = depositor != address(this);\\n\\n        VaultAPI vault;\\n        if (vaultId == MAX_VAULT_ID) {\\n            vault = registry.latestVault(address(token));\\n        } else {\\n            vault = registry.vaults(address(token), vaultId);\\n        }\\n\\n        if (token.allowance(address(this), address(vault)) < amount) {\\n            SafeERC20.safeApprove(token, address(vault), 0); // Avoid issues with some tokens requiring 0\\n            SafeERC20.safeApprove(token, address(vault), UNLIMITED_APPROVAL); // Vaults are trusted\\n        }\\n\\n        if (amount == DEPOSIT_EVERYTHING) amount = token.balanceOf(depositor);\\n\\n        if (pullFunds) {\\n            uint256 beforeBal = token.balanceOf(address(this));\\n            SafeERC20.safeTransferFrom(token, depositor, address(this), amount);\\n\\n            shares = vault.deposit(amount, recipient);\\n\\n            uint256 afterWithdrawBal = token.balanceOf(address(this));\\n            if (afterWithdrawBal > beforeBal)\\n                SafeERC20.safeTransfer(\\n                    token,\\n                    depositor,\\n                    afterWithdrawBal - beforeBal\\n                );\\n        } else {\\n            shares = vault.deposit(amount, recipient);\\n        }\\n    }\\n\\n    /**\\n     * @notice Called to redeem the all of the caller's shares from underlying vault(s), with the proceeds distributed to recipient.\\n     * @dev The caller must approve this contract to use their vault shares or this call will revert.\\n     * @param token Address of the ERC20 token to withdraw from vaults\\n     * @param recipient Address to receive the withdrawn tokens\\n     * @return The number of tokens received by recipient.\\n     */\\n    function withdraw(address token, address recipient)\\n        external\\n        returns (uint256)\\n    {\\n        return\\n            _withdraw(\\n                IERC20(token),\\n                _msgSender(),\\n                recipient,\\n                WITHDRAW_EVERYTHING,\\n                0,\\n                MAX_VAULT_ID\\n            );\\n    }\\n\\n    /**\\n     * @notice Called to redeem the caller's shares from underlying vault(s), with the proceeds distributed to recipient.\\n     * @dev The caller must approve this contract to use their vault shares or this call will revert.\\n     * @param token Address of the ERC20 token to withdraw from vaults\\n     * @param recipient Address to receive the withdrawn tokens\\n     * @param amount Maximum number of tokens to withdraw from all vaults; actual withdrawal may be less. If `WITHDRAW_EVERYTHING`, just withdraw everything.\\n     * @return The number of tokens received by recipient.\\n     */\\n    function withdraw(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (uint256) {\\n        return\\n            _withdraw(\\n                IERC20(token),\\n                _msgSender(),\\n                recipient,\\n                amount,\\n                0,\\n                MAX_VAULT_ID\\n            );\\n    }\\n\\n    /**\\n     * @notice Called to redeem the caller's shares from underlying vault(s), with the proceeds distributed to recipient.\\n     * @dev The caller must approve this contract to use their vault shares or this call will revert.\\n     * @param token Address of the ERC20 token to withdraw from vaults\\n     * @param recipient Address to receive the withdrawn tokens\\n     * @param amount Maximum number of tokens to withdraw from all vaults; actual withdrawal may be less. If `WITHDRAW_EVERYTHING`, just withdraw everything.\\n     * @param firstVaultId First vault id to pull from; 0 to start at the the beginning\\n     * @param lastVaultId Last vault id to pull from; `MAX_VAULT_ID` to withdraw from all vaults\\n     * @return The number of tokens received by recipient.\\n     */\\n    function withdraw(\\n        address token,\\n        address recipient,\\n        uint256 amount,\\n        uint256 firstVaultId,\\n        uint256 lastVaultId\\n    ) external returns (uint256) {\\n        return\\n            _withdraw(\\n                IERC20(token),\\n                _msgSender(),\\n                recipient,\\n                amount,\\n                firstVaultId,\\n                lastVaultId\\n            );\\n    }\\n\\n    /**\\n     * @notice Called to redeem withdrawer's shares from underlying vault(s), with the proceeds distributed to recipient.\\n     * @dev Withdrawer must approve this contract to use their vault shares or this call will revert.\\n     * @param token Address of the ERC20 token to withdraw from vaults\\n     * @param withdrawer Address to pull the vault shares from. SECURITY SENSITIVE.\\n     * @param recipient Address to receive the withdrawn tokens\\n     * @param amount Maximum number of tokens to withdraw from all vaults; actual withdrawal may be less. If `WITHDRAW_EVERYTHING`, just withdraw everything.\\n     * @param firstVaultId First vault id to pull from; 0 to start at the the beginning\\n     * @param lastVaultId Last vault id to pull from; `MAX_VAULT_ID` to withdraw from all vaults\\n     * @return withdrawn The number of tokens received by recipient.\\n     */\\n    function _withdraw(\\n        IERC20 token,\\n        address withdrawer,\\n        address recipient,\\n        uint256 amount,\\n        uint256 firstVaultId,\\n        uint256 lastVaultId\\n    ) internal returns (uint256 withdrawn) {\\n        require(firstVaultId <= lastVaultId);\\n\\n        uint256 _lastVaultId = lastVaultId;\\n        if (_lastVaultId == MAX_VAULT_ID)\\n            _lastVaultId = registry.numVaults(address(token)) - 1;\\n\\n        for (\\n            uint256 i = firstVaultId;\\n            withdrawn + 1 < amount && i <= _lastVaultId;\\n            i++\\n        ) {\\n            VaultAPI vault = registry.vaults(address(token), i);\\n\\n            uint256 availableShares = Math.min(\\n                vault.balanceOf(withdrawer),\\n                vault.maxAvailableShares()\\n            );\\n            // Restrict by the allowance that `withdrawer` has given to this contract\\n            availableShares = Math.min(\\n                availableShares,\\n                vault.allowance(withdrawer, address(this))\\n            );\\n            if (availableShares == 0) continue;\\n\\n            uint256 maxShares;\\n            if (amount != WITHDRAW_EVERYTHING) {\\n                // Compute amount to withdraw fully to satisfy the request\\n                uint256 estimatedShares = ((amount - withdrawn) *\\n                    10**vault.decimals()) / vault.pricePerShare();\\n\\n                // Limit amount to withdraw to the maximum made available to this contract\\n                // NOTE: Avoid corner case where `estimatedShares` isn't precise enough\\n                // NOTE: If `0 < estimatedShares < 1` but `availableShares > 1`, this will withdraw more than necessary\\n                maxShares = Math.min(availableShares, estimatedShares);\\n            } else {\\n                maxShares = availableShares;\\n            }\\n\\n            uint256 beforeBal = vault.balanceOf(address(this));\\n\\n            SafeERC20.safeTransferFrom(\\n                vault,\\n                withdrawer,\\n                address(this),\\n                maxShares\\n            );\\n\\n            withdrawn += vault.withdraw(maxShares, recipient);\\n\\n            uint256 afterWithdrawBal = vault.balanceOf(address(this));\\n            if (afterWithdrawBal > beforeBal) {\\n                SafeERC20.safeTransfer(\\n                    vault,\\n                    withdrawer,\\n                    afterWithdrawBal - beforeBal\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Called to migrate all of the caller's shares to the latest vault.\\n     * @dev The caller must approve this contract to use their vault shares or this call will revert.\\n     * @param token Address of the ERC20 token to migrate the vaults of\\n     * @return The number of tokens migrated.\\n     */\\n    function migrate(address token) external returns (uint256) {\\n        return\\n            _migrate(\\n                IERC20(token),\\n                _msgSender(),\\n                MIGRATE_EVERYTHING,\\n                0,\\n                MAX_VAULT_ID\\n            );\\n    }\\n\\n    /**\\n     * @notice Called to migrate the caller's shares to the latest vault.\\n     * @dev The caller must approve this contract to use their vault shares or this call will revert.\\n     * @param token Address of the ERC20 token to migrate the vaults of\\n     * @param amount Maximum number of tokens to migrate from all vaults; actual migration may be less. If `MIGRATE_EVERYTHING`, just migrate everything.\\n     * @return The number of tokens migrated.\\n     */\\n    function migrate(address token, uint256 amount) external returns (uint256) {\\n        return _migrate(IERC20(token), _msgSender(), amount, 0, MAX_VAULT_ID);\\n    }\\n\\n    /**\\n     * @notice Called to migrate the caller's shares to the latest vault.\\n     * @dev The caller must approve this contract to use their vault shares or this call will revert.\\n     * @param token Address of the ERC20 token to migrate the vaults of\\n     * @param amount Maximum number of tokens to migrate from all vaults; actual migration may be less. If `MIGRATE_EVERYTHING`, just migrate everything.\\n     * @param firstVaultId First vault id to migrate from; 0 to start at the the beginning\\n     * @param lastVaultId Last vault id to migrate from; `MAX_VAULT_ID` to migrate from all vaults\\n     * @return The number of tokens migrated.\\n     */\\n    function migrate(\\n        address token,\\n        uint256 amount,\\n        uint256 firstVaultId,\\n        uint256 lastVaultId\\n    ) external returns (uint256) {\\n        return\\n            _migrate(\\n                IERC20(token),\\n                _msgSender(),\\n                amount,\\n                firstVaultId,\\n                lastVaultId\\n            );\\n    }\\n\\n    /**\\n     * @notice Called to migrate migrator's shares to the latest vault.\\n     * @dev Migrator must approve this contract to use their vault shares or this call will revert.\\n     * @param token Address of the ERC20 token to migrate the vaults of\\n     * @param migrator Address to migrate the shares of. SECURITY SENSITIVE.\\n     * @param amount Maximum number of tokens to migrate from all vaults; actual migration may be less. If `MIGRATE_EVERYTHING`, just migrate everything.\\n     * @param firstVaultId First vault id to migrate from; 0 to start at the the beginning\\n     * @param lastVaultId Last vault id to migrate from; `MAX_VAULT_ID` to migrate from all vaults\\n     * @return migrated The number of tokens migrated.\\n     */\\n    function _migrate(\\n        IERC20 token,\\n        address migrator,\\n        uint256 amount,\\n        uint256 firstVaultId,\\n        uint256 lastVaultId\\n    ) internal returns (uint256 migrated) {\\n        uint256 latestVaultId = registry.numVaults(address(token)) - 1;\\n        if (amount == 0 || latestVaultId == 0) return 0; // Nothing to migrate, or nowhere to go (not a failure)\\n\\n        VaultAPI _latestVault = registry.vaults(address(token), latestVaultId);\\n        uint256 _amount = Math.min(\\n            amount,\\n            _latestVault.depositLimit() - _latestVault.totalAssets()\\n        );\\n\\n        uint256 beforeWithdrawBal = token.balanceOf(address(this));\\n        _withdraw(\\n            token,\\n            migrator,\\n            address(this),\\n            _amount,\\n            firstVaultId,\\n            Math.min(lastVaultId, latestVaultId - 1)\\n        );\\n        uint256 afterWithdrawBal = token.balanceOf(address(this));\\n        require(afterWithdrawBal > beforeWithdrawBal, \\\"withdraw failed\\\");\\n\\n        _deposit(\\n            token,\\n            address(this),\\n            migrator,\\n            afterWithdrawBal - beforeWithdrawBal,\\n            latestVaultId\\n        );\\n        uint256 afterDepositBal = token.balanceOf(address(this));\\n        require(afterWithdrawBal > afterDepositBal, \\\"deposit failed\\\");\\n        migrated = afterWithdrawBal - afterDepositBal;\\n\\n        if (afterWithdrawBal - beforeWithdrawBal > migrated) {\\n            SafeERC20.safeTransfer(\\n                token,\\n                migrator,\\n                afterDepositBal - beforeWithdrawBal\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"YearnAPI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"IERC20.sol\\\";\\n\\ninterface VaultAPI is IERC20 {\\n    function decimals() external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 expiry,\\n        bytes calldata signature\\n    ) external returns (bool);\\n\\n    function deposit(uint256 amount, address recipient)\\n        external\\n        returns (uint256);\\n\\n    function withdraw(uint256 maxShares, address recipient)\\n        external\\n        returns (uint256);\\n\\n    function token() external view returns (address);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function totalAssets() external view returns (uint256);\\n\\n    function depositLimit() external view returns (uint256);\\n\\n    function maxAvailableShares() external view returns (uint256);\\n}\\n\\ninterface RegistryAPI {\\n    function governance() external view returns (address);\\n\\n    function latestVault(address token) external view returns (VaultAPI);\\n\\n    function numVaults(address token) external view returns (uint256);\\n\\n    function vaults(address token, uint256 deploymentId)\\n        external\\n        view\\n        returns (VaultAPI);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"yearnRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"latestVault\",\"outputs\":[{\"internalType\":\"contract VaultAPI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstVaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastVaultId\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"numVaults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract RegistryAPI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"yearnRegistry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"firstVaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastVaultId\",\"type\":\"uint256\"}],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"totalVaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"firstVaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastVaultId\",\"type\":\"uint256\"}],\"name\":\"totalVaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deploymentId\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"contract VaultAPI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstVaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastVaultId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ShapeShiftDAORouter","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000050c1a2ea0a861a967d9d0ffe2ae4012c2e053804","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}