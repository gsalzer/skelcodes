{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SportsIconPrivateVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/ISportsIconPrivateVesting.sol\\\";\\n\\ncontract SportsIconPrivateVesting is ISportsIconPrivateVesting {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) public override vestedTokensOf;\\n    mapping(address => uint256) public vestedTokensOfPrivileged;\\n    mapping(address => uint256) public override claimedOf;\\n    IERC20 public override token;\\n    uint256 private startTime;\\n    uint256 public vestingPeriod;\\n\\n    constructor(\\n        address _tokenAddress,\\n        address[] memory holders,\\n        uint256[] memory balances,\\n        address[] memory privilegedHolders,\\n        uint256[] memory privilegedBalances,\\n        uint256 _vestingPeriod\\n    ) {\\n        require(\\n            (holders.length == balances.length) &&\\n                (privilegedHolders.length == privilegedBalances.length),\\n            \\\"Constructor :: Holders and balances differ\\\"\\n        );\\n        require(\\n            _tokenAddress != address(0x0),\\n            \\\"Constructor :: Invalid token address\\\"\\n        );\\n        require(_vestingPeriod > 0, \\\"Constructor :: Invalid vesting period\\\");\\n\\n        token = IERC20(_tokenAddress);\\n\\n        for (uint256 i = 0; i < holders.length; i++) {\\n            if ((i <= privilegedHolders.length - 1) && (privilegedHolders.length > 0)) {\\n                vestedTokensOfPrivileged[privilegedHolders[i]] = privilegedBalances[i];\\n            }\\n\\n            vestedTokensOf[holders[i]] = balances[i];\\n        }\\n\\n        vestingPeriod = _vestingPeriod;\\n        startTime = block.timestamp;\\n    }\\n\\n    function freeTokens(address user) public view override returns (uint256) {\\n        uint256 owed = calculateOwed(user);\\n        return owed.sub(claimedOf[user]);\\n    }\\n\\n    function claim() external override returns (uint256) {\\n        uint256 tokens = freeTokens(msg.sender);\\n        claimedOf[msg.sender] = claimedOf[msg.sender].add(tokens);\\n\\n        require(token.transfer(msg.sender, tokens), \\\"Claim :: Transfer failed\\\");\\n\\n        emit LogTokensClaimed(msg.sender, tokens);\\n\\n        return tokens;\\n    }\\n\\n    function calculateOwed(address user) internal view returns (uint256) {\\n        if (vestedTokensOfPrivileged[user] > 0) {\\n            return vestedTokensOfPrivileged[user];\\n        }\\n\\n        uint256 periodsPassed = ((block.timestamp.sub(startTime)).div(30 days));\\n        if (periodsPassed > vestingPeriod) {\\n            periodsPassed = vestingPeriod;\\n        }\\n        uint256 vestedTokens = vestedTokensOf[user];\\n        uint256 initialUnlock = vestedTokens.div(10);\\n        uint256 remainder = vestedTokens.sub(initialUnlock);\\n        uint256 monthlyUnlock = periodsPassed.mul(remainder).div(vestingPeriod);\\n        return initialUnlock.add(monthlyUnlock);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISportsIconPrivateVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ISportsIconPrivateVesting {\\n\\n\\tevent LogTokensClaimed(address claimer, uint256 tokensClaimed);\\n\\n\\tfunction token() external view returns(IERC20);\\n\\tfunction vestedTokensOf(address) external view returns(uint256);\\n\\tfunction claimedOf(address) external view returns(uint256);\\n\\n\\tfunction freeTokens(address) external view returns(uint256);\\n\\n\\tfunction claim() external returns(uint256);\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"privilegedHolders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"privilegedBalances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_vestingPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensClaimed\",\"type\":\"uint256\"}],\"name\":\"LogTokensClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"freeTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestedTokensOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestedTokensOfPrivileged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SportsIconPrivateVesting","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003f68e7b44e9bcb486c2feadb7a2289d9cdfc908800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000004e000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000a200000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002000000000000000000000000078c5fa233eb07486333b91aca0a6cfa198b2445900000000000000000000000061503ad92e94ca295926854b35dfced55797f5a100000000000000000000000081beb1ecc33b36f5ebbf956ffc72812fad6c2a58000000000000000000000000d115eb6850af6cfdfe3ff15330f352639dccf41e000000000000000000000000437062155b3017ca6cf11604a34978429148aa930000000000000000000000004985332cc97be2125ce4c64c6fc19c05676c619600000000000000000000000050899582199c06d5264eddcd12879e5210783ba8000000000000000000000000e7521950426479d525381940604d27aec12fe97a000000000000000000000000928f8c7b6009f01d8d6f3233a2baf5499987f4bc000000000000000000000000474bc7386f1d2e95fcb51774f116f64f211d2e41000000000000000000000000c5f2f568b7a7b35f0131822d915f1a409dba424c000000000000000000000000992100c8602a9a8a30d0ee47dcefeeb123282491000000000000000000000000736011b7d04d8a014efdae6a653e3405f3cdc720000000000000000000000000dba3924fff12a672a42a415e42b0ef1dd46e2fbd0000000000000000000000004a147bdeb91fb712718411ee291bc229ebac5d1d00000000000000000000000027696f2244ea9e5cade0ef96fddddaa0fb3a99fa0000000000000000000000006d16749cefb3892a101631279a8fe7369a281d0e000000000000000000000000d266d61ac22c2a2ac2dd832e79c14ea152c998d600000000000000000000000053a2f447c61152917493679f8105811198648d810000000000000000000000002d69bab9738b05048be16de3e5e0a945b8eeef3a0000000000000000000000005e5a953a496bfeeb5620968a7083fc060196c3fa000000000000000000000000a18376780eb719ba2d2abb02d1c6e4b8689329e0000000000000000000000000f7845cc3d24a511e15a0368871465f0dc5ae4fb1000000000000000000000000941fd7ea419cd021b0f3a416fec1e39f9d7e882f000000000000000000000000f2af086d15c244d4ad29f55e47aa446c472a1f67000000000000000000000000c643fe7fe547c1a9ef2cbb875cdce930fa59a517000000000000000000000000df585dce0de45b79991015f600afd7ac12f91107000000000000000000000000dc479805c0837354dd33a2b494731a0c7e01babf0000000000000000000000004ba5ca72c0d647ef13c7c6903199bd3db7bc6f9f0000000000000000000000002ddc842ce54866d6ff58f5f82c6fb838e6a74cd3000000000000000000000000abdc47ed04c62b6c0d58f2668cd09200688e1495000000000000000000000000db01f2e7d8f0d84771c187c85569363edb7046680000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000005ac0e75db43f54f70000000000000000000000000000000000000000000000002d60739d16a6729b0000000000000000000000000000000000000000000000001e404d13646ef712000000000000000000000000000000000000000000000000060cdc3e2f137af70000000000000000000000000000000000000000000000001e404d13646ef712000000000000000000000000000000000000000000000000244d2951938272090000000000000000000000000000000000000000000000001e404d13646ef7120000000000000000000000000000000000000000000000001e404d13646ef712000000000000000000000000000000000000000000000000122694ba8d3a70e5000000000000000000000000000000000000000000000000122694ba8d3a70e5000000000000000000000000000000000000000000000000122694ba8d3a70e5000000000000000000000000000000000000000000000000122694ba8d3a70e500000000000000000000000000000000000000000000000003066e0d5410859b000000000000000000000000000000000000000000000000122694ba8d3a70e500000000000000000000000000000000000000000000000009134a4b832400920000000000000000000000000000000000000000000000000f202689b2377b890000000000000000000000000000000000000000000000001e404d13646ef7120000000000000000000000000000000000000000000000003c809a4a4fd05de5000000000000000000000000000000000000000000000000122694ba8d3a70e50000000000000000000000000000000000000000000000000c19b87c5e26f5ee000000000000000000000000000000000000000000000000122694ba8d3a70e50000000000000000000000000000000000000000000000000f202689b2377b890000000000000000000000000000000000000000000000000c19b87c5e26f5ee0000000000000000000000000000000000000000000000003673be0c20bce2ee000000000000000000000000000000000000000000000000122694ba8d3a70e50000000000000000000000000000000000000000000000000f202689b2377b890000000000000000000000000000000000000000000000000c19b87c5e26f5ee0000000000000000000000000000000000000000000000000c19b87c5e26f5ee000000000000000000000000000000000000000000000000060cdc3e2f137af70000000000000000000000000000000000000000000000000f202689b2377b89000000000000000000000000000000000000000000000000060cdc3e2f137af7000000000000000000000000000000000000000000000000135c5a4b45ace00900000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000c083993bce6dd179ee3362679e0c67a801daa522000000000000000000000000f81e2776d22c9628305a2adcefc2598f3bb7d6c6000000000000000000000000844391ee1ee89252df177a80ae985beba413d11c00000000000000000000000054318eac4d8c9e188ddb724d09eeacbf5d1958ea000000000000000000000000290f1b0c1fed0e5eb65b529cea20849f378510fa000000000000000000000000bb28baba4f221f26cef270dc03a0ef242a603a5b00000000000000000000000099c3b49582da400737b32bc53ca719633fa8b6330000000000000000000000009d6b571587e6bd5162f424b055f2e71e68263e9a0000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000f202689b2377b890000000000000000000000000000000000000000000000000f202689b2377b890000000000000000000000000000000000000000000000000f202689b2377b890000000000000000000000000000000000000000000000000f202689b2377b890000000000000000000000000000000000000000000000000f202689b2377b890000000000000000000000000000000000000000000000000f202689b2377b890000000000000000000000000000000000000000000000000f202689b2377b890000000000000000000000000000000000000000000000000f202689b2377b890000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}