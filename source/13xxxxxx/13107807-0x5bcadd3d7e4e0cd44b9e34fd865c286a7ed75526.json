{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FujiVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./abstracts/vault/VaultBaseUpgradeable.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IHarvester.sol\\\";\\nimport \\\"./interfaces/IERC20Extended.sol\\\";\\nimport \\\"./interfaces/chainlink/AggregatorV3Interface.sol\\\";\\nimport \\\"./interfaces/IFujiAdmin.sol\\\";\\nimport \\\"./interfaces/IFujiOracle.sol\\\";\\nimport \\\"./interfaces/IFujiERC1155.sol\\\";\\nimport \\\"./interfaces/IProvider.sol\\\";\\nimport \\\"./libraries/Errors.sol\\\";\\nimport \\\"./libraries/LibUniversalERC20.sol\\\";\\n\\ncontract FujiVault is VaultBaseUpgradeable, ReentrancyGuardUpgradeable, IVault {\\n  using SafeERC20 for IERC20;\\n  using LibUniversalERC20 for IERC20;\\n\\n  address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  struct Factor {\\n    uint64 a;\\n    uint64 b;\\n  }\\n\\n  // Safety factor\\n  Factor public safetyF;\\n\\n  // Collateralization factor\\n  Factor public collatF;\\n\\n  // Bonus Factor for Flash Liquidation\\n  Factor public bonusFlashLiqF;\\n\\n  // Bonus factor for liquidation\\n  Factor public bonusLiqF;\\n\\n  //State variables\\n  address[] public providers;\\n  address public override activeProvider;\\n\\n  IFujiAdmin private _fujiAdmin;\\n  address public override fujiERC1155;\\n  IFujiOracle public oracle;\\n\\n  string public name;\\n\\n  uint8 internal _collateralAssetDecimals;\\n  uint8 internal _borrowAssetDecimals;\\n\\n  modifier isAuthorized() {\\n    require(\\n      msg.sender == owner() || msg.sender == _fujiAdmin.getController(),\\n      Errors.VL_NOT_AUTHORIZED\\n    );\\n    _;\\n  }\\n\\n  modifier onlyFlash() {\\n    require(msg.sender == _fujiAdmin.getFlasher(), Errors.VL_NOT_AUTHORIZED);\\n    _;\\n  }\\n\\n  modifier onlyFliquidator() {\\n    require(msg.sender == _fujiAdmin.getFliquidator(), Errors.VL_NOT_AUTHORIZED);\\n    _;\\n  }\\n\\n  function initialize(\\n    address _fujiadmin,\\n    address _oracle,\\n    address _collateralAsset,\\n    address _borrowAsset\\n  ) external initializer {\\n    __Ownable_init();\\n    __Pausable_init();\\n    __ReentrancyGuard_init();\\n\\n    _fujiAdmin = IFujiAdmin(_fujiadmin);\\n    oracle = IFujiOracle(_oracle);\\n    vAssets.collateralAsset = _collateralAsset;\\n    vAssets.borrowAsset = _borrowAsset;\\n\\n    string memory collateralSymbol;\\n    string memory borrowSymbol;\\n\\n    if (_collateralAsset == ETH) {\\n      collateralSymbol = \\\"ETH\\\";\\n      _collateralAssetDecimals = 18;\\n    } else {\\n      collateralSymbol = IERC20Extended(_collateralAsset).symbol();\\n      _collateralAssetDecimals = IERC20Extended(_collateralAsset).decimals();\\n    }\\n\\n    if (_borrowAsset == ETH) {\\n      borrowSymbol = \\\"ETH\\\";\\n      _borrowAssetDecimals = 18;\\n    } else {\\n      borrowSymbol = IERC20Extended(_borrowAsset).symbol();\\n      _borrowAssetDecimals = IERC20Extended(_borrowAsset).decimals();\\n    }\\n\\n    name = string(abi.encodePacked(\\\"Vault\\\", collateralSymbol, borrowSymbol));\\n\\n    // 1.05\\n    safetyF.a = 21;\\n    safetyF.b = 20;\\n\\n    // 1.269\\n    collatF.a = 80;\\n    collatF.b = 63;\\n\\n    // 0.05\\n    bonusLiqF.a = 1;\\n    bonusLiqF.b = 20;\\n  }\\n\\n  receive() external payable {}\\n\\n  //Core functions\\n\\n  /**\\n   * @dev Deposits collateral and borrows underlying in a single function call from activeProvider\\n   * @param _collateralAmount: amount to be deposited\\n   * @param _borrowAmount: amount to be borrowed\\n   */\\n  function depositAndBorrow(uint256 _collateralAmount, uint256 _borrowAmount) external payable {\\n    deposit(_collateralAmount);\\n    borrow(_borrowAmount);\\n  }\\n\\n  /**\\n   * @dev Paybacks the underlying asset and withdraws collateral in a single function call from activeProvider\\n   * @param _paybackAmount: amount of underlying asset to be payback, pass -1 to pay full amount\\n   * @param _collateralAmount: amount of collateral to be withdrawn, pass -1 to withdraw maximum amount\\n   */\\n  function paybackAndWithdraw(int256 _paybackAmount, int256 _collateralAmount) external payable {\\n    payback(_paybackAmount);\\n    withdraw(_collateralAmount);\\n  }\\n\\n  /**\\n   * @dev Deposit Vault's type collateral to activeProvider\\n   * call Controller checkrates\\n   * @param _collateralAmount: to be deposited\\n   * Emits a {Deposit} event.\\n   */\\n  function deposit(uint256 _collateralAmount) public payable override {\\n    if (vAssets.collateralAsset == ETH) {\\n      require(msg.value == _collateralAmount && _collateralAmount != 0, Errors.VL_AMOUNT_ERROR);\\n    } else {\\n      require(_collateralAmount != 0, Errors.VL_AMOUNT_ERROR);\\n      IERC20(vAssets.collateralAsset).safeTransferFrom(\\n        msg.sender,\\n        address(this),\\n        _collateralAmount\\n      );\\n    }\\n\\n    // Delegate Call Deposit to current provider\\n    _deposit(_collateralAmount, address(activeProvider));\\n\\n    // Collateral Management\\n    IFujiERC1155(fujiERC1155).mint(msg.sender, vAssets.collateralID, _collateralAmount, \\\"\\\");\\n\\n    emit Deposit(msg.sender, vAssets.collateralAsset, _collateralAmount);\\n  }\\n\\n  /**\\n   * @dev Withdraws Vault's type collateral from activeProvider\\n   * call Controller checkrates - by normal users\\n   * @param _withdrawAmount: amount of collateral to withdraw\\n   * otherwise pass -1 to withdraw maximum amount possible of collateral (including safety factors)\\n   * Emits a {Withdraw} event.\\n   */\\n  function withdraw(int256 _withdrawAmount) public override nonReentrant {\\n    // Logic used when called by Normal User\\n    updateF1155Balances();\\n\\n    // Get User Collateral in this Vault\\n    uint256 providedCollateral = IFujiERC1155(fujiERC1155).balanceOf(\\n      msg.sender,\\n      vAssets.collateralID\\n    );\\n\\n    // Check User has collateral\\n    require(providedCollateral > 0, Errors.VL_INVALID_COLLATERAL);\\n\\n    // Get Required Collateral with Factors to maintain debt position healthy\\n    uint256 neededCollateral = getNeededCollateralFor(\\n      IFujiERC1155(fujiERC1155).balanceOf(msg.sender, vAssets.borrowID),\\n      true\\n    );\\n\\n    uint256 amountToWithdraw = _withdrawAmount < 0\\n      ? providedCollateral - neededCollateral\\n      : uint256(_withdrawAmount);\\n\\n    // Check Withdrawal amount, and that it will not fall undercollaterized.\\n    require(\\n      amountToWithdraw != 0 && providedCollateral - amountToWithdraw >= neededCollateral,\\n      Errors.VL_INVALID_WITHDRAW_AMOUNT\\n    );\\n\\n    // Collateral Management before Withdraw Operation\\n    IFujiERC1155(fujiERC1155).burn(msg.sender, vAssets.collateralID, amountToWithdraw);\\n\\n    // Delegate Call Withdraw to current provider\\n    _withdraw(amountToWithdraw, address(activeProvider));\\n\\n    // Transer Assets to User\\n    IERC20(vAssets.collateralAsset).univTransfer(payable(msg.sender), amountToWithdraw);\\n\\n    emit Withdraw(msg.sender, vAssets.collateralAsset, amountToWithdraw);\\n  }\\n\\n  /**\\n   * @dev Withdraws Vault's type collateral from activeProvider\\n   * call Controller checkrates - by Fliquidator\\n   * @param _withdrawAmount: amount of collateral to withdraw\\n   * otherwise pass -1 to withdraw maximum amount possible of collateral (including safety factors)\\n   * Emits a {Withdraw} event.\\n   */\\n  function withdrawLiq(int256 _withdrawAmount) external override nonReentrant onlyFliquidator {\\n    // Logic used when called by Fliquidator\\n    _withdraw(uint256(_withdrawAmount), address(activeProvider));\\n    IERC20(vAssets.collateralAsset).univTransfer(payable(msg.sender), uint256(_withdrawAmount));\\n  }\\n\\n  /**\\n   * @dev Borrows Vault's type underlying amount from activeProvider\\n   * @param _borrowAmount: token amount of underlying to borrow\\n   * Emits a {Borrow} event.\\n   */\\n  function borrow(uint256 _borrowAmount) public override nonReentrant {\\n    updateF1155Balances();\\n\\n    uint256 providedCollateral = IFujiERC1155(fujiERC1155).balanceOf(\\n      msg.sender,\\n      vAssets.collateralID\\n    );\\n\\n    // Get Required Collateral with Factors to maintain debt position healthy\\n    uint256 neededCollateral = getNeededCollateralFor(\\n      _borrowAmount + IFujiERC1155(fujiERC1155).balanceOf(msg.sender, vAssets.borrowID),\\n      true\\n    );\\n\\n    // Check Provided Collateral is not Zero, and greater than needed to maintain healthy position\\n    require(\\n      _borrowAmount != 0 && providedCollateral > neededCollateral,\\n      Errors.VL_INVALID_BORROW_AMOUNT\\n    );\\n\\n    // Debt Management\\n    IFujiERC1155(fujiERC1155).mint(msg.sender, vAssets.borrowID, _borrowAmount, \\\"\\\");\\n\\n    // Delegate Call Borrow to current provider\\n    _borrow(_borrowAmount, address(activeProvider));\\n\\n    // Transer Assets to User\\n    IERC20(vAssets.borrowAsset).univTransfer(payable(msg.sender), _borrowAmount);\\n\\n    emit Borrow(msg.sender, vAssets.borrowAsset, _borrowAmount);\\n  }\\n\\n  /**\\n   * @dev Paybacks Vault's type underlying to activeProvider - called by normal user\\n   * @param _repayAmount: token amount of underlying to repay, or pass -1 to repay full ammount\\n   * Emits a {Repay} event.\\n   */\\n  function payback(int256 _repayAmount) public payable override {\\n    // Logic used when called by normal user\\n    updateF1155Balances();\\n\\n    uint256 userDebtBalance = IFujiERC1155(fujiERC1155).balanceOf(msg.sender, vAssets.borrowID);\\n\\n    // Check User Debt is greater than Zero and amount is not Zero\\n    require(_repayAmount != 0 && userDebtBalance > 0, Errors.VL_NO_DEBT_TO_PAYBACK);\\n\\n    // TODO: Get => corresponding amount of BaseProtocol Debt and FujiDebt\\n\\n    // If passed argument amount is negative do MAX\\n    uint256 amountToPayback = _repayAmount < 0 ? userDebtBalance : uint256(_repayAmount);\\n\\n    if (vAssets.borrowAsset == ETH) {\\n      require(msg.value >= amountToPayback, Errors.VL_AMOUNT_ERROR);\\n      if (msg.value > amountToPayback) {\\n        IERC20(vAssets.borrowAsset).univTransfer(payable(msg.sender), msg.value - amountToPayback);\\n      }\\n    } else {\\n      // Check User Allowance\\n      require(\\n        IERC20(vAssets.borrowAsset).allowance(msg.sender, address(this)) >= amountToPayback,\\n        Errors.VL_MISSING_ERC20_ALLOWANCE\\n      );\\n\\n      // Transfer Asset from User to Vault\\n      IERC20(vAssets.borrowAsset).safeTransferFrom(msg.sender, address(this), amountToPayback);\\n    }\\n\\n    // Delegate Call Payback to current provider\\n    _payback(amountToPayback, address(activeProvider));\\n\\n    // Debt Management\\n    IFujiERC1155(fujiERC1155).burn(msg.sender, vAssets.borrowID, amountToPayback);\\n\\n    emit Payback(msg.sender, vAssets.borrowAsset, userDebtBalance);\\n  }\\n\\n  /**\\n   * @dev Paybacks Vault's type underlying to activeProvider\\n   * @param _repayAmount: token amount of underlying to repay, or pass -1 to repay full ammount\\n   * Emits a {Repay} event.\\n   */\\n  function paybackLiq(int256 _repayAmount) external payable override onlyFliquidator {\\n    // Logic used when called by Fliquidator\\n    _payback(uint256(_repayAmount), address(activeProvider));\\n  }\\n\\n  /**\\n   * @dev Changes Vault debt and collateral to newProvider, called by Flasher\\n   * @param _newProvider new provider's address\\n   * @param _flashLoanAmount amount of flashloan underlying to repay Flashloan\\n   * Emits a {Switch} event.\\n   */\\n  function executeSwitch(\\n    address _newProvider,\\n    uint256 _flashLoanAmount,\\n    uint256 _fee\\n  ) external payable override onlyFlash whenNotPaused {\\n    // Compute Ratio of transfer before payback\\n    uint256 ratio = (_flashLoanAmount * 1e18) /\\n      (IProvider(activeProvider).getBorrowBalance(vAssets.borrowAsset));\\n\\n    // Payback current provider\\n    _payback(_flashLoanAmount, activeProvider);\\n\\n    // Withdraw collateral proportional ratio from current provider\\n    uint256 collateraltoMove = (IProvider(activeProvider).getDepositBalance(\\n      vAssets.collateralAsset\\n    ) * ratio) / 1e18;\\n\\n    _withdraw(collateraltoMove, activeProvider);\\n\\n    // Deposit to the new provider\\n    _deposit(collateraltoMove, _newProvider);\\n\\n    // Borrow from the new provider, borrowBalance + premium\\n    _borrow(_flashLoanAmount + _fee, _newProvider);\\n\\n    // return borrowed amount to Flasher\\n    IERC20(vAssets.borrowAsset).univTransfer(payable(msg.sender), _flashLoanAmount + _fee);\\n\\n    emit Switch(activeProvider, _newProvider, _flashLoanAmount, collateraltoMove);\\n  }\\n\\n  // Setter, change state functions\\n\\n  /**\\n   * @dev Sets the fujiAdmin Address\\n   * @param _newFujiAdmin: FujiAdmin Contract Address\\n   */\\n  function setFujiAdmin(address _newFujiAdmin) external onlyOwner {\\n    _fujiAdmin = IFujiAdmin(_newFujiAdmin);\\n  }\\n\\n  /**\\n   * @dev Sets a new active provider for the Vault\\n   * @param _provider: fuji address of the new provider\\n   * Emits a {SetActiveProvider} event.\\n   */\\n  function setActiveProvider(address _provider) external override isAuthorized {\\n    require(_provider != address(0), Errors.VL_ZERO_ADDR);\\n    activeProvider = _provider;\\n\\n    emit SetActiveProvider(_provider);\\n  }\\n\\n  // Administrative functions\\n\\n  /**\\n   * @dev Sets a fujiERC1155 Collateral and Debt Asset manager for this vault and initializes it.\\n   * @param _fujiERC1155: fuji ERC1155 address\\n   */\\n  function setFujiERC1155(address _fujiERC1155) external isAuthorized {\\n    require(_fujiERC1155 != address(0), Errors.VL_ZERO_ADDR);\\n    fujiERC1155 = _fujiERC1155;\\n\\n    vAssets.collateralID = IFujiERC1155(_fujiERC1155).addInitializeAsset(\\n      IFujiERC1155.AssetType.collateralToken,\\n      address(this)\\n    );\\n    vAssets.borrowID = IFujiERC1155(_fujiERC1155).addInitializeAsset(\\n      IFujiERC1155.AssetType.debtToken,\\n      address(this)\\n    );\\n  }\\n\\n  /**\\n   * @dev Set Factors \\\"a\\\" and \\\"b\\\" for a Struct Factor\\n   * For safetyF;  Sets Safety Factor of Vault, should be > 1, a/b\\n   * For collatF; Sets Collateral Factor of Vault, should be > 1, a/b\\n   * @param _newFactorA: Nominator\\n   * @param _newFactorB: Denominator\\n   * @param _type: safetyF or collatF or bonusLiqF\\n   */\\n  function setFactor(\\n    uint64 _newFactorA,\\n    uint64 _newFactorB,\\n    string calldata _type\\n  ) external isAuthorized {\\n    bytes32 typeHash = keccak256(abi.encode(_type));\\n    if (typeHash == keccak256(abi.encode(\\\"collatF\\\"))) {\\n      collatF.a = _newFactorA;\\n      collatF.b = _newFactorB;\\n    } else if (typeHash == keccak256(abi.encode(\\\"safetyF\\\"))) {\\n      safetyF.a = _newFactorA;\\n      safetyF.b = _newFactorB;\\n    } else if (typeHash == keccak256(abi.encode(\\\"bonusLiqF\\\"))) {\\n      bonusLiqF.a = _newFactorA;\\n      bonusLiqF.b = _newFactorB;\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the Oracle address (Must Comply with AggregatorV3Interface)\\n   * @param _oracle: new Oracle address\\n   */\\n  function setOracle(address _oracle) external isAuthorized {\\n    oracle = IFujiOracle(_oracle);\\n  }\\n\\n  /**\\n   * @dev Set providers to the Vault\\n   * @param _providers: new providers' addresses\\n   */\\n  function setProviders(address[] calldata _providers) external isAuthorized {\\n    providers = _providers;\\n  }\\n\\n  /**\\n   * @dev External Function to call updateState in F1155\\n   */\\n  function updateF1155Balances() public override {\\n    uint256 borrowBals;\\n    uint256 depositBals;\\n\\n    // take into account all balances across providers\\n    uint256 length = providers.length;\\n    for (uint256 i = 0; i < length; i++) {\\n      depositBals =\\n        depositBals +\\n        IProvider(providers[i]).getDepositBalance(vAssets.collateralAsset);\\n      borrowBals = borrowBals + (IProvider(providers[i]).getBorrowBalance(vAssets.borrowAsset));\\n    }\\n\\n    IFujiERC1155(fujiERC1155).updateState(vAssets.borrowID, borrowBals);\\n    IFujiERC1155(fujiERC1155).updateState(vAssets.collateralID, depositBals);\\n  }\\n\\n  //Getter Functions\\n\\n  /**\\n   * @dev Returns an array of the Vault's providers\\n   */\\n  function getProviders() external view override returns (address[] memory) {\\n    return providers;\\n  }\\n\\n  /**\\n   * @dev Returns an amount to be paid as bonus for liquidation\\n   * @param _amount: Vault underlying type intended to be liquidated\\n   */\\n  function getLiquidationBonusFor(uint256 _amount) external view override returns (uint256) {\\n    return (_amount * bonusLiqF.a) / bonusLiqF.b;\\n  }\\n\\n  /**\\n   * @dev Returns the amount of collateral needed, including or not safety factors\\n   * @param _amount: Vault underlying type intended to be borrowed\\n   * @param _withFactors: Inidicate if computation should include safety_Factors\\n   */\\n  function getNeededCollateralFor(uint256 _amount, bool _withFactors)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    // Get exchange rate\\n    uint256 price = oracle.getPriceOf(\\n      vAssets.collateralAsset,\\n      vAssets.borrowAsset,\\n      _collateralAssetDecimals\\n    );\\n    uint256 minimumReq = (_amount * price) / (10**uint256(_borrowAssetDecimals));\\n    if (_withFactors) {\\n      return (minimumReq * (collatF.a) * (safetyF.a)) / (collatF.b) / (safetyF.b);\\n    } else {\\n      return minimumReq;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the borrow balance of the Vault's underlying at a particular provider\\n   * @param _provider: address of a provider\\n   */\\n  function borrowBalance(address _provider) external view override returns (uint256) {\\n    return IProvider(_provider).getBorrowBalance(vAssets.borrowAsset);\\n  }\\n\\n  /**\\n   * @dev Returns the deposit balance of the Vault's type collateral at a particular provider\\n   * @param _provider: address of a provider\\n   */\\n  function depositBalance(address _provider) external view override returns (uint256) {\\n    return IProvider(_provider).getDepositBalance(vAssets.collateralAsset);\\n  }\\n\\n  /**\\n   * @dev Harvests the Rewards from baseLayer Protocols\\n   * @param _farmProtocolNum: number per VaultHarvester Contract for specific farm\\n   */\\n  function harvestRewards(uint256 _farmProtocolNum) external onlyOwner {\\n    address tokenReturned = IVaultHarvester(_fujiAdmin.getVaultHarvester()).collectRewards(\\n      _farmProtocolNum\\n    );\\n    uint256 tokenBal = IERC20(tokenReturned).balanceOf(address(this));\\n    require(tokenReturned != address(0) && tokenBal > 0, Errors.VL_HARVESTING_FAILED);\\n    IERC20(tokenReturned).univTransfer(payable(_fujiAdmin.getTreasury()), tokenBal);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/abstracts/vault/VaultBaseUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../../interfaces/IVaultControl.sol\\\";\\nimport \\\"../../libraries/LibUniversalERC20.sol\\\";\\n\\nabstract contract VaultControlUpgradeable is OwnableUpgradeable, PausableUpgradeable {\\n  using LibUniversalERC20 for IERC20;\\n\\n  //Vault Struct for Managed Assets\\n  IVaultControl.VaultAssets public vAssets;\\n\\n  //Pause Functions\\n\\n  /**\\n   * @dev Emergency Call to stop all basic money flow functions.\\n   */\\n  function pause() public onlyOwner {\\n    _pause();\\n  }\\n\\n  /**\\n   * @dev Emergency Call to stop all basic money flow functions.\\n   */\\n  function unpause() public onlyOwner {\\n    _unpause();\\n  }\\n}\\n\\ncontract VaultBaseUpgradeable is VaultControlUpgradeable {\\n  // Internal functions\\n\\n  /**\\n   * @dev Executes deposit operation with delegatecall.\\n   * @param _amount: amount to be deposited\\n   * @param _provider: address of provider to be used\\n   */\\n  function _deposit(uint256 _amount, address _provider) internal {\\n    bytes memory data = abi.encodeWithSignature(\\n      \\\"deposit(address,uint256)\\\",\\n      vAssets.collateralAsset,\\n      _amount\\n    );\\n    _execute(_provider, data);\\n  }\\n\\n  /**\\n   * @dev Executes withdraw operation with delegatecall.\\n   * @param _amount: amount to be withdrawn\\n   * @param _provider: address of provider to be used\\n   */\\n  function _withdraw(uint256 _amount, address _provider) internal {\\n    bytes memory data = abi.encodeWithSignature(\\n      \\\"withdraw(address,uint256)\\\",\\n      vAssets.collateralAsset,\\n      _amount\\n    );\\n    _execute(_provider, data);\\n  }\\n\\n  /**\\n   * @dev Executes borrow operation with delegatecall.\\n   * @param _amount: amount to be borrowed\\n   * @param _provider: address of provider to be used\\n   */\\n  function _borrow(uint256 _amount, address _provider) internal {\\n    bytes memory data = abi.encodeWithSignature(\\n      \\\"borrow(address,uint256)\\\",\\n      vAssets.borrowAsset,\\n      _amount\\n    );\\n    _execute(_provider, data);\\n  }\\n\\n  /**\\n   * @dev Executes payback operation with delegatecall.\\n   * @param _amount: amount to be paid back\\n   * @param _provider: address of provider to be used\\n   */\\n  function _payback(uint256 _amount, address _provider) internal {\\n    bytes memory data = abi.encodeWithSignature(\\n      \\\"payback(address,uint256)\\\",\\n      vAssets.borrowAsset,\\n      _amount\\n    );\\n    _execute(_provider, data);\\n  }\\n\\n  /**\\n   * @dev Returns byte response of delegatcalls\\n   */\\n  function _execute(address _target, bytes memory _data)\\n    internal\\n    whenNotPaused\\n    returns (bytes memory response)\\n  {\\n    /* solhint-disable */\\n    assembly {\\n      let succeeded := delegatecall(sub(gas(), 5000), _target, add(_data, 0x20), mload(_data), 0, 0)\\n      let size := returndatasize()\\n\\n      response := mload(0x40)\\n      mstore(0x40, add(response, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n      mstore(response, size)\\n      returndatacopy(add(response, 0x20), 0, size)\\n\\n      switch iszero(succeeded)\\n      case 1 {\\n        // throw if delegatecall failed\\n        revert(add(response, 0x20), size)\\n      }\\n    }\\n    /* solhint-disable */\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IVault {\\n  // Events\\n\\n  // Log Users Deposit\\n  event Deposit(address indexed userAddrs, address indexed asset, uint256 amount);\\n  // Log Users withdraw\\n  event Withdraw(address indexed userAddrs, address indexed asset, uint256 amount);\\n  // Log Users borrow\\n  event Borrow(address indexed userAddrs, address indexed asset, uint256 amount);\\n  // Log Users debt repay\\n  event Payback(address indexed userAddrs, address indexed asset, uint256 amount);\\n\\n  // Log New active provider\\n  event SetActiveProvider(address providerAddr);\\n  // Log Switch providers\\n  event Switch(\\n    address fromProviderAddrs,\\n    address toProviderAddr,\\n    uint256 debtamount,\\n    uint256 collattamount\\n  );\\n\\n  // Core Vault Functions\\n\\n  function deposit(uint256 _collateralAmount) external payable;\\n\\n  function withdraw(int256 _withdrawAmount) external;\\n\\n  function withdrawLiq(int256 _withdrawAmount) external;\\n\\n  function borrow(uint256 _borrowAmount) external;\\n\\n  function payback(int256 _repayAmount) external payable;\\n\\n  function paybackLiq(int256 _repayAmount) external payable;\\n\\n  function executeSwitch(\\n    address _newProvider,\\n    uint256 _flashLoanDebt,\\n    uint256 _fee\\n  ) external payable;\\n\\n  //Getter Functions\\n\\n  function activeProvider() external view returns (address);\\n\\n  function borrowBalance(address _provider) external view returns (uint256);\\n\\n  function depositBalance(address _provider) external view returns (uint256);\\n\\n  function getNeededCollateralFor(uint256 _amount, bool _withFactors)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function getLiquidationBonusFor(uint256 _amount) external view returns (uint256);\\n\\n  function getProviders() external view returns (address[] memory);\\n\\n  function fujiERC1155() external view returns (address);\\n\\n  //Setter Functions\\n\\n  function setActiveProvider(address _provider) external;\\n\\n  function updateF1155Balances() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHarvester.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IVaultHarvester {\\n  function collectRewards(uint256 _farmProtocolNum) external returns (address claimedToken);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Extended.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20Extended {\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/chainlink/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFujiAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFujiAdmin {\\n  function validVault(address _vaultAddr) external view returns (bool);\\n\\n  function getFlasher() external view returns (address);\\n\\n  function getFliquidator() external view returns (address);\\n\\n  function getController() external view returns (address);\\n\\n  function getTreasury() external view returns (address payable);\\n\\n  function getVaultHarvester() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFujiOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFujiOracle {\\n  function getPriceOf(\\n    address _collateralAsset,\\n    address _borrowAsset,\\n    uint8 _decimals\\n  ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFujiERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFujiERC1155 {\\n  //Asset Types\\n  enum AssetType {\\n    //uint8 = 0\\n    collateralToken,\\n    //uint8 = 1\\n    debtToken\\n  }\\n\\n  //General Getter Functions\\n\\n  function getAssetID(AssetType _type, address _assetAddr) external view returns (uint256);\\n\\n  function qtyOfManagedAssets() external view returns (uint64);\\n\\n  function balanceOf(address _account, uint256 _id) external view returns (uint256);\\n\\n  // function splitBalanceOf(address account,uint256 _AssetID) external view  returns (uint256,uint256);\\n\\n  // function balanceOfBatchType(address account, AssetType _Type) external view returns (uint256);\\n\\n  //Permit Controlled  Functions\\n  function mint(\\n    address _account,\\n    uint256 _id,\\n    uint256 _amount,\\n    bytes memory _data\\n  ) external;\\n\\n  function burn(\\n    address _account,\\n    uint256 _id,\\n    uint256 _amount\\n  ) external;\\n\\n  function updateState(uint256 _assetID, uint256 _newBalance) external;\\n\\n  function addInitializeAsset(AssetType _type, address _addr) external returns (uint64);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IProvider {\\n  //Basic Core Functions\\n\\n  function deposit(address _collateralAsset, uint256 _collateralAmount) external payable;\\n\\n  function borrow(address _borrowAsset, uint256 _borrowAmount) external payable;\\n\\n  function withdraw(address _collateralAsset, uint256 _collateralAmount) external payable;\\n\\n  function payback(address _borrowAsset, uint256 _borrowAmount) external payable;\\n\\n  // returns the borrow annualized rate for an asset in ray (1e27)\\n  //Example 8.5% annual interest = 0.085 x 10^27 = 85000000000000000000000000 or 85*(10**24)\\n  function getBorrowRateFor(address _asset) external view returns (uint256);\\n\\n  function getBorrowBalance(address _asset) external view returns (uint256);\\n\\n  function getDepositBalance(address _asset) external view returns (uint256);\\n\\n  function getBorrowBalanceOf(address _asset, address _who) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Errors library\\n * @author Fuji\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = Validation Logic 100 series\\n *  - MATH = Math libraries 200 series\\n *  - RF = Refinancing 300 series\\n *  - VLT = vault 400 series\\n *  - SP = Special 900 series\\n */\\nlibrary Errors {\\n  //Errors\\n  string public constant VL_INDEX_OVERFLOW = \\\"100\\\"; // index overflows uint128\\n  string public constant VL_INVALID_MINT_AMOUNT = \\\"101\\\"; //invalid amount to mint\\n  string public constant VL_INVALID_BURN_AMOUNT = \\\"102\\\"; //invalid amount to burn\\n  string public constant VL_AMOUNT_ERROR = \\\"103\\\"; //Input value >0, and for ETH msg.value and amount shall match\\n  string public constant VL_INVALID_WITHDRAW_AMOUNT = \\\"104\\\"; //Withdraw amount exceeds provided collateral, or falls undercollaterized\\n  string public constant VL_INVALID_BORROW_AMOUNT = \\\"105\\\"; //Borrow amount does not meet collaterization\\n  string public constant VL_NO_DEBT_TO_PAYBACK = \\\"106\\\"; //Msg sender has no debt amount to be payback\\n  string public constant VL_MISSING_ERC20_ALLOWANCE = \\\"107\\\"; //Msg sender has not approved ERC20 full amount to transfer\\n  string public constant VL_USER_NOT_LIQUIDATABLE = \\\"108\\\"; //User debt position is not liquidatable\\n  string public constant VL_DEBT_LESS_THAN_AMOUNT = \\\"109\\\"; //User debt is less than amount to partial close\\n  string public constant VL_PROVIDER_ALREADY_ADDED = \\\"110\\\"; // Provider is already added in Provider Array\\n  string public constant VL_NOT_AUTHORIZED = \\\"111\\\"; //Not authorized\\n  string public constant VL_INVALID_COLLATERAL = \\\"112\\\"; //There is no Collateral, or Collateral is not in active in vault\\n  string public constant VL_NO_ERC20_BALANCE = \\\"113\\\"; //User does not have ERC20 balance\\n  string public constant VL_INPUT_ERROR = \\\"114\\\"; //Check inputs. For ERC1155 batch functions, array sizes should match.\\n  string public constant VL_ASSET_EXISTS = \\\"115\\\"; //Asset intended to be added already exists in FujiERC1155\\n  string public constant VL_ZERO_ADDR_1155 = \\\"116\\\"; //ERC1155: balance/transfer for zero address\\n  string public constant VL_NOT_A_CONTRACT = \\\"117\\\"; //Address is not a contract.\\n  string public constant VL_INVALID_ASSETID_1155 = \\\"118\\\"; //ERC1155 Asset ID is invalid.\\n  string public constant VL_NO_ERC1155_BALANCE = \\\"119\\\"; //ERC1155: insufficient balance for transfer.\\n  string public constant VL_MISSING_ERC1155_APPROVAL = \\\"120\\\"; //ERC1155: transfer caller is not owner nor approved.\\n  string public constant VL_RECEIVER_REJECT_1155 = \\\"121\\\"; //ERC1155Receiver rejected tokens\\n  string public constant VL_RECEIVER_CONTRACT_NON_1155 = \\\"122\\\"; //ERC1155: transfer to non ERC1155Receiver implementer\\n  string public constant VL_OPTIMIZER_FEE_SMALL = \\\"123\\\"; //Fuji OptimizerFee has to be > 1 RAY (1e27)\\n  string public constant VL_UNDERCOLLATERIZED_ERROR = \\\"124\\\"; // Flashloan-Flashclose cannot be used when User's collateral is worth less than intended debt position to close.\\n  string public constant VL_MINIMUM_PAYBACK_ERROR = \\\"125\\\"; // Minimum Amount payback should be at least Fuji Optimizerfee accrued interest.\\n  string public constant VL_HARVESTING_FAILED = \\\"126\\\"; // Harvesting Function failed, check provided _farmProtocolNum or no claimable balance.\\n  string public constant VL_FLASHLOAN_FAILED = \\\"127\\\"; // Flashloan failed\\n  string public constant VL_ERC1155_NOT_TRANSFERABLE = \\\"128\\\"; // ERC1155: Not Transferable\\n  string public constant VL_SWAP_SLIPPAGE_LIMIT_EXCEED = \\\"129\\\"; // ERC1155: Not Transferable\\n  string public constant VL_ZERO_ADDR = \\\"130\\\"; // Zero Address\\n\\n  string public constant MATH_DIVISION_BY_ZERO = \\\"201\\\";\\n  string public constant MATH_ADDITION_OVERFLOW = \\\"202\\\";\\n  string public constant MATH_MULTIPLICATION_OVERFLOW = \\\"203\\\";\\n\\n  string public constant RF_INVALID_RATIO_VALUES = \\\"301\\\"; // Ratio Value provided is invalid, _ratioA/_ratioB <= 1, and > 0, or activeProvider borrowBalance = 0\\n\\n  string public constant VLT_CALLER_MUST_BE_VAULT = \\\"401\\\"; // The caller of this function must be a vault\\n\\n  string public constant ORACLE_INVALID_LENGTH = \\\"501\\\"; // The assets length and price feeds length doesn't match\\n  string public constant ORACLE_NONE_PRICE_FEED = \\\"502\\\"; // The price feed is not found\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibUniversalERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary LibUniversalERC20 {\\n  using SafeERC20 for IERC20;\\n\\n  IERC20 private constant _ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n  IERC20 private constant _ZERO_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\\n\\n  function isETH(IERC20 token) internal pure returns (bool) {\\n    return (token == _ZERO_ADDRESS || token == _ETH_ADDRESS);\\n  }\\n\\n  function univBalanceOf(IERC20 token, address account) internal view returns (uint256) {\\n    if (isETH(token)) {\\n      return account.balance;\\n    } else {\\n      return token.balanceOf(account);\\n    }\\n  }\\n\\n  function univTransfer(\\n    IERC20 token,\\n    address payable to,\\n    uint256 amount\\n  ) internal {\\n    if (amount > 0) {\\n      if (isETH(token)) {\\n        (bool sent, ) = to.call{ value: amount }(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n      } else {\\n        token.safeTransfer(to, amount);\\n      }\\n    }\\n  }\\n\\n  function univApprove(\\n    IERC20 token,\\n    address to,\\n    uint256 amount\\n  ) internal {\\n    require(!isETH(token), \\\"Approve called on ETH\\\");\\n\\n    if (amount == 0) {\\n      token.safeApprove(to, 0);\\n    } else {\\n      uint256 allowance = token.allowance(address(this), to);\\n      if (allowance < amount) {\\n        if (allowance > 0) {\\n          token.safeApprove(to, 0);\\n        }\\n        token.safeApprove(to, amount);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IVaultControl {\\n  struct VaultAssets {\\n    address collateralAsset;\\n    address borrowAsset;\\n    uint64 collateralID;\\n    uint64 borrowID;\\n  }\\n\\n  function vAssets() external view returns (VaultAssets memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddrs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddrs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddrs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"providerAddr\",\"type\":\"address\"}],\"name\":\"SetActiveProvider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromProviderAddrs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toProviderAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtamount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collattamount\",\"type\":\"uint256\"}],\"name\":\"Switch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddrs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusFlashLiqF\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"a\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"b\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusLiqF\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"a\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"b\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"borrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collatF\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"a\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"b\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"}],\"name\":\"depositAndBorrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"depositBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_flashLoanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"executeSwitch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fujiERC1155\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getLiquidationBonusFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withFactors\",\"type\":\"bool\"}],\"name\":\"getNeededCollateralFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProviders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_farmProtocolNum\",\"type\":\"uint256\"}],\"name\":\"harvestRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fujiadmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowAsset\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IFujiOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_repayAmount\",\"type\":\"int256\"}],\"name\":\"payback\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_paybackAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_collateralAmount\",\"type\":\"int256\"}],\"name\":\"paybackAndWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_repayAmount\",\"type\":\"int256\"}],\"name\":\"paybackLiq\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"providers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safetyF\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"a\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"b\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"setActiveProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_newFactorA\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_newFactorB\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"}],\"name\":\"setFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFujiAdmin\",\"type\":\"address\"}],\"name\":\"setFujiAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fujiERC1155\",\"type\":\"address\"}],\"name\":\"setFujiERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_providers\",\"type\":\"address[]\"}],\"name\":\"setProviders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateF1155Balances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vAssets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowAsset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"collateralID\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"borrowID\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_withdrawAmount\",\"type\":\"int256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_withdrawAmount\",\"type\":\"int256\"}],\"name\":\"withdrawLiq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"FujiVault","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}