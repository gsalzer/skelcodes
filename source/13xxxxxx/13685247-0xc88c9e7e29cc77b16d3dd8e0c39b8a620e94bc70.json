{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/access/OperatorAccess.sol\r\n\r\n\r\n// pragma solidity >=0.8.0 <1.0.0;\r\n\r\n// import \"/mnt/c/Users/chickenhat/Desktop/chics/node_modules/@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract OperatorAccess is Ownable {\r\n\r\n    mapping(address => bool) public operators;\r\n\r\n    event SetOperator(address account, bool status);\r\n\r\n    function setOperator(address _account, bool _status) external onlyOwner {\r\n        operators[_account] = _status;\r\n        emit SetOperator(_account, _status);\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(operators[msg.sender], \"only operator\");\r\n        _;\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/interfaces/ICowRegistry.sol\r\n\r\n\r\n// pragma solidity >=0.8.0 <1.0.0;\r\n\r\ninterface ICowRegistry {\r\n\r\n    enum Gender {\r\n        MALE,\r\n        FEMALE\r\n    }\r\n\r\n    struct Creature {\r\n        Gender gender;\r\n        uint8 rarity;\r\n    }\r\n\r\n    function set(uint16 _cowId, Creature memory _data) external;\r\n\r\n    function setBatch(uint16[] calldata _ids, Creature[] calldata _data) external;\r\n\r\n    function get(uint256 _tokenId) external view returns (Creature memory data);\r\n}\r\n\r\n// Root file: contracts/storage/CowsRegistry.sol\r\n\r\n\r\npragma solidity >=0.8.0 <1.0.0;\r\n\r\n// import \"contracts/access/OperatorAccess.sol\";\r\n// import \"contracts/interfaces/ICowRegistry.sol\";\r\n\r\ncontract CowsRegistry is OperatorAccess, ICowRegistry {\r\n\r\n    mapping(uint256 => Creature) internal _creature;\r\n\r\n    function set(uint16 _cowId, Creature memory _data) external override onlyOperator {\r\n        _creature[_cowId] = _data;\r\n    }\r\n\r\n    function setBatch(uint16[] calldata _ids, Creature[] calldata _data) external override onlyOperator {\r\n        uint len = _ids.length;\r\n\r\n        require(len == _data.length, \"Registry: _creature length not match\");\r\n\r\n        for (uint i; i < len; i++) {\r\n            _creature[_ids[i]] = _data[i];\r\n        }\r\n    }\r\n\r\n    function get(uint256 _tokenId) external override view returns (Creature memory data) {\r\n        data = _creature[_tokenId];\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SetOperator\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ICowRegistry.Gender\",\"name\":\"gender\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rarity\",\"type\":\"uint8\"}],\"internalType\":\"struct ICowRegistry.Creature\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_cowId\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"enum ICowRegistry.Gender\",\"name\":\"gender\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rarity\",\"type\":\"uint8\"}],\"internalType\":\"struct ICowRegistry.Creature\",\"name\":\"_data\",\"type\":\"tuple\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_ids\",\"type\":\"uint16[]\"},{\"components\":[{\"internalType\":\"enum ICowRegistry.Gender\",\"name\":\"gender\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rarity\",\"type\":\"uint8\"}],\"internalType\":\"struct ICowRegistry.Creature[]\",\"name\":\"_data\",\"type\":\"tuple[]\"}],\"name\":\"setBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CowsRegistry","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://438cc02cf55a74a39f87a6aa5c50972b2b65a00cda2a29313535535185d1e7ca"}]}