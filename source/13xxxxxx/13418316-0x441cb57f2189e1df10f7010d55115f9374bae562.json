{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MyDataConsumerForLeash.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n// import \\\"@unification-com/xfund-router/contracts/lib/ConsumerBase.sol\\\";\\n// import '@openzeppelin/contracts/access/Ownable.sol';\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20_Ex {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary OOOSafeMath {\\n    /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    *\\n    * - Addition cannot overflow.\\n    */\\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function saveDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function safeMod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n}\\n\\ninterface IConsumerBase {\\n    function rawReceiveData(uint256 _price, bytes32 _requestId) external;\\n}\\n\\n/**\\n * @title RequestIdBase\\n *\\n * @dev A contract used by ConsumerBase and Router to generate requestIds\\n *\\n */\\ncontract RequestIdBase {\\n\\n    /**\\n    * @dev makeRequestId generates a requestId\\n    *\\n    * @param _dataConsumer address of consumer contract\\n    * @param _dataProvider address of provider\\n    * @param _router address of Router contract\\n    * @param _requestNonce uint256 request nonce\\n    * @param _data bytes32 hex encoded data endpoint\\n    *\\n    * @return bytes32 requestId\\n    */\\n    function makeRequestId(\\n        address _dataConsumer,\\n        address _dataProvider,\\n        address _router,\\n        uint256 _requestNonce,\\n        bytes32 _data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_dataConsumer, _dataProvider, _router, _requestNonce, _data));\\n    }\\n}\\n\\n/**\\n * @title ConsumerBase smart contract\\n *\\n * @dev This contract can be imported by any smart contract wishing to include\\n * off-chain data or data from a different network within it.\\n *\\n * The consumer initiates a data request by forwarding the request to the Router\\n * smart contract, from where the data provider(s) pick up and process the\\n * data request, and forward it back to the specified callback function.\\n *\\n */\\nabstract contract ConsumerBase is RequestIdBase {\\n    using OOOSafeMath for uint256;\\n\\n    /*\\n     * STATE VARIABLES\\n     */\\n\\n    // nonces for generating requestIds. Must be in sync with the\\n    // nonces defined in Router.sol.\\n    mapping(address => uint256) private nonces;\\n\\n    IERC20_Ex internal immutable xFUND;\\n    IRouter internal router;\\n\\n    /*\\n     * WRITE FUNCTIONS\\n     */\\n\\n    /**\\n     * @dev Contract constructor. Accepts the address for the router smart contract,\\n     * and a token allowance for the Router to spend on the consumer's behalf (to pay fees).\\n     *\\n     * The Consumer contract should have enough tokens allocated to it to pay fees\\n     * and the Router should be able to use the Tokens to forward fees.\\n     *\\n     * @param _router address of the deployed Router smart contract\\n     * @param _xfund address of the deployed xFUND smart contract\\n     */\\n    constructor(address _router, address _xfund) {\\n        require(_router != address(0), \\\"router cannot be the zero address\\\");\\n        require(_xfund != address(0), \\\"xfund cannot be the zero address\\\");\\n        router = IRouter(_router);\\n        xFUND = IERC20_Ex(_xfund);\\n    }\\n\\n    /**\\n     * @notice _setRouter is a helper function to allow changing the router contract address\\n     * Allows updating the router address. Future proofing for potential Router upgrades\\n     * NOTE: it is advisable to wrap this around a function that uses, for example, OpenZeppelin's\\n     * onlyOwner modifier\\n     *\\n     * @param _router address of the deployed Router smart contract\\n     */\\n    function _setRouter(address _router) internal returns (bool) {\\n        require(_router != address(0), \\\"router cannot be the zero address\\\");\\n        router = IRouter(_router);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice _increaseRouterAllowance is a helper function to increase token allowance for\\n     * the xFUND Router\\n     * Allows this contract to increase the xFUND allowance for the Router contract\\n     * enabling it to pay request fees on behalf of this contract.\\n     * NOTE: it is advisable to wrap this around a function that uses, for example, OpenZeppelin's\\n     * onlyOwner modifier\\n     *\\n     * @param _amount uint256 amount to increase allowance by\\n     */\\n    function _increaseRouterAllowance(uint256 _amount) internal returns (bool) {\\n        // The context of msg.sender is this contract's address\\n        require(xFUND.increaseAllowance(address(router), _amount), \\\"failed to increase allowance\\\");\\n        return true;\\n    }\\n\\n    /**\\n     * @dev _requestData - initialises a data request. forwards the request to the deployed\\n     * Router smart contract.\\n     *\\n     * @param _dataProvider payable address of the data provider\\n     * @param _fee uint256 fee to be paid\\n     * @param _data bytes32 value of data being requested, e.g. PRICE.BTC.USD.AVG requests\\n     * average price for BTC/USD pair\\n     * @return requestId bytes32 request ID which can be used to track or cancel the request\\n     */\\n    function _requestData(address _dataProvider, uint256 _fee, bytes32 _data)\\n    internal returns (bytes32) {\\n        bytes32 requestId = makeRequestId(address(this), _dataProvider, address(router), nonces[_dataProvider], _data);\\n        // call the underlying ConsumerLib.sol lib's submitDataRequest function\\n        require(router.initialiseRequest(_dataProvider, _fee, _data));\\n        nonces[_dataProvider] = nonces[_dataProvider].safeAdd(1);\\n        return requestId;\\n    }\\n\\n    /**\\n     * @dev rawReceiveData - Called by the Router's fulfillRequest function\\n     * in order to fulfil a data request. Data providers call the Router's fulfillRequest function\\n     * The request is validated to ensure it has indeed been sent via the Router.\\n     *\\n     * The Router will only call rawReceiveData once it has validated the origin of the data fulfillment.\\n     * rawReceiveData then calls the user defined receiveData function to finalise the fulfilment.\\n     * Contract developers will need to override the abstract receiveData function defined below.\\n     *\\n     * @param _price uint256 result being sent\\n     * @param _requestId bytes32 request ID of the request being fulfilled\\n     * has sent the data\\n     */\\n    function rawReceiveData(\\n        uint256 _price,\\n        bytes32 _requestId) external\\n    {\\n        // validate it came from the router\\n        require(msg.sender == address(router), \\\"only Router can call\\\");\\n\\n        // call override function in end-user's contract\\n        receiveData(_price, _requestId);\\n    }\\n\\n    /**\\n    * @dev receiveData - should be overridden by contract developers to process the\\n    * data fulfilment in their own contract.\\n    *\\n    * @param _price uint256 result being sent\\n    * @param _requestId bytes32 request ID of the request being fulfilled\\n    */\\n    function receiveData(\\n        uint256 _price,\\n        bytes32 _requestId\\n    ) internal virtual;\\n\\n    /*\\n     * READ FUNCTIONS\\n     */\\n\\n    /**\\n     * @dev getRouterAddress returns the address of the Router smart contract being used\\n     *\\n     * @return address\\n     */\\n    function getRouterAddress() external view returns (address) {\\n        return address(router);\\n    }\\n\\n}\\n\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ninterface IRouter {\\n    function initialiseRequest(address, uint256, bytes32) external returns (bool);\\n}\\n\\ncontract MyDataConsumerForLeash is ConsumerBase, Ownable {\\n    uint256 public price;\\n    address NFTAddress;\\n\\n    event GotSomeData(bytes32 requestId, uint256 price);\\n\\n    // RinkeBy \\n    // address private ROUTER_ADDRESS = address(0x05AB63BeC9CfC3897a20dE62f5f812de10301FDf);\\n\\n    // RinkeBy\\n    // address private XFUND_ADDRESS = address(0x245330351344F9301690D5D8De2A07f5F32e1149);\\n\\n    // Mainnet \\n    // address private constant ROUTER_ADDRESS = address(0x9ac9AE20a17779c17b069b48A8788e3455fC6121);\\n\\n    // // Mainnet\\n    // address private constant XFUND_ADDRESS = address(0x892A6f9dF0147e5f079b0993F486F9acA3c87881);\\n\\n    modifier onlyNFTOrOwner() {\\n        require(msg.sender == NFTAddress || msg.sender == owner(), \\\"Price Can only be fetched by NFT contract or the Owner\\\");\\n        _;\\n    }\\n\\n    constructor(address router, address xfund) ConsumerBase(router, xfund) {\\n        price = 0;\\n    }\\n\\n    // Optionally protect with a modifier to limit who can call\\n    function getData(address PROVIDER_ADDRESS, uint256 _fee, bytes32 _data) external onlyNFTOrOwner returns (bytes32) {\\n\\n        // bytes32 _data = 0x4554482e4c454153482e50522e41564300000000000000000000000000000000;  //ETH.LEASH.PR.AVC\\n    \\n        // uint256 _fee = 100000000;\\n\\n        // Rinkeby \\n        // address PROVIDER_ADDRESS = address(0x611661f4B5D82079E924AcE2A6D113fAbd214b14);\\n\\n        // Mainnet \\n        // address PROVIDER_ADDRESS = address(0xFDEc0386011d085A6b4F0e37Fab5d7f2601aCB33);\\n\\n        // _provider = PROVIDER_ADDRESS\\n        return _requestData(PROVIDER_ADDRESS, _fee, _data);\\n    }\\n\\n    // Todo - protect with a modifier to limit who can call!\\n    function increaseRouterAllowance(uint256 _amount) external onlyOwner {\\n        require(_increaseRouterAllowance(_amount));     // 115792089237316195423570985008687907853269984665640564039457584007913129639935\\n    }\\n\\n    // ConsumerBase ensures only the Router can call this\\n    function receiveData(uint256 _price, bytes32 _requestId) internal override {\\n        price = _price;\\n        // optionally emit an event to the logs\\n        emit GotSomeData(_requestId, _price);\\n    }\\n\\n    function setNFTContract(address _nftAddress) external onlyOwner {\\n        NFTAddress = _nftAddress;        \\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"xfund\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"GotSomeData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"PROVIDER_ADDRESS\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseRouterAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"rawReceiveData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"name\":\"setNFTContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MyDataConsumerForLeash","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009ac9ae20a17779c17b069b48a8788e3455fc6121000000000000000000000000892a6f9df0147e5f079b0993f486f9aca3c87881","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}