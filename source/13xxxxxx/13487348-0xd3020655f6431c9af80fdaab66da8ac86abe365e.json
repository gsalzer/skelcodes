{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/eth/PoofValMintableLendable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./PoofValLendable.sol\\\";\\nimport \\\"./../interfaces/IVerifier.sol\\\";\\nimport \\\"./../interfaces/IWERC20Val.sol\\\";\\n\\ncontract PoofValMintableLendable is PoofValLendable, ERC20 {\\n  using SafeERC20 for IERC20;\\n  using SafeMath for uint256;\\n\\n  constructor(\\n    string memory _tokenName,\\n    string memory _tokenSymbol,\\n    IWERC20Val _debtToken,\\n    IVerifier[5] memory _verifiers,\\n    bytes32 _accountRoot\\n  ) ERC20(_tokenName, _tokenSymbol) PoofValLendable(_debtToken, _verifiers, _accountRoot) {}\\n\\n  function burn(bytes[3] memory _proofs, DepositArgs memory _args) external {\\n    burn(_proofs, _args, new bytes(0), TreeUpdateArgs(0, 0, 0, 0));\\n  }\\n\\n  function burn(\\n    bytes[3] memory _proofs,\\n    DepositArgs memory _args,\\n    bytes memory _treeUpdateProof,\\n    TreeUpdateArgs memory _treeUpdateArgs\\n  ) public {\\n    beforeDeposit(_proofs, _args, _treeUpdateProof, _treeUpdateArgs);\\n    require(_args.amount == 0, \\\"Cannot use amount for burning\\\");\\n    _burn(msg.sender, _args.debt);\\n  }\\n\\n  function mint(bytes[3] memory _proofs, WithdrawArgs memory _args) external {\\n    mint(_proofs, _args, new bytes(0), TreeUpdateArgs(0, 0, 0, 0));\\n  }\\n\\n  function mint(\\n    bytes[3] memory _proofs,\\n    WithdrawArgs memory _args,\\n    bytes memory _treeUpdateProof,\\n    TreeUpdateArgs memory _treeUpdateArgs\\n  ) public {\\n    beforeWithdraw(_proofs, _args, _treeUpdateProof, _treeUpdateArgs);\\n    require(_args.amount == _args.extData.fee, \\\"Amount can only be used for fee\\\");\\n    if (_args.amount > 0) {\\n      uint256 underlyingFeeAmount = debtToken.debtToUnderlying(_args.extData.fee);\\n      debtToken.unwrap(_args.amount);\\n      if (underlyingFeeAmount > 0) {\\n        (bool ok, ) = _args.extData.relayer.call{value: underlyingFeeAmount}(\\\"\\\");\\n        require(ok, \\\"Failed to send fee to relayer\\\");\\n      }\\n    }\\n    if (_args.debt > 0) {\\n      _mint(_args.extData.recipient, _args.debt);\\n    }\\n  }\\n\\n  function underlyingBalanceOf(address owner) external view returns (uint256) {\\n    uint256 balanceOf = balanceOf(owner);\\n    return debtToken.debtToUnderlying(balanceOf);\\n  }\\n}\\n\\n\"\r\n    },\r\n    \"/contracts/interfaces/IWERC20Val.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWERC20Val is IERC20 {\\n  function wrap() payable external;\\n\\n  function unwrap(uint256 debtAmount) external;\\n\\n  function underlyingToDebt(uint256 underlyingAmount) external view returns (uint256);\\n\\n  function debtToUnderlying(uint256 debtAmount) external view returns (uint256);\\n\\n  function underlyingBalanceOf(address owner) external view returns (uint256);\\n}\\n\\n\"\r\n    },\r\n    \"/contracts/interfaces/IVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IVerifier {\\n  function verifyProof(bytes calldata proof, uint[] calldata pubSignals) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/eth/PoofValLendable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./PoofVal.sol\\\";\\nimport \\\"./../interfaces/IVerifier.sol\\\";\\nimport \\\"./../interfaces/IWERC20Val.sol\\\";\\n\\ncontract PoofValLendable is PoofVal {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  IWERC20Val public debtToken;\\n\\n  constructor(\\n    IWERC20Val _debtToken,\\n    IVerifier[5] memory _verifiers,\\n    bytes32 _accountRoot\\n  ) PoofVal(_verifiers, _accountRoot) {\\n    debtToken = _debtToken;\\n  }\\n\\n  function deposit(bytes[3] memory _proofs, DepositArgs memory _args) external payable override {\\n    deposit(_proofs, _args, new bytes(0), TreeUpdateArgs(0, 0, 0, 0));\\n  }\\n\\n  function deposit(\\n    bytes[3] memory _proofs,\\n    DepositArgs memory _args,\\n    bytes memory _treeUpdateProof,\\n    TreeUpdateArgs memory _treeUpdateArgs\\n  ) public payable override {\\n    beforeDeposit(_proofs, _args, _treeUpdateProof, _treeUpdateArgs);\\n    uint256 underlyingAmount = debtToken.debtToUnderlying(_args.amount);\\n    require(msg.value >= underlyingAmount, \\\"Specified amount must equal msg.value\\\");\\n    debtToken.wrap{value: underlyingAmount}();\\n    (bool ok, ) = \\n      msg.sender.call{value: address(this).balance}(\\\"\\\"); \\n    require(ok, \\\"Failed to refund leftover balance to caller\\\");\\n  }\\n\\n  function withdraw(bytes[3] memory _proofs, WithdrawArgs memory _args) external override {\\n    withdraw(_proofs, _args, new bytes(0), TreeUpdateArgs(0, 0, 0, 0));\\n  }\\n\\n  function withdraw(\\n    bytes[3] memory _proofs,\\n    WithdrawArgs memory _args,\\n    bytes memory _treeUpdateProof,\\n    TreeUpdateArgs memory _treeUpdateArgs\\n  ) public override {\\n    beforeWithdraw(_proofs, _args, _treeUpdateProof, _treeUpdateArgs);\\n    require(_args.amount >= _args.extData.fee, \\\"Fee cannot be greater than amount\\\");\\n    uint256 underlyingAmount = debtToken.debtToUnderlying(_args.amount.sub(_args.extData.fee));\\n    uint256 underlyingFeeAmount = debtToken.debtToUnderlying(_args.extData.fee);\\n    debtToken.unwrap(_args.amount);\\n\\n    if (underlyingAmount > 0) {\\n      (bool ok, ) = _args.extData.recipient.call{value: underlyingAmount}(\\\"\\\");\\n      require(ok, \\\"Failed to send amount to recipient\\\");\\n    }\\n    if (underlyingFeeAmount > 0) {\\n      (bool ok, ) = _args.extData.relayer.call{value: underlyingFeeAmount}(\\\"\\\");\\n      require(ok, \\\"Failed to send fee to relayer\\\");\\n    }\\n  }\\n\\n  function unitPerUnderlying() public view override returns (uint256) {\\n    return debtToken.underlyingToDebt(1);\\n  }\\n\\n  receive() external payable {}\\n}\\n\\n\"\r\n    },\r\n    \"/contracts/eth/PoofVal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./../interfaces/IVerifier.sol\\\";\\nimport \\\"./../PoofBase.sol\\\";\\n\\ncontract PoofVal is PoofBase {\\n  using SafeMath for uint256;\\n\\n  constructor(\\n    IVerifier[5] memory _verifiers,\\n    bytes32 _accountRoot\\n  ) PoofBase(_verifiers, _accountRoot) {}\\n\\n  function deposit(bytes[3] memory _proofs, DepositArgs memory _args) external payable virtual {\\n    require(_args.debt == 0, \\\"Cannot use debt for depositing\\\");\\n    deposit(_proofs, _args, new bytes(0), TreeUpdateArgs(0, 0, 0, 0));\\n  }\\n\\n  function deposit(\\n    bytes[3] memory _proofs,\\n    DepositArgs memory _args,\\n    bytes memory _treeUpdateProof,\\n    TreeUpdateArgs memory _treeUpdateArgs\\n  ) public payable virtual {\\n    beforeDeposit(_proofs, _args, _treeUpdateProof, _treeUpdateArgs);\\n    require(msg.value == _args.amount, \\\"Specified amount must equal msg.value\\\");\\n  }\\n\\n  function withdraw(bytes[3] memory _proofs, WithdrawArgs memory _args) external virtual {\\n    require(_args.debt == 0, \\\"Cannot use debt for withdrawing\\\");\\n    withdraw(_proofs, _args, new bytes(0), TreeUpdateArgs(0, 0, 0, 0));\\n  }\\n\\n  function withdraw(\\n    bytes[3] memory _proofs,\\n    WithdrawArgs memory _args,\\n    bytes memory _treeUpdateProof,\\n    TreeUpdateArgs memory _treeUpdateArgs\\n  ) public virtual {\\n    beforeWithdraw(_proofs, _args, _treeUpdateProof, _treeUpdateArgs);\\n    uint256 amount = _args.amount.sub(_args.extData.fee, \\\"Amount should be greater than fee\\\");\\n    if (amount > 0) {\\n      (bool ok, ) = _args.extData.recipient.call{value: amount}(\\\"\\\");\\n      require(ok, \\\"Failed to send amount to recipient\\\");\\n    }\\n    if (_args.extData.fee > 0) {\\n      (bool ok, ) = _args.extData.relayer.call{value: _args.extData.fee}(\\\"\\\");\\n      require(ok, \\\"Failed to send fee to relayer\\\");\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/PoofBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./interfaces/IVerifier.sol\\\";\\n\\ncontract PoofBase {\\n  using SafeMath for uint256;\\n\\n  IVerifier public depositVerifier;\\n  IVerifier public withdrawVerifier;\\n  IVerifier public inputRootVerifier;\\n  IVerifier public outputRootVerifier;\\n  IVerifier public treeUpdateVerifier;\\n\\n  mapping(bytes32 => bool) public accountNullifiers;\\n\\n  uint256 public accountCount;\\n  uint256 public constant ACCOUNT_ROOT_HISTORY_SIZE = 100;\\n  bytes32[ACCOUNT_ROOT_HISTORY_SIZE] public accountRoots;\\n\\n  event NewAccount(bytes32 commitment, bytes32 nullifier, bytes encryptedAccount, uint256 index);\\n\\n  struct TreeUpdateArgs {\\n    bytes32 oldRoot;\\n    bytes32 newRoot;\\n    bytes32 leaf;\\n    uint256 pathIndices;\\n  }\\n\\n  struct AccountUpdate {\\n    bytes32 inputRoot;\\n    bytes32 inputNullifierHash;\\n    bytes32 inputAccountHash;\\n    bytes32 outputRoot;\\n    uint256 outputPathIndices;\\n    bytes32 outputCommitment;\\n    bytes32 outputAccountHash;\\n  }\\n\\n  struct DepositExtData {\\n    bytes encryptedAccount;\\n  }\\n\\n  struct DepositArgs {\\n    uint256 amount;\\n    uint256 debt;\\n    uint256 unitPerUnderlying;\\n    bytes32 extDataHash;\\n    DepositExtData extData;\\n    AccountUpdate account;\\n  }\\n\\n  struct WithdrawExtData {\\n    uint256 fee;\\n    address recipient;\\n    address relayer;\\n    bytes encryptedAccount;\\n  }\\n\\n  struct WithdrawArgs {\\n    uint256 amount;\\n    uint256 debt;\\n    uint256 unitPerUnderlying;\\n    bytes32 extDataHash;\\n    WithdrawExtData extData;\\n    AccountUpdate account;\\n  }\\n\\n  constructor(\\n    IVerifier[5] memory _verifiers,\\n    bytes32 _accountRoot\\n  ) {\\n    accountRoots[0] = _accountRoot;\\n    depositVerifier = _verifiers[0];\\n    withdrawVerifier = _verifiers[1];\\n    inputRootVerifier = _verifiers[2];\\n    outputRootVerifier = _verifiers[3];\\n    treeUpdateVerifier = _verifiers[4];\\n  }\\n\\n  function toDynamicArray(uint256[3] memory arr) internal pure returns (uint256[] memory) {\\n    uint256[] memory res = new uint256[](3);\\n    uint256 length = arr.length;\\n    for (uint i = 0; i < length; i++) {\\n      res[i] = arr[i];\\n    }\\n    return res;\\n  }\\n\\n  function toDynamicArray(uint256[4] memory arr) internal pure returns (uint256[] memory) {\\n    uint256[] memory res = new uint256[](4);\\n    uint256 length = arr.length;\\n    for (uint i = 0; i < length; i++) {\\n      res[i] = arr[i];\\n    }\\n    return res;\\n  }\\n\\n  function toDynamicArray(uint256[5] memory arr) internal pure returns (uint256[] memory) {\\n    uint256[] memory res = new uint256[](5);\\n    uint256 length = arr.length;\\n    for (uint i = 0; i < length; i++) {\\n      res[i] = arr[i];\\n    }\\n    return res;\\n  }\\n\\n  function toDynamicArray(uint256[6] memory arr) internal pure returns (uint256[] memory) {\\n    uint256[] memory res = new uint256[](6);\\n    uint256 length = arr.length;\\n    for (uint i = 0; i < length; i++) {\\n      res[i] = arr[i];\\n    }\\n    return res;\\n  }\\n\\n  function beforeDeposit(\\n    bytes[3] memory _proofs,\\n    DepositArgs memory _args,\\n    bytes memory _treeUpdateProof,\\n    TreeUpdateArgs memory _treeUpdateArgs\\n  ) internal {\\n    validateAccountUpdate(_args.account, _treeUpdateProof, _treeUpdateArgs);\\n    require(_args.extDataHash == keccak248(abi.encode(_args.extData)), \\\"Incorrect external data hash\\\");\\n    require(_args.unitPerUnderlying >= unitPerUnderlying(), \\\"Underlying per unit is overstated\\\");\\n    require(\\n      depositVerifier.verifyProof(\\n        _proofs[0],\\n        toDynamicArray([\\n          uint256(_args.amount),\\n          uint256(_args.debt),\\n          uint256(_args.unitPerUnderlying),\\n          uint256(_args.extDataHash),\\n          uint256(_args.account.inputAccountHash),\\n          uint256(_args.account.outputAccountHash)\\n        ])\\n      ),\\n      \\\"Invalid deposit proof\\\"\\n    );\\n    require(\\n      inputRootVerifier.verifyProof(\\n        _proofs[1],\\n        toDynamicArray([\\n          uint256(_args.account.inputRoot),\\n          uint256(_args.account.inputNullifierHash),\\n          uint256(_args.account.inputAccountHash)\\n        ])\\n      ),\\n      \\\"Invalid input root proof\\\"\\n    );\\n    require(\\n      outputRootVerifier.verifyProof(\\n        _proofs[2],\\n        toDynamicArray([\\n          uint256(_args.account.inputRoot),\\n          uint256(_args.account.outputRoot),\\n          uint256(_args.account.outputPathIndices),\\n          uint256(_args.account.outputCommitment),\\n          uint256(_args.account.outputAccountHash)\\n        ])\\n      ),\\n      \\\"Invalid output root proof\\\"\\n    );\\n\\n    accountNullifiers[_args.account.inputNullifierHash] = true;\\n    insertAccountRoot(_args.account.inputRoot == getLastAccountRoot() ? _args.account.outputRoot : _treeUpdateArgs.newRoot);\\n\\n    emit NewAccount(\\n      _args.account.outputCommitment,\\n      _args.account.inputNullifierHash,\\n      _args.extData.encryptedAccount,\\n      accountCount - 1\\n    );\\n  }\\n\\n  function beforeWithdraw(\\n    bytes[3] memory _proofs,\\n    WithdrawArgs memory _args,\\n    bytes memory _treeUpdateProof,\\n    TreeUpdateArgs memory _treeUpdateArgs\\n  ) internal {\\n    validateAccountUpdate(_args.account, _treeUpdateProof, _treeUpdateArgs);\\n    require(_args.extDataHash == keccak248(abi.encode(_args.extData)), \\\"Incorrect external data hash\\\");\\n    // Input check because zkSNARKs work modulo p\\n    require(_args.amount < 2**248, \\\"Amount value out of range\\\");\\n    require(_args.debt < 2**248, \\\"Debt value out of range\\\");\\n    require(_args.amount >= _args.extData.fee, \\\"Amount should be >= than fee\\\");\\n    require(_args.unitPerUnderlying >= unitPerUnderlying(), \\\"Underlying per unit is overstated\\\");\\n    require(\\n      withdrawVerifier.verifyProof(\\n        _proofs[0],\\n        toDynamicArray([\\n          uint256(_args.amount),\\n          uint256(_args.debt),\\n          uint256(_args.unitPerUnderlying),\\n          uint256(_args.extDataHash),\\n          uint256(_args.account.inputAccountHash),\\n          uint256(_args.account.outputAccountHash)\\n        ])\\n      ),\\n      \\\"Invalid withdrawal proof\\\"\\n    );\\n    require(\\n      inputRootVerifier.verifyProof(\\n        _proofs[1],\\n        toDynamicArray([\\n          uint256(_args.account.inputRoot),\\n          uint256(_args.account.inputNullifierHash),\\n          uint256(_args.account.inputAccountHash)\\n        ])\\n      ),\\n      \\\"Invalid input root proof\\\"\\n    );\\n    require(\\n      outputRootVerifier.verifyProof(\\n        _proofs[2],\\n        toDynamicArray([\\n          uint256(_args.account.inputRoot),\\n          uint256(_args.account.outputRoot),\\n          uint256(_args.account.outputPathIndices),\\n          uint256(_args.account.outputCommitment),\\n          uint256(_args.account.outputAccountHash)\\n        ])\\n      ),\\n      \\\"Invalid output root proof\\\"\\n    );\\n\\n    insertAccountRoot(_args.account.inputRoot == getLastAccountRoot() ? _args.account.outputRoot : _treeUpdateArgs.newRoot);\\n    accountNullifiers[_args.account.inputNullifierHash] = true;\\n\\n    emit NewAccount(\\n      _args.account.outputCommitment,\\n      _args.account.inputNullifierHash,\\n      _args.extData.encryptedAccount,\\n      accountCount - 1\\n    );\\n  }\\n\\n  // ------VIEW-------\\n\\n  /**\\n    @dev Whether the root is present in the root history\\n    */\\n  function isKnownAccountRoot(bytes32 _root, uint256 _index) public view returns (bool) {\\n    return _root != 0 && accountRoots[_index % ACCOUNT_ROOT_HISTORY_SIZE] == _root;\\n  }\\n\\n  /**\\n    @dev Returns the last root\\n    */\\n  function getLastAccountRoot() public view returns (bytes32) {\\n    return accountRoots[accountCount % ACCOUNT_ROOT_HISTORY_SIZE];\\n  }\\n\\n  function unitPerUnderlying() public view virtual returns (uint256) {\\n    return 1;\\n  }\\n\\n  // -----INTERNAL-------\\n\\n  function keccak248(bytes memory _data) internal pure returns (bytes32) {\\n    return keccak256(_data) & 0x00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n  }\\n\\n  function validateTreeUpdate(\\n    bytes memory _proof,\\n    TreeUpdateArgs memory _args,\\n    bytes32 _commitment\\n  ) internal view {\\n    require(_proof.length > 0, \\\"Outdated account merkle root\\\");\\n    require(_args.oldRoot == getLastAccountRoot(), \\\"Outdated tree update merkle root\\\");\\n    require(_args.leaf == _commitment, \\\"Incorrect commitment inserted\\\");\\n    require(_args.pathIndices == accountCount, \\\"Incorrect account insert index\\\");\\n    require(\\n      treeUpdateVerifier.verifyProof(\\n        _proof,\\n        toDynamicArray([uint256(_args.oldRoot), uint256(_args.newRoot), uint256(_args.leaf), uint256(_args.pathIndices)])\\n      ),\\n      \\\"Invalid tree update proof\\\"\\n    );\\n  }\\n\\n  function validateAccountUpdate(\\n    AccountUpdate memory _account,\\n    bytes memory _treeUpdateProof,\\n    TreeUpdateArgs memory _treeUpdateArgs\\n  ) internal view {\\n    // Has to be a new nullifier hash\\n    require(!accountNullifiers[_account.inputNullifierHash], \\\"Outdated account state\\\");\\n    if (_account.inputRoot != getLastAccountRoot()) {\\n      // _account.outputPathIndices (= last tree leaf index) is always equal to root index in the history mapping\\n      // because we always generate a new root for each new leaf\\n      require(isKnownAccountRoot(_account.inputRoot, _account.outputPathIndices), \\\"Invalid account root\\\");\\n      validateTreeUpdate(_treeUpdateProof, _treeUpdateArgs, _account.outputCommitment);\\n    } else {\\n      require(_account.outputPathIndices == accountCount, \\\"Incorrect account insert index\\\");\\n    }\\n  }\\n\\n  function insertAccountRoot(bytes32 _root) internal {\\n    accountRoots[++accountCount % ACCOUNT_ROOT_HISTORY_SIZE] = _root;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"contract IWERC20Val\",\"name\":\"_debtToken\",\"type\":\"address\"},{\"internalType\":\"contract IVerifier[5]\",\"name\":\"_verifiers\",\"type\":\"address[5]\"},{\"internalType\":\"bytes32\",\"name\":\"_accountRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"nullifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedAccount\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"NewAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCOUNT_ROOT_HISTORY_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"accountNullifiers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountRoots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[3]\",\"name\":\"_proofs\",\"type\":\"bytes[3]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitPerUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extDataHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedAccount\",\"type\":\"bytes\"}],\"internalType\":\"struct PoofBase.DepositExtData\",\"name\":\"extData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"inputRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inputNullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inputAccountHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"outputRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"outputPathIndices\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"outputCommitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"outputAccountHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct PoofBase.AccountUpdate\",\"name\":\"account\",\"type\":\"tuple\"}],\"internalType\":\"struct PoofBase.DepositArgs\",\"name\":\"_args\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_treeUpdateProof\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"oldRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pathIndices\",\"type\":\"uint256\"}],\"internalType\":\"struct PoofBase.TreeUpdateArgs\",\"name\":\"_treeUpdateArgs\",\"type\":\"tuple\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[3]\",\"name\":\"_proofs\",\"type\":\"bytes[3]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitPerUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extDataHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedAccount\",\"type\":\"bytes\"}],\"internalType\":\"struct PoofBase.DepositExtData\",\"name\":\"extData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"inputRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inputNullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inputAccountHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"outputRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"outputPathIndices\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"outputCommitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"outputAccountHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct PoofBase.AccountUpdate\",\"name\":\"account\",\"type\":\"tuple\"}],\"internalType\":\"struct PoofBase.DepositArgs\",\"name\":\"_args\",\"type\":\"tuple\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtToken\",\"outputs\":[{\"internalType\":\"contract IWERC20Val\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[3]\",\"name\":\"_proofs\",\"type\":\"bytes[3]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitPerUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extDataHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedAccount\",\"type\":\"bytes\"}],\"internalType\":\"struct PoofBase.DepositExtData\",\"name\":\"extData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"inputRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inputNullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inputAccountHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"outputRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"outputPathIndices\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"outputCommitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"outputAccountHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct PoofBase.AccountUpdate\",\"name\":\"account\",\"type\":\"tuple\"}],\"internalType\":\"struct PoofBase.DepositArgs\",\"name\":\"_args\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_treeUpdateProof\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"oldRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pathIndices\",\"type\":\"uint256\"}],\"internalType\":\"struct PoofBase.TreeUpdateArgs\",\"name\":\"_treeUpdateArgs\",\"type\":\"tuple\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[3]\",\"name\":\"_proofs\",\"type\":\"bytes[3]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitPerUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extDataHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedAccount\",\"type\":\"bytes\"}],\"internalType\":\"struct PoofBase.DepositExtData\",\"name\":\"extData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"inputRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inputNullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inputAccountHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"outputRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"outputPathIndices\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"outputCommitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"outputAccountHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct PoofBase.AccountUpdate\",\"name\":\"account\",\"type\":\"tuple\"}],\"internalType\":\"struct PoofBase.DepositArgs\",\"name\":\"_args\",\"type\":\"tuple\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositVerifier\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastAccountRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inputRootVerifier\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"isKnownAccountRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[3]\",\"name\":\"_proofs\",\"type\":\"bytes[3]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitPerUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extDataHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"encryptedAccount\",\"type\":\"bytes\"}],\"internalType\":\"struct PoofBase.WithdrawExtData\",\"name\":\"extData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"inputRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inputNullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inputAccountHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"outputRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"outputPathIndices\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"outputCommitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"outputAccountHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct PoofBase.AccountUpdate\",\"name\":\"account\",\"type\":\"tuple\"}],\"internalType\":\"struct PoofBase.WithdrawArgs\",\"name\":\"_args\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_treeUpdateProof\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"oldRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pathIndices\",\"type\":\"uint256\"}],\"internalType\":\"struct PoofBase.TreeUpdateArgs\",\"name\":\"_treeUpdateArgs\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[3]\",\"name\":\"_proofs\",\"type\":\"bytes[3]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitPerUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extDataHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"encryptedAccount\",\"type\":\"bytes\"}],\"internalType\":\"struct PoofBase.WithdrawExtData\",\"name\":\"extData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"inputRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inputNullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inputAccountHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"outputRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"outputPathIndices\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"outputCommitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"outputAccountHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct PoofBase.AccountUpdate\",\"name\":\"account\",\"type\":\"tuple\"}],\"internalType\":\"struct PoofBase.WithdrawArgs\",\"name\":\"_args\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outputRootVerifier\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treeUpdateVerifier\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"underlyingBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unitPerUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[3]\",\"name\":\"_proofs\",\"type\":\"bytes[3]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitPerUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extDataHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"encryptedAccount\",\"type\":\"bytes\"}],\"internalType\":\"struct PoofBase.WithdrawExtData\",\"name\":\"extData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"inputRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inputNullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inputAccountHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"outputRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"outputPathIndices\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"outputCommitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"outputAccountHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct PoofBase.AccountUpdate\",\"name\":\"account\",\"type\":\"tuple\"}],\"internalType\":\"struct PoofBase.WithdrawArgs\",\"name\":\"_args\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_treeUpdateProof\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"oldRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pathIndices\",\"type\":\"uint256\"}],\"internalType\":\"struct PoofBase.TreeUpdateArgs\",\"name\":\"_treeUpdateArgs\",\"type\":\"tuple\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[3]\",\"name\":\"_proofs\",\"type\":\"bytes[3]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitPerUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extDataHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"encryptedAccount\",\"type\":\"bytes\"}],\"internalType\":\"struct PoofBase.WithdrawExtData\",\"name\":\"extData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"inputRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inputNullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inputAccountHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"outputRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"outputPathIndices\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"outputCommitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"outputAccountHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct PoofBase.AccountUpdate\",\"name\":\"account\",\"type\":\"tuple\"}],\"internalType\":\"struct PoofBase.WithdrawArgs\",\"name\":\"_args\",\"type\":\"tuple\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawVerifier\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PoofValMintableLendable","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001600000000000000000000000007580345ebc7defd34fc886cbd5ffb1adebf2f6d60000000000000000000000008f8be3e7d5921d49860730b650fdb3ad53c2334c00000000000000000000000068a76cd9565b1142ae18e5485ea956a2ce2cfc680000000000000000000000007e82e40ca789029e7066c6b54443dcbfbcf17e4e00000000000000000000000020e920abeb19a2cad86e28deb3bba084d86e4836000000000000000000000000f55063c016ee08c25ca2b7a369b5782758e893582b0f6fc0179fa65b6f73627c0e1e84c7374d2eaec44c9a48f2571393ea77bcbb0000000000000000000000000000000000000000000000000000000000000008506f6f662045544800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000047045544800000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}