{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/armenarakelian/Documents/GitHub/relite-farming/contracts/TokenFarming.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"./common/Globals.sol\\\";\\n\\ncontract TokenFarming is OwnableUpgradeable, PausableUpgradeable {\\n    IERC20 public stakeToken;\\n    IERC20 public distributionToken;\\n\\n    uint256 public rewardPerBlock;\\n\\n    uint256 public cumulativeSum;\\n    uint256 public lastUpdate;\\n\\n    uint256 public totalPoolStaked;\\n\\n    uint256 public startDate;\\n\\n    struct UserInfo {\\n        uint256 stakedAmount;\\n        uint256 lastCumulativeSum;\\n        uint256 aggregatedReward;\\n    }\\n\\n    mapping(address => UserInfo) public userInfos;\\n\\n    event TokensStaked(address _staker, uint256 _stakeAmount);\\n    event TokensWithdrawn(address _staker, uint256 _withdrawAmount);\\n    event RewardsClaimed(address _claimer, uint256 _rewardsAmount);\\n\\n    function initTokenFarming(\\n        address _stakeToken,\\n        address _distributioToken,\\n        uint256 _rewardPerBlock\\n    ) external initializer() {\\n        __Pausable_init_unchained();\\n        __Ownable_init();\\n        stakeToken = IERC20(_stakeToken);\\n        distributionToken = IERC20(_distributioToken);\\n        rewardPerBlock = _rewardPerBlock;\\n        startDate = block.timestamp;\\n    }\\n\\n    modifier updateRewards() {\\n        _updateUserRewards(_updateCumulativeSum());\\n        _;\\n    }\\n\\n    function updateRewardPerBlock(uint256 _newRewardPerBlock) external onlyOwner {\\n        _updateCumulativeSum();\\n        rewardPerBlock = _newRewardPerBlock;\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function stake(uint256 _stakeAmount) external updateRewards whenNotPaused() {\\n        userInfos[msg.sender].stakedAmount += _stakeAmount;\\n        totalPoolStaked += _stakeAmount;\\n\\n        stakeToken.transferFrom(msg.sender, address(this), _stakeAmount);\\n\\n        emit TokensStaked(msg.sender, _stakeAmount);\\n    }\\n\\n    function withdrawFunds(uint256 _amountToWithdraw) public updateRewards {\\n        uint256 _currentStakedAmount = userInfos[msg.sender].stakedAmount;\\n\\n        require(\\n            _currentStakedAmount >= _amountToWithdraw,\\n            \\\"TokenFarming: Not enough staked tokens to withdraw\\\"\\n        );\\n\\n        userInfos[msg.sender].stakedAmount = _currentStakedAmount - _amountToWithdraw;\\n        totalPoolStaked -= _amountToWithdraw;\\n\\n        stakeToken.transfer(msg.sender, _amountToWithdraw);\\n\\n        emit TokensWithdrawn(msg.sender, _amountToWithdraw);\\n    }\\n\\n    function claimRewards() public updateRewards {\\n        uint256 _currentRewards = _applySlashing(userInfos[msg.sender].aggregatedReward);\\n\\n        require(_currentRewards > 0, \\\"TokenFarming: Nothing to claim\\\");\\n\\n        delete userInfos[msg.sender].aggregatedReward;\\n\\n        distributionToken.transfer(msg.sender, _currentRewards);\\n\\n        emit RewardsClaimed(msg.sender, _currentRewards);\\n    }\\n\\n    function claimAndWithdraw() external {\\n        withdrawFunds(userInfos[msg.sender].stakedAmount);\\n        claimRewards();\\n    }\\n\\n    /// @dev prices with the same precision\\n    function getAPY(\\n        address _userAddr,\\n        uint256 _stakeTokenPrice,\\n        uint256 _distributionTokenPrice\\n    ) external view returns (uint256 _resultAPY) {\\n        uint256 _userStakeAmount = userInfos[_userAddr].stakedAmount;\\n\\n        if (_userStakeAmount > 0) {\\n            uint256 _newCumulativeSum =\\n                _getNewCumulativeSum(\\n                    rewardPerBlock,\\n                    totalPoolStaked,\\n                    cumulativeSum,\\n                    BLOCKS_PER_YEAR\\n                );\\n\\n            uint256 _totalReward =\\n                ((_newCumulativeSum - userInfos[_userAddr].lastCumulativeSum) * _userStakeAmount) /\\n                    DECIMAL;\\n\\n            _resultAPY =\\n                (_totalReward * _distributionTokenPrice * DECIMAL) /\\n                (_stakeTokenPrice * _userStakeAmount);\\n        }\\n    }\\n\\n    function getTotalAPY(uint256 _stakeTokenPrice, uint256 _distributionTokenPrice)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _totalPool = totalPoolStaked;\\n\\n        if (_totalPool > 0) {\\n            uint256 _totalRewards = distributionToken.balanceOf(address(this));\\n            return\\n                (_totalRewards * _distributionTokenPrice * DECIMAL) /\\n                (_totalPool * _stakeTokenPrice);\\n        }\\n        return 0;\\n    }\\n\\n    function _applySlashing(uint256 _rewards) private view returns (uint256) {\\n        if (block.timestamp < startDate + 150 days) {\\n            return (_rewards * (block.timestamp - startDate)) / 150 days;\\n        }\\n\\n        return _rewards;\\n    }\\n\\n    function _updateCumulativeSum() internal returns (uint256 _newCumulativeSum) {\\n        uint256 _totalPool = totalPoolStaked;\\n        uint256 _lastUpdate = lastUpdate;\\n        _lastUpdate = _lastUpdate == 0 ? block.number : _lastUpdate;\\n\\n        if (_totalPool > 0) {\\n            _newCumulativeSum = _getNewCumulativeSum(\\n                rewardPerBlock,\\n                _totalPool,\\n                cumulativeSum,\\n                block.number - _lastUpdate\\n            );\\n\\n            cumulativeSum = _newCumulativeSum;\\n        }\\n\\n        lastUpdate = block.number;\\n    }\\n\\n    function _getNewCumulativeSum(\\n        uint256 _rewardPerBlock,\\n        uint256 _totalPool,\\n        uint256 _prevAP,\\n        uint256 _blocksDelta\\n    ) internal pure returns (uint256) {\\n        uint256 _newPrice = (_rewardPerBlock * DECIMAL) / _totalPool;\\n        return _blocksDelta * _newPrice + _prevAP;\\n    }\\n\\n    function _updateUserRewards(uint256 _newCumulativeSum) internal {\\n        UserInfo storage userInfo = userInfos[msg.sender];\\n\\n        uint256 _currentUserStakedAmount = userInfo.stakedAmount;\\n\\n        if (_currentUserStakedAmount > 0) {\\n            userInfo.aggregatedReward +=\\n                ((_newCumulativeSum - userInfo.lastCumulativeSum) * _currentUserStakedAmount) /\\n                DECIMAL;\\n        }\\n\\n        userInfo.lastCumulativeSum = _newCumulativeSum;\\n    }\\n\\n    function getLatestUserRewards(address _userAddr) public view returns (uint256) {\\n        uint256 _totalPool = totalPoolStaked;\\n        uint256 _lastUpdate = lastUpdate;\\n\\n        uint256 _newCumulativeSum;\\n\\n        _lastUpdate = _lastUpdate == 0 ? block.number : _lastUpdate;\\n\\n        if (_totalPool > 0) {\\n            _newCumulativeSum = _getNewCumulativeSum(\\n                rewardPerBlock,\\n                _totalPool,\\n                cumulativeSum,\\n                block.number - _lastUpdate\\n            );\\n        }\\n\\n        UserInfo memory userInfo = userInfos[_userAddr];\\n\\n        uint256 _currentUserStakedAmount = userInfo.stakedAmount;\\n        uint256 _agregatedRewards = userInfo.aggregatedReward;\\n\\n        if (_currentUserStakedAmount > 0) {\\n            _agregatedRewards =\\n                _agregatedRewards +\\n                ((_newCumulativeSum - userInfo.lastCumulativeSum) * _currentUserStakedAmount) /\\n                DECIMAL;\\n        }\\n\\n        return _agregatedRewards;\\n    }\\n\\n    function getLatestUserRewardsAfterSlashing(address _userAddr) external view returns (uint256) {\\n        return _applySlashing(getLatestUserRewards(_userAddr));\\n    }\\n\\n    function transferStuckERC20(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        require(address(_token) != address(stakeToken), \\\"Not possible to withdraw stake token\\\");\\n        _token.transfer(_to, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/armenarakelian/Documents/GitHub/relite-farming/contracts/common/Globals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity 0.8.3;\\n\\nuint256 constant ONE_PERCENT = 10**25;\\nuint256 constant DECIMAL = ONE_PERCENT * 100;\\n\\nuint256 constant BLOCKS_PER_DAY = 6450;\\nuint256 constant BLOCKS_PER_YEAR = BLOCKS_PER_DAY * 365;\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardsAmount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"}],\"name\":\"TokensStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimAndWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cumulativeSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_distributionTokenPrice\",\"type\":\"uint256\"}],\"name\":\"getAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_resultAPY\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getLatestUserRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getLatestUserRewardsAfterSlashing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_distributionTokenPrice\",\"type\":\"uint256\"}],\"name\":\"getTotalAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributioToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"initTokenFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPoolStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferStuckERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCumulativeSum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregatedReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenFarming","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}