{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./PixelSprite.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"./creatSprite.sol\\\";\\n\\n\\ncontract pixelSprite is creatSprite {\\n\\tstring constant BALANCE_IS_ZERO = \\\"005001\\\";\\n\\tstring constant SPRITE_STATUS_IS_NOT_FREE = \\\"005002\\\";\\n\\tstring constant END_PRICE_SMALL_THAN_START_PRICE = \\\"005003\\\";\\n\\tstring constant YOU_ARE_NOT_OWNER = \\\"005004\\\";\\n\\tstring constant END_DAY_MUST_SMALL_THAN_30DAYS = \\\"005005\\\";\\n\\tstring constant END_PRICE_MUST_BIG_THAN_ZERO = \\\"005006\\\";\\n\\tstring constant YOU_CANT_BUY_YOUR_SELF = \\\"005007\\\";\\n\\tstring constant IT_IS_NOT_FOR_SALE = \\\"005008\\\";\\n\\tstring constant IT_HAS_EXPIRA = \\\"005009\\\";\\n\\tstring constant UNKOWN_ERROR = \\\"005010\\\";\\n\\tstring constant PRICE_ERROR = \\\"005011\\\";\\n\\tstring constant INSUFFICIENT_BALANCE = \\\"005012\\\";\\n\\tstring constant AUCTION_TYPE_IS_ERROR = \\\"005013\\\";\\n\\tstring constant END_DAY_MUST_BIG_THAN_1DAYS = \\\"005014\\\";\\n\\n\\t\\n\\tmapping(address=>uint256) public UserETHBalance;\\t\\n\\t\\n\\tstruct offer{\\n\\t\\tbool \\tisForSale;\\t\\t\\t//Sale status\\n\\t\\tuint8 \\tauctionType;\\t\\t//Auction type 0 is fixed bid 1 is decreasing in time\\n\\t\\tuint32 \\tstartTime;\\t\\t\\n\\t\\tuint32 \\texpirationTime;\\t\\n\\t\\taddress seller;\\t\\t\\t\\n\\t\\t\\n\\t\\tuint256 price;\\t\\t\\t\\t//Selling price, initial price\\n\\t\\tuint256 endPrice;\\t\\t\\t\\n\\t}\\n\\n\\tmapping(uint256=>offer) public OfferList; \\n\\t\\n\\t\\n\\t\\n\\tfunction userWithdrawETH()public {\\n\\t\\trequire(UserETHBalance[msg.sender]>0,BALANCE_IS_ZERO); \\n\\n\\t\\tuint256 sendValue = UserETHBalance[msg.sender]; \\n\\t\\t\\n\\t\\tUserETHBalance[msg.sender] = 0; \\n\\n\\t\\tpayable(msg.sender).transfer(sendValue); \\t\\n\\t}\\n\\t\\n\\n\\t\\n\\tfunction sellWithFixPrice(uint256 _price,uint256 _spriteID) public {\\n\\t\\trequire(getSpriteStatus(_spriteID)==1, SPRITE_STATUS_IS_NOT_FREE); \\n\\t\\trequire(msg.sender ==  SpriteList[_spriteID].owner ,YOU_ARE_NOT_OWNER); \\n\\n\\t\\tchangeSpriteStatus(_spriteID,2,0); \\n\\t\\tOfferList[_spriteID] = offer(true,0,uint32(block.timestamp),0,msg.sender,_price,0);\\n\\t\\t\\n\\t\\temit AddOffer(_spriteID,0,block.timestamp,0,_price,0);\\n\\t}\\n\\n\\tfunction sellWithEndPrice(uint256 _price,uint256 _endPrice,uint256 _spriteID,uint256 _endDay) public {\\n\\t\\trequire(_endPrice<_price,END_PRICE_SMALL_THAN_START_PRICE);\\n\\t\\trequire(getSpriteStatus(_spriteID)==1, SPRITE_STATUS_IS_NOT_FREE); \\n\\t\\trequire(msg.sender ==  SpriteList[_spriteID].owner ,YOU_ARE_NOT_OWNER);\\n\\n\\t\\trequire(_endDay<=30,END_DAY_MUST_SMALL_THAN_30DAYS); \\n\\t\\trequire(_endDay>0,END_DAY_MUST_BIG_THAN_1DAYS); \\n\\t\\trequire(_endPrice>0,END_PRICE_MUST_BIG_THAN_ZERO); \\n\\n\\t\\tuint256 endTime = block.timestamp+_endDay*86400;\\n\\t\\t\\n\\t\\tchangeSpriteStatus(_spriteID,3,endTime); \\n\\t\\t\\n\\t\\tOfferList[_spriteID] = offer(true,1,uint32(block.timestamp),uint32(endTime),msg.sender,_price,_endPrice);\\n\\t\\n\\t\\temit AddOffer(_spriteID,1,block.timestamp,endTime,_price,_endPrice);\\n\\t}\\n\\n\\t\\n\\n\\tfunction buySprite(uint256 _spriteID,uint256 _price) payable  public{\\n\\t\\taddress seller = OfferList[_spriteID].seller;\\n\\n\\t\\trequire(msg.sender !=  seller ,YOU_CANT_BUY_YOUR_SELF);\\n\\t\\trequire(OfferList[_spriteID].isForSale,IT_IS_NOT_FOR_SALE);\\n\\t\\t\\n\\t\\n\\t\\tif(OfferList[_spriteID].auctionType == 0 ){ //Fixed bid\\n\\t\\t\\t_buyWithFixPrice(_price,_spriteID,seller);\\n\\t\\t}else{//Dutch auction\\n\\t\\t\\t_buyWithEndPrice(_price,_spriteID,seller);\\n\\t\\t}\\n\\t\\n\\t\\temit BuySprite(_spriteID,_price,msg.sender,seller);\\n\\n\\t\\temit Transfer(seller,msg.sender,_spriteID);\\n\\t}\\n\\t\\n\\n\\t\\n\\tfunction _buyWithFixPrice(uint256 _price,uint256 _spriteID,address seller) internal {\\n\\t\\trequire(seller == SpriteList[_spriteID].owner,UNKOWN_ERROR);\\n\\t\\t\\n\\t\\trequire(_price == OfferList[_spriteID].price,PRICE_ERROR); \\n\\t\\t\\n\\t\\tUserETHBalance[msg.sender] += msg.value; \\n\\n\\t\\trequire(UserETHBalance[msg.sender] >= _price,INSUFFICIENT_BALANCE);\\n\\t\\t\\n\\t\\tUserETHBalance[seller] += _getValueBySubTransFee(_price);\\n\\n\\t\\tUserETHBalance[msg.sender] -= _price;\\t\\n\\n        changeSpriteStatus(_spriteID,1,0); \\n\\t\\tchangeOwner(_spriteID,msg.sender);  \\n\\n\\t\\t\\n\\t\\tdelete(OfferList[_spriteID]);\\n\\t}\\n\\n\\t\\n\\tfunction _buyWithEndPrice(uint256 _price,uint256 _spriteID,address seller) internal  {\\n\\t\\trequire(seller == SpriteList[_spriteID].owner,UNKOWN_ERROR);\\n\\n\\t\\trequire(OfferList[_spriteID].expirationTime > block.timestamp,IT_HAS_EXPIRA);\\n\\n\\t\\trequire(_price >= getAuctionPrice(_spriteID),PRICE_ERROR);\\n\\n\\t\\tUserETHBalance[msg.sender] += msg.value;\\n\\n\\t\\trequire(UserETHBalance[msg.sender] >= _price,INSUFFICIENT_BALANCE);\\n\\t\\t\\n\\t\\tUserETHBalance[seller] += _getValueBySubTransFee(_price);\\n\\t\\tUserETHBalance[msg.sender] -= _price;\\n        \\n\\t\\tchangeSpriteStatus(_spriteID,1,0);\\n\\t\\tchangeOwner(_spriteID,msg.sender);\\n\\n\\t\\tdelete(OfferList[_spriteID]); \\n\\t}\\n\\n\\tfunction cancelOffer(uint256 _spriteID) external {\\n\\t\\taddress seller = OfferList[_spriteID].seller;\\n\\n\\t\\trequire(msg.sender ==  seller ,YOU_ARE_NOT_OWNER);\\n\\t\\trequire(OfferList[_spriteID].isForSale,IT_IS_NOT_FOR_SALE);\\n\\t\\t\\n\\t\\tif(OfferList[_spriteID].auctionType == 1){ //Can only be cancelled before expiration\\n\\t\\t\\trequire(OfferList[_spriteID].expirationTime > block.timestamp,IT_HAS_EXPIRA);\\n\\t\\t}\\n\\n\\t\\tchangeSpriteStatus(_spriteID,1,0);\\n\\t\\t\\n\\t\\tdelete(OfferList[_spriteID]);\\n\\n\\t\\temit CancelOffer(_spriteID);\\n\\t}\\n\\n\\tfunction _getValueBySubTransFee(uint256 _price) internal returns(uint256)  {\\n\\t\\tuint256 fee = _price*5/100;\\n\\t\\tOwnerEthBalance += fee;\\n\\t\\treturn _price-fee;\\n\\t}\\n\\n\\tfunction getAuctionPrice(uint256 _spriteID) public view returns(uint256){\\n\\t\\trequire(OfferList[_spriteID].expirationTime >= block.timestamp,IT_HAS_EXPIRA); \\n\\n\\t\\trequire(OfferList[_spriteID].isForSale,IT_IS_NOT_FOR_SALE);\\n\\t\\trequire(OfferList[_spriteID].auctionType == 1,AUCTION_TYPE_IS_ERROR);\\n\\n\\t\\tuint256 duration = OfferList[_spriteID].expirationTime - OfferList[_spriteID].startTime;\\n\\n\\t\\tuint256 hasPassed = block.timestamp-OfferList[_spriteID].startTime;\\n\\n\\t\\tuint256 totalChange =  OfferList[_spriteID].price - OfferList[_spriteID].endPrice;\\n\\n      \\tuint256 currentChange = totalChange * hasPassed / duration;\\n\\n      \\tuint256 currentPrice = OfferList[_spriteID].price - currentChange;\\n\\t\\treturn currentPrice;\\n\\t}\\n}\"\r\n    },\r\n    \"./creatSprite.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./NFToken.sol\\\";\\n\\ncontract creatSprite is NFToken {\\n\\tstring constant SEND_VALUE_IS_NOT_EQ_ISSUEPRICE = \\\"004001\\\";\\n\\tstring constant MINT_COUNT_IS_BIG_THAN_MAXSUPPLY = \\\"004002\\\";\\n\\tstring constant CANT_CALL_FROM_CONTRACT = \\\"004003\\\";\\n\\tstring constant TO_UINT32_OUT_Of_BOUNDS = \\\"004004\\\";\\n\\tstring constant NOT_START_MINT = \\\"004005\\\";\\n\\n\\n\\tuint256 public constant MaxSupply = 10000;  \\n\\tuint256 internal constant IssuePrice = 0.01 ether; \\n\\n\\t\\n\\tfunction mint() external payable {\\n\\t\\trequire(msg.value == IssuePrice, SEND_VALUE_IS_NOT_EQ_ISSUEPRICE);\\n\\t\\trequire(SpriteCount < MaxSupply, MINT_COUNT_IS_BIG_THAN_MAXSUPPLY);\\n\\t\\trequire(msg.sender == tx.origin,CANT_CALL_FROM_CONTRACT);\\n\\t\\trequire(block.timestamp >= 1633910400,NOT_START_MINT);\\n\\t\\tSpriteCount += 1;  //ID 1--10000\\n\\n\\t\\tuint256 spriteID = SpriteCount;\\n\\t\\tbytes32 randSeed  = keccak256(abi.encodePacked(block.coinbase,block.difficulty,block.timestamp,spriteID,gasleft()));\\n\\t\\t\\n\\t\\tspriteItem memory sp = _creatSpriteItem(randSeed);\\n\\t\\tsp.addBlockNum = block.number;\\n\\t\\tsp.owner = msg.sender;\\n\\t\\tsp.status = 1;\\n\\t\\t\\n\\t\\tSpriteList[spriteID] = sp;\\n\\n\\t\\taddHolderTokens(msg.sender,spriteID);\\n\\n\\t\\tOwnerEthBalance += msg.value;\\n\\n\\t\\temit BuySprite(spriteID,IssuePrice,msg.sender,address(0x0));\\n\\t\\temit Transfer(address(0x0),msg.sender,spriteID);\\n\\t}\\n\\n\\tfunction _creatSpriteItem(bytes32 randSeed) pure private returns(spriteItem memory sp){\\n\\t\\tuint256[7] memory  partCountList = [uint256(7),28,32,32,16,11,20];\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\tsp.attribute.color_1 = uint8(_getRandUint(randSeed,0)%216);\\n\\t\\tsp.attribute.color_2 = uint8(_getRandUint(randSeed,2)%216);\\n\\t\\tsp.attribute.color_3 = uint8(_getRandUint(randSeed,4)%216);\\n\\t\\tsp.attribute.color_4 = uint8(_getRandUint(randSeed,6)%216);\\n\\t\\t\\n\\n\\t\\tuint256 randTruck = _getRandUint(randSeed,8)%1000;\\n\\t\\tif(randTruck>=partCountList[0]-1){\\n\\t\\t\\trandTruck = 0;\\n\\t\\t}else{\\n\\t\\t\\trandTruck += 1;\\n\\t\\t}\\n\\n\\t\\tsp.body.trunkIndex = uint8(randTruck);\\n\\n\\n\\t\\tsp.body.mouthIndex = uint8(_getRandUint(randSeed,10)%partCountList[1]);\\n\\t\\tsp.body.headIndex = uint8(_getRandUint(randSeed,12)%partCountList[2]);\\n\\t\\tsp.body.eyeIndex = uint8(_getRandUint(randSeed,14)%partCountList[3]);\\n\\t\\tsp.body.tailIndex = uint8(_getRandUint(randSeed,16)%partCountList[4]);\\n\\t\\tsp.body.colorContainerIndex = uint8(_getRandUint(randSeed,18)%partCountList[5]);\\n\\n\\t\\tsp.body.skinColorIndex = uint8(_getRandUint(randSeed,20)%partCountList[6]);\\n\\n\\t\\tsp.attribute.space = uint8(_getRandUint(randSeed,22)%51+10);//10~60\\n\\t\\t\\n\\t\\tsp.attribute.speed = _getRand0to9(randSeed[26])*10+1+_getRand0to9(randSeed[27]); //1-100\\n\\t\\tsp.attribute.capacity = _getRand0to9(randSeed[28])*10+1+_getRand0to9(randSeed[29]); //1-100\\n\\t}\\n\\n\\n\\tfunction _getRandUint(bytes32 randSeed,uint startAt) pure private returns(uint256 num){\\n\\t\\tbytes memory _bytes = abi.encodePacked(randSeed);\\n\\n\\t\\trequire(_bytes.length >= startAt + 4, TO_UINT32_OUT_Of_BOUNDS);\\n\\n\\t\\tassembly {\\n\\t\\t\\tnum := mload(add(add(_bytes, 0x4), startAt))\\n\\t\\t}\\n\\t\\t\\n\\t\\treturn num;\\n\\t}\\n\\t\\n\\n\\t\\n\\tfunction _getRand0to9(bytes1 inputByte) pure private  returns(uint8) {\\n\\t\\tuint num = uint8(inputByte)%30;\\n\\t\\tuint reNum = 0;\\n\\n\\t\\tif(num<15){\\n\\t\\t\\tif(num==0){\\n\\t\\t\\t\\treNum = 0;\\n\\t\\t\\t}else if (num==1 || num==2){\\n\\t\\t\\t\\treNum = 1;\\n\\t\\t\\t}else if (num>=3 && num <=5){\\n\\t\\t\\t\\treNum = 2;\\n\\t\\t\\t}else if (num>=6 && num <=9){\\n\\t\\t\\t\\treNum = 3;\\n\\t\\t\\t}else{ // 10-15\\n\\t\\t\\t\\treNum = 4;\\n\\t\\t\\t}\\n\\t\\t}else { // >=15 && < 30 \\n\\t\\t\\tif(num==29){\\n\\t\\t\\t\\treNum = 9;\\n\\t\\t\\t}else if (num == 27 || num ==28){\\n\\t\\t\\t\\treNum = 8;\\n\\t\\t\\t}else if (num>=24 && num <=26){\\n\\t\\t\\t\\treNum = 7;\\n\\t\\t\\t}else if (num>=20 && num <=23){\\n\\t\\t\\t\\treNum = 6;\\n\\t\\t\\t}else{ // 15-19\\n\\t\\t\\t\\treNum = 5;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn uint8(reNum);\\n\\t}\\n\\n}\"\r\n    },\r\n    \"./NFToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./components/Ierc721.sol\\\";\\nimport \\\"./sprite.sol\\\";\\n\\ncontract NFToken is sprite,IERC721Metadata,IERC721Enumerable {\\n\\t\\n\\t//In order to get friendly tips\\n    string constant ZERO_ADDRESS = \\\"ZERO_ADDRESS\\\";\\n\\tstring constant INDEX_BIG_THAN_BALANCE = \\\"INDEX_BIG_THAN_BALANCE\\\";\\n\\tstring constant CANT_TRANSFER_TO_YOURSELF = \\\"CANT_TRANSFER_TO_YOURSELF\\\";\\n\\tstring constant NOT_VALID_NFT = \\\"NOT_VALID_NFT\\\";\\n\\tstring constant NTF_STATUS_CANT_TO_SEND = \\\"NTF_STATUS_CANT_TO_SEND\\\";\\n\\tstring constant NOT_OWNER_APPROVED_OR_OPERATOR = \\\"NOT_OWNER_APPROVED_OR_OPERATOR\\\";\\n\\tstring constant NOT_OWNER_OR_OPERATOR = \\\"NOT_OWNER_OR_OPERATOR\\\";\\n\\tstring constant IS_OWNER = \\\"IS_OWNER\\\";\\n\\n\\tmapping (uint=>address) idToApproval; \\n\\tmapping(address=>mapping(address=>bool)) ownerToOperators; \\n\\n\\t\\n    mapping(address => mapping(uint256 => uint256)) private OwnedTokens;\\n    mapping(uint256 => uint256) private OwnedTokensIndex;\\n\\n\\tmapping(address => uint256) private NTFBalances;\\n\\n\\n\\tfunction supportsInterface(bytes4 interfaceId) public pure override  returns (bool) {\\n        return interfaceId == hex\\\"01ffc9a7\\\" || interfaceId == hex\\\"80ac58cd\\\" || interfaceId == hex\\\"780e9d63\\\" || interfaceId == hex\\\"5b5e139f\\\";  \\n    }\\n\\t\\n\\t\\n    function name() public pure  override returns (string memory) {\\n        return \\\"Pixel Universe Sprite\\\";\\n    }\\n\\n\\t\\n    function symbol() public pure  override returns (string memory) {\\n        return \\\"PUS\\\";\\n    }\\n\\n\\t//Decompression demo program https://github.com/pixeluniverselab/sprite_decompression\\n\\tfunction tokenURI(uint256 tokenId) public view  override  returns (string memory){\\n\\t\\t\\n\\t\\tstring memory compressedImage = Base64.encode(getSpriteImage(tokenId));\\n\\t\\t\\n\\t\\tspriteAttribute memory spa = getSpriteAttribute(tokenId);\\n\\t\\tspriteBody memory spb = getSpriteBody(tokenId);\\n\\t\\t\\n\\t\\tstring memory spriteaAttar = string(abi.encodePacked('{\\\"speed\\\":',_toString(spa.speed),',\\\"capacity\\\":',_toString(spa.capacity),',\\\"space\\\":',_toString(spa.space),',\\\"color_1\\\":',_toString(spa.color_1),',\\\"color_2\\\":',_toString(spa.color_2),',\\\"color_3\\\":',_toString(spa.color_3),',\\\"color_4\\\":',_toString(spa.color_4),'}'));\\n\\t\\tstring memory spriteaBody = string(abi.encodePacked('{\\\"trunkIndex\\\":',_toString(spb.trunkIndex),',\\\"headIndex\\\":',_toString(spb.headIndex),',\\\"eyeIndex\\\":',_toString(spb.eyeIndex),',\\\"mouthIndex\\\":',_toString(spb.mouthIndex),',\\\"tailIndex\\\":',_toString(spb.tailIndex),',\\\"colorContainerIndex\\\":',_toString(spb.colorContainerIndex),',\\\"skinColorIndex\\\":',_toString(spb.skinColorIndex),'}'));\\n\\n\\t\\tstring memory json = Base64.encode(bytes(string(abi.encodePacked('{\\\"name\\\": \\\"Sprite #', _toString(tokenId), '\\\",\\\"description\\\": \\\"Pixel sprite is a metaverse game. All information of the sprite, including image data, is completely stored on the chain. The picture is stored on the chain using a compression algorithm\\\", \\\"attribute\\\": ',spriteaAttar,', \\\"body\\\": ',spriteaBody,', \\\"image\\\": \\\"data:image/compressed_png;Base64,', compressedImage,'\\\"}'))));\\n\\t\\t\\n\\t\\n\\t\\treturn string(abi.encodePacked('data:application/json;base64,', json));\\n\\t}\\n\\n\\t\\n    function totalSupply() public view  override returns (uint256) {\\n        return SpriteCount;\\n    }\\n\\n\\n\\t//tokenID start at 1\\n    function tokenByIndex(uint256 index) public pure  override returns (uint256) {\\n        return index+1;\\n    }\\n\\n\\n\\tfunction balanceOf(address _owner) external override view returns (uint256){\\n\\t\\trequire(_owner != address(0), ZERO_ADDRESS);\\n\\t\\treturn NTFBalances[_owner];\\n\\t}\\n\\n\\t\\n\\tfunction ownerOf(uint256 _tokenId) external override view returns (address _owner){\\n\\t\\t_owner = SpriteList[_tokenId].owner;\\n\\t\\trequire(_owner != address(0), ZERO_ADDRESS);\\n\\t}\\n\\n\\t\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view  override returns (uint256) {\\n\\t\\trequire(NTFBalances[owner] > index, INDEX_BIG_THAN_BALANCE); //不曾拥有该TOken\\n\\n\\t\\treturn OwnedTokens[owner][index];\\n    }\\n\\n\\t\\n\\tfunction transferFrom(address _from, address _to, uint256 _tokenId) external override   {\\n\\t\\trequire(_from != _to, CANT_TRANSFER_TO_YOURSELF);  \\n\\n\\t\\taddress tokenOwner = SpriteList[_tokenId].owner; \\n\\t\\trequire(tokenOwner != address(0), NOT_VALID_NFT); \\n       \\n        require(tokenOwner == _from, NOT_OWNER_OR_OPERATOR); \\n\\n\\t\\trequire(getSpriteStatus(_tokenId)==1,NTF_STATUS_CANT_TO_SEND); //Only when the sprite is idle can you transfer money\\n\\n\\t\\t\\n\\t\\trequire(tokenOwner == msg.sender || idToApproval[_tokenId] == msg.sender || ownerToOperators[tokenOwner][msg.sender],NOT_OWNER_APPROVED_OR_OPERATOR);\\n\\t\\t\\n\\t\\trequire(_to != address(0), ZERO_ADDRESS);\\n\\t\\t\\n\\t\\t\\n\\n\\t\\tchangeOwner(_tokenId,_to); \\n\\t\\t\\n\\t\\temit Transfer(_from, _to, _tokenId);\\n\\t}\\n\\n\\t\\n\\t\\n\\tfunction approve(address _approved, uint256 _tokenId) external override  {\\n\\t\\taddress tokenOwner = SpriteList[_tokenId].owner;\\n\\n\\t\\trequire(\\n\\t\\t\\ttokenOwner == msg.sender || ownerToOperators[tokenOwner][msg.sender],\\n\\t\\t\\tNOT_OWNER_OR_OPERATOR\\n\\t\\t);\\n\\n\\t\\trequire(tokenOwner != address(0), NOT_VALID_NFT);\\n\\n\\t\\trequire(_approved != tokenOwner, IS_OWNER);\\n\\n\\t\\tidToApproval[_tokenId] = _approved;\\n\\t\\temit Approval(tokenOwner, _approved, _tokenId);\\n\\t}\\n\\n\\t\\n\\tfunction setApprovalForAll(address _operator,bool _approved)external override{\\n\\t\\townerToOperators[msg.sender][_operator] = _approved;\\n\\t\\temit ApprovalForAll(msg.sender, _operator, _approved);\\n  \\t}\\n\\n\\t\\n\\tfunction getApproved(uint256 _tokenId) external override view returns (address){\\n\\t\\taddress tokenOwner = SpriteList[_tokenId].owner;\\n\\t\\trequire(tokenOwner != address(0), NOT_VALID_NFT);\\n\\n    \\treturn idToApproval[_tokenId];\\n  \\t}\\n\\n\\t\\n\\tfunction isApprovedForAll(address _owner,address _operator) external override view returns (bool) {\\n    \\treturn ownerToOperators[_owner][_operator];\\n  \\t}\\n\\n\\t\\n\\tfunction _clearApproval(uint256 _tokenId) private{\\n    \\tdelete idToApproval[_tokenId];\\n  \\t}\\n\\n\\t\\n\\tfunction _toString(uint256 value) internal pure returns (string memory) {\\n    \\t\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }  \\n\\n\\tfunction changeOwner(uint256 _spriteID,address _newOwner) internal {\\n\\t\\taddress oldOwner = SpriteList[_spriteID].owner;\\n\\n\\t\\t_removeTokenFromOwnerEnumeration(oldOwner,_spriteID);\\n\\t\\t_addTokenToOwnerEnumeration(_newOwner,_spriteID);\\n\\n\\t\\tSpriteList[_spriteID].owner = _newOwner;\\n\\n\\t\\tNTFBalances[oldOwner] -= 1; \\n\\t\\tNTFBalances[_newOwner] += 1;\\n\\n\\t\\t_clearApproval(_spriteID);\\n\\n\\t}\\n\\n\\t\\n\\tfunction _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n\\t\\t\\n\\n        uint256 length = NTFBalances[to];\\n        OwnedTokens[to][length] = tokenId;\\n        OwnedTokensIndex[tokenId] = length;\\n    }\\n\\n\\n\\tfunction _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n\\t\\t\\n\\n        uint256 lastTokenIndex = NTFBalances[from] - 1;\\n        uint256 tokenIndex = OwnedTokensIndex[tokenId];\\n\\n        \\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = OwnedTokens[from][lastTokenIndex];\\n\\n            OwnedTokens[from][tokenIndex] = lastTokenId; \\n            OwnedTokensIndex[lastTokenId] = tokenIndex; \\n        }\\n\\n        delete OwnedTokensIndex[tokenId];\\n        delete OwnedTokens[from][lastTokenIndex];\\n    }\\n\\n\\tfunction addHolderTokens(address _owner,uint256 index) internal {\\n\\t\\t_addTokenToOwnerEnumeration(_owner,index);\\n\\t\\tNTFBalances[_owner] += 1; \\n\\t}\\n\\n\\n  \\n}\\n\\n\\n/// [MIT License]\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\\n\"\r\n    },\r\n    \"./components/Ierc721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC165 {\\n    \\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\\n\\ninterface IERC721 is IERC165  {\\n   \\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\n\\n    \\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\n\\n   \\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n   \\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n   \\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n\\n   \\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\\n\\n\\n    function approve(address _approved, uint256 _tokenId) external;\\n\\n\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n\\n    function getApproved(uint256 _tokenId) external view returns (address);\\n\\n\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n}\\n\\n\\ninterface IERC721Metadata  is IERC721  {\\n    \\n    function name() external view returns (string memory _name);\\n\\n    \\n    function symbol() external view returns (string memory _symbol);\\n\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n}\\n\\ninterface IERC721Enumerable is IERC721  {\\n    \\n    function totalSupply() external view returns (uint256);\\n\\n    \\n    function tokenByIndex(uint256 _index) external view returns (uint256);\\n\\n    \\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\\n}\\n\\n\\n\\n\\n\\n\"\r\n    },\r\n    \"./sprite.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"./components/spriteStruct.sol\\\";\\nimport \\\"./components/ownable.sol\\\";\\nimport \\\"./spriteImage.sol\\\";\\n\\n\\ncontract sprite is spriteImage,Ownable {\\n\\tstring constant CONTRACT_ADDR_MUST_AUTHORIZED = \\\"002001\\\";\\n\\tstring constant NEW_STATUS_CANT_SMALL_THAN_ONE = \\\"002002\\\";\\n\\tstring constant NFT_HAS_NOT_CREAT = \\\"002003\\\";\\n\\n\\tuint256 public OwnerEthBalance;\\t\\t\\n\\n\\tuint256 internal SpriteCount = 0;\\t\\t//Number of sprites, starting from 1\\n\\t\\n\\tmapping(uint256=>spriteItem) public SpriteList; \\t\\t\\t\\n\\tmapping(address=>bool) public ChangeStatusContract; \\t\\t\\n\\t\\n\\tevent AddOffer(uint256 _spriteID,uint256 _auctionType,uint256 _startTime,uint256 _expirationTime,uint256 _price,uint256 _endPrice); \\n\\tevent BuySprite(uint256 indexed _spriteID,uint256  _price,address  indexed _buyer,address indexed _seller); \\n\\tevent CancelOffer(uint256 _spriteID); \\n\\n\\t\\n\\tfunction ownerWithdraw() external onlyOwner {\\n\\t\\tpayable(getManageOwner()).transfer(OwnerEthBalance);\\n\\t\\tOwnerEthBalance = 0;\\n\\t}\\n\\n\\tfunction setChangeStatusContract(address _addr , bool _isAuthorized) onlyOwner external{\\n\\t\\tChangeStatusContract[_addr] = _isAuthorized;\\n\\t}\\n    \\t\\n\\t\\n\\tfunction changeSpriteStatusExt(uint256 _spriteID,uint256 _newStatus,uint256 _expTime) external {\\n\\t\\trequire(ChangeStatusContract[msg.sender], CONTRACT_ADDR_MUST_AUTHORIZED);\\n\\t\\tchangeSpriteStatus(_spriteID,_newStatus,_expTime);\\n\\t}\\n\\t\\n\\n\\t\\n\\t\\n\\tfunction changeSpriteStatus(uint256 _spriteID,uint256 _newStatus,uint256 _expTime) internal {\\n\\t\\trequire(_newStatus>=1,NEW_STATUS_CANT_SMALL_THAN_ONE);\\n\\t\\tSpriteList[_spriteID].status = uint32(_newStatus);   \\n\\t\\tSpriteList[_spriteID].statusExpTime = uint64(_expTime); \\n\\t}\\n\\n\\t\\n\\tfunction getSpriteAttribute(uint256 _spriteID)  public view returns(spriteAttribute memory){\\n\\t    return SpriteList[_spriteID].attribute;\\n\\t}\\n\\n\\t\\n\\tfunction getSpriteBody(uint256 _spriteID)  public view returns(spriteBody memory){\\n\\t    return SpriteList[_spriteID].body;\\n\\t}\\n\\n\\t\\n\\tfunction getSpriteStatusAndOwner(uint256 _spriteID)  external view returns(address,uint256){\\n\\t    return (SpriteList[_spriteID].owner,getSpriteStatus(_spriteID));\\n\\t}\\n\\n\\t\\n\\tfunction getSpriteStatus(uint256 _spriteID) public view returns(uint256 status){\\n\\t    uint256\\texpTime = SpriteList[_spriteID].statusExpTime; //uint64 to uint256\\n\\t\\tstatus = SpriteList[_spriteID].status; //uint32 to  uint256\\n\\n\\t    if(status>=2 && expTime != 0 && (block.timestamp > expTime)  ){\\n\\t    \\tstatus = 1; //1 Means free\\n\\t    }\\n\\t}\\n\\n\\n\\t\\n\\tfunction getSpriteImage(uint256 _spriteID) public view returns(bytes memory) {\\n\\t\\taddress tokenOwner = SpriteList[_spriteID].owner; \\n\\t\\trequire(tokenOwner != address(0), NFT_HAS_NOT_CREAT); \\n\\n        spriteBody memory sb = SpriteList[_spriteID].body;\\n        uint8[4] memory colorList = [SpriteList[_spriteID].attribute.color_1,SpriteList[_spriteID].attribute.color_2,SpriteList[_spriteID].attribute.color_3,SpriteList[_spriteID].attribute.color_4]; \\n\\t\\treturn getImageCompressData(colorList,sb);\\n    }\\n\\n\\n\\t\\n\\n}\\n\"\r\n    },\r\n    \"./components/spriteStruct.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct spriteAttribute{\\n\\tuint8 speed;\\t \\t\\t\\t\\t\\n\\tuint8 capacity;  \\t\\t\\t\\t\\n\\tuint8 space;\\t \\t\\t\\t\\t//Affect the size of the production canvas  10~60\\n\\tuint8 color_1;\\n\\tuint8 color_2;\\n\\tuint8 color_3;\\n\\tuint8 color_4;\\n}\\n\\nstruct spriteBody{\\n\\tuint8 trunkIndex;  \\t\\t\\t\\t\\n\\tuint8 mouthIndex; \\t\\t\\t\\t\\n\\tuint8 headIndex;  \\t\\t\\t\\t\\n\\tuint8 eyeIndex;   \\t\\t\\t\\t\\n\\tuint8 tailIndex;  \\t\\t\\t\\t\\n\\tuint8 colorContainerIndex;\\t\\t\\n\\tuint8 skinColorIndex; \\t\\t\\t\\n}\\n\\nstruct spriteItem {\\n\\tuint32\\tstatus;  \\t\\t\\t\\t//Sprite state 0: not created, 1:idle,2:Fixed bid transaction,3:Dutch auction 4:production\\n\\tuint64 \\tstatusExpTime; \\t\\t\\t\\n\\taddress owner;\\t\\t\\t\\t\\t\\n\\tuint256 addBlockNum;\\t\\t\\t\\n\\t\\n\\tspriteAttribute attribute; \\t\\t\\n\\tspriteBody  body;\\t\\t\\t\\t\\n}\\n\\n\"\r\n    },\r\n    \"./components/ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract Ownable  {\\n    string constant OWNABLE_CALL_IS_NOT_THE_OWNER = \\\"001001\\\";\\n    string constant OWNABLE_NEW_OWNER_IS_ZERO = \\\"001002\\\";\\n\\n    address private Manageowner;\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor ()  {\\n        Manageowner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function getManageOwner() public view  returns (address) {\\n        return Manageowner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(Manageowner == msg.sender, OWNABLE_CALL_IS_NOT_THE_OWNER);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address _newOwner) public  onlyOwner {\\n        require(_newOwner != address(0), OWNABLE_NEW_OWNER_IS_ZERO);\\n        Manageowner = _newOwner;\\n    }\\n}\"\r\n    },\r\n    \"./spriteImage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./components/spriteStruct.sol\\\";\\n\\n\\ncontract spriteImage   {\\n    \\n    enum Part {Trunk,Mouth,Head,Eye,Tail,ColorContainer}\\n\\n\\tbytes constant private PartFaceData =hex\\\"822bd8d94a29030224555606942aaac1928555584a50aaab0c6e1555605555605555605555630940005400\\\";\\n\\t\\n\\t\\n    mapping(Part=>mapping(uint=>bytes)) private PartData;\\n    mapping(uint256=>uint8[2]) private  SkinData;\\n\\t\\n\\t\\n    \\n\\tconstructor(){\\n\\t    PartData[Part.Trunk][0] = hex\\\"822bd8d95c6ba3012055581840aab05a01554a0451281144a1c122a8d10c9155689cc8d2840d00b000691000\\\";\\n        PartData[Part.Trunk][1] = hex\\\"852bbbd83533905c6ba301201249340c201249341680124922d008241168081210b43824124836886486db6e413990e46c08039000dc000034880000\\\";\\n        PartData[Part.Trunk][2] = hex\\\"852bc2d81d169e5c6ba301201249340c201249341680124922d008241168081210b43824124836886486db6e413990e46c08039000dc000034880000\\\";\\n        PartData[Part.Trunk][3] = hex\\\"852bc1d839329d5c6ba301201249340c201249341680124922d008241168081210b438241248b6886486db6e413990e46c08039000dc000034880000\\\";\\n        PartData[Part.Trunk][4] = hex\\\"852bc7d883589d5c6ba301201249340c201249341680124922d008241168081210b438241248b6886486db6e413990e46c08039000dc000034880000\\\";\\n        PartData[Part.Trunk][5] = hex\\\"852b65d8c79d5e5c6ba301201249340c201249341680124922d008241168081210b438241248b6886486db6e413990e46c08039000dc000034880000\\\";\\n        PartData[Part.Trunk][6] = hex\\\"852b5dd8cea3325c6ba301201249340c201249341680124922d008241168081210b438241248b6886486db6e413990e46c08039000dc000034880000\\\";\\n\\n        PartData[Part.Mouth][0] = hex\\\"802b639ee11800\\\";\\n        PartData[Part.Mouth][1] = hex\\\"81972b5364e1001d17f8\\\";\\n        PartData[Part.Mouth][2] = hex\\\"822bbbb463a111820006630b631120\\\";\\n        PartData[Part.Mouth][3] = hex\\\"80966b9ae080\\\";\\n        PartData[Part.Mouth][4] = hex\\\"81d02b5b5ef2070140\\\";\\n        PartData[Part.Mouth][5] = hex\\\"802b6b9ce0a0\\\";\\n        PartData[Part.Mouth][6] = hex\\\"802b6362e1ad00\\\";\\n        PartData[Part.Mouth][7] = hex\\\"80b46b9cf11800\\\";\\n        PartData[Part.Mouth][8] = hex\\\"8156b4639ef10c2b80\\\";\\n        PartData[Part.Mouth][9] = hex\\\"81902b639ee11b00\\\";\\n        PartData[Part.Mouth][10] = hex\\\"812bac639ef1881e20\\\";\\n        PartData[Part.Mouth][11] = hex\\\"80965b62e180304400\\\";\\n        PartData[Part.Mouth][12] = hex\\\"842bd873c8d94b6712082db269250c824924936c80000248\\\";\\n        PartData[Part.Mouth][13] = hex\\\"842bd8c897d94b67120809932d98641249249b6400001240\\\";\\n        PartData[Part.Mouth][14] = hex\\\"81d7d96b9cf11980\\\";\\n        PartData[Part.Mouth][15] = hex\\\"81815653270211380a8c05e783c070\\\";\\n        PartData[Part.Mouth][16] = hex\\\"862bb4d4cdc778a253a95203100bc0000000434090982485b0024e001ca86ec114c4c28880\\\";\\n        PartData[Part.Mouth][17] = hex\\\"822b56814aef32868406e02000000416b46aa6510f1c4d4cc8226289694058082e18a506c18a3e0400\\\";\\n        PartData[Part.Mouth][18] = hex\\\"822b585f4aef32868406e02000000416b46aa6510f1c4d4cc8226289694058082e18a506c18a3e0400\\\";\\n        PartData[Part.Mouth][19] = hex\\\"822b97c24aef32868406e02000000416b46aa6510f1c4d4cc8226289694058082e18a506c18a3e0400\\\";\\n        PartData[Part.Mouth][20] = hex\\\"822ba2cd4aef32868406e02000000416b46aa6510f1c4d4cc8226289694058082e18a506c18a3e0400\\\";\\n        PartData[Part.Mouth][21] = hex\\\"822b5a604aef32868406e02000000416b46aa6510f1c4d4cc8226289694058082e18a506c18a3e0400\\\";\\n        PartData[Part.Mouth][22] = hex\\\"822b161d4aef32868406e02000000416b46aa6510f1c4d4cc8226289694058082e18a506c18a3e0400\\\";\\n        PartData[Part.Mouth][23] = hex\\\"83ac2bba562adef1800300b81a2b276035c0a8\\\";\\n        PartData[Part.Mouth][24] = hex\\\"82812b722a1d1180202900580800cdaabd6d309aac7cd2cd1ad5371aa8\\\";\\n        PartData[Part.Mouth][25] = hex\\\"832bcec7565baf42021014461725120c278155698910d5c5581f810d058a2400\\\";\\n        PartData[Part.Mouth][26] = hex\\\"832bbb90565baf42021014461725120c278155698910d5c5581f810d058a2400\\\";\\n        PartData[Part.Mouth][27] = hex\\\"842b9c72ac785bab228410164800000010d014ca910000000000\\\";\\n\\n        PartData[Part.Head][0] = hex\\\"822bd8d949287203000001942aaac31620aab12813c0aab0\\\";\\n        PartData[Part.Head][1] = hex\\\"822bd8d948a8720100610862440001250aaab0c68055587f02aac0\\\";\\n        PartData[Part.Head][2] = hex\\\"822bd9d8386c7201200610041068374521522a51a8628343a429212051250a0a8e503195caaa00\\\";\\n        PartData[Part.Head][3] = hex\\\"822bd8d950287282002000c10848421620a87122a0c89d2320c8c92320c8f74320ca2c82aaaa00\\\";\\n        PartData[Part.Head][4] = hex\\\"822bd8d9482a8282002800e10858421a20a88922a0c8bd2320c8f22320aa02a93d42aaaa5d40aaa9a422\\\";\\n        PartData[Part.Head][5] = hex\\\"832bcea3d840ee930208016100444150d082a20185a45330d2835001548347fe54944212d8649880360200\\\";\\n        PartData[Part.Head][6] = hex\\\"842bd8d3c1d948687206004100401b609a682580024920c28124924c0f2c1009249824809700924980\\\";\\n        PartData[Part.Head][7] = hex\\\"832bd7ac8138ae83051800026601fff808ce155555619c232b34d540aaaaacb158e26a955a341800000000\\\";\\n        PartData[Part.Head][8] = hex\\\"832b1d6b3a386882871801338550204955522d514ad28ed454d4e47d01554b82aaaab98d80000000\\\";\\n        PartData[Part.Head][9] = hex\\\"842b9ed573d3382e8282200000000a2812492cb04aa0492596c1b28124b2cb08ea000000002c2824924a40cee000000000003bc0124924965b6c44b8000000000000\\\";\\n        PartData[Part.Head][10] = hex\\\"852b736cd3a87e40ac8281600000000001fd0492e424924024b8ed2524173024a5a92483d586db6db904b60249249490b6b000000000\\\";\\n        PartData[Part.Head][11] = hex\\\"832bd7bbac483482048807080c501402851a15552b871e155546f8934555542a99e2dd000000d020d982aaabe3f60abbbf9234000000\\\";\\n        PartData[Part.Head][12] = hex\\\"842bd711d8d948ea828428000040e1b6dc06d4000000004f90492492490124924924212800000000\\\";\\n        PartData[Part.Head][13] = hex\\\"852bd7d0bb97733870b3028e0000002c482498db04e582496dc741c1a1b8db6e46c249e1b6db71b6ca0b51825b6db65b25201475d765752483fa02db6db6db5da2743b68af0a81820800\\\";\\n        PartData[Part.Head][14] = hex\\\"816c90512ea2026003e1fc729ff2aa7fcdb4000a40c200\\\";\\n        PartData[Part.Head][15] = hex\\\"832b9056ba406c8202a0200008d010000828080005f4040003ea0200026d0100017295d555d3c000000000\\\";\\n        PartData[Part.Head][16] = hex\\\"842b56819ca4386c92032000015609224124049244833a0524912421d029248921474072491b6d860f05249249124871e000000000044700\\\";\\n        PartData[Part.Head][17] = hex\\\"832bccd7a2382a93028a0002638aae10922aab86050b52f87e50b32f89c58aaafe2dd600007f82aaaa7e000000012a00\\\";\\n        PartData[Part.Head][18] = hex\\\"824b2bcc403092043000030e000050c00018881cb0000842091000002cc00000d14b54aabcd2d52ab11c00000004cf00000000\\\";\\n        PartData[Part.Head][19] = hex\\\"842b81d856d949329204500000a384925023a000000002f1019f824924b6d864459000000028986c632000\\\";\\n        PartData[Part.Head][20] = hex\\\"84123d2bd8d950a87202100388030c1208982416b0492092414a48a56057aa4524e5d36db880\\\";\\n        PartData[Part.Head][21] = hex\\\"842bd711ac10406c828250000000008301249249641ee824924924b20124924b2cb0f580924965b626a824924a41714092492d8d6a0000000000\\\";\\n        PartData[Part.Head][22] = hex\\\"822bc7d640ec820460000940aaa886055545f4555543dc15555525f000000000\\\";\\n        PartData[Part.Head][23] = hex\\\"882b1868123d318e3743406c820540000026c0a686608600d05c4cc17d01a23a19a983ea043533453309980444cc45111016b804c4cd0ccd14cc356000000000000000\\\";\\n        PartData[Part.Head][24] = hex\\\"822bcca2402e920388050809880b30a2845628aca863a2acb2c881a2cacac8a1c2b2cab23078b2acb2a38f0a28b2b1040428844302b1346080\\\";\\n        PartData[Part.Head][25] = hex\\\"832bd5d3a938aaa201080410020420ab05403f820555416e8d3555c1e715555d7899a55d77f8b826bf200078e8270800\\\";\\n        PartData[Part.Head][26] = hex\\\"812b7950a883031003467c5c87f21adff3fe7fc000\\\";\\n        PartData[Part.Head][27] = hex\\\"822bba72287282832000001a50aaaa85ea1555510002228555545200a821165455554335c4140aaaa8051fe42aaaaaaaa4ac0000000000\\\";\\n        PartData[Part.Head][28] = hex\\\"822b5580406c828520004900aa82050d5528bd4355523e500000131835554a5ae8d5554a8000000000\\\";\\n        PartData[Part.Head][29] = hex\\\"822bc79d50a883811000000b822aaac0aaab02aaac0aaab02aaac0000000\\\";\\n        PartData[Part.Head][30] = hex\\\"832b3b6534406ed2830c0050e0d20469169543258acaaa20b4569557145a2d2aaf8c1f15a557fc000003fc8b21f93633cab19e5d88ccc000\\\";\\n        PartData[Part.Head][31] = hex\\\"822bc19650ae83012000001c50aaab070a1555615142aaac38a455558005555aa000000000\\\";\\n\\n        PartData[Part.Eye][0] = hex\\\"802b62dec081ce00\\\";\\n        PartData[Part.Eye][1] = hex\\\"81d92b62e0c1021e50c0\\\";\\n        PartData[Part.Eye][2] = hex\\\"802b52e2b1085800\\\";\\n        PartData[Part.Eye][3] = hex\\\"802b631ec08600\\\";\\n        PartData[Part.Eye][4] = hex\\\"81d92b62dec081de80\\\";\\n        PartData[Part.Eye][5] = hex\\\"81562b5aa2c108101e0b83ccc8\\\";\\n        PartData[Part.Eye][6] = hex\\\"81562b62e2c102246880\\\";\\n        PartData[Part.Eye][7] = hex\\\"822bd9d65aa2c181024a0b4bad2d24b0\\\";\\n        PartData[Part.Eye][8] = hex\\\"802b5ae0c080a39400\\\";\\n        PartData[Part.Eye][9] = hex\\\"81562b5ae2c10412107080\\\";\\n        PartData[Part.Eye][10] = hex\\\"812bd662e0b08ae8\\\";\\n        PartData[Part.Eye][11] = hex\\\"802b629ec08071e580\\\";\\n        PartData[Part.Eye][12] = hex\\\"812bd962e0c1029ef0e0\\\";\\n        PartData[Part.Eye][13] = hex\\\"81d92b62a0c1021e51c6a0\\\";\\n        PartData[Part.Eye][14] = hex\\\"81562b5a9eb08438cca0\\\";\\n        PartData[Part.Eye][15] = hex\\\"812bd962a0c1029eb1beb8\\\";\\n        PartData[Part.Eye][16] = hex\\\"81d92b62a0c1021e31aea8\\\";\\n        PartData[Part.Eye][17] = hex\\\"812bd75260c2000620c414a500\\\";\\n        PartData[Part.Eye][18] = hex\\\"802b52a8c20420a2174001811b10\\\";\\n        PartData[Part.Eye][19] = hex\\\"812bac4268d281100e20348e26471a8a8a1cb48e6a20ec40\\\";\\n        PartData[Part.Eye][20] = hex\\\"812bd7526cc2014000cc0003564413d000cc00\\\";\\n        PartData[Part.Eye][21] = hex\\\"812b424aaac281000032636648080600\\\";\\n        PartData[Part.Eye][22] = hex\\\"822b5690422ac3012000001d30aaaa800d554800aaaa8e48000000\\\";\\n        PartData[Part.Eye][23] = hex\\\"812b814a6ac282700372ff06d8507000\\\";\\n        PartData[Part.Eye][24] = hex\\\"832b8257ac422ac30028000001d00beaf8012a4a80150c042a1c8403f080\\\";\\n        PartData[Part.Eye][25] = hex\\\"812bb24a68c20220c219ec60ce9b4a254200\\\";\\n        PartData[Part.Eye][26] = hex\\\"822bb43552a6c20200000568a0500064c000\\\";\\n        PartData[Part.Eye][27] = hex\\\"814fd75a9eb1021e30a0\\\";\\n        PartData[Part.Eye][28] = hex\\\"81822b5aa2b1820942b480\\\";\\n        PartData[Part.Eye][29] = hex\\\"802b5aa0c10107068800\\\";\\n        PartData[Part.Eye][30] = hex\\\"81812b629ec08071eda0\\\";\\n        PartData[Part.Eye][31] = hex\\\"802b5aa4b1022c2860\\\";\\n\\n        PartData[Part.Tail][0] = hex\\\"812bd9b5f19100366800\\\";\\n        PartData[Part.Tail][1] = hex\\\"822bd9d8b53992062038049941da8440c10ea8d04a6000\\\";\\n        PartData[Part.Tail][2] = hex\\\"822bd7bab2bb610540663053283a82405a0d01d8440961482c8600\\\";\\n        PartData[Part.Tail][3] = hex\\\"822b3c68b43b7186802a0c88e15519c2aa45054ad01803407280\\\";\\n        PartData[Part.Tail][4] = hex\\\"822bd8d7b2f7820120032150310a02462860c50f98a263145a4233211c908fa05014906a938800\\\";\\n        PartData[Part.Tail][5] = hex\\\"812bd8b3796182404b622d8c363d1c95b2b8e631ce1e3f20\\\";\\n        PartData[Part.Tail][6] = hex\\\"812bd8b3bb7184405c712a119ce90e54a73e6508e29d02724200\\\";\\n        PartData[Part.Tail][7] = hex\\\"812bd8b33b81850189146c7524a92c6cd1276da136910d41f5853000\\\";\\n        PartData[Part.Tail][8] = hex\\\"812bd8b57591800a652cf7d480\\\";\\n        PartData[Part.Tail][9] = hex\\\"822bd8d9b47b8286200a213089895866a2a412942a918156038100\\\";\\n        PartData[Part.Tail][10] = hex\\\"822bd8d9b439818680261307d2585a0a8ec1623a4b15456316d1c200\\\";\\n        PartData[Part.Tail][11] = hex\\\"822bd8d9b4f5720840d8282c285040\\\";\\n        PartData[Part.Tail][12] = hex\\\"822b8910b3f9618680260d0842a1840400981590c400\\\";\\n        PartData[Part.Tail][13] = hex\\\"822bd8d9b5338204409c30b0d000\\\";\\n        PartData[Part.Tail][14] = hex\\\"822bcdd4ca7ba182006400b4c904c954c9a4c9f402502a02f03403903e043047404c405140558000\\\";\\n        PartData[Part.Tail][15] = hex\\\"822bccd7b1fb6183400a82a11c2aa19c35221c2ca2a832328323b4043404c05405b06306a072078200\\\";\\n\\n        PartData[Part.ColorContainer][0] = hex\\\"842bdadbdcdd1d4db2842012e0000901201b02400000\\\";\\n        PartData[Part.ColorContainer][1] = hex\\\"842bdadbdcdd048fb28218000b0804800a8019003c0083e0924901249201b6db024924104a24904a180000\\\";\\n        PartData[Part.ColorContainer][2] = hex\\\"842bdcdddadb0c51b2031005180013100d003a011004a014a86db0c54492071e0924901249212542490a460000\\\";\\n        PartData[Part.ColorContainer][3] = hex\\\"842bdadbdcdd044fb2830802800680112800006400f0022004a00a40170030f82492404924806db6c092490512800000\\\";\\n        PartData[Part.ColorContainer][4] = hex\\\"842bdadbdcdd0d4fb28210040803d012090124900db6c3a412412884168000\\\";\\n        PartData[Part.ColorContainer][5] = hex\\\"842bdbdcdadd0d11b206201460b08a825b0c7824b6c04949052a1290646141d880\\\";\\n        PartData[Part.ColorContainer][6] = hex\\\"842bdbdcdadd0d4fb1050008412d60e81296d80de0250520910a760b2000\\\";\\n        PartData[Part.ColorContainer][7] = hex\\\"842bdcdddadb0351b282018a81900197900001c801d80210022002500270029802b802d9836db0c8612490364412492404924907f3000000\\\";\\n        PartData[Part.ColorContainer][8] = hex\\\"842bdadcdbdd04cfb181a000008e092db046825b06982c23202a6140c684a40e384949041a000000\\\";\\n        PartData[Part.ColorContainer][9] = hex\\\"842bdadcdbdd0d8db28230001ae096c025b0129004a40f8c0000\\\";\\n        PartData[Part.ColorContainer][10] = hex\\\"842bdbdcdadd0d4fb28420010405b075012db00912009290484094160800\\\";\\n\\n        SkinData[0] = [179,136];\\n        SkinData[1] = [215,172];\\n        SkinData[2] = [214,171];\\n        SkinData[3] = [210,168];\\n        SkinData[4] = [207,164];\\n        SkinData[5] = [204,162];\\n        SkinData[6] = [198,157];\\n        SkinData[7] = [172,129];\\n        SkinData[8] = [171,128];\\n        SkinData[9] = [177,134];\\n        SkinData[10] = [173,130];\\n        SkinData[11] = [137,94];\\n        SkinData[12] = [136,93];\\n        SkinData[13] = [209,166];\\n        SkinData[14] = [203,160];\\n        SkinData[15] = [196,153];\\n        SkinData[16] = [65,22];\\n        SkinData[17] = [135,92];\\n        SkinData[18] = [178,135];\\n        SkinData[19] = [208,165];\\n\\n\\t}\\n\\n\\t\\n\\t\\n\\tfunction getImageCompressData(uint8[4] memory _colorList, spriteBody memory _sp) view internal returns( bytes memory imageBytes) {\\n        uint8[2] memory skin;\\n        bytes[7] memory imageData;\\n       \\n        skin = SkinData[_sp.skinColorIndex];\\n        \\n        imageBytes = abi.encodePacked(_colorList[0],_colorList[1],_colorList[2],_colorList[3],skin[0],skin[1]);\\n        \\n\\t\\timageData[0] = PartFaceData;\\n        imageData[1] = PartData[Part.Trunk][_sp.trunkIndex];\\n\\t\\timageData[2] = PartData[Part.Mouth][_sp.mouthIndex];\\n        imageData[3] = PartData[Part.Head][_sp.headIndex];\\n\\t\\timageData[4] = PartData[Part.Eye][_sp.eyeIndex];\\n\\t\\timageData[5] = PartData[Part.Tail][_sp.tailIndex];\\n\\t\\timageData[6] = PartData[Part.ColorContainer][_sp.colorContainerIndex];\\n\\t\\t\\n\\t\\tfor(uint i=0;i<7;i++){\\n\\t\\t    uint32 imageLen = uint32(imageData[i].length);\\n\\t\\t    imageBytes = abi.encodePacked(imageBytes,imageLen,imageData[i]);\\n\\t\\t}\\n\\t}\\n}\\n\\n \"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_spriteID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expirationTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endPrice\",\"type\":\"uint256\"}],\"name\":\"AddOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_spriteID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"BuySprite\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_spriteID\",\"type\":\"uint256\"}],\"name\":\"CancelOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ChangeStatusContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"OfferList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isForSale\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"auctionType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expirationTime\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OwnerEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SpriteList\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"status\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"statusExpTime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addBlockNum\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"speed\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"capacity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"space\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"color_1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"color_2\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"color_3\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"color_4\",\"type\":\"uint8\"}],\"internalType\":\"struct spriteAttribute\",\"name\":\"attribute\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"trunkIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mouthIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"headIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eyeIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tailIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"colorContainerIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skinColorIndex\",\"type\":\"uint8\"}],\"internalType\":\"struct spriteBody\",\"name\":\"body\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_spriteID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"buySprite\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_spriteID\",\"type\":\"uint256\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_spriteID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newStatus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expTime\",\"type\":\"uint256\"}],\"name\":\"changeSpriteStatusExt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_spriteID\",\"type\":\"uint256\"}],\"name\":\"getAuctionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManageOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_spriteID\",\"type\":\"uint256\"}],\"name\":\"getSpriteAttribute\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"speed\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"capacity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"space\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"color_1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"color_2\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"color_3\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"color_4\",\"type\":\"uint8\"}],\"internalType\":\"struct spriteAttribute\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_spriteID\",\"type\":\"uint256\"}],\"name\":\"getSpriteBody\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"trunkIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mouthIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"headIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eyeIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tailIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"colorContainerIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skinColorIndex\",\"type\":\"uint8\"}],\"internalType\":\"struct spriteBody\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_spriteID\",\"type\":\"uint256\"}],\"name\":\"getSpriteImage\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_spriteID\",\"type\":\"uint256\"}],\"name\":\"getSpriteStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_spriteID\",\"type\":\"uint256\"}],\"name\":\"getSpriteStatusAndOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_spriteID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDay\",\"type\":\"uint256\"}],\"name\":\"sellWithEndPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_spriteID\",\"type\":\"uint256\"}],\"name\":\"sellWithFixPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAuthorized\",\"type\":\"bool\"}],\"name\":\"setChangeStatusContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userWithdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"pixelSprite","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://636b934f84960d35b14e682dc864505428ef8b6b207bd88eb4bba1e244aac2c5"}]}