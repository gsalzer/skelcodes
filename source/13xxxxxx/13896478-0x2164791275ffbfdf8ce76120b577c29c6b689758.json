{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/CollectABallRoyaltiesDistribution.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\n\\ncontract CollectABallRoyaltiesDistribution {\\n\\n    address private constant ARTIST_WALLET = 0x113Aed406B5f22190726F9C8B51d50e74569A98D;\\n    address private constant DEV_WALLET = 0x291f158F42794Db959867528403cdb382DbECfA3;\\n    address private constant FOUNDER_WALLET = 0xd04a78A2cF122e7bC7F96Bf90FB984000436CFCd;\\n\\n    receive() external payable {\\n        withdrawAll();\\n    }\\n\\n    function contractBalance() private view returns(uint256) {\\n        return address(this).balance;\\n    }\\n        \\n    function withdrawAll() private {\\n        uint256 balance = contractBalance();\\n        require(balance > 0, \\\"The balance is 0\\\");\\n        _withdraw(DEV_WALLET, (balance * 10)/100);\\n        _withdraw(ARTIST_WALLET, (balance * 10)/100);\\n        _withdraw(FOUNDER_WALLET, contractBalance());\\n    }\\n\\n    function _withdraw(address _address, uint256 _amount) private {\\n        (bool success, ) = _address.call { value: _amount}(\\\"\\\");\\n        require(success, \\\"failed with withdraw\\\");\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CollectABallRoyaltiesDistribution","CompilerVersion":"v0.8.11+commit.d7f03943","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}