{"status":"1","message":"OK","result":[{"SourceCode":"{\"AccountFrozenBalances.sol\":{\"content\":\"pragma solidity ^0.5.11;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\ncontract AccountFrozenBalances {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping (address =\\u003e uint256) private frozen_balances;\\r\\n\\r\\n    function _frozen_add(address _account, uint256 _amount) internal returns (bool) {\\r\\n        frozen_balances[_account] = frozen_balances[_account].add(_amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _frozen_sub(address _account, uint256 _amount) internal returns (bool) {\\r\\n        frozen_balances[_account] = frozen_balances[_account].sub(_amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _frozen_balanceOf(address _account) internal view returns (uint256) {\\r\\n        return frozen_balances[_account];\\r\\n    }\\r\\n}\"},\"Burnable.sol\":{\"content\":\"pragma solidity ^0.5.11;\\r\\n\\r\\ncontract Burnable {\\r\\n    bool private _burnallow;\\r\\n    address private _burner;\\r\\n    address public pendingBurner;\\r\\n\\r\\n    modifier whenBurn() {\\r\\n        require(_burnallow, \\\"burnable: can\\u0027t burn\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyBurner() {\\r\\n        require(msg.sender == _burner, \\\"caller is not a burner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPendingBurner() {\\r\\n        require(msg.sender == pendingBurner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event BurnerTransferred(address indexed previousBurner, address indexed newBurner);\\r\\n\\r\\n    constructor () internal {\\r\\n        _burnallow = true;\\r\\n        _burner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function burnallow() public view returns (bool) {\\r\\n        return _burnallow;\\r\\n    }\\r\\n\\r\\n    function burner() public view returns (address) {\\r\\n        return _burner;\\r\\n    }\\r\\n\\r\\n    function burnTrigger() public onlyBurner {\\r\\n        _burnallow = !_burnallow;\\r\\n    }\\r\\n\\r\\n    function transferWhitelistAdmin(address newBurner) public onlyBurner {\\r\\n        pendingBurner = newBurner;\\r\\n    }\\r\\n\\r\\n    function claimBurner() public onlyPendingBurner {\\r\\n        emit BurnerTransferred(_burner, pendingBurner);\\r\\n        _burner = pendingBurner;\\r\\n        pendingBurner = address(0);\\r\\n    }\\r\\n}\"},\"DSGToken.sol\":{\"content\":\"pragma solidity ^0.5.11;\\r\\n\\r\\nimport \\u0027./AccountFrozenBalances.sol\\u0027;\\r\\nimport \\u0027./Ownable.sol\\u0027;\\r\\nimport \\u0027./Mintable.sol\\u0027;\\r\\nimport \\\"./Rules.sol\\\";\\r\\nimport \\\"./TokenRecipient.sol\\\";\\r\\nimport \\\"./IERC20Token.sol\\\";\\r\\n\\r\\ncontract DSGToken is AccountFrozenBalances, Ownable, Mintable {\\r\\n    using SafeMath for uint256;\\r\\n    using Rules for Rules.Rule;\\r\\n\\r\\n    uint256 constant public maxCallFrequency = 100;\\r\\n\\r\\n    string public name;\\r\\n    string public symbol;\\r\\n    uint8 public decimals;\\r\\n    uint256 public totalSupplyLimit;\\r\\n\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    enum RoleType { Invalid, FUNDER, TEAM, ADVISORS, PARTNERSHIP, COMMUNITY, SEED, PRIVATE, AIRDROP}\\r\\n\\r\\n    struct FreezeData {\\r\\n        bool initialzed;\\r\\n        uint256 frozenAmount;       // fronzen amount\\r\\n        uint256 startBlock;         // freeze block for start.\\r\\n        uint256 lastFreezeBlock;\\r\\n    }\\r\\n\\r\\n    mapping (address =\\u003e RoleType) private _roles;\\r\\n    mapping (uint256 =\\u003e Rules.Rule) private _rules;\\r\\n    mapping (address =\\u003e FreezeData) private _freeze_datas;\\r\\n    uint256 public monthIntervalBlock = 172800;    // 172800 (30d*24h*60m*60s/15s)\\r\\n    uint256 public yearIntervalBlock = 2102400;    // 2102400 (365d*24h*60m*60s/15s)\\r\\n    uint256 public sixMonthIntervalBlock = 1036800; // six month block: 1036800 (6m*30d*24h*60m*60s/15s)\\r\\n\\r\\n    bool public seedPause = true;\\r\\n    uint256 public seedMeltStartBlock = 0;       \\r\\n\\r\\n    bool public ruleReady;\\r\\n\\r\\n    // upgrade part\\r\\n    uint256 private _totalUpgraded;    \\r\\n\\r\\n    modifier onlyReady(){\\r\\n        require(ruleReady, \\\"ruleReady is false\\\");\\r\\n        _;\\r\\n    }            \\r\\n\\r\\n    modifier canClaim() {\\r\\n        require(uint256(_roles[msg.sender]) != uint256(RoleType.Invalid), \\\"Invalid user role\\\");\\r\\n        require(_freeze_datas[msg.sender].initialzed);\\r\\n        if(_roles[msg.sender] == RoleType.SEED){\\r\\n            require(!seedPause, \\\"Seed is not time to unlock yet\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier canMint(uint256 _amount) {\\r\\n        require((_totalSupply + _amount) \\u003c= totalSupplyLimit, \\\"Mint: Exceed the maximum circulation\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier roleCanMint(uint256 _role, uint256 _amount) {\\r\\n        require(_rules[_role].initRule, \\\"role not exists or not initialzed\\\");\\r\\n        // for airdrop, use community amount.\\r\\n        if(_role == uint256(RoleType.AIRDROP)) {\\r\\n            _role = uint256(RoleType.COMMUNITY);\\r\\n        }\\r\\n        require(_amount \\u003c= _rules[_role].remainAmount, \\\"RoleMint: Exceed the maximum circulation\\\");\\r\\n        _;\\r\\n        _rules[_role].remainAmount = _rules[_role].remainAmount.sub(_amount);\\r\\n    }\\r\\n\\r\\n    modifier canBatchMint(uint256[] memory _amounts) {\\r\\n        uint256 mintAmount = 0;\\r\\n        for (uint256 i = 0; i \\u003c _amounts.length; i++) {\\r\\n            mintAmount = mintAmount.add(_amounts[i]);\\r\\n        }\\r\\n        require((_totalSupply + mintAmount) \\u003c= totalSupplyLimit, \\\"BatchMint: Exceed the maximum circulation\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier roleCanBatchMint(uint256 _role, uint256[] memory _amounts) {\\r\\n        if(_role == uint256(RoleType.AIRDROP)) {\\r\\n            _role = uint256(RoleType.COMMUNITY);\\r\\n        }\\r\\n        uint256 mintAmount = 0;\\r\\n        for (uint256 i = 0; i \\u003c _amounts.length; i++) {\\r\\n            mintAmount = mintAmount.add(_amounts[i]);\\r\\n        }\\r\\n        require(mintAmount \\u003c= _rules[_role].remainAmount, \\\"RoleBatchMint: Exceed the maximum circulation\\\");\\r\\n        _;\\r\\n        _rules[_role].remainAmount = _rules[_role].remainAmount.sub(mintAmount);\\r\\n    }\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    event Freeze(address indexed from, uint256 amount);\\r\\n    event Melt(address indexed from, uint256 amount);\\r\\n    event MintFrozen(address indexed to, uint256 amount);\\r\\n    event Claim(address indexed from, uint256 amount);\\r\\n\\r\\n    event Withdrawal(address indexed src, uint wad);\\r\\n    event FrozenTransfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    // \\r\\n    event Upgrade(address indexed from, uint256 _value);\\r\\n\\r\\n    constructor (string memory _name, string memory _symbol) public {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n        decimals = 18;\\r\\n        totalSupplyLimit = 1024 * 1024 * 1024 * 10 ** uint256(decimals);\\r\\n        //_readyRule();\\r\\n    }\\r\\n\\r\\n    function readyRule() onlyMinter public {\\r\\n        require(!ruleReady, \\\"only init once\\\");\\r\\n        ruleReady = true;\\r\\n        // Set a maximum amount for each role.\\r\\n        // Unlocked annually or monthly, the proportion of unlocked monthly or yearly.\\r\\n        _rules[uint256(RoleType.FUNDER)].setRule(yearIntervalBlock, 10, 7546257537 * 10 ** (uint256(decimals)-2));   // 107803679.1 * 70%\\r\\n        _rules[uint256(RoleType.TEAM)].setRule(monthIntervalBlock, 2, 560858304356 * 10 ** (uint256(decimals)-4));      // 57230439.22 * 98%\\r\\n        _rules[uint256(RoleType.ADVISORS)].setRule(monthIntervalBlock, 2, 13153337344 * 10 ** (uint256(decimals)-3)); // 13421772.8 * 98%\\r\\n        _rules[uint256(RoleType.PARTNERSHIP)].setRule(monthIntervalBlock, 20, 4563402752 * 10 ** (uint256(decimals)-2)); // 45634027.52 (sixmonth after ido) \\r\\n        _rules[uint256(RoleType.COMMUNITY)].setRule(monthIntervalBlock, 20, 3489660928*10**(uint256(decimals)-2)); // 34896609.28 (sixmonth after ido) \\r\\n        _rules[uint256(RoleType.SEED)].setRule(monthIntervalBlock, 10, 3575560274*10** (uint256(decimals)-2));   // 35755602.74\\r\\n        _rules[uint256(RoleType.PRIVATE)].setRule(monthIntervalBlock, 10, 536870912*10**(uint256(decimals)-1)); // 53687091.2\\r\\n    }\\r\\n\\r\\n    function roleType(address account) public view returns (uint256) {\\r\\n        return uint256(_roles[account]);\\r\\n    }\\r\\n\\r\\n    function startBlock(address account) public view returns (uint256) {\\r\\n        return _freeze_datas[account].startBlock;\\r\\n    }\\r\\n\\r\\n    function lastestFreezeBlock(address account) public view returns (uint256) {\\r\\n        return _freeze_datas[account].lastFreezeBlock;\\r\\n    }\\r\\n\\r\\n    function queryFreezeAmount(address account) public view returns(uint256) {\\r\\n        uint256 lastFreezeBlock = _freeze_datas[account].lastFreezeBlock;\\r\\n        uint256 startFreezeBlock = _freeze_datas[account].startBlock;\\r\\n        if(uint256(_roles[account]) == uint256(RoleType.SEED) || uint256(_roles[account]) == uint256(RoleType.PRIVATE)) {\\r\\n            if(seedPause){\\r\\n                return 0;\\r\\n            }\\r\\n            if(seedMeltStartBlock != 0 \\u0026\\u0026 seedMeltStartBlock \\u003e lastFreezeBlock) {\\r\\n                lastFreezeBlock = seedMeltStartBlock;\\r\\n            }\\r\\n            startFreezeBlock = seedMeltStartBlock;\\r\\n        }\\r\\n        if(_roles[account] == RoleType.Invalid){\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 amount = _rules[uint256(_roles[account])].freezeAmount(_freeze_datas[account].frozenAmount , startFreezeBlock, lastFreezeBlock, block.number);\\r\\n        uint256 balance = _frozen_balanceOf(account);\\r\\n        if(amount \\u003e balance) {\\r\\n            amount = balance;\\r\\n        }\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return totalSupplyLimit;\\r\\n    }\\r\\n\\r\\n    function currentTotalSupply() public view returns(uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view returns (uint256) {\\r\\n        return _balances[account].add(_frozen_balanceOf(account));\\r\\n    }\\r\\n\\r\\n    function roleRemainAmount(uint256 _role) public view returns(uint256) {\\r\\n        return _rules[_role].remainAmount;\\r\\n    }\\r\\n\\r\\n    function frozenBalanceOf(address account) public view returns (uint256) {\\r\\n        return _frozen_balanceOf(account);\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\r\\n        require(recipient != address(this), \\\"can\\u0027t transfer tokens to the contract address\\\");\\r\\n\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferBatch(address[] memory recipients, uint256[] memory amounts) public returns (bool) {\\r\\n        require(recipients.length \\u003e 0, \\\"transferBatch: recipient should be to at least one address\\\");\\r\\n        require(recipients.length == amounts.length, \\\"transferBatch: recipients and amounts must be equal\\\");\\r\\n        for (uint256 i = 0; i \\u003c recipients.length; i++) {\\r\\n            _transfer(msg.sender, recipients[i], amounts[i]);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address _owner, address spender) public view returns (uint256) {\\r\\n        return _allowances[_owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 value) public returns (bool) {\\r\\n        _approve(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /* Approve and then communicate the approved contract in a single tx */\\r\\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool) {\\r\\n        TokenRecipient spender = TokenRecipient(_spender);\\r\\n        if (approve(_spender, _value)) {\\r\\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\r\\n        require(recipient != address(this), \\\"can\\u0027t transfer tokens to the contract address\\\");\\r\\n\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrozenToken(address to, uint256 amount) public returns (bool) {\\r\\n        _transferFrozen(msg.sender, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferBatchFrozenTokens(address[] calldata accounts, uint256[] calldata amounts) external returns (bool) {\\r\\n        require(accounts.length \\u003e 0, \\\"transferBatchFrozenTokens: transfer should be to at least one address\\\");\\r\\n        require(accounts.length == amounts.length, \\\"transferBatchFrozenTokens: recipients.length != amounts.length\\\");\\r\\n        for (uint256 i = 0; i \\u003c accounts.length; i++) {\\r\\n            _transferFrozen(msg.sender, accounts[i], amounts[i]);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function meltTokens(address account, uint256 amount) public onlyMinter returns (bool) {\\r\\n        _melt(account, amount);\\r\\n        emit Transfer(address(this), account, amount);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function meltBatchTokens(address[] calldata accounts, uint256[] calldata amounts) external onlyMinter returns (bool) {\\r\\n        require(accounts.length \\u003e 0, \\\"meltBatchTokens: transfer should be to at least one address\\\");\\r\\n        require(accounts.length == amounts.length, \\\"meltBatchTokens: accounts.length != amounts.length\\\");\\r\\n        for (uint256 i = 0; i \\u003c accounts.length; i++) {\\r\\n            _melt(accounts[i], amounts[i]);\\r\\n            emit Transfer(address(this), accounts[i], amounts[i]);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function mint(address account, uint256 amount) public onlyMinter canMint(amount) returns (bool) {\\r\\n        _mint(account, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function burn(uint256 amount) public {\\r\\n        _burn(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function burnFrom(address account, uint256 amount) public {\\r\\n        _burnFrom(account, amount);\\r\\n    }\\r\\n\\r\\n    function mintBatchToken(address[] calldata accounts, uint256[] calldata amounts) external onlyMinter canBatchMint(amounts) returns (bool) {\\r\\n        require(accounts.length \\u003e 0, \\\"mintBatchToken: transfer should be to at least one address\\\");\\r\\n        require(accounts.length == amounts.length, \\\"mintBatchToken: recipients.length != amounts.length\\\");\\r\\n        for (uint256 i = 0; i \\u003c accounts.length; i++) {\\r\\n            _mint(accounts[i], amounts[i]);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function mintFrozenTokens(address account, uint256 amount) public onlyMinter canMint(amount) returns (bool) {\\r\\n        _mintfrozen(account, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function mintBatchFrozenTokens(address[] calldata accounts, uint256[] calldata amounts) external onlyMinter canBatchMint(amounts) returns (bool) {\\r\\n        require(accounts.length \\u003e 0, \\\"mintBatchFrozenTokens: transfer should be to at least one address\\\");\\r\\n        require(accounts.length == amounts.length, \\\"mintBatchFrozenTokens: recipients.length != amounts.length\\\");\\r\\n        for (uint256 i = 0; i \\u003c accounts.length; i++) {\\r\\n            _mintfrozen(accounts[i], amounts[i]);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function mintFrozenTokensForRole(address account, uint256 amount, RoleType _role) public onlyMinter onlyReady canMint(amount) roleCanMint(uint256(_role), amount) returns (bool) {\\r\\n        _mintFrozenTokensForRole(account, amount, _role);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function mintBatchFrozenTokensForRole(address[] memory accounts, uint256[] memory amounts, RoleType _role) public onlyMinter onlyReady canBatchMint(amounts)  roleCanBatchMint(uint256(_role), amounts) returns (bool) {\\r\\n        require(accounts.length \\u003e 0, \\\"transfer should be to at least one address\\\");\\r\\n        require(accounts.length == amounts.length, \\\"recipients.length != amounts.length\\\");\\r\\n        for (uint256 i = 0; i \\u003c accounts.length; i++) {\\r\\n            _mintFrozenTokensForRole(accounts[i], amounts[i], _role);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // @dev burn erc20 token and exchange mainnet token.\\r\\n    function upgrade(uint256 amount) public {\\r\\n        require(amount != 0, \\\"DSGT: upgradable amount should be more than 0\\\");\\r\\n        address holder = msg.sender;\\r\\n\\r\\n        // Burn tokens to be upgraded\\r\\n        _burn(holder, amount);\\r\\n\\r\\n        // Remember how many tokens we have upgraded\\r\\n        _totalUpgraded = _totalUpgraded.add(amount);\\r\\n\\r\\n        // Upgrade agent upgrades/reissues tokens\\r\\n        emit Upgrade(holder, amount);\\r\\n    }\\r\\n\\r\\n    function totalUpgraded() public view returns (uint256) {\\r\\n        return _totalUpgraded;\\r\\n    }\\r\\n\\r\\n    function withdraw(address _token, address payable _recipient) public onlyOwner {\\r\\n        if (_token == address(0x0)) {\\r\\n            require(_recipient != address(0x0));\\r\\n            // transfer eth\\r\\n            _recipient.transfer(address(this).balance);\\r\\n            emit Withdrawal(_recipient, address(this).balance);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        IERC20Token token = IERC20Token(_token);\\r\\n        uint balance = token.balanceOf(address(this));\\r\\n        // transfer token\\r\\n        token.transfer(_recipient, balance);\\r\\n        emit Withdrawal(_recipient, balance);\\r\\n    }\\r\\n\\r\\n    function isContract(address _addr) view internal returns (bool) {\\r\\n        if (_addr == address(0x0)) return false;\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(_addr)\\r\\n        }\\r\\n        return (size \\u003e 0);\\r\\n    }\\r\\n\\r\\n    function getBlockNumber() internal view returns (uint256) {\\r\\n        return block.number;\\r\\n    }\\r\\n\\r\\n    function claimTokens() public canClaim returns (bool) {\\r\\n        //Rules.Rule storage rule = _rules[uint256(_roles[msg.sender])];\\r\\n        uint256 lastFreezeBlock = _freeze_datas[msg.sender].lastFreezeBlock;\\r\\n        uint256 startFreezeBlock = _freeze_datas[msg.sender].startBlock;\\r\\n        if(uint256(_roles[msg.sender]) == uint256(RoleType.SEED) || uint256(_roles[msg.sender]) == uint256(RoleType.PRIVATE) ) {\\r\\n            require(!seedPause, \\\"seed pause is true, can\\u0027t to claim\\\");\\r\\n            if(seedMeltStartBlock != 0 \\u0026\\u0026 seedMeltStartBlock \\u003e lastFreezeBlock) {\\r\\n                lastFreezeBlock = seedMeltStartBlock;\\r\\n            }\\r\\n            startFreezeBlock = seedMeltStartBlock;\\r\\n        }\\r\\n        uint256 amount = _rules[uint256(_roles[msg.sender])].freezeAmount(_freeze_datas[msg.sender].frozenAmount, startFreezeBlock, lastFreezeBlock, block.number);\\r\\n        require(amount \\u003e 0, \\\"Melt amount must be greater than 0\\\");\\r\\n        // border amount\\r\\n        if(amount \\u003e _frozen_balanceOf(msg.sender)) {\\r\\n            amount = _frozen_balanceOf(msg.sender);\\r\\n        }\\r\\n        _melt(msg.sender, amount); \\r\\n\\r\\n        _freeze_datas[msg.sender].lastFreezeBlock = block.number;\\r\\n\\r\\n        emit Claim(msg.sender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function startSeedPause() onlyOwner public {\\r\\n        seedPause = false;\\r\\n        seedMeltStartBlock = block.number;\\r\\n    }\\r\\n\\r\\n    function _mintFrozenTokensForRole(address account, uint256 amount, RoleType _role) internal returns (bool) {\\r\\n        require(!_freeze_datas[account].initialzed, \\\"specified account already initialzed\\\");\\r\\n        // set role type\\r\\n        _roles[account] = _role;\\r\\n        uint256 startBn = block.number;\\r\\n        if(_role == RoleType.PARTNERSHIP || _role == RoleType.COMMUNITY){\\r\\n            startBn = startBn + sixMonthIntervalBlock;\\r\\n        }\\r\\n        _freeze_datas[account] = FreezeData(true, amount, startBn, startBn);\\r\\n        _mintfrozen(account, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amount);\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function _transferFrozen(address sender, address to, uint256 amount) internal {\\r\\n        require(to != address(0), \\\"ERC20-Frozen: transfer from the zero address\\\");\\r\\n        require(amount != 0, \\\"ERC20-Frozen: transfer amount is zero\\\");\\r\\n        require(uint256(_roles[sender]) == uint256(RoleType.COMMUNITY), \\\"ERC20-Frozen: msg.sender is not belong to community\\\");\\r\\n        require(_frozen_balanceOf(sender) \\u003e= amount, \\\"frozen amount should greater than amount\\\");\\r\\n        _frozen_sub(sender, amount);\\r\\n        _frozen_add(to, amount);\\r\\n\\r\\n        emit FrozenTransfer(msg.sender, to, amount);\\r\\n        emit Transfer(msg.sender, to, amount);\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n        require(account != address(this), \\\"ERC20: mint to the contract address\\\");\\r\\n        require(amount \\u003e 0, \\\"ERC20: mint amount should be \\u003e 0\\\");\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(this), account, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 value) internal {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _totalSupply = _totalSupply.sub(value);\\r\\n        _balances[account] = _balances[account].sub(value);\\r\\n        emit Transfer(account, address(this), value);\\r\\n    }\\r\\n\\r\\n    function _approve(address _owner, address spender, uint256 value) internal {\\r\\n        require(_owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[_owner][spender] = value;\\r\\n        emit Approval(_owner, spender, value);\\r\\n    }\\r\\n\\r\\n    function _burnFrom(address account, uint256 amount) internal {\\r\\n        _burn(account, amount);\\r\\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\\r\\n    }\\r\\n\\r\\n    function _freeze(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ERC20: freeze from the zero address\\\");\\r\\n        require(amount \\u003e 0, \\\"ERC20: freeze from the address: amount should be \\u003e 0\\\");\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount);\\r\\n        _frozen_add(account, amount);\\r\\n\\r\\n        emit Freeze(account, amount);\\r\\n    }\\r\\n\\r\\n    function _mintfrozen(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ERC20: mint frozen to the zero address\\\");\\r\\n        require(account != address(this), \\\"ERC20: mint frozen to the contract address\\\");\\r\\n        require(amount \\u003e 0, \\\"ERC20: mint frozen amount should be \\u003e 0\\\");\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n\\r\\n        emit Transfer(address(this), account, amount);\\r\\n\\r\\n        _frozen_add(account, amount);\\r\\n\\r\\n        emit MintFrozen(account, amount);\\r\\n    }\\r\\n\\r\\n    function _melt(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ERC20: melt from the zero address\\\");\\r\\n        require(amount \\u003e 0, \\\"ERC20: melt from the address: value should be \\u003e 0\\\");\\r\\n        require(_frozen_balanceOf(account) \\u003e= amount, \\\"ERC20: melt from the address: balance \\u003c amount\\\");\\r\\n\\r\\n        _frozen_sub(account, amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n\\r\\n        emit Melt(account, amount);\\r\\n    }\\r\\n\\r\\n    function _burnFrozen(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ERC20: frozen burn from the zero address\\\");\\r\\n\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        _frozen_sub(account, amount);\\r\\n\\r\\n        emit Transfer(account, address(this), amount);\\r\\n    }\\r\\n}\"},\"IERC20Token.sol\":{\"content\":\"pragma solidity ^0.5.11;\\r\\n\\r\\ncontract IERC20Token {\\r\\n\\r\\n\\r\\n    /// @param _owner The address from which the balance will be retrieved\\r\\n    /// @return The balance\\r\\n    function balanceOf(address _owner) public view returns (uint256 balance);\\r\\n\\r\\n    /// @notice send `_value` token to `_to` from `msg.sender`\\r\\n    /// @param _to The address of the recipient\\r\\n    /// @param _value The amount of token to be transferred\\r\\n    /// @return Whether the transfer was successful or not\\r\\n    function transfer(address _to, uint256 _value) public returns (bool success);\\r\\n\\r\\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\\r\\n    /// @param _from The address of the sender\\r\\n    /// @param _to The address of the recipient\\r\\n    /// @param _value The amount of token to be transferred\\r\\n    /// @return Whether the transfer was successful or not\\r\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\\r\\n\\r\\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\\r\\n    /// @param _spender The address of the account able to transfer the tokens\\r\\n    /// @param _value The amount of tokens to be approved for transfer\\r\\n    /// @return Whether the approval was successful or not\\r\\n    function approve(address _spender, uint256 _value) public returns (bool success);\\r\\n\\r\\n    /// @param _owner The address of the account owning tokens\\r\\n    /// @param _spender The address of the account able to transfer the tokens\\r\\n    /// @return Amount of remaining tokens allowed to spent\\r\\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\\r\\n}\"},\"Meltable.sol\":{\"content\":\"pragma solidity ^0.5.11;\\r\\n\\r\\n\\r\\ncontract Meltable {\\r\\n    mapping (address =\\u003e bool) private _melters;\\r\\n    address private _melteradmin;\\r\\n    address public pendingMelterAdmin;\\r\\n\\r\\n    modifier onlyMelterAdmin() {\\r\\n        require (msg.sender == _melteradmin, \\\"caller not a melter admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyMelter() {\\r\\n        require (_melters[msg.sender] == true, \\\"can\\u0027t perform melt\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPendingMelterAdmin() {\\r\\n        require(msg.sender == pendingMelterAdmin);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event MelterTransferred(address indexed previousMelter, address indexed newMelter);\\r\\n\\r\\n    constructor () internal {\\r\\n        _melteradmin = msg.sender;\\r\\n        _melters[msg.sender] = true;\\r\\n    }\\r\\n\\r\\n    function melteradmin() public view returns (address) {\\r\\n        return _melteradmin;\\r\\n    }\\r\\n\\r\\n    function addToMelters(address account) public onlyMelterAdmin {\\r\\n        _melters[account] = true;\\r\\n    }\\r\\n\\r\\n    function removeFromMelters(address account) public onlyMelterAdmin {\\r\\n        _melters[account] = false;\\r\\n    }\\r\\n\\r\\n    function transferMelterAdmin(address newMelter) public onlyMelterAdmin {\\r\\n        pendingMelterAdmin = newMelter;\\r\\n    }\\r\\n\\r\\n    function claimMelterAdmin() public onlyPendingMelterAdmin {\\r\\n        emit MelterTransferred(_melteradmin, pendingMelterAdmin);\\r\\n        _melteradmin = pendingMelterAdmin;\\r\\n        pendingMelterAdmin = address(0);\\r\\n    }\\r\\n}\"},\"Mintable.sol\":{\"content\":\"pragma solidity ^0.5.11;\\r\\n\\r\\ncontract Mintable {\\r\\n    mapping (address =\\u003e bool) private _minters;\\r\\n    address private _minteradmin;\\r\\n    address public pendingMinterAdmin;\\r\\n\\r\\n\\r\\n    modifier onlyMinterAdmin() {\\r\\n        require (msg.sender == _minteradmin, \\\"caller not a minter admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyMinter() {\\r\\n        require (_minters[msg.sender] == true, \\\"can\\u0027t perform mint\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPendingMinterAdmin() {\\r\\n        require(msg.sender == pendingMinterAdmin);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event MinterTransferred(address indexed previousMinter, address indexed newMinter);\\r\\n\\r\\n    constructor () internal {\\r\\n        _minteradmin = msg.sender;\\r\\n        _minters[msg.sender] = true;\\r\\n    }\\r\\n\\r\\n    function minteradmin() public view returns (address) {\\r\\n        return _minteradmin;\\r\\n    }\\r\\n\\r\\n    function addToMinters(address account) public onlyMinterAdmin {\\r\\n        _minters[account] = true;\\r\\n    }\\r\\n\\r\\n    function removeFromMinters(address account) public onlyMinterAdmin {\\r\\n        _minters[account] = false;\\r\\n    }\\r\\n\\r\\n    function transferMinterAdmin(address newMinter) public onlyMinterAdmin {\\r\\n        pendingMinterAdmin = newMinter;\\r\\n    }\\r\\n\\r\\n    function claimMinterAdmin() public onlyPendingMinterAdmin {\\r\\n        emit MinterTransferred(_minteradmin, pendingMinterAdmin);\\r\\n        _minteradmin = pendingMinterAdmin;\\r\\n        pendingMinterAdmin = address(0);\\r\\n    }\\r\\n}\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.5.11;\\r\\n\\r\\ncontract Ownable {\\r\\n    address private _owner;\\r\\n    address public pendingOwner;\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == _owner, \\\"caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPendingOwner() {\\r\\n        require(msg.sender == pendingOwner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor () internal {\\r\\n        _owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        pendingOwner = newOwner;\\r\\n    }\\r\\n\\r\\n    function claimOwnership() public onlyPendingOwner {\\r\\n        emit OwnershipTransferred(_owner, pendingOwner);\\r\\n        _owner = pendingOwner;\\r\\n        pendingOwner = address(0);\\r\\n    }\\r\\n}\"},\"Roles.sol\":{\"content\":\"pragma solidity ^0.5.11;\\r\\n\\r\\nlibrary Roles {\\r\\n    struct Role {\\r\\n        mapping (address =\\u003e bool) bearer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev give an account access to this role\\r\\n     */\\r\\n    function add(Role storage role, address account) internal {\\r\\n        require(account != address(0));\\r\\n        require(!has(role, account));\\r\\n\\r\\n        role.bearer[account] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev remove an account\\u0027s access to this role\\r\\n     */\\r\\n    function remove(Role storage role, address account) internal {\\r\\n        require(account != address(0));\\r\\n        require(has(role, account));\\r\\n\\r\\n        role.bearer[account] = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev check if an account has this role\\r\\n     * @return bool\\r\\n     */\\r\\n    function has(Role storage role, address account) internal view returns (bool) {\\r\\n        require(account != address(0));\\r\\n        return role.bearer[account];\\r\\n    }\\r\\n}\"},\"Rules.sol\":{\"content\":\"pragma solidity ^0.5.11;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\nlibrary Rules {\\r\\n    \\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct Rule {               \\r\\n        uint256 intervalFreezeBlock;        \\r\\n        uint256 percent;                   \\r\\n        bool    initRule;     \\r\\n        uint256 maxAmount;\\r\\n        uint256 remainAmount;              \\r\\n    }\\r\\n\\r\\n    function setRule(Rule storage rule, uint256 _intervalFreezeBlock, uint256 _percent, uint256 _maxAmount) internal {\\r\\n        require(_intervalFreezeBlock \\u003e 0);\\r\\n        require(_percent \\u003e 0);\\r\\n        rule.intervalFreezeBlock = _intervalFreezeBlock;\\r\\n        rule.percent = _percent;\\r\\n        rule.initRule = true;\\r\\n        rule.maxAmount = _maxAmount;\\r\\n        rule.remainAmount = _maxAmount;\\r\\n    }\\r\\n\\r\\n    function freezeAmount(Rule storage rule, uint256 baseAmount, uint256 startFrozenBlock, uint256 lastFreezeBlock, uint256 currentBlock) internal view returns(uint256) {\\r\\n        require(startFrozenBlock \\u003c= lastFreezeBlock, \\\"startFrozenBlockmust be greater than or equal to lastFreezeBlock\\\");\\r\\n        if(currentBlock \\u003c lastFreezeBlock){\\r\\n            return 0;\\r\\n        }\\r\\n        require(currentBlock \\u003e= lastFreezeBlock);\\r\\n        require(baseAmount \\u003e 0, \\\"baseAmount cant not be 0\\\");\\r\\n        require(rule.percent \\u003e 0);\\r\\n        uint256 actualFactor =  currentBlock.sub(startFrozenBlock).div(rule.intervalFreezeBlock);\\r\\n        uint256 alreadyFactor = lastFreezeBlock.sub(startFrozenBlock).div(rule.intervalFreezeBlock);\\r\\n        require(actualFactor \\u003e= alreadyFactor, \\\"invalid factor\\\");\\r\\n        uint256 factor = actualFactor - alreadyFactor;\\r\\n        return baseAmount.mul(rule.percent).mul(factor).div(100);\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.11;\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"},\"TokenRecipient.sol\":{\"content\":\"pragma solidity ^0.5.11;\\r\\n\\r\\ncontract TokenRecipient {\\r\\n    function receiveApproval(address _from, uint256 _value, address _token, bytes memory _extraData) public;\\r\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FrozenTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Melt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousMinter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"MinterTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addToMinters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimMinterAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"frozenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lastestFreezeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCallFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"meltBatchTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"meltTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBatchFrozenTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"enum DSGToken.RoleType\",\"name\":\"_role\",\"type\":\"uint8\"}],\"name\":\"mintBatchFrozenTokensForRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBatchToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintFrozenTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum DSGToken.RoleType\",\"name\":\"_role\",\"type\":\"uint8\"}],\"name\":\"mintFrozenTokensForRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minteradmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monthIntervalBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingMinterAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"queryFreezeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"readyRule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromMinters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_role\",\"type\":\"uint256\"}],\"name\":\"roleRemainAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"roleType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ruleReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seedMeltStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seedPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sixMonthIntervalBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startSeedPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUpgraded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferBatchFrozenTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrozenToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"transferMinterAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yearIntervalBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DSGToken","CompilerVersion":"v0.5.14+commit.01f1aaa4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000104453656775726f73204e6574776f726b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034453470000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ad81312257efd7d3953a890f5dbab0e8c3cd9e8c20e5c927cbd0f6f9c06371d0"}]}