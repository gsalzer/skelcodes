{"status":"1","message":"OK","result":[{"SourceCode":"/** \r\n *  SourceUnit: c:\\Users\\Jad\\Documents\\code\\Cryptoware\\dcb-lottery\\blockend\\contracts\\DCBW721Alarm.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: c:\\Users\\Jad\\Documents\\code\\Cryptoware\\dcb-lottery\\blockend\\contracts\\DCBW721Alarm.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n////import \"../utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: c:\\Users\\Jad\\Documents\\code\\Cryptoware\\dcb-lottery\\blockend\\contracts\\DCBW721Alarm.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface KeeperCompatibleInterface {\r\n\r\n  /**\r\n   * @notice checks if the contract requires work to be done.\r\n   * @param checkData data passed to the contract when checking for upkeep.\r\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\r\n   * performUpkeep or not.\r\n   * @return performData bytes that the keeper should call performUpkeep with,\r\n   * if upkeep is needed.\r\n   */\r\n  function checkUpkeep(\r\n    bytes calldata checkData\r\n  )\r\n    external\r\n    returns (\r\n      bool upkeepNeeded,\r\n      bytes memory performData\r\n    );\r\n\r\n  /**\r\n   * @notice Performs work on the contract. Executed by the keepers, via the registry.\r\n   * @param performData is the data which was passed back from the checkData\r\n   * simulation.\r\n   */\r\n  function performUpkeep(\r\n    bytes calldata performData\r\n  ) external;\r\n}\r\n\r\n\r\n/** \r\n *  SourceUnit: c:\\Users\\Jad\\Documents\\code\\Cryptoware\\dcb-lottery\\blockend\\contracts\\DCBW721Alarm.sol\r\n*/\r\n\r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/// @notice Chain Link Keeper interface\r\n////import \"../node_modules/@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\";\r\n\r\n/// @notice Access Control\r\n////import \"../node_modules/@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n/// @notice draw contract interface\r\ninterface IDRAW {\r\n    function drawNumber() external returns (bool);\r\n}\r\n\r\n/**\r\n * @title DCBW721 Alarm\r\n * @notice ChainLink Keeper-compatible DCBW721 trigger contract\r\n * @author cryptoware.eth | DCB.world\r\n**/\r\ncontract DCBW721Alarm is\r\n    Ownable,\r\n    KeeperCompatibleInterface\r\n{\r\n    /// @notice Requested contract address\r\n    address private requested;\r\n\r\n    /// @notice alarm interval in seconds\r\n    uint256 private interval;\r\n\r\n    /// @notice last alarm timestamp\r\n    uint256 private lastTimeStamp;\r\n\r\n    /**\r\n     * @notice constructor\r\n     * @param _requested The ERC721 contract that should be requested on trigger\r\n     * @param _interval alarm interval in seconds\r\n    **/\r\n    constructor(\r\n        address _requested,\r\n        uint256 _interval\r\n    ) {\r\n        interval = _interval;\r\n        requested = _requested;\r\n        lastTimeStamp = block.timestamp; /* solium-disable-line */\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if the contract requires work to be done\r\n     * @return returns true whenever timestamp difference is greater than interval set\r\n    **/\r\n    function checkUpkeep(bytes calldata data) external override view returns (bool, bytes memory){\r\n        return (checkTimestampInterval(), data);\r\n    }\r\n\r\n    /**\r\n     * @notice performUpkeep should change state\r\n    **/\r\n    function performUpkeep(bytes calldata) external override{\r\n        require (checkTimestampInterval(), \"DCBW721 Alarm: Malicious Call Attempt\");\r\n        lastTimeStamp = block.timestamp; /* solium-disable-line */\r\n        bool success = IDRAW(payable(requested)).drawNumber();\r\n        require(success, \"DCBW721 Alarm: drawNumber failed\");\r\n    }\r\n\r\n    /**\r\n     * @notice checks timestamp difference against interval\r\n     */\r\n    function checkTimestampInterval() internal view returns (bool) {\r\n        return interval > 0 && (block.timestamp - lastTimeStamp) > interval; /* solium-disable-line */\r\n    }\r\n\r\n    /**\r\n     * @notice updates the automated DCBW721 contract address\r\n     * @param _requested address of the DCBW721 contract\r\n    **/\r\n    function setRequestedAddress(address _requested) external onlyOwner{\r\n        require(_requested != address(0), \"DCBW721 Alarm: Address cannot be 0\");\r\n        require(\r\n            requested != _requested,\r\n            \"DCBW721: requested address cannot be same as before\"\r\n        );\r\n        requested = _requested;\r\n    }\r\n\r\n    /**\r\n     * @notice updates the time interval between Draws\r\n     * @param _interval time for next Draw\r\n    **/\r\n    function updateInterval(uint256 _interval) external onlyOwner{\r\n        interval = _interval;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_requested\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_requested\",\"type\":\"address\"}],\"name\":\"setRequestedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"name\":\"updateInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DCBW721Alarm","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003cd49873bb803534dd3a9a48df49242bd6e630fe00000000000000000000000000000000000000000000000000000000000001f4","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cbb51317adfe77c4752e16c7325cb465d52de95e027b50b52c6614e773bec63b"}]}