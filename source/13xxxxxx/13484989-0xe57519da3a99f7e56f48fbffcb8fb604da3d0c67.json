{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n\r\n\r\n/**\r\n\r\n$$\\    $$\\   $$$$$$\\   $$$$$$$\\   $$\\        $$$$$$$$\\  $$\\   $$\\ \r\n$$ |   $$ | $$  __$$\\  $$  __$$\\  $$ |       $$  _____| $$ |  $$ |\r\n$$ |   $$ | $$ /  $$ | $$ |  $$ | $$ |       $$ |       \\$$\\ $$  |\r\n\\$$\\  $$  | $$ |  $$ | $$$$$$$  | $$ |       $$$$$\\      \\$$$$  / \r\n \\$$\\$$  /  $$ |  $$ | $$  __$$<  $$ |       $$  __|     $$  $$<  \r\n  \\$$$  /   $$ |  $$ | $$ |  $$ | $$ |       $$ |       $$  /\\$$\\ \r\n   \\$  /     $$$$$$  | $$ |  $$ | $$$$$$$$\\  $$$$$$$$\\  $$ /  $$ |\r\n    \\_/      \\______/  \\__|  \\__| \\________| \\________| \\__|  \\__|\r\n\r\n */\r\n                                                                 \r\n\r\n\r\n// https://vorlex.co Contract For Vorlex NFT Marketplace \r\n// Vorlex Contract written by Kaptain Ti \r\n// Vorlex Platform Owned by Franklin Ndekwe and Kaptain Ti(nee C.C. Thompson)\r\n\r\n/**\r\n * @title Counters\r\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\r\n}\r\n\r\n/**\r\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\r\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155MetadataURI is IERC1155 {\r\n    /**\r\n     * @dev Returns the URI for token type `id`.\r\n     *\r\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\r\n     * clients with the actual token type ID.\r\n     */\r\n    function uri(uint256 id) external view returns (string memory);\r\n}\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n    function grantRole(bytes32 role, address account) external;\r\n    function revokeRole(bytes32 role, address account) external;\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC1155Receiver).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping (address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping (bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override {\r\n        require(hasRole(getRoleAdmin(role), _msgSender()), \"AccessControl: sender must be an admin to grant\");\r\n\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override {\r\n        require(hasRole(getRoleAdmin(role), _msgSender()), \"AccessControl: sender must be an admin to revoke\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ncontract ERC1155Holder is ERC1155Receiver {\r\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @dev Implementation of the basic standard multi-token.\r\n * See https://eips.ethereum.org/EIPS/eip-1155\r\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\r\n *\r\n * _Available since v3.1._\r\n */\r\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\r\n\r\n    // Mapping from token ID to account balances\r\n    mapping (uint256 => mapping(address => uint256)) private _balances;\r\n\r\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\r\n    string private _uri;\r\n\r\n    /**\r\n     * @dev See {_setURI}.\r\n     */\r\n    constructor (string memory uri_) {\r\n        _setURI(uri_);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC1155).interfaceId\r\n            || interfaceId == type(IERC1155MetadataURI).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155MetadataURI-uri}.\r\n     *\r\n     * This implementation returns the same URI for *all* token types. It relies\r\n     * on the token type ID substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * Clients calling this function must replace the `\\{id\\}` substring with the\r\n     * actual token type ID.\r\n     */\r\n    function uri(uint256) public view virtual override returns (string memory) {\r\n        return _uri;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\r\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\r\n        return _balances[id][account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOfBatch}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(\r\n        address[] memory accounts,\r\n        uint256[] memory ids\r\n    )\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256[] memory)\r\n    {\r\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\r\n\r\n        uint256[] memory batchBalances = new uint256[](accounts.length);\r\n\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\r\n        }\r\n\r\n        return batchBalances;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    )\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n        _balances[id][from] = fromBalance - amount;\r\n        _balances[id][to] += amount;\r\n\r\n        emit TransferSingle(operator, from, to, id, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeBatchTransferFrom}.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    )\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; ++i) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 fromBalance = _balances[id][from];\r\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n            _balances[id][from] = fromBalance - amount;\r\n            _balances[id][to] += amount;\r\n        }\r\n\r\n        emit TransferBatch(operator, from, to, ids, amounts);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new URI for all token types, by relying on the token type ID\r\n     * substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\r\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\r\n     * clients with the token type ID.\r\n     *\r\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\r\n     * interpreted by clients as\r\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\r\n     * for token type ID 0x4cce0.\r\n     *\r\n     * See {uri}.\r\n     *\r\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\r\n     * this function emits no events.\r\n     */\r\n    function _setURI(string memory newuri) internal virtual {\r\n        _uri = newuri;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\r\n        require(account != address(0), \"ERC1155: mint to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n        _balances[id][account] += amount;\r\n        emit TransferSingle(operator, address(0), account, id, amount);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        for (uint i = 0; i < ids.length; i++) {\r\n            _balances[ids[i]][to] += amounts[i];\r\n        }\r\n\r\n        emit TransferBatch(operator, address(0), to, ids, amounts);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning, as well as batched variants.\r\n     *\r\n     * The same hook is called on both single and batched variants. For single\r\n     * transfers, the length of the `id` and `amount` arrays will be 1.\r\n     *\r\n     * Calling conditions (for each `id` and `amount` pair):\r\n     *\r\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * of token type `id` will be  transferred to `to`.\r\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\r\n     * for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\r\n     * will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `ids` and `amounts` have the same, non-zero length.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    )\r\n        internal\r\n        virtual\r\n    { }\r\n\r\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\r\n        uint256[] memory array = new uint256[](1);\r\n        array[0] = element;\r\n\r\n        return array;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n\r\n$$\\    $$\\   $$$$$$\\   $$$$$$$\\   $$\\        $$$$$$$$\\  $$\\   $$\\ \r\n$$ |   $$ | $$  __$$\\  $$  __$$\\  $$ |       $$  _____| $$ |  $$ |\r\n$$ |   $$ | $$ /  $$ | $$ |  $$ | $$ |       $$ |       \\$$\\ $$  |\r\n\\$$\\  $$  | $$ |  $$ | $$$$$$$  | $$ |       $$$$$\\      \\$$$$  / \r\n \\$$\\$$  /  $$ |  $$ | $$  __$$<  $$ |       $$  __|     $$  $$<  \r\n  \\$$$  /   $$ |  $$ | $$ |  $$ | $$ |       $$ |       $$  /\\$$\\ \r\n   \\$  /     $$$$$$  | $$ |  $$ | $$$$$$$$\\  $$$$$$$$\\  $$ /  $$ |\r\n    \\_/      \\______/  \\__|  \\__| \\________| \\________| \\__|  \\__|\r\n\r\n */\r\n                                                                 \r\n\r\n\r\n// https://vorlex.co Contract For Vorlex Crypto Marketplace \r\n// Vorlex Contract written by Kaptain Ti \r\n// Vorlex Platform Owned by Franklin Ndekwe and Kaptain Ti(nee C.C. Thompson)\r\n\r\ncontract Vorlex  is ERC1155, ERC1155Holder,  AccessControl  {\r\n    \r\n    bytes32 ADMIN_ROLE = bytes32(\"ADMIN_ROLE\");\r\n    bytes32 MINTER_ROLE = bytes32(\"MINTER_ROLE\");\r\n\r\n    using Counters for Counters.Counter;\r\n    Counters.Counter private _vorlex_count;\r\n\r\n    /**\r\n        * @dev Throws if called by any account other than admin.\r\n    */\r\n    modifier onlyAdmin() {\r\n        require(hasRole(ADMIN_ROLE, msg.sender), \"NOT_ADMIN\");\r\n        _;\r\n    }\r\n\r\n    enum sale_status { \r\n        OPEN_BUY, CANC_BUY,\r\n        OPEN_ESCROW_BUY, CANC_ESCROW_BUY, CLOSED_ESCROW_BUY, \r\n        OPEN_BID, ACTIVE_BID, CANC_BID, CLOSED_BID \r\n    }\r\n\r\n    struct Vorlexy {\r\n        string ipfs;\r\n        address custodian;\r\n        uint256 amount;\r\n        string vorlex_data;\r\n    }\r\n\r\n    struct Sale {\r\n        sale_status status; \r\n        uint256 vorlex_id;\r\n        uint256 amount;\r\n        uint256 purchased_amount;\r\n        uint256 settled_amount;\r\n        uint256 worth; // Cost per Token for Buy and Total Cost for Bid\r\n        uint256 bid_span; // Length of Bid Auction :: 1 hour for Buy Sales\r\n        uint256 expiry; // For Bids\r\n        address seller;\r\n        address highest_bidder;\r\n    }\r\n\r\n    event InFunded(string indexed metadata);\r\n    event OutFunded(uint256 indexed amount, address indexed receiver, \r\n            string indexed metadata);\r\n    event Minted(uint256 indexed vorlex_id, string ipfs, \r\n            address indexed custodian, uint256 amount, string vorlex_data);\r\n    event CustodianChanged(uint256 indexed vorlex_id, address indexed new_custodian);\r\n    event SaleSetup(bytes32 indexed sale_id, uint256 indexed vorlex, uint256 indexed amount, \r\n            uint256 worth, uint256 bid_span, sale_status status);\r\n    event Purchased(bytes32 indexed sale_id, uint256 indexed amount, \r\n                    address indexed buyer, bool on_chain, string metatdata);\r\n    event Bidded(bytes32 indexed sale_id, uint256 indexed bid_amount);\r\n    event SaleCancelled(bytes32 indexed sale_id, bool indexed by_seller);\r\n    event SaleClosed(bytes32 indexed sale_id, uint256 indexed settle_amount);\r\n    event Burnt(string metadata);\r\n    event Swapped(string metadata);\r\n    event BatchMoved(string metadata);\r\n\r\n    uint256 public MIN_SALE = 15000000000000000;\r\n\r\n\tmapping(string => uint256) private _minted_vorlexes;\r\n    mapping(uint256 => Vorlexy) public vorlexes;\r\n    mapping(bytes32  => Sale) public sales;\r\n\r\n    constructor() ERC1155(\"https://vorlex.co/uri/{id}.json\") {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        _setupRole(ADMIN_ROLE, msg.sender);\r\n        _setupRole(ADMIN_ROLE, address(this));\r\n        _setupRole(MINTER_ROLE, msg.sender);\r\n    }\r\n\r\n    /**\r\n        * @dev Add ETH to the contract\r\n        * @dev Used to handle MINT FEES\r\n        * @param metadata More Information on the Funds, Usually MINT FEES, DONATIONS or FUEL\r\n    */\r\n    function inFundContract(string memory metadata) external payable {\r\n         emit InFunded(metadata);\r\n    }\r\n\r\n    /**\r\n        * @dev Transfer ETH from contract :: Only by ADMIN\r\n        * @param amount Amount of ETH to be transferred\r\n        * @param receiver Recepient of ETH\r\n        * @param metadata More Information on the Funds, Usually WITHDRAWAL or REFUNDS\r\n    */\r\n\r\n    function outFundContract(\r\n        uint256 amount, address receiver, string memory metadata\r\n    ) external payable onlyAdmin {\r\n        emit OutFunded(amount, receiver, metadata);\r\n        payable(receiver).transfer(amount); // Withdraw ETH from the Vorlex Contract\r\n    }\r\n\r\n    /**\r\n        * @dev Set Minimum Price for Token for Sales \r\n    */\r\n\r\n    function setMinSale(uint256 new_min_sale) \r\n    external virtual onlyAdmin {\r\n        MIN_SALE = new_min_sale;\r\n    }\r\n\r\n    /**\r\n        * @dev Mints a single Vorlex NFT :: Only by MINTER\r\n        * @dev If Vorlex already exists, additional tokens are minted, no data is altered;\r\n        * @param ipfs IPFS hash of Vorlex\r\n        * @param custodian Vorlex Custodian :: Physical owner and custodian of vorlex who receives royalties for transaction\r\n        * @param amount Amount of tokens to be minted for the Vorlex NFT\r\n        * @param vorlex_data JSON Information of Vorlex\r\n    */\r\n\tfunction mint(\r\n        string memory ipfs, address custodian, \r\n        uint256 amount, string memory vorlex_data \r\n    ) external {\r\n        require(hasRole(MINTER_ROLE, msg.sender), \"NOT_MINTER\");\r\n        uint256 new_vorlex = _minted_vorlexes[ipfs];\r\n         if(new_vorlex == 0){\r\n            _vorlex_count.increment();\r\n            new_vorlex = _vorlex_count.current();\r\n            _minted_vorlexes[ipfs] = new_vorlex;\r\n            vorlexes[new_vorlex] = Vorlexy(ipfs, custodian, amount, vorlex_data);\r\n        }\r\n        _mint(custodian, new_vorlex, amount, \"\");\r\n        emit Minted(new_vorlex, ipfs, custodian, amount, vorlex_data);\r\n    } \r\n\r\n    /**\r\n        * @dev Set a New Custodian for a Vorlex if Former Custodian is defunct :: Only by ADMIN\r\n        * @param vorlex_id Vorlex id\r\n        * @param new_custodian Wallet Address of New Custodian\r\n     */\r\n    function setCustodian\r\n    (uint256 vorlex_id, address new_custodian) \r\n    external onlyAdmin {\r\n        require(vorlexes[vorlex_id].custodian != address(0), \"VORLEX_DOESNT_EXIST\");\r\n        vorlexes[vorlex_id].custodian = new_custodian;\r\n        emit CustodianChanged(vorlex_id, new_custodian);\r\n    }\r\n\r\n    /**\r\n        * @dev Get Total Number of Minted Vorlexes\r\n     */\r\n    function totalSupply() external view returns (uint256) {\r\n        return _vorlex_count.current();\r\n    }\r\n\r\n    /**\r\n        * @dev Create a Sale or Auction :: Only by Owner of Vorlex\r\n        * @dev Tokens are transferred to contract when called\r\n        * @param sale_id keccak256 hash of {vorlex_id, sale_not_auc, amount, seller, timestamp}\r\n        * @param buy_not_bid True for BuySale Setup, False for BidSale Setup\r\n        * @param is_escrow Indicates if it is an Escrow sale or not. Escrow sales are finalized by admin. All Bidding Auctions are Escrowed\r\n        * @param vorlex_id Vorlex id\r\n        * @param amount Amount of tokens to setup for Sale or Auction\r\n        * @param worth For Sale => cost per tokem :: For Auction => cost for all tokens\r\n        * @param bid_span Length of Auction :: For Sale => 1hr and doesn't count :: For Auction => 1 hour min & 72 hour max after first bid\r\n        \r\n     */\r\n    function createSale(\r\n        bytes32 sale_id, bool buy_not_bid, bool is_escrow, \r\n        uint256 vorlex_id, uint256 amount, uint256 worth, uint256 bid_span\r\n    ) external {\r\n        require(sales[sale_id].vorlex_id == 0, \"DUPLICATE_SALE\" );\r\n        require(bid_span >= 1 hours && bid_span <= 3 days, \"INVALID_BID_SPAN\"); // * Check if the Bid Span is Valid\r\n        require((buy_not_bid ? worth : worth/amount) >= MIN_SALE, \"LOW_COST_PER_TOKEN\");\r\n        sale_status new_status = buy_not_bid && !is_escrow ? sale_status.OPEN_BUY : \r\n                                 buy_not_bid && is_escrow ? sale_status.OPEN_ESCROW_BUY : \r\n                                 sale_status.OPEN_BID;\r\n        sales[sale_id] = Sale(new_status, vorlex_id, amount, 0,0, worth, bid_span, 0, msg.sender, address(0));\r\n        safeTransferFrom(msg.sender, address(this), vorlex_id, amount, \"\");\r\n        emit SaleSetup(sale_id, vorlex_id, amount, worth, bid_span, new_status);\r\n    } \r\n\r\n    /**\r\n        * @dev Purchase tokens that are on sale :: Will not call if Auction\r\n        * @dev Tpkens are tramsferred to buyer \r\n        * @dev Custodian => Paid 10% :: Seller => Paid 80%\r\n        * @param sale_id Auction ID of Sale\r\n        * @param amount Amount of tokens to buy\r\n        * @param buyer Address of token buyer\r\n        * @param on_chain False if token was purchased with cash or other crypto on vorlex.co\r\n        * @param metadata Off-chain purchase information\r\n     */\r\n    function purchaseToken(\r\n        bytes32 sale_id, uint256 amount,address buyer, \r\n        bool on_chain, string memory metadata\r\n    ) external payable {\r\n        require (sales[sale_id].status == sale_status.OPEN_BUY || \r\n                 sales[sale_id].status == sale_status.OPEN_ESCROW_BUY, \r\n                 \"NOT_OPEN_BUY_SALE\");\r\n        require(sales[sale_id].amount >= amount, \"LOW_TOKENS_AVAILABLE\");\r\n        if(on_chain){   \r\n            require(msg.value/amount == sales[sale_id].worth, \"INVALID_TOKEN_PRICE\");\r\n        }\r\n        else {\r\n            require(hasRole(ADMIN_ROLE, msg.sender), \"NOT_ADMIN\");\r\n        }\r\n        this.safeTransferFrom( address(this), buyer, sales[sale_id].vorlex_id, amount, \"\");\r\n        sales[sale_id].purchased_amount += amount;\r\n        sales[sale_id].amount -= amount;\r\n        emit Purchased(sale_id, amount, buyer, on_chain, metadata);\r\n        if(sales[sale_id].status == sale_status.OPEN_BUY){     // Transfer Payment and Token if not Escrow\r\n            uint256 _payment = msg.value;\r\n            payable(vorlexes[sales[sale_id].vorlex_id].custodian).transfer(_payment /10);   // Pay Royalty to Custodian\r\n            payable(sales[sale_id].seller).transfer(_payment * 4/5);       // Pay Seller 80% of Purchase\r\n        }\r\n    }\r\n\r\n    /**\r\n        * @dev Place a bid on Auction :: Will not call if for sale or Auction expired\r\n        * @dev First bid sets expiry to time_of_bid + bid_span\r\n        * @dev Bid should be at least 1% increment to highest bid\r\n        * @param sale_id Auction ID\r\n     */\r\n    function placeBid(bytes32 sale_id) external payable {\r\n        require (sales[sale_id].status == sale_status.OPEN_BID || \r\n                 sales[sale_id].status == sale_status.ACTIVE_BID, \r\n                 \"NOT_VALID_BID_SALE\");\r\n        require ((msg.value - sales[sale_id].worth) >= (sales[sale_id].worth /100), \"LOW_BID_INCREMENT\" );\r\n        require(sales[sale_id].expiry > block.timestamp || sales[sale_id].expiry == 0, \"EXPIRED\" );\r\n        sales[sale_id].highest_bidder = msg.sender;\r\n        sales[sale_id].worth = msg.value;\r\n        emit Bidded(sale_id, msg.value);\r\n        if(sales[sale_id].expiry == 0) {\r\n            sales[sale_id].expiry = block.timestamp + sales[sale_id].bid_span;\r\n            sales[sale_id].status = sale_status.ACTIVE_BID;\r\n        }\r\n        else {\r\n            payable(sales[sale_id].highest_bidder).transfer(sales[sale_id].worth);\r\n        }\r\n    }\r\n\r\n    /**\r\n        * @dev Cancel a Sale/Unbidded Auction \r\n        * @dev Tokens are transferred back to seller\r\n        * @param sale_id Auction or Sale ID\r\n     */\r\n    function cancelSale(bytes32 sale_id) external {\r\n        require(msg.sender == sales[sale_id].seller || \r\n                hasRole(ADMIN_ROLE, msg.sender), \r\n                \"NOT_SELLER_OR_ADMIN\");\r\n        require(sales[sale_id].status == sale_status.OPEN_BUY || \r\n                sales[sale_id].status == sale_status.OPEN_ESCROW_BUY || \r\n                sales[sale_id].status == sale_status.OPEN_BID , \r\n                \"NOT_OPEN_SALE\");\r\n        if(msg.sender == sales[sale_id].seller){\r\n            this.safeTransferFrom( address(this),  msg.sender,  sales[sale_id].vorlex_id, sales[sale_id].amount, \"\");\r\n        }\r\n        sales[sale_id].status = sales[sale_id].status == sale_status.OPEN_BUY ? sale_status.CANC_BUY :\r\n                                sales[sale_id].status == sale_status.OPEN_BID ? sale_status.CANC_BID :\r\n                                sale_status.CANC_ESCROW_BUY ;\r\n        emit SaleCancelled(sale_id, msg.sender == sales[sale_id].seller);\r\n    }\r\n\r\n    /**\r\n        * @dev Finalize Escrow :: Only by ADMIN\r\n        * @param sale_id Auction ID of ESCROW PURCHASE or \r\n        * @param settle_amount Amount to Settle for ESCROW\r\n    */\r\n    function closeSale(bytes32 sale_id, uint256 settle_amount) external payable onlyAdmin {\r\n        require(sales[sale_id].status == sale_status.OPEN_ESCROW_BUY ||\r\n                sales[sale_id].status == sale_status.CANC_ESCROW_BUY ||\r\n                sales[sale_id].status == sale_status.ACTIVE_BID , \r\n                \"INVALID_CLOSE\");\r\n                \r\n        emit SaleClosed(sale_id, settle_amount);\r\n        if(sales[sale_id].status == sale_status.ACTIVE_BID){\r\n            require(sales[sale_id].expiry < block.timestamp , \"BIDDING_IS_OPEN\" );\r\n            safeTransferFrom( \r\n                address(this),  sales[sale_id].highest_bidder,  \r\n                sales[sale_id].vorlex_id, sales[sale_id].amount, \"\");\r\n            sales[sale_id].status = sale_status.CLOSED_BID;\r\n            payable(vorlexes[sales[sale_id].vorlex_id].custodian).transfer(sales[sale_id].worth/10); // Custodian Royalty\r\n            payable(sales[sale_id].seller).transfer(sales[sale_id].worth * 4/5);// Owner's Payout\r\n        } else {\r\n            require(sales[sale_id].purchased_amount - sales[sale_id].settled_amount >= \r\n                settle_amount , \"INVALID SETTLE_AMOUNT\" );\r\n            uint256 payout = sales[sale_id].worth * settle_amount;\r\n            sales[sale_id].settled_amount += settle_amount;\r\n            payable(vorlexes[sales[sale_id].vorlex_id].custodian).transfer(payout/10); // Custodian Royalty\r\n            payable(sales[sale_id].seller).transfer(payout * 4/5);// Owner's Payout\r\n        }\r\n    }\r\n\r\n    /**\r\n        * @dev Batch Move for SWAP, TRANSFER & BURN OPERATIONS\r\n        * @dev Transfer is impossible between Vorlexers and Vorlexers cannot burn their tokens.\r\n        * @param is_swap If operation is a Swap Operation\r\n        * @param metadata More information about the Transfer Ops\r\n    */\r\n\r\n    function batchMove(\r\n        uint256[] memory vorlex_ids, uint256[] memory amounts, address from, address to, \r\n        bool is_swap, string memory metadata \r\n    ) external {\r\n        safeBatchTransferFrom(from, to, vorlex_ids, amounts, \"\");\r\n        if(to == address(0)){ // If operation is a burn operation\r\n            for (uint256 i = 0; i < amounts.length; i++) {\r\n                vorlexes[vorlex_ids[i]].amount -= amounts[i];\r\n            }\r\n            emit Burnt(metadata);\r\n        }\r\n        if(is_swap){\r\n            emit Swapped(metadata);\r\n        }\r\n        emit BatchMoved(metadata);\r\n    }\r\n\r\n    /**\r\n        * @dev Vorlexes can only be transferred to this Contract/Admin or From this Contract/Admin by NON-ADMIN\r\n        * @dev ADMIN can initiate any transfers\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address operator,address from,address to,\r\n        uint256[] memory ids,uint256[] memory amounts, bytes memory data\r\n    )\r\n        internal virtual override(ERC1155)\r\n    {\r\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n        require (hasRole(ADMIN_ROLE, from) || hasRole(ADMIN_ROLE, to) || hasRole(ADMIN_ROLE, operator), \"INVALID_TOKEN_TRANSFER\");\r\n\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) \r\n    public view virtual override(AccessControl, ERC1155, ERC1155Receiver) \r\n    returns (bool) {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"BatchMoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sale_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bid_amount\",\"type\":\"uint256\"}],\"name\":\"Bidded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"Burnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vorlex_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"new_custodian\",\"type\":\"address\"}],\"name\":\"CustodianChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"InFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vorlex_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ipfs\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"custodian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"vorlex_data\",\"type\":\"string\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"OutFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sale_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"on_chain\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metatdata\",\"type\":\"string\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sale_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"by_seller\",\"type\":\"bool\"}],\"name\":\"SaleCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sale_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"settle_amount\",\"type\":\"uint256\"}],\"name\":\"SaleClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sale_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vorlex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"worth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid_span\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Vorlex.sale_status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"SaleSetup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_SALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"vorlex_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"is_swap\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"batchMove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sale_id\",\"type\":\"bytes32\"}],\"name\":\"cancelSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sale_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"settle_amount\",\"type\":\"uint256\"}],\"name\":\"closeSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sale_id\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"buy_not_bid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"is_escrow\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"vorlex_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"worth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bid_span\",\"type\":\"uint256\"}],\"name\":\"createSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"inFundContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ipfs\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"custodian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"vorlex_data\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"outFundContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sale_id\",\"type\":\"bytes32\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sale_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"on_chain\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"purchaseToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"sales\",\"outputs\":[{\"internalType\":\"enum Vorlex.sale_status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"vorlex_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchased_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settled_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"worth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bid_span\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"highest_bidder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vorlex_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"new_custodian\",\"type\":\"address\"}],\"name\":\"setCustodian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_min_sale\",\"type\":\"uint256\"}],\"name\":\"setMinSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vorlexes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"ipfs\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"custodian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"vorlex_data\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Vorlex","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1b5e441909db554b3cab51c72b02fcb13a7fdac2cff7056d8fdb58250bfa92bf"}]}