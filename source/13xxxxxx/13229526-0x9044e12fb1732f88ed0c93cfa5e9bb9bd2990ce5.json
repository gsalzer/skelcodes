{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.16\r\n\"\"\"\r\n@title Root-Chain Gauge\r\n@author Curve Finance\r\n@license MIT\r\n@notice Calculates total allocated weekly CRV emission\r\n        mints and sends across a sidechain bridge\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\n\r\ninterface CRV20:\r\n    def start_epoch_time_write() -> uint256: nonpayable\r\n    def rate() -> uint256: view\r\n\r\ninterface Controller:\r\n    def period() -> int128: view\r\n    def gauge_relative_weight(addr: address, time: uint256) -> uint256: view\r\n    def checkpoint(): nonpayable\r\n    def checkpoint_gauge(addr: address): nonpayable\r\n\r\ninterface Minter:\r\n    def token() -> address: view\r\n    def controller() -> address: view\r\n    def minted(user: address, gauge: address) -> uint256: view\r\n    def mint(gauge: address): nonpayable\r\n\r\n\r\nevent PeriodEmission:\r\n    period_start: uint256\r\n    mint_amount: uint256\r\n\r\nevent CommitOwnership:\r\n    admin: address\r\n\r\nevent ApplyOwnership:\r\n    admin: address\r\n\r\nevent FeesModified:\r\n    gas_limit: uint256\r\n    gas_price: uint256\r\n    max_submission_cost: uint256\r\n\r\n\r\nGATEWAY_ROUTER: constant(address) = 0x72Ce9c846789fdB6fC1f34aC4AD25Dd9ef7031ef\r\nGATEWAY: constant(address) = 0xa3A7B6F88361F48403514059F1F16C8E78d60EeC\r\n\r\nWEEK: constant(uint256) = 604800\r\nYEAR: constant(uint256) = 86400 * 365\r\nRATE_DENOMINATOR: constant(uint256) = 10 ** 18\r\nRATE_REDUCTION_COEFFICIENT: constant(uint256) = 1189207115002721024  # 2 ** (1/4) * 1e18\r\nRATE_REDUCTION_TIME: constant(uint256) = YEAR\r\n\r\n\r\nminter: public(address)\r\ncrv_token: public(address)\r\ncontroller: public(address)\r\nstart_epoch_time: public(uint256)\r\n\r\nperiod: public(uint256)\r\nemissions: public(uint256)\r\ninflation_rate: public(uint256)\r\n\r\nadmin: public(address)\r\nfuture_admin: public(address)  # Can and will be a smart contract\r\nis_killed: public(bool)\r\n\r\ncheckpoint_admin: public(address)\r\n\r\n# L2 transaction costs `max_submission_cost + (gas_limit * gas_price)`\r\ngas_limit: public(uint256)\r\ngas_price: public(uint256)\r\nmax_submission_cost: public(uint256)\r\n\r\n@external\r\ndef __init__(\r\n    _minter: address,\r\n    _admin: address,\r\n    _gas_limit: uint256,\r\n    _gas_price: uint256,\r\n    _max_submission_cost: uint256\r\n):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @param _minter Minter contract address\r\n    @param _admin Admin who can kill the gauge\r\n    @param _gas_limit Gas limit for L2 bridge tx (recommended 1000000)\r\n    @param _gas_price Gas price for L2 bridge tx (recommended 990000000)\r\n    @param _max_submission_cost Max submission cost for L2 bridge tx (recommended 10000000000000)\r\n    \"\"\"\r\n\r\n    crv_token: address = Minter(_minter).token()\r\n\r\n    self.minter = _minter\r\n    self.admin = _admin\r\n    self.crv_token = crv_token\r\n    self.controller = Minter(_minter).controller()\r\n\r\n    # because we calculate the rate locally, this gauge cannot\r\n    # be used prior to the start of the first emission period\r\n    rate: uint256 = CRV20(crv_token).rate()\r\n    assert rate != 0\r\n    self.inflation_rate = rate\r\n\r\n    self.period = block.timestamp / WEEK - 1\r\n    self.start_epoch_time = CRV20(crv_token).start_epoch_time_write()\r\n\r\n    self.gas_limit = _gas_limit\r\n    self.gas_price = _gas_price\r\n    self.max_submission_cost = _max_submission_cost\r\n\r\n    ERC20(crv_token).approve(GATEWAY, MAX_UINT256)\r\n\r\n\r\n@view\r\n@external\r\ndef get_total_bridge_cost() -> uint256:\r\n    \"\"\"\r\n    @notice Get the required Ether amount when calling `checkpoint`\r\n    \"\"\"\r\n    return self.gas_price * self.gas_limit + self.max_submission_cost\r\n\r\n\r\n@payable\r\n@external\r\ndef checkpoint() -> bool:\r\n    \"\"\"\r\n    @notice Mint all allocated CRV emissions and transfer across the bridge\r\n    @dev Should be called once per week, after the new epoch period has begun.\r\n         This function is payable to allow forwarding the required ETH for\r\n         the transaction to be processed on the layer2 side. You can check the\r\n         required ETH value for the tx by calling `get_total_bridge_cost`.\r\n    \"\"\"\r\n    assert self.checkpoint_admin in [ZERO_ADDRESS, msg.sender]\r\n    last_period: uint256 = self.period\r\n    current_period: uint256 = block.timestamp / WEEK - 1\r\n\r\n    if last_period < current_period:\r\n\r\n        controller: address = self.controller\r\n        Controller(controller).checkpoint_gauge(self)\r\n\r\n        rate: uint256 = self.inflation_rate\r\n        new_emissions: uint256 = 0\r\n        last_period += 1\r\n        next_epoch_time: uint256 = self.start_epoch_time + RATE_REDUCTION_TIME\r\n        for i in range(last_period, last_period + 255):\r\n            if i > current_period:\r\n                break\r\n            period_time: uint256 = i * WEEK\r\n            period_emission: uint256 = 0\r\n            gauge_weight: uint256 = Controller(controller).gauge_relative_weight(self, i * WEEK)\r\n\r\n            if next_epoch_time >= period_time and next_epoch_time < period_time + WEEK:\r\n                # If the period crosses an epoch, we calculate a reduction in the rate\r\n                # using the same formula as used in `ERC20CRV`. We perform the calculation\r\n                # locally instead of calling to `ERC20CRV.rate()` because we are generating\r\n                # the emissions for the upcoming week, so there is a possibility the new\r\n                # rate has not yet been applied.\r\n                period_emission = gauge_weight * rate * (next_epoch_time - period_time) / 10**18\r\n                rate = rate * RATE_DENOMINATOR / RATE_REDUCTION_COEFFICIENT\r\n                period_emission += gauge_weight * rate * (period_time + WEEK - next_epoch_time) / 10**18\r\n\r\n                self.inflation_rate = rate\r\n                self.start_epoch_time = next_epoch_time\r\n                next_epoch_time += RATE_REDUCTION_TIME\r\n            else:\r\n                period_emission = gauge_weight * rate * WEEK / 10**18\r\n\r\n            log PeriodEmission(period_time, period_emission)\r\n            new_emissions += period_emission\r\n\r\n        self.period = current_period\r\n        self.emissions += new_emissions\r\n        if new_emissions > 0 and not self.is_killed:\r\n            max_submission_cost: uint256 = self.max_submission_cost\r\n            gas_price: uint256 = self.gas_price\r\n            gas_limit: uint256 = self.gas_limit\r\n            crv_token: address = self.crv_token\r\n\r\n            Minter(self.minter).mint(self)\r\n\r\n            # After bridging, the CRV should arrive on Arbitrum within 10 minutes. If it\r\n            # does not, the L2 transaction may have failed due to an insufficient amount\r\n            # within `max_submission_cost + (gas_limit * gas_price)`\r\n            # In this case, the transaction can be manually broadcasted on Arbitrum by calling\r\n            # `ArbRetryableTicket(0x000000000000000000000000000000000000006e).redeem(redemption-TxID)`\r\n            # The calldata for this manual transaction is easily obtained by finding the reverted\r\n            # transaction in the tx history for 0x000000000000000000000000000000000000006e on Arbiscan.\r\n            # https://developer.offchainlabs.com/docs/l1_l2_messages#retryable-transaction-lifecycle\r\n            raw_call(\r\n                GATEWAY_ROUTER,\r\n                _abi_encode(\r\n                    crv_token,\r\n                    self,\r\n                    new_emissions,\r\n                    gas_limit,\r\n                    gas_price,\r\n                    _abi_encode(max_submission_cost, b\"\"),\r\n                    method_id=method_id(\"outboundTransfer(address,address,uint256,uint256,uint256,bytes)\")\r\n                ),\r\n                value=gas_price * gas_limit + max_submission_cost\r\n            )\r\n\r\n    return True\r\n\r\n\r\n@view\r\n@external\r\ndef future_epoch_time() -> uint256:\r\n    return self.start_epoch_time + YEAR\r\n\r\n\r\n@view\r\n@external\r\ndef user_checkpoint(addr: address) -> bool:\r\n    return True\r\n\r\n\r\n@view\r\n@external\r\ndef integrate_fraction(addr: address) -> uint256:\r\n    assert addr == self, \"Gauge can only mint for itself\"\r\n    return self.emissions\r\n\r\n\r\n@external\r\ndef set_killed(_is_killed: bool):\r\n    \"\"\"\r\n    @notice Set the killed status for this contract\r\n    @dev When killed, the gauge always yields a rate of 0 and so cannot mint CRV\r\n    @param _is_killed Killed status to set\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin only\r\n\r\n    self.is_killed = _is_killed\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(addr: address):\r\n    \"\"\"\r\n    @notice Transfer ownership of GaugeController to `addr`\r\n    @param addr Address to have ownership transferred to\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin only\r\n\r\n    self.future_admin = addr\r\n    log CommitOwnership(addr)\r\n\r\n\r\n@external\r\ndef accept_transfer_ownership():\r\n    \"\"\"\r\n    @notice Accept a pending ownership transfer\r\n    \"\"\"\r\n    _admin: address = self.future_admin\r\n    assert msg.sender == _admin  # dev: future admin only\r\n\r\n    self.admin = _admin\r\n    log ApplyOwnership(_admin)\r\n\r\n\r\n@external\r\ndef set_checkpoint_admin(_admin: address):\r\n    \"\"\"\r\n    @notice Set the checkpoint admin address\r\n    @dev Setting to ZERO_ADDRESS allows anyone to call `checkpoint`\r\n    @param _admin Address of the checkpoint admin\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin only\r\n\r\n    self.checkpoint_admin = _admin\r\n\r\n\r\n@external\r\ndef set_arbitrum_fees( _gas_limit: uint256, _gas_price: uint256, _max_submission_cost: uint256):\r\n    \"\"\"\r\n    @notice Set the fees for the Arbitrum side of the bridging transaction\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin only\r\n\r\n    self.gas_limit = _gas_limit\r\n    self.gas_price = _gas_price\r\n    self.max_submission_cost = _max_submission_cost","ABI":"[{\"name\":\"PeriodEmission\",\"inputs\":[{\"name\":\"period_start\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"mint_amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"CommitOwnership\",\"inputs\":[{\"name\":\"admin\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ApplyOwnership\",\"inputs\":[{\"name\":\"admin\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"FeesModified\",\"inputs\":[{\"name\":\"gas_limit\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"gas_price\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"max_submission_cost\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_gas_limit\",\"type\":\"uint256\"},{\"name\":\"_gas_price\",\"type\":\"uint256\"},{\"name\":\"_max_submission_cost\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_total_bridge_cost\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":6985},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"checkpoint\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":20062914},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_epoch_time\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2621},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"user_checkpoint\",\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":478},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"integrate_fraction\",\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2733},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_killed\",\"inputs\":[{\"name\":\"_is_killed\",\"type\":\"bool\"}],\"outputs\":[],\"gas\":37695},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"commit_transfer_ownership\",\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"outputs\":[],\"gas\":39625},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_transfer_ownership\",\"inputs\":[],\"outputs\":[],\"gas\":39570},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_checkpoint_admin\",\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"outputs\":[],\"gas\":37785},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_arbitrum_fees\",\"inputs\":[{\"name\":\"_gas_limit\",\"type\":\"uint256\"},{\"name\":\"_gas_price\",\"type\":\"uint256\"},{\"name\":\"_max_submission_cost\",\"type\":\"uint256\"}],\"outputs\":[],\"gas\":107733},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"minter\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2688},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"crv_token\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2718},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"controller\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2748},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"start_epoch_time\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2778},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"period\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2808},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"emissions\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2838},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"inflation_rate\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2868},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2898},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_admin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2928},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"is_killed\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":2958},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"checkpoint_admin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2988},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"gas_limit\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3018},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"gas_price\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3048},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"max_submission_cost\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3078}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.16","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000d061d61a4d941c39e5453435b6345dc261c2fce00000000000000000000000007eeac6cddbd1d0b8af061742d41877d7f707289a00000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000003b023380000000000000000000000000000000000000000000000000000009184e72a000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}