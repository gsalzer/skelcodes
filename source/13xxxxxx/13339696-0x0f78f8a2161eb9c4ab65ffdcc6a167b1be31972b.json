{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/protocol/lendingpool/LendingPoolConfigurator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../tools/upgradeability/VersionedInitializable.sol';\\nimport '../../tools/upgradeability/IProxy.sol';\\nimport '../../tools/upgradeability/ProxyAdminBase.sol';\\nimport '../../access/interfaces/IMarketAccessController.sol';\\nimport '../../access/MarketAccessBitmask.sol';\\nimport '../../interfaces/ILendingPoolConfigurator.sol';\\nimport '../../interfaces/IManagedLendingPool.sol';\\nimport '../../interfaces/ILendingPoolForTokens.sol';\\nimport '../../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport '../../tools/Errors.sol';\\nimport '../../tools/math/PercentageMath.sol';\\nimport '../libraries/configuration/ReserveConfiguration.sol';\\nimport '../libraries/types/DataTypes.sol';\\nimport '../tokenization/interfaces/IInitializablePoolToken.sol';\\nimport '../tokenization/interfaces/PoolTokenConfig.sol';\\nimport '../../interfaces/IEmergencyAccessGroup.sol';\\n\\n/// @dev Implements configuration methods for the LendingPool\\ncontract LendingPoolConfigurator is\\n  ProxyAdminBase,\\n  VersionedInitializable,\\n  MarketAccessBitmask(IMarketAccessController(address(0))),\\n  ILendingPoolConfigurator,\\n  IEmergencyAccessGroup\\n{\\n  using PercentageMath for uint256;\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n  ICombinedPool internal pool;\\n  mapping(string => address) private _namedAdapters;\\n\\n  uint256 private constant CONFIGURATOR_REVISION = 0x1;\\n\\n  function getRevision() internal pure virtual override returns (uint256) {\\n    return CONFIGURATOR_REVISION;\\n  }\\n\\n  function initialize(IMarketAccessController provider) public initializer(CONFIGURATOR_REVISION) {\\n    _remoteAcl = provider;\\n    pool = ICombinedPool(provider.getLendingPool());\\n  }\\n\\n  /// @dev Initializes reserves in batch\\n  function batchInitReserve(InitReserveInput[] calldata input) external onlyPoolAdmin {\\n    address treasury = _remoteAcl.getAddress(AccessFlags.TREASURY);\\n    for (uint256 i = 0; i < input.length; i++) {\\n      _initReserve(input[i], treasury);\\n    }\\n  }\\n\\n  function _initPoolToken(address impl, bytes memory initParams) internal returns (address) {\\n    return address(_remoteAcl.createProxy(address(this), impl, initParams));\\n  }\\n\\n  function _initReserve(InitReserveInput calldata input, address treasury) internal {\\n    PoolTokenConfig memory config = PoolTokenConfig({\\n      pool: address(pool),\\n      treasury: treasury,\\n      underlyingAsset: input.underlyingAsset,\\n      underlyingDecimals: input.underlyingAssetDecimals\\n    });\\n\\n    address depositTokenProxyAddress = _initPoolToken(\\n      input.depositTokenImpl,\\n      abi.encodeWithSelector(\\n        IInitializablePoolToken.initialize.selector,\\n        config,\\n        input.depositTokenName,\\n        input.depositTokenSymbol,\\n        input.params\\n      )\\n    );\\n\\n    address variableDebtTokenProxyAddress = input.externalStrategy || input.variableDebtTokenImpl == address(0)\\n      ? address(0)\\n      : _initPoolToken(\\n        input.variableDebtTokenImpl,\\n        abi.encodeWithSelector(\\n          IInitializablePoolToken.initialize.selector,\\n          config,\\n          input.variableDebtTokenName,\\n          input.variableDebtTokenSymbol,\\n          input.params\\n        )\\n      );\\n\\n    address stableDebtTokenProxyAddress = input.externalStrategy || input.stableDebtTokenImpl == address(0)\\n      ? address(0)\\n      : _initPoolToken(\\n        input.stableDebtTokenImpl,\\n        abi.encodeWithSelector(\\n          IInitializablePoolToken.initialize.selector,\\n          config,\\n          input.stableDebtTokenName,\\n          input.stableDebtTokenSymbol,\\n          input.params\\n        )\\n      );\\n\\n    pool.initReserve(\\n      DataTypes.InitReserveData(\\n        input.underlyingAsset,\\n        depositTokenProxyAddress,\\n        stableDebtTokenProxyAddress,\\n        variableDebtTokenProxyAddress,\\n        input.strategy,\\n        input.externalStrategy\\n      )\\n    );\\n\\n    DataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(input.underlyingAsset);\\n\\n    currentConfig.setDecimals(input.underlyingAssetDecimals);\\n\\n    currentConfig.setActive(true);\\n    currentConfig.setFrozen(false);\\n\\n    pool.setConfiguration(input.underlyingAsset, currentConfig.data);\\n\\n    emit ReserveInitialized(\\n      input.underlyingAsset,\\n      depositTokenProxyAddress,\\n      stableDebtTokenProxyAddress,\\n      variableDebtTokenProxyAddress,\\n      input.strategy,\\n      input.externalStrategy\\n    );\\n  }\\n\\n  function updateDepositToken(UpdatePoolTokenInput calldata input) external onlyPoolAdmin {\\n    address token = pool.getReserveData(input.asset).depositTokenAddress;\\n\\n    _updatePoolToken(input, token);\\n    emit DepositTokenUpgraded(input.asset, token, input.implementation);\\n  }\\n\\n  function updateStableDebtToken(UpdatePoolTokenInput calldata input) external onlyPoolAdmin {\\n    address token = pool.getReserveData(input.asset).stableDebtTokenAddress;\\n\\n    _updatePoolToken(input, token);\\n    emit StableDebtTokenUpgraded(input.asset, token, input.implementation);\\n  }\\n\\n  function updateVariableDebtToken(UpdatePoolTokenInput calldata input) external onlyPoolAdmin {\\n    address token = pool.getReserveData(input.asset).variableDebtTokenAddress;\\n\\n    _updatePoolToken(input, token);\\n    emit VariableDebtTokenUpgraded(input.asset, token, input.implementation);\\n  }\\n\\n  function _updatePoolToken(UpdatePoolTokenInput calldata input, address token) private {\\n    (, , , uint256 decimals, ) = pool.getConfiguration(input.asset).getParamsMemory();\\n    address treasury = _remoteAcl.getAddress(AccessFlags.TREASURY);\\n\\n    PoolTokenConfig memory config = PoolTokenConfig({\\n      pool: address(pool),\\n      treasury: treasury,\\n      underlyingAsset: input.asset,\\n      underlyingDecimals: uint8(decimals)\\n    });\\n\\n    bytes memory encodedCall = abi.encodeWithSelector(\\n      IInitializablePoolToken.initialize.selector,\\n      config,\\n      input.name,\\n      input.symbol,\\n      input.params\\n    );\\n\\n    IProxy(token).upgradeToAndCall(input.implementation, encodedCall);\\n  }\\n\\n  function implementationOf(address token) external view returns (address) {\\n    return _getProxyImplementation(IProxy(token));\\n  }\\n\\n  function enableBorrowingOnReserve(address asset, bool stableBorrowRateEnabled) public onlyPoolAdmin {\\n    DataTypes.ReserveData memory reserve = pool.getReserveData(asset);\\n    require(reserve.variableDebtTokenAddress != address(0), Errors.LPC_INVALID_CONFIGURATION);\\n    require(\\n      !stableBorrowRateEnabled || (reserve.stableDebtTokenAddress != address(0)),\\n      Errors.LPC_INVALID_CONFIGURATION\\n    );\\n\\n    DataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\\n\\n    currentConfig.setBorrowingEnabled(true);\\n    currentConfig.setStableRateBorrowingEnabled(stableBorrowRateEnabled);\\n\\n    pool.setConfiguration(asset, currentConfig.data);\\n\\n    emit BorrowingEnabledOnReserve(asset, stableBorrowRateEnabled);\\n  }\\n\\n  function disableBorrowingOnReserve(address asset) public onlyPoolAdmin {\\n    DataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\\n\\n    currentConfig.setBorrowingEnabled(false);\\n\\n    pool.setConfiguration(asset, currentConfig.data);\\n    emit BorrowingDisabledOnReserve(asset);\\n  }\\n\\n  /**\\n   * @dev Configures the reserve collateralization parameters\\n   * all the values are expressed in percentages with two decimals of precision. A valid value is 10000, which means 100.00%\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param ltv The loan to value of the asset when used as collateral\\n   * @param liquidationThreshold The threshold at which loans using this asset as collateral will be considered undercollateralized\\n   * @param liquidationBonus The bonus liquidators receive to liquidate this asset. The values is always above 100%. A value of 105%\\n   * means the liquidator will receive a 5% bonus\\n   **/\\n  function configureReserveAsCollateral(\\n    address asset,\\n    uint256 ltv,\\n    uint256 liquidationThreshold,\\n    uint256 liquidationBonus\\n  ) public onlyPoolAdmin {\\n    DataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\\n\\n    //validation of the parameters: the LTV can\\n    //only be lower or equal than the liquidation threshold\\n    //(otherwise a loan against the asset would cause instantaneous liquidation)\\n    require(ltv <= liquidationThreshold, Errors.LPC_INVALID_CONFIGURATION);\\n\\n    if (liquidationThreshold != 0) {\\n      //liquidation bonus must be bigger than 100.00%, otherwise the liquidator would receive less\\n      //collateral than needed to cover the debt\\n      require(liquidationBonus > PercentageMath.ONE, Errors.LPC_INVALID_CONFIGURATION);\\n\\n      //if threshold * bonus is less than 100%, it guarantees that at the moment\\n      //a loan is taken there is enough collateral available to cover the liquidation bonus\\n      require(\\n        liquidationThreshold.percentMul(liquidationBonus) <= PercentageMath.ONE,\\n        Errors.LPC_INVALID_CONFIGURATION\\n      );\\n    } else {\\n      require(liquidationBonus == 0, Errors.LPC_INVALID_CONFIGURATION);\\n      //if the liquidation threshold is being set to 0,\\n      // the reserve is being disabled as collateral. To do so,\\n      //we need to ensure no liquidity is deposited\\n      _checkNoLiquidity(asset);\\n    }\\n\\n    currentConfig.setLtv(ltv);\\n    currentConfig.setLiquidationThreshold(liquidationThreshold);\\n    currentConfig.setLiquidationBonus(liquidationBonus);\\n\\n    pool.setConfiguration(asset, currentConfig.data);\\n\\n    emit CollateralConfigurationChanged(asset, ltv, liquidationThreshold, liquidationBonus);\\n  }\\n\\n  function enableReserveStableRate(address asset) external onlyPoolAdmin {\\n    DataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\\n    currentConfig.setStableRateBorrowingEnabled(true);\\n    pool.setConfiguration(asset, currentConfig.data);\\n\\n    emit StableRateEnabledOnReserve(asset);\\n  }\\n\\n  function disableReserveStableRate(address asset) external onlyPoolAdmin {\\n    DataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\\n    currentConfig.setStableRateBorrowingEnabled(false);\\n    pool.setConfiguration(asset, currentConfig.data);\\n\\n    emit StableRateDisabledOnReserve(asset);\\n  }\\n\\n  function activateReserve(address asset) external onlyPoolAdmin {\\n    DataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\\n    currentConfig.setActive(true);\\n    pool.setConfiguration(asset, currentConfig.data);\\n\\n    emit ReserveActivated(asset);\\n  }\\n\\n  function deactivateReserve(address asset) external onlyPoolAdmin {\\n    _checkNoLiquidity(asset);\\n\\n    DataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\\n    currentConfig.setActive(false);\\n    pool.setConfiguration(asset, currentConfig.data);\\n\\n    emit ReserveDeactivated(asset);\\n  }\\n\\n  /// @dev Freezes a reserve. A frozen reserve doesn't allow any new deposit, borrow or rate swap\\n  /// but allows repayments, liquidations, rate rebalances and withdrawals\\n  function freezeReserve(address asset) external onlyPoolAdmin {\\n    _setReserveFrozen(asset, true);\\n  }\\n\\n  function unfreezeReserve(address asset) external onlyPoolAdmin {\\n    _setReserveFrozen(asset, false);\\n  }\\n\\n  function setPausedFor(address asset, bool val) external override onlyEmergencyAdmin {\\n    _setReserveFrozen(asset, val);\\n  }\\n\\n  function isPausedFor(address asset) external view override returns (bool) {\\n    return pool.getConfiguration(asset).getFrozenMemory();\\n  }\\n\\n  function listEmergencyGroup() external view override returns (address[] memory) {\\n    return pool.getReservesList();\\n  }\\n\\n  function _setReserveFrozen(address asset, bool val) private {\\n    DataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\\n    currentConfig.setFrozen(val);\\n    pool.setConfiguration(asset, currentConfig.data);\\n\\n    if (val) {\\n      emit ReserveFrozen(asset);\\n    } else {\\n      emit ReserveUnfrozen(asset);\\n    }\\n  }\\n\\n  function setReserveFactor(address asset, uint256 reserveFactor) public onlyPoolAdmin {\\n    DataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\\n\\n    currentConfig.setReserveFactor(reserveFactor);\\n\\n    pool.setConfiguration(asset, currentConfig.data);\\n\\n    emit ReserveFactorChanged(asset, reserveFactor);\\n  }\\n\\n  function setReserveStrategy(\\n    address asset,\\n    address strategy,\\n    bool isExternal\\n  ) external onlyPoolAdmin {\\n    require(strategy != address(0) || isExternal);\\n    pool.setReserveStrategy(asset, strategy, isExternal);\\n    emit ReserveStrategyChanged(asset, strategy, isExternal);\\n  }\\n\\n  function _checkNoLiquidity(address asset) internal view {\\n    DataTypes.ReserveData memory reserveData = pool.getReserveData(asset);\\n\\n    uint256 availableLiquidity = IERC20(asset).balanceOf(reserveData.depositTokenAddress);\\n\\n    require(availableLiquidity == 0 && reserveData.currentLiquidityRate == 0, Errors.LPC_RESERVE_LIQUIDITY_NOT_0);\\n  }\\n\\n  function configureReserves(ConfigureReserveInput[] calldata inputParams) external onlyPoolAdmin {\\n    for (uint256 i = 0; i < inputParams.length; i++) {\\n      configureReserveAsCollateral(\\n        inputParams[i].asset,\\n        inputParams[i].baseLTV,\\n        inputParams[i].liquidationThreshold,\\n        inputParams[i].liquidationBonus\\n      );\\n\\n      if (inputParams[i].borrowingEnabled) {\\n        enableBorrowingOnReserve(inputParams[i].asset, inputParams[i].stableBorrowingEnabled);\\n      } else {\\n        disableBorrowingOnReserve(inputParams[i].asset);\\n      }\\n      setReserveFactor(inputParams[i].asset, inputParams[i].reserveFactor);\\n    }\\n  }\\n\\n  function getFlashloanAdapters(string[] calldata names) external view override returns (address[] memory adapters) {\\n    adapters = new address[](names.length);\\n    for (uint256 i = 0; i < names.length; i++) {\\n      adapters[i] = _namedAdapters[names[i]];\\n    }\\n    return adapters;\\n  }\\n\\n  function setFlashloanAdapters(string[] calldata names, address[] calldata adapters) external onlyPoolAdmin {\\n    require(names.length == adapters.length);\\n\\n    for (uint256 i = 0; i < names.length; i++) {\\n      _namedAdapters[names[i]] = adapters[i];\\n    }\\n  }\\n}\\n\\ninterface ICombinedPool is ILendingPoolForTokens, IManagedLendingPool {}\\n\"\r\n    },\r\n    \"contracts/tools/upgradeability/VersionedInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to implement versioned initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` or `initializerRunAlways` modifier.\\n * The revision number should be defined as a private constant, returned by getRevision() and used by initializer() modifier.\\n *\\n * ATTN: There is a built-in protection from implementation self-destruct exploits. This protection\\n * prevents initializers from being called on an implementation inself, but only on proxied contracts.\\n * To override this protection, call _unsafeResetVersionedInitializers() from a constructor.\\n *\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an initializable contract, as well\\n * as extending an initializable contract via inheritance.\\n *\\n * ATTN: When used with inheritance, parent initializers with `initializer` modifier are prevented by calling twice,\\n * but can only be called in child-to-parent sequence.\\n *\\n * WARNING: When used with inheritance, parent initializers with `initializerRunAlways` modifier\\n * are NOT protected from multiple calls by another initializer.\\n */\\nabstract contract VersionedInitializable {\\n  uint256 private constant BLOCK_REVISION = type(uint256).max;\\n  // This revision number is applied to implementations\\n  uint256 private constant IMPL_REVISION = BLOCK_REVISION - 1;\\n\\n  /// @dev Indicates that the contract has been initialized. The default value blocks initializers from being called on an implementation.\\n  uint256 private lastInitializedRevision = IMPL_REVISION;\\n\\n  /// @dev Indicates that the contract is in the process of being initialized.\\n  uint256 private lastInitializingRevision = 0;\\n\\n  /**\\n   * @dev There is a built-in protection from self-destruct of implementation exploits. This protection\\n   * prevents initializers from being called on an implementation inself, but only on proxied contracts.\\n   * Function _unsafeResetVersionedInitializers() can be called from a constructor to disable this protection.\\n   * It must be called before any initializers, otherwise it will fail.\\n   */\\n  function _unsafeResetVersionedInitializers() internal {\\n    require(isConstructor(), 'only for constructor');\\n\\n    if (lastInitializedRevision == IMPL_REVISION) {\\n      lastInitializedRevision = 0;\\n    } else {\\n      require(lastInitializedRevision == 0, 'can only be called before initializer(s)');\\n    }\\n  }\\n\\n  /// @dev Modifier to use in the initializer function of a contract.\\n  modifier initializer(uint256 localRevision) {\\n    (uint256 topRevision, bool initializing, bool skip) = _preInitializer(localRevision);\\n\\n    if (!skip) {\\n      lastInitializingRevision = localRevision;\\n      _;\\n      lastInitializedRevision = localRevision;\\n    }\\n\\n    if (!initializing) {\\n      lastInitializedRevision = topRevision;\\n      lastInitializingRevision = 0;\\n    }\\n  }\\n\\n  modifier initializerRunAlways(uint256 localRevision) {\\n    (uint256 topRevision, bool initializing, bool skip) = _preInitializer(localRevision);\\n\\n    if (!skip) {\\n      lastInitializingRevision = localRevision;\\n    }\\n    _;\\n    if (!skip) {\\n      lastInitializedRevision = localRevision;\\n    }\\n\\n    if (!initializing) {\\n      lastInitializedRevision = topRevision;\\n      lastInitializingRevision = 0;\\n    }\\n  }\\n\\n  function _preInitializer(uint256 localRevision)\\n    private\\n    returns (\\n      uint256 topRevision,\\n      bool initializing,\\n      bool skip\\n    )\\n  {\\n    topRevision = getRevision();\\n    require(topRevision < IMPL_REVISION, 'invalid contract revision');\\n\\n    require(localRevision > 0, 'incorrect initializer revision');\\n    require(localRevision <= topRevision, 'inconsistent contract revision');\\n\\n    if (lastInitializedRevision < IMPL_REVISION) {\\n      // normal initialization\\n      initializing = lastInitializingRevision > 0 && lastInitializedRevision < topRevision;\\n      require(initializing || isConstructor() || topRevision > lastInitializedRevision, 'already initialized');\\n    } else {\\n      // by default, initialization of implementation is only allowed inside a constructor\\n      require(lastInitializedRevision == IMPL_REVISION && isConstructor(), 'initializer blocked');\\n\\n      // enable normal use of initializers inside a constructor\\n      lastInitializedRevision = 0;\\n      // but make sure to block initializers afterwards\\n      topRevision = BLOCK_REVISION;\\n\\n      initializing = lastInitializingRevision > 0;\\n    }\\n\\n    if (initializing) {\\n      require(lastInitializingRevision > localRevision, 'incorrect order of initializers');\\n    }\\n\\n    if (localRevision <= lastInitializedRevision) {\\n      // prevent calling of parent's initializer when it was called before\\n      if (initializing) {\\n        // Can't set zero yet, as it is not a top-level call, otherwise `initializing` will become false.\\n        // Further calls will fail with the `incorrect order` assertion above.\\n        lastInitializingRevision = 1;\\n      }\\n      return (topRevision, initializing, true);\\n    }\\n    return (topRevision, initializing, false);\\n  }\\n\\n  function isRevisionInitialized(uint256 localRevision) internal view returns (bool) {\\n    return lastInitializedRevision >= localRevision;\\n  }\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function REVISION() public pure returns (uint256) {\\n    return getRevision();\\n  }\\n\\n  /**\\n   * @dev returns the revision number (< type(uint256).max - 1) of the contract.\\n   * The number should be defined as a private constant.\\n   **/\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    uint256 cs;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      cs := extcodesize(address())\\n    }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[4] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/tools/upgradeability/IProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IProxy {\\n  function upgradeToAndCall(address newImplementation, bytes calldata data) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/tools/upgradeability/ProxyAdminBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IProxy.sol';\\n\\nabstract contract ProxyAdminBase {\\n  /// @dev Returns the current implementation of an owned `proxy`.\\n  function _getProxyImplementation(IProxy proxy) internal view returns (address) {\\n    // We need to manually run the static call since the getter cannot be flagged as view\\n    // bytes4(keccak256('implementation()')) == 0x5c60da1b\\n    (bool success, bytes memory returndata) = address(proxy).staticcall(hex'5c60da1b');\\n    require(success);\\n    return abi.decode(returndata, (address));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/access/interfaces/IMarketAccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IAccessController.sol';\\n\\n/// @dev Main registry of addresses part of or connected to the protocol, including permissioned roles. Also acts a proxy factory.\\ninterface IMarketAccessController is IAccessController {\\n  function getMarketId() external view returns (string memory);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function getLendingRateOracle() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/access/MarketAccessBitmask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../tools/Errors.sol';\\nimport './interfaces/IMarketAccessController.sol';\\nimport './AccessHelper.sol';\\nimport './AccessFlags.sol';\\n\\n// solhint-disable func-name-mixedcase\\nabstract contract MarketAccessBitmaskMin {\\n  using AccessHelper for IMarketAccessController;\\n  IMarketAccessController internal _remoteAcl;\\n\\n  constructor(IMarketAccessController remoteAcl) {\\n    _remoteAcl = remoteAcl;\\n  }\\n\\n  function _getRemoteAcl(address addr) internal view returns (uint256) {\\n    return _remoteAcl.getAcl(addr);\\n  }\\n\\n  function hasRemoteAcl() internal view returns (bool) {\\n    return _remoteAcl != IMarketAccessController(address(0));\\n  }\\n\\n  function acl_hasAnyOf(address subject, uint256 flags) internal view returns (bool) {\\n    return _remoteAcl.hasAnyOf(subject, flags);\\n  }\\n\\n  modifier aclHas(uint256 flags) virtual {\\n    _remoteAcl.requireAnyOf(msg.sender, flags, Errors.TXT_ACCESS_RESTRICTED);\\n    _;\\n  }\\n\\n  modifier aclAnyOf(uint256 flags) {\\n    _remoteAcl.requireAnyOf(msg.sender, flags, Errors.TXT_ACCESS_RESTRICTED);\\n    _;\\n  }\\n\\n  modifier onlyPoolAdmin() {\\n    _remoteAcl.requireAnyOf(msg.sender, AccessFlags.POOL_ADMIN, Errors.CALLER_NOT_POOL_ADMIN);\\n    _;\\n  }\\n\\n  modifier onlyRewardAdmin() {\\n    _remoteAcl.requireAnyOf(msg.sender, AccessFlags.REWARD_CONFIG_ADMIN, Errors.CALLER_NOT_REWARD_CONFIG_ADMIN);\\n    _;\\n  }\\n\\n  modifier onlyRewardConfiguratorOrAdmin() {\\n    _remoteAcl.requireAnyOf(\\n      msg.sender,\\n      AccessFlags.REWARD_CONFIG_ADMIN | AccessFlags.REWARD_CONFIGURATOR,\\n      Errors.CALLER_NOT_REWARD_CONFIG_ADMIN\\n    );\\n    _;\\n  }\\n}\\n\\nabstract contract MarketAccessBitmask is MarketAccessBitmaskMin {\\n  using AccessHelper for IMarketAccessController;\\n\\n  constructor(IMarketAccessController remoteAcl) MarketAccessBitmaskMin(remoteAcl) {}\\n\\n  modifier onlyEmergencyAdmin() {\\n    _remoteAcl.requireAnyOf(msg.sender, AccessFlags.EMERGENCY_ADMIN, Errors.CALLER_NOT_EMERGENCY_ADMIN);\\n    _;\\n  }\\n\\n  function _onlySweepAdmin() internal view virtual {\\n    _remoteAcl.requireAnyOf(msg.sender, AccessFlags.SWEEP_ADMIN, Errors.CALLER_NOT_SWEEP_ADMIN);\\n  }\\n\\n  modifier onlySweepAdmin() {\\n    _onlySweepAdmin();\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPoolConfigurator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../interfaces/IEmergencyAccessGroup.sol';\\n\\ninterface ILendingPoolConfigurator {\\n  struct InitReserveInput {\\n    address depositTokenImpl;\\n    address stableDebtTokenImpl;\\n    address variableDebtTokenImpl;\\n    uint8 underlyingAssetDecimals;\\n    bool externalStrategy;\\n    address strategy;\\n    address underlyingAsset;\\n    string depositTokenName;\\n    string depositTokenSymbol;\\n    string variableDebtTokenName;\\n    string variableDebtTokenSymbol;\\n    string stableDebtTokenName;\\n    string stableDebtTokenSymbol;\\n    bytes params;\\n  }\\n\\n  struct UpdatePoolTokenInput {\\n    address asset;\\n    string name;\\n    string symbol;\\n    address implementation;\\n    bytes params;\\n  }\\n\\n  struct ConfigureReserveInput {\\n    address asset;\\n    uint256 baseLTV;\\n    uint256 liquidationThreshold;\\n    uint256 liquidationBonus;\\n    uint256 reserveFactor;\\n    bool borrowingEnabled;\\n    bool stableBorrowingEnabled;\\n  }\\n\\n  event ReserveInitialized(\\n    address indexed asset,\\n    address indexed depositToken,\\n    address stableDebtToken,\\n    address variableDebtToken,\\n    address strategy,\\n    bool externalStrategy\\n  );\\n\\n  event BorrowingEnabledOnReserve(address indexed asset, bool stableRateEnabled);\\n  event BorrowingDisabledOnReserve(address indexed asset);\\n\\n  event CollateralConfigurationChanged(\\n    address indexed asset,\\n    uint256 ltv,\\n    uint256 liquidationThreshold,\\n    uint256 liquidationBonus\\n  );\\n\\n  event StableRateEnabledOnReserve(address indexed asset);\\n  event StableRateDisabledOnReserve(address indexed asset);\\n\\n  event ReserveActivated(address indexed asset);\\n  event ReserveDeactivated(address indexed asset);\\n\\n  event ReserveFrozen(address indexed asset);\\n  event ReserveUnfrozen(address indexed asset);\\n\\n  event ReserveFactorChanged(address indexed asset, uint256 factor);\\n  event ReserveStrategyChanged(address indexed asset, address strategy, bool isExternal);\\n\\n  event DepositTokenUpgraded(address indexed asset, address indexed proxy, address indexed implementation);\\n\\n  event StableDebtTokenUpgraded(address indexed asset, address indexed proxy, address indexed implementation);\\n\\n  event VariableDebtTokenUpgraded(address indexed asset, address indexed proxy, address indexed implementation);\\n\\n  function getFlashloanAdapters(string[] calldata names) external view returns (address[] memory adapters);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IManagedLendingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../protocol/libraries/types/DataTypes.sol';\\nimport '../interfaces/IEmergencyAccess.sol';\\nimport '../access/interfaces/IMarketAccessController.sol';\\n\\ninterface IManagedLendingPool is IEmergencyAccess {\\n  function initReserve(DataTypes.InitReserveData calldata data) external;\\n\\n  function setReserveStrategy(\\n    address reserve,\\n    address strategy,\\n    bool isExternal\\n  ) external;\\n\\n  function setConfiguration(address reserve, uint256 configuration) external;\\n\\n  function getLendingPoolExtension() external view returns (address);\\n\\n  function setLendingPoolExtension(address) external;\\n\\n  /// @dev Version of flashLoan with access control and with zero premium. For automated liquidity management.\\n  function trustedFlashLoan(\\n    address receiver,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata modes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint256 referral\\n  ) external;\\n\\n  function setDisabledFeatures(uint16) external;\\n\\n  function getDisabledFeatures() external view returns (uint16);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPoolForTokens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../access/interfaces/IMarketAccessController.sol';\\nimport '../protocol/libraries/types/DataTypes.sol';\\n\\ninterface ILendingPoolForTokens {\\n  /**\\n   * @dev Validates and finalizes an depositToken transfer\\n   * - Only callable by the overlying depositToken of the `asset`\\n   * @param asset The address of the underlying asset of the depositToken\\n   * @param from The user from which the depositToken are transferred\\n   * @param to The user receiving the depositToken\\n   * @param lastBalanceFrom True when from's balance was non-zero and became zero\\n   * @param firstBalanceTo True when to's balance was zero and became non-zero\\n   */\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    bool lastBalanceFrom,\\n    bool firstBalanceTo\\n  ) external;\\n\\n  function getAccessController() external view returns (IMarketAccessController);\\n\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  function getReservesList() external view returns (address[] memory);\\n\\n  function setReservePaused(address asset, bool paused) external;\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP excluding events to avoid linearization issues.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/tools/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Errors library\\n * @notice Defines the error messages emitted by the different contracts\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (DepositToken, VariableDebtToken and StableDebtToken)\\n *  - AT = DepositToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - LP = LendingPool\\n *  - LPAPR = AddressesProviderRegistry\\n *  - LPC = LendingPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - LPCM = LendingPoolExtension\\n *  - ST = Stake\\n */\\nlibrary Errors {\\n  //contract specific errors\\n  string public constant VL_INVALID_AMOUNT = '1'; // Amount must be greater than 0\\n  string public constant VL_NO_ACTIVE_RESERVE = '2'; // Action requires an active reserve\\n  string public constant VL_RESERVE_FROZEN = '3'; // Action cannot be performed because the reserve is frozen\\n  string public constant VL_UNKNOWN_RESERVE = '4'; // Action requires an active reserve\\n  string public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = '5'; // User cannot withdraw more than the available balance (above min limit)\\n  string public constant VL_TRANSFER_NOT_ALLOWED = '6'; // Transfer cannot be allowed.\\n  string public constant VL_BORROWING_NOT_ENABLED = '7'; // Borrowing is not enabled\\n  string public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = '8'; // Invalid interest rate mode selected\\n  string public constant VL_COLLATERAL_BALANCE_IS_0 = '9'; // The collateral balance is 0\\n  string public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '10'; // Health factor is lesser than the liquidation threshold\\n  string public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = '11'; // There is not enough collateral to cover a new borrow\\n  string public constant VL_STABLE_BORROWING_NOT_ENABLED = '12'; // stable borrowing not enabled\\n  string public constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = '13'; // collateral is (mostly) the same currency that is being borrowed\\n  string public constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '14'; // The requested amount is exceeds max size of a stable loan\\n  string public constant VL_NO_DEBT_OF_SELECTED_TYPE = '15'; // to repay a debt, user needs to specify a correct debt type (variable or stable)\\n  string public constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '16'; // To repay on behalf of an user an explicit amount to repay is needed\\n  string public constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = '17'; // User does not have a stable rate loan in progress on this reserve\\n  string public constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = '18'; // User does not have a variable rate loan in progress on this reserve\\n  string public constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = '19'; // The collateral balance needs to be greater than 0\\n  string public constant VL_DEPOSIT_ALREADY_IN_USE = '20'; // User deposit is already being used as collateral\\n  string public constant VL_RESERVE_MUST_BE_COLLATERAL = '21'; // This reserve must be enabled as collateral\\n  string public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '22'; // Interest rate rebalance conditions were not met\\n  string public constant AT_OVERDRAFT_DISABLED = '23'; // User doesn't accept allocation of overdraft\\n  string public constant VL_INVALID_SUB_BALANCE_ARGS = '24';\\n  string public constant AT_INVALID_SLASH_DESTINATION = '25';\\n\\n  string public constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = '27'; // The caller of the function is not the lending pool configurator\\n\\n  string public constant LENDING_POOL_REQUIRED = '28'; // The caller of this function must be a lending pool\\n  string public constant CALLER_NOT_LENDING_POOL = '29'; // The caller of this function must be a lending pool\\n  string public constant AT_SUB_BALANCE_RESTIRCTED_FUNCTION = '30'; // The caller of this function must be a lending pool or a sub-balance operator\\n\\n  string public constant RL_RESERVE_ALREADY_INITIALIZED = '32'; // Reserve has already been initialized\\n  string public constant CALLER_NOT_POOL_ADMIN = '33'; // The caller must be the pool admin\\n  string public constant LPC_RESERVE_LIQUIDITY_NOT_0 = '34'; // The liquidity of the reserve needs to be 0\\n\\n  string public constant LPAPR_PROVIDER_NOT_REGISTERED = '41'; // Provider is not registered\\n  string public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '42'; // Health factor is not below the threshold\\n  string public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = '43'; // The collateral chosen cannot be liquidated\\n  string public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '44'; // User did not borrow the specified currency\\n  string public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = '45'; // There isn't enough liquidity available to liquidate\\n\\n  string public constant MATH_MULTIPLICATION_OVERFLOW = '48';\\n  string public constant MATH_ADDITION_OVERFLOW = '49';\\n  string public constant MATH_DIVISION_BY_ZERO = '50';\\n  string public constant RL_LIQUIDITY_INDEX_OVERFLOW = '51'; //  Liquidity index overflows uint128\\n  string public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = '52'; //  Variable borrow index overflows uint128\\n  string public constant RL_LIQUIDITY_RATE_OVERFLOW = '53'; //  Liquidity rate overflows uint128\\n  string public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = '54'; //  Variable borrow rate overflows uint128\\n  string public constant RL_STABLE_BORROW_RATE_OVERFLOW = '55'; //  Stable borrow rate overflows uint128\\n  string public constant CT_INVALID_MINT_AMOUNT = '56'; //invalid amount to mint\\n  string public constant CALLER_NOT_STAKE_ADMIN = '57';\\n  string public constant CT_INVALID_BURN_AMOUNT = '58'; //invalid amount to burn\\n  string public constant BORROW_ALLOWANCE_NOT_ENOUGH = '59'; // User borrows on behalf, but allowance are too small\\n  string public constant CALLER_NOT_LIQUIDITY_CONTROLLER = '60';\\n  string public constant CALLER_NOT_REF_ADMIN = '61';\\n  string public constant VL_INSUFFICIENT_REWARD_AVAILABLE = '62';\\n  string public constant LP_CALLER_MUST_BE_DEPOSIT_TOKEN = '63';\\n  string public constant LP_IS_PAUSED = '64'; // Pool is paused\\n  string public constant LP_NO_MORE_RESERVES_ALLOWED = '65';\\n  string public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = '66';\\n  string public constant RC_INVALID_LTV = '67';\\n  string public constant RC_INVALID_LIQ_THRESHOLD = '68';\\n  string public constant RC_INVALID_LIQ_BONUS = '69';\\n  string public constant RC_INVALID_DECIMALS = '70';\\n  string public constant RC_INVALID_RESERVE_FACTOR = '71';\\n  string public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = '72';\\n  string public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = '73';\\n  string public constant VL_TREASURY_REQUIRED = '74';\\n  string public constant LPC_INVALID_CONFIGURATION = '75'; // Invalid risk parameters for the reserve\\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = '76'; // The caller must be the emergency admin\\n  string public constant UL_INVALID_INDEX = '77';\\n  string public constant VL_CONTRACT_REQUIRED = '78';\\n  string public constant SDT_STABLE_DEBT_OVERFLOW = '79';\\n  string public constant SDT_BURN_EXCEEDS_BALANCE = '80';\\n  string public constant CALLER_NOT_REWARD_CONFIG_ADMIN = '81'; // The caller of this function must be a reward admin\\n  string public constant LP_INVALID_PERCENTAGE = '82'; // Percentage can't be more than 100%\\n  string public constant LP_IS_NOT_TRUSTED_FLASHLOAN = '83';\\n  string public constant CALLER_NOT_SWEEP_ADMIN = '84';\\n  string public constant LP_TOO_MANY_NESTED_CALLS = '85';\\n  string public constant LP_RESTRICTED_FEATURE = '86';\\n  string public constant LP_TOO_MANY_FLASHLOAN_CALLS = '87';\\n  string public constant RW_BASELINE_EXCEEDED = '88';\\n  string public constant CALLER_NOT_REWARD_RATE_ADMIN = '89';\\n  string public constant CALLER_NOT_REWARD_CONTROLLER = '90';\\n  string public constant RW_REWARD_PAUSED = '91';\\n  string public constant CALLER_NOT_TEAM_MANAGER = '92';\\n  string public constant STK_REDEEM_PAUSED = '93';\\n  string public constant STK_INSUFFICIENT_COOLDOWN = '94';\\n  string public constant STK_UNSTAKE_WINDOW_FINISHED = '95';\\n  string public constant STK_INVALID_BALANCE_ON_COOLDOWN = '96';\\n  string public constant STK_EXCESSIVE_SLASH_PCT = '97';\\n  string public constant STK_WRONG_COOLDOWN_OR_UNSTAKE = '98';\\n  string public constant STK_PAUSED = '99';\\n\\n  string public constant TXT_OWNABLE_CALLER_NOT_OWNER = 'Ownable: caller is not the owner';\\n  string public constant TXT_CALLER_NOT_PROXY_OWNER = 'ProxyOwner: caller is not the owner';\\n  string public constant TXT_ACCESS_RESTRICTED = 'RESTRICTED';\\n}\\n\"\r\n    },\r\n    \"contracts/tools/math/PercentageMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../Errors.sol';\\n\\n/// @dev Percentages are defined in basis points. The precision is indicated by ONE. Operations are rounded half up.\\nlibrary PercentageMath {\\n  uint16 public constant BP = 1; // basis point\\n  uint16 public constant PCT = 100 * BP; // basis points per percentage point\\n  uint16 public constant ONE = 100 * PCT; // basis points per 1 (100%)\\n  uint16 public constant HALF_ONE = ONE / 2;\\n  // deprecated\\n  uint256 public constant PERCENTAGE_FACTOR = ONE; //percentage plus two decimals\\n\\n  /**\\n   * @dev Executes a percentage multiplication\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param factor Basis points of the value to be calculated\\n   * @return The percentage of value\\n   **/\\n  function percentMul(uint256 value, uint256 factor) internal pure returns (uint256) {\\n    if (value == 0 || factor == 0) {\\n      return 0;\\n    }\\n\\n    require(value <= (type(uint256).max - HALF_ONE) / factor, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (value * factor + HALF_ONE) / ONE;\\n  }\\n\\n  /**\\n   * @dev Executes a percentage division\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param factor Basis points of the value to be calculated\\n   * @return The value divided the percentage\\n   **/\\n  function percentDiv(uint256 value, uint256 factor) internal pure returns (uint256) {\\n    require(factor != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfFactor = factor >> 1;\\n\\n    require(value <= (type(uint256).max - halfFactor) / ONE, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (value * ONE + halfFactor) / factor;\\n  }\\n\\n  function percentOf(uint256 value, uint256 base) internal pure returns (uint256) {\\n    require(base != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    if (value == 0) {\\n      return 0;\\n    }\\n\\n    require(value <= (type(uint256).max - HALF_ONE) / ONE, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (value * ONE + (base >> 1)) / base;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/configuration/ReserveConfiguration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../../tools/Errors.sol';\\nimport '../types/DataTypes.sol';\\n\\n/// @dev ReserveConfiguration library, implements the bitmap logic to handle the reserve configuration\\nlibrary ReserveConfiguration {\\n  uint256 private constant LTV_MASK =                   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n  uint256 private constant LIQUIDATION_THRESHOLD_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\n  uint256 private constant LIQUIDATION_BONUS_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\n  uint256 private constant DECIMALS_MASK =              0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\\n  uint256 private constant ACTIVE_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 private constant FROZEN_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 private constant BORROWING_MASK =             0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 private constant STABLE_BORROWING_MASK =      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 private constant RESERVE_FACTOR_MASK =        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 private constant STRATEGY_TYPE_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n\\n  /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\n  uint256 private constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\n  uint256 private constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\n  uint256 private constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\\n  uint256 private constant RESERVE_FACTOR_START_BIT_POSITION = 64;\\n\\n  uint256 private constant MAX_VALID_LTV = 65535;\\n  uint256 private constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\\n  uint256 private constant MAX_VALID_LIQUIDATION_BONUS = 65535;\\n  uint256 private constant MAX_VALID_DECIMALS = 255;\\n  uint256 private constant MAX_VALID_RESERVE_FACTOR = 65535;\\n\\n  /// @dev Sets the Loan to Value of the reserve\\n  function setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {\\n    require(ltv <= MAX_VALID_LTV, Errors.RC_INVALID_LTV);\\n\\n    self.data = (self.data & LTV_MASK) | ltv;\\n  }\\n\\n  /// @dev Gets the Loan to Value of the reserve\\n  function getLtv(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n    return self.data & ~LTV_MASK;\\n  }\\n\\n  function setLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self, uint256 threshold) internal pure {\\n    require(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, Errors.RC_INVALID_LIQ_THRESHOLD);\\n\\n    self.data = (self.data & LIQUIDATION_THRESHOLD_MASK) | (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\n  }\\n\\n  function getLiquidationThreshold(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n    return (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\n  }\\n\\n  function setLiquidationBonus(DataTypes.ReserveConfigurationMap memory self, uint256 bonus) internal pure {\\n    require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.RC_INVALID_LIQ_BONUS);\\n\\n    self.data = (self.data & LIQUIDATION_BONUS_MASK) | (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\n  }\\n\\n  function getLiquidationBonus(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n    return (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;\\n  }\\n\\n  function setDecimals(DataTypes.ReserveConfigurationMap memory self, uint256 decimals) internal pure {\\n    require(decimals <= MAX_VALID_DECIMALS, Errors.RC_INVALID_DECIMALS);\\n\\n    self.data = (self.data & DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\\n  }\\n\\n  function getDecimals(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n    return (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\\n  }\\n\\n  function getDecimalsMemory(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint8) {\\n    return uint8((self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION);\\n  }\\n\\n  function _setFlag(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint256 mask,\\n    bool value\\n  ) internal pure {\\n    if (value) {\\n      self.data |= ~mask;\\n    } else {\\n      self.data &= mask;\\n    }\\n  }\\n\\n  function setActive(DataTypes.ReserveConfigurationMap memory self, bool active) internal pure {\\n    _setFlag(self, ACTIVE_MASK, active);\\n  }\\n\\n  function getActive(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\n    return (self.data & ~ACTIVE_MASK) != 0;\\n  }\\n\\n  function setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {\\n    _setFlag(self, FROZEN_MASK, frozen);\\n  }\\n\\n  function getFrozen(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\n    return (self.data & ~FROZEN_MASK) != 0;\\n  }\\n\\n  function getFrozenMemory(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\\n    return (self.data & ~FROZEN_MASK) != 0;\\n  }\\n\\n  function setBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled) internal pure {\\n    _setFlag(self, BORROWING_MASK, enabled);\\n  }\\n\\n  function getBorrowingEnabled(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\n    return (self.data & ~BORROWING_MASK) != 0;\\n  }\\n\\n  function setStableRateBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled) internal pure {\\n    _setFlag(self, STABLE_BORROWING_MASK, enabled);\\n  }\\n\\n  function getStableRateBorrowingEnabled(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\n    return (self.data & ~STABLE_BORROWING_MASK) != 0;\\n  }\\n\\n  function setReserveFactor(DataTypes.ReserveConfigurationMap memory self, uint256 reserveFactor) internal pure {\\n    require(reserveFactor <= MAX_VALID_RESERVE_FACTOR, Errors.RC_INVALID_RESERVE_FACTOR);\\n\\n    self.data = (self.data & RESERVE_FACTOR_MASK) | (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\\n  }\\n\\n  function getReserveFactor(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n    return (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION;\\n  }\\n\\n  /// @dev Returns flags: active, frozen, borrowing enabled, stableRateBorrowing enabled\\n  function getFlags(DataTypes.ReserveConfigurationMap storage self)\\n    internal\\n    view\\n    returns (\\n      bool,\\n      bool,\\n      bool,\\n      bool\\n    )\\n  {\\n    return _getFlags(self.data);\\n  }\\n\\n  function getFlagsMemory(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (\\n      bool active,\\n      bool frozen,\\n      bool borrowEnable,\\n      bool stableBorrowEnable\\n    )\\n  {\\n    return _getFlags(self.data);\\n  }\\n\\n  function _getFlags(uint256 data)\\n    private\\n    pure\\n    returns (\\n      bool,\\n      bool,\\n      bool,\\n      bool\\n    )\\n  {\\n    return (\\n      (data & ~ACTIVE_MASK) != 0,\\n      (data & ~FROZEN_MASK) != 0,\\n      (data & ~BORROWING_MASK) != 0,\\n      (data & ~STABLE_BORROWING_MASK) != 0\\n    );\\n  }\\n\\n  /// @dev Paramters of the reserve: ltv, liquidation threshold, liquidation bonus, the reserve decimals\\n  function getParams(DataTypes.ReserveConfigurationMap storage self)\\n    internal\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    return _getParams(self.data);\\n  }\\n\\n  /// @dev Paramters of the reserve: ltv, liquidation threshold, liquidation bonus, the reserve decimals\\n  function getParamsMemory(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    return _getParams(self.data);\\n  }\\n\\n  function _getParams(uint256 dataLocal)\\n    private\\n    pure\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    return (\\n      dataLocal & ~LTV_MASK,\\n      (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n      (dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\\n      (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n      (dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\\n    );\\n  }\\n\\n  function isExternalStrategyMemory(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\\n    return (self.data & ~STRATEGY_TYPE_MASK) != 0;\\n  }\\n\\n  function isExternalStrategy(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\n    return (self.data & ~STRATEGY_TYPE_MASK) != 0;\\n  }\\n\\n  function setExternalStrategy(DataTypes.ReserveConfigurationMap memory self, bool isExternal) internal pure {\\n    _setFlag(self, STRATEGY_TYPE_MASK, isExternal);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/types/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address depositTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the reserve strategy\\n    address strategy;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    //bit 80: strategy is external\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n\\n  struct InitReserveData {\\n    address asset;\\n    address depositTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address strategy;\\n    bool externalStrategy;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/tokenization/interfaces/IInitializablePoolToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './PoolTokenConfig.sol';\\n\\n/// @dev Interface for the initialize function on PoolToken or DebtToken\\ninterface IInitializablePoolToken {\\n  event Initialized(\\n    address indexed underlyingAsset,\\n    address indexed pool,\\n    address treasury,\\n    string tokenName,\\n    string tokenSymbol,\\n    uint8 tokenDecimals,\\n    bytes params\\n  );\\n\\n  /// @dev Initializes the depositToken\\n  function initialize(\\n    PoolTokenConfig calldata config,\\n    string calldata tokenName,\\n    string calldata tokenSymbol,\\n    bytes calldata params\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/tokenization/interfaces/PoolTokenConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nstruct PoolTokenConfig {\\n  // Address of the associated lending pool\\n  address pool;\\n  // Address of the treasury\\n  address treasury;\\n  // Address of the underlying asset\\n  address underlyingAsset;\\n  // Decimals of the underlying asset\\n  uint8 underlyingDecimals;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEmergencyAccessGroup.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IEmergencyAccessGroup {\\n  function setPausedFor(address subject, bool paused) external;\\n\\n  function isPausedFor(address subject) external view returns (bool);\\n\\n  function listEmergencyGroup() external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/access/interfaces/IAccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IRemoteAccessBitmask.sol';\\nimport '../../tools/upgradeability/IProxy.sol';\\n\\n/// @dev Main registry of permissions and addresses\\ninterface IAccessController is IRemoteAccessBitmask {\\n  function getAddress(uint256 id) external view returns (address);\\n\\n  function createProxy(\\n    address admin,\\n    address impl,\\n    bytes calldata params\\n  ) external returns (IProxy);\\n}\\n\"\r\n    },\r\n    \"contracts/access/interfaces/IRemoteAccessBitmask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IRemoteAccessBitmask {\\n  /**\\n   * @dev Returns access flags granted to the given address and limited by the filterMask. filterMask == 0 has a special meaning.\\n   * @param addr an to get access perfmissions for\\n   * @param filterMask limits a subset of flags to be checked.\\n   * NB! When filterMask == 0 then zero is returned no flags granted, or an unspecified non-zero value otherwise.\\n   * @return Access flags currently granted\\n   */\\n  function queryAccessControlMask(address addr, uint256 filterMask) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/access/AccessHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './interfaces/IRemoteAccessBitmask.sol';\\n\\n/// @dev Helper/wrapper around IRemoteAccessBitmask\\nlibrary AccessHelper {\\n  function getAcl(IRemoteAccessBitmask remote, address subject) internal view returns (uint256) {\\n    return remote.queryAccessControlMask(subject, ~uint256(0));\\n  }\\n\\n  function queryAcl(\\n    IRemoteAccessBitmask remote,\\n    address subject,\\n    uint256 filterMask\\n  ) internal view returns (uint256) {\\n    return remote.queryAccessControlMask(subject, filterMask);\\n  }\\n\\n  function hasAnyOf(\\n    IRemoteAccessBitmask remote,\\n    address subject,\\n    uint256 flags\\n  ) internal view returns (bool) {\\n    uint256 found = queryAcl(remote, subject, flags);\\n    return found & flags != 0;\\n  }\\n\\n  function hasAny(IRemoteAccessBitmask remote, address subject) internal view returns (bool) {\\n    return remote.queryAccessControlMask(subject, 0) != 0;\\n  }\\n\\n  function hasNone(IRemoteAccessBitmask remote, address subject) internal view returns (bool) {\\n    return remote.queryAccessControlMask(subject, 0) == 0;\\n  }\\n\\n  function requireAnyOf(\\n    IRemoteAccessBitmask remote,\\n    address subject,\\n    uint256 flags,\\n    string memory text\\n  ) internal view {\\n    require(hasAnyOf(remote, subject, flags), text);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/access/AccessFlags.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nlibrary AccessFlags {\\n  // roles that can be assigned to multiple addresses - use range [0..15]\\n  uint256 public constant EMERGENCY_ADMIN = 1 << 0;\\n  uint256 public constant POOL_ADMIN = 1 << 1;\\n  uint256 public constant TREASURY_ADMIN = 1 << 2;\\n  uint256 public constant REWARD_CONFIG_ADMIN = 1 << 3;\\n  uint256 public constant REWARD_RATE_ADMIN = 1 << 4;\\n  uint256 public constant STAKE_ADMIN = 1 << 5;\\n  uint256 public constant REFERRAL_ADMIN = 1 << 6;\\n  uint256 public constant LENDING_RATE_ADMIN = 1 << 7;\\n  uint256 public constant SWEEP_ADMIN = 1 << 8;\\n  uint256 public constant ORACLE_ADMIN = 1 << 9;\\n\\n  uint256 public constant ROLES = (uint256(1) << 16) - 1;\\n\\n  // singletons - use range [16..64] - can ONLY be assigned to a single address\\n  uint256 public constant SINGLETONS = ((uint256(1) << 64) - 1) & ~ROLES;\\n\\n  // proxied singletons\\n  uint256 public constant LENDING_POOL = 1 << 16;\\n  uint256 public constant LENDING_POOL_CONFIGURATOR = 1 << 17;\\n  uint256 public constant LIQUIDITY_CONTROLLER = 1 << 18;\\n  uint256 public constant TREASURY = 1 << 19;\\n  uint256 public constant REWARD_TOKEN = 1 << 20;\\n  uint256 public constant REWARD_STAKE_TOKEN = 1 << 21;\\n  uint256 public constant REWARD_CONTROLLER = 1 << 22;\\n  uint256 public constant REWARD_CONFIGURATOR = 1 << 23;\\n  uint256 public constant STAKE_CONFIGURATOR = 1 << 24;\\n  uint256 public constant REFERRAL_REGISTRY = 1 << 25;\\n\\n  uint256 public constant PROXIES = ((uint256(1) << 26) - 1) & ~ROLES;\\n\\n  // non-proxied singletons, numbered down from 31 (as JS has problems with bitmasks over 31 bits)\\n  uint256 public constant WETH_GATEWAY = 1 << 27;\\n  uint256 public constant DATA_HELPER = 1 << 28;\\n  uint256 public constant PRICE_ORACLE = 1 << 29;\\n  uint256 public constant LENDING_RATE_ORACLE = 1 << 30;\\n\\n  // any other roles - use range [64..]\\n  // these roles can be assigned to multiple addresses\\n\\n  uint256 public constant TRUSTED_FLASHLOAN = 1 << 66;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEmergencyAccess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IEmergencyAccess {\\n  function setPaused(bool paused) external;\\n\\n  function isPaused() external view returns (bool);\\n\\n  event EmergencyPaused(address indexed by, bool paused);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"BorrowingDisabledOnReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"stableRateEnabled\",\"type\":\"bool\"}],\"name\":\"BorrowingEnabledOnReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationBonus\",\"type\":\"uint256\"}],\"name\":\"CollateralConfigurationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"DepositTokenUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"ReserveActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"ReserveDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"}],\"name\":\"ReserveFactorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"ReserveFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stableDebtToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"variableDebtToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"externalStrategy\",\"type\":\"bool\"}],\"name\":\"ReserveInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExternal\",\"type\":\"bool\"}],\"name\":\"ReserveStrategyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"ReserveUnfrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"StableDebtTokenUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"StableRateDisabledOnReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"StableRateEnabledOnReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"VariableDebtTokenUpgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"activateReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"depositTokenImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtTokenImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtTokenImpl\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"underlyingAssetDecimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"externalStrategy\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"depositTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"depositTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"variableDebtTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"variableDebtTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stableDebtTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stableDebtTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct ILendingPoolConfigurator.InitReserveInput[]\",\"name\":\"input\",\"type\":\"tuple[]\"}],\"name\":\"batchInitReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationBonus\",\"type\":\"uint256\"}],\"name\":\"configureReserveAsCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseLTV\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"borrowingEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"stableBorrowingEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct ILendingPoolConfigurator.ConfigureReserveInput[]\",\"name\":\"inputParams\",\"type\":\"tuple[]\"}],\"name\":\"configureReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"deactivateReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"disableBorrowingOnReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"disableReserveStableRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stableBorrowRateEnabled\",\"type\":\"bool\"}],\"name\":\"enableBorrowingOnReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"enableReserveStableRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"freezeReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"}],\"name\":\"getFlashloanAdapters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"implementationOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMarketAccessController\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"isPausedFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listEmergencyGroup\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"name\":\"setFlashloanAdapters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setPausedFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"}],\"name\":\"setReserveFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExternal\",\"type\":\"bool\"}],\"name\":\"setReserveStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"unfreezeReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct ILendingPoolConfigurator.UpdatePoolTokenInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"updateDepositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct ILendingPoolConfigurator.UpdatePoolTokenInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"updateStableDebtToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct ILendingPoolConfigurator.UpdatePoolTokenInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"updateVariableDebtToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LendingPoolConfigurator","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}