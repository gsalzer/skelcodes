{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\ninterface IConvertPortal {\r\n  function isConvertibleToCOT(address _token, uint256 _amount)\r\n  external\r\n  view\r\n  returns(uint256);\r\n\r\n  function isConvertibleToETH(address _token, uint256 _amount)\r\n  external\r\n  view\r\n  returns(uint256);\r\n\r\n  function convertTokenToCOT(address _token, uint256 _amount)\r\n  external\r\n  returns (uint256 cotAmount);\r\n\r\n  function convertETHToCOT(uint256 _amount)\r\n  external\r\n  payable\r\n  returns (uint256 cotAmount);\r\n\r\n  function convertTokenToCOTViaETHHelp(address _token, uint256 _amount)\r\n  external\r\n  returns (uint256 cotAmount);\r\n}\r\ninterface IStake {\r\n  function notifyRewardAmount(uint256 reward) external;\r\n}\r\n/**\r\n* This contract get platform % from CoTrader managers profit and then distributes assets\r\n* to burn, stake and platform\r\n*\r\n* NOTE: 51% CoTrader token holders can change owner of this contract\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ncontract CoTraderDAOWallet is Ownable{\r\n  using SafeMath for uint256;\r\n  // COT address\r\n  IERC20 public COT;\r\n  // exchange portal for convert tokens to COT\r\n  IConvertPortal public convertPortal;\r\n  // stake contract\r\n  IStake public stake;\r\n  // array of voters\r\n  address[] public voters;\r\n  // voter => candidate\r\n  mapping(address => address) public candidatesMap;\r\n  // voter => register status\r\n  mapping(address => bool) public votersMap;\r\n  // this contract recognize ETH by this address\r\n  IERC20 constant private ETH_TOKEN_ADDRESS = IERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n  // burn address\r\n  address public deadAddress = address(0x000000000000000000000000000000000000dEaD);\r\n  // destribution percents\r\n  uint256 public burnPercent = 50;\r\n  uint256 public stakePercent = 10;\r\n  uint256 public withdrawPercent = 40;\r\n\r\n\r\n  /**\r\n  * @dev contructor\r\n  *\r\n  * @param _COT                           address of CoTrader ERC20\r\n  * @param _stake                         address of Stake contract\r\n  * @param _convertPortal                 address of exchange contract\r\n  */\r\n  constructor(address _COT, address _stake, address _convertPortal) public {\r\n    COT = IERC20(_COT);\r\n    stake = IStake(_stake);\r\n    convertPortal = IConvertPortal(_convertPortal);\r\n  }\r\n\r\n  // send assets to burn address\r\n  function _burn(IERC20 _token, uint256 _amount) private {\r\n    uint256 cotAmount = (_token == COT)\r\n    ? _amount\r\n    : convertTokenToCOT(address(_token), _amount);\r\n\r\n    if(cotAmount > 0)\r\n      COT.transfer(deadAddress, cotAmount);\r\n  }\r\n\r\n  // send assets to stake contract\r\n  function _stake(IERC20 _token, uint256 _amount) private {\r\n    uint256 cotAmount = (_token == COT)\r\n    ? _amount\r\n    : convertTokenToCOT(address(_token), _amount);\r\n\r\n    if(cotAmount > 0){\r\n      COT.transfer(address(stake), cotAmount);\r\n      stake.notifyRewardAmount(cotAmount);\r\n    }\r\n  }\r\n\r\n  // send assets to owner\r\n  function _withdraw(IERC20 _token, uint256 _amount) private {\r\n    if(_amount > 0)\r\n      if(_token == ETH_TOKEN_ADDRESS){\r\n        payable(owner).transfer(_amount);\r\n      }else{\r\n        _token.transfer(owner, _amount);\r\n      }\r\n  }\r\n\r\n  /**\r\n  * @dev destribute assest from this contract to stake, burn, and owner of this contract\r\n  *\r\n  * @param tokens                          array of token addresses for destribute\r\n  */\r\n  function destribute(IERC20[] memory tokens) external {\r\n   for(uint i = 0; i < tokens.length; i++){\r\n      // get current token balance\r\n      uint256 curentTokenTotalBalance = getTokenBalance(tokens[i]);\r\n\r\n      // get destribution percent\r\n      uint256 burnAmount = curentTokenTotalBalance.div(100).mul(burnPercent);\r\n      uint256 stakeAmount = curentTokenTotalBalance.div(100).mul(stakePercent);\r\n      uint256 managerAmount = curentTokenTotalBalance.div(100).mul(withdrawPercent);\r\n\r\n      // destribute\r\n      _burn(tokens[i], burnAmount);\r\n      _stake(tokens[i], stakeAmount);\r\n      _withdraw(tokens[i], managerAmount);\r\n    }\r\n  }\r\n\r\n  // return balance of ERC20 or ETH for this contract\r\n  function getTokenBalance(IERC20 _token) public view returns(uint256){\r\n    if(_token == ETH_TOKEN_ADDRESS){\r\n      return address(this).balance;\r\n    }else{\r\n      return _token.balanceOf(address(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Owner can withdraw non convertible token if this token,\r\n  * can't be converted to COT directly or to COT via ETH\r\n  *\r\n  *\r\n  * @param _token                          address of token\r\n  * @param _amount                         amount of token\r\n  */\r\n  function withdrawNonConvertibleERC(address _token, uint256 _amount) external onlyOwner {\r\n    uint256 cotReturnAmount = convertPortal.isConvertibleToCOT(_token, _amount);\r\n    uint256 ethReturnAmount = convertPortal.isConvertibleToETH(_token, _amount);\r\n\r\n    require(IERC20(_token) != ETH_TOKEN_ADDRESS, \"token can not be a ETH\");\r\n    require(cotReturnAmount == 0, \"token can not be converted to COT\");\r\n    require(ethReturnAmount == 0, \"token can not be converted to ETH\");\r\n\r\n    IERC20(_token).transfer(owner, _amount);\r\n  }\r\n\r\n  /**\r\n  * Owner can update total destribution percent\r\n  *\r\n  *\r\n  * @param _stakePercent          percent to stake\r\n  * @param _burnPercent           percent to burn\r\n  * @param _withdrawPercent       percent to withdraw\r\n  */\r\n  function updateDestributionPercent(\r\n    uint256 _stakePercent,\r\n    uint256 _burnPercent,\r\n    uint256 _withdrawPercent\r\n  )\r\n   external\r\n   onlyOwner\r\n  {\r\n    require(_withdrawPercent <= 40, \"Too big for withdraw\");\r\n\r\n    stakePercent = _stakePercent;\r\n    burnPercent = _burnPercent;\r\n    withdrawPercent = _withdrawPercent;\r\n\r\n    uint256 total = _stakePercent.add(_burnPercent).add(_withdrawPercent);\r\n    require(total == 100, \"Wrong total\");\r\n  }\r\n\r\n  /**\r\n  * @dev this function try convert token to COT via DEXs which has COT in circulation\r\n  * if there are no such pair on this COT supporting DEXs, function try convert to COT on another DEXs\r\n  * via convert ERC20 input to ETH, and then ETH to COT on COT supporting DEXs.\r\n  * If such a conversion is not possible return 0 for cotAmount\r\n  *\r\n  *\r\n  * @param _token                          address of token\r\n  * @param _amount                         amount of token\r\n  */\r\n  function convertTokenToCOT(address _token, uint256 _amount)\r\n    private\r\n    returns(uint256 cotAmount)\r\n  {\r\n    // try convert current token to COT directly\r\n    uint256 cotReturnAmount = convertPortal.isConvertibleToCOT(_token, _amount);\r\n    if(cotReturnAmount > 0) {\r\n      // Convert via ETH directly\r\n      if(IERC20(_token) == ETH_TOKEN_ADDRESS){\r\n        cotAmount = convertPortal.convertETHToCOT.value(_amount)(_amount);\r\n      }\r\n      // Convert via COT directly\r\n      else{\r\n        IERC20(_token).approve(address(convertPortal), _amount);\r\n        cotAmount = convertPortal.convertTokenToCOT(address(_token), _amount);\r\n      }\r\n    }\r\n    // Convert current token to COT via ETH help\r\n    else {\r\n      // Try convert token to cot via eth help\r\n      uint256 ethReturnAmount = convertPortal.isConvertibleToETH(_token, _amount);\r\n      if(ethReturnAmount > 0) {\r\n        IERC20(_token).approve(address(convertPortal), _amount);\r\n        cotAmount = convertPortal.convertTokenToCOTViaETHHelp(address(_token), _amount);\r\n      }\r\n      // there are no way convert token to COT\r\n      else{\r\n        cotAmount = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  // owner can change version of exchange portal contract\r\n  function changeConvertPortal(address _newConvertPortal)\r\n   external\r\n   onlyOwner\r\n  {\r\n    convertPortal = IConvertPortal(_newConvertPortal);\r\n  }\r\n\r\n  // owner can set new stake address for case if previos stake progarm finished\r\n  function updateStakeAddress(address _newStake) external onlyOwner {\r\n    stake = IStake(_newStake);\r\n  }\r\n\r\n\r\n  /*\r\n  ** VOTE LOGIC\r\n  *\r\n  *  users can change owner if total COT balance of all voters for a certain candidate\r\n  *  more than 50% of COT total supply\r\n  *\r\n  */\r\n\r\n  // register a new vote wallet\r\n  function voterRegister() external {\r\n    require(!votersMap[msg.sender], \"not allowed register the same wallet twice\");\r\n    // register a new wallet\r\n    voters.push(msg.sender);\r\n    votersMap[msg.sender] = true;\r\n  }\r\n\r\n  // vote for a certain candidate address\r\n  function vote(address _candidate) external {\r\n    require(votersMap[msg.sender], \"wallet must be registered to vote\");\r\n    // vote for a certain candidate\r\n    candidatesMap[msg.sender] = _candidate;\r\n  }\r\n\r\n  // return half of (total supply - burned balance)\r\n  function calculateCOTHalfSupply() public view returns(uint256){\r\n    uint256 supply = COT.totalSupply();\r\n    uint256 burned = COT.balanceOf(deadAddress);\r\n    return supply.sub(burned).div(2);\r\n  }\r\n\r\n  // calculate all vote subscribers for a certain candidate\r\n  // return balance of COT of all voters of a certain candidate\r\n  function calculateVoters(address _candidate) public view returns(uint256){\r\n    uint256 count;\r\n    for(uint i = 0; i<voters.length; i++){\r\n      // take into account current voter balance\r\n      // if this user voted for current candidate\r\n      if(_candidate == candidatesMap[voters[i]]){\r\n          count = count.add(COT.balanceOf(voters[i]));\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\r\n  // Any user can change owner with a certain candidate\r\n  // if this candidate address have 51% voters\r\n  function changeOwner(address _newOwner) external {\r\n    // get vote data\r\n    uint256 totalVotersBalance = calculateVoters(_newOwner);\r\n    // get half of COT supply in market circulation\r\n    uint256 totalCOT = calculateCOTHalfSupply();\r\n    // require 51% COT on voters balance\r\n    require(totalVotersBalance > totalCOT);\r\n    // change owner\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  // fallback payable function to receive ether from other contract addresses\r\n  fallback() external payable {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_COT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_convertPortal\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"COT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateCOTHalfSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"calculateVoters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"candidatesMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newConvertPortal\",\"type\":\"address\"}],\"name\":\"changeConvertPortal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convertPortal\",\"outputs\":[{\"internalType\":\"contract IConvertPortal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"destribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"contract IStake\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawPercent\",\"type\":\"uint256\"}],\"name\":\"updateDestributionPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStake\",\"type\":\"address\"}],\"name\":\"updateStakeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voterRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votersMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNonConvertibleERC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CoTraderDAOWallet","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005c872500c00565505f3624ab435c222e558e9ff800000000000000000000000022053735fc5a6a69e782d8f5b41d239eca24630c00000000000000000000000042c5f95e15ee6a236722248daf47909a3561d88e","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://53747a8e4b8231f1a5e6fbb04a9a8781f3580151b8a06734654de852cb31673e"}]}