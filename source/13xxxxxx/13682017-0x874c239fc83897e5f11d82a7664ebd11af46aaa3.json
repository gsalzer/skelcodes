{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IVault is IERC20 {\r\n    function token() external view returns (address);\r\n\r\n    function claimInsurance() external; // NOTE: Only yDelegatedVault implements this\r\n\r\n    function getRatio() external view returns (uint256);\r\n\r\n    function deposit(uint256) external;\r\n\r\n    function withdraw(uint256) external;\r\n\r\n    function earn() external;\r\n}\r\n\r\ninterface UniswapRouterV2 {\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IController {\r\n    function vaults(address) external view returns (address);\r\n\r\n    function devfund() external view returns (address);\r\n\r\n    function treasury() external view returns (address);\r\n}\r\n\r\ninterface IMasterchef {\r\n    function notifyBuybackReward(uint256 _amount) external;\r\n}\r\n\r\n// Strategy Contract Basics\r\nabstract contract StrategyBase {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n    \r\n    // caller whom this strategy trust \r\n    mapping(address => bool) public benignCallers;\r\n\r\n    // Perfomance fee 30% to buyback\r\n    uint256 public performanceFee = 30000;\r\n    uint256 public constant performanceMax = 100000;\r\n\r\n    // Withdrawal fee 0.00% to buyback\r\n    // - 0.00% to treasury\r\n    // - 0.00% to dev fund\r\n    uint256 public treasuryFee = 0;\r\n    uint256 public constant treasuryMax = 100000;\r\n\r\n    uint256 public devFundFee = 0;\r\n    uint256 public constant devFundMax = 100000;\r\n\r\n    // delay yield profit realization\r\n    uint256 public delayBlockRequired = 1000;\r\n    uint256 public lastHarvestBlock;\r\n    uint256 public lastHarvestInWant;\r\n\r\n    // buyback ready\r\n    bool public buybackEnabled = true;\r\n    address public mmToken = 0xa283aA7CfBB27EF0cfBcb2493dD9F4330E0fd304;\r\n    address public masterChef = 0xf8873a6080e8dbF41ADa900498DE0951074af577;\r\n\r\n    // Tokens\r\n    address public want;\r\n    address public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    // User accounts\r\n    address public governance;\r\n    address public controller;\r\n    address public strategist;\r\n    address public timelock;\r\n\r\n    // Dex\r\n    address public univ2Router2 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n    //Sushi\r\n    address public sushiRouter = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\r\n\r\n    constructor(\r\n        address _want,\r\n        address _governance,\r\n        address _strategist,\r\n        address _controller,\r\n        address _timelock\r\n    ) public {\r\n        require(_want != address(0));\r\n        require(_governance != address(0));\r\n        require(_strategist != address(0));\r\n        require(_controller != address(0));\r\n        require(_timelock != address(0));\r\n\r\n        want = _want;\r\n        governance = _governance;\r\n        strategist = _strategist;\r\n        controller = _controller;\r\n        timelock = _timelock;\r\n    }\r\n\r\n    // **** Modifiers **** //\r\n\r\n    modifier onlyBenevolent {\r\n        // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-3074.md#allowing-txorigin-as-signer\r\n        require(msg.sender == governance || msg.sender == strategist);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyBenignCallers {\r\n        require(msg.sender == governance || msg.sender == strategist || benignCallers[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    // **** Views **** //\r\n\r\n    function balanceOfWant() public view returns (uint256) {\r\n        return IERC20(want).balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOfPool() public virtual view returns (uint256);\r\n\r\n    function balanceOf() public view returns (uint256) {\r\n        uint256 delayReduction = 0;\r\n        uint256 currentBlock = block.number;\r\n        if (delayBlockRequired > 0 && lastHarvestInWant > 0 && currentBlock.sub(lastHarvestBlock) < delayBlockRequired){\r\n            uint256 diffBlock = lastHarvestBlock.add(delayBlockRequired).sub(currentBlock);\r\n            delayReduction = lastHarvestInWant.mul(diffBlock).mul(1e18).div(delayBlockRequired).div(1e18);\r\n        }\r\n        return balanceOfWant().add(balanceOfPool()).sub(delayReduction);\r\n    }\r\n\r\n    function getName() external virtual pure returns (string memory);\r\n\r\n    // **** Setters **** //\r\n\r\n    function setBenignCallers(address _caller, bool _enabled) external{\r\n        require(msg.sender == governance, \"!governance\");\r\n        benignCallers[_caller] = _enabled;\r\n    }\r\n\r\n    function setDelayBlockRequired(uint256 _delayBlockRequired) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        delayBlockRequired = _delayBlockRequired;\r\n    }\r\n\r\n    function setDevFundFee(uint256 _devFundFee) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        devFundFee = _devFundFee;\r\n    }\r\n\r\n    function setTreasuryFee(uint256 _treasuryFee) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        treasuryFee = _treasuryFee;\r\n    }\r\n\r\n    function setPerformanceFee(uint256 _performanceFee) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        performanceFee = _performanceFee;\r\n    }\r\n\r\n    function setStrategist(address _strategist) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        strategist = _strategist;\r\n    }\r\n\r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    function setTimelock(address _timelock) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        timelock = _timelock;\r\n    }\r\n\r\n    function setController(address _controller) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        controller = _controller;\r\n    }\r\n\r\n    function setBuybackEnabled(bool _buybackEnabled) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        buybackEnabled = _buybackEnabled;\r\n    }\r\n\r\n    function setMasterChef(address _masterChef) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        masterChef = _masterChef;\r\n    }\r\n\r\n    // **** State mutations **** //\r\n    function deposit() public virtual;\r\n\r\n    function withdraw(IERC20 _asset) external virtual returns (uint256 balance);\r\n\r\n    // Controller only function for creating additional rewards from dust\r\n    function _withdrawNonWantAsset(IERC20 _asset) internal returns (uint256 balance) {\r\n        require(msg.sender == controller, \"!controller\");\r\n        require(want != address(_asset), \"want\");\r\n        balance = _asset.balanceOf(address(this));\r\n        _asset.safeTransfer(controller, balance);\r\n    }\r\n\r\n    // Withdraw partial funds, normally used with a vault withdrawal\r\n    function withdraw(uint256 _amount) external {\r\n        require(msg.sender == controller, \"!controller\");\r\n        uint256 _balance = IERC20(want).balanceOf(address(this));\r\n        if (_balance < _amount) {\r\n            _amount = _withdrawSome(_amount.sub(_balance));\r\n            _amount = _amount.add(_balance);\r\n        }\r\n\t\t\t\t\r\n        uint256 _feeDev = _amount.mul(devFundFee).div(devFundMax);\r\n        uint256 _feeTreasury = _amount.mul(treasuryFee).div(treasuryMax);\r\n\r\n        address _vault = IController(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n\r\n        if (buybackEnabled == true && (_feeDev > 0 || _feeTreasury > 0)) {\r\n            (address _buybackPrinciple, uint256 _buybackAmount) = _convertWantToBuyback(_feeDev.add(_feeTreasury));\r\n            buybackAndNotify(_buybackPrinciple, _buybackAmount);\r\n        } \r\n\r\n        IERC20(want).safeTransfer(_vault, _amount.sub(_feeDev).sub(_feeTreasury));\r\n    }\r\n\t\r\n    // buyback MM and notify MasterChef\r\n    function buybackAndNotify(address _buybackPrinciple, uint256 _buybackAmount) internal {\r\n        if (buybackEnabled == true && _buybackAmount > 0) {\r\n            _swapUniswap(_buybackPrinciple, mmToken, _buybackAmount);\r\n            uint256 _mmBought = IERC20(mmToken).balanceOf(address(this));\r\n            IERC20(mmToken).safeTransfer(masterChef, _mmBought);\r\n            IMasterchef(masterChef).notifyBuybackReward(_mmBought);\r\n        }\r\n    }\r\n\t\r\n    // Migration for emergency, used in underlying strategy stuck case. Be careful\r\n    bool public emergencyExit;\r\n    function setEmergencyExit(bool _enable) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        emergencyExit = _enable;\r\n    }\r\n\r\n    // Withdraw all funds, normally used when migrating strategies\r\n    function withdrawAll() external returns (uint256 balance) {\r\n        require(msg.sender == controller, \"!controller\");\r\n        if (!emergencyExit) {\r\n            _withdrawAll();\r\n        }\r\n\r\n        balance = IERC20(want).balanceOf(address(this));\r\n\r\n        address _vault = IController(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n        IERC20(want).safeTransfer(_vault, balance);\r\n    }\r\n\r\n    function _withdrawAll() internal {\r\n        _withdrawSome(balanceOfPool());\r\n    }\r\n\r\n    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\t\r\n\t\r\n    // convert LP to buyback principle token\r\n    function _convertWantToBuyback(uint256 _lpAmount) internal virtual returns (address, uint256);\r\n\r\n    // each harvest need to update `lastHarvestBlock=block.number` and `lastHarvestInWant=yield profit converted to want for re-invest`\r\n    // add modifier onlyBenignCallers\r\n    function harvest() public virtual;\r\n\r\n    // **** Emergency functions ****\r\n\r\n    // **** Internal functions ****\r\n\t\r\n    function figureOutPath(address _from, address _to, uint256 _amount) public view returns (bool useSushi, address[] memory swapPath){\r\n        address[] memory path;\r\n        address[] memory sushipath;\r\n\r\n        if (_to == mmToken && buybackEnabled == true) {\r\n            path = new address[](2);\r\n            path[0] = _from;\r\n            path[1] = _to;\r\n\r\n            sushipath = new address[](2);\r\n            sushipath[0] = _from;\r\n            sushipath[1] = _to;\r\n        }\r\n\r\n        uint256 _sushiOut = sushipath.length > 0? UniswapRouterV2(sushiRouter).getAmountsOut(_amount, sushipath)[sushipath.length - 1] : 0;\r\n        uint256 _uniOut = sushipath.length > 0? UniswapRouterV2(univ2Router2).getAmountsOut(_amount, path)[path.length - 1] : 1;\r\n\r\n        bool useSushi = _sushiOut > _uniOut? true : false;\t\t\r\n        address[] memory swapPath = useSushi ? sushipath : path;\r\n\t\t\r\n        return (useSushi, swapPath);\r\n    }\r\n\t\r\n    function _swapUniswap(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal {\r\n        (bool useSushi, address[] memory swapPath) = figureOutPath(_from, _to, _amount);\r\n        address _router = useSushi? sushiRouter : univ2Router2;\r\n\t\t\r\n        _swapUniswapWithDetailConfig(_from, _to, _amount, 1, swapPath, _router);\r\n    }\r\n\t\r\n    function _swapUniswapWithDetailConfig(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        uint256 _amountOutMin,\r\n        address[] memory _swapPath,\r\n        address _router\r\n    ) internal {\r\n        require(_to != address(0), '!invalidOutToken');\r\n        require(_router != address(0), '!swapRouter');\r\n        require(IERC20(_from).balanceOf(address(this)) >= _amount, '!notEnoughtAmountIn');\r\n\r\n        if (_amount > 0){\t\t\t\r\n            IERC20(_from).safeApprove(_router, 0);\r\n            IERC20(_from).safeApprove(_router, _amount);\r\n\r\n            UniswapRouterV2(_router).swapExactTokensForTokens(\r\n                _amount,\r\n                _amountOutMin,\r\n                _swapPath,\r\n                address(this),\r\n                now\r\n            );\r\n        }\r\n    }\r\n\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n  \r\n  function latestRoundData() external view returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n  );\r\n\r\n}\r\n\r\ninterface ManagerLike {\r\n    function ilks(uint256) external view returns (bytes32);\r\n    function owns(uint256) external view returns (address);\r\n    function urns(uint256) external view returns (address);\r\n    function vat() external view returns (address);\r\n    function open(bytes32, address) external returns (uint256);\r\n    function give(uint256, address) external;\r\n    function frob(uint256, int256, int256) external;\r\n    function flux(uint256, address, uint256) external;\r\n    function move(uint256, address, uint256) external;\r\n    function exit(address, uint256, address, uint256) external;\r\n    function quit(uint256, address) external;\r\n    function enter(address, uint256) external;\r\n}\r\n\r\ninterface VatLike {\r\n    function can(address, address) external view returns (uint256);\r\n    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\r\n    function dai(address) external view returns (uint256);\r\n    function urns(bytes32, address) external view returns (uint256, uint256);\r\n    function frob(bytes32, address, address, address, int256, int256) external;\r\n    function hope(address) external;\r\n    function move(address, address, uint256) external;\r\n}\r\n\r\ninterface GemJoinLike {\r\n    function dec() external returns (uint256);\r\n    function join(address, uint256) external payable;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\ninterface DaiJoinLike {\r\n    function join(address, uint256) external payable;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\ninterface JugLike {\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\n\r\n// Base contract for MakerDAO based DAI-minting strategies\r\nabstract contract StrategyMakerBase is StrategyBase {\r\n    // MakerDAO modules\r\n    address public constant dssCdpManager = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\r\n    address public constant daiJoin = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\r\n    address public constant jug = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\r\n    address public constant vat = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\r\n    address public constant debtToken = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    uint256 public minDebt = 30001000000000000000000;\r\n    address public constant eth_usd = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\r\n\r\n    // sub-strategy related constants\r\n    address public collateral;\r\n    uint256 public collateralDecimal = 1e18;\r\n    address public gemJoin;\r\n    address public collateralOracle;\r\n    bytes32 public collateralIlk;\r\n    AggregatorV3Interface internal priceFeed;\r\n    uint256 public collateralPriceDecimal = 1;\r\n    bool public collateralPriceEth = false;\r\n\t\r\n    // singleton CDP for this strategy\r\n    uint256 public cdpId = 0;\r\n\t\r\n    // configurable minimum collateralization percent this strategy would hold for CDP\r\n    uint256 public minRatio = 155;\r\n    // collateralization percent buffer in CDP debt actions\r\n    uint256 public ratioBuff = 500;\r\n    uint256 public constant ratioBuffMax = 10000;\r\n    uint256 constant RAY = 10 ** 27;\r\n\r\n    constructor(\r\n        address _collateralJoin,\r\n        bytes32 _collateralIlk,\r\n        address _collateral,\r\n        uint256 _collateralDecimal,\r\n        address _collateralOracle,\r\n        uint256 _collateralPriceDecimal,\r\n        bool _collateralPriceEth,\r\n        address _want,\r\n        address _governance,\r\n        address _strategist,\r\n        address _controller,\r\n        address _timelock\r\n    )\r\n        public\r\n        StrategyBase(_want, _governance, _strategist, _controller, _timelock)\r\n    {\r\n        require(_want == _collateral, '!mismatchWant');\r\n\t\t\r\n        gemJoin = _collateralJoin;\r\n        collateralIlk = _collateralIlk;\t\t    \r\n        collateral = _collateral;   \r\n        collateralDecimal = _collateralDecimal;\r\n        collateralOracle = _collateralOracle;\r\n        priceFeed = AggregatorV3Interface(collateralOracle);\r\n        collateralPriceDecimal = _collateralPriceDecimal;\r\n        collateralPriceEth = _collateralPriceEth;\r\n    }\r\n\r\n    // **** Modifiers **** //\r\n\t\r\n    modifier onlyCDPInUse {\r\n        uint256 collateralAmt = getCollateralBalance();\r\n        require(collateralAmt > 0, '!zeroCollateral');\r\n\t\t\r\n        uint256 debtAmt = getDebtBalance();\r\n        require(debtAmt > 0, '!zeroDebt');\t\t\r\n        _;\r\n    }\r\n\t\r\n    modifier onlyCDPInitiated {        \r\n        require(cdpId > 0, '!noCDP');\t\r\n        _;\r\n    }\r\n    \r\n    modifier onlyAboveMinDebt(uint256 _daiAmt) {  \r\n        uint256 debtAmt = getDebtBalance();   \r\n        require((_daiAmt < debtAmt && (debtAmt.sub(_daiAmt) >= minDebt)) || debtAmt <= _daiAmt, '!minDebt');\r\n        _;\r\n    }\r\n\t\r\n    function getCollateralBalance() public view returns (uint256) {\r\n        (uint256 ink, ) = VatLike(vat).urns(collateralIlk, ManagerLike(dssCdpManager).urns(cdpId));\r\n        return ink;\r\n    }\r\n\t\r\n    function getDebtBalance() public view returns (uint256) {\r\n        address urnHandler = ManagerLike(dssCdpManager).urns(cdpId);\r\n        (, uint256 art) = VatLike(vat).urns(collateralIlk, urnHandler);\r\n        (, uint256 rate, , , ) = VatLike(vat).ilks(collateralIlk);\r\n        uint rad = mul(art, rate);\r\n        if (rad == 0) {\r\n            return 0;\r\n        }\r\n        uint256 wad = rad / RAY;\r\n        return mul(wad, RAY) < rad ? wad + 1 : wad;\r\n    }\t\r\n    \r\n    function ilkDebts() public view returns(uint256, uint256, bool){\r\n        (uint256 Art, uint256 rate,,uint256 line,) = VatLike(vat).ilks(collateralIlk);\r\n        uint256 currentDebt = Art.mul(rate).div(RAY);\r\n        uint256 maxDebt = line.div(RAY);\r\n        return (currentDebt, maxDebt, maxDebt > currentDebt);\r\n    }\r\n\r\n    // **** Getters ****\r\n\t\r\n    function balanceOfPool() public override view returns (uint256){\r\n        return getCollateralBalance();\r\n    }\r\n\r\n    function collateralValue(uint256 collateralAmt) public view returns (uint256){\r\n        uint256 collateralPrice = getLatestCollateralPrice();\r\n        return collateralAmt.mul(collateralPrice).mul(1e18).div(collateralDecimal).div(collateralPriceDecimal);\r\n    }\r\n\r\n    function currentRatio() public view returns (uint256) {\t\r\n        uint256 _collateral = cdpId > 0? getCollateralBalance() : 0;\r\n        if (_collateral > 0){\r\n            uint256 collateralAmt = collateralValue(_collateral).mul(100);\r\n            uint256 debtAmt = getDebtBalance();\t\t\r\n            return collateralAmt.div(debtAmt);\r\n        }else{\r\n            return 0;\r\n        }\r\n    } \r\n    \r\n    // if borrow is true (for lockAndDraw): return (maxDebt - currentDebt) if positive value, otherwise return 0\r\n    // if borrow is false (for redeemAndFree): return (currentDebt - maxDebt) if positive value, otherwise return 0\r\n    function calculateDebtFor(uint256 collateralAmt, bool borrow) public view returns (uint256) {\r\n        uint256 maxDebt = collateralAmt > 0? collateralValue(collateralAmt).mul(ratioBuffMax).div(_getBufferedMinRatio(ratioBuffMax)) : 0;\r\n\t\t\r\n        uint256 debtAmt = getDebtBalance();\r\n\t\t\r\n        uint256 debt = 0;\r\n        \r\n        if (borrow && maxDebt >= debtAmt){\r\n            debt = maxDebt.sub(debtAmt);\r\n        } else if (!borrow && debtAmt >= maxDebt){\r\n            debt = debtAmt.sub(maxDebt);\r\n        }\r\n        \r\n        return (debt > 0)? debt : 0;\r\n    }\r\n\t\r\n    function _getBufferedMinRatio(uint256 _multiplier) internal view returns (uint256){\r\n        return _multiplier.mul(minRatio).mul(ratioBuffMax.add(ratioBuff)).div(ratioBuffMax).div(100);\r\n    }\r\n\r\n    function borrowableDebt() public view returns (uint256) {\r\n        uint256 collateralAmt = getCollateralBalance();\r\n        return calculateDebtFor(collateralAmt, true);\r\n    }\r\n\r\n    function requiredPaidDebt(uint256 _redeemCollateralAmt) public view returns (uint256) {\r\n        uint256 totalCollateral = getCollateralBalance();\r\n        uint256 collateralAmt = _redeemCollateralAmt >= totalCollateral? 0 : totalCollateral.sub(_redeemCollateralAmt);\r\n        return calculateDebtFor(collateralAmt, false);\r\n    }\r\n\r\n    // **** sub-strategy implementation ****\r\n    function _convertWantToBuyback(uint256 _lpAmount) internal virtual override returns (address, uint256);\r\n\t\r\n    function _depositDAI(uint256 _daiAmt) internal virtual;\r\n\t\r\n    function _withdrawDAI(uint256 _daiAmt) internal virtual;\r\n    \r\n    function _swapDebtToWant(uint256 _swapIn) internal virtual returns(uint256);\r\n\t\r\n    // **** Oracle (using chainlink) ****\r\n\t\r\n    function getLatestCollateralPrice() public view returns (uint256){\r\n        require(collateralOracle != address(0), '!_collateralOracle');\t\r\n        (\r\n            uint80 roundID, \r\n            int price,\r\n            uint startedAt,\r\n            uint timeStamp,\r\n            uint80 answeredInRound\r\n        ) = priceFeed.latestRoundData();\r\n\t\t\r\n        if (price > 0){\t\t\r\n            int ethPrice = 1;\r\n            if (collateralPriceEth){\r\n               (,ethPrice,,,) = AggregatorV3Interface(eth_usd).latestRoundData();\t\t\t\r\n            }\r\n            return uint256(price).mul(collateralPriceDecimal).mul(uint256(ethPrice)).div(1e8).div(collateralPriceEth? 1e18 : 1);\r\n        } else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    // **** Setters ****\r\n \r\n    function setMinDebt(uint256 _minDebt) external onlyBenevolent {\r\n        minDebt = _minDebt;\r\n    }\t\r\n \r\n    function setMinRatio(uint256 _minRatio) external onlyBenevolent {\r\n        minRatio = _minRatio;\r\n    }\t\r\n\t\r\n    function setRatioBuff(uint256 _ratioBuff) external onlyBenevolent {\r\n        ratioBuff = _ratioBuff;\r\n    }\r\n\t\r\n    // **** MakerDAO CDP actions ****\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"mul-overflow\");\r\n    }\r\n\t\r\n    function toRad(uint256 wad) internal pure returns (uint256 rad) {\r\n        rad = mul(wad, RAY);\r\n    }\r\n\t\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"sub-overflow\");\r\n    }\r\n\t\r\n    function toInt(uint256 x) internal pure returns (int256 y) {\r\n        y = int256(x);\r\n        require(y >= 0, \"int-overflow\");\r\n    }\r\n\t\r\n    function convertTo18(address gemJoin, uint256 amt) internal returns (uint256 wad) {\r\n        wad = mul(amt, 10 ** (18 - GemJoinLike(gemJoin).dec()));\r\n    }\r\n\t\r\n    function _getDrawDart(address vat, address jug, address urn, bytes32 ilk, uint wad) internal returns (int256 dart) {\r\n        uint256 rate = JugLike(jug).drip(ilk);\r\n        uint256 dai = VatLike(vat).dai(urn);\r\n        if (dai < toRad(wad)) {\r\n            dart = toInt(sub(toRad(wad), dai).div(rate));\r\n            dart = mul(uint256(dart), rate) < toRad(wad) ? dart + 1 : dart;\r\n        }\r\n    }\r\n\t\r\n    function _getWipeDart(address vat, uint dai, address urn, bytes32 ilk) internal view returns (int256 dart) {\r\n        (, uint256 rate,,,) = VatLike(vat).ilks(ilk);\r\n        (, uint256 art) = VatLike(vat).urns(ilk, urn);\r\n        dart = toInt(dai.div(rate));\r\n        dart = uint256(dart) <= art ? - dart : - toInt(art);\r\n    }\r\n\t\r\n    function openCDP() external onlyBenevolent{\r\n        require(cdpId <= 0, \"!cdpAlreadyOpened\");\r\n\t\t\r\n        cdpId = ManagerLike(dssCdpManager).open(collateralIlk, address(this));\t\t\r\n\t\t\r\n        IERC20(collateral).approve(gemJoin, uint256(-1));\r\n        IERC20(debtToken).approve(daiJoin, uint256(-1));\r\n    }\r\n\t\r\n    function getUrnVatIlk() internal returns (address, address, bytes32){\r\n        return (ManagerLike(dssCdpManager).urns(cdpId), ManagerLike(dssCdpManager).vat(), ManagerLike(dssCdpManager).ilks(cdpId));\r\n    }\r\n\t\r\n    function addCollateralAndBorrow(uint256 _collateralAmt, uint256 _daiAmt) internal onlyCDPInitiated {   \r\n        require(_daiAmt.add(getDebtBalance()) >= minDebt, '!minDebt');\r\n        (address urn, address vat, bytes32 ilk) = getUrnVatIlk();\t\t\r\n\t\tGemJoinLike(gemJoin).join(urn, _collateralAmt);  \r\n\t\tManagerLike(dssCdpManager).frob(cdpId, toInt(convertTo18(gemJoin, _collateralAmt)), _getDrawDart(vat, jug, urn, ilk, _daiAmt));\r\n\t\tManagerLike(dssCdpManager).move(cdpId, address(this), toRad(_daiAmt));\r\n        if (VatLike(vat).can(address(this), address(daiJoin)) == 0) {\r\n            VatLike(vat).hope(daiJoin);\r\n        }\r\n        DaiJoinLike(daiJoin).exit(address(this), _daiAmt);\r\n    } \r\n\t\r\n    function repayAndRedeemCollateral(uint256 _collateralAmt, uint _daiAmt) internal onlyCDPInitiated onlyAboveMinDebt(_daiAmt) { \r\n        (address urn, address vat, bytes32 ilk) = getUrnVatIlk();\r\n        if (_daiAmt > 0){\r\n            DaiJoinLike(daiJoin).join(urn, _daiAmt);\r\n        }\r\n        uint256 wad18 = _collateralAmt > 0? convertTo18(gemJoin, _collateralAmt) : 0;\r\n        ManagerLike(dssCdpManager).frob(cdpId, -toInt(wad18),  _getWipeDart(vat, VatLike(vat).dai(urn), urn, ilk));\r\n        if (_collateralAmt > 0){\r\n            ManagerLike(dssCdpManager).flux(cdpId, address(this), wad18);\r\n            GemJoinLike(gemJoin).exit(address(this), _collateralAmt);\r\n        }\r\n    } \r\n\r\n    // **** State Mutation functions ****\r\n\t\r\n    function keepMinRatio() external onlyCDPInUse onlyBenignCallers {\t\t\r\n        uint256 requiredPaidback = requiredPaidDebt(0);\r\n        if (requiredPaidback > 0){\r\n            _withdrawDAI(requiredPaidback);\r\n            uint256 wad = IERC20(debtToken).balanceOf(address(this));\r\n            require(wad >= requiredPaidback, '!keepMinRatioRedeem');\r\n\t\t\t\r\n            repayAndRedeemCollateral(0, requiredPaidback);\r\n            uint256 goodRatio = currentRatio();\r\n            require(goodRatio >= minRatio.sub(1), '!stillBelowMinRatio');\r\n        }\r\n    }\r\n\t\r\n    function deposit() public override {\r\n        uint256 _want = IERC20(want).balanceOf(address(this));\r\n        (,,bool roomForNewMint) = ilkDebts();\r\n        if (_want > 0 && roomForNewMint) {\t\r\n            uint256 _newDebt = calculateDebtFor(_want.add(getCollateralBalance()), true);\r\n            if(_newDebt > 0 && _newDebt.add(getDebtBalance()) >= minDebt){\r\n               addCollateralAndBorrow(_want, _newDebt);\r\n               uint256 wad = IERC20(debtToken).balanceOf(address(this));\r\n               _depositDAI(_newDebt > wad? wad : _newDebt);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _withdrawSome(uint256 _amount) internal override returns (uint256) {\r\n        bool _full = _amount >= getCollateralBalance();\r\n        uint256 requiredPaidback = requiredPaidDebt(_amount);\r\n        \r\n        if (requiredPaidback > 0){\r\n            _withdrawDAI(requiredPaidback);\r\n            require(IERC20(debtToken).balanceOf(address(this)) >= requiredPaidback, '!mismatchAfterWithdraw');\r\n        }\r\n\t\t\r\n        repayAndRedeemCollateral(_amount, requiredPaidback);\r\n        \r\n        // sweep left debt to want\r\n        if (_full){\r\n           _swapDebtToWant(IERC20(debtToken).balanceOf(address(this)));\r\n        }\r\n        \r\n        return _amount;\r\n    }\r\n    \r\n}\r\n\r\ncontract CarefulMath {\r\n\r\n    /**\r\n     * @dev Possible error codes that we can return\r\n     */\r\n    enum MathError {\r\n        NO_ERROR,\r\n        DIVISION_BY_ZERO,\r\n        INTEGER_OVERFLOW,\r\n        INTEGER_UNDERFLOW\r\n    }\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, returns an error on overflow.\r\n    */\r\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\r\n        if (a == 0) {\r\n            return (MathError.NO_ERROR, 0);\r\n        }\r\n\r\n        uint c = a * b;\r\n\r\n        if (c / a != b) {\r\n            return (MathError.INTEGER_OVERFLOW, 0);\r\n        } else {\r\n            return (MathError.NO_ERROR, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, returns an error on overflow.\r\n    */\r\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\r\n        uint c = a + b;\r\n\r\n        if (c >= a) {\r\n            return (MathError.NO_ERROR, c);\r\n        } else {\r\n            return (MathError.INTEGER_OVERFLOW, 0);\r\n        }\r\n    }\r\n}\r\n\r\ncontract Exponential is CarefulMath {\r\n    uint constant expScale = 1e18;\r\n    uint constant doubleScale = 1e36;\r\n    uint constant halfExpScale = expScale/2;\r\n    uint constant mantissaOne = expScale;\r\n\r\n    struct Exp {\r\n        uint mantissa;\r\n    }\r\n\r\n    struct Double {\r\n        uint mantissa;\r\n    }\r\n    \r\n    /**\r\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\r\n     */\r\n    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\r\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\r\n        if (err != MathError.NO_ERROR) {\r\n            return (err, 0);\r\n        }\r\n\r\n        return (MathError.NO_ERROR, truncate(product));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\r\n     */\r\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\r\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\r\n        if (err != MathError.NO_ERROR) {\r\n            return (err, 0);\r\n        }\r\n\r\n        return addUInt(truncate(product), addend);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\r\n     */\r\n    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\r\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n\r\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\r\n    }\r\n\r\n    /**\r\n     * @dev Truncates the given exp to a whole number value.\r\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\r\n     */\r\n    function truncate(Exp memory exp) pure internal returns (uint) {\r\n        // Note: We are not using careful math here as we're performing a division that cannot fail\r\n        return exp.mantissa / expScale;\r\n    }\r\n}\r\n\r\ninterface IFuseToken {\r\n    function mint(uint mintAmount) external returns (uint);\r\n    function redeem(uint redeemTokens) external returns (uint);\r\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\r\n    function exchangeRateCurrent() external returns (uint);\r\n    function exchangeRateStored() external view returns (uint);\r\n    function supplyRatePerBlock() external view returns (uint);\r\n    function balanceOfUnderlying(address account) external returns (uint);\r\n}\r\n\r\ninterface ICurveFi_3 {\r\n    function exchange(int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount) external;\r\n}\r\n\r\ncontract StrategyMakerWETHV2 is StrategyMakerBase, Exponential {\r\n    // strategy specific: https://github.com/makerdao/mcd-changelog\r\n    address public weth_collateral = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address public link_eth_usd = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\r\n    uint256 public weth_collateral_decimal = 1e18;\r\n    uint8 public want_decimals = 18;\r\n    bytes32 public weth_ilk = \"ETH-A\";\r\n    address public weth_apt = 0x2F0b23f53734252Bda2277357e97e1517d6B042A;\r\n    uint256 public constant weth_price_decimal = 1;\r\n    bool public constant weth_price_eth = false;\r\n    \r\n    address public constant curve3crvPool = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\r\n    address public constant usdcToken = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n\t\t\r\n    // Fuse specific/configurable\r\n    address public fusePool = 0x989273ec41274C4227bCB878C2c26fdd3afbE70d;\r\n    uint256 public fusePoolDecimal = 8;// Tetranode's Locker #6 Pool\r\n    \r\n    uint256 public harvestRatio = 9000; // pencetage taken from claimable during harvest\r\n    uint256 public slippageSwap = 500; // slippage swap during non-curve amm dex\r\n    uint256 public constant DENOMINATOR = 10000;\r\n\r\n    constructor(address _governance, address _strategist, address _controller, address _timelock) \r\n        public StrategyMakerBase(\r\n            weth_apt,\r\n            weth_ilk,\r\n            weth_collateral,\r\n            weth_collateral_decimal,\t\t\t\r\n            link_eth_usd,\r\n            weth_price_decimal,\r\n            weth_price_eth,\r\n            weth_collateral,\r\n            _governance,\r\n            _strategist,\r\n            _controller,\r\n            _timelock\r\n        )\r\n    {\r\n        // for want exchange\r\n        IERC20(debtToken).safeApprove(curve3crvPool, uint256(-1));\r\n        \r\n        // for fuse pool\r\n        _setupPoolApprovals();  \t\r\n    }\r\n\t\r\n    // **** Setters ****\r\n    \r\n    function setSlippageSwap(uint256 _slippage) public onlyBenevolent{\r\n        slippageSwap = _slippage;\r\n    }\r\n    \r\n    function setHarvestRatio(uint256 _ratio) public onlyBenevolent{\r\n        harvestRatio = _ratio;\r\n    }\r\n\t\r\n    // **** State Mutation functions ****\r\n    \r\n    function _setupPoolApprovals() internal {\r\n        IERC20(debtToken).safeApprove(fusePool, uint256(-1));\r\n        IERC20(fusePool).safeApprove(fusePool, uint256(-1)); \r\n    }\r\n    \r\n    function migrateFusePool(address _fusePool) public {\r\n        require(msg.sender == timelock, '!timelock');\r\n        \r\n        // withdraw all debt token if needed\r\n        if (IERC20(fusePool).balanceOf(address(this)) > 0){\r\n            _withdrawDAI(IFuseToken(fusePool).balanceOfUnderlying(address(this)));\r\n            require(IFuseToken(fusePool).balanceOfUnderlying(address(this)) == 0, '!stillGotSomeInFuse');\r\n        }\r\n\t    \r\n        // migrate to new destination\r\n        fusePool = _fusePool;\r\n        fusePoolDecimal = ERC20(fusePool).decimals();\r\n        \r\n        // setup for new meta pool\r\n        _setupPoolApprovals(); \r\n        \r\n        // reinvest to new Convex pool\r\n        _depositDAI(IERC20(debtToken).balanceOf(address(this)));\r\n    }\r\n\t\r\n    function harvest() public override onlyBenevolent {\r\n        uint256 _claimable = getHarvestable();\r\n        if (_claimable > 0){\r\n            _withdrawDAI(_claimable);\r\n            _swapDebtToWant(IERC20(debtToken).balanceOf(address(this)));\r\n        }\r\n\t\t\r\n        uint256 _wethAmount = balanceOfWant();\r\n        if (_wethAmount > 0){\r\n            // Buyback and Reinvest\r\n            uint256 _buybackLpAmount = _wethAmount.mul(performanceFee).div(performanceMax);\r\n            if (buybackEnabled == true && _buybackLpAmount > 0){\r\n                buybackAndNotify(weth, _buybackLpAmount);\r\n            }\r\n             \r\n            uint256 _wantBal = IERC20(want).balanceOf(address(this));\r\n            if (_wantBal > 0){\r\n                lastHarvestBlock = block.number;\r\n                lastHarvestInWant = _wantBal;\r\n                deposit();\r\n            }\r\n        }\r\n    }\r\n\t\r\n    function _convertWantToBuyback(uint256 _lpAmount) internal override returns (address, uint256){\r\n        return (weth_collateral, _lpAmount);\r\n    }\r\n\t\r\n    function _swapDebtToWant(uint256 _swapIn) internal override returns(uint256){\r\n        uint256 _outMin;\r\n        if (_swapIn > 0){\r\n            uint256 _debtAmt = IERC20(debtToken).balanceOf(address(this));\r\n            uint256 _toSwap = _swapIn > _debtAmt? _debtAmt : _swapIn;\r\n            _outMin = wantFromDebt(_toSwap);\r\n            ICurveFi_3(curve3crvPool).exchange(0, 1, _toSwap, 0);\r\n        }\r\n        \r\n        uint256 _want = balanceOfWant();\r\n        uint256 _usdcAmt = IERC20(usdcToken).balanceOf(address(this));\r\n        if (_usdcAmt > 0){\r\n            address[] memory _swapPath = new address[](2);\r\n            _swapPath[0] = usdcToken;\r\n            _swapPath[1] = weth;\r\n            _swapUniswapWithDetailConfig(usdcToken, weth, _usdcAmt, _outMin, _swapPath, sushiRouter);\r\n        }\r\n        uint256 _wantAfter = balanceOfWant();\r\n        return _wantAfter > _want? _wantAfter.sub(_want) : 0;\r\n    }\r\n\t\r\n    function wantFromDebt(uint256 _toSwappedDebt) public view returns (uint256){\r\n        (,int ethPrice,,,) = AggregatorV3Interface(eth_usd).latestRoundData();// eth price from chainlink in 1e8 decimal\r\n        uint256 _want = _toSwappedDebt.mul(1e8).div(uint256(ethPrice));\r\n        return _want.mul(DENOMINATOR.sub(slippageSwap)).div(DENOMINATOR);\r\n    }\r\n\t\r\n    function _depositDAI(uint256 _daiAmt) internal override{\r\n        uint256 _debt = IERC20(debtToken).balanceOf(address(this));\r\n        if (_debt == 0){\r\n            return;\r\n        }\r\n        \r\n        require(IFuseToken(fusePool).mint(_debt) == 0, '!mintFuse');\r\n    }\r\n\t\r\n    function _withdrawDAI(uint256 _daiAmt) internal override{\r\n        if (_daiAmt == 0){\r\n            return;\r\n        }\r\n\t    \r\n        if (_daiAmt >= getDebtBalance()){\r\n            require(IFuseToken(fusePool).redeem(IERC20(fusePool).balanceOf(address(this))) == 0, '!redeemAllFromFuse');\r\n        }else {\t\r\n            require(IFuseToken(fusePool).redeemUnderlying(_daiAmt) == 0, '!redeemUnderlyingFromFuse');\t\t\t\r\n        }\r\n    }\r\n\r\n    // Controller only function for creating additional rewards from dust\r\n    function withdraw(IERC20 _asset) external override returns (uint256 balance) {\r\n        require(address(_asset) != fusePool, '!fusePool');\r\n        _withdrawNonWantAsset(_asset);\r\n    }\r\n\r\n    // **** Views ****\r\n\t\r\n    function balanceOfDebtToken() public view returns (uint256){\r\n        uint exchangeRateStored = IFuseToken(fusePool).exchangeRateStored();\r\n        (, uint256 bal) = mulScalarTruncate(Exp({mantissa: exchangeRateStored}), IERC20(fusePool).balanceOf(address(this)));\r\n        return bal.add(IERC20(debtToken).balanceOf(address(this)));\r\n    }\r\n\r\n    // return claimable DAI as supply interest\r\n    function getHarvestable() public returns (uint256) {\r\n        uint256 _bal = IFuseToken(fusePool).balanceOfUnderlying(address(this));\r\n        uint256 _debt = getDebtBalance();\r\n        return _bal > _debt? (_bal.sub(_debt)).mul(harvestRatio).div(DENOMINATOR) : 0;//add some buffer\r\n    }\r\n\r\n    function getName() external override pure returns (string memory) {\r\n        return \"StrategyMakerWETHV2\";\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfDebtToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"benignCallers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowableDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"borrow\",\"type\":\"bool\"}],\"name\":\"calculateDebtFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cdpId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralIlk\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralPriceDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralPriceEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmt\",\"type\":\"uint256\"}],\"name\":\"collateralValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curve3crvPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiJoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayBlockRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFundMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dssCdpManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eth_usd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"figureOutPath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"useSushi\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"swapPath\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fusePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fusePoolDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gemJoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDebtBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHarvestable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestCollateralPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ilkDebts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jug\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepMinRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvestBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvestInWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"link_eth_usd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fusePool\",\"type\":\"address\"}],\"name\":\"migrateFusePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mmToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openCDP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratioBuff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratioBuffMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redeemCollateralAmt\",\"type\":\"uint256\"}],\"name\":\"requiredPaidDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setBenignCallers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_buybackEnabled\",\"type\":\"bool\"}],\"name\":\"setBuybackEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delayBlockRequired\",\"type\":\"uint256\"}],\"name\":\"setDelayBlockRequired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devFundFee\",\"type\":\"uint256\"}],\"name\":\"setDevFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"}],\"name\":\"setHarvestRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterChef\",\"type\":\"address\"}],\"name\":\"setMasterChef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDebt\",\"type\":\"uint256\"}],\"name\":\"setMinDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minRatio\",\"type\":\"uint256\"}],\"name\":\"setMinRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratioBuff\",\"type\":\"uint256\"}],\"name\":\"setRatioBuff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"setSlippageSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"univ2Router2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toSwappedDebt\",\"type\":\"uint256\"}],\"name\":\"wantFromDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth_apt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth_collateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth_collateral_decimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth_ilk\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth_price_decimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth_price_eth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StrategyMakerWETHV2","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000043229759e12efbe3e2a0fb0510b15e516d04644200000000000000000000000043229759e12efbe3e2a0fb0510b15e516d0464420000000000000000000000004bf5059065541a2b176500928e91fbfd0b121d070000000000000000000000005dae9b27313670663b34ac8bffd18825bb9df736","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0f79db43484aba7e340bc431c1355f9eb53637f68b50d5f538588c27f907251a"}]}