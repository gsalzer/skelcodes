{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.0;\r\n\r\ninterface IERC20 {\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract WrappedHydraStaking {\r\n\t/* Variables */\r\n\tuint256 private _lastUpdateTime;\r\n\tuint256 private _rewardRate;\r\n\tuint256 private _rewardPerTokenStored;\r\n\tuint256 private _totalSupply;\r\n\taddress private _owner;\r\n\tbool    private _initialized;\r\n\tIERC20  private _wrappedHydra;\r\n\tmapping(address => uint256) private _userRewardPerTokenPaid;\r\n\tmapping(address => uint256) private _rewards;\r\n\tmapping(address => uint256) private _balances;\r\n\t\r\n\t/* Modifiers */\r\n\tmodifier initialized() {\r\n\t\trequire( _initialized, \"Not initialized\" );\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire( _owner == msg.sender, \"Caller is not the owner\" );\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier updateReward(address account) {\r\n\t\t_rewardPerTokenStored = rewardPerToken();\r\n\t\t_lastUpdateTime = block.number;\r\n\t\tif ( account != address(0) ) {\r\n\t\t\tuint256 reward = (_balances[account] * (_rewardPerTokenStored - _userRewardPerTokenPaid[account])) / 1e18;\r\n\t\t\t_rewards[account] += reward;\r\n\t\t\t_userRewardPerTokenPaid[account] = _rewardPerTokenStored;\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\t\r\n\t/* Externals */\r\n\tfunction initialize(address owner_, address wrappedHydra_, uint256 reward_) external returns(bool) {\r\n\t\trequire( ! _initialized, \"Already initialized\" );\r\n\t\trequire( reward_ > 0, \"Reward is zero\" );\r\n\t\t_wrappedHydra     = IERC20(wrappedHydra_);\r\n\t\trequire( _wrappedHydra.transferFrom(owner_, address(this), reward_), \"Token transfer failed\" );\r\n\t\t_initialized      = true;\r\n\t\t_owner            = owner_;\r\n\t\t_totalSupply      += 1;\r\n\t\t_balances[owner_] += 1;\r\n\t\t_lastUpdateTime   = block.number;\r\n\t\t_rewardRate       = 132e5; // 8 HYD / round / delegate on Hydra blockchain;\r\n\t\temit Staked(msg.sender, 1);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction stake(uint256 amount_) external initialized updateReward(msg.sender) {\r\n\t\trequire( amount_ > 0, \"Cannot stake zero liquidity\" );\r\n\t\trequire( _wrappedHydra.transferFrom(msg.sender, address(this), amount_), \"Token transfer failed\" );\r\n\t\t_totalSupply += amount_;\r\n\t\t_balances[msg.sender] += amount_;\r\n\t\temit Staked(msg.sender, amount_);\r\n\t}\r\n\r\n\tfunction withdraw(uint256 amount_) public initialized updateReward(msg.sender) {\r\n\t\trequire( amount_ <= _balances[msg.sender], \"Insufficient funds\" );\r\n\t\trequire( amount_ > 0, \"Invalid amount to withdraw\" );\r\n\t\trequire( _wrappedHydra.transfer(msg.sender, amount_), \"Token transfer failed\" );\r\n\t\t_totalSupply -= amount_;\r\n\t\t_balances[msg.sender] -= amount_;\r\n\t\temit Withdrawn(msg.sender, amount_);\r\n\t}\r\n\r\n\tfunction getReward() public initialized updateReward(msg.sender) {\r\n\t\tuint256 reward = _rewards[msg.sender];\r\n\t\tif ( reward > 0 ) {\r\n\t\t\t_rewards[msg.sender] = 0;\r\n\t\t\trequire( _wrappedHydra.transfer(msg.sender, reward), \"Token transfer failed\");\r\n\t\t\temit RewardPaid(msg.sender, reward);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction exit() external initialized {\r\n\t\twithdraw(_balances[msg.sender]);\r\n\t\tgetReward();\r\n\t}\r\n  \r\n\tfunction withdrawRewardSupply(uint256 amount_) external initialized onlyOwner {\r\n\t\tuint256 rewardSupply_ = _wrappedHydra.balanceOf(address(this)) - _totalSupply;\r\n\t\trequire( rewardSupply_ >= amount_, \"Insufficient amount to withdraw\" );\r\n\t\trequire( _wrappedHydra.transfer(msg.sender, amount_), \"Token transfer failed\");\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner_) external onlyOwner {\r\n\t\trequire( newOwner_ != address(0), \"New owner has zero address\" );\r\n\t\temit OwnershipTransferred(_owner, newOwner_);\r\n\t\t_owner = newOwner_;\r\n\t}\r\n\r\n\t/* Constants */\r\n\tfunction totalSupply() external view returns(uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\tfunction rewardSupply() external view returns(uint256) {\r\n\t\treturn _wrappedHydra.balanceOf(address(this)) - _totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address account_) external view returns(uint256) {\r\n\t\treturn _balances[account_];\r\n\t}\r\n\r\n\tfunction rewardRate() external view returns(uint256) {\r\n\t\treturn _rewardRate;\r\n\t}\r\n  \r\n\tfunction estimateReward(address account_) external view returns (uint256) {\r\n\t\treturn (\r\n\t\t\t_balances[account_] * (\r\n\t\t\t\trewardPerToken() - _userRewardPerTokenPaid[account_]\r\n\t\t\t)\r\n\t\t) / 1e18 + _rewards[account_];\r\n\t}\r\n\r\n\t/* Internals */\r\n\tfunction rewardPerToken() internal view returns (uint256) {\r\n\t\tif ( _totalSupply == 0 ) {\r\n\t\t\treturn _rewardPerTokenStored;\r\n\t\t}\r\n\t\treturn _rewardPerTokenStored + ((block.number - _lastUpdateTime) * _rewardRate * 1e18 / _totalSupply);\r\n\t}\r\n\t\r\n\t/* Events */\r\n\tevent Staked(address indexed user, uint256 indexed amount);\r\n\tevent Withdrawn(address indexed user, uint256 indexed amount);\r\n\tevent RewardPaid(address indexed recipient, uint256 indexed amount);\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\tevent Locked(uint256 indexed amount);\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"estimateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrappedHydra_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdrawRewardSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WrappedHydraStaking","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"","EVMVersion":"byzantium","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bb97183cb99c4ee6b20f2b23f03249f6394f4a3ef89ff66ddee3f0705d48bc40"}]}