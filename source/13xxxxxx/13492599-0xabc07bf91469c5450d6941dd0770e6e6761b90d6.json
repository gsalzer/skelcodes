{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/external/adapters/nTokenERC20Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"interfaces/notional/nTokenERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @notice ERC20 proxy for nToken contracts that forwards calls to the Router, all nToken\\n/// balances and allowances are stored in at single address for gas efficiency. This contract\\n/// is used simply for ERC20 compliance.\\ncontract nTokenERC20Proxy is IERC20 {\\n    /// @notice Will be \\\"nToken {Underlying Token}.name()\\\", therefore \\\"USD Coin\\\" will be\\n    /// nToken USD Coin\\n    string public name;\\n\\n    /// @notice Will be \\\"n{Underlying Token}.symbol()\\\", therefore \\\"USDC\\\" will be \\\"nUSDC\\\"\\n    string public symbol;\\n\\n    /// @notice Inherits from Constants.INTERNAL_TOKEN_PRECISION\\n    uint8 public constant decimals = 8;\\n\\n    /// @notice Address of the notional proxy\\n    nTokenERC20 public immutable proxy;\\n\\n    /// @notice Currency id that this nToken refers to\\n    uint16 public immutable currencyId;\\n\\n    constructor(\\n        nTokenERC20 proxy_,\\n        uint16 currencyId_,\\n        string memory underlyingName_,\\n        string memory underlyingSymbol_\\n    ) {\\n        proxy = proxy_;\\n        currencyId = currencyId_;\\n        name = string(abi.encodePacked(\\\"nToken \\\", underlyingName_));\\n        symbol = string(abi.encodePacked(\\\"n\\\", underlyingSymbol_));\\n    }\\n\\n    /// @notice Total number of tokens in circulation\\n    function totalSupply() external view override returns (uint256) {\\n        // Total supply is looked up via the token address\\n        return proxy.nTokenTotalSupply(address(this));\\n    }\\n\\n    /// @notice Get the number of tokens held by the `account`\\n    /// @param account The address of the account to get the balance of\\n    /// @return The number of tokens held\\n    function balanceOf(address account) external view override returns (uint256) {\\n        return proxy.nTokenBalanceOf(currencyId, account);\\n    }\\n\\n    /// @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n    /// @param account The address of the account holding the funds\\n    /// @param spender The address of the account spending the funds\\n    /// @return The number of tokens approved\\n    function allowance(address account, address spender) external view override returns (uint256) {\\n        return proxy.nTokenTransferAllowance(currencyId, account, spender);\\n    }\\n\\n    /// @notice Approve `spender` to transfer up to `amount` from `src`\\n    /// @dev This will overwrite the approval amount for `spender`\\n    ///  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n    ///  emit:Approval\\n    /// @param spender The address of the account which may transfer tokens\\n    /// @param amount The number of tokens that are approved (2^256-1 means infinite)\\n    /// @return Whether or not the approval succeeded\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        bool success = proxy.nTokenTransferApprove(currencyId, msg.sender, spender, amount);\\n        // Emit approvals here so that they come from the correct contract address\\n        if (success) emit Approval(msg.sender, spender, amount);\\n        return success;\\n    }\\n\\n    /// @notice Transfer `amount` tokens from `msg.sender` to `to`\\n    /// @dev emit:Transfer\\n    /// @param to The address of the destination account\\n    /// @param amount The number of tokens to transfer\\n    /// @return Whether or not the transfer succeeded\\n    function transfer(address to, uint256 amount) external override returns (bool) {\\n        bool success = proxy.nTokenTransfer(currencyId, msg.sender, to, amount);\\n        // Emit transfer events here so they come from the correct contract\\n        if (success) emit Transfer(msg.sender, to, amount);\\n        return success;\\n    }\\n\\n    /// @notice Transfer `amount` tokens from `from` to `to`\\n    /// @dev emit:Transfer emit:Approval\\n    /// @param from The address of the source account\\n    /// @param to The address of the destination account\\n    /// @param amount The number of tokens to transfer\\n    /// @return Whether or not the transfer succeeded\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        bool success =\\n            proxy.nTokenTransferFrom(currencyId, msg.sender, from, to, amount);\\n\\n        // Emit transfer events here so they come from the correct contract\\n        if (success) emit Transfer(from, to, amount);\\n        return success;\\n    }\\n\\n    /// @notice Returns the present value of the nToken's assets denominated in asset tokens\\n    function getPresentValueAssetDenominated() external view returns (int256) {\\n        return proxy.nTokenPresentValueAssetDenominated(currencyId);\\n    }\\n\\n    /// @notice Returns the present value of the nToken's assets denominated in underlying\\n    function getPresentValueUnderlyingDenominated() external view returns (int256) {\\n        return proxy.nTokenPresentValueUnderlyingDenominated(currencyId);\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/notional/nTokenERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\ninterface nTokenERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    function nTokenTotalSupply(address nTokenAddress) external view returns (uint256);\\n\\n    function nTokenTransferAllowance(\\n        uint16 currencyId,\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function nTokenBalanceOf(uint16 currencyId, address account) external view returns (uint256);\\n\\n    function nTokenTransferApprove(\\n        uint16 currencyId,\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function nTokenTransfer(\\n        uint16 currencyId,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function nTokenTransferFrom(\\n        uint16 currencyId,\\n        address spender,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function nTokenTransferApproveAll(address spender, uint256 amount) external returns (bool);\\n\\n    function nTokenClaimIncentives() external returns (uint256);\\n\\n    function nTokenPresentValueAssetDenominated(uint16 currencyId) external view returns (int256);\\n\\n    function nTokenPresentValueUnderlyingDenominated(uint16 currencyId)\\n        external\\n        view\\n        returns (int256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract nTokenERC20\",\"name\":\"proxy_\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"currencyId_\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"underlyingName_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"underlyingSymbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currencyId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPresentValueAssetDenominated\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPresentValueUnderlyingDenominated\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"contract nTokenERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"nTokenERC20Proxy","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001344a36a1b56144c3bc62e7757377d288fde03690000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000005457468657200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034554480000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}