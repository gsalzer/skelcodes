{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nlibrary Math {\r\n    function max(uint a, uint b) internal pure returns (uint) {\r\n        return a >= b ? a : b;\r\n    }\r\n    function min(uint a, uint b) internal pure returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\ninterface erc20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function decimals() external view returns (uint8);\r\n    function balanceOf(address) external view returns (uint);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    function approve(address spender, uint value) external returns (bool);\r\n}\r\n\r\ninterface ve {\r\n    function locked__end(address) external view returns (uint);\r\n    function deposit_for(address, uint) external;\r\n}\r\n\r\ninterface delegate {\r\n    function get_adjusted_ve_balance(address, address) external view returns (uint);\r\n}\r\n\r\ninterface Gauge {\r\n    function deposit_reward_token(address, uint) external;\r\n}\r\n\r\ncontract GaugeProxy {\r\n    address constant _rkp3r = 0xEdB67Ee1B171c4eC66E6c10EC43EDBbA20FaE8e9;\r\n    address constant _vkp3r = 0x2FC52C61fB0C03489649311989CE2689D93dC1a2;\r\n    address constant ZERO_ADDRESS = 0x0000000000000000000000000000000000000000;\r\n\r\n    uint public totalWeight;\r\n\r\n    address public gov;\r\n    address public nextgov;\r\n    uint public commitgov;\r\n    uint public constant delay = 1 days;\r\n\r\n    address[] internal _tokens;\r\n    mapping(address => address) public gauges; // token => gauge\r\n    mapping(address => uint) public weights; // token => weight\r\n    mapping(address => mapping(address => uint)) public votes; // msg.sender => votes\r\n    mapping(address => address[]) public tokenVote;// msg.sender => token\r\n    mapping(address => uint) public usedWeights;  // msg.sender => total voting weight of user\r\n    mapping(address => bool) public enabled;\r\n\r\n    function tokens() external view returns (address[] memory) {\r\n        return _tokens;\r\n    }\r\n\r\n    constructor() {\r\n        gov = msg.sender;\r\n    }\r\n\r\n    modifier g() {\r\n        require(msg.sender == gov);\r\n        _;\r\n    }\r\n\r\n    function setGov(address _gov) external g {\r\n        nextgov = _gov;\r\n        commitgov = block.timestamp + delay;\r\n    }\r\n\r\n    function acceptGov() external {\r\n        require(msg.sender == nextgov && commitgov < block.timestamp);\r\n        gov = nextgov;\r\n    }\r\n\r\n    function reset() external {\r\n        _reset(msg.sender);\r\n    }\r\n\r\n    function _reset(address _owner) internal {\r\n        address[] storage _tokenVote = tokenVote[_owner];\r\n        uint _tokenVoteCnt = _tokenVote.length;\r\n\r\n        for (uint i = 0; i < _tokenVoteCnt; i ++) {\r\n            address _token = _tokenVote[i];\r\n            uint _votes = votes[_owner][_token];\r\n\r\n            if (_votes > 0) {\r\n                totalWeight -= _votes;\r\n                weights[_token] -= _votes;\r\n                votes[_owner][_token] = 0;\r\n            }\r\n        }\r\n\r\n        delete tokenVote[_owner];\r\n    }\r\n\r\n    function poke(address _owner) public {\r\n        address[] memory _tokenVote = tokenVote[_owner];\r\n        uint _tokenCnt = _tokenVote.length;\r\n        uint[] memory _weights = new uint[](_tokenCnt);\r\n\r\n        uint _prevUsedWeight = usedWeights[_owner];\r\n        uint _weight = delegate(_vkp3r).get_adjusted_ve_balance(_owner, ZERO_ADDRESS);\r\n\r\n        for (uint i = 0; i < _tokenCnt; i ++) {\r\n            uint _prevWeight = votes[_owner][_tokenVote[i]];\r\n            _weights[i] = _prevWeight * _weight / _prevUsedWeight;\r\n        }\r\n\r\n        _vote(_owner, _tokenVote, _weights);\r\n    }\r\n\r\n    function _vote(address _owner, address[] memory _tokenVote, uint[] memory _weights) internal {\r\n        // _weights[i] = percentage * 100\r\n        _reset(_owner);\r\n        uint _tokenCnt = _tokenVote.length;\r\n        uint _weight = delegate(_vkp3r).get_adjusted_ve_balance(_owner, ZERO_ADDRESS);\r\n        uint _totalVoteWeight = 0;\r\n        uint _usedWeight = 0;\r\n\r\n        for (uint i = 0; i < _tokenCnt; i ++) {\r\n            _totalVoteWeight += _weights[i];\r\n        }\r\n\r\n        for (uint i = 0; i < _tokenCnt; i ++) {\r\n            address _token = _tokenVote[i];\r\n            address _gauge = gauges[_token];\r\n            uint _tokenWeight = _weights[i] * _weight / _totalVoteWeight;\r\n\r\n            if (_gauge != address(0x0)) {\r\n                _usedWeight += _tokenWeight;\r\n                totalWeight += _tokenWeight;\r\n                weights[_token] += _tokenWeight;\r\n                tokenVote[_owner].push(_token);\r\n                votes[_owner][_token] = _tokenWeight;\r\n            }\r\n        }\r\n\r\n        usedWeights[_owner] = _usedWeight;\r\n    }\r\n\r\n    function vote(address[] calldata _tokenVote, uint[] calldata _weights) external {\r\n        require(_tokenVote.length == _weights.length);\r\n        _vote(msg.sender, _tokenVote, _weights);\r\n    }\r\n\r\n    function addGauge(address _token, address _gauge) external g {\r\n        require(gauges[_token] == address(0x0), \"exists\");\r\n        _safeApprove(_rkp3r, _gauge, type(uint).max);\r\n        gauges[_token] = _gauge;\r\n        enabled[_token] = true;\r\n        _tokens.push(_token);\r\n    }\r\n\r\n    function disable(address _token) external g {\r\n        enabled[_token] = false;\r\n    }\r\n\r\n    function enable(address _token) external g {\r\n        enabled[_token] = true;\r\n    }\r\n\r\n    function length() external view returns (uint) {\r\n        return _tokens.length;\r\n    }\r\n\r\n    function distribute() external g {\r\n        uint _balance = erc20(_rkp3r).balanceOf(address(this));\r\n        if (_balance > 0 && totalWeight > 0) {\r\n            uint _totalWeight = totalWeight;\r\n            for (uint i = 0; i < _tokens.length; i++) {\r\n                if (!enabled[_tokens[i]]) {\r\n                    _totalWeight -= weights[_tokens[i]];\r\n                }\r\n            }\r\n            for (uint x = 0; x < _tokens.length; x++) {\r\n                if (enabled[_tokens[x]]) {\r\n                    uint _reward = _balance * weights[_tokens[x]] / _totalWeight;\r\n                    if (_reward > 0) {\r\n                        address _gauge = gauges[_tokens[x]];\r\n                        Gauge(_gauge).deposit_reward_token(_rkp3r, _reward);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _safeApprove(address token, address spender, uint256 value) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(erc20.approve.selector, spender, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"acceptGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"addGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitgov\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"disable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"enable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gauges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextgov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"poke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenVote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usedWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenVote\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"weights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GaugeProxy","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4a5a471cc34551bd921f532b44b037b192138960f29b4d1cd3823027c5a57cf3"}]}